{"config":{"lang":["zh","en"],"separator":"[\\s\\-\\.]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Melody's notebook!","text":"<p> \u7ea6 246 \u4e2a\u5b57  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>      \u5141\u8bb8\u4e00\u5207\u53d1\u751f\uff0c\u4f46\u53ea\u89e3\u51b3\u95ee\u9898\u3002  </p> <p> \u7ad9\u70b9\u7edf\u8ba1</p> <p> \u9875\u9762\u603b\u6570\uff1a91 \u603b\u5b57\u6570\uff1a261249 \u4ee3\u7801\u5757\u884c\u6570\uff1a10548 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a </p> <p>\u8fd9\u662f\u4e00\u4e2a\u8bb0\u5f55\u6211\u5b66\u4e60\u8fc7\u7a0b\u548c\u7b14\u8bb0\u7684\u7f51\u7ad9\uff0c\u6d45\u964b\u4e4b\u89c1\uff0c\u4f0f\u4faf\u5353\u88c1\u3002</p> <p>\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u96be\u514d\u72af\u9519\uff0c\u5982\u679c\u53d1\u73b0\u4e86\u4ec0\u4e48\u9519\u8bef\uff0c\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u7559\u8a00\uff0c\u6216\u8005\u901a\u8fc7\u90ae\u7bb1(Melody12020831@outlook.com)\u8054\u7cfb\u6211\u3002</p> <p>\u672c\u9879\u76ee\u7684\u8bb8\u53ef\u8bc1\u4e3a \u77e5\u8bc6\u5171\u4eab\u7f72\u540d-\u975e\u5546\u4e1a\u6027\u4f7f\u7528-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab 4.0 \u56fd\u9645\u8bb8\u53ef\u534f\u8bae</p>"},{"location":"Computer_Science/","title":"Index","text":"<p> \u7ea6 74 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f</p> <p>      Per aspera ad astra       \u5faa\u6b64\u82e6\u65c5\uff0c\u4ee5\u8fbe\u661f\u8fb0\u3002  </p> <p>Abstract</p> <p>\u8fd9\u91cc\u8bb0\u5f55\u6211\u5728 cs \u76f8\u5173\u9886\u57df\u7684\u5b66\u4e60\u7b14\u8bb0\uff0c\u6709\u7684\u662f\u7cfb\u7edf\u7684\u8bfe\u7a0b\u7b14\u8bb0\uff0c\u6709\u7684\u662f\u96f6\u6563\u7684\u81ea\u5b66\u7684\u77e5\u8bc6\u3002</p> <p>\u5728\u6b64\u611f\u8c22\u5404\u4f4d\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u7ed9\u4e88\u6211\u83ab\u5927\u5e2e\u52a9\u7684\u5b66\u957f\u4eec\u3002</p>"},{"location":"Computer_Science/ADS/","title":"ADS notes","text":"<p> \u7ea6 752 \u4e2a\u5b57  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f</p> <p>\u8fd9\u90e8\u5206\u662f\u6211\u5728\u5b66\u4e60ADS\u8bfe\u7a0b\u65f6\u505a\u7684\u7b14\u8bb0\uff0c\u53c2\u8003\u4e86\u4e0d\u5c11\u5b66\u957f\u4eec\u7684\u7b14\u8bb0\u548c\u8bb2\u4e49\uff0c\u975e\u5e38\u611f\u8c22\u4ed6\u4eec\u7684\u5e2e\u52a9\u3002</p> <p>\u8fd9\u95e8\u8bfe\u7ed9\u6211\u5e26\u6765\u8fc7\u6781\u5927\u7684\u6b22\u6109\u4e0e\u75db\u82e6\uff0c\u5176\u5b9e\u5c31\u5728\u6211\u505a\u5b8c\u6240\u6709\u7684\u7b14\u8bb0\uff0c\u5199\u4e0b\u8fd9\u6bb5\u8bdd\u7684\u65f6\u5019\uff0c\u6211\u4f9d\u65e7\u8ba4\u4e3a\u6211\u5bf9\u8fd9\u95e8\u8bfe\u7684\u638c\u63e1\u5e76\u4e0d\u900f\u5f7b\u3002\u7279\u522b\u662f\u5728\u770b\u5b8c\u5b66\u957f\u4eec\u7684\u7406\u89e3\u540e\u66f4\u662f\u8ba4\u4e3a\u6211\u7684\u7406\u89e3\u8fd8\u662f\u8fc7\u4e8e\u6d45\u8584\u3002\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u8fd8\u662f\u60f3\u628a\u8fd9\u4e9b\u8bb0\u5f55\u8fc7\u7a0b\u7684\u7b14\u8bb0\u5206\u4eab\u51fa\u6765\u3002</p> <p>\u6211\u4f1a\u5728\u8003\u5b8c\u8bd5\u540e\u628a\u6211\u7684\u7b14\u8bb0\u518d\u6574\u7406\u4e00\u4e0b\u5e76\u628a\u6211\u627e\u5230\u7684\u5404\u79cd\u80fd\u591f\u5206\u4eab\u7684\u8d44\u6599\u5206\u4eab\u4e0e\u6307\u8def\u3002\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\u3002</p> <p>\u2014\u20142024.12.18 \u4e0b\u5348\u4e09\u70b9 \u4e8e\u7d2b\u91d1\u6e2f\u4e3b\u56fe</p> <p>\u8bfe\u7a0b\u4fe1\u606f</p> <ul> <li>\u667a\u4e91\u94fe\u63a5\uff1a\ud83d\udd17</li> <li>\u6388\u8bfe\uff1a\u53f6\u5fb7\u4ed5</li> <li>\u6559\u6750\uff1a\u300aIntroduction to Algorithm\u300b (\u4f01\u56fe\u653e\u4e0a\u6765 but failed \u4ee5\u540e\u518d\u8bd5 \u73b0\u5728\u7684\u8bdd\u90ae\u7bb1\u8054\u7cfb\u6211\u5427) Thomas H.Cormen, Charles Leiserson, Ronald L. Rivest, Clifford Stein</li> </ul> <p>\u6211\u5728\u8fd9\u91cc\u653e\u7684\u662f\u4e2d\u6587\u7248 pdf \u8fd8\u662f\u5efa\u8bae\u6709\u80fd\u529b\u7684\u670b\u53cb\u4eec\u53bb\u9605\u8bfb\u539f\u7248\uff0c\u8fd9\u91cc\u653e\u4e00\u4e2a selected version \u3002\u8fd8\u662f\u975e\u5e38\u5efa\u8bae\u9605\u8bfb\u5723\u7ecf\u7684\u3002\ud83e\udd7a</p> <ul> <li> <p>PPT\uff1a [\ud83d\udcc1] yds \u8001\u5e08\u7684 notes \u672a\u5f97\u5141\u8bb8\u4e0d\u5141\u8f6c\u8f7d\uff0c\u56e0\u6b64\u5c31\u4e0d\u516c\u5f00\u5230\u7f51\u4e0a\u4e86\u3002\u540c\u6837\u7684\uff0c\u60f3\u8981 PPT \u548c notes \u7684\u8bdd\uff0czju \u7684\u5c0f\u670b\u53cb\u4eec\u6b22\u8fce\u79c1\u4fe1\u6211\u83b7\u53d6\u3002</p> </li> <li> <p>\u4f5c\u4e1a\uff1a\ud83d\udcdd </p> </li> <li> <p>\u5386\u5e74\u9898\uff1a cyll \u8bda\u4fe1\u8b66\u544a\u6240\u4ee5\u4e0d\u76f4\u63a5\u653e\u94fe\u63a5\u4e86\uff0cPTA\u4e5f\u80fd\u4e70\uff0c\u6216\u8005\u4f9d\u65e7\u662f\u6765\u79c1\u4fe1\u6211\u5462\u3002\ud83d\ude0b</p> </li> <li> <p>\u8bb2\u4e49\uff1a wyy \u7684\u8bb2\u4e49\u771f\u7684\u6551\u5927\u547d\uff0c\u83b7\u53d6\u65b9\u5f0f\u540c\u4e0a\u3002\ud83d\ude0b</p> </li> <li> <p>\u6574\u7406\uff1a\u4e00\u4efd\u6211\u5728\u590d\u4e60\u7684\u65f6\u5019\u7b80\u5355\u6574\u7406\u7684\u5404\u79cd\u95ee\u9898\u7684\u590d\u6742\u5ea6\uff0c\u8fd1\u4f3c\u89e3\u7684\u6bd4\u3002</p> </li> </ul> <p>\u5176\u5b9e\u5462\uff0c\u5f00\u59cb\u8bb0\u5f55\u8fd9\u95e8\u8bfe\u7684\u7b14\u8bb0\u662f\u60f3\u7ec3\u4e60\u4e00\u4e0b\u6211\u7684 latex \uff0c\u4e0d\u8fc7\u540e\u6765\u6211\u5f00\u59cb\u642d\u5efa\u8fd9\u4e2a\u7f51\u7ad9\u4e86\uff0c\u6240\u4ee5\u53ef\u80fd\u8fd9\u4f1a\u662f\u6211\u552f\u4e00\u4e00\u7bc7\u7528 latex \u5199\u7684\u7b14\u8bb0\u5427\u3002\u8fd9\u91cc\u7ed9\u51fa pdf \u7248\u7684\u4e0b\u8f7d\u94fe\u63a5\u4e0e latex \u6e90\u7801(\u53ef\u4ee5\u76f4\u89c2\u770b\u5230\u6211\u5bf9latex\u7684\u7406\u89e3\u7684\u52a0\u6df1\uff08x\uff09\u771f\u7684\u6df1\u4e86\u5417)</p>  Advanced Data Structure   1,958 KB / 2025-01-03 <p> \u4e0b\u8f7d</p>  Advanced Data Structure   201 KB / 2025-01-03 <p> \u4e0b\u8f7d</p> <p>\u8bf4\u5b9e\u8bdd\uff0c\u8003\u5b8c\u5373\u51fa\u5206\u7684\u6a21\u5f0f\u4f9d\u65e7\u5341\u5206\u523a\u6fc0\u3002\u6211\u4eec\u4eca\u5e74\u7684\u9898\u76ee\u51fa\u9519\u4e86\u4e24\u9053\uff0c\u6700\u8fd1\u70b9\u5bf9 \\(XY\\) \u9700\u8981\u6392\u5e8f\u624d\u80fd\u8fbe\u5230 \\(O(n \\log n)\\) \u8fd9\u4e00\u9053\uff0c\u4ee5\u53ca\u5916\u6392\u7684\u4e00\u9053\uff0c\u8fd9\u4e24\u9053\u9898\u76f4\u63a5\u9001\u5206\u4e86\u3002\u8fd9\u5b66\u671f\u6700\u8ba9\u6211\u6050\u60e7\u5bb3\u6015\u7684\u5c31\u662f\u8fd9\u95e8\u81ed\u540d\u662d\u8457\u7684\u8bfe\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4e0a\u4e0b\u6765\u4e4b\u540e\u4e5f\u8fd8\u597d\uff0c\u53c8\u56e0\u4e3a\u590d\u4e60\u5730\u6bd4\u8f83\u5145\u5206\uff0c\u6700\u540e\u7684\u6210\u7ee9\u4e5f\u8fd8\u8fc7\u5f97\u53bb\u3002\u53cd\u800c\u662f\u5176\u4ed6\u5b66\u79d1\u7684\u7684\u671f\u672b\u51fa\u4e4e\u4eba\u610f\u6599\u3002\u5176\u5b9e\u8003\u5b8c\u540e\u53f6\u8001\u5e08\u7684\u67e5\u8001\u5e08\u53c8\u66f4\u65b0\u4e86\u3002\u4ed6\u771f\u7684\u662f\u4e00\u4f4d\u771f\u8bda\u4e14\u7387\u6027\u7684\u8001\u5e08\u3002\u4ed6\u5f88\u52aa\u529b\u5730\u5728\u8bb2\u61c2\uff0c\u540c\u65f6\u5728\u522b\u7684\u8001\u5e08\u4e0a\u8bfe\u559d\u4e1c\u65b9\u6811\u53f6\u3001\u4e09\u5f97\u5229\u4fdd\u6301\u6e05\u9192\u7684\u65f6\u5019\uff0c\u4ed6\u4e0a\u8bfe\u559d\u53ef\u4e50\u3002ds\uff0cads\uff0cyds\uff0cyyds\uff01</p> <p>\u518d\u66f4\uff0c\u51fa\u5206\u4e86\uff0c\u4ed6\u771f\u7684\uff0c\u6d53\u6d53\u5e08\u751f\u60c5\u554a\u3002\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a</p>"},{"location":"Computer_Science/ADS/Homework/","title":"Homework","text":"<p> \u7ea6 8718 \u4e2a\u5b57  67 \u884c\u4ee3\u7801  15 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 44 \u5206\u949f</p> <p>Abstract</p> <p>\u6570\u636e\u7ed3\u6784\u4e4b\u540e\u7684\u7b97\u6cd5\u5206\u6790\u7684\u5b66\u4e60\u66f2\u7ebf\u9661\u7136\u4e0a\u5347\u3002\u540c\u6837\u7684\uff0c\u4ee5\u4e0b\u5747\u4e3a\u6211\u5728\u5b66\u4e60 ADS \u65f6\u7684\u4f5c\u4e1a\u9898\u4e0e\u6211\u7684\u4e2a\u4eba\u89c1\u89e3\u3002\u8bf8\u541b\u89c1\u7b11\u3002</p>"},{"location":"Computer_Science/ADS/Homework/#hw1","title":"HW1","text":"Question <p>If the depth of an AVL tree is 6 (the depth of an empty tree is defined to be -1), then the minimum possible number of nodes in this tree is:</p> <p>A.13   B.17   C.20   D.33</p> Answer <p>\u5957\u7528\u516c\u5f0f \\(N_{min} = F_{h+3} - 1\\) \u5f97\u5230 \\(N_{min} = F_{9} - 1 = 34 - 1 = 33\\) \uff0c\u6545\u9009 D\u3002</p> Question <p>Insert 2, 1, 4, 5, 9, 3, 6, 7 into an initially empty AVL tree.  Which one of the following statements is FALSE?</p> <p>A.4 is the root</p> <p>B.3 and 7 are siblings</p> <p>C.2 and 6 are siblings</p> <p>D.9 is the parent of 7</p> Answer <p>B \u6700\u7ec8\u7ed3\u679c\u5982\u4e0b</p> <p></p> Question <p>For the result of accessing the keys 3, 9, 1, 5 in order in the splay tree in the following figure, which one of the following statements is FALSE?</p> <p></p> <p>A.5 is the root</p> <p>B.1 and 9 are siblings</p> <p>C.6 and 10 are siblings</p> <p>D.3 is the parent of 4</p> Answer <p>D</p> Question <p>When doing amortized analysis, which one of the following statements is FALSE?</p> <p>A.Aggregate analysis shows that for all n, a sequence of n operations takes worst-case time \\(T(n)\\) in total.  Then the amortized cost per operation is therefore \\(T(n)/n\\)</p> <p>B.For potential method, a good potential function should always assume its maximum at the start of the sequence</p> <p>C.For accounting method, when an operation's amortized cost exceeds its actual cost, we save the difference as credit to pay for later operations whose amortized cost is less than their actual cost</p> <p>D.The difference between aggregate analysis and accounting method is that the later one assumes that the amortized costs of the operations may differ from each other</p> Answer <p>B</p> <p>\u5e94\u8be5\u662f minimum</p>"},{"location":"Computer_Science/ADS/Homework/#hw2","title":"HW2","text":"Question <p>A 2-3 tree with 3 nonleaf nodes must have 18 keys at most. (T/F)</p> Answer <p>T</p> <p>\u6839\u8282\u70b9\u8282\u70b9\u6570 between \\(2\\) and \\(M\\) ,\u975e\u53f6\u8282\u70b9 (except root) \u8282\u70b9\u6570 between \\(\\lceil \\frac{M}{2} \\rceil\\) and \\(M\\)</p> <p>\u6240\u4ee5\u6839\u8282\u70b9\u4e00\u4e2a\u952e\u503c\u4e24\u4e2a\u5b69\u5b50\uff0c\u4e24\u4e2a\u975e\u53f6\u8282\u70b9\u4e24\u4e2a\u952e\u503c\u4e09\u4e2a\u5b69\u5b50\uff0c\u6bcf\u4e2a\u53f6\u8282\u70b9\u4e09\u4e2a\u503c\uff0c\u4e00\u5171 \\(2 \\times 3 \\times 3 = 18\\) \u4e2a</p> Question <p>In the red-black tree that results after successively inserting the keys 41; 38; 31; 12; 19; 8 into an initially empty red-black tree, which one of the following statements is FALSE?</p> <p>A.38 is the root</p> <p>B.19 and 41 are siblings, and they are both red</p> <p>C.12 and 31 are siblings, and they are both black</p> <p>D.8 is red</p> Answer <p>B \u6700\u7ec8\u7ed3\u679c\u5982\u4e0b</p> <p></p> Question <p>After deleting 15 from the red-black tree given in the figure, which one of the following statements must be FALSE?</p> <p></p> <p>A.11 is the parent of 17, and 11 is black</p> <p>B.17 is the parent of 11, and 11 is red</p> <p>C.11 is the parent of 17, and 11 is red</p> <p>D.17 is the parent of 11, and 17 is black</p> Answer <p>C</p> Question <p>Insert 3, 1, 4, 5, 9, 2, 6, 8, 7, 0 into an initially empty 2-3 tree (with splitting).  Which one of the following statements is FALSE?</p> <p>A.7 and 8 are in the same node</p> <p>B.the parent of the node containing 5 has 3 children</p> <p>C.the first key stored in the root is 6</p> <p>D.there are 5 leaf nodes</p> Answer <p>A \u6700\u7ec8\u7ed3\u679c\u5982\u4e0b</p> <p></p> Question <p>After deleting 9 from the 2-3 tree given in the figure, which one of the following statements is FALSE?</p> <p></p> <p>A.the root is full</p> <p>B.the second key stored in the root is 6</p> <p>C.6 and 8 are in the same node</p> <p>D.6 and 5 are in the same node</p> Answer <p>D \u6700\u7ec8\u7ed3\u679c\u6709\u7a7a\u8865\u4e0a\u6765</p> Question <p>Which of the following statements concerning a B+ tree of order M is TRUE?</p> <p>A.the root always has between 2 and M children</p> <p>B.not all leaves are at the same depth</p> <p>C.leaves and nonleaf nodes have some key values in common</p> <p>D.all nonleaf nodes have between \\(\\lceil \\frac{M}{2} \\rceil\\) and M children</p> Answer <p>C</p> <p>A \u4e00\u4e2a\u8282\u70b9\u65f6\uff1b B \u5b9a\u4e49\u4e3a\u76f8\u540c\u6df1\u5ea6\uff1b D \u9664\u4e86\u6839\u8282\u70b9</p> Question <p>Consider the following buffer management problem. Initially the buffer size (the number of blocks) is one. Each block can accommodate exactly one item. As soon as a new item arrives, check if there is an available block. If yes, put the item into the block, induced a cost of one. Otherwise, the buffer size is doubled, and then the item is able to put into. Moreover, the old items have to  be moved into the new buffer so it costs \\(k+1\\) to make this insertion, where k is the number of old items. Clearly, if there are \\(N\\) items, the worst-case cost for one insertion can be \\(\\Omega(N)\\) .  To show that the average cost is \\(O(1)\\) , let us turn to the amortized analysis. To simplify the problem, assume that the buffer is full after all the N items are placed. Which of the following potential functions works?</p> <p>A.The number of items currently in the buffer</p> <p>B.The opposite number of items currently in the buffer</p> <p>C.The number of available blocks currently in the buffer</p> <p>D.The opposite number of available blocks in the buffer</p> Answer <p>D</p> <p></p>"},{"location":"Computer_Science/ADS/Homework/#hw3","title":"HW3","text":"Question <p>In distributed indexing, document-partitioned strategy is to store on each node all the documents that contain the terms in a certain range. (T/F)</p> Answer <p>F</p> <p>Term-partitioned index \u5c06\u5012\u6392\u8868\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u533a\uff0c\u5b58\u50a8\u4e00\u5b9a\u8303\u56f4\u5185\u6bcf\u4e2a\u5355\u8bcd\u7684\u6240\u6709\u6587\u6863\uff0c\u66f4\u6709\u5229\u4e8e\u67e5\u8be2\u3002</p> <p>Document-partitioned index \u5c06\u5012\u6392\u8868\u6309\u7167\u6587\u6863\u8fdb\u884c\u5206\u533a\uff0c\u5b58\u50a8\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u6587\u6863\u7684\u5012\u6392\u8868\uff0c\u66f4\u6709\u5229\u4e8e\u5b89\u5168\uff0c\u5373\u4f7f\u4e00\u90e8\u5206\u6570\u636e\u4e22\u5931\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u67e5\u8be2\u3002</p> Question <p>When evaluating the performance of data retrieval, it is important to measure the relevancy of the answer set. (T/F)</p> Answer <p>F</p> <p>\u53ec\u56de\u7387\u4e0e\u6570\u636e\u76f8\u5173\u6027\u65e0\u5173\u3002</p> Question <p>Precision is more important than recall when evaluating the explosive detection in airport security.  (T/F)</p> Answer <p>F</p> <p>\u7206\u70b8\u68c0\u6d4b\u4e2d\uff0c\u53ec\u56de\u7387\u66f4\u91cd\u8981\u3002\u4e0d\u8fc7\u90fd\u9ad8\u6700\u597d\u3002</p> Question <p>While accessing a term by hashing in an inverted file index, range searches are expensive.  (T/F)</p> Answer <p>T</p> Question <p>When measuring the relevancy of the answer set, if the precision is high but the recall is low, it means that:</p> <p>A.most of the relevant documents are retrieved, but too many irrelevant documents are returned as well</p> <p>B.most of the retrieved documents are relevant, but still a lot of relevant documents are missed</p> <p>C.most of the relevant documents are retrieved, but the benchmark set is not large enough</p> <p>D.most of the retrieved documents are relevant, but the benchmark set is not large enough</p> Answer <p>B</p> Question <p>Which of the following is NOT concerned for measuring a search engine?</p> <p>A.How fast does it index</p> <p>B.How fast does it search</p> <p>C.How friendly is the interface</p> <p>D.How relevant is the answer set</p> Answer <p>C</p> Question <p>There are 28000 documents in the database. The statistic data for one query are shown in the following table. The recall is:</p> Relevant Irrelevant Retrieved 4000 12000 Not Retrieved 8000 4000 <p>A.14%   B.25%   C.33%   D.50%</p> Answer <p>C</p> <p>\\(recall \\ = \\frac{4000}{4000+8000} = 0.33\\)</p>"},{"location":"Computer_Science/ADS/Homework/#hw4","title":"HW4","text":"Question <p>The result of inserting keys 1 to \\(2^k - 1\\) for any \\(k&gt;4\\) in order into an initially empty skew heap is always a full binary tree. (T/F)</p> Answer <p>T</p> Question <p>The right path of a skew heap can be arbitrarily long. (T/F)</p> Answer <p>T</p> Question <p>Merge the two leftist heaps in the following figure.  Which one of the following statements is FALSE?</p> <p></p> <p>A.2 is the root with 11 being its right child</p> <p>B.the depths of 9 and 12 are the same</p> <p>C.21 is the deepest node with 11 being its parent</p> <p>D.the null path length of 4 is less than that of 2</p> Answer <p>D \u6700\u7ec8\u7ed3\u679c\u6709\u7a7a\u8865\u4e0a\u6765</p> Question <p>We can perform BuildHeap for leftist heaps by considering each element as a one-node leftist heap, placing all these heaps on a queue, and performing the following step: Until only one heap is on the queue, dequeue two heaps, merge them, and enqueue the result.  Which one of the following statements is FALSE?</p> <p>A.in the k-th run, \\(\\lceil \\frac{N}{2^k} \\rceil\\) leftist heaps are formed, each contains \\(2^k\\) nodes</p> <p>B.the worst case is when \\(N=2^K\\) for some integer \\(K\\)</p> <p>C.the time complexity \\(T(N)=O(\\frac{N}{2}\\log 2^0 + \\frac{N}{2^2}\\log 2^1 + \\frac{N}{2^3} \\log 2^2 + \\cdots + \\frac{N}{2^K} \\log 2^{K-1})\\) for some integer \\(K\\) so that \\(N=2^K\\)</p> <p>D.the worst case time complexity of this algorithm is \\(\\Theta(N\\log N)\\)</p> Answer <p>D</p> <p>\u7531 C \u53ef\u5f97 \\(T(N)= O(N \\log 2 \\sum\\limits_{i=0}^{K-1} \\frac{i-1}{2^i}) = O(N)\\)</p> Question <p>Insert keys 1 to 15 in order into an initially empty skew heap.  Which one of the following statements is FALSE?</p> <p>A.the resulting tree is a complete binary tree</p> <p>B.there are 6 leaf nodes</p> <p>C.6 is the left child of 2</p> <p>D.11 is the right child of 7</p> Answer <p>B \u6700\u7ec8\u7ed3\u679c\u5982\u4e0b</p> <p></p> Question <p>Merge the two skew heaps in the following figure.  Which one of the following statements is FALSE?</p> <p></p> <p>A.15 is the right child of 8</p> <p>B.14 is the right child of 6</p> <p>C.1 is the root</p> <p>D.9 is the right child of 3</p> Answer <p>A \u6700\u7ec8\u7ed3\u679c\u6709\u7a7a\u8865\u4e0a\u6765</p> Question <p>The function is to merge two leftist heaps H1 and H2.</p> <pre><code>PriorityQueue Merge( PriorityQueue H1, PriorityQueue H2 )\n{ \nif (H1==NULL) return H2;\nif (H2==NULL) return H1;\nif ( `                     ` )\n    swap(H1, H2);  //swap H1 and H2\nif ( H1-&gt;Left == NULL )\n    `               ` ;\nelse {\n    H1-&gt;Right = Merge( H1-&gt;Right, H2 );\n    if ( H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl )\n    SwapChildren( H1 );  //swap the left child and right child of H1\n    `               `;\n}\nreturn H1;\n}\n</code></pre> Answer <ol> <li> <p><code>H1-&gt;Element &gt; H2-&gt;Element</code></p> </li> <li> <p><code>H1-&gt;Left = H2</code></p> </li> <li> <p><code>H1-&gt;Npl = H1-&gt;Right-&gt;Npl + 1</code></p> </li> </ol>"},{"location":"Computer_Science/ADS/Homework/#hw5","title":"HW5","text":"Question <p>Which of the following binomial trees can represent a binomial queue of size 42?</p> <p>A. \\(B_0B_1B_2B_3B_4B_5\\)</p> <p>B. \\(B_1B_3B_5\\)</p> <p>C. \\(B_1B_5\\)</p> <p>D. \\(B_2B_4\\)</p> Answer <p>B</p> Question <p>For a binomial queue, __ takes a constant time on average.</p> <p>A.merging</p> <p>B.find-max</p> <p>C.delete-min</p> <p>D.insertion</p> Answer <p>D</p> <p>insertion \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(1)\\) \uff0c\u6240\u4ee5\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f \\(O(1)\\)</p> <p>find-max \u8f83\u96be\u64cd\u4f5c\uff0c\u800c find-min \u82e5\u6709\u6307\u9488\u8bb0\u5f55\u4e5f\u53ef\u4ee5\u4e3a \\(O(1)\\)</p> <p>merging \u548c delete-min \u5747\u4e3a \\(O(\\log n)\\)</p> Question <p>Merge the two binomial queues in the following figure.  Which one of the following statements must be FALSE?</p> <p></p> <p>A.there are two binomial trees after merging, which are \\(B_2\\) and \\(B_4\\)</p> <p>B.13 and 15 are the children of 4</p> <p>C.if 23 is a child of 2, then 12 must be another child of 2</p> <p>D.if 4 is a child of 2, then 23 must be another child of 2</p> Answer <p>D \u6700\u7ec8\u7ed3\u679c\u6709\u7a7a\u8865\u4e0a\u6765</p> Question <p>Delete the minimum number from the given binomial queues in the following figure.  Which one of the following statements must be FALSE?</p> <p></p> <p>A.there are two binomial trees after deletion, which are \\(B_1\\) and \\(B_2\\)</p> <p>B.11 and 15 can be the children of 4</p> <p>C.29 can never be the root of any resulting binomial tree</p> <p>D.if 29 is a child of 4, then 15 must be the root of \\(B_1\\)</p> Answer <p>C \u6700\u7ec8\u7ed3\u679c\u6709\u7a7a\u8865\u4e0a\u6765</p> Question <p>The functions <code>BinQueue_Find</code> and <code>Recur_Find</code> are to find <code>X</code> in a binomial queue <code>H</code>.  Return the node pointer if found, otherwise return NULL.</p> <pre><code>BinTree BinQueue_Find( BinQueue H, ElementType X )\n{\n    BinTree T, result = NULL;\n    int i, j; \n\n    for( i=0, j=1; j&lt;=H-&gt;CurrentSize; i++, j*=2) {  /* for each tree in H */\n        T= H-&gt;TheTrees[i];\n        if ( X `          `){  /* if need to search inside this tree */\n            result = Recur_Find(T, X);\n            if ( result != NULL ) return result;\n        } \n    }\n    return result;\n}\n\nBinTree Recur_Find( BinTree T, ElementType X )\n{\n    BinTree result = NULL;\n    if ( X==T-&gt;Element ) return T;\n    if ( T-&gt;LeftChild!=NULL ){\n        result = Recur_Find(T-&gt;LeftChild, X);\n        if ( result!=NULL ) return result;\n    } \n    if ( `             `)\n        result = Recur_Find(T-&gt;NextSibling, X);\n    return result;\n}\n</code></pre> Answer <ol> <li> <p><code>&gt;= T-&gt;Element</code></p> </li> <li> <p><code>T-&gt;NextSibling != NULL</code></p> </li> </ol>"},{"location":"Computer_Science/ADS/Homework/#hw6","title":"HW6","text":"Question <p>In the Tic-tac-toe game, a \"goodness\" function of a position is defined as \\(f(P)=W_{computer} - W_{human}\\) where W is the number of potential wins at position P.</p> <p>In the following figure, <code>O</code> represents the computer and <code>X</code> the human. What is the goodness of the position of the figure?</p> <p></p> <p>A. -1   B. 0   C. 4   D. 5</p> Answer <p>B</p> <p>\\(f(P)=W_{computer} - W_{human} = 3 - 3 = 0\\)</p> Question <p>Given the following game tree, which node is the first one to be pruned with \\(\\alpha - \\beta\\) pruning algorithm?</p> <p></p> <p>A. a   B. b   C. c   D. d</p> Answer <p>C</p> <p>\u9996\u5148\uff0c\u4f1a\u88ab\u526a\u679d\u7684\u4e00\u5b9a\u662f\u53f3\u4fa7\u7684\u70b9\u3002</p> <p>\u7136\u540e\u8ba9\u6211\u4eec\u6765\u770b\uff0c\u5bf9\u4e8e min \u884c\uff0c\u5de6\u5b50\u6811\u5df2\u7ecf\u5f97\u5230 68 \uff0c\u800c\u53f3\u5b50\u6811\u5de6\u5b69\u5b50\u662f 86 \uff0c86 \u4e0a\u4e00\u884c\u53d6 max \uff0c\u4e5f\u5373 a \u8282\u70b9\u4e00\u5b9a \\(\\ge 86\\) \u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 min \u884c\u90a3\u4e00\u4e2a\u8282\u70b9\u4e00\u5b9a\u4e3a 68 \uff0c\u4e5f\u5373 c \u8282\u70b9\u88ab\u526a\u679d\u3002</p>"},{"location":"Computer_Science/ADS/Homework/#hw7","title":"HW7","text":"Question <p>When solving a problem with input size \\(N\\) by divide and conquer, if at each stage the problem is divided into 8 sub-problems of equal size N/3, and the conquer step takes \\(O(N^2\\log N)\\) to form the solution from the sub-solutions, then the overall time complexity is</p> <p>A. \\(O(N^2\\log N)\\)</p> <p>B. \\(O(N^2\\log^2 N)\\)</p> <p>C. \\(O(N^3\\log N)\\)</p> <p>D. \\(O(N^{\\log 8 / log 3})\\)</p> Answer <p>A</p> <p>\u4f9d\u9898\u6709 \\(T(N) = 8T(N/3) + O(N^2\\log N)\\) </p> <p>\u7531\u4e3b\u5b9a\u7406</p> <p>\\(\\because 8 &lt; 3^2\\)</p> <p>\\(\\therefore T(N) = O(N^2\\log N)\\)</p> Question <p>To solve a problem with input size N by divide and conquer algorithm, among the following methods, __ is the worst.</p> <p>A.divide into 2 sub-problems of equal complexity N/3 and conquer in \\(O(N)\\)</p> <p>B.divide into 2 sub-problems of equal complexity N/3 and conquer in \\(O(N\\log N)\\)</p> <p>C.divide into 3 sub-problems of equal complexity N/2 and conquer in \\(O(N)\\)</p> <p>D.divide into 3 sub-problems of equal complexity N/3 and conquer in \\(O(N\\log N)\\)</p> Answer <p>C</p> <p>A. \\(T(N) = 2T(N/3) + O(N) = O(N)\\)</p> <p>B. \\(T(N) = 2T(N/3) + O(N\\log N) = O(N\\log N)\\)</p> <p>C. \\(T(N) = 3T(N/2) + O(N) = O(N^{\\log_2 3})\\)</p> <p>D. \\(T(N) = 3T(N/3) + O(N\\log N) = O(N \\log^2 N)\\)</p> Question <p>3-way-mergesort : Suppose instead of dividing in two halves at each step of the mergesort, we divide into three one thirds, sort each part, and finally combine all of them using a three-way-merge.  What is the overall time complexity of this algorithm ?</p> <p>A. \\(O(n(\\log^2 n))\\)</p> <p>B. \\(O(n^2\\log n)\\)</p> <p>C. \\(O(n\\log n)\\)</p> <p>D. \\(O(n)\\) </p> Answer <p>C</p> <p>\\(T(n) = 3T(n/3) + O(n) = O(n\\log n)\\)</p> Question <p>Which one of the following is the lowest upper bound of T(n) for the following recursion \\(T(n) = 2T(\\sqrt{n}) + \\log n\\) ?</p> <p>A. \\(O(\\log n\\log \\log n)\\)</p> <p>B. \\(O(\\log^2 n)\\)</p> <p>C. \\(O(n\\log n)\\)</p> <p>D. \\(O(n^2)\\)</p> Answer <p>A</p> <p>assume \\(m = \\log n\\) ,then we could get \\(T(2^m) = 2T(2^{m/2}) + m\\)</p> <p>let \\(S(m) = T(2^m)\\) , then we could get \\(S(m) = 2S(m/2) + m\\)</p> <p>\u8fd9\u662f\u6211\u4eec\u719f\u6089\u7684 merge sort \u7684\u5f62\u5f0f\uff0c\u6240\u4ee5 \\(S(m) = O(m\\log m)\\) \uff0c\u4e5f\u5373 \\(T(n) = O(\\log n \\log \\log n)\\)</p>"},{"location":"Computer_Science/ADS/Homework/#hw8","title":"HW8","text":"Question <p>If a problem can be solved by dynamic programming, it must be solved in polynomial time.  (T/F)</p> Answer <p>F</p> <p>\u52a8\u6001\u89c4\u5212\u4e0d\u4e00\u5b9a\u80fd\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u89e3\u51b3\uff0c\u4f8b\u5982\u80cc\u5305\u95ee\u9898\u5176\u5b9e\u5c31\u662f\u4f2a\u591a\u9879\u5f0f\u3002\u5e76\u4e14\u80fd\u5426\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u8fd8\u53d6\u51b3\u4e8e\u95ee\u9898\u7684\u8f93\u5165\u89c4\u6a21\u3002</p> Question <p>To solve a problem by dynamic programming instead of recursions, the key approach is to store the results of computations for the subproblems so that we only have to compute each different subproblem once.  Those solutions can be stored in an array or a hash table.  (T/F)</p> Answer <p>T</p> Question <p>In dynamic programming, we derive a recurrence relation for the solution to one subproblem in terms of solutions to other subproblems. To turn this relation into a bottom up dynamic programming algorithm, we need an order to fill in the solution cells in a table, such that all needed subproblems are solved before solving a subproblem. Among the following relations, which one is impossible to be computed?</p> <p>A. \\(A(i,j)=min(A(i\u22121,j),A(i,j\u22121),A(i\u22121,j\u22121))\\)</p> <p>B. \\(A(i,j)=F(A(min{i,j}\u22121,min{i,j}\u22121),A(max{i,j}\u22121,max{i,j}\u22121))\\)</p> <p>C. \\(A(i,j)=F(A(i,j\u22121),A(i\u22121,j\u22121),A(i\u22121,j+1))\\)</p> <p>D. \\(A(i,j)=F(A(i\u22122,j\u22122),A(i+2,j+2))\\)</p> Answer <p>D</p> <p>A B C \u6309\u7167 i,j \u987a\u5e8f\u586b\u8868\u5373\u53ef\uff0c\u53ef\u4ee5\u770b\u5230\u662f\u5148\u586b\u524d\u9762\u518d\u586b\u540e\u9762\uff0c\u800c\u5bf9\u4e8e D \u6765\u8bf4\u51b3\u5b9a\u56e0\u7d20\u662f\u524d\u540e\u4e24\u8005\uff0c\u6240\u4ee5\u65e0\u6cd5\u586b\u8868</p> Question <p>Given a recurrence equation \\(f_{i,j,k} = f_{i,j+1,k} + min_{0 \\le l \\le k} \\{f_{i-1,j,l} + w_{j,l}\\}\\) . To solve this equation in an iterative way, we cannot fill up a table as follows:</p> <p>A. <code>for k in 0 to n: for i in 0 to n: for j in n to 0</code></p> <p>B. <code>for i in 0 to n: for j in 0 to n: for k in 0 to n</code></p> <p>C. <code>for i in 0 to n: for j in n to 0: for k in n to 0</code></p> <p>D. <code>for i in 0 to n: for j in n to 0: for k in 0 to n</code></p> Answer <p>B</p> <p>\u4f9d\u9898\u6709 <code>i</code> \u8981\u5347\u5e8f\uff0c <code>j</code> \u8981\u964d\u5e8f\uff0c <code>k</code> \u65e0\u7279\u522b\u8981\u6c42</p> Question <p>Which one of the following problems can be best solved by dynamic programming?</p> <p>A.Mergesort</p> <p>B.Closest pair of points problem</p> <p>C.Quicksort</p> <p>D.Longest common subsequence problem</p> Answer <p>D</p> <p>A B C \u9002\u5408\u7528\u5206\u6cbb\u6cd5\u89e3\u51b3</p>"},{"location":"Computer_Science/ADS/Homework/#hw9","title":"HW9","text":"Question <p>Let S be the set of activities in Activity Selection Problem.  Then the earliest finish activity \\(a_m\\) must be included in all the maximum-size subset of mutually compatible activities of S.  (T/F)</p> Answer <p>F</p> <p>\u867d\u7136\u9009\u62e9\u6700\u65e9\u5b8c\u6210\u7684\u6d3b\u52a8 \\(a_m\\) \u662f\u4e00\u79cd\u8d2a\u5fc3\u9009\u62e9\uff0c\u5e76\u4e14\u8fd9\u79cd\u9009\u62e9\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u8f83\u5927\u7684\u517c\u5bb9\u6d3b\u52a8\u5b50\u96c6\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740 \\(a_m\\) \u5fc5\u987b\u5305\u542b\u5728\u6240\u6709\u6700\u5927\u89c4\u6a21\u7684\u517c\u5bb9\u6d3b\u52a8\u5b50\u96c6\u4e2d\u3002\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u6700\u5927\u89c4\u6a21\u7684\u517c\u5bb9\u6d3b\u52a8\u5b50\u96c6\uff0c\u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u4e0d\u5305\u62ec\u6700\u65e9\u5b8c\u6210\u7684\u6d3b\u52a8 \\(a_m\\) .</p> Question <p>Let C be an alphabet in which each character c in C has frequency c.freq.  If the size of C is n,  the length of the optimal prefix code for any character c is not greater than n\u22121.   (T/F)</p> Answer <p>T</p> <p>\u970d\u592b\u66fc\u7f16\u7801\u3002\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u5b57\u7b26\u53ef\u80fd\u4f1a\u4f4d\u4e8e\u970d\u592b\u66fc\u6811\u7684\u6700\u6df1\u4f4d\u7f6e\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u7ecf\u5386\u4e86\u6240\u6709\u7684 \\(n\u22121\\) \u6b21\u5408\u5e76\u3002\u6240\u4ee5\uff0c\u4efb\u4f55\u5b57\u7b26 \\(c\\) \u7684\u6700\u4f18\u524d\u7f00\u7801\u7684\u957f\u5ea6\u90fd\u4e0d\u4f1a\u8d85\u8fc7 \\(n-1\\) .</p> Question <p>Consider the problem of making change for n cents using the fewest number of coins. Assume that each coin's value is an integer.</p> <p>The coins of the lowest denomination\uff08\u9762\u989d\uff09 is the cent.</p> <p>(I) Suppose that the available coins are quarters (25 cents), dimes (10 cents), nickels (5 cents), and pennies (1 cent). The greedy algorithm always yields an optimal solution.</p> <p>(II) Suppose that the available coins are in the denominations that are powers of c, that is, the denominations are \\(c^0,c^1,\\dots,c^k\\) for some integers \\(c&gt;1\\) and \\(k \\ge 1\\) . The greedy algorithm always yields an optimal solution.</p> <p>(III) Given any set of k different coin denominations which includes a penny (1 cent) so that there is a solution for every value of n, greedy algorithm always yields an optimal solution.</p> <p>Which of the following is correct?</p> <p>A.Statement (I) is false.</p> <p>B.Statement (II) is false.</p> <p>C.Statement (III) is false.</p> <p>D.All of the three statements are correct.</p> Answer <p>C</p> <p>A \u8be5\u7b97\u6cd5\u6bcf\u6b21\u9009\u62e9\u5c3d\u53ef\u80fd\u591a\u7684\u6700\u5927\u9762\u503c\u7684\u786c\u5e01\uff0c\u76f4\u5230\u91d1\u989d\u4e0d\u8db3\u4ee5\u518d\u9009\u8fd9\u79cd\u786c\u5e01\u4e3a\u6b62\uff0c\u7136\u540e\u8f6c\u5411\u6b21\u5927\u9762\u503c\u7684\u786c\u5e01\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u3002</p> <p>B \u5982\u679c\u786c\u5e01\u9762\u989d\u662f\u67d0\u4e2a\u57fa\u6570 \\(c\\) \u7684\u8fde\u7eed\u5e42\uff0c\u5219\u8d2a\u5fc3\u7b97\u6cd5\u540c\u6837\u4f1a\u4ea7\u751f\u6700\u4f18\u89e3\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a\u9762\u989d\u90fd\u662f\u4e0b\u4e00\u4e2a\u66f4\u5c0f\u9762\u989d\u7684\u500d\u6570\uff0c\u56e0\u6b64\u5728\u9009\u62e9\u8f83\u5927\u9762\u989d\u7684\u786c\u5e01\u65f6\u4e0d\u4f1a\u59a8\u788d\u540e\u7eed\u9009\u62e9\u8f83\u5c0f\u9762\u989d\u7684\u786c\u5e01\u6765\u6784\u6210\u5269\u4f59\u7684\u91d1\u989d\u3002\u8fd9\u4fdd\u8bc1\u4e86\u6bcf\u6b21\u9009\u62e9\u6700\u5927\u53ef\u80fd\u7684\u786c\u5e01\u9762\u989d\u90fd\u5c06\u5bfc\u81f4\u6574\u4f53\u6700\u4f18\u89e3\u3002</p> <p>C \u8d2a\u5fc3\u7b97\u6cd5\u5e76\u4e0d\u603b\u662f\u80fd\u591f\u4ea7\u751f\u6700\u4f18\u89e3\uff0c\u9664\u975e\u786c\u5e01\u9762\u989d\u6ee1\u8db3\u67d0\u4e9b\u7279\u5b9a\u6761\u4ef6\uff08\u5982\u524d\u4e24\u4e2a\u9648\u8ff0\u6240\u8ff0\uff09\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u6709\u9762\u989d\u4e3a1\u7f8e\u5206\u30013\u7f8e\u5206\u548c4\u7f8e\u5206\u7684\u786c\u5e01\uff0c\u5e76\u4e14\u9700\u8981\u627e\u96f66\u7f8e\u5206\uff0c\u90a3\u4e48\u8d2a\u5fc3\u7b97\u6cd5\u4f1a\u9009\u62e9\u4e00\u4e2a4\u7f8e\u5206\u548c\u4e24\u4e2a1\u7f8e\u5206\u7684\u786c\u5e01\uff08\u603b\u51713\u4e2a\u786c\u5e01\uff09\uff0c\u800c\u6700\u4f18\u89e3\u5e94\u8be5\u662f\u4e24\u4e2a3\u7f8e\u5206\u7684\u786c\u5e01\uff08\u603b\u51712\u4e2a\u786c\u5e01\uff09\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u975e\u6807\u51c6\u7684\u786c\u5e01\u9762\u989d\u96c6\u5408\uff0c\u8d2a\u5fc3\u7b97\u6cd5\u53ef\u80fd\u4e0d\u4f1a\u627e\u5230\u4f7f\u7528\u6700\u5c11\u786c\u5e01\u6570\u91cf\u7684\u89e3\u3002</p>"},{"location":"Computer_Science/ADS/Homework/#hw10","title":"HW10","text":"Question <p>If \\(L_1 \\le_p L_2\\) and \\(L_2 \\in NP\\) , then \\(L_1 \\in NP\\) . (T/F)</p> Answer <p>T</p> <p>\\(L_1\\) \u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5148\u89c4\u7ea6\u5230 \\(L_2\\) , \\(L_2\\) \u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u53ef\u9a8c\u8bc1\uff0c\u6240\u4ee5 \\(L_1\\) \u4e5f\u53ef\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u3002</p> Question <p>All NP-complete problems are NP problems.  (T/F)</p> Answer <p>T</p> Question <p>All the languages can be decided by a non-deterministic machine.  (T/F)</p> Answer <p>F</p> <p>\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u53ef\u4ee5\u63a5\u53d7\u67d0\u4e9b\u8bed\u8a00\uff0c\u4f46\u4e0d\u80fd\u63a5\u53d7\u6240\u6709\u8bed\u8a00\u3002\u4f8b\u5982\uff0c\u5b58\u5728\u4e00\u4e9b\u8bed\u8a00\uff0c\u5982\u505c\u673a\u95ee\u9898\uff0c\u5b83\u4eec\u4e0d\u80fd\u88ab\u4efb\u4f55\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u63a5\u53d7\u3002</p> Question <p>All NP problems can be solved in polynomial time in a non-deterministic machine.  (T/F)</p> Answer <p>T</p> Question <p>If a problem can be solved by dynamic programming, it must be solved in polynomial time. (T/F)</p> Answer <p>F</p> <p>\u52a8\u6001\u89c4\u5212\u662f\u4e00\u79cd\u89e3\u51b3\u4f18\u5316\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u8bb8\u591a NP \u5b8c\u5168\u95ee\u9898\uff0c\u4f46\u5e76\u4e0d\u4fdd\u8bc1\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u6240\u6709\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u65c5\u884c\u5546\u95ee\u9898\uff08TSP\uff09\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\uff0c\u4f46\u5b83\u7684\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6307\u6570\u7ea7\u7684\u3002\u518d\u6bd4\u5982\u80cc\u5305\u95ee\u9898\uff0c\u4e5f\u662f\u4f2a\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u3002</p> Question <p>Among the following problems, __ is NOT an NP-complete problem.</p> <p>A.Vertex cover problem</p> <p>B.Hamiltonian cycle problem</p> <p>C.Halting problem</p> <p>D.Satisfiability problem</p> Answer <p>C</p> Question <p>Suppose Q is a problem in NP, but not necessarily NP-complete.  Which of the following is FALSE?</p> <p>A.A polynomial-time algorithm for SAT would sufficiently imply a polynomial-time algorithm for Q.</p> <p>B.A polynomial-time algorithm for Q would sufficiently imply a polynomial-time algorithm for SAT.</p> <p>C.If \\(Q \\notin P\\) , then \\(P \\neq NP\\) .</p> <p>D.If Q is NP-hard, then Q is NP-complete.</p> Answer <p>B</p> <p>\u5982\u679c Q \u4e0d\u662f NPC \u95ee\u9898\u5c31\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u6027\u8d28\u3002</p>"},{"location":"Computer_Science/ADS/Homework/#hw11","title":"HW11","text":"Question <p>Suppose ALG is an \\(\\alpha\\) -approximation algorithm for an optimization problem \\(\\pi\\) whose approximation ratio is tight. Then for every \\(\\varepsilon\\) &gt;0 there is no ( \\(\\alpha - \\varepsilon\\) )-approximation algorithm for \\(\\pi\\)  unless \\(P = NP\\) . (T/F)</p> Answer <p>F.</p> <p>\u8981\u6ce8\u610f\u7b97\u6cd5\u7684\u754c\u548c\u95ee\u9898\u7684\u754c\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u7b97\u6cd5\u6765\u8bf4\u662f\u8fd9\u4e2a\u8fd1\u4f3c\u6bd4\u4e0d\u4ee3\u8868\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u5176\u4ed6\u7b97\u6cd5\u6765\u8bf4\u4e5f\u662f\u6b64\u8fd1\u4f3c\u6bd4\u3002</p> <p>\u4f46\u662f\u6709\u4e9b\u7b97\u6cd5\u662f\u6709\u95ee\u9898\u7684\u4e0b\u754c\u7684\u3002\u4f8b\u5982 K-center \u95ee\u9898\uff0c\u6ca1\u6709\u8fd1\u4f3c\u6bd4\u5c0f\u4e8e2\u7684\u7b97\u6cd5\uff0c\u9664\u975e \\(P = NP\\) \u3002</p> Question <p>As we know there is a 2-approximation algorithm for the Vertex Cover problem. Then we must be able to obtain a 2-approximation algorithm for the Clique problem, since the Clique problem can be polynomially reduced to the Vertex Cover problem. (T/F)</p> Answer <p>F.</p> <p>\u9996\u5148\uff0c\u6b64\u5904\u6709\u4e00\u4e2a fact\u3002Clique problem \u6ca1\u6709\u5e38\u6570\u7684\u8fd1\u4f3c\u89e3\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u8fd1\u4f3c\u6bd4\u76ee\u524d\u662f \\(O(\\log n)\\) \u3002\u5982\u679c\u9700\u8981\u8be6\u7ec6\u8bc1\u660e\u6b22\u8fce\u79fb\u6b65\u6211\u7684\u8bfe\u7a0b\u6574\u7406\u4e2d\u5bf9\u4e8e\u5404\u79cd\u95ee\u9898\u7684\u6574\u7406\u3002\u5f53\u7136\u4e86\u5728\u5199\u4f5c\u4e1a\u89e3\u7b54\u65f6\u6211\u8fd8\u6ca1\u6574\u7406\uff0c\u6574\u7406\u597d\u5982\u679c\u6211\u8fd8\u8bb0\u5f97\u4f1a\u6765\u505a\u94fe\u63a5\u8df3\u8f6c\u7684\u3002</p> <p>\u6211\u4eec\u9700\u8981\u660e\u786e\u7684\u662f\uff1a\u5f52\u7ea6\u662f\u201c\u89e3\u7684\u8f6c\u6362\u201d\uff0c\u800c\u4e0d\u662f\u201c\u8fd1\u4f3c\u89e3\u7684\u8f6c\u6362\u201d\u3002</p> <ul> <li> <p>\u5f52\u7ea6\u7684\u6027\u8d28\uff1a\u5f52\u7ea6\u610f\u5473\u7740\u901a\u8fc7\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u7b97\u6cd5\u5c06\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u53e6\u4e00\u4e2a\u95ee\u9898\u3002\u5bf9\u4e8e\u6700\u5927\u56e2\u95ee\u9898\u548c\u6700\u5c0f\u9876\u70b9\u8986\u76d6\u95ee\u9898\u7684\u5f52\u7ea6\uff0c\u6211\u4eec\u901a\u8fc7\u6c42\u89e3\u8865\u56fe\u7684\u6700\u5c0f\u9876\u70b9\u8986\u76d6\uff0c\u95f4\u63a5\u5f97\u5230\u6700\u5927\u56e2\u7684\u89e3\u3002</p> </li> <li> <p>\u8fd1\u4f3c\u7b97\u6cd5\u7684\u9650\u5236\uff1a\u5bf9\u4e8e\u8fd1\u4f3c\u7b97\u6cd5\u6765\u8bf4\uff0c\u6700\u91cd\u8981\u7684\u6311\u6218\u662f\u5982\u4f55\u4fdd\u8bc1\u7b97\u6cd5\u5728\u6709\u9650\u65f6\u95f4\u5185\u8fd4\u56de\u4e00\u4e2a\u63a5\u8fd1\u6700\u4f18\u89e3\u7684\u89e3\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u8f6c\u6362\u95ee\u9898\u672c\u8eab\u3002\u867d\u7136\u6700\u5927\u56e2\u95ee\u9898\u548c\u6700\u5c0f\u9876\u70b9\u8986\u76d6\u95ee\u9898\u4e4b\u95f4\u6709\u89e3\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f46\u5728\u8fdb\u884c\u8fd1\u4f3c\u65f6\uff0c\u8fd9\u79cd\u5bf9\u5e94\u5173\u7cfb\u5e76\u4e0d\u81ea\u52a8\u4fdd\u8bc1\u4ece\u9876\u70b9\u8986\u76d6\u7684\u8fd1\u4f3c\u89e3\u80fd\u591f\u8f6c\u5316\u4e3a\u6700\u5927\u56e2\u95ee\u9898\u7684\u8fd1\u4f3c\u89e3\u3002</p> </li> </ul> Question <p>There exists an on-line algorithm for the bin packing problem that uses at most 3/2 the optimal number of bins for any instance. (T/F)</p> Answer <p>F.</p> <p>\u6839\u636e PPT \"There are inputs that force any on-line bin-packing algorithm to use at least 5/3 the optimal number of bins.\" </p> Question <p>For the bin-packing problem: let \\(S=\\sum S_i\\) . Which of the following statements is FALSE?</p> <p>A. The number of bins used by the next-fit heuristic is never more than \\(\\lceil 2S \\rceil\\)</p> <p>B. The number of bins used by the first-fit heuristic is never more than \\(\\lceil 2S \\rceil\\)</p> <p>C. The next-fit heuristic leaves at most one bin less than half full</p> <p>D. The first-fit heuristic leaves at most one bin less than half full</p> Answer <p>C.</p> <p>\u5bf9\u4e8e next-fit \u7b97\u6cd5\uff0c\u53ea\u8981\u5f53\u524d\u8981\u653e\u5165\u7684\u7269\u54c1\u65e0\u6cd5\u653e\u5165\u5f53\u524d\u7bb1\u5b50\uff0c\u5c31\u4f1a\u5f00\u4e0b\u4e00\u4e2a\u7bb1\u5b50\uff0c\u663e\u7136\u53ef\u4ee5\u6709\u4e0d\u6b62\u4e00\u4e2a\u6ca1\u88c5\u6ee1\u4e00\u534a\u7684\u7bb1\u5b50\u3002</p> <p>\u800c\u5bf9\u4e8e first-fit \u7b97\u6cd5\uff0c\u82e5\u5f53\u524d\u8981\u653e\u5165\u7684\u7269\u54c1\u65e0\u6cd5\u653e\u5165\u5f53\u524d\u7bb1\u5b50\uff0c\u5c31\u4f1a\u4ece\u4e0b\u4e00\u4e2a\u7bb1\u5b50\u5f00\u59cb\u627e\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u80fd\u653e\u8fdb\u53bb\u7684\u7bb1\u5b50\u3002\u4e0d\u53ef\u80fd\u5b58\u5728\u4e24\u4e2a\u6ca1\u88c5\u6ee1\u4e00\u534a\u7684\u7bb1\u5b50\uff0c\u82e5\u6709\u8fd9\u4e24\u4e2a\u7bb1\u5b50\u7684\u7269\u54c1\u4e00\u5b9a\u4f1a\u653e\u81f3\u4e8e\u540c\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u3002</p> Question <p>Assume that you are a real world Chinese postman, which have learned an awesome course \"Advanced Data Structures and Algorithm Analysis\" (ADS). Given a 2-dimensional map indicating \\(N\\) positions \\(p_i(x_i,y_i)\\) of your post office and all the addresses you must visit, you'd like to find a shortest path starting and finishing both at your post office, and visit all the addresses at least once in the circuit. Fortunately, you have a magic item \"Bamboo copter &amp; Hopter\" from \"Doraemon\", which makes sure that you can fly between two positions using the directed distance (or displacement).</p> <p>However, reviewing the knowledge in the ADS course, it is an NPC problem! Wasting too much time in finding the shortest path is unwise, so you decide to design a 2\u2212approximation algorithm as follows, to achieve an acceptable solution.</p> <pre><code>Compute a minimum spanning tree T connecting all the addresses.\nRegard the post office as the root of T.\nStart at the post office.\nVisit the addresses in order of a _____ of T.\nFinish at the post office.\n</code></pre> <p>There are several methods of traversal which can be filled in the blank of the above algorithm. Assume that \\(P \\neq NP\\) , how many methods of traversal listed below can fulfill the requirement?</p> <ul> <li> <p>Level-Order Traversal</p> </li> <li> <p>Pre-Order Traversal</p> </li> <li> <p>Post-Order Traversal</p> </li> </ul> <p>A. 0</p> <p>B. 1</p> <p>C. 2</p> <p>D. 3</p> Answer <p>\u8fd9\u9053\u9898\u76f8\u5f53\u4e8en\u4e2a\u70b9\u6784\u9020\u51fa\u4e00\u68f5\u6811\uff0c\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\uff0c\u4f46\u8fd9\u9053\u9898\u9700\u8981\u56de\u5230\u539f\u70b9\u3002\u8fd9\u9053\u9898\u76ee\u6709\u70b9\u5c0f\u7455\u75b5\uff0c\u5e76\u672a\u6307\u51fa\u8def\u7684\u957f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5177\u4f53\u8bc1\u660e\u4e3a\u4ec0\u4e48\u662f 2-approximation algorithm\uff0c\u6307\u8defyds\u8001\u5e08\u7684\u8bb2\u89e3\u94fe\u63a5\u3002</p> <p>\u53ea\u8981\u5728\u8fd9\u68f5\u6811\u4e0a\u904d\u5386\u80fd\u8d70\u51fa\u8fd9\u4e2a\u5708\u5373\u53ef\u3002\u56e0\u6b64\u4ec5 <code>Level-Order Traversal</code> \u4e0d\u6ee1\u8db3\uff0c\u5269\u4f59\u4e24\u8005\u5747\u53ef\u3002</p> Question <p>You have 10 identical cores on which you want to schedule some \\(n\\) jobs. Each job \\(j\\in {1,2,\\dots ,n}\\) has a processing time \\(p_j &gt;0\\) .  If \\(S_i\\) is the set of jobs assigned to core \\(i\\) ,  let the load be \\(\\sum\\limits_{j\\in S_i} p_j\\) . Now, you want to partition the jobs among the cores to minimize the load of the most-loaded core. </p> <p>We design a greedy algorithm that picks any unassigned job, and assign it to the core with the least current load. What is the approximation ratio of the greedy algorithm? (Choose the smallest bound that applies.)</p> <p>A. 1</p> <p>B. 1.5</p> <p>C. 1.9</p> <p>D. 2</p> Answer <p>C.</p> <p>\u5f53\u524d\u8c01\u7684\u8d1f\u8f7d\u6700\u5c0f\u5c31\u7ed9\u8c01\uff0c\u6b64\u4e3a\u8d2a\u5fc3\u7b97\u6cd5\u3002\u800c\u6211\u4eec\u60f3\u8981\u6700\u5927\u7684\u8d1f\u8f7d\u6700\u5c0f\u3002</p> <p>\u53ea\u8981 \\(n = 2\\) \u5c31\u662f \\(NPH\\) \u95ee\u9898\u3002\u56e0\u4e3a partition problem \uff08\u5747\u5206\u95ee\u9898\uff09\u53ef\u4ee5\u5f52\u7ea6\u8fc7\u6765\u3002\u8bbe\u6709 \\(m\\) \u53f0\u673a\u5668\u3002</p> <p>\\(OPT \\ge p_{max}\\)</p> <p>\\(OPT \\ge \\frac{\\sum\\limits_{i=1}^n P_i}{m}\\)</p> <p>\u8981\u8bc1 \\(\\rho = 2 - \\frac{1}{m}\\)</p> <p>\u5047\u8bbe\u6700\u5927\u7684\u8d1f\u8f7d\u5728\u7b2c\u4e00\u53f0\u673a\u5668\u3002</p> <p>\u5bf9\u4e8e \\(p_n\\) \u6765\u8bf4\uff0c\\(S_j \\ge S_1^' \\ ,j = 2,3,\\dots,n\\) (\u6211\u4eec\u8bb0\u6ca1\u6709\u653e\u4e0a\u6700\u540e\u4e00\u4e2a\u4e5f\u5373\u6ca1\u6709\u52a0\u5165 \\(p_n\\) \u7684\u7b2c\u4e00\u53f0\u673a\u5668\u662f \\(S_1^'\\))</p> <p>\u6b64\u65f6\u7ed3\u679c\u4e3a \\(S_1 + p_n\\) \u3002</p> \\[OPT \\ge \\frac{\\sum\\limits_{i=1}^n P_i}{m} \\ge \\frac{mS_1^' + p_n}{m} = S_1^' + \\frac{p_n}{m}\\] \\[ALG = S_1^' + p_n = S_1^' + \\frac{p_n}{m} + (1 - \\frac{1}{m})p_n \\le OPT + (1 - \\frac{1}{m})p_n = (2 - \\frac{1}{m})OPT\\] \\[\\Rightarrow \\rho = 2 - \\frac{1}{m}\\] <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e3e\u4f8b\u8bc1\u660e\uff0c\u8fd9\u4e2a\u8fd1\u4f3c\u6bd4\u662f\u53ef\u4ee5\u5f97\u5230\u7684\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u6709 \\(m\\) \u53f0\u673a\u5668\uff0c\u6211\u4eec\u6709 \\((m-1)\\cdot m + 1\\) \u4e2a\u4efb\u52a1\uff0c\u524d \\((m-1)\\cdot m\\) \u4e2a\u4efb\u52a1\u5927\u5c0f\u4e3a \\(1\\)\uff0c\u6700\u540e\u4e00\u4e2a\u4efb\u52a1\u5927\u5c0f\u4e3a \\(m\\)\u3002\u90a3\u4e48\u6839\u636e\u4e0a\u8ff0\u8d2a\u5fc3\u7b97\u6cd5\u6211\u4eec\u4f1a\u5f97\u5230 \\(m\\) \u4e2a\u673a\u5668\u6bcf\u4e2a\u90fd\u6709\u653e\u5165 \\((m-1)\\) \u4e2a\u5927\u5c0f\u4e3a \\(1\\) \u7684\u4efb\u52a1\u3002\u518d\u8003\u8651\u6700\u540e\u4e00\u4e2a\u4efb\u52a1\uff0c\u65e0\u8bba\u7ed9\u54ea\u4e2a\u673a\u5668\u5747\u4e00\u6837\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8be5\u7b97\u6cd5\u7684 \\(ALG = (m-1) + m = 2m-1\\)\u3002\u800c\u6700\u4f18\u89e3\u53ef\u4ee5\u60f3\u89c1\u662f\u628a\u6700\u540e\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(m\\) \u7684\u4efb\u52a1\u653e\u5165\u6700\u540e\u4e00\u4e2a\u673a\u5668\uff0c\u5269\u4e0b \\((m-1)\\cdot m\\) \u4e2a\u5927\u5c0f\u4e3a \\(1\\) \u7684\u4efb\u52a1\u5747\u5206\u5230 \\(m-1\\) \u4e2a\u673a\u5668\u3002\u6b64\u65f6\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e00\u4e2a\u673a\u5668\u7684\u8d1f\u8f7d\u5747\u4e3a \\(m\\) \uff0c\u4e5f\u5373 \\(OPT = m\\)\u3002\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230 \\(\\rho = \\frac{2m-1}{m} = 2 - \\frac{1}{m}\\)\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u8fd8\u53ef\u4ee5\u4f18\u5316\u3002\u6211\u4eec\u628a\u4efb\u52a1\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\u518d\u653e\u5165\u3002\u53ef\u4ee5\u77e5\u9053\uff0c\u5f53 \\(n &gt; m\\) \u65f6\u8d1f\u8f7d\u6700\u591a\u7684\u673a\u5668\u81f3\u5c11\u6709\u4e24\u4e2a\u4efb\u52a1\u3002\u6b64\u65f6\u53ef\u4ee5\u5f97\u5230</p> \\[p_n \\le \\frac{1}{2} OPT\\] \\[\\therefore ALG = OPT + (1-\\frac{1}{m})p_n \\le OPT + (1 - \\frac{1}{m})\\frac{1}{2}OPT = (\\frac{3}{2}-m)OPT\\] \\[\\rho = \\frac{3}{2} - \\frac{1}{m}\\] <p>(LPT) \u5b9e\u9645\u4e2d\u628a\u4efb\u52a1\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\u53ef\u4ee5\u8bc1\u660e\u5f97\u5230 \\(p_n \\le \\frac{1}{3} OPT\\) \u3002</p> \\[\\rho = \\frac{4}{3} - \\frac{1}{3m}\\]"},{"location":"Computer_Science/ADS/Homework/#hw12","title":"HW12","text":"Question <p>For the graph given in the following figure, if we start from deleting the black vertex, then local search can always find the minimum vertex cover.  (T/F)</p> <p></p> Answer <p>T</p> <p>\u5bf9\u4e8e minimum vertex cover \u95ee\u9898\uff0c\u5982\u679c\u8981\u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u8981\u4fdd\u8bc1\u4e0e\u8be5\u70b9\u76f8\u8fde\u7684\u8fb9\u7684\u53e6\u4e00\u4e2a\u70b9\u672a\u88ab\u5220\u9664\u3002\u56e0\u6b64\uff0c\u5220\u9664\u9ed1\u8272\u70b9\u540e\uff0c\u4e0e\u9ed1\u8272\u70b9\u76f8\u8fde\u7684\u767d\u8272\u70b9\u5747\u4e0d\u80fd\u88ab\u5220\u9664\u3002\u5269\u4e0b\u6700\u4e0b\u9762\u4e24\u4e2a\u767d\u8272\u7684\u70b9\u53ef\u4ee5\u88ab\u5220\u9664\uff0c\u786e\u5b9e\u4e5f\u5c31\u5f97\u5230\u4e86\u6700\u4f18\u89e3\u3002</p> Question <p>We are given a set of sites \\(S=\\{s_1,s_2,\u22ef,s_n\\}\\) in the plane, and we want to choose a set of k centers \\(C=\\{c_1,c_2,\u22ef,c_k\\}\\) so that the maximum distance from a site to the nearest center is minimized. Here \\(c_i\\) can be an arbitrary point in the plane. </p> <p>A local search algorithm arbitrarily choose k points in the plane to be the centers, then</p> <ul> <li>(1) divide \\(S\\) into k sets, where \\(S_i\\) is the set of all sites for which \\(c_i\\) is the nearest center; and</li> <li>(2) for each \\(S_i\\), compute the central position as a new center for all the sites in \\(S_i\\).</li> </ul> <p>If steps (1) and (2) cause the covering radius to strictly decrease, we perform another iteration, otherwise the algorithm stops. </p> <p>When the above local search algorithm terminates, the covering radius of its solution is at most 2 times the optimal covering radius.  (T/F)</p> Answer <p>F \u6709\u7a7a\u6765\u586b\u5751</p> <p>\u611f\u89c9\u4e0a\u6700\u7ec8\u7ed3\u679c\u4e0e\u6700\u5f00\u59cb\u53d6\u7684\u70b9\u7684\u5173\u7cfb\u975e\u5e38\u5927\uff0c\u4e0d\u4e00\u5b9a\u4e3a 2 .</p> <p>\u6216\u662f\u6839\u636e\u7ed3\u8bba \"Unless P = NP, there is no approximation algorithm let the ratio less than 2 for k-center problelm\". </p> Question <p>Local search algorithm can be used to solve lots of classic problems, such as SAT and N-Queen problems.  Define the configuration of SAT to be X = vector of assignments of N boolean variables, and that of N-Queen to be Y =  positions of the N queens in each column.  The sizes of the search spaces of SAT and N-Queen are \\(O(2^N)\\) and \\(O(N^N)\\) , respectively.  (T/F)</p> Answer <p>T</p> Question <p>Spanning Tree Problem: Given an undirected graph \\(G=(V, E)\\), where \\(|V|=n\\) and \\(|E|=m\\). Let \\(F\\) be the set of all spanning trees of \\(G\\). Define \\(d(u)\\) to be the degree of a vertex \\(u \\in V\\). Define \\(w(e)\\) to be the weight of an edge \\(e \\in E\\).</p> <p>We have the following three variants of spanning tree problems:</p> <ul> <li> <p>(1) Max Leaf Spanning Tree: find a spanning tree \\(T \\in F\\) with a maximum number of leaves.</p> </li> <li> <p>(2) Minimum Spanning Tree: find a spanning tree \\(T \\in F\\) with a minimum total weight of all the edges in \\(T\\).</p> </li> <li> <p>(3) Minimum Degree Spanning Tree: find a spanning tree \\(T \\in F\\) such that its maximum degree of all the vertices is the smallest.</p> </li> </ul> <p>For a pair of edges \\(\\left(e, e^{\\prime}\\right)\\) where \\(e \\in T\\) and \\(e^{\\prime} \\in(G-T)\\) such that \\(e\\) belongs to the unique cycle of \\(T \\cup e^{\\prime}\\), we define edge-swap \\(\\left(e, e^{\\prime}\\right)\\) to be \\((T-e) \\cup e^{\\prime}\\).</p> <p>Here is a local search algorithm:</p> <pre><code>T = any spanning tree in F_i\nwhile (there is an edge-swap (e, e') which reduces Cost(T)) {\n    T = T - e + e';\n}\nreturn T;\n</code></pre> <p>Here \\(\\operatorname{cost}(T)\\) is the number of leaves in \\(T\\) in Max Leaf Spanning Tree; or is the total weight of \\(T\\) in Minimum Spanning Tree; or else is the minimum degree of \\(T\\) in Minimum Degree Spanning Tree.</p> <p>Which of the following statements is TRUE?</p> <p>A. The local search always return an optimal solution for Max Leaf Spanning Tree</p> <p>B. The local search always return an optimal solution for Minimum Spanning Tree</p> <p>C. The local search always return an optimal solution for Minimum Degree Spanning Tree</p> <p>D. For neither of the problems that this local search always return an optimal solution</p> Answer <p>B \u6709\u7a7a\u586b\u5751</p> Question <p>There are \\(n\\) jobs, and each job \\(j\\) has a processing time \\(t_{j}\\). We will use a local search algorithm to partition the jobs into two groups A and B, where set A is assigned to machine \\(M_{1}\\) and set \\(\\mathrm{B}\\) to \\(M_{2}\\). The time needed to process all of the jobs on the two machines is \\(T_{1}=\\sum\\limits_{j \\in A} t_{j}, T_{2}=\\sum\\limits_{j \\in B} t_{j}\\). The problem is to minimize \\(\\left|T_{1}-T_{2}\\right|\\).</p> <p>Local search: Start by assigning jobs \\(1, \\ldots, n / 2\\) to \\(M_{1}\\), and the rest to \\(M_{2}\\).</p> <p>The local moves are to move a single job from one machine to the other, and we only move a job if the move decreases the absolute difference in the processing times. Which of the following statement is true?</p> <p>A. The problem is NP-hard and the local search algorithm will not terminate.</p> <p>B. When there are many candidate jobs that can be moved to reduce the absolute difference, if we always move the job \\(j\\) with maximum \\(t_j\\) , then the local search terminates in at most \\(n\\) moves.</p> <p>C. The local search algorithm always returns an optimal solution.</p> <p>D. The local search algorithm always returns a local solution with \\(\\frac{1}{2}T_1 \\le T \\le 2T_1\\).</p> Answer <p>B</p> <p>A\uff0c\u6bcf\u6b21\u90fd\u51cf\u5c0f\uff0c\u80af\u5b9a\u4f1a\u51cf\u65e0\u53ef\u51cf\u5230\u7ec8\u6b62\u3002\u5927\u6982\u662f NP-hard\u3002</p> <p>B\uff0c\u4e00\u9879\u88ab\u79fb\u5230\u53e6\u4e00\u4fa7\u4e4b\u540e\u80af\u5b9a\u4e0d\u4f1a\u518d\u88ab\u79fb\u56de\u6765\uff0c\u56e0\u6b64\u6700\u591a\u79fb\\(n\\)\u6b21\u3002</p> <p>C\uff0c\u8003\u8651\\(\\{10,11,12,12,13,14\\}=\\{10,11,13\\}+\\{12,12,14\\}\\)\uff0c\u53ef\u77e5\u65e0\u6cd5\u79fb\u52a8\u4e86\uff0c\u4f46\u662f\u663e\u7136\u6700\u4f18\u89e3\u662f\\(\\{11,12,13\\}+\\{10,12,14\\}\\)\u3002</p> <p>D\uff0c\u8003\u8651\\(\\{1,2,100\\}=\\{1,2\\}+\\{100\\}\\)\u3002</p> Question <p>Max-cut problem: Given an undirected graph \\(G=(V, E)\\) with positive integer edge weights \\(w_{e}\\), find a node partition \\((A, B)\\) such that \\(w(A, B)\\), the total weight of edges crossing the cut, is maximized. Let us define \\(S^{\\prime}\\) be the neighbor of \\(S\\) such that \\(S^{\\prime}\\) can be obtained from \\(S\\) by moving one node from \\(A\\) to \\(B\\), or one from \\(B\\) to \\(A\\). only choose a node which, when flipped, increases the cut value by at least \\(w(A, B) /|V|\\). Then which of the following is true?</p> <p>A. Upon the termination of the algorithm, the algorithm returns a cut \\((A,B)\\) so that \\(2.5w(A,B) \\ge w(A^\u2217, b^*)\\), where \\((A^\u2217 ,B^\u2217)\\) is an optimal partition.</p> <p>B. The algorithm terminates after at most \\(O(\\log|V|\\log W)\\) flips, where \\(W\\) is the total weight of edges.</p> <p>C. Upon the termination of the algorithm, the algorithm returns a cut \\((A,B)\\) so that \\(2w(A,B) \\ge w(A^\u2217, b^*)\\).</p> <p>D. The algorithm terminates after at most \\(O(|V|^2)\\) flips.</p> Answer <p>A</p> <p>\u7531 PPT \u4e0a\u7ed3\u8bba\u53ef\u5f97\u3002</p>"},{"location":"Computer_Science/ADS/Homework/#hw13","title":"HW13","text":"Question <p>Let \\(a = (a_1, a_2, \\ldots, a_n)\\) denote the list of elements we want to sort. In the quicksort algorithm, if the pivot is selected uniformly at random. Then any two elements get compared at most once and the probability of \\(a_i\\) and \\(a_j\\) being compared is \\(\\frac{1}{j-i+1}\\) for \\(j &gt; i\\) , given that \\(a_i\\) or \\(a_j\\) is selected as the pivot. (T/F)</p> Answer <p>F</p> <p>\u5982\u679c \\(a\\) \u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u8bba\u6b63\u786e\u3002\u5177\u4f53\u8bc1\u660e\u8fc7\u7a0b\u53ef\u4ee5\u770b\u7b14\u8bb0\u5185\u5bb9\u3002</p> Question <p>Reviewing the randomized QuickSort in our course, we always select a central splitter as a pivot before recursions, make sure that each side contains at least \\(\\frac{n}{4}\\) elements.Hence, differing from the deterministic QuickSort, the worst case expected running time of the randomized QuickSort is \\(\\Theta (n \\log n)\\). (T/F)</p> Answer <p>T</p> <p>\u5177\u4f53\u53ef\u4ee5\u67e5\u770b slides \u4e2d\u7684\u5185\u5bb9\u3002</p> Question <p>Given a linked list containg \\(N\\) nodes.  Our task is to remove all the nodes. At each step, we randomly choose one node in the current list, then delete the selected node together with all the nodes after it. Here we assume that each time we choose one node uniformly among all the remaining nodes. What is the expected number of steps to remove all the nodes?</p> <p>A. \\(\\Theta (\\log N)\\)</p> <p>B. \\(\\frac{N}{e}\\)</p> <p>C. \\(\\frac{N}{2}\\)</p> <p>D. \\(\\sqrt{N}\\)</p> Answer <p>A. \\(\\Theta (\\log N)\\)</p> <p>\u4f9d\u9898\u6709\u5173\u7cfb\u5f0f \\(a_n = \\frac{1}{N} \\sum\\limits_{i=1}^{N-1} a_i + 1\\)</p> <p>\u53ef\u4ee5\u901a\u8fc7\u5e26\u5165\u6c42\u89e3\u5f97\u5230 B\uff0cC\uff0cD \u5747\u4e0d\u6ee1\u8db3\u3002</p> <p>\u53ef\u4ee5\u7531\u5f52\u7eb3\u6cd5\u8bc1\u660e\u5f97\u5230 A \u6b63\u786e\u3002</p> Question <p>The Online Hiring Algorithm ( hire only once ) is described as the following:</p> <pre><code>int OnlineHiring ( EventType C[ ], int N, int k )\n{\n    int Best = N;\n    int BestQ = -INFINITY ;\n    for ( i=1; i&lt;=k; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ )   BestQ = Qi;\n    }\n    for ( i=k+1; i&lt;=N; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ ) {\n            Best = i;\n            break;\n        }\n    }\n    return Best;\n}\n</code></pre> <p>Assume that the quality input C[ ] is uniformly random.</p> <p>When \\(N = 271\\) and \\(k=90\\) , the probability of hiring the \\(N \\ th\\) candidate is ...</p> Answer <p>\u56e0\u6b64\u524d 270 \u540d\u4e2d\u6700\u597d\u7684\u90a3\u4e00\u4e2a\u5fc5\u987b\u5728\u524d90\u5f53\u4e2d\uff0c\u4e5f\u5373 \\(P = \\frac{90}{270} = \\frac{1}{3}\\)</p>"},{"location":"Computer_Science/ADS/Homework/#hw14","title":"HW14","text":"Question <p>While comparing a serial algorithm with its parallel counterpart, we just concentrate on reducing the work load. (T/F)</p> Answer <p>F</p> <p>\u53ef\u4ee5\u79fb\u6b65\u7b14\u8bb0\u4e2d\u5173\u4e8e Measuring the performance \u7684\u90e8\u5206\u3002\u6211\u4eec\u8981\u5173\u6ce8\u4e24\u65b9\u9762\u3002</p> <p>Work load - total number of operations: W(n)</p> <p>Worst-case running time: T(n)</p> Question <p>To evaluate the Prefix-Sums of a sequence of 16 numbers by the parallel algorithm with Balanced Binary Trees, C(4,1) is found before C(2,2). (T/F)</p> Answer <p>T</p> <p>\u5148\u8ba1\u7b97 B\uff0cB \u662f\u81ea\u5e95\u5411\u4e0a\u8ba1\u7b97\u7684\uff1b\u540e\u8ba1\u7b97 C\uff0cC \u662f\u81ea\u9876\u5411\u4e0b\u8ba1\u7b97\u7684\u3002</p> Question <p>To evaluate the sum of a sequence of 16 numbers by the parallel algorithm with Balanced Binary Trees, B(1,6) is found before B(2,1). (T/F)</p> Answer <p>T</p> <p>\u540c\u4e0a\uff0c\u5148\u8ba1\u7b97 B\uff0cB \u662f\u81ea\u5e95\u5411\u4e0a\u8ba1\u7b97\u7684\uff1b\u540e\u8ba1\u7b97 C\uff0cC \u662f\u81ea\u9876\u5411\u4e0b\u8ba1\u7b97\u7684\u3002</p> Question <p>In order to solve the maximum finding problem by a parallel algorithm with \\(T(n)=O(1)\\) , we need work load \\(W(n)= \\Omega (n^2)\\) in return. (T/F)</p> Answer <p>F</p> <p>\u6700\u6700\u66b4\u529b\u7684\u89e3\u6cd5\u4e5f\u5c31 \\(W(n) = O(n^2)\\) ,\u82e5\u662f\u5e94\u7528 Random Sampling \u7b97\u6cd5\uff0c\u5e94\u8be5\u4e3a \\(W(n)=O(n)\\)</p> Question <p>To solve the Maximum Finding problem with parallel Random Sampling method, \\(O(n)\\) processors are required to get \\(T(n)=O(1)\\) and \\(W(n)=O(n)\\) with very high probability. (T/F)</p> Answer <p>T</p> <p>\u7b14\u8bb0\u4e2d\u7684 Theorem \uff0c\u8bc1\u660e\u4e0d\u8981\u6c42\uff0c\u611f\u5174\u8da3\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u53bb\u8bc1\u660e\u3002</p> Question <p>The prefix-min problem is to find for each i, \\(1 \\le i \\le n\\) , the smallest element among \\(A(1), A(2), \\cdots , A(i)\\) .  What is the run time and work load for the following algorithm?</p> <pre><code>for i, 1 &lt;= i &lt;= n pardo\n    B(0, i) = A(i)\nfor h=1 to log(n)\n    for i, 1&lt;= i &lt;= n/2^h pardo\n        B(h, i) = min {B(h-1, 2i-1), B(h-1, 2i)}\nfor h=log(n) to 0\n    for i even, 1 &lt;= i &lt;= n/2^h pardo\n        C(h, i) = C(h+1, i/2)\n    for i=1 pardo\n        C(h, 1) = B(h, 1)\n    for i odd, 3 &lt;= i &lt;= n/2^h pardo\n        C(h, i) = min {C(h + 1, (i - 1)/2), B(h, i)}\nfor i, 1 &lt;= i &lt;= n pardo\n    Output C(0, i)\n</code></pre> Answer <p>\\(T(n)=O(\\log n)\\) , \\(W(n)=O(n)\\)</p> <p>\u548c Prefix-Sums \u6781\u5ea6\u7c7b\u4f3c\u3002</p> Question <p>Which one of the following statements about the Maximum Finding problem is true?</p> <p>A. There exists a serial algorithm with time complexity being \\(O(\\log N)\\)</p> <p>B. No parallel algorithm can solve the problem in \\(O(1)\\) time</p> <p>C. When partitioning the problem into sub-problems and solving them in parallel, compared with \\(\\sqrt{N}\\) ,choosing \\(\\log \\log N\\) as the size of each sub-problem can reduce the work load and the worst-case time complexity.</p> <p>D. Parallel random sampling algorithm can run in \\(O(1)\\) time and \\(O(N)\\) work with very high probability.</p> Answer <p>D.</p> <p>A. \u81f3\u5c11\u4e5f\u662f \\(O(N)\\)</p> <p>B. all paris \u548c Random Sampling \u90fd\u662f \\(O(1)\\)</p> <p>C. \u53ea\u80fd\u51cf\u5c11 work load\uff0c\u4e0d\u80fd\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6</p> Question <p>Sorting-by-merging is a classic serial algorithm.  It can be translated directly into a reasonably efficient parallel algorithm. A recursive description follows.</p> <p>\\(MERGE\u2212SORT( A(1), A(2), \\dots, A(n); B(1), B(2), \\dots, B(n) )\\)</p> <p>Assume that \\(n = 2^l\\) for some integer \\(l \\ge 0\\)</p> <p>if n = 1 then return B(1) := A(1)</p> <p>else call, in parallel, \\(MERGE\u2212SORT( A(1), \\dots, A(n/2); C(1), \\dots, C(n/2) )\\) and \\(MERGE\u2212SORT(A(n/2+1), \\dots , A(n); C(n/2+1), \\dots , C(n) )\\)</p> <p>\\(Merge (C(1),\\dots ,C(n/2)) and (C(n/2 + 1),\\dots,C(n)) into (B(1), B(2), \\dots, B(n)) with time O(\\log n)\\)</p> <p>Then the MERGE\u2212SORT runs in __ .</p> <p>A. \\(O(n\\log n)\\) work and \\(O(\\log^2 n)\\) time</p> <p>B. \\(O(n\\log n)\\) work and \\(O(\\log n)\\) time</p> <p>C. \\(O(n\\log^2 n)\\) work and \\(O(\\log^2 n)\\) time</p> <p>D. \\(O(n\\log^2 n)\\) work and \\(O(\\log n)\\) time</p> Answer <p>A</p> <p>\u539f\u9898\u6709\u8bef\uff0cyds\u8001\u5e08\u6307\u51fa\u5e94\u8be5\u66f4\u6b63\u4e3a \\(Merge (C(1),\\dots ,C(n/2)) and (C(n/2 + 1),\\dots,C(n)) into (B(1), B(2), \\dots, B(n)) with time O(\\log n)\\)</p> <ul> <li>\u6bcf\u6b21\u9012\u5f52\u8c03\u7528\uff0c\u95ee\u9898\u88ab\u5206\u6210\u4e24\u4e2a\u5927\u5c0f\u4e3a \\(n/2\\) \u7684\u5b50\u95ee\u9898\u3002</li> <li> <p>\u9012\u5f52\u8c03\u7528\u7684\u5de5\u4f5c\u91cf\u4e3a\uff1a\\(T_{\\text{work}}(n) = 2 \\cdot T_{\\text{work}}\\left(\\frac{n}{2}\\right) + O(n)\\) \u5176\u4e2d\uff0c\\(O(n)\\) \u662f\u5408\u5e76\u4e24\u4e2a\u5b50\u6570\u7ec4\u6240\u9700\u7684\u7ebf\u6027\u65f6\u95f4\u3002</p> </li> <li> <p>\u6839\u636e\u9012\u5f52\u6811\u7684\u5206\u6790\u65b9\u6cd5\uff1a</p> <ul> <li>\u6bcf\u4e00\u5c42\u7684\u5de5\u4f5c\u91cf\u662f \\(O(n)\\)\uff08\u4e24\u4e2a\u5b50\u95ee\u9898\u7684\u9012\u5f52\u8c03\u7528 + \u5408\u5e76\u64cd\u4f5c\uff09\u3002</li> <li>\u9012\u5f52\u6df1\u5ea6\u4e3a \\(\\log n\\)\uff08\u56e0 \\(n = 2^l\\) \uff0c\u9012\u5f52\u4f1a\u6301\u7eed\u5bf9 \\(n\\) \u4e8c\u5206\u76f4\u5230 \\(n = 1\\) \uff09\u3002</li> <li>\u603b\u5de5\u4f5c\u91cf\u4e3a\u6bcf\u4e00\u5c42\u7684\u5de5\u4f5c\u91cf\u4e58\u4ee5\u9012\u5f52\u6df1\u5ea6\uff1a\\(T_{\\text{work}}(n) = O(n \\log n)\\)</li> </ul> </li> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u5173\u6ce8\u5e76\u884c\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\uff0c\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u65f6\u95f4\u548c\u5e76\u884c\u7684\u5408\u5e76\u64cd\u4f5c\u65f6\u95f4\u3002</p> </li> <li>\u6bcf\u4e00\u5c42\u7684\u9012\u5f52\u8c03\u7528\u662f\u5b8c\u5168\u5e76\u884c\u7684\uff0c\u56e0\u6b64\u65f6\u95f4\u53ea\u4e0e\u5408\u5e76\u64cd\u4f5c\u76f8\u5173\u3002</li> <li>\u5408\u5e76\u4e24\u4e2a \\(n\\) \u5143\u7d20\u6570\u7ec4\u7684\u65f6\u95f4\u4e3a \\(O(n)\\) \uff0c\u4f46\u5728\u5e76\u884c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5408\u5e76\u64cd\u4f5c\u5206\u6210\u591a\u6b65\uff0c\u4f8b\u5982\u5c06\u5c0f\u90e8\u5206\u5e76\u884c\u5f52\u5e76\uff0c\u56e0\u6b64\u5408\u5e76\u65f6\u95f4\u53ef\u4ee5\u51cf\u5c11\u3002</li> <li>\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u9012\u5f52\u5173\u7cfb\u4e3a\uff1a \\(T_{\\text{time}}(n) = T_{\\text{time}}\\left(\\frac{n}{2}\\right) + O(\\log n)\\)</li> <li>\u8fd9\u91cc \\(O(\\log n)\\) \u662f\u6bcf\u4e00\u5c42\u7684\u5408\u5e76\u65f6\u95f4\u3002</li> <li>\u9012\u5f52\u6df1\u5ea6\u4e3a \\(\\log n\\) \uff0c\u603b\u65f6\u95f4\u4e3a\uff1a\\(T_{\\text{time}}(n) = O(\\log^2 n)\\)</li> </ul> Question <p>Which one of the following statements about the Ranking problem is true? (Assume that both arrays contain N elements.)</p> <p>A. There exists a serial algorithm with time complexity being \\(O(\\log N)\\)</p> <p>B. Parallel binary search algorithm can solve the problem in \\(O(1)\\) time.</p> <p>C. When partitioning the problem into sub-problems and solving them in parallel, choosing \\(\\log \\log N\\) as the size of each sub-problem can reduce the work load and the worst-case time complexity to \\(O(\\log N)\\).</p> <p>D. There is a parallel algorithm that can run in \\(O(\\log N)\\) time and \\(O(N)\\) work.</p> Answer <p>D</p> <p>A. \u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528 \\(O(N\\logN)\\) \u7684\u65b9\u6cd5\uff08\u5982\u6392\u5e8f + \u904d\u5386\uff09\uff0c\u6216\u8005 \\(O(N)\\) \u7684\u65b9\u6cd5\uff08\u5982\u8ba1\u6570\u6392\u5e8f\u6216\u6876\u6392\u5e8f\uff09\u3002\u7531\u4e8e\u6bcf\u4e2a\u5143\u7d20\u90fd\u9700\u8981\u5904\u7406\uff0c\u4e32\u884c\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u81f3\u5c11\u4e3a \\(O(N)\\) \u3002</p> <p>B. \u4e8c\u5206\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log N)\\) , \u5373\u4f7f\u5e76\u884c\u8fd0\u884c\uff0c\u6574\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u4ecd\u7136\u53d6\u51b3\u4e8e\u6bcf\u6b21\u4e8c\u5206\u67e5\u627e\u7684\u65f6\u95f4\u3002</p> <p>C. \u5212\u5206\u4e3a \\(\\frac{n}{\\log n}\\) \u4e2a\u5b50\u95ee\u9898\uff0c\u53ef\u4ee5\u5f97\u5230 \\(T = O(\\log n)\\) , \\(W = O(n)\\) </p>"},{"location":"Computer_Science/ADS/Homework/#hw15","title":"HW15","text":"Question <p>To merge 55 runs using 3 tapes for a 2-way merge, the original distribution (34, 21) is better than (27, 28).  (T/F)</p> Answer <p>T</p> <p>\u6309\u7167\u6590\u6ce2\u90a3\u5951\u6570\u5217\u6765\u5206\u3002</p> Question <p>If only one tape drive is available to perform the external sorting, then the tape access time for any algorithm will be \\(\\Omega (n^2)\\). (T/F)</p> Answer <p>T</p> <p>\u5728\u5355\u4e2a\u78c1\u5e26\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u8bfb\u53d6\u6216\u5199\u5165\u6570\u636e\u90fd\u9700\u8981\u7ebf\u6027\u626b\u63cf\u78c1\u5e26\uff0c\u800c\u65e0\u6cd5\u50cf\u5728\u5185\u5b58\u4e2d\u90a3\u6837\u968f\u673a\u8bbf\u95ee\u6570\u636e\u3002\u4e5f\u5373\u5bfb\u9053\u65f6\u95f4\u53d8\u5927\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8981\u5bf9\u78c1\u5e26\u4e0a \\(n\\) \u4e2a\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u5192\u6ce1\u6392\u5e8f\u7684\u7b56\u7565\uff0c\u5176\u4e2d\u6bcf\u4e00\u8f6e\u90fd\u4f1a\u627e\u5230\u5f53\u524d\u672a\u6392\u5e8f\u90e8\u5206\u7684\u6700\u5927\uff08\u6216\u6700\u5c0f\uff09\u5143\u7d20\uff0c\u5e76\u5c06\u5176\u79fb\u52a8\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002\u7531\u4e8e\u78c1\u5e26\u4e0a\u7684\u6bcf\u4e00\u6b21\u67e5\u627e\u548c\u4ea4\u6362\u64cd\u4f5c\u90fd\u6d89\u53ca\u5230\u7ebf\u6027\u65f6\u95f4\u7684\u626b\u63cf\uff0c\u56e0\u6b64\u6bcf\u4e00\u8f6e\u7684\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \uff0c\u800c\u9700\u8981\u8fdb\u884c\u5927\u7ea6 \\(n\\) \u8f6e\u8fd9\u6837\u7684\u64cd\u4f5c\u6765\u786e\u4fdd\u6240\u6709\u5143\u7d20\u90fd\u88ab\u6b63\u786e\u6392\u5e8f\u3002\u8fd9\u5bfc\u81f4\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002</p> Question <p>In external sorting, a k-way merging is usually used in order to reduce the number of passes and we will take the k as large as possible as long as we have enough amount of tapes. (T/F)</p> Answer <p>F</p> <p>k \u8fc7\u5927\u65f6\u8f93\u5165\u7f13\u5b58\u6570\u91cf\u4f1a\u66f4\u591a\uff0c\u8f93\u5165\u7f13\u5b58\u5927\u5c0f\u4f1a\u5c0f\uff0c\u5bfc\u81f4\u6548\u7387\u964d\u4f4e\u3002</p> Question <p>In general, for a 3-way merge we need 6 input buffers and 2 output buffers for parallel operations. (T/F)</p> Answer <p>T</p> <p>In general, for a k-way merge we need 2k input buffers and 2 output buffers for parallel operations in external sorting.</p> Question <p>Given 100,000,000 records of 256 bytes each, and the size of the internal memory is 128MB. If simple 2-way merges are used, how many passes do we have to do?</p> <p>A. 10</p> <p>B. 9</p> <p>C. 8</p> <p>D. 7</p> Answer <p>B</p> <p>N = 100,000,000 = \\(10^8\\)</p> <p>M = 128 MB / 256 bytes = \\(2^{19}\\)</p> <p>pass = 1 + $\\lceil \\log_2 \\frac{N}{M} \\rceil = 9</p> Question <p>In external sorting, suppose we have 5 runs of lengths 2, 8, 9, 5, and 3, respectively. Which of the following merging orders can obtain the minimum merge time?</p> <p>A. merge runs of lengths 2 and 3 to obtain Run#1; merge Run#1 with the one of length 5 to obtain Run#2; merge Run#2 with the one of length 8 to obtain Run#3; merge Run#3 with the one of length 9</p> <p>B. merge runs of lengths 2 and 3 to obtain Run#1; merge Run#1 with the one of length 5 to obtain Run#2; merge runs of lengths 8 and 9 to obtain Run#3; merge Run#2 and Run#3</p> <p>C. merge runs of lengths 2 and 3 to obtain Run#1; merge runs of lengths 5 and 8 to obtain Run#2; merge Run#1 and Run#2 to obtain Run#3; merge Run#3 with the one of length 9</p> <p>D. merge runs of lengths 2 and 3 to obtain Run#1; merge runs of lengths 5 and 8 to obtain Run#2; merge Run#2 with the one of length 9 to obtain Run#3; merge Run#1 and Run#3</p> Answer <p>B</p> <p>\u5373\u6784\u5efa\u970d\u592b\u66fc\u6811\u3002</p> Question <p>In external sorting, in order to reduce the number of passes, minimizing the initial number of runs (i.e. generating longer runs ) is a good idea. Suppose the input record keys are (25, 74, 56, 34, 21, 11, 29, 80, 38, 53) and the internal memery can hold only 3 records, the minimum number of initial runs obtained by replacement selection is__ \u3002</p> <p>A. 1</p> <p>B. 2</p> <p>C. 3</p> <p>D. 4</p> Answer <p>B</p> <p>25 34 56 74</p> <p>11 21 29 38 53 80</p> Question <p>Suppose we have the internal memory that can handle 12 numbers at a time, and the following two runs on the tapes:</p> <p>Run 1: 1, 3, 5, 7, 8, 9, 10, 12</p> <p>Run 2: 2, 4, 6, 15, 20, 25, 30, 32</p> <p>Use 2-way merge with 4 input buffers and 2 output buffers for parallel operations.  Which of the following three operations are NOT done in parallel?</p> <p>A. 1 and 2 are written onto the third tape; 3 and 4 are merged into an output buffer; 6 and 15 are read into an input buffer</p> <p>B. 3 and 4 are written onto the third tape; 5 and 6 are merged into an output buffer; 8 and 9 are read into an input buffer</p> <p>C. 5 and 6 are written onto the third tape; 7 and 8 are merged into an output buffer; 20 and 25 are read into an input buffer</p> <p>D. 7 and 8 are written onto the third tape; 9 and 15 are merged into an output buffer; 10 and 12 are read into an input buffer</p> Answer <p>D</p> <p>D \u9009\u9879\u5f3a\u884c\u60f3\u8981 parallel \uff0c\u56e0\u6b64\u6ca1\u6709\u7ba1\u6b63\u5728\u8bfb\u5165\u7684 10, 12\uff0c\u76f4\u63a5\u57fa\u4e8e\u73b0\u6709 3 \u4e2a buffer \u5757 merge \uff0c\u56e0\u6b64\u8fdb\u884c\u4e86\u9519\u8bef\u7684 merge(9, 15)\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e00\u6b65\u65e0\u6cd5 parallel \uff0c\u5fc5\u987b\u7b49\u5f85 10, 12 \u8bfb\u5b8c\u4e4b\u540e\u624d\u80fd\u8fdb\u884c\u6b63\u786e\u7684 merge(9, 10)\u3002</p> Question <p>Suppose that the replacement selection is applied to generate longer runs with a priority queue of size 4. Given the sequence of numbers { 9, 75, 17, 12, 88, 91, 25, 22, 35, 41, 58, 96, 15 }.  Which of the following gives the second output run?</p> <p>A. 22 35 88 91</p> <p>B. 22 35 41 58 88 91 96</p> <p>C. 22 35 41 58 96</p> <p>D. 22 35 41 58</p> Answer <p>C</p> <p>9  12 17 25 75 88 91</p> <p>22 35 41 58 96</p> <p>15</p>"},{"location":"Computer_Science/ADS/organisedproblems/","title":"Organisedproblems","text":"<p> \u7ea6 2696 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f</p>"},{"location":"Computer_Science/ADS/organisedproblems/#satisfiability-sat-problem","title":"Satisfiability (SAT problem)","text":"<p>SAT \u95ee\u9898\u7684\u76ee\u6807\u662f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e03\u5c14\u516c\u5f0f\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u79cd\u53d8\u91cf\u8d4b\u503c\u4f7f\u5f97\u516c\u5f0f\u4e3a\u771f\u3002</p> <p>\u56e0\u6b64 SAT \u95ee\u9898\u662f NP \u95ee\u9898\uff0c\u662f NPC \u95ee\u9898\uff0c\u4e5f\u662f NPH \u95ee\u9898\u3002</p> <p>SAT \u662f\u7b2c\u4e00\u4e2a\u88ab\u8bc1\u660e\u4e3a NP-complete \u7684\u95ee\u9898\uff08\u7531 Stephen Cook \u5728 1971 \u5e74\u63d0\u51fa\u7684 Cook \u5b9a\u7406\uff09\u3002</p> <p>\u6839\u636e Cook \u5b9a\u7406\uff0c\u4efb\u4f55 NP \u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\uff08polynomial-time reduction\uff09\u8f6c\u5316\u4e3a SAT \u95ee\u9898\u3002\u56e0\u6b64\uff0cSAT \u662f NP \u4e2d\u7684\u201c\u6700\u96be\u201d\u95ee\u9898\u4e4b\u4e00\uff0c\u6240\u6709\u5176\u4ed6 NP \u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\u5230 SAT\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#2-sat","title":"2-SAT \u95ee\u9898","text":"<p>\u7136\u800c\u5bf9\u4e8e 2-SAT \u95ee\u9898\u6765\u8bf4\u662f P \u95ee\u9898\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8bc1\u660e\uff1a</p> <ol> <li>\u6784\u9020\u8574\u542b\u56fe\uff1a</li> </ol> <p>\u200b   \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5f62\u5982 \\(x_i \\cup x_j\\) \u7684\u5b50\u53e5\uff0c\u6211\u4eec\u6dfb\u52a0\u4e24\u6761\u6709\u5411\u8fb9\uff1a</p> \\[\\neg x_i \\rightarrow x_j\\] \\[\\neg x_j \\rightarrow x_i\\] <ol> <li>\u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3\uff1a</li> </ol> <p>\u4f7f\u7528 Kosaraju \u6216 Tarjan \u7b97\u6cd5\u5c06\u6784\u9020\u7684\u8574\u542b\u56fe\u5206\u89e3\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\uff08SCC\uff09\u3002</p> <ol> <li>\u68c0\u6d4b\u77db\u76fe\uff1a</li> </ol> <p>\u68c0\u67e5\u662f\u5426\u6709\u4efb\u4f55\u4e00\u5bf9\u4e92\u8865\u7684\u53d8\u91cf \\(x_i\\) \u548c \\(\\neg x_i\\) \u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u5982\u679c\u6709\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u516c\u5f0f\u662f\u4e0d\u53ef\u6ee1\u8db3\u7684\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740 \\(x_i\\) \u5fc5\u987b\u540c\u65f6\u4e3a\u771f\u548c\u5047\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002</p> <ol> <li>\u62d3\u6251\u6392\u5e8f\u4e0e\u8d4b\u503c\uff1a</li> </ol> <p>\u5982\u679c\u6ca1\u6709\u77db\u76fe\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u62d3\u6251\u6392\u5e8f\u6765\u786e\u5b9a\u53d8\u91cf\u7684\u8d4b\u503c\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4ece\u540e\u5411\u524d\u904d\u5386 SCC\uff0c\u4e00\u65e6\u9047\u5230\u4e00\u4e2a\u5c1a\u672a\u8d4b\u503c\u7684\u53d8\u91cf \\(x_i\\) \uff0c\u5c31\u5c06\u5176\u8bbe\u4e3a\u771f\uff0c\u5e76\u6839\u636e\u8574\u542b\u5173\u7cfb\u66f4\u65b0\u5176\u4ed6\u53d8\u91cf\u7684\u503c\u3002</p> <p>\u590d\u6742\u5ea6\u5206\u6790\uff1a</p> <ul> <li>\u6784\u5efa\u8574\u542b\u56fe\uff1a\u9700\u8981\u7ebf\u6027\u65f6\u95f4 \\(O(m)\\) \uff0c\u5176\u4e2d \\(m\\)  \u662f\u5b50\u53e5\u7684\u6570\u91cf\u3002</li> <li>\u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3\uff1aKosaraju \u6216 Tarjan \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n+m)\\) \uff0c\u5176\u4e2d \\(n\\) \u662f\u53d8\u91cf\u7684\u6570\u91cf\uff0c\\(m\\) \u662f\u5b50\u53e5\u7684\u6570\u91cf\u3002</li> <li>\u68c0\u6d4b\u77db\u76fe\u53ca\u8d4b\u503c\uff1a\u8fd9\u90e8\u5206\u64cd\u4f5c\u4e5f\u662f\u7ebf\u6027\u7684\u3002</li> </ul> <p>\u56e0\u6b64\uff0c\u6574\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n+m)\\) \uff0c\u8fd9\u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#clique-problem","title":"Clique Problem\uff08\u56e2\u95ee\u9898\uff09","text":"<ol> <li>\u6700\u5927\u56e2\u95ee\u9898\uff08Maximum Clique Problem\uff09\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u627e\u51fa\u5177\u6709\u6700\u591a\u9876\u70b9\u7684\u5b8c\u5168\u5b50\u56fe\u3002\u8fd9\u662f\u4e00\u4e2a\u4f18\u5316\u95ee\u9898\u3002</li> <li>\u56e2\u5224\u5b9a\u95ee\u9898\uff08Clique Decision Problem\uff09\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u786e\u5b9a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5927\u5c0f\u81f3\u5c11\u4e3a k \u7684\u5b8c\u5168\u5b50\u56fe\u3002\u8fd9\u662f\u4e00\u4e2a\u51b3\u7b56\u95ee\u9898\u3002</li> </ol>"},{"location":"Computer_Science/ADS/organisedproblems/#clique","title":"Clique \u95ee\u9898\u7684\u590d\u6742\u6027","text":"<p>Clique \u95ee\u9898\u662f NP \u5b8c\u5168\u95ee\u9898\u3002\u8fd9\u610f\u5473\u7740\uff1a</p> <ul> <li>NP\uff1a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u89e3\uff08\u5373\u4e00\u7ec4\u9876\u70b9\uff09\uff0c\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u8fd9\u4e9b\u9876\u70b9\u662f\u5426\u6784\u6210\u4e00\u4e2a\u5927\u5c0f\u81f3\u5c11\u4e3a k \u7684\u56e2\u3002</li> <li>NP \u5b8c\u5168\uff1a\u4efb\u4f55 NP \u95ee\u9898\u90fd\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u8f6c\u5316\u4e3a\u56e2\u95ee\u9898\uff0c\u5e76\u4e14\u5982\u679c\u80fd\u627e\u5230\u4e00\u4e2a\u89e3\u51b3\u56e2\u95ee\u9898\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\uff0c\u5219\u53ef\u4ee5\u89e3\u51b3\u6240\u6709\u7684 NP \u95ee\u9898\u3002</li> </ul> <p>\u5177\u4f53\u8bc1\u660e\u79fb\u6b65\u8bfe\u7a0b\u7b14\u8bb0\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#tautology-problem","title":"Tautology Problem","text":"<p>\u95ee\u9898\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e03\u5c14\u516c\u5f0f \\(\\phi\\) \uff0c\u5224\u65ad\u5b83\u662f\u5426\u5bf9\u6240\u6709\u53ef\u80fd\u7684\u53d8\u91cf\u8d4b\u503c\u90fd\u4e3a\u771f\uff08\u5373 \\(\\phi\\) \u662f\u6052\u771f\u7684\uff09\u3002</p> <p>Tautology Problem \u662f NPH \u95ee\u9898\uff0c\u5927\u6982\u7387\u4e0d\u662f NP \u95ee\u9898\uff0c\u6240\u4ee5\u5927\u6982\u7387\u4e0d\u662f NPC \u95ee\u9898\u3002</p> <p>\u4e3a\u4ec0\u4e48\u8bf4\u5927\u6982\u7387\u4e0d\u662f NP \u95ee\u9898\u5462</p> <p>\u56e0\u4e3a\u5c1a\u672a\u6709\u4e25\u683c\u7684\u6570\u5b66\u8bc1\u660e\u6765\u8bc1\u660e\u65e0\u6cd5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u3002(\u6211\u4e2a\u4eba\u7684\u7406\u89e3\u662f\u6216\u8bb8\u5b58\u5728\u67d0\u4e9b\u503c\u662f\u76f8\u4e92\u4f9d\u5b58\u7684\u5f0f\u5b50\u4f1a\u76f8\u4e92\u5f71\u54cd\u4e4b\u7c7b\u7684\u4e8b\u60c5)</p> <p>\u56e0\u6b64\u65e0\u6cd5\u76f4\u63a5\u786e\u5b9a Tautology Problem \u662f\u5426\u662f NP \u95ee\u9898\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#tsp-traveling-salesman-problem","title":"TSP, Traveling Salesman Problem\uff08\u65c5\u884c\u5546\u95ee\u9898\uff09","text":""},{"location":"Computer_Science/ADS/organisedproblems/#_1","title":"\u65c5\u884c\u5546\u95ee\u9898","text":"<p>\u6838\u5fc3\u662f\uff1a</p> <ul> <li>\u7ed9\u5b9a\u4e00\u7ec4\u57ce\u5e02\u548c\u57ce\u5e02\u4e4b\u95f4\u7684\u8ddd\u79bb\uff08\u6216\u6210\u672c\uff09\uff0c\u4e00\u4e2a\u65c5\u884c\u5546\u9700\u8981\u4ece\u8d77\u59cb\u57ce\u5e02\u51fa\u53d1\uff0c\u8bbf\u95ee\u6bcf\u4e2a\u57ce\u5e02\u4e00\u6b21\u5e76\u8fd4\u56de\u8d77\u59cb\u57ce\u5e02\u3002</li> <li>\u76ee\u6807\uff1a\u627e\u5230\u603b\u65c5\u884c\u8ddd\u79bb\uff08\u6216\u6210\u672c\uff09\u6700\u5c0f\u7684\u8def\u5f84\u3002</li> </ul> <p>TSP \u95ee\u9898\u662f NPH \u95ee\u9898\uff0c\u4f46\u4e0d\u662f NP \u95ee\u9898\uff0c\u56e0\u6b64\u4e0d\u662f NPC \u95ee\u9898\u3002</p> <p>\u9664\u975e NP = P \uff0c\u5426\u5219\u5bf9\u4e8e\u4efb\u610f \\(k \\ge 1\\) \uff0c TSP \u4e0d\u5b58\u5728 k - \u8fd1\u4f3c\u7b97\u6cd5\u3002</p> <p>\u7136\u800c\uff0c\u73b0\u5b9e\u4e2d\u7684TSP \u8fb9\u7684\u6743\u91cd\uff08\u4e5f\u5c31\u662f\u65c5\u884c\u5546\u5728\u4e24\u70b9\u4e4b\u95f4\u901a\u884c\u7684\u8ddd\u79bb\uff09\u5e94\u5f53\u6ee1\u8db3\u4e0b\u8ff0\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff1a</p> \\[w(u,v) \\le w(u,x) + w(x,v)\\] <p>\u4f46\u662f\u5728\u6dfb\u52a0\u5ea6\u91cf\u7a7a\u95f4\u7684\u6761\u4ef6\u540e\uff0c\u65c5\u884c\u5546\u95ee\u9898\u5b58\u5728\u5982\u4e0b 2-\u8fd1\u4f3c\u7b97\u6cd5\uff1a\u9996\u5148\u6c42\u51fa\u56fe G \u7684\u6700\u5c0f\u751f\u6210\u6811 T\uff0c\u7136\u540e\u5728 T \u4e0a\u6309\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u5148\u5e8f\u904d\u5386\uff09\u7684\u9876\u70b9\u904d\u5386\u987a\u5e8f\u5f97\u5230\u4e00\u6761\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u5176\u6743\u91cd\u4e0d\u8d85\u8fc7\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u91cd\u7684\u4e24\u500d\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#tsp","title":"TSP \u7684\u4f18\u5316\u7248\u672c","text":"<p>\u540c\u6837\u7684 TSP \u95ee\u9898\u7684\u4f18\u5316\u7248\u672c\u662f\uff1a</p> <p>\u627e\u5230\u7ecf\u8fc7\u6240\u6709\u57ce\u5e02\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4f46\u4e0d\u9700\u8981\u56de\u5230\u8d77\u70b9\uff0c\u5373\u6784\u6210\u4e00\u4e2a \u54c8\u5bc6\u987f\u8def\u5f84\uff08Hamiltonian Path\uff09\u3002</p> <p>TSP \u95ee\u9898\u7684\u4f18\u5316\u7248\u672c\u4e5f\u662f NPH \u95ee\u9898\uff0c\u4f46\u540c\u6837\u4e0d\u662f  NP \u95ee\u9898\uff0c\u56e0\u6b64\u4e5f\u4e0d\u662f NPC \u95ee\u9898\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#_2","title":"\u53c8\u4e00\u7248\u672c","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b8c\u5168\u56fe G = (V, E) \u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u4f7f\u5f97\u5176\u957f\u5ea6\u4e0d\u8d85\u8fc7 k\u3002</p> <p>\u6b64\u65f6\u5c5e\u4e8e NP \u95ee\u9898\uff0c\u56e0\u6b64\u6b64\u65f6\u8fd9\u4e2a\u95ee\u9898\u662f NPH \u95ee\u9898\uff0c\u4e5f\u662f NPC \u95ee\u9898\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#0-1","title":"0-1 \u80cc\u5305\u95ee\u9898","text":"<p>\u5728 0-1 \u80cc\u5305\u95ee\u9898\u4e2d\uff0c\u6709\u4ee5\u4e0b\u6761\u4ef6\uff1a</p> <ul> <li>\u8f93\u5165\uff1a   1. \\(n\\) \u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1 \\(i\\) \u6709\u4e00\u4e2a\u91cd\u91cf \\(w_i\\) \u548c\u4ef7\u503c \\(v_i\\) \u3002   2. \u4e00\u4e2a\u80cc\u5305\uff0c\u6700\u5927\u627f\u91cd\u4e3a \\(W\\) \u3002</li> <li>\u76ee\u6807\uff1a\u4ece\u8fd9 \\(n\\) \u4e2a\u7269\u54c1\u4e2d\u9009\u62e9\u82e5\u5e72\u7269\u54c1\uff0c\u4f7f\u5f97\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 \\(W\\) \uff0c\u5e76\u4e14\u603b\u4ef7\u503c\u6700\u5927\u5316\u3002</li> </ul>"},{"location":"Computer_Science/ADS/organisedproblems/#_3","title":"\u9650\u5236\u6761\u4ef6\uff1a","text":"<ul> <li>\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u9009\u62e9\u4e00\u6b21\uff080 \u6216 1\uff09\uff0c\u56e0\u6b64\u79f0\u4e3a 0-1 \u80cc\u5305\u95ee\u9898\u3002</li> </ul> <p>\u539f\u59cb\u7684 0-1 \u80cc\u5305\u95ee\u9898\u662f NPC \u95ee\u9898\uff0c\u4f46\u4e0d\u5c5e\u4e8e\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u53ef\u4ee5\u6c42\u89e3\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u4ece\u4e24\u65b9\u9762\u8bc1\u660e\u3002</p> <p>\uff081\uff09\u72b6\u6001\u7a7a\u95f4\u7684\u89c4\u6a21</p> <ul> <li>\u539f\u95ee\u9898\u4e2d\uff0c\u80cc\u5305\u5bb9\u91cf \\(W\\) \u53ef\u4ee5\u662f\u4efb\u610f\u6b63\u6574\u6570\uff0c\u4e14\u6ca1\u6709\u5bf9\u7269\u54c1\u91cd\u91cf \\(w_i\\) \u7684\u9650\u5236\u3002</li> <li>\u52a8\u6001\u89c4\u5212\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nW)\\) \uff0c\u5176\u4e2d \\(W\\) \u662f\u80cc\u5305\u5bb9\u91cf\u3002</li> <li>\u5982\u679c \\(W\\) \u975e\u591a\u9879\u5f0f\u6709\u754c\uff08\u4f8b\u5982 \\(W = 2^n\\) \uff09\uff0c\u5219\u52a8\u6001\u89c4\u5212\u7684\u8fd0\u884c\u65f6\u95f4\u4f1a\u5448\u6307\u6570\u589e\u957f\u3002</li> </ul> <p>\uff082\uff09\u8f93\u5165\u5927\u5c0f\u5bf9\u8ba1\u7b97\u7684\u5f71\u54cd</p> <ul> <li>\u5728\u8ba1\u7b97\u590d\u6742\u6027\u4e2d\uff0c\u95ee\u9898\u7684\u96be\u5ea6\u4e0e\u8f93\u5165\u5927\u5c0f\u5bc6\u5207\u76f8\u5173\u3002\u8f93\u5165\u7684\u5927\u5c0f \\(|I|\\)\u901a\u5e38\u6309\u4e8c\u8fdb\u5236\u7f16\u7801\u8ba1\u7b97\uff1a</li> <li>\\(|I| = O(n + \\log W)\\) \uff0c\u5176\u4e2d \\(n\\) \u662f\u7269\u54c1\u6570\u91cf\uff0c\\(\\log W\\) \u662f\u80cc\u5305\u5bb9\u91cf \\(W\\) \u7684\u7f16\u7801\u957f\u5ea6\u3002</li> <li>\u52a8\u6001\u89c4\u5212\u9700\u8981\u7684\u65f6\u95f4\u662f \\(O(nW)\\) \uff0c\u800c\u975e \\(O(n \\log W)\\) \u3002\u5f53 \\(W\\) \u5f88\u5927\u65f6\uff0c\u8ba1\u7b97\u65f6\u95f4\u5448\u73b0\u6307\u6570\u589e\u957f\u3002\u4e5f\u5373\u65e0\u6cd5\u4fdd\u8bc1\u9700\u8981\u7684\u65f6\u95f4\u662f\u8f93\u5165\u89c4\u6a21\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\u5185\u89e3\u51b3\u3002</li> </ul>"},{"location":"Computer_Science/ADS/organisedproblems/#makespan-scheduling-problem","title":"Makespan Scheduling Problem\uff08\u6700\u5c0f\u5316\u5de5\u65f6\u8c03\u5ea6\u95ee\u9898\uff09","text":"<p>\u5728\u6700\u5c0f\u5316\u5de5\u65f6\u8c03\u5ea6\u95ee\u9898\u4e2d\uff1a</p> <ul> <li>\u8f93\u5165\uff1a\u6709 \\(n\\) \u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1 \\(i\\) \u7684\u5904\u7406\u65f6\u95f4\u4e3a \\(p_i\\) \uff0c\u4ee5\u53ca \\(m\\) \u53f0\u5e76\u884c\u673a\u5668\u3002</li> <li>\u76ee\u6807\uff1a\u5c06 \\(n\\) \u4e2a\u4efb\u52a1\u5206\u914d\u5230 \\(m\\) \u53f0\u673a\u5668\u4e0a\uff0c\u4f7f\u5f97\u6240\u6709\u673a\u5668\u7684\u6700\u5927\u5b8c\u6210\u65f6\u95f4\uff08\u5373 \u5de5\u65f6 makespan\uff09\u6700\u5c0f\u3002</li> </ul> <p>\u6700\u5c0f\u5316\u5de5\u65f6\u8c03\u5ea6\u95ee\u9898\u5c5e\u4e8e NPH \u95ee\u9898\u3002\u5b83\u7684\u51b3\u7b56\u7248\u672c(\u5373\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u8c03\u5ea6\u65b9\u6848\u4f7f\u5f97\u6700\u5927\u5b8c\u5de5\u65f6\u95f4\u4e0d\u8d85\u8fc7\u67d0\u4e2a\u7ed9\u5b9a\u503c)\u662f NPC \u7684\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#graham","title":"<code>Graham</code> \u7b97\u6cd5","text":"<p>\u800c\u5f53\u6211\u4eec\u8fd0\u7528\u8d2a\u5fc3\u7b97\u6cd5(\u5bf9\u6bcf\u4e2a\u4f5c\u4e1a\u8fdb\u884c\u8c03\u5ea6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9009\u62e9\u5f53\u524d\u5de5\u4f5c\u91cf\u6700\u5c0f\u7684\u673a\u5668\u8fdb\u884c\u8c03\u5ea6)\u65f6\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u7b97\u6cd5\u8fd1\u4f3c\u6bd4\u4e3a \\(2-\\frac{1}{m}\\)</p> <p>\u800c\u5982\u679c\u5148\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u7528\u8be5\u7b97\u6cd5\u53ef\u4ee5\u5f97\u5230\u8fd1\u4f3c\u6bd4\u4e3a \\(\\frac{4}{3} - \\frac{1}{3m}\\)</p>"},{"location":"Computer_Science/ADS/organisedproblems/#_4","title":"\u88c5\u7bb1\u95ee\u9898","text":""},{"location":"Computer_Science/ADS/organisedproblems/#_5","title":"\u4e00\u7ef4\u88c5\u7bb1\u95ee\u9898\uff1a","text":"<p>\u7ed9\u5b9a\u82e5\u5e72\u4e2a\u5e26\u6709\u5c3a\u5bf8\u7684\u7269\u54c1\uff0c\u8981\u6c42\u5c06\u6240\u6709\u7269\u54c1\u653e\u5165\u5bb9\u91cf\u7ed9\u5b9a\u7684\u7bb1\u5b50\u4e2d\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7bb1\u5b50\u4e2d\u7684\u7269\u54c1\u5c3a\u5bf8\u4e4b\u548c\u4e0d\u8d85\u8fc7\u7bb1\u5b50\u5bb9\u91cf\u5e76\u4f7f\u6240\u7528\u7684\u7bb1\u5b50\u6570\u76ee\u6700\u5c11\u3002</p> <p>\u51b3\u7b56\u7248\u672c : \u7ed9\u5b9a\u82e5\u5e72\u4e2a\u7269\u54c1\uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u53ef\u7531 k \u4e2a\u7bb1\u5b50\u88c5\u4e0b\u662f NPC \u7684\u95ee\u9898\u3002</p> <p>\u4f18\u5316\u7248\u672c : \u5bfb\u627e\u6700\u5c11\u6570\u91cf\u7684\u7bb1\u5b50\u6765\u5bb9\u7eb3\u6240\u6709\u7684\u7269\u54c1\u662f NPH \u7684\u95ee\u9898\u3002</p> <p>Note</p> <p>\u9664\u975e P = NP\uff0c\u5426\u5219\u88c5\u7bb1\u7b97\u6cd5\u4e0d\u5b58\u5728\u591a\u9879\u5f0f\u7b97\u6cd5\u6709\u5c0f\u4e8e \\(\\frac{3}{2}\\) \u7684\u7edd\u5bf9\u8fd1\u4f3c\u6bd4\u3002</p> <p>\u4e0d\u4f1a\u5b58\u5728 \u201cBF(best fit) \u603b\u6bd4 FF(first fit) \u597d\u201d \u6216\u8005 \u201cFF \u603b\u6bd4 BF\u201d \u597d\u7684\u7ed3\u8bba\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#_6","title":"\u4e8c\u7ef4\u88c5\u7bb1\u95ee\u9898\uff1a","text":"<p>\u6211\u4eec\u6709\u4e24\u4e2a\u8d2a\u5fc3\u7b56\u7565\uff0c\u5176\u4e00\u662f\u6839\u636e\u8fd9\u91cc\u7684\u5355\u4f4d\u91cd\u91cf\u7684\u4ef7\u503c\uff08\u5373 PPT \u4e0a\u7684 profit density\uff09\uff0c\u5176\u4e8c\u662f\u76f4\u63a5\u8d2a\u5fc3\u9009\u62e9\u6700\u5927\u4ef7\u503c\u7684\u7269\u54c1\uff0c\u6211\u4eec\u8fd0\u884c\u4e24\u4e2a\u7b97\u6cd5\u9009\u62e9\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u6837\u7ed3\u5408\u540e\u7684\u8fd1\u4f3c\u6bd4\u4e3a 2\u3002</p> <ol> <li>\u6211\u4eec\u7ed9\u5b9a\u6211\u4eec\u60f3\u8981\u8fbe\u5230\u7684\u8fd1\u4f3c\u6bd4\u7387 \\(\\varepsilon\\)\uff08\u4e3a\u4e86\u5206\u6790\u65b9\u4fbf\uff0c\u6211\u4eec\u5047\u8bbe \\(\\frac{1}{\\varepsilon}\\) \u662f\u6574\u6570\uff0c\u5982\u679c\u4e0d\u662f\u6574\u6570\u4e5f\u53ef\u4ee5\u5411\u4e0b\u627e\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u66ff\u4ee3\uff09\uff0c\u4ee4\u653e\u7f29\u6bd4\u4f8b \\(b = \\frac{\\varepsilon v_{max}}{n}\\)</li> <li>\u6211\u4eec\u5c06\u6240\u6709\u4ef7\u503c\u653e\u7f29\u4e3a \\(\\lceil \\frac{v_i}{b}\\rceil\\) \uff0c\u7136\u540e\u8fd0\u884c\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u5f97\u5230\u6700\u4f18\u89e3 v\uff1b</li> <li>\u7136\u540e\u5c06\u6240\u6709\u4ef7\u503c\u653e\u5927\u4e3a \\(v_i^\u2032 = \\lceil \\frac{v_i}{b}b \\rceil\\) \uff0c\u6b64\u65f6\u6700\u4f18\u89e3\u4e3a bv\uff0c\u7136\u540e bv \u5c31\u662f\u6211\u4eec\u7684\u8fd1\u4f3c\u6700\u4f18\u89e3\u4e86\u3002</li> </ol> <p>\u4e0a\u8ff0\u7b97\u6cd5\u662f 0 \u2212 1 \u80cc\u5305\u95ee\u9898\u7684\u4e00\u4e2a FPTAS\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#the-k-center-problem","title":"The K-center Problem\uff08\u805a\u7c7b\u95ee\u9898\uff09","text":"<p>\u8fd9\u662f\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u9002\u5f53\u6784\u9020\u4ece\u9876\u70b9\u8986\u76d6\u95ee\u9898\u6216\u5176\u4ed6\u76f8\u5173 NP \u5b8c\u5168\u95ee\u9898\u5230 K-center \u95ee\u9898\u7684\u5b9e\u4f8b\u3002</p> <p><code>Greedy-2r</code> \u7b97\u6cd5\u5728\u7ed9\u5b9a\u6700\u4f18\u89e3 \\(r(C^*)\\) \u7684\u60c5\u51b5\u4e0b\u662f\u4e00\u4e2a 2-\u8fd1\u4f3c\u7b97\u6cd5\u3002</p> <p><code>Greedy-Kcenter</code> \u7b97\u6cd5\u662f\u4e00\u4e2a 2-\u8fd1\u4f3c\u7b97\u6cd5\u3002</p> <p>\u9664\u975e NP = P \uff0c\u5426\u5219\u5bf9\u4e8e \\((\\alpha &lt; 2)\\) \u4e0d\u5b58\u5728 \\(\\alpha\\) - \u8fd1\u4f3c\u7b97\u6cd5\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#vertex-cover-problem","title":"Vertex Cover Problem\uff08\u9876\u70b9\u8986\u76d6\u95ee\u9898\uff09","text":"<p>\u8be5\u95ee\u9898\u7684\u76ee\u6807\u662f\u5728\u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e2d\u627e\u5230\u6700\u5c0f\u6570\u91cf\u7684\u9876\u70b9\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u9876\u70b9\u80fd\u591f\u201c\u8986\u76d6\u201d\u6240\u6709\u7684\u8fb9\u3002</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u6240\u9009\u9876\u70b9\u96c6\u5e94\u8be5\u5305\u542b\u6bcf\u6761\u8fb9\u7684\u81f3\u5c11\u4e00\u4e2a\u7aef\u70b9\u3002</p> <p>\u9876\u70b9\u8986\u76d6\u95ee\u9898\u662f NPC \u95ee\u9898\u3002</p> <p>\u4e00\u4e2a\u7b80\u5355\u7684\u8d2a\u5fc3\u7b97\u6cd5\uff08\u8bb0\u4e3a\u7b97\u6cd5 A\uff09\uff1a\u4efb\u610f\u4e00\u6761\u8fb9 (u, v)\uff0c\u7136\u540e\u5c06 u \u548c v \u540c\u65f6\u52a0\u5165\u5230 C \u4e2d\uff0c\u7136\u540e\u628a u\u548c v \u6240\u5728\u7684\u6240\u6709\u8fb9\u5168\u90e8\u79fb\u9664\uff0c\u4e0b\u4e00\u8f6e\u7ee7\u7eed\u5728\u5269\u4e0b\u7684\u8fb9\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u6761\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u7684\u8fb9\u90fd\u88ab\u5220\u9664\u4e3a\u6b62\u3002</p> <p>\u4e0a\u8ff0\u9876\u70b9\u8986\u76d6\u95ee\u9898\u7684\u8d2a\u5fc3\u7b97\u6cd5 A \u662f\u4e00\u4e2a 2-\u8fd1\u4f3c\u7b97\u6cd5\u3002</p>"},{"location":"Computer_Science/ADS/organisedproblems/#max-cut-problem","title":"Max-Cut Problem(\u6700\u5927\u5272\u95ee\u9898)","text":"<p>\u5b83\u6d89\u53ca\u5230\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5c06\u9876\u70b9\u96c6\u5212\u5206\u4e3a\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u8de8\u8d8a\u8fd9\u4e24\u4e2a\u5b50\u96c6\u4e4b\u95f4\u7684\u8fb9\u7684\u6570\u91cf\u6700\u5927\u5316\u3002</p> <p>\u6700\u5927\u5272\u95ee\u9898\u662f NPC \u95ee\u9898\u3002</p> <p>\u8bbe (A, B) \u662f\u5c40\u90e8\u641c\u7d22\u7b97\u6cd5(\u5229\u7528 State_flipping \u7b97\u6cd5)\u5f97\u51fa\u7684\u4e00\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\\((A^*, B^* )\\) \u662f\u6700\u4f18\u89e3\uff0c\u5219</p> \\[\\frac{w(A,B)}{w(A^*,B^*)} \\ge \\frac{1}{2}\\] <p>\u9664\u975e NP = P \uff0c\u5426\u5219\u5bf9\u4e8e \\((\\alpha \\le \\frac{17}{16})\\) \u4e0d\u5b58\u5728 \\(\\alpha\\) - \u8fd1\u4f3c\u7b97\u6cd5\u3002</p>"},{"location":"Computer_Science/CA/","title":"Database System notes","text":"<p> \u7ea6 95 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f</p> <p>\u8bfe\u7a0b\u4fe1\u606f</p> <ul> <li>\u667a\u4e91\u94fe\u63a5\uff1a\ud83d\udd17</li> <li>\u6388\u8bfe\uff1a\u738b\u5c0f\u822a</li> <li>\u6559\u6750\uff1aComputer Architecture\u2014\u2014A Quantitative Approach, John L. Hennessy</li> <li>PPT\uff1a [\ud83d\udcc1]</li> <li>\u4f5c\u4e1a\uff1a[\ud83d\udcdd]</li> <li>\u6211\u7684\u7b14\u8bb0\uff1a\ud83d\udcdd</li> <li>\u5386\u5e74\u9898\uff1a</li> <li>\u590d\u4e60\u8d44\u6599\uff1a</li> </ul> <p>\u5b66\u4e60\u5efa\u8bae</p> <ol> <li> <p>\u8001\u5e08\u8bf4\u4e00\u5b9a\u8981\u53bb\u9605\u8bfb\u82f1\u6587\u539f\u7248\u6559\u6750\uff0c\u4ee5\u53ca\u53ea\u8981\u641e\u61c2\u4e86\u6559\u6750\u7684example\uff0c\u8003\u8bd5\u5c31\u6ca1\u4ec0\u4e48\u95ee\u9898\u3002</p> </li> <li> <p>\u8fd8\u662f\u9700\u8981\u5386\u5e74\u5377\u62df\u5408\u7684\u7ecf\u5178\u7684\u4e00\u4efd</p> </li> </ol>"},{"location":"Computer_Science/CA/Chapter1/","title":"Ch1 | Fundamentals of Computer Design","text":"<p> \u7ea6 4639 \u4e2a\u5b57  3 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 23 \u5206\u949f</p>"},{"location":"Computer_Science/CA/Chapter1/#classes-of-computers","title":"Classes of Computers","text":"<p>A summary of the five mainstream computing classes and their system characteristics.</p> <p></p>"},{"location":"Computer_Science/CA/Chapter1/#internet-of-things-embedded-computers","title":"Internet of Things / Embedded Computers","text":"<ul> <li>Embedded computers : microwaves, washing machines, most printers, networking weitches, and all automobiles.</li> </ul> <p>\u5d4c\u5165\u5f0f\u8ba1\u7b97\u673a\u5728\u65e5\u7528\u7535\u5668\u4e2d\u968f\u5904\u53ef\u89c1\uff0c\u6bd4\u5982\u5fae\u6ce2\u7089\u3001\u6d17\u8863\u673a\u3001\u5927\u591a\u6570\u6253\u5370\u673a\u3001\u7f51\u7edc\u4ea4\u6362\u673a\u548c\u6240\u6709\u6c7d\u8f66\u3002</p> <ul> <li>IoT (Internet of Things) refers to embedded computers that are connected to the Internet, typically wirelessly.</li> </ul> <p>\u7269\u8054\u7f51(Intermet of Things\uff0cloT)\u6307\u7684\u662f\u901a\u5e38\u4ee5\u65e0\u7ebf\u65b9\u5f0f\u8fde\u63a5\u5230\u4e92\u8054\u7f51\u7684\u5d4c\u5165\u5f0f\u8ba1\u7b97\u673a\u3002</p> <p>Note</p> <p>DeepSeek \u7684\u53c2\u6570\u91cf\u662f 671 B.</p>"},{"location":"Computer_Science/CA/Chapter1/#personal-mobile-device-pmd","title":"personal mobile device (PMD)","text":"<p>Personal mobile device (PMD) is the term we apply to a collection of wireless devices with multimedia user interfaces such as cell phones, tablet computers, and so on.</p> <p>The processors in a PMD are often considered embedded computers, but we are keeping them as a separate category because PMDs are platforms that can run externally developed software, and they share many of the characteristics of desktop computers.</p> <p>key characteristics for media applications: </p> <ul> <li>responsiveness and predictability</li> <li>real-time performance : a segment of the application has an absolute maximum execution time</li> <li>the need to minimize memory</li> <li>the need to use energy efficiently</li> </ul>"},{"location":"Computer_Science/CA/Chapter1/#desktop-computing","title":"Desktop Computing","text":"<p>Throughout this range in price and capability, the desktop market tends to be driven to optimize price-performance.</p>"},{"location":"Computer_Science/CA/Chapter1/#servers","title":"Servers","text":"<ul> <li>availability</li> <li>scalability</li> <li>efficient throughput</li> </ul>"},{"location":"Computer_Science/CA/Chapter1/#clusterswarehouse-scale-computers","title":"Clusters/Warehouse-Scale Computers","text":"<p>Clusters are collections of desktop computers or servers connected by local area networks to act as a single larger computer. Each node runs its own operating system, and nodes communicate using a networking protocol (\u7f51\u7edc\u534f\u8bae). </p> <p>WSCs are the largest of the clusters, in that they are designed so that tens of thousands of servers can act as one.</p> <ul> <li>Price-performance and power are critical</li> <li>availability</li> <li>scalability for a WSC is handled by the local area network connecting the computers and not by integrated computer hardware, as in the case of servers.</li> </ul> <p>the difference between WSCs and servers</p> <p>WSCs use redundant, inexpensive components as the building blocks, relying on a software layer to catch and isolate the many failures that will happen with computing at this scale to deliver the availability needed for such applications.</p> <p>Supercomputers differ by emphasizing floating-point performance and by running large, communication-intensive batch programs that can run for weeks at a time. In contrast, WSCs emphasize interactive applications, large-scale storage, dependability, and high Internet bandwidth.</p> <p>\u8d85\u7ea7\u8ba1\u7b97\u673a\u5f3a\u8c03\u6d6e\u70b9\u6027\u80fd\uff0c\u8fd0\u884c\u5927\u578b\u7684\u3001\u901a\u4fe1\u5bc6\u96c6\u7684\u6279\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u4e00\u6b21\u8fd0\u884c\u51e0\u4e2a\u661f\u671f;\u800c WSC \u5f3a\u8c03\u4ea4\u4e92\u5f0f\u5e94\u7528\u7a0b\u5e8f\u3001\u5927\u89c4\u6a21\u5b58\u50a8\u3001\u53ef\u9760\u6027\u548c\u9ad8\u4e92\u8054\u7f51\u5e26\u5bbd\u3002</p>"},{"location":"Computer_Science/CA/Chapter1/#classes-of-parallelism-and-parallel-architectures","title":"Classes of Parallelism and Parallel Architectures","text":"<p>\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff1a</p> <ul> <li>\u6570\u636e\u7ea7\u5e76\u884c(data-levle parallelism DLP) \u6709\u8bb8\u591a\u6570\u636e\u9879\u53ef\u4ee5\u540c\u65f6\u64cd\u4f5c\u3002</li> <li>\u4efb\u52a1\u7ea7\u5e76\u884c(task-level parallelism TLP) \u521b\u5efa\u7684\u5de5\u4f5c\u4efb\u52a1\u53ef\u4ee5\u5355\u72ec\u6267\u884c\u5e76\u4e14\u4e3b\u8981\u91c7\u7528\u5e76\u884c\u65b9\u5f0f\u6267\u884c\u3002</li> </ul> <p>\u8ba1\u7b97\u673a\u786c\u4ef6\u53c8\u4ee5\u5982\u4e0b4\u79cd\u4e3b\u8981\u65b9\u5f0f\u6765\u5229\u7528\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u5e94\u7528\u5e76\u884c\u3002</p> <ol> <li>\u6307\u4ee4\u7ea7\u5e76\u884c\u5728\u4e24\u4e2a\u5c42\u9762\u5bf9\u6570\u636e\u7ea7\u5e76\u884c\u8fdb\u884c\u4e86\u5229\u7528\uff0c\u9996\u5148\u5728\u7f16\u8bd1\u5668\u7684\u5e2e\u52a9\u4e0b,\u501f\u52a9\u6d41\u6c34\u7ebf\u4e4b\u7c7b\u7684\u601d\u60f3\u9002\u5ea6\u5229\u7528\uff0c\u5176\u6b21\u501f\u52a9\u63a8\u6d4b\u6267\u884c(speculative execution)\u4e4b\u7c7b\u7684\u601d\u60f3\u8fdb\u4e00\u6b65\u5229\u7528\u3002</li> <li>\u5411\u91cf\u4f53\u7cfb\u7ed3\u6784\u3001\u56fe\u5f62\u5904\u7406\u5668(graphic processor unit\uff0cGPU)\u548c\u591a\u5a92\u4f53\u6307\u4ee4\u96c6(multimedia instruction set)\u5c06\u5355\u6761\u6307\u4ee4\u5e76\u884c\u5e94\u7528\u4e8e\u4e00\u7ec4\u6570\u636e\uff0c\u4ee5\u5229\u7528\u6570\u636e\u7ea7\u5e76\u884c\u3002</li> <li>\u7ebf\u7a0b\u7ea7\u5e76\u884c\u5728\u4e00\u79cd\u7d27\u8026\u5408\u786c\u4ef6\u6a21\u578b\u4e2d\u5229\u7528\u6570\u636e\u7ea7\u5e76\u884c\u6216\u4efb\u52a1\u7ea7\u5e76\u884c,\u8fd9\u79cd\u6a21\u578b\u5141\u8bb8\u5e76\u884c\u7ebf\u7a0b\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u3002</li> <li>\u8bf7\u6c42\u7ea7\u5e76\u884c\u5229\u7528\u7a0b\u5e8f\u5458\u6216\u64cd\u4f5c\u7cfb\u7edf\u6307\u5b9a\u7684\u5927\u91cf\u89e3\u8026\u4efb\u52a1\u4e4b\u95f4\u7684\u5e76\u884c\u6027\u3002</li> </ol> <p>Michael Flynn \u5c06\u5e76\u884c\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u5206\u7c7b\u4e3a\u56db\u79cd\u7c7b\u578b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u57fa\u4e8e\u6307\u4ee4\u6d41\u548c\u6570\u636e\u6d41\u4e4b\u95f4\u7684\u5e76\u884c\u6027\u3002</p> <ul> <li>SISD\uff1a\u5355\u6307\u4ee4\u6d41\u5355\u6570\u636e\u6d41</li> <li>SIMD\uff1a\u5355\u6307\u4ee4\u6d41\u591a\u6570\u636e\u6d41</li> <li>MISD\uff1a\u591a\u6307\u4ee4\u6d41\u5355\u6570\u636e\u6d41</li> <li>MIMD\uff1a\u591a\u6307\u4ee4\u6d41\u591a\u6570\u636e\u6d41</li> </ul>"},{"location":"Computer_Science/CA/Chapter1/#computer-architecture","title":"Computer Architecture (\u2b50)","text":"<p>ISA \u7684\u4e03\u4e2a\u7ef4\u5ea6</p> <ol> <li>ISA \u7684\u7c7b\u522b</li> </ol> <ul> <li>register-memory ISAs \u2014\u2014 x86</li> <li>load-store ISAs \u2014\u2014 ARM, RISC-V</li> </ul> <ol> <li>\u5b58\u50a8\u5668\u5bfb\u5740</li> </ol> <p>Byte addressing to access memory operands, some architectures, require that objects must be aligned.</p> <ol> <li>\u5bfb\u5740\u6a21\u5f0f</li> </ol> <ul> <li>RISC-V addressing modes are Register, Immediate (for constants), and Displacement, where a constant offset is added to a register to form the memory address.</li> <li>The 80x86 supports those three modes, plus three variations of displacement: no register(absolute), two registers (based indexed with displacement), and two registers where one register is multiplied by the size of the operand in bytes (based with scaled index and displacement).</li> <li>ARMv8 has the three RISC-V addressing modes plus PC-relative addressing, the sum of two registers, and the sum of two registers where one register is multiplied by the size of the operand in bytes. It also has autoincrement and autodecrement addressing, where the calculated address replaces the contents of one of the registers used in forming the address.</li> </ul> <ol> <li>\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u548c\u5927\u5c0f</li> </ol> <ul> <li>8-bit (ASCII character)</li> <li>16-bit (Unicode character or half word)</li> <li>32-bit (integer or word)</li> <li>64-bit (double word or long integer)</li> <li>IEEE 754 floating point in 32-bit (single precision) and 64-bit (double precision)</li> <li>The 80x86 also supports 80-bit floating point (extended double precision).</li> </ul> <ol> <li>\u64cd\u4f5c\u6307\u4ee4</li> </ol> <ul> <li>data transfer</li> <li>arithmetic logical</li> <li>control (discussed next)</li> <li>floating point</li> </ul> <ol> <li>\u63a7\u5236\u6d41\u6307\u4ee4</li> </ol> <ul> <li>branches</li> <li>unconditional jumps</li> <li>procedure calls and returns</li> </ul> <ol> <li>ISA \u7684\u7f16\u7801</li> </ol> <p>There are two basic choices on encoding: fixed length and variable length.</p> <ul> <li>All ARMv8 and RISC-V instructions are 32 bits long, which simplifies instruction decoding.</li> <li>The 80x86 encoding is variable length, ranging from 1 to 18 bytes.</li> </ul> <p>\u7ec4\u6210/\u5fae\u4f53\u7cfb\u7ed3\u6784 : \u5305\u542b\u4e86\u8ba1\u7b97\u673a\u8bbe\u8ba1\u7684\u9ad8\u9636\u5185\u5bb9\uff0c\u6bd4\u5982\u5b58\u50a8\u5668\u7cfb\u7edf\u3001\u5b58\u50a8\u5668\u4e92\u8fde\u3001\u5185\u90e8\u5904\u7406\u5668\u6216CPU(\u4e2d\u592e\u5904\u7406\u5668\u2014\u2014\u7b97\u672f\u3001\u903b\u8f91\u3001\u5206\u652f\u548c\u6570\u636e\u8f93\u9001\u529f\u80fd\u90fd\u5728\u8fd9\u91cc\u5b9e\u73b0)\u7684\u8bbe\u8ba1\u3002</p> <p>\u786c\u4ef6/\u7cfb\u7edf\u8bbe\u8ba1 : \u8ba1\u7b97\u673a\u7cfb\u7edf\u5185\u6240\u6709\u7684\u786c\u4ef6\u7ec4\u4ef6\uff0c\u5305\u62ec\u903b\u8f91\u5b9e\u73b0\u3001\u7535\u8def\u5b9e\u73b0\u548c\u7269\u7406\u5b9e\u73b0\u3002</p>"},{"location":"Computer_Science/CA/Chapter1/#trends-in-technology","title":"Trends in Technology","text":"<p>\u8ba1\u7b97\u673a\u7684\u6280\u672f\u5b9e\u73b0:</p> <ol> <li>\u96c6\u6210\u7535\u8def\u903b\u8f91\u6280\u672f</li> <li>\u534a\u5bfc\u4f53 DRAM (\u52a8\u6001\u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668)</li> <li>\u534a\u5bfc\u4f53\u95ea\u5b58 SRAM (\u7535\u53ef\u64e6\u7f16\u7a0b\u53ea\u8bfb\u5b58\u50a8\u5668)</li> <li>\u78c1\u76d8\u6280\u672f</li> <li>\u7f51\u7edc\u6280\u672f</li> </ol> <p>\u96c6\u6210\u7535\u8def\u7684\u5236\u9020\u5de5\u827a\u662f\u7528\u7279\u5f81\u5c3a\u5bf8(feature size)\u6765\u8861\u91cf\u7684\uff0c\u6240\u8c13\u7279\u5f81\u5c3a\u5bf8\u5c31\u662f\u4e00\u4e2a\u6676\u4f53\u7ba1\u6216\u4e00\u6761\u8fde\u7ebf\u5728 x \u8f74\u65b9\u5411\u6216 y \u8f74\u65b9\u5411\u7684\u6700\u5c0f\u5c3a\u5bf8\u3002</p> <p>\u7279\u5f81\u5c3a\u5bf8\u8d8a\u5c0f\uff0c\u7ebf\u8def\u53d8\u5f97\u66f4\u77ed\uff0c\u4f46\u662f\u7535\u963b\u548c\u7535\u5bb9\u53d8\u5f97\u66f4\u7cdf\uff0c\u56e0\u6b64\u65f6\u5ef6\u4f1a\u53d8\u5f97\u66f4\u957f\u3002</p> <p>\u8fd8\u6709\u529f\u7387\u6d88\u8017\u7684\u95ee\u9898\u3002</p>"},{"location":"Computer_Science/CA/Chapter1/#trends-in-power-and-energy-in-integrated-circuits","title":"Trends in Power and Energy in Integrated Circuits","text":"<ol> <li>\u6700\u5927\u529f\u8017</li> </ol> <p>\u6ee1\u8db3\u529f\u8017\u8981\u6c42\u5bf9\u4e8e\u786e\u4fdd\u64cd\u4f5c\u6b63\u786e\u975e\u5e38\u91cd\u8981\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u5904\u7406\u5668\u7684\u9884\u671f\u529f\u8017\u5927\u4e8e\u7535\u6e90\u7cfb\u7edf\u80fd\u591f\u63d0\u4f9b\u7684\u529f\u8017(\u4e5f\u5c31\u662f\u8bd5\u56fe\u6c72\u53d6\u7684\u7535\u6d41\u5927\u4e8e\u7535\u6e90\u7cfb\u7edf\u80fd\u591f\u63d0\u4f9b\u7684\u7535\u6d41)\uff0c\u901a\u5e38\u4f1a\u5bfc\u81f4\u7535\u538b\u4e0b\u964d\uff0c\u800c\u7535\u538b\u4e0b\u964d\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5668\u4ef6\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002</p> <ol> <li>\u6301\u7eed\u529f\u8017</li> </ol> <p>\u8fd9\u4e2a\u6307\u6807\u901a\u5e38\u79f0\u4e3a\u70ed\u8bbe\u8ba1\u529f\u8017(thermal design power\uff0cTDP)\u56e0\u4e3a\u5b83\u662f\u5bf9\u7cfb\u7edf\u6563\u70ed\u63d0\u51fa\u7684\u8981\u6c42\u3002</p> <p>TDP\u65e2\u4e0d\u662f\u5cf0\u503c\u529f\u8017(\u5cf0\u503c\u529f\u8017\u901a\u5e38\u8981\u9ad81.5\u500d)\uff0c\u4e5f\u4e0d\u662f\u5728\u7ed9\u5b9a\u8ba1\u7b97\u671f\u95f4\u7684(\u53ef\u80fd\u66f4\u4f4e\u7684)\u5b9e\u9645\u5e73\u5747\u529f\u8017\u3002</p> <p>\u5982\u679c\u6563\u70ed\u80fd\u529b\u4e0d\u8db3\uff0c\u5904\u7406\u5668\u4e2d\u7684\u7ed3\u70b9\u6e29\u5ea6\u53ef\u80fd\u4f1a\u8d85\u51fa\u6700\u5927\u503c,\u5bfc\u81f4\u5668\u4ef6\u6545\u969c,\u751a\u81f3\u6c38\u4e45\u635f\u574f\u3002\u7531\u4e8e\u6700\u5927\u529f\u8017\u53ef\u80fd\u8d85\u51fa TDP \u6307\u5b9a\u7684\u957f\u671f\u5e73\u5747\u503c(\u4ece\u800c\u4f7f\u70ed\u91cf\u548c\u6e29\u5ea6\u4e0a\u5347),\u6240\u4ee5\u73b0\u4ee3\u5904\u7406\u5668\u63d0\u4f9b\u4e86\u4e24\u9879\u529f\u80fd\u6765\u5e2e\u52a9\u7ba1\u7406\u70ed\u91cf\uff1a</p> <ul> <li>\u5f53\u6e29\u5ea6\u63a5\u8fd1\u7ed3\u70b9\u6e29\u5ea6\u4e0a\u9650\u65f6\uff0c\u7535\u8def\u964d\u4f4e\u65f6\u949f\u9891\u7387\uff0c\u4ece\u800c\u51cf\u5c0f\u529f\u8017\u3002</li> <li>\u5982\u679c\u4e0a\u8ff0\u4e0d\u7ba1\u7528\uff0c\u5219\u542f\u7528\u70ed\u8fc7\u8f7d\u4fdd\u62a4\u88c5\u7f6e\u5f3a\u5236\u82af\u7247\u65ad\u7535\u3002</li> </ul> <ol> <li>\u80fd\u8017\u548c\u80fd\u6548</li> </ol> <p>\u80fd\u8017\u4e0e\u7279\u5b9a\u4efb\u52a1\u4ee5\u53ca\u8be5\u4efb\u52a1\u6240\u9700\u8981\u7684\u65f6\u95f4\u76f8\u5173\u8054\u2014\u2014\u7528\u4e8e\u5bf9\u6bd4\u5904\u7406\u5668\u3002</p> <p>\u6267\u884c\u4e00\u9879\u5de5\u4f5c\u8d1f\u8f7d\u7684\u80fd\u8017 = \u5e73\u5747\u529f\u8017 \\(\\times\\) \u5de5\u4f5c\u8d1f\u8f7d\u7684\u6267\u884c\u65f6\u95f4</p> <p>\u6bcf\u4e2a\u6676\u4f53\u7ba1\u6240\u9700\u8981\u7684\u529f\u8017 \\(\\text{\u529f\u8017}_{\\text{\u52a8\u6001}} \\propto \\frac{1}{2} \\times \\text{\u5bb9\u6027\u8d1f\u8f7d} \\times \\text{\u7535\u538b}^2 \\times \\text{\u5f00\u5173\u9891\u7387}\\)</p> Question <p>Some microprocessors today are designed to have adjustable voltage, so a 15% reduction in voltage may result in a 15% reduction in frequency. What would be the impact on dynamic energy and on dynamic power?</p> answer <p>Because the capacitance is unchanged, the answer for energy is the ratio of the voltages</p> \\[\\frac{Energy_{\\text{new}}}{Energy_{\\text{old}}} = \\frac{(Voltage \\times 0.85)^2}{Voltage^2} = 0.85^2 = 0.72\\] <p>which reduces energy to about 72% of the original. For power, we add the ratio of the frequencies</p> \\[\\frac{Power_{\\text{new}}}{Power_{\\text{old}}} = 0.72 \\times \\frac{(Frequency \\ switched \\times 0.85)}{Frequency \\ switched} = 0.61\\] <p>shrinking power to about 61% of the original.</p> <p>\u73b0\u4ee3\u5fae\u5904\u7406\u5668\u63d0\u4f9b\u4e86\u8bb8\u591a\u6280\u672f\uff0c\u8bd5\u56fe\u5728\u65f6\u949f\u9891\u7387\u548c\u7535\u6e90\u7535\u538b\u4fdd\u6301\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u9ad8\u80fd\u6548\u3002</p> <ol> <li>\u4ee5\u9038\u5f85\u52b3</li> </ol> <p>\u5173\u95ed\u975e\u6d3b\u52a8\u6a21\u5757\u7684\u65f6\u949f\uff0c\u4ee5\u964d\u4f4e\u80fd\u8017\u548c\u52a8\u6001\u529f\u8017\u3002</p> <ol> <li>\u52a8\u6001\u7535\u538b-\u9891\u7387\u8c03\u6574(dynamic voltage-frequency scaling\uff0cDVFS)\u3002</li> </ol> <p>PMD\u3001\u7b14\u8bb0\u672c\u8ba1\u7b97\u673a\uff0c\u751a\u81f3\u670d\u52a1\u5668\u90fd\u4f1a\u6709\u4e00\u4e9b\u6d3b\u8dc3\u7a0b\u5ea6\u8f83\u4f4e\u7684\u65f6\u671f\uff0c\u5728\u6b64\u671f\u95f4\u4e0d\u9700\u8981\u4ee5\u6700\u9ad8\u65f6\u949f\u9891\u7387\u548c\u7535\u538b\u8fd0\u8f6c\u3002</p> <ol> <li>\u9488\u5bf9\u5178\u578b\u60c5\u666f\u7684\u8bbe\u8ba1</li> </ol> <p>\u7531\u4e8e PMD \u548c\u7b14\u8bb0\u672c\u8ba1\u7b97\u673a\u7ecf\u5e38\u7a7a\u95f2\uff0c\u6240\u4ee5\u5185\u5916\u5b58\u50a8\u5668\u90fd\u63d0\u4f9b\u4e86\u4f4e\u529f\u8017\u6a21\u5f0f\uff0c\u4ee5\u51cf\u5c11\u80fd\u8017\u3002</p> <ol> <li>\u8d85\u9891</li> </ol> <p>Intel \u82af\u7247\u63d0\u4f9b\u6da1\u8f6e\u6a21\u5f0f (Turbo mode)\uff1a\u82af\u7247\u5224\u65ad\u53ef\u4ee5\u5728\u77ed\u65f6\u95f4\u5185\u5728\u786e\u4fdd\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\u5904\u5728\u66f4\u9ad8\u7684\u65f6\u949f\u9891\u7387\uff0c\u53ef\u80fd\u53ea\u5728\u90e8\u5206\u6838\u4e0a\u5b9e\u73b0\uff0c\u76f4\u5230\u6e29\u5ea6\u5f00\u59cb\u4e0a\u5347\u4e3a\u6b62\u3002</p> <ol> <li>\u7ade\u76f8\u6682\u505c</li> </ol> <p>\u4f7f\u7528\u4e00\u4e2a\u901f\u5ea6\u8f83\u5feb\u4f46\u80fd\u6548\u8f83\u4f4e\u7684\u5904\u7406\u5668\uff0c\u4f7f\u7cfb\u7edf\u7684\u5176\u4ed6\u90e8\u5206\u80fd\u591f\u8fdb\u5165\u7761\u7720\u6a21\u5f0f\u3002</p>"},{"location":"Computer_Science/CA/Chapter1/#trends-in-cost","title":"Trends in Cost","text":"<p>\u51b3\u5b9a\u6210\u672c\u7684\u56e0\u7d20\uff1a</p> <ol> <li>\u5236\u9020\u6210\u672c</li> </ol> <ul> <li>\u5b66\u4e60\u66f2\u7ebf\u968f\u65f6\u95f4\u7684\u63a8\u79fb\u964d\u4f4e\uff0c\u800c\u5b66\u4e60\u66f2\u7ebf\u7531\u826f\u7387(yield) (\u6210\u529f\u901a\u8fc7\u6d4b\u8bd5\u7684\u5668\u4ef6\u5360\u6240\u751f\u4ea7\u5668\u4ef6\u603b\u6570\u7684\u767e\u5206\u6bd4) \u7684\u53d8\u5316\u6d4b\u5f97\u3002</li> </ul> <ol> <li>\u4ea7\u91cf</li> </ol> <ul> <li>\u4ea7\u91cf\u7684\u63d0\u9ad8\u53ef\u4ee5\u51cf\u5c11\u5b8c\u6210\u5b66\u4e60\u66f2\u7ebf\u9700\u8981\u7684\u65f6\u95f4\uff0c\u540c\u65f6\u63d0\u9ad8\u8d2d\u4e70\u4e0e\u5236\u9020\u6548\u7387\u3002</li> </ul> \\[\\text{\u96c6\u6210\u7535\u8def\u7684\u6210\u672c} = \\frac{\\text{\u6676\u7247\u6210\u672c} + \\text{\u6676\u7247\u6d4b\u8bd5\u6210\u672c} + \\text{\u5c01\u88c5\u4e0e\u6700\u7ec8\u6d4b\u8bd5\u6210\u672c}}{\\text{\u6700\u7ec8\u6d4b\u8bd5\u826f\u7387}}\\] \\[\\text{\u6676\u7247\u6210\u672c} = \\frac{\\text{\u6676\u5706\u6210\u672c}}{\\text{\u6bcf\u4e2a\u6676\u5706\u4e0a\u7684\u6676\u7247\u6570} \\times \\text{\u6676\u7247\u826f\u7387}}\\] \\[\\text{\u6bcf\u4e2a\u6676\u5706\u4e0a\u7684\u6676\u7247\u6570} = \\frac{\\pi \\times (\\frac{\\text{\u6676\u5706\u76f4\u5f84}}{2})^2}{\\text{\u6676\u7247\u9762\u79ef}} - \\frac{\\pi \\times \\text{\u6676\u7247\u76f4\u5f84}}{\\sqrt{2 \\times \\text{\u6676\u7247\u9762\u79ef}}}\\] Question <p>Find the number of dies per 300 mm (30 cm) wafer for a die that is 1.5 cm on a side and for a die that is 1.0 cm on a side.</p> answer <p>When die area is 2.25 \\(cm^2\\) :</p> \\[Dies \\ per \\ wafer = \\frac{\\pi \\times (\\frac{30}{2})^2}{2.25} - \\frac{\\pi \\times 30}{\\sqrt{2 \\times 2.25}} = 270\\] <p>Because the area of the larger die is 2.25 times bigger, there are roughly 2.25 as many smaller dies per wafer:</p> \\[Dies \\ per \\ wafer = \\frac{\\pi \\times (\\frac{30}{2})^2}{1.00} - \\frac{\\pi \\times 30}{\\sqrt{2 \\times 1.00}} = 640\\] Question <p>Find the die yield for dies that are 1.5 cm on a side and 1.0 cm on a side, assuming a defect density of 0.047 per \\(cm^2\\) and N is 12.</p> answer <p>The total die areas are 2.25 and 1.00 \\(cm^2\\) . For the larger die, the yield is</p> \\[Die \\ yield = 1/(1 + 0.047 \\times 2.25)^{12} \\times 270 = 120\\] <p>For the smaller die, the yield is</p> \\[Die \\ yield = 1/(1 + 0.047 \\times 1.00)^{12} \\times 640 = 444\\] <p>The bottom line is the number of good dies per wafer. Less than half of all the large dies are good, but nearly 70% of the small dies are good.</p>"},{"location":"Computer_Science/CA/Chapter1/#dependability","title":"Dependability","text":"<p>\u57fa\u7840\u8bbe\u65bd\u4f9b\u5e94\u5546\u5f00\u59cb\u63d0\u4f9b\u670d\u52a1\u7b49\u7ea7\u534f\u8bae(servicelevelagreement\uff0cSLA)\u6216\u670d\u52a1\u7b49\u7ea7\u76ee\u6807(service levelobiective\uff0cSLO)\uff0c\u4ee5\u4fdd\u8bc1\u4ed6\u4eec\u7684\u7f51\u7edc\u6216\u7535\u6e90\u670d\u52a1\u662f\u53ef\u9760\u7684\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528 SLA\u6765\u5224\u65ad\u7cfb\u7edf\u662f\u6b63\u5e38\u8fd0\u884c\u8fd8\u662f\u5df2\u7ecf\u5b95\u673a\u3002</p> <p>\u7cfb\u7edf\u5728 SLA \u89c4\u5b9a\u7684\u4e24\u79cd\u670d\u52a1\u72b6\u6001\u4e4b\u95f4\u5207\u6362\u3002</p> <ul> <li>\u670d\u52a1\u5b8c\u6210\uff0c\u5373\u63d0\u4f9b\u4e86\u6307\u5b9a\u670d\u52a1</li> <li> <p>\u670d\u52a1\u4e2d\u65ad\uff0c\u5373\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u4e0e SLA \u4e0d\u7b26</p> </li> <li> <p>MTTF\uff1a\u5e73\u5747\u65e0\u6545\u969c\u65f6\u95f4 (mean time to failure)\u662f\u4e00\u79cd\u53ef\u9760\u6027\u5ea6\u91cf\uff0c\u5176\u5012\u6570\u5373\u6545\u969c\u7387\u3002</p> </li> <li>\u6a21\u5757\u53ef\u7528\u6027 = \\(\\frac{MTTF}{MTTF + MTTR}\\)</li> </ul> Question <p>Assume a disk subsystem with the following components and MTTF:</p> <ul> <li> <p>10 disks, each rated at 1,000,000-hour MTTF</p> </li> <li> <p>1 ATA controller, 500,000-hour MTTF</p> </li> <li> <p>1 power supply, 200,000-hour MTTF</p> </li> <li> <p>1 fan, 200,000-hour MTTF</p> </li> <li> <p>1 ATA cable, 1,000,000-hour MTTF</p> </li> </ul> <p>Using the simplifying assumptions that the lifetimes are exponentially distributed and that failures are independent, compute the MTTF of the system as a whole.</p> answer <p>The sum of the failure rates is</p> \\[Failure \\ rate_{\\text{system}} = 10 \\times \\frac{1}{1,000,000} + \\frac{1}{500,000} + \\frac{1}{200,000} + \\frac{1}{200,000} + \\frac{1}{1,000,000} = \\frac{23,000}{1,000,000,000 \\ hours}\\] <p>or 23,000 FIT. The MTTF for the system is just the inverse of the failure rate</p> \\[MTTF_{\\text{system}} = \\frac{1}{Failure \\ rate_{\\text{system}}} = 43,500 \\ hours\\] <p>or just under 5 years.</p> Question <p>Disk subsystems often have redundant power supplies to improve dependability. Using the preceding components and MTTFs, calculate the reliability of redundant power supplies. Assume that one power supply is sufficient to run the disk subsystem and that we are adding one redundant power supply.</p> answer <p>We need a formula to show what to expect when we can tolerate a failure and still provide service. To simplify the calculations, we assume that the lifetimes of the components are exponentially distributed and that there is no dependency between the component failures. MTTF for our redundant power supplies is the mean time until one power supply fails divided by the chance that the other will fail before the first one is replaced. Thus, if the chance of a second failure before repair is small, then the MTTF of the pair is large.</p> <p>Since we have two power supplies and independent failures, the mean time until one supply fails is \\(MTTF_{\\text{power supply}} / 2\\). A good approximation of the probability of a second failure is MTTR over the mean time until the other power supply fails. Therefore a reasonable approximation for a redundant pair of power supplies is</p> \\[MTTF_{\\text{power supply pair}} = \\frac{MTTF_{\\text{power supply}}/2}{\\frac{MTTR_{\\text{power supply}}}{MTTF_{\\text{power supply}}}} = \\frac{MTTF^2_{\\text{power supply}}/2}{MTTR_{\\text{power supply}}} = \\frac{MTTF^2_{\\text{power supply}}}{2 \\times MTTR_{\\text{power supply}}}\\] <p>Using the preceding MTTF numbers, if we assume it takes on average 24 hours for a human operator to notice that a power supply has failed and to replace it, the reliability of the fault tolerant pair of power supplies is</p> \\[MTTF_{\\text{power supply pair}} = \\frac{MTTF^2_{\\text{power supply}}}{2 \\times MTTR_{\\text{power supply}}} = \\frac{200,000^2}{2 \\times 24} \\approx 830,000,000\\] <p>making the pair about 4150 times more reliable than a single power supply.</p>"},{"location":"Computer_Science/CA/Chapter1/#measuring-reporting-and-summarizing-performance","title":"Measuring, Reporting, and Summarizing Performance","text":"<ul> <li>\u54cd\u5e94\u65f6\u95f4/\u6267\u884c\u65f6\u95f4</li> <li>\u541e\u5410\u91cf</li> </ul> \\[n = \\frac{\\text{Execution time}_Y}{\\text{Execution time}_X} = \\frac{\\frac{1}{\\text{Performance}_Y}}{\\frac{1}{\\text{Performance}_X}} = \\frac{\\text{Performance}_X}{\\text{Performance}_Y}\\]"},{"location":"Computer_Science/CA/Chapter1/#benchmarks","title":"Benchmarks","text":"<p>Examples include</p> <ul> <li>Kernels, which are small, key pieces of real applications.</li> <li>Toy programs, which are 100-line programs from beginning programming assignments, such as Quicksort.</li> <li>Synthetic benchmarks, which are fake programs invented to try to match the profile and behavior of real applications, such as Dhrystone.</li> </ul> <p>All three are discredited today!</p> <p>Another issue is the conditions under which the benchmarks are run. One way to improve the performance of a benchmark has been with benchmark-specific compiler flags; these flags often caused transformations that would be illegal on many programs or would slow down performance on others.</p> <p>To restrict this process and increase the significance of the results, benchmark developers typically require the vendor to use one compiler and one set of flags for all the programs in the same language (such as C++ or C).</p> <p>\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u95ee\u9898:\u662f\u5426\u5141\u8bb8\u4fee\u6539\u6e90\u4ee3\u7801?</p> <p>\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u67093\u79cd\u65b9\u6cd5:</p> <ol> <li>\u4e0d\u5141\u8bb8\u4fee\u6539\u6e90\u4ee3\u7801\u3002</li> <li>\u5141\u8bb8\u4fee\u6539\u6e90\u4ee3\u7801\uff0c\u4f46\u57fa\u672c\u6ca1\u6709\u4fee\u6539\u7684\u53ef\u80fd\u3002\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u57fa\u51c6\u6d4b\u8bd5\u4f9d\u8d56\u4e8e\u62e5\u6709\u6570\u5343\u4e07\u884c\u4ee3\u7801\u7684\u6807\u51c6\u6570\u636e\u5e93\u7a0b\u5e8f\u3002\u6570\u636e\u5e93\u516c\u53f8\u51e0\u4e4e\u4e0d\u53ef\u80fd\u4e3a\u4e86\u63d0\u9ad8\u4e00\u53f0\u7279\u5b9a\u8ba1\u7b97\u673a\u7684\u6027\u80fd\u800c\u8fdb\u884c\u4fee\u6539\u3002</li> <li>\u5141\u8bb8\u4fee\u6539\u6e90\u4ee3\u7801\uff0c\u53ea\u8981\u4fee\u6539\u540e\u7684\u7248\u672c\u80fd\u591f\u7ed9\u51fa\u76f8\u540c\u8f93\u51fa\u7ed3\u679c\u5373\u53ef\u3002</li> </ol> <p>\u4e00\u79cd\u6d41\u884c\u7684\u505a\u6cd5\u662f\u91c7\u7528\u57fa\u51c6\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f\u96c6(\u79f0\u4e3a\u57fa\u51c6\u6d4b\u8bd5\u5957\u4ef6)\u6765\u6d4b\u91cf\u5904\u7406\u5668\u5904\u7406\u5404\u79cd\u5e94\u7528\u7a0b\u5e8f\u65f6\u7684\u6027\u80fd\u3002</p> <ul> <li>\u51c6\u786e\u7387\u4e0d\u4f1a\u8d85\u8fc7\u7ec4\u6210\u8be5\u5957\u4ef6\u7684\u5404\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u3002</li> <li>\u4efb\u4f55\u4e00\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u7684\u5f31\u70b9\u90fd\u4f1a\u56e0\u4e3a\u5176\u4ed6\u57fa\u51c6\u6d4b\u8bd5\u7684\u5b58\u5728\u800c\u6de1\u5316\u3002</li> <li>\u76ee\u7684\u662f\u63cf\u8ff0\u4e24\u53f0\u8ba1\u7b97\u673a\u7684\u5b9e\u9645\u76f8\u5bf9\u6027\u80fd\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u5ba2\u6237\u53ef\u80fd\u4f1a\u8fd0\u884c\u7684\u4e0d\u5728\u8be5\u5957\u4ef6\u4e2d\u7684\u7a0b\u5e8f\u3002</li> <li>SPEC(\u6807\u51c6\u6027\u80fd\u8bc4\u4f30\u673a\u6784)\u5c1d\u8bd5\u8f83\u4e3a\u6210\u529f</li> <li> <p>\u9488\u5bf9\u8fd0\u884c Windows \u64cd\u4f5c\u7cfb\u7edf\u7684 PC \uff0c\u4eba\u4eec\u4e5f\u5f00\u53d1\u4e86\u8bb8\u591a\u57fa\u51c6\u6d4b\u8bd5</p> <ul> <li>\u684c\u9762\u57fa\u51c6\u6d4b\u8bd5</li> <li>\u670d\u52a1\u5668\u57fa\u51c6\u6d4b\u8bd5</li> </ul> </li> <li> <p>\u5728\u62a5\u544a\u6027\u80fd\u6d4b\u8bd5\u7ed3\u679c\u65f6\uff0c\u5e94\u5f53\u9075\u5faa\u4e00\u6761\u6307\u5bfc\u539f\u5219\u2014\u2014\u53ef\u518d\u73b0\u6027\u3002</p> </li> </ul> \\[n = \\frac{SPECRatio_A}{SPECRatio_B} = \\frac{Performance_A}{Performance_B}\\] <p>\u56e0\u4e3a SPECRatio \u662f\u4e00\u4e2a\u6bd4\u503c\uff0c\u800c\u4e0d\u662f\u7edd\u5bf9\u6267\u884c\u65f6\u95f4\uff0c\u6240\u4ee5\u5fc5\u987b\u7528\u51e0\u4f55\u5e73\u5747\u503c\u6765\u8ba1\u7b97\u5b83\u7684\u5747\u503c\u3002(\u7531\u4e8e SPECRatio \u6ca1\u6709\u5355\u4f4d\uff0c\u6240\u4ee5\u4ee5\u7b97\u672f\u65b9\u5f0f\u6bd4\u8f83 SPECRatio \u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002)\u51e0\u4f55\u5e73\u5747\u503c\u7684\u516c\u5f0f\u662f:</p> \\[Geometric \\ mean = (\\prod\\limits_{i=1}^{n}sample_i)^{\\frac{1}{n}}\\] Question <p>Show that the ratio of the geometric means is equal to the geometric mean of the performance ratios and that the reference computer of SPECRatio does not matter.</p> answer <p></p>"},{"location":"Computer_Science/CA/Chapter1/#quantitative-principles-of-computer-design","title":"Quantitative Principles of Computer Design (\u2b50)","text":""},{"location":"Computer_Science/CA/Chapter1/#take-advantage-of-parallelism","title":"Take Advantage of Parallelism","text":"<p>\u5145\u5206\u5229\u7528\u5e76\u884c\u662f\u63d0\u9ad8\u6027\u80fd\u7684\u91cd\u8981\u65b9\u6cd5\u4e4b\u4e00\u3002</p> <ol> <li>\u7cfb\u7edf\u7ea7\u522b\u5229\u7528\u5e76\u884c\u3002</li> </ol> <p>\u53ef\u6269\u5c55\u6027\uff1a\u62d3\u5c55\u5185\u5b58\u4ee5\u53ca\u589e\u52a0\u5904\u7406\u5668\u548c\u5b58\u50a8\u8bbe\u5907\u6570\u76ee\u7684\u80fd\u529b\u3002</p> <p>\u4e3a\u4e86\u63d0\u9ad8\u5178\u578b\u670d\u52a1\u5668\u57fa\u51c6\u6d4b\u8bd5\u4e0a\u7684\u541e\u5410\u91cf\u6027\u80fd\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u5904\u7406\u5668\u548c\u591a\u4e2a\u5b58\u50a8\u8bbe\u5907\u3002</p> <ul> <li>\u5355\u4e2a\u5904\u7406\u5668(\u6307\u4ee4\u7ea7\u5e76\u884c) -&gt; \u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u6d41\u6c34\u7ebf</li> <li>\u6570\u5b57\u8bbe\u8ba1(\u6570\u636e\u7ea7\u5e76\u884c) -&gt; \u7ec4\u76f8\u8054/ALU \u5148\u884c\u8fdb\u4f4d</li> </ul> <ol> <li>\u5c40\u90e8\u6027\u539f\u7406</li> </ol> <ul> <li>\u65f6\u95f4\u5c40\u90e8\u6027\uff1a\u5982\u679c\u4e00\u4e2a\u6570\u636e\u9879\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u88ab\u5f15\u7528\uff0c\u90a3\u4e48\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5b83\u5f88\u53ef\u80fd\u4f1a\u88ab\u518d\u6b21\u5f15\u7528\u3002</li> <li>\u7a7a\u95f4\u5c40\u90e8\u6027\uff1a\u5982\u679c\u4e00\u4e2a\u6570\u636e\u9879\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u88ab\u5f15\u7528\uff0c\u90a3\u4e48\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5b83\u5f88\u53ef\u80fd\u4f1a\u88ab\u5176\u9644\u8fd1\u7684\u9879\u5f15\u7528\u3002</li> </ul> <ol> <li>\u91cd\u70b9\u5173\u6ce8\u5e38\u89c1\u60c5\u5f62</li> </ol> <p>\u5e38\u89c1\u60c5\u5f62\u8981\u4f18\u5148\u4e8e\u975e\u5e38\u89c1\u60c5\u5f62\u3002</p> <ol> <li>Amdahl' s Law</li> </ol> \\[Speedup = \\frac{Performance for entire task using the enhancement when possible}{Performance for entire task without using the enhancement}\\] Question <p>Suppose that we want to enhance the processor used for web serving. The new processor is 10 times faster on computation in the web serving application than the old processor. Assuming that the original processor is busy with computation 40% of the time and is waiting for I/O 60% of the time, what is the overall speedup gained by incorporating the enhancement?</p> answer <p>\\(Fraction_{enhanced} = 0.4;\\)</p> <p>\\(Speedup_{enhanced} = 10;\\)</p> <p>\\(Speedup_{overall} = \\frac{1}{0.6 + \\frac{0.4}{10}} = \\frac{1}{0.64} \\approx 1.56\\)</p> Question <p>A common transformation required in graphics processors is square root. Implementations of floating-point (FP) square root vary significantly in performance, especially among processors designed for graphics. Suppose FP square root (FSQRT) is responsible for 20% of the execution time of a critical graphics benchmark. One proposal is to enhance the FSQRT hardware and speed up this operation by a factor of 10. The other alternative is just to try to make all FP instructions in the graphics processor run faster by a factor of 1.6; FP instructions are responsible for half of the execution time for the application. The design team believes that they can make all FP instructions run 1.6 times faster with the same effort as required for the fast square root. Compare these two design alternatives.</p> answer <p>We can compare these two alternatives by comparing the speedups:</p> <p>\\(Speedup_{FSQRT} = \\frac{1}{(1-0.2) + \\frac{0.2}{10}} = \\frac{1}{0.82} \\approx 1.22\\)</p> <p>\\(Speedup_{FP} = \\frac{1}{(1-0.5) + \\frac{0.5}{1.6}} = \\frac{1}{0.8125} \\approx 1.23\\)</p> <p>Improving the performance of the FP operations overall is slightly better because of the higher frequency.</p> Question <p>The calculation of the failure rates of the disk subsystem was</p> \\[Failure \\ rate_{system} = 10 \\times \\frac{1}{1,000,000} + \\frac{1}{500,000} + \\frac{1}{200,000} + \\frac{1}{200,000} + \\frac{1,000,000} = \\frac{23}{1,000,000 \\hour}\\] <p>Therefore the fraction of the failure rate that could be improved is 5 per million hours out of 23 for the whole system, or 0.22.</p> answer <p>The reliability improvement would be</p> \\[Improvement_{power \\ supply \\ pair} = \\frac{1}{(1-0.22) + \\frac{0.22}{4150}} = \\frac{1}{0.78} = 1.28\\] <p>Despite an impressive 4150 \\(\\times\\) improvement in reliability of one module, from the system\u2019s perspective, the change has a measurable but small benefit.</p> <ol> <li>\u5904\u7406\u5668\u6027\u80fd\u516c\u5f0f</li> </ol> <p>\u8be6\u89c1CO</p> Question <p>Suppose we made the following measurements:</p> <p>Frequency of FP operations = 25%</p> <p>Average CPI of FP operations = 4.0</p> <p>Average CPI of other instructions = 1.33</p> <p>Frequency of FSQRT = 2%</p> <p>CPI of FSQRT = 20</p> <p>Assume that the two design alternatives are to decrease the CPI of FSQRT to 2 or to decrease the average CPI of all FP operations to 2.5. Compare these two design alternatives using the processor performance equation.</p> answer <p></p>"},{"location":"Computer_Science/CA/Chapter1/#fallacies-and-pitfalls","title":"Fallacies and Pitfalls","text":"<p>Pitfall</p> <ol> <li> <p>All exponential laws must come to an end.</p> </li> <li> <p>Falling prey to Amdahl\u2019s heartbreaking law.</p> </li> <li> <p>A single point of failure.</p> </li> <li> <p>Fault detection can lower availability.</p> </li> </ol> <p>Fallacy</p> <ol> <li> <p>Multiprocessors are a silver bullet.</p> </li> <li> <p>Hardware enhancements that increase performance also improve energy efficiency, or are at worst energy neutral.</p> </li> <li> <p>Benchmarks remain valid indefinitely.</p> </li> <li> <p>The rated mean time to failure of disks is 1,200,000 hours or almost 140 years, so disks practically never fail.</p> </li> <li> <p>Peak performance tracks observed performance.</p> </li> </ol>"},{"location":"Computer_Science/CA/Chapter2/","title":"Ch2 | Memory Hierarchy Design","text":"<p> \u7ea6 9278 \u4e2a\u5b57  3 \u884c\u4ee3\u7801  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 46 \u5206\u949f</p> <p>Basics of Memory Hierarchies:</p> <p>\u5927\u591a\u6570\u5df2\u7ecf\u5728CO\ud83d\udcd6\u5f53\u4e2d\u63d0\u53ca\u8fc7\uff0c\u56e0\u6b64\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002</p> <p>To gain insights into the causes of high miss rates, which can inspire better cache designs, the three Cs model sorts all misses into three simple categories:</p> <p>\u4e3a\u4e86\u6df1\u5165\u7406\u89e3\u9020\u6210\u9ad8\u7f3a\u5931\u7387\u7684\u539f\u56e0\uff0c\u4ece\u800c\u66f4\u597d\u5730\u8bbe\u8ba1\u7f13\u5b58\uff0c\"3C\"\u6a21\u578b\u5c06\u6240\u6709\u8fd9\u4e9b\u7f3a\u5931\u60c5\u666f\u5206\u4e3a\u4ee5\u4e0b3\u4e2a\u7b80\u5355\u7684\u7c7b\u522b\u3002</p> <ul> <li>Compulsory miss \uff1a\u5bf9\u6570\u636e\u5757\u7684\u7b2c\u4e00\u6b21\u8bbf\u95ee\u80af\u5b9a\u4e0d\u4f1a\u5728\u7f13\u5b58\u4e2d\uff0c\u6240\u4ee5\u5fc5\u987b\u5c06\u8fd9\u4e2a\u5757\u653e\u5165\u7f13\u5b58\u4e2d\u3002\u5373\u4f7f\u62e5\u6709\u65e0\u9650\u5927\u7684\u7f13\u5b58\uff0c\u4e5f\u4f1a\u53d1\u751f\u5f3a\u5236\u7f3a\u5931\u3002</li> <li>capacity miss \uff1a\u5982\u679c\u7f13\u5b58\u4e0d\u80fd\u5305\u542b\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u6240\u9700\u8981\u7684\u5168\u90e8\u5757\uff0c\u5c31\u4f1a\u56e0\u4e3a\u6709\u4e9b\u5757\u5148\u88ab\u4e22\u5f03\u4e4b\u540e\u518d\u88ab\u8c03\u4eba\u800c\u5bfc\u81f4\u5bb9\u91cf\u7f3a\u5931(\u9664\u4e86\u5f3a\u5236\u7f3a\u5931\u4e4b\u5916)\u3002</li> <li>conflict miss \uff1a\u5982\u679c\u5757\u653e\u7f6e\u7b56\u7565\u4e0d\u662f\u5168\u76f8\u8054\u7684\uff0c\u5e76\u4e14\u591a\u4e2a\u5757\u6620\u5c04\u5230\u4e00\u4e2a\u5757\u7684\u7ec4\u4e2d\uff0c\u5bf9\u4e0d\u540c\u5757\u7684\u8bbf\u95ee\u6df7\u6742\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e00\u4e2a\u5757\u53ef\u80fd\u4f1a\u88ab\u4e22\u5f03\uff0c\u4e4b\u540e\u518d\u88ab\u8c03\u4eba\uff0c\u4ece\u800c\u53d1\u751f\u51b2\u7a81\u7f3a\u5931(\u9664\u5f3a\u5236\u7f3a\u5931\u548c\u5bb9\u91cf\u7f3a\u5931\u4e4b\u5916)\u3002</li> </ul>"},{"location":"Computer_Science/CA/Chapter2/#memory-technology-and-optimizations","title":"Memory Technology and Optimizations","text":""},{"location":"Computer_Science/CA/Chapter2/#sram-static-random-access-memory","title":"SRAM (static random access memory)","text":"<p>The first letter of SRAM stands for static.</p> <p>DRAM \u7535\u8def\u7684\u52a8\u6001\u672c\u8d28\u8981\u6c42\u5728\u8bfb\u53d6\u6570\u636e\u4e4b\u540e\u5c06\u5176\u5199\u56de\uff0c\u56e0\u6b64\u5728\u8bbf\u95ee\u65f6\u95f4\u548c\u5468\u671f\u65f6\u95f4\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\uff0c\u5e76\u9700\u8981\u8fdb\u884c\u5237\u65b0\u3002</p> <ul> <li>SRAM\u4e0d\u9700\u8981\u5237\u65b0\uff0c\u6240\u4ee5\u8bbf\u95ee\u65f6\u95f4\u4e0e\u5468\u671f\u65f6\u95f4\u975e\u5e38\u63a5\u8fd1\u3002</li> <li>SRAM\u901a\u5e38\u4f7f\u7528 6 \u4e2a\u54c1\u4f53\u7ba1\u4fdd\u5b58 1 \u4f4d\u6570\u636e\uff0c\u4ee5\u9632\u6b62\u5728\u8bfb\u53d6\u4fe1\u606f\u65f6\u5bf9\u4fe1\u606f\u9020\u6210\u5e72\u6270\u3002</li> <li>\u5728\u5f85\u673a\u6a21\u5f0f\u4e0b\uff0cSRAM\u53ea\u9700\u8981\u5f88\u5c11\u7684\u529f\u8017\u6765\u7ef4\u6301\u7535\u8377\u3002</li> </ul> about access time and the cycle time <p>\u8bbf\u95ee\u65f6\u95f4\u662f\u4ece\u53d1\u51fa\u8bfb\u53d6\u8bf7\u6c42\u5230\u6536\u5230\u6240\u9700\u5b57\u4e4b\u95f4\u7684\u65f6\u95f4\u3002</p> <p>\u5468\u671f\u65f6\u95f4\u662f\u6307\u5bf9\u5b58\u50a8\u5668\u53d1\u51fa\u7684\u4e24\u6b21\u4e0d\u76f8\u5173\u8bf7\u6c42\u4e4b\u95f4\u7684\u6700\u77ed\u65f6\u95f4\u95f4\u9694\u3002</p> <p>\u7247\u4e0a\u7f13\u5b58 SRAM \u7684\u5bbd\u5ea6\u901a\u5e38\u4e0e\u7f13\u5b58\u7684\u5757\u5927\u5c0f\u76f8\u5339\u914d\uff0c\u6bcf\u4e2a\u5757\u5bf9\u5e94\u7684\u6807\u7b7e\u90fd\u4e0e\u5176\u5e76\u884c\u5b58\u50a8\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u5355\u4e2a\u65f6\u949f\u5468\u671f\u5185\u8bfb\u53d6\u6216\u5199\u5165\u6574\u4e2a\u5757\u3002\u5728\u5c06\u7f3a\u5931\u540e\u83b7\u53d6\u7684\u6570\u636e\u5199\u4eba\u7f13\u5b58\u65f6\uff0c\u6216\u5728\u5199\u56de\u4e00\u4e2a\u5fc5\u987b\u4ece\u7f13\u5b58\u4e2d\u6e05\u9664\u7684\u5757\u65f6\uff0c\u6b64\u529f\u80fd\u7279\u522b\u6709\u7528\u3002</p> \u5e76\u884c\u5b58\u50a8 <p>\u6570\u636e\u5b58\u50a8\u65f6\uff0c\u591a\u4e2a\u6570\u636e\u5355\u5143\u53ef\u4ee5\u540c\u65f6\u88ab\u8bbf\u95ee\u6216\u4f20\u8f93\u3002\u5728\u7247\u4e0a\u7f13\u5b58 SRAM \u4e2d\uff0c\u6bcf\u4e2a\u7f13\u5b58\u5757\u7684\u6570\u636e\u548c\u6807\u7b7e\u4fe1\u606f\u88ab\u5b58\u50a8\u5728\u4e0d\u540c\u7684\u5b58\u50a8\u5355\u5143\u4e2d\uff0c\u4f46\u5728\u8bbf\u95ee\u65f6\u80fd\u591f\u540c\u65f6\u8bfb\u53d6\u6216\u5199\u5165\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#dram-dynamic-random-access-memory","title":"DRAM (dynamic random access memory)","text":"<p>\u5728\u65e9\u671f DRAM \u7684\u5bb9\u91cf\u589e\u5927\u65f6\uff0c\u7531\u4e8e\u5c01\u88c5\u9700\u8981\u63d0\u4f9b\u6240\u6709\u5fc5\u8981\u7684\u5730\u5740\u7ebf\uff0c\u6240\u4ee5\u5c01\u88c5\u6210\u672c\u8f83\u9ad8\u3002\u89e3\u51b3\u65b9\u6848\u662f\u590d\u7528\u5730\u5740\u7ebf\uff0c\u4ece\u800c\u5c06\u5730\u5740\u7ba1\u811a\u6570\u51cf\u534a\u3002</p> <p>\u5148\u5728\u884c\u9009\u901a(row access strobe,RAS)\u671f\u95f4\u53d1\u9001\u4e00\u534a\u5730\u5740\uff0c\u7136\u540e\u5728\u5217\u9009\u901a(column access strobe,CAS)\u671f\u95f4\u53d1\u9001\u53e6\u4e00\u534a\u5730\u5740\u3002\u884c\u9009\u901a\u548c\u5217\u9009\u901a\u8fd9\u4e24\u4e2a\u540d\u5b57\u6e90\u4e8e\u82af\u7247\u7684\u5185\u90e8\u7ed3\u6784\uff0c\u8fd9\u4e9b\u5b58\u50a8\u5668\u7684\u5185\u90e8\u662f\u4e00\u4e2a\u6309\u884c\u548c\u5217\u5bfb\u5740\u7684\u957f\u65b9\u5f62\u77e9\u9635\u3002</p> <p></p> <p>\u5bf9 DRAM \u7684\u53e6\u4e00\u8981\u6c42\u6765\u81ea\u5176\u7b2c\u4e00\u4e2a\u5b57\u6bcd D \u8868\u793a\u7684\u7279\u6027\uff0c\u5373 dynamic\u3002</p> <p>\u4e3a\u4e86\u5728\u6bcf\u4e2a\u82af\u7247\u4e2d\u5bb9\u7eb3\u66f4\u591a\u7684\u4f4d\uff0cDRAM \u4ec5\u4f7f\u7528\u4e00\u4e2a\u6676\u4f53\u7ba1(\u5b9e\u9645\u4e0a\u76f8\u5f53\u4e8e\u4e00\u4e2a\u7535\u5bb9\u5668)\u6765\u5b58\u50a8\u4e00\u4f4d\u6570\u636e\u3002</p> <p>\u8fd9\u6709\u4e24\u5c42\u542b\u610f\uff1a</p> <ol> <li>\u7528\u6765\u68c0\u6d4b\u7535\u8377\u7684\u4f20\u611f\u7ebf\u5fc5\u987b\u8fdb\u884c\u9884\u5145\u7535\uff0c\u4f7f\u5176\u8bbe\u5b9a\u4e3a\u4ecb\u4e8e\u903b\u8f91 0 \u548c\u903b\u8f91 1 \u4e4b\u95f4\u7684'\u4e2d\u95f4\u201d\u72b6\u6001\uff0c\u8fd9\u6837\uff0c\u53ea\u9700\u5728\u5355\u5143\u4e2d\u5b58\u50a8\u5f88\u5c11\u91cf\u7684\u7535\u8377\u5c31\u53ef\u4ee5\u4f7f\u7075\u654f\u653e\u5927\u5668(sense amplifier)\u68c0\u6d4b\u5230\u903b\u8f91 0 \u6216 1 \u3002</li> <li>\u5728\u8bfb\u53d6\u65f6\uff0c\u5c06\u4e00\u884c\u653e\u5165\u884c\u7f13\u51b2\u5668\u4e2d\uff0cCAS \u4fe1\u53f7\u53ef\u4ee5\u5728\u8fd9\u91cc\u9009\u62e9\u4ece DRAM \u4e2d\u8bfb\u53d6\u8be5\u884c\u7684\u4e00\u90e8\u5206\u3002\u56e0\u4e3a\u5bf9\u6570\u636e\u884c\u7684\u8bfb\u53d6\u8fc7\u7a0b\u4f1a\u7834\u574f\u5176\u4e2d\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u5f53\u4e0d\u518d\u9700\u8981\u8be5\u884c\u65f6\uff0c\u5fc5\u987b\u5c06\u5176\u5199\u56de\u3002\u8fd9\u4e00\u5199\u56de\u8fc7\u7a0b\u4ee5\u91cd\u53e0\u65b9\u5f0f\u8fdb\u884c\uff0c\u4f46\u5728\u65e9\u671f\u7684DRAM\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u5728\u8bfb\u53d6\u4e00\u884c\u5e76\u8bbf\u95ee\u8be5\u884c\u7684\u4e00\u90e8\u5206\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u7b49\u5f85\u4e00\u5b9a\u7684\u65f6\u95f4\u624d\u80fd\u8bfb\u53d6\u4e00\u4e2a\u65b0\u884c\u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u9632\u6b62\u5355\u5143\u4e2d\u7684\u7535\u8377\u6cc4\u6f0f(\u5047\u8bbe\u65e2\u6ca1\u6709\u8bfb\u53d6\u5b83\uff0c\u4e5f\u6ca1\u6709\u5199\u4eba\u5b83)\u800c\u5bfc\u81f4\u4fe1\u606f\u4e22\u5931\u5fc5\u987b\u5b9a\u671f\u201c\u5237\u65b0\u201d\u6bcf\u4e2a\u4f4d\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u53ea\u9700\u5bf9\u4e00\u884c\u8fdb\u884c\u8bfb\u53d6\u5e76\u5c06\u5176\u5199\u56de\uff0c\u5c31\u53ef\u4ee5\u540c\u65f6\u5237\u65b0\u8be5\u884c\u4e2d\u7684\u6240\u6709\u4f4d\u3002\u56e0\u6b64\uff0c\u5b58\u50a8\u5668\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2aDRAM\u5fc5\u987b\u5728\u7279\u5b9a\u65f6\u95f4\u7a97\u53e3\u5185(\u6bd4\u598264ms)\u8bbf\u95ee\u6bcf\u4e00\u884c\u3002\u5b58\u50a8\u5668\u63a7\u5236\u5668\u5305\u62ec\u5b9a\u671f\u5237\u65b0 DRAM \u7684\u786c\u4ef6\u3002</li> </ol>"},{"location":"Computer_Science/CA/Chapter2/#sdram-synchronous-dram-ddr-double-data-rate","title":"SDRAM (synchronous DRAM) | DDR (double data rate)","text":"<p>\u8bbe\u8ba1\u4eba\u5458\u5411 DRAM \u63a5\u53e3\u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7,\u8fd9\u6837\u91cd\u590d\u8fdb\u884c\u7684\u4f20\u8f93\u5c31\u4e0d\u518d\u9700\u8981\u989d\u5916\u7684\u540c\u6b65\u65f6\u95f4,\u8fd9\u5c31\u662f\u540c\u6b65DRAM(synchronous DRAM, SDRAM)\u3002</p> <p>21\u4e16\u7eaa\u65e9\u671f\u53c8\u63a8\u51fa\u4e86\u53e6\u5916\u4e00\u9879\u521b\u65b0:\u53cc\u500d\u6570\u636e\u901f\u7387(double data rate\uff0cDDR)\uff0c\u5b83\u4f7f DRAM \u5728\u5b58\u50a8\u5668\u65f6\u949f\u5468\u671f\u7684\u4e0a\u5347\u6cbf\u548c\u4e0b\u964d\u6cbf\u90fd\u80fd\u4f20\u8f93\u6570\u636e\uff0c\u4ece\u800c\u4f7f\u5cf0\u503c\u6570\u636e\u4f20\u8f93\u901f\u7387\u7ffb\u4e86\u4e00\u756a\u3002</p> <p>\u6700\u540e\uff0cSDRAM\u5f15\u5165\u4e86\u4f53(bank\uff0c\u5373\u5b58\u50a8\u4f53)\uff0c\u7528\u4e8e\u5e2e\u52a9\u529f\u8017\u7ba1\u7406\u3001\u7f29\u77ed\u8bbf\u95ee\u65f6\u95f4\uff0c\u5e76\u5141\u8bb8\u5bf9\u4e0d\u540c\u5b58\u50a8\u4f53\u8fdb\u884c\u76f8\u4e92\u4ea4\u7ec7\u3001\u91cd\u53e0\u7684\u8bbf\u95ee\u3002\u5bf9\u4e0d\u540c\u5b58\u50a8\u4f53\u7684\u8bbf\u95ee\u53ef\u4ee5\u76f8\u4e92\u91cd\u53e0\uff0c\u6bcf\u4e2a\u5b58\u50a8\u4f53\u90fd\u6709\u81ea\u5df1\u7684\u884c\u7f13\u51b2\u533a\u3002\u5728\u4e00\u4e2a DRAM \u4e2d\u521b\u5efa\u591a\u4e2a\u5b58\u50a8\u4f53\u5b9e\u9645\u4e0a\u662f\u4e3a\u8be5\u5730\u5740\u53c8\u589e\u52a0\u4e86\u4e00\u4e2a\u6bb5\uff0c\u73b0\u5728\u7684\u5730\u5740\u7531\u5b58\u50a8\u4f53\u7f16\u53f7\u3001\u884c\u5730\u5740\u548c\u5217\u5730\u5740\u7ec4\u6210\u3002\u5728\u53d1\u51fa\u4e00\u4e2a\u65b0\u5b58\u50a8\u4f53\u7684\u5730\u5740\u65f6\uff0c\u5fc5\u987b\u6253\u5f00\u8fd9\u4e2a\u5b58\u50a8\u4f53\uff0c\u4ece\u800c\u589e\u52a0\u5ef6\u8fdf\u65f6\u95f4\u3002\u5b58\u50a8\u4f53\u548c\u884c\u7f13\u51b2\u533a\u7684\u7ba1\u7406\u5b8c\u5168\u7531\u73b0\u4ee3\u5b58\u50a8\u5668\u63a7\u5236\u63a5\u53e3\u5904\u7406\uff0c\u6240\u4ee5\u5f53\u540e\u7eed\u5730\u5740\u6307\u5b9a\u7684\u662f\u4e00\u4e2a\u5df2\u6253\u5f00\u5b58\u50a8\u4f53\u4e2d\u7684\u76f8\u540c\u884c\u65f6\uff0c\u53ea\u9700\u53d1\u9001\u5217\u5730\u5740\uff0c\u4ece\u800c\u53ef\u4ee5\u5feb\u901f\u8fdb\u884c\u8bbf\u95ee\u3002\u8981\u53d1\u8d77\u4e00\u6b21\u65b0\u7684\u8bbf\u95ee\u8fc7\u7a0b\uff0cDRAM \u63a7\u5236\u5668\u53d1\u9001\u4e00\u4e2a\u5b58\u50a8\u4f53\u7f16\u53f7\u548c\u4e00\u4e2a\u884c\u53f7(\u5728SDRAM\u4e2d\u79f0\u4e3a\u6fc0\u6d3b\u2014\u2014 Activate \uff0c\u4e4b\u524d\u79f0\u4e3a RAS \u2014\u2014\u884c\u9009\u901a)\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6253\u5f00\u8be5\u884c\uff0c\u5e76\u5c06\u6574\u884c\u6570\u636e\u8bfb\u4eba\u4e00\u4e2a\u7f13\u51b2\u533a\u4e2d\u3002\u7136\u540e\u4f1a\u53d1\u9001\u4e00\u4e2a\u5217\u5730\u5740\uff0cSDRAM \u53ef\u4ee5\u4f20\u9001\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u9879\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u662f\u5355\u4e2a\u8bf7\u6c42\u8fd8\u662f\u7a81\u53d1\u8bf7\u6c42\u3002\u5728\u8bbf\u95ee\u65b0\u884c\u4e4b\u524d\uff0c\u5fc5\u987b\u5bf9\u5b58\u50a8\u4f53\u8fdb\u884c\u9884\u5145\u7535\u3002\u5982\u679c\u8be5\u884c\u4f4d\u4e8e\u540c\u4e00\u5b58\u50a8\u4f53\u5185\uff0c\u5219\u4f1a\u611f\u89c9\u5230\u9884\u5145\u7535\u5bfc\u81f4\u7684\u5ef6\u8fdf;\u4f46\u5982\u679c\u8fd9\u4e2a\u65b0\u884c\u4f4d\u4e8e\u53e6\u4e00\u4e2a\u5b58\u50a8\u4f53\u4e2d\uff0c\u90a3\u4e48\u884c\u7684\u5173\u95ed\u548c\u5b58\u50a8\u4f53\u7684\u9884\u5145\u7535\u53ef\u4ee5\u4e0e\u65b0\u884c\u7684\u8bbf\u95ee\u91cd\u53e0\u8fdb\u884c\u3002\u5728 SDRAM \u4e2d\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5468\u671f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u9700\u8981\u6574\u6570\u4e2a\u65f6\u949f\u5468\u671f\u3002</p> <p>Reducing Power Consumption in SDRAMs</p> <p>\u52a8\u6001\u5b58\u50a8\u82af\u7247\u4e2d\u7684\u529f\u8017\u7531\u9759\u6001(\u6216\u5f85\u673a)\u529f\u8017\u548c\u8bfb\u5199\u671f\u95f4\u6d88\u8017\u7684\u52a8\u6001\u529f\u8017\u6784\u6210\uff0c\u8fd9\u4e24\u8005\u90fd\u53d6\u51b3\u4e8e\u5de5\u4f5c\u7535\u538b\u3002\u5b58\u50a8\u4f53\u7684\u589e\u52a0\u4e5f\u964d\u4f4e\u4e86\u529f\u8017\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u6b21\u4ec5\u8bfb\u53d6\u4e00\u4e2a\u5b58\u50a8\u4f53\u4e2d\u7684\u884c\u3002</p> <p>\u9664\u4e86\u8fd9\u4e9b\u53d8\u5316\u4e4b\u5916\uff0c\u6240\u6709\u6700\u65b0 SDRAM \u90fd\u652f\u6301\u4e00\u79cd\u65ad\u7535\u6a21\u5f0f,\u901a\u77e5 DRAM \u5ffd\u7565\u65f6\u949f\u5373\u53ef\u8fdb\u4eba\u8fd9\u4e00\u6a21\u5f0f\u3002\u65ad\u7535\u6a21\u5f0f\u4f1a\u7981\u7528 SDRAM\uff0c\u4f46\u5185\u90e8\u81ea\u52a8\u5237\u65b0\u9664\u5916(\u5982\u679c\u6ca1\u6709\u81ea\u52a8\u5237\u65b0\uff0c\u5f53\u8fdb\u4eba\u7701\u7535\u6a21\u5f0f\u7684\u65f6\u95f4\u957f\u4e8e\u5237\u65b0\u65f6\u95f4\u65f6\uff0c\u5c06\u4f1a\u5bfc\u81f4\u5b58\u50a8\u5668\u5185\u5bb9\u4e22\u5931)\u3002\u4ece\u4f4e\u529f\u8017\u6a21\u5f0f\u8fd4\u56de\u6b63\u5e38\u6a21\u5f0f\u6240\u9700\u7684\u786e\u5207\u5ef6\u8fdf\u65f6\u95f4\u53d6\u51b3\u4e8e SDRAM .\u4f46\u4e00\u822c\u7684\u5ef6\u8fdf\u4e3a 200 \u4e2a SDRAM \u65f6\u949f\u5468\u671f\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#flash-memory","title":"Flash Memory","text":"<p>\u95ea\u5b58\u662f\u4e00\u79cd EEPROM(\u7535\u53ef\u64e6\u53ef\u7f16\u7a0b\u53ea\u8bfb\u5b58\u50a8\u5668)\uff0c\u5b83\u901a\u5e38\u662f\u53ea\u8bfb\u7684\uff0c\u4f46\u53ef\u4ee5\u64e6\u9664\u3002\u95ea\u5b58\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u662f\u80fd\u5728\u6ca1\u6709\u4f9b\u7535\u7684\u60c5\u51b5\u4e0b\u4fdd\u5b58\u5176\u5185\u5bb9\u3002</p> <p>Flash uses a very different architecture and has different properties than standard DRAM. The most important differences are</p> <ol> <li>Reads to Flash are sequential and read an entire page.</li> <li>Flash memory must be erased before it is overwritten, and it is erased in blocks rather than individual bytes or words.</li> <li>Flash memory is nonvolatile. (\u975e\u6613\u5931\u6027\u7684)</li> <li>Flash memory limits the number of times that any given block can be written, typically at least 100,000.</li> </ol>"},{"location":"Computer_Science/CA/Chapter2/#phase-change-memory-pcm","title":"Phase-Change Memory (PCM)","text":"<p>\u8fd9\u79cd\u6280\u672f\u901a\u5e38\u4f7f\u7528\u4e00\u79cd\u5c0f\u578b\u7684\u53d1\u70ed\u5143\u4ef6\uff0c\u4f7f\u5757\u72b6\u57fa\u5e95\u7684\u72b6\u6001\u5728\u6676\u6001\u548c\u975e\u6676\u6001\u4e4b\u95f4\u53d8\u5316\uff0c\u8fd9\u4e24\u79cd\u72b6\u6001\u62e5\u6709\u4e0d\u540c\u7684\u7535\u963b\u7279\u6027\u3002\u57fa\u5e95\u4e0a\u8986\u76d6\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u7edc\uff0c\u6bcf\u4e2a\u6bd4\u7279\u4e0e\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u7684\u4e00\u4e2a\u4ea4\u53c9\u70b9\u76f8\u5bf9\u5e94\u3002\u901a\u8fc7\u611f\u6d4b\u4e00\u4e2a x\u3001y\u4ea4\u53c9\u70b9\u7684\u7535\u963b\u5c31\u53ef\u4ee5\u5b8c\u6210\u8bfb\u53d6\uff0c\u5b83\u4e5f\u56e0\u6b64\u6709\u4e86\u53e6\u4e00\u4e2a\u540d\u5b57\u2014\u2014\u5fc6\u963b\u5668(memristor)\uff0c\u800c\u5199\u5165\u8fc7\u7a0b\u5219\u662f\u901a\u8fc7\u65bd\u52a0\u7535\u6d41\u6765\u6539\u53d8\u6750\u6599\u7684\u76f8\u6001\u800c\u5b8c\u6210\u7684\u3002\u7531\u4e8e\u4e0d\u5b58\u5728\u6709\u6e90\u5668\u4ef6(\u6bd4\u5982\u6676\u4f53\u7ba1)\uff0c\u6240\u4ee5\u4e0e NAND \u95ea\u5b58\u76f8\u6bd4\uff0c\u6709\u53ef\u80fd\u505a\u5230\u6210\u672c\u66f4\u4f4e\u800c\u5bc6\u5ea6\u66f4\u5927\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#enhancing-dependability-in-memory-systems","title":"Enhancing Dependability in Memory Systems","text":"<p>\u5927\u578b\u7f13\u5b58\u548c\u4e3b\u5b58\u50a8\u5668\u663e\u8457\u589e\u52a0\u4e86\u5236\u9020\u8fc7\u7a0b\u548c\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u52a8\u6001\u53d1\u751f\u9519\u8bef\u7684\u53ef\u80fd\u6027\u3002</p> <ul> <li>\u7531\u7535\u8def\u53d8\u5316\u5f15\u8d77\u7684\u53ef\u91cd\u590d\u7684\u9519\u8bef\u79f0\u4e3a\u786c\u9519\u8bef(hard error)\u6216\u6c38\u4e45\u6027\u6545\u969c(permanent fault )\u3002<ul> <li>\u786c\u9519\u8bef\u53ef\u80fd\u53d1\u751f\u5728\u5236\u9020\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u53ef\u80fd\u53d1\u751f\u5728\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u7684\u7535\u8def\u66f4\u6539\u4e2d(\u4f8b\u5982\uff0c\u5728\u591a\u6b21\u5199\u4eba\u4e4b\u540e\u95ea\u5b58\u5355\u5143\u53d1\u751f\u6545\u969c )\u3002</li> <li>\u6240\u6709 DRAM\u3001\u95ea\u5b58\u548c\u5927\u591a\u6570 SRAM\u5728\u5236\u9020\u65f6\u90fd\u7559\u6709\u5907\u7528\u884c\uff0c\u56e0\u6b64\u901a\u8fc7\u7f16\u7a0b\u7528\u5907\u7528\u884c\u66ff\u6362\u6709\u7f3a\u9677\u7684\u884c\u53ef\u4ee5\u89e3\u51b3\u5c11\u91cf\u7684\u5236\u9020\u7f3a\u9677\u3002</li> </ul> </li> <li>\u52a8\u6001\u9519\u8bef\u662f\u6307\u5728\u7535\u8def\u4e0d\u6539\u53d8\u7684\u524d\u63d0\u4e0b\u5b58\u50a8\u5355\u5143\u5185\u5bb9\u53d1\u751f\u6539\u53d8\u7684\u60c5\u51b5\uff0c\u88ab\u79f0\u4e3a\u8f6f\u9519\u8bef(soft error)\u6216\u77ac\u6001\u6545\u969c(transient fault)\u3002</li> </ul> <p>\u52a8\u6001\u9519\u8bef\u53ef\u4ee5\u4f7f\u7528\u5947\u5076\u6821\u9a8c\u68c0\u6d4b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ea0\u9519\u7801(ECC)\u68c0\u6d4b\u548c\u7ea0\u6b63\u3002</p> <ul> <li>\u56e0\u4e3a\u6307\u4ee4\u7f13\u5b58\u662f\u53ea\u8bfb\u7684\uff0c\u6240\u4ee5\u7528\u5947\u5076\u6821\u9a8c\u5c31\u591f\u4e86\u3002\u5947\u5076\u6821\u9a8c\u53ea\u9700\u8981\u5360\u7528\u4e00\u4e2a\u6570\u636e\u4f4d\u5c31\u53ef\u4ee5\u68c0\u6d4b\u4e00\u7cfb\u5217\u6570\u636e\u4f4d\u4e2d\u7684\u4e00\u4e2a\u9519\u8bef\u3002\u7531\u4e8e\u65e0\u6cd5\u4f7f\u7528\u5947\u5076\u6821\u9a8c\u6765\u68c0\u6d4b\u591a\u4f4d\u9519\u8bef\uff0c\u6240\u4ee5\u5fc5\u987b\u9650\u5236\u7528\u5947\u5076\u6821\u9a8c\u63d0\u4f9b\u4fdd\u62a4\u7684\u4f4d\u6570\u3002\u5178\u578b\u7684\u6bd4\u4f8b\u662f\u6bcf8\u4e2a\u6570\u636e\u4f4d\u4f7f\u7528\u4e00\u4e2a\u5947\u5076\u6821\u9a8c\u4f4d\u3002</li> <li>\u5728\u66f4\u5927\u578b\u7684\u6570\u636e\u7f13\u5b58\u548c\u4e3b\u5b58\u50a8\u5668\u4e2d\uff0c\u5219\u4f7f\u7528ECC\u6280\u672f\u6765\u68c0\u6d4b\u548c\u7ea0\u6b63\u9519\u8bef\u3002ECC \u53ef\u4ee5\u68c0\u6d4b\u4e24\u4e2a\u9519\u8bef\u5e76\u7ea0\u6b63\u4e00\u4e2a\u9519\u8bef\uff0c\u4ee3\u4ef7\u662f\u6bcf 64 \u4e2a\u6570\u636e\u4f4d\u5360\u7528 8 \u4f4d\u7684\u5f00\u9500\u3002</li> </ul>"},{"location":"Computer_Science/CA/Chapter2/#ten-advanced-optimizations-of-cache-performance","title":"Ten Advanced Optimizations of Cache Performance","text":"<ol> <li>Reducing the hit time</li> <li>Increasing cache bandwidth</li> <li>Reducing the miss penalty</li> <li>Reducing the miss rate</li> <li>Reducing the miss penalty or miss rate via parallelism</li> </ol> <p>Average Memory Access Time (AMAT) = (1 - Miss Rate) \u00d7 Hit Time + Miss Rate \u00d7 Miss Penalty(Miss Time)</p>"},{"location":"Computer_Science/CA/Chapter2/#1-small-and-simple-first-level-caches-to-reduce-hit-time-and-power","title":"1 Small and Simple First-Level Caches to Reduce Hit Time and Power","text":"<p>\u7f13\u5b58\u547d\u4e2d\u8fc7\u7a0b\u4e2d\u7684\u5173\u952e\u8ba1\u65f6\u8def\u5f84\u75313\u4e2a\u6b65\u9aa4\u7ec4\u6210:</p> <ol> <li>\u4f7f\u7528\u5730\u5740\u4e2d\u7684\u7d22\u5f15\u786e\u5b9a\u6807\u7b7e\u5b58\u50a8\u5668\u7684\u5730\u5740;</li> <li>\u5c06\u8bfb\u53d6\u7684\u6807\u7b7e\u503c\u4e0e\u5730\u5740\u8fdb\u884c\u6bd4\u8f83;</li> <li>\u5982\u679c\u7f13\u5b58\u4e3a\u7ec4\u76f8\u8054\u7f13\u5b58\uff0c\u5219\u8bbe\u7f6e\u591a\u8def\u9009\u62e9\u5668\u4ee5\u9009\u62e9\u6b63\u786e\u7684\u6570\u636e\u9879\u3002</li> </ol> <ul> <li>\u76f4\u63a5\u6620\u5c04\u7684\u7f13\u5b58\u53ef\u4ee5\u5c06\u6807\u7b7e\u68c0\u67e5\u4e0e\u6570\u636e\u4f20\u8f93\u91cd\u53e0\uff0c\u6709\u6548\u7f29\u77ed\u547d\u4e2d\u65f6\u95f4\u3002</li> <li>\u6b64\u5916\uff0c\u5728\u91c7\u7528\u4f4e\u76f8\u8054\u5ea6\u65f6\uff0c\u7531\u4e8e\u51cf\u5c11\u4e86\u5fc5\u987b\u8bbf\u95ee\u7684\u7f13\u5b58\u884c\uff0c\u6240\u4ee5\u901a\u5e38\u8fd8\u53ef\u4ee5\u964d\u4f4e\u529f\u8017\u3002</li> </ul>"},{"location":"Computer_Science/CA/Chapter2/#2-way-prediction-to-reduce-hit-time","title":"2 Way Prediction to Reduce Hit Time","text":"<p>\u8fd9\u662f\u4e00\u79cd\u53ef\u4ee5\u51cf\u5c11\u51b2\u7a81\u7f3a\u5931\uff0c\u540c\u65f6\u53c8\u80fd\u4fdd\u6301\u76f4\u63a5\u6620\u5c04\u7f13\u5b58\u547d\u4e2d\u901f\u5ea6\u7684\u65b9\u6cd5\u3002</p> <p>\u5728\u8def\u9884\u6d4b\u6280\u672f(way prediction)\u4e2d\uff0c\u7f13\u5b58\u4e2d\u53e6\u5916\u4fdd\u5b58\u4e86\u4e00\u4e9b\u4f4d\uff0c\u7528\u4e8e\u9884\u6d4b\u4e0b\u4e00\u6b21\u7f13\u5b58\u8bbf\u95ee\u4e2d\u7684\u8def(\u5373\u7ec4\u4e2d\u7684\u5757)\u3002\u8fd9\u79cd\u9884\u6d4b\u610f\u5473\u7740\u8981\u63d0\u524d\u8bbe\u5b9a\u591a\u8def\u9009\u62e9\u5668\uff0c\u4ee5\u9009\u62e9\u6240\u9700\u8981\u7684\u5757\uff0c\u5e76\u4e14\u5728\u8fd9\u4e2a\u65f6\u949f\u5468\u671f\u4e2d\u5728\u8bfb\u53d6\u7f13\u5b58\u6570\u636e\u7684\u540c\u65f6\uff0c\u53ea\u9700\u8981\u5e76\u884c\u6267\u884c\u4e00\u6b21\u6807\u7b7e\u6bd4\u8f83\u3002\u5982\u679c\u7f3a\u5931\uff0c\u5219\u4f1a\u5728\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u4e2d\u518d\u67e5\u770b\u5176\u4ed6\u5757\uff0c\u4ee5\u627e\u51fa\u5339\u914d\u9879\u3002</p> <p>\u5728\u4e00\u4e2a\u7f13\u5b58\u7684\u6bcf\u4e2a\u5757\u4e2d\u6dfb\u52a0\u5757\u9884\u6d4b\u4f4d\u3002\u6839\u636e\u8fd9\u4e9b\u4f4d\u9009\u5b9a\u8981\u5728\u4e0b\u4e00\u6b21\u7f13\u5b58\u8bbf\u95ee\u4e2d\u5c1d\u8bd5\u54ea\u4e9b\u5757\u3002\u5982\u679c\u9884\u6d4b\u6b63\u786e\uff0c\u5219\u7f13\u5b58\u8bbf\u95ee\u5ef6\u8fdf\u5c31\u7b49\u4e8e\u8fd9\u4e00\u5feb\u901f\u547d\u4e2d\u65f6\u95f4\u3002\u5982\u679c\u9884\u6d4b\u9519\u8bef\uff0c\u5219\u5c1d\u8bd5\u5176\u4ed6\u5757\uff0c\u6539\u53d8\u8def\u9884\u6d4b\u5668\uff0c\u5e76\u4e14\u5ef6\u8fdf\u4f1a\u589e\u52a0\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u3002</p> <p>\u8fd8\u6709\u4e00\u79cd\u6269\u5c55\u5f62\u5f0f\u7684\u8def\u9884\u6d4b\uff0c\u5b83\u4f7f\u7528\u8def\u9884\u6d4b\u4f4d(\u672c\u8d28\u4e0a\u5c31\u662f\u9644\u52a0\u5730\u5740\u4f4d)\u6765\u5224\u65ad\u5b9e\u9645\u8bbf\u95ee\u7684\u7f13\u5b58\u5757\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u964d\u4f4e\u529f\u8017\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u53ef\u79f0\u4e3a\u8def\u9009\u62e9(way selection)\uff0c\u5f53\u8def\u9884\u6d4b\u6b63\u786e\u65f6\u5b83\u53ef\u4ee5\u8282\u7701\u529f\u8017\uff0c\u4f46\u5728\u8def\u9884\u6d4b\u9519\u8bef\u65f6\u5219\u4f1a\u663e\u8457\u589e\u52a0\u65f6\u95f4\uff0c\u8fd9\u662f\u56e0\u4e3a\u9700\u8981\u91cd\u590d\u8fdb\u884c\u8bbf\u95ee\uff0c\u800c\u4e0d\u4ec5\u662f\u91cd\u590d\u6807\u7b7e\u5339\u914d\u4e0e\u9009\u62e9\u8fc7\u7a0b\u3002\u8fd9\u79cd\u4f18\u5316\u65b9\u6cd5\u53ea\u6709\u5728\u4f4e\u529f\u8017\u5904\u7406\u5668\u4e2d\u624d\u53ef\u80fd\u6709\u610f\u4e49\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#3-pipelined-access-and-multibanked-caches-to-increase-bandwidth","title":"3  Pipelined Access and Multibanked Caches to Increase Bandwidth","text":"<p>\u8fd9\u7c7b\u4f18\u5316\u65b9\u6cd5\u901a\u8fc7\u5b9e\u73b0\u7f13\u5b58\u8bbf\u95ee\u7684\u6d41\u6c34\u5316\uff0c\u6216\u8005\u901a\u8fc7\u62d3\u5bbd\u591a\u4f53\u7f13\u5b58\uff0c\u5b9e\u73b0\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u5185\u8fdb\u884c\u591a\u6b21\u8bbf\u95ee\uff0c\u4ece\u800c\u63d0\u9ad8\u7f13\u5b58\u7684\u5e26\u5bbd\u3002\u8fd9\u7c7b\u4f18\u5316\u65b9\u6cd5\u53ef\u540c\u65f6\u7528\u4e8e\u5b9e\u73b0\u63d0\u9ad8\u6307\u4ee4\u541e\u5410\u7387\u7684\u8d85\u6d41\u6c34\u5316\u548c\u8d85\u6807\u91cf\u6280\u672f\u3002\u8fd9\u4e9b\u4f18\u5316\u65b9\u6cd5\u4e3b\u8981\u9762\u5411 L1 \uff0c\u8fd9\u91cc\u7684\u8bbf\u95ee\u5e26\u5bbd\u9650\u5236\u4e86\u6307\u4ee4\u541e\u5410\u7387\u3002 L2 \u548c L3 \u7f13\u5b58\u4e2d\u4e5f\u4f1a\u4f7f\u7528\u591a\u4e2a\u5b58\u50a8\u4f53\uff0c\u4f46\u4e3b\u8981\u662f\u4f5c\u4e3a\u4e00\u79cd\u529f\u8017\u7ba1\u7406\u6280\u672f\u3002</p> <p>L1 \u7f13\u5b58\u5b9e\u73b0\u6d41\u6c34\u5316\u540e\uff0c\u53ef\u4ee5\u91c7\u7528\u66f4\u9ad8\u7684\u65f6\u949f\u9891\u7387\uff0c\u4f46\u4ee3\u4ef7\u662f\u4f1a\u589e\u52a0\u5ef6\u8fdf\u3002\u6307\u4ee4\u7f13\u5b58\u8bbf\u95ee\u7684\u6d41\u6c34\u5316\u5b9e\u73b0\u4e0a\u589e\u52a0\u4e86\u6d41\u6c34\u7ebf\u7684\u6bb5\u6570\uff0c\u589e\u52a0\u4e86\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u4ee3\u4ef7\u3002\u76f8\u5e94\u5730\uff0c\u6570\u636e\u7f13\u5b58\u7684\u6d41\u6c34\u5316\u589e\u52a0\u4e86\u4ece\u53d1\u51fa\u8f7d\u5165\u6307\u4ee4\u5230\u4f7f\u7528\u6570\u636e\u4e4b\u95f4\u7684\u65f6\u949f\u5468\u671f\u6570\u3002\u5982\u4eca\uff0c\u5373\u4f7f\u53ea\u662f\u4e3a\u4e86\u5206\u5f00\u8bbf\u95ee\u548c\u547d\u4e2d\u68c0\u6d4b\u8fd9\u79cd\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u6240\u6709\u5904\u7406\u5668\u90fd\u4f1a\u4f7f\u7528\u67d0\u79cd\u4e00\u7ea7\u7f13\u5b58\u6d41\u6c34\u5316\u65b9\u6cd5\uff0c\u800c\u8bb8\u591a\u9ad8\u901f\u5904\u7406\u5668\u5219\u4f1a\u91c7\u7528\u4e09\u7ea7\u6216\u66f4\u591a\u7ea7\u7f13\u5b58\u6d41\u6c34\u5316\u65b9\u6cd5\u3002</p> <p>\u6307\u4ee4\u7f13\u5b58\u7684\u6d41\u6c34\u5316\u8981\u6bd4\u6570\u636e\u7f13\u5b58\u5bb9\u6613\u4e00\u4e9b\uff0c\u56e0\u4e3a\u5904\u7406\u5668\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u9ad8\u6027\u80fd\u7684\u5206\u652f\u9884\u6d4b\u6765\u51cf\u8f7b\u5ef6\u8fdf\u9020\u6210\u7684\u5f71\u54cd\u3002\u8bb8\u591a\u8d85\u6807\u91cf\u5904\u7406\u5668\u53ef\u4ee5\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u53d1\u51fa\u548c\u6267\u884c\u4e00\u4e2a\u4ee5\u4e0a\u7684\u5b58\u50a8\u5668\u8bbf\u95ee(\u5141\u8bb8\u4e00\u6b21\u8f7d\u5165\u6216\u5b58\u50a8\u64cd\u4f5c\u662f\u5e38\u89c1\u60c5\u51b5\uff0c\u4e00\u4e9b\u5904\u7406\u5668\u5141\u8bb8\u8fdb\u884c\u591a\u6b21\u8f7d\u5165)\u3002\u4e3a\u4e86\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u5185\u5904\u7406\u591a\u4e2a\u6570\u636e\u7f13\u5b58\u8bbf\u95ee\uff0c\u53ef\u4ee5\u5c06\u7f13\u5b58\u5212\u5206\u4e3a\u72ec\u7acb\u7684\u5b58\u50a8\u4f53\uff0c\u6bcf\u4e2a\u5b58\u50a8\u4f53\u4e3a\u4e00\u6b21\u72ec\u7acb\u7684\u8bbf\u95ee\u63d0\u4f9b\u652f\u6301\u3002\u5206\u4f53\u65b9\u5f0f\u6700\u521d\u7528\u4e8e\u63d0\u9ad8\u4e3b\u5b58\u50a8\u5668\u7684\u6027\u80fd,\u73b0\u5728\u4e5f\u7528\u4e8e\u73b0\u4ee3 DRAM \u82af\u7247\u548c\u7f13\u5b58\u4e2d\u3002</p> <p>\u663e\u7136\uff0c\u5f53\u8bbf\u95ee\u8bf7\u6c42\u5747\u5300\u5206\u5e03\u5728\u7f13\u5b58\u7ec4\u4e4b\u95f4\u65f6\uff0c\u5206\u4f53\u65b9\u5f0f\u7684\u6548\u679c\u6700\u4f73\uff0c\u6240\u4ee5\u5c06\u5730\u5740\u6620\u5c04\u5230\u5b58\u50a8\u4f53\u7684\u65b9\u5f0f\u4f1a\u5f71\u54cd\u5b58\u50a8\u5668\u7cfb\u7edf\u7684\u884c\u4e3a\u3002\u4e00\u79cd\u7b80\u5355\u6709\u6548\u7684\u6620\u5c04\u65b9\u5f0f\u662f\u5c06\u7f13\u5b58\u5757\u5730\u5740\u6309\u987a\u5e8f\u5206\u6563\u5728\u8fd9\u4e9b\u5b58\u50a8\u4f53\u4e2d\uff0c\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a\u987a\u5e8f\u4ea4\u9519(sequential interleaving)\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u67094\u4e2a\u5b58\u50a8\u4f530\u53f7\u5b58\u50a8\u4f53\u4e2d\u7684\u6240\u6709\u7f13\u5b58\u5757\u5730\u5740\u90fd\u662f4\u7684\u500d\u6570\uff0c1\u53f7\u5b58\u50a8\u4f53\u4e2d\u7684\u6240\u6709\u7f13\u5b58\u5757\u5730\u5740\u90fd\u662f\u6a214\u4f591\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p></p>"},{"location":"Computer_Science/CA/Chapter2/#4-nonblocking-caches-to-increase-cache-bandwidth","title":"4 Nonblocking Caches to Increase Cache Bandwidth","text":"<p>\u4f8b\u5982\uff0c\u5728\u7b49\u5f85\u6570\u636e\u7f13\u5b58\u8fd4\u56de\u7f3a\u5931\u6570\u636e\u65f6\uff0c\u5904\u7406\u5668\u53ef\u4ee5\u7ee7\u7eed\u4ece\u6307\u4ee4\u7f13\u5b58\u4e2d\u53d6\u6307\u3002\u975e\u963b\u585e\u7f13\u5b58(nonblocking cache\uff0c\u6216\u79f0\u65e0\u9501\u7f13\u5b58\uff0c1ockup-free cache)\u5141\u8bb8\u6570\u636e\u7f13\u5b58\u5728\u4e00\u6b21\u7f3a\u5931\u671f\u95f4\u7ee7\u7eed\u63d0\u4f9b\u7f13\u5b58\u547d\u4e2d\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u5f3a\u5316\u4e86\u8fd9\u79cd\u65b9\u6848\u7684\u6f5c\u5728\u4f18\u52bf\u3002</p> <p>\u8fd9\u79cd\"\u7f3a\u5931\u65f6\u4ecd\u7136\u547d\u4e2d\"\u4f18\u5316\u65b9\u6cd5\u5728\u7f3a\u5931\u671f\u95f4\u975e\u5e38\u6709\u7528\uff0c\u5b83\u867d\u7136\u5e76\u6ca1\u6709\u771f\u6b63\u5ffd\u7565\u5904\u7406\u5668\u7684\u8bf7\u6c42\uff0c\u4f46\u964d\u4f4e\u4e86\u5b9e\u9645\u7684\u7f3a\u5931\u4ee3\u4ef7\u3002</p> <p>\u8fd8\u6709\u4e00\u79cd\u7cbe\u5de7\u800c\u590d\u6742\u7684\u9009\u62e9: \u5982\u679c\u80fd\u591f\u91cd\u53e0\u591a\u4e2a\u7f3a\u5931\uff0c\u7f13\u5b58\u5c31\u80fd\u8fdb\u4e00\u6b65\u964d\u4f4e\u5b9e\u9645\u7684\u7f3a\u5931\u4ee3\u4ef7\u3002\u8fd9\u88ab\u79f0\u4e3a\"\u591a\u6b21\u7f3a\u5931\u65f6\u4ecd\u7136\u547d\u4e2d\"(hit under multiple miss)\u6216\u8005\"\u7f3a\u5931\u65f6\u7f3a\u5931\"(miss under miss)\u4f18\u5316\u65b9\u6cd5\u3002\u53ea\u6709\u5f53\u5b58\u50a8\u5668\u7cfb\u7edf\u53ef\u4ee5\u4e3a\u591a\u6b21\u7f3a\u5931\u63d0\u4f9b\u670d\u52a1\u65f6\uff0c\u7b2c\u4e8c\u79cd\u4f18\u5316\u65b9\u6cd5\u624d\u6709\u597d\u5904\u3002</p> <p>\u5927\u591a\u6570\u9ad8\u6027\u80fd\u5904\u7406\u5668\u901a\u5e38\u652f\u6301\u8fd9\u4e24\u79cd\u4f18\u5316\u65b9\u6cd5\uff0c\u800c\u5f88\u591a\u4f4e\u7aef\u5904\u7406\u5668\u4ec5\u5728 L2 \u4e2d\u63d0\u4f9b\u4e86\u6709\u9650\u7684\u975e\u963b\u585e\u652f\u6301\u3002</p> Question <p>Which is more important for floating-point programs: two-way set associativity or hit under one miss for the primary data caches? What about integer programs?</p> <p>Assume the following average miss rates for 32 KiB data caches: 5.2% for floating-point programs with a direct-mapped cache, 4.9% for the programs with a two-way set associative cache, 3.5% for integer programs with a direct-mapped cache, and 3.2% for integer programs with a two-way set associative cache. Assume the miss penalty to L2 is 10 cycles, and the L2 misses and penalties are the same.</p> answer <p>For floating-point programs, the average memory stall times are</p> \\[Miss \\ rate_{DM} \\times Miss \\ penalty = 5.2\\% \\times 10 = 0.52\\] \\[Miss \\ rate_{2-way} \\times Miss \\ penalty = 4.9\\% \\times 10 = 0.49\\] <p>The cache access latency (including stalls) for two-way associativity is 0.49/0.52 or 94% of direct-mapped cache.</p> <p>Therefore, for floating-point programs, the direct-mapped data cache supporting one hit under one miss gives better performance than a two-way set-associative cache that blocks on a miss.</p> <p>For integer programs, the calculation is</p> \\[Miss \\ rate_{DM} \\times Miss \\ penalty = 3.5\\% \\times 10 = 0.35\\] \\[Miss \\ rate_{2-way} \\times Miss \\ penalty = 3.2\\% \\times 10 = 0.32\\] <p>The data cache access latency of a two-way set associative cache is thus 0.32/0.35 or 91% of direct-mapped cache, while the reduction in access latency when allowing a hit under one miss is 9%, making the two choices about equal.</p> <p>\u5bf9\u975e\u963b\u585e\u7f13\u5b58\u8fdb\u884c\u6027\u80fd\u8bc4\u4f30\u65f6\uff0c\u771f\u6b63\u7684\u96be\u5ea6\u5728\u4e8e\u4e00\u6b21\u7f13\u5b58\u7f3a\u5931\u4e0d\u4e00\u5b9a\u4f1a\u4f7f\u5904\u7406\u5668\u505c\u987f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f88\u96be\u5224\u65ad\u4e00\u6b21\u7f3a\u5931\u9020\u6210\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u4e5f\u5c31\u96be\u4ee5\u8ba1\u7b97\u5b58\u50a8\u5668\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4\u3002\u5b9e\u9645\u7f3a\u5931\u4ee3\u4ef7\u5e76\u4e0d\u7b49\u4e8e\u8fd9\u4e9b\u7f3a\u5931\u4e4b\u548c\uff0c\u800c\u662f\u7b49\u4e8e\u5904\u7406\u5668\u505c\u987f\u7684\u975e\u91cd\u53e0\u65f6\u95f4\u3002\u975e\u963b\u585e\u7f13\u5b58\u7684\u4f18\u52bf\u975e\u5e38\u590d\u6742\uff0c\u56e0\u4e3a\u5b83\u53d6\u51b3\u4e8e\u5b58\u5728\u591a\u6b21\u7f3a\u5931\u65f6\u7684\u7f3a\u5931\u4ee3\u4ef7\u3001\u5b58\u50a8\u5668\u8bbf\u95ee\u6a21\u5f0f\u4ee5\u53ca\u5904\u7406\u5668\u5728\u5904\u7406\u5355\u6b21\u7f3a\u5931\u65f6\u80fd\u591f\u6267\u884c\u591a\u5c11\u6761\u6307\u4ee4\u3002</p> <p>\u901a\u5e38\uff0c\u4e71\u5e8f\u5904\u7406\u5668\u80fd\u591f\u9690\u85cf\u5728 L2 \u7f13\u5b58\u4e2d\u547d\u4e2d\u4f46\u5728 L1 \u6570\u636e\u7f13\u5b58\u4e2d\u7f3a\u5931\u7684\u5927\u90e8\u5206\u7f3a\u5931\u4ee3\u4ef7\uff0c\u4f46\u65e0\u6cd5\u9690\u85cf\u66f4\u4f4e\u5c42\u6b21\u7f13\u5b58\u4e2d\u7f3a\u5931\u7684\u5927\u90e8\u5206\u4ee3\u4ef7\u3002</p> <p>\u5728\u51b3\u5b9a\u8981\u652f\u6301\u591a\u5c11\u4e2a\u672a\u5904\u7406\u7f3a\u5931\u65f6\uff0c\u9700\u8981\u8003\u8651\u591a\u79cd\u56e0\u7d20\uff0c\u5982\u4e0b\u6240\u8ff0\u3002</p> <ul> <li>\u7f3a\u5931\u6d41\u4e2d\u7684\u65f6\u95f4\u4e0e\u7a7a\u95f4\u5c40\u90e8\u6027\uff0c\u5b83\u51b3\u5b9a\u4e86\u4e00\u6b21\u7f3a\u5931\u80fd\u5426\u89e6\u53d1\u5bf9\u4f4e\u7ea7\u7f13\u5b58\u6216\u5bf9\u5b58\u50a8\u5668\u7684\u65b0\u8bbf\u95ee\u64cd\u4f5c\u3002</li> <li>\u5bf9\u8bbf\u95ee\u8bf7\u6c42\u505a\u51fa\u56de\u5e94\u7684\u5b58\u50a8\u5668\u6216\u7f13\u5b58\u7684\u5e26\u5bbd\uff0c</li> <li>\u4e3a\u4e86\u5141\u8bb8\u6700\u4f4e\u7ea7\u522b\u7684\u7f13\u5b58(\u8fd9\u4e00\u7ea7\u522b\u7684\u7f3a\u5931\u65f6\u95f4\u662f\u6700\u957f\u7684)\u4e2d\u51fa\u73b0\u66f4\u591a\u7684\u672a\u5904\u7406\u7f3a\u5931\u9700\u8981\u5728\u8f83\u9ad8\u7ea7\u522b\u4e0a\u652f\u6301\u81f3\u5c11\u540c\u7b49\u6570\u91cf\u7684\u7f3a\u5931\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fd9\u4e9b\u7f3a\u5931\u5fc5\u987b\u5728\u6700\u9ad8\u7ea7\u522b\u7684\u7f13\u5b58\u4e0a\u542f\u52a8\u3002</li> <li>\u5b58\u50a8\u5668\u7cfb\u7edf\u7684\u5ef6\u8fdf\u3002</li> </ul> Quetion <p>Assume a main memory access time of 36 ns and a memory system capable of a sustained transfer rate of 16 GiB/s. If the block size is 64 bytes, what is the maximum number of outstanding misses we need to support assuming that we can maintain the peak bandwidth given the request stream and that accesses never conflict. If the probability of a reference colliding with one of the previous four is 50%, and we assume that the access has to wait until the earlier access completes, estimate the number of maximum outstanding references. For simplicity, ignore the time between misses.</p> answer <p>In the first case, assuming that we can maintain the peak bandwidth, the memory system can support \\((16 \\times 10)^9 /64  = 250\\) million references per second. Because each reference takes 36 ns, we can support \\(250 \\times 10^6 \\times 36 \\times 10^{-9} = 9\\) references.</p> <p>If the probability of a collision is greater than 0, then we need more outstanding references, because we cannot start work on those colliding references; the memory system needs more independent references, not fewer! To approximate, we can simply assume that half the memory references do not have to be issued to the memory.</p> <p>This means that we must support twice as many outstanding references, or 18.</p> <p>\u56e0\u6b64\uff0c\u5f53\u51fa\u73b0\u9519\u8bef\u65f6\uff0c\u6211\u4eec\u5206\u914d\u4e00\u4e2a MSHR(\u9519\u8fc7\u72b6\u6001\u5904\u7406\u5bc4\u5b58) \u6765\u5904\u7406\u8be5\u9519\u8bef\uff0c\u8f93\u5165\u5173\u4e8e\u9519\u8bef\u7684\u9002\u5f53\u4fe1\u606f\uff0c\u5e76\u4f7f\u7528 MSHR \u7684\u7d22\u5f15\u6807\u8bb0\u5185\u5b58\u8bf7\u6c42\u3002\u5185\u5b58\u7cfb\u7edf\u5728\u8fd4\u56de\u6570\u636e\u65f6\u4f7f\u7528\u8be5\u6807\u8bb0\uff0c\u5141\u8bb8\u7f13\u5b58\u7cfb\u7edf\u5c06\u6570\u636e\u548c\u6807\u8bb0\u4fe1\u606f\u4f20\u8f93\u5230\u9002\u5f53\u7684\u7f13\u5b58\u5757\uff0c\u5e76\"\u901a\u77e5\"\u751f\u6210\u4e22\u5931\u7684\u52a0\u8f7d\u6216\u5b58\u50a8\uff0c\u5373\u6570\u636e\u73b0\u5728\u662f\u53ef\u7528\u7684\uff0c\u5b83\u53ef\u4ee5\u6062\u590d\u64cd\u4f5c\u3002</p> <p>\u975e\u963b\u585e\u7f13\u5b58\u663e\u7136\u9700\u8981\u989d\u5916\u7684\u903b\u8f91\uff0c\u56e0\u6b64\u6709\u4e00\u5b9a\u7684\u80fd\u6e90\u6210\u672c\u3002\u7136\u800c\uff0c\u5f88\u96be\u51c6\u786e\u5730\u8bc4\u4f30\u5b83\u4eec\u7684\u80fd\u6e90\u6210\u672c\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u4f1a\u51cf\u5c11\u505c\u6ede\u65f6\u95f4\uff0c\u4ece\u800c\u51cf\u5c11\u6267\u884c\u65f6\u95f4\u548c\u7531\u6b64\u4ea7\u751f\u7684\u80fd\u6e90\u6d88\u8017\u3002</p> <p>\u9664\u4e86\u524d\u9762\u7684\u95ee\u9898\u4e4b\u5916\uff0c\u591a\u5904\u7406\u5668\u5185\u5b58\u7cfb\u7edf\uff0c\u65e0\u8bba\u662f\u5728\u5355\u4e2a\u82af\u7247\u5185\u8fd8\u662f\u5728\u591a\u4e2a\u82af\u7247\u4e0a\uff0c\u8fd8\u5fc5\u987b\u5904\u7406\u4e0e\u5185\u5b58\u4e00\u81f4\u6027\u548c\u4e00\u81f4\u6027\u76f8\u5173\u7684\u590d\u6742\u5b9e\u73b0\u95ee\u9898\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u7f13\u5b58\u4e22\u5931\u4e0d\u518d\u662f\u539f\u5b50\u6027\u7684\uff08\u56e0\u4e3a\u8bf7\u6c42\u548c\u54cd\u5e94\u662f\u5206\u5272\u7684\uff0c\u5e76\u4e14\u53ef\u80fd\u5728\u591a\u4e2a\u8bf7\u6c42\u4e4b\u95f4\u4ea4\u9519\uff09\uff0c\u56e0\u6b64\u6709\u53ef\u80fd\u51fa\u73b0\u6b7b\u9501\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#5-critical-word-first-and-early-restart-to-reduce-miss-penalty","title":"5 Critical Word First and Early Restart to Reduce Miss Penalty","text":"<p>\u8fd9\u79cd\u6280\u672f\u7684\u57fa\u7840\u662f\u5904\u7406\u5668\u901a\u5e38\u4e00\u6b21\u4ec5\u9700\u8981\u7f13\u5b58\u5757\u4e2d\u7684\u4e00\u4e2a\u5b57\u3002\u8fd9\u4e00\u7b56\u7565\u663e\u5f97\"\u7f3a\u4e4f\u8010\u5fc3\"\u65e0\u987b\u7b49\u5f85\u6574\u4e2a\u5757\u8f7d\u5165\u5b8c\u6210\uff0c\u5c31\u53ef\u4ee5\u53d1\u9001\u8bf7\u6c42\u7684\u5b57\u5e76\u91cd\u65b0\u6267\u884c\u5904\u7406\u5668\u3002</p> <p>\u4e0b\u9762\u662f\u4e24\u79cd\u5177\u4f53\u7b56\u7565 :</p> <ul> <li>\u5173\u952e\u5b57\u4f18\u5148: \u9996\u5148\u4ece\u5b58\u50a8\u5668\u4e2d\u8bf7\u6c42\u7f3a\u5931\u7684\u5b57\uff0c\u5728\u5176\u5230\u8fbe\u7f13\u5b58\u4e4b\u540e\u7acb\u5373\u53d1\u7ed9\u5904\u7406\u5668;\u8ba9\u5904\u7406\u5668\u80fd\u591f\u5728\u8f7d\u5165\u5757\u4e2d\u5176\u4ed6\u7684\u5b57\u65f6\u7ee7\u7eed\u6267\u884c\u3002</li> <li>\u63d0\u524d\u91cd\u65b0\u6267\u884c: \u4ee5\u6b63\u5e38\u987a\u5e8f\u63d0\u53d6\u5b57\uff0c\u4f46\u53ea\u8981\u5757\u4e2d\u7684\u88ab\u8bf7\u6c42\u5b57\u5230\u8fbe\u7f13\u5b58\uff0c\u5c31\u7acb\u5373\u5c06\u5176\u53d1\u9001\u7ed9\u5904\u7406\u5668\uff0c\u8ba9\u5904\u7406\u5668\u7ee7\u7eed\u6267\u884c\u3002</li> </ul> <p>\u5173\u952e\u5b57\u4f18\u5148\u548c\u63d0\u524d\u91cd\u65b0\u6267\u884c\u7684\u597d\u5904\u53d6\u51b3\u4e8e\u5757\u7684\u5927\u5c0f\u4ee5\u53ca\u5bf9\u5757\u4e2d\u5c1a\u672a\u83b7\u53d6\u7684\u90e8\u5206\u8fdb\u884c\u53e6\u4e00\u6b21\u8bbf\u95ee\u7684\u53ef\u80fd\u6027\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#6-merging-write-buffer-to-reduce-miss-penalty","title":"6 Merging Write Buffer to Reduce Miss Penalty","text":"<p>\u56e0\u4e3a\u6240\u6709\u5b58\u50a8\u5185\u5bb9\u90fd\u5fc5\u987b\u53d1\u9001\u5230\u5c42\u6b21\u7ed3\u6784\u7684\u4e0b\u4e00\u7ea7\uff0c\u6240\u4ee5\u5199\u76f4\u8fbe\u7f13\u5b58\u4f9d\u8d56\u4e8e\u5199\u7f13\u51b2\u533a\u3002\u5373\u4f7f\u662f\u5199\u56de\u7f13\u5b58\uff0c\u5728\u66ff\u4ee3\u4e00\u4e2a\u5757\u65f6\u4e5f\u4f1a\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u7f13\u51b2\u533a\u3002\u5982\u679c\u5199\u7f13\u51b2\u533a\u4e3a\u7a7a\uff0c\u5219\u6570\u636e\u548c\u6574\u4e2a\u5730\u5740\u88ab\u5199\u5230\u7f13\u51b2\u533a\u4e2d\uff0c\u4ece\u5904\u7406\u5668\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5199\u64cd\u4f5c\u5df2\u7ecf\u5b8c\u6210;\u5728\u5199\u7f13\u51b2\u533a\u51c6\u5907\u5c06\u5b57\u5199\u5165\u5b58\u50a8\u5668\u65f6\uff0c\u5904\u7406\u5668\u7ee7\u7eed\u81ea\u5df1\u7684\u5de5\u4f5c\u3002</p> <p>\u5982\u679c\u7f13\u51b2\u533a\u4e2d\u5305\u542b\u5176\u4ed6\u7ecf\u8fc7\u4fee\u6539\u7684\u5757\uff0c\u5219\u53ef\u4ee5\u68c0\u67e5\u5b83\u4eec\u7684\u5730\u5740\uff0c\u770b\u770b\u65b0\u6570\u636e\u7684\u5730\u5740\u662f\u5426\u5339\u914d\u5199\u7f13\u51b2\u533a\u67d0\u4e2a\u6761\u76ee\u7684\u6709\u6548\u5730\u5740\u3002\u5982\u679c\u5339\u914d\uff0c\u5219\u5c06\u65b0\u6570\u636e\u4e0e\u8fd9\u4e2a\u6761\u76ee\u5408\u5e76\u5728\u4e00\u8d77\u3002</p> <p>\u8fd9\u79cd\u4f18\u5316\u65b9\u6cd5\u79f0\u4e3a\u5199\u5408\u5e76(write merging)\u3002</p> <p>\u8fd9\u79cd\u4f18\u5316\u65b9\u6cd5\u8fd8\u4f1a\u51cf\u5c11\u56e0\u4e3a\u5199\u7f13\u51b2\u533a\u5df2\u6ee1\u800c\u5bfc\u81f4\u7684\u505c\u987f\u3002</p> <p>\u6ce8\u610f\uff0c\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907\u5bc4\u5b58\u5668\u7ecf\u5e38\u88ab\u6620\u5c04\u5230\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002\u8fd9\u4e9b IO \u5730\u5740\u4e0d\u5141\u8bb8\u5199\u5408\u5e76\uff0c\u56e0\u4e3a\u5355\u72ec\u7684 IO \u5bc4\u5b58\u5668\u4e0d\u80fd\u50cf\u5b58\u50a8\u5668\u4e2d\u7684\u5b57\u6570\u7ec4\u90a3\u6837\u64cd\u4f5c\u3002\u4f8b\u5982,\u5b83\u4eec\u53ef\u80fd\u8981\u6c42\u4e3a\u6bcf\u4e2a IO \u5bc4\u5b58\u5668\u63d0\u4f9b\u4e00\u4e2a\u5730\u5740\u548c\u4e00\u4e2a\u6570\u636e\u5b57\uff0c\u800c\u4e0d\u80fd\u53ea\u63d0\u4f9b\u4e00\u4e2a\u5730\u5740\u8fdb\u884c\u591a\u5b57\u5199\u5165\u3002\u8fd9\u4e9b\u526f\u4f5c\u7528\u901a\u5e38\u662f\u901a\u8fc7\u5c06\u9875\u9762\u7684\u5c5e\u6027\u5728\u9875\u8868\u4e2d\u6807\u8bb0\u4e3a\"requiring nonmerging write through by the caches\" \u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#7-compiler-optimizations-to-reduce-miss-rate","title":"7 Compiler Optimizations to Reduce Miss Rate","text":"<p>\u7814\u7a76\u5305\u62ec\u4e24\u4e2a\u65b9\u9762:\u6307\u4ee4\u7f13\u5b58\u7f3a\u5931\u7684\u6027\u80fd\u6539\u8fdb\u548c\u6570\u636e\u7f13\u5b58\u7f3a\u5931\u7684\u6027\u80fd\u6539\u8fdb\u3002</p> <ol> <li>\u5faa\u73af\u4ea4\u6362</li> </ol> <p>\u4e00\u4e9b\u7a0b\u5e8f\u4e2d\u5b58\u5728\u5d4c\u5957\u5faa\u73af\uff0c\u5b83\u4eec\u4f1a\u4ee5\u975e\u8fde\u7eed\u987a\u5e8f\u8bbf\u95ee\u5b58\u50a8\u5668\u4e2d\u7684\u6570\u636e\u3002\u53ea\u8981\u4ea4\u6362\u4e00\u4e0b\u8fd9\u4e9b\u5faa\u73af\u7684\u5d4c\u5957\u987a\u5e8f\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u4ee3\u7801\u6309\u7167\u6570\u636e\u7684\u5b58\u50a8\u987a\u5e8f\u6765\u8bbf\u95ee\u5b83\u4eec\u3002\u5982\u679c\u7f13\u5b58\u4e2d\u65e0\u6cd5\u5bb9\u7eb3\u8fd9\u4e9b\u6570\u7ec4\uff0c\u8fd9\u4e00\u6280\u672f\u53ef\u4ee5\u901a\u8fc7\u6539\u5584\u7a7a\u95f4\u5c40\u90e8\u6027\u6765\u51cf\u5c11\u7f3a\u5931;\u901a\u8fc7\u91cd\u65b0\u6392\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7f13\u5b58\u5757\u4e2d\u7684\u6570\u636e\u5728\u88ab\u66ff\u6362\u4e4b\u524d\uff0c\u5f97\u5230\u6700\u5927\u9650\u5ea6\u7684\u5229\u7528\u3002</p> <ol> <li>\u5206\u5757</li> </ol> <p>\u8fd9\u79cd\u4f18\u5316\u65b9\u6cd5\u901a\u8fc7\u6539\u5584\u65f6\u95f4\u5c40\u90e8\u6027\u6765\u51cf\u5c11\u7f13\u5b58\u7f3a\u5931\u3002\u6211\u4eec\u8fd8\u662f\u8981\u5904\u7406\u591a\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u6709\u7684\u6570\u7ec4\u6309\u884c\u8bbf\u95ee\uff0c\u6709\u7684\u6309\u5217\u8bbf\u95ee\u3002\u7531\u4e8e\u5728\u6bcf\u4e2a\u5faa\u73af\u8fed\u4ee3\u4e2d\u90fd\u7528\u5230\u4e86\u884c\u4e0e\u5217\uff0c\u6240\u4ee5\u6309\u884c\u6216\u6309\u5217\u6765\u5b58\u50a8\u6570\u7ec4\u5e76\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898[\u6309\u884c\u5b58\u50a8\u79f0\u4e3a\u884c\u4e3b\u5e8f(row major order )\uff0c\u6309\u5217\u5b58\u50a8\u79f0\u4e3a\u5217\u4e3b\u5e8f(column maior order)]\u3002\u8fd9\u79cd\u6b63\u4ea4\u8bbf\u95ee\u65b9\u5f0f\u610f\u5473\u7740\u5728\u8fdb\u884c\u5faa\u73af\u4ea4\u6362\u4e4b\u7c7b\u7684\u8f6c\u6362\u64cd\u4f5c\u4e4b\u540e\uff0c\u4ecd\u7136\u6709\u5f88\u5927\u7684\u6539\u8fdb\u7a7a\u95f4\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#8-hardware-prefetching-of-instructions-and-data-to-reduce-miss-penalty-or-miss-rate","title":"8 Hardware Prefetching of Instructions and Data to Reduce Miss Penalty or Miss Rate","text":"<p>\u901a\u8fc7\u5c06\u6267\u884c\u8fc7\u7a0b\u4e0e\u8bbf\u5b58\u8fc7\u7a0b\u91cd\u53e0\uff0c\u975e\u963b\u585e\u7f13\u5b58\u80fd\u6709\u6548\u5730\u964d\u4f4e\u7f3a\u5931\u4ee3\u4ef7\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5728\u5904\u7406\u5668\u771f\u6b63\u9700\u8981\u67d0\u4e2a\u6570\u636e\u4e4b\u524d\uff0c\u9884\u5148\u83b7\u53d6\u5b83\u4eec\u3002\u6307\u4ee4\u548c\u6570\u636e\u90fd\u53ef\u4ee5\u9884\u5148\u63d0\u53d6\uff0c\u65e2\u53ef\u4ee5\u76f4\u63a5\u653e\u5728\u7f13\u5b58\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728\u4e00\u4e2a\u8bbf\u95ee\u901f\u5ea6\u5feb\u4e8e\u4e3b\u5b58\u50a8\u5668\u7684\u5916\u90e8\u7f13\u51b2\u533a\u4e2d\u3002</p> <p>\u6307\u4ee4\u9884\u53d6\u7ecf\u5e38\u5728\u7f13\u5b58\u5916\u90e8\u7684\u786c\u4ef6\u4e2d\u5b8c\u6210\u3002\u901a\u5e38\uff0c\u5904\u7406\u5668\u5728\u4e00\u6b21\u7f3a\u5931\u65f6\u63d0\u53d6\u4e24\u4e2a\u5757:\u88ab\u8bf7\u6c42\u7684\u5757\u548c\u4e0b\u4e00\u4e2a\u76f8\u90bb\u5757\u3002\u88ab\u8bf7\u6c42\u7684\u5757\u653e\u5728\u5b83\u8fd4\u56de\u65f6\u7684\u6307\u4ee4\u7f13\u5b58\u4e2d,\u9884\u53d6\u5757\u88ab\u653e\u5728\u6307\u4ee4\u6d41\u7f13\u51b2\u533a\u4e2d\u3002\u5982\u679c\u88ab\u8bf7\u6c42\u7684\u5757\u5f53\u524d\u5b58\u5728\u4e8e\u6307\u4ee4\u6d41\u7f13\u51b2\u533a\u4e2d\uff0c\u5219\u53d6\u6d88\u8be5\u7f13\u5b58\u8bf7\u6c42\uff0c\u4ece\u6d41\u7f13\u51b2\u533a\u4e2d\u8bfb\u53d6\u8fd9\u4e2a\u5757\u5e76\u53d1\u51fa\u4e0b\u4e00\u6761\u9884\u53d6\u8bf7\u6c42\u3002</p> <p>\u9884\u53d6\u64cd\u4f5c\u9700\u8981\u5229\u7528\u7a7a\u95f2\u7684\u5b58\u50a8\u5e26\u5bbd\uff0c\u4f46\u5982\u679c\u5b83\u5e72\u6270\u4e86\u5176\u4ed6\u5173\u952e\u8def\u5f84\u7f3a\u5931\u5185\u5bb9\u7684\u8bbf\u95ee\uff0c\u53cd\u800c\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002\u5728\u7f16\u8bd1\u5668\u7684\u5e2e\u52a9\u4e0b\uff0c\u53ef\u4ee5\u51cf\u5c11\u65e0\u7528\u9884\u53d6\u3002\u5f53\u9884\u53d6\u64cd\u4f5c\u6b63\u5e38\u6267\u884c\u65f6\uff0c\u5b83\u5bf9\u529f\u8017\u7684\u5f71\u54cd\u53ef\u4ee5\u5ffd\u7565\u3002\u5982\u679c\u9884\u53d6\u7684\u6570\u636e\u5e76\u672a\u88ab\u7528\u5230\u6216\u8005\u66ff\u6362\u4e86\u6709\u7528\u6570\u636e\uff0c\u9884\u53d6\u64cd\u4f5c\u4f1a\u5bf9\u529f\u8017\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#9-compiler-controlled-prefetching-to-reduce-miss-penalty-or-miss-rate","title":"9 Compiler-Controlled Prefetching to Reduce Miss Penalty or Miss Rate","text":"<p>\u786c\u4ef6\u9884\u53d6\u4e4b\u5916\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\uff0c\u7f16\u8bd1\u5668\u63d2\u5165\u9884\u53d6\u6307\u4ee4\uff0c\u4ee5\u4fbf\u5728\u5904\u7406\u5668\u9700\u8981\u6570\u636e\u4e4b\u524d\u8bf7\u6c42\u6570\u636e\u3002\u5171\u6709\u4ee5\u4e0b\u4e24\u79cd\u9884\u53d6\u3002</p> <ul> <li>\u5bc4\u5b58\u5668\u9884\u53d6\u5c06\u6570\u636e\u503c\u8f7d\u5165\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002</li> <li>\u7f13\u5b58\u9884\u53d6\u4ec5\u5c06\u6570\u636e\u8f7d\u5165\u7f13\u5b58\uff0c\u800c\u4e0d\u8f7d\u5165\u5bc4\u5b58\u5668</li> </ul> <p>\u8fd9\u4e24\u79cd\u9884\u53d6\u90fd\u53ef\u80fd\u89e6\u53d1\u5f02\u5e38\uff0c\u4e5f\u53ef\u80fd\u4e0d\u89e6\u53d1;\u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u5730\u5740\u53ef\u80fd\u4f1a\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u5bfc\u81f4\u865a\u62df\u5730\u5740\u9519\u8bef\u5f02\u5e38\u548c\u4fdd\u62a4\u51b2\u7a81\u5f02\u5e38\u3002\u6309\u7167\u8fd9\u4e00\u6982\u5ff5\u5212\u5206\uff0c\u666e\u901a\u7684\u8f7d\u5165\u6307\u4ee4\u53ef\u88ab\u89c6\u4e3a\"\u6545\u969c\u6027\u5bc4\u5b58\u5668\u9884\u53d6\u6307\u4ee4\"\u3002\u5982\u679c\u4e00\u6b21\u9884\u53d6\u53ef\u80fd\u5bfc\u81f4\u5f02\u5e38,\u90a3\u4e48\u5c31\u628a\u5b83\u8f6c\u4e3a\u7a7a\u64cd\u4f5c,\u7a7a\u64cd\u4f5c\u4e0d\u4f1a\u89e6\u53d1\u7f3a\u9875\u9519\u8bef\u8fd9\u6837\u7684\u975e\u6545\u969c\u6027\u9884\u53d6\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002</p> <p>\u6700\u6709\u6548\u7684\u9884\u53d6\u5bf9\u7a0b\u5e8f\u6765\u8bf4\u662f\"\u8bed\u4e49\u4e0a\u4e0d\u53ef\u89c1\u7684\":\u5b83\u4e0d\u4f1a\u6539\u53d8\u5bc4\u5b58\u5668\u548c\u5b58\u50a8\u5668\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u865a\u62df\u5b58\u50a8\u5668\u9519\u8bef\u3002\u4eca\u5929\u7684\u5927\u591a\u6570\u5904\u7406\u5668\u63d0\u4f9b\u975e\u6545\u969c\u6027\u7f13\u5b58\u9884\u53d6\u80fd\u529b\u3002\u672c\u8282\u91c7\u7528\u975e\u6545\u969c\u6027\u7f13\u5b58\u9884\u53d6\uff0c\u4e5f\u79f0\u4e3a\u975e\u7ed1\u5b9a(nonbinding)\u9884\u53d6\u3002</p> <p>\u53ea\u6709\u5f53\u5904\u7406\u5668\u5728\u9884\u53d6\u6570\u636e\u65f6\u80fd\u591f\u7ee7\u7eed\u5de5\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c\u9884\u53d6\u624d\u6709\u610f\u4e49;\u4e5f\u5c31\u662f\u8bf4\uff0c\u7f13\u5b58\u5728\u7b49\u5f85\u8fd4\u56de\u9884\u53d6\u6570\u636e\u65f6\u4e0d\u4f1a\u505c\u987f\uff0c\u800c\u662f\u7ee7\u7eed\u63d0\u4f9b\u6307\u4ee4\u548c\u6570\u636e\u3002\u53ef\u4ee5\u60f3\u89c1\uff0c\u8fd9\u4e9b\u8ba1\u7b97\u673a\u7684\u6570\u636e\u7f13\u5b58\u901a\u5e38\u662f\u975e\u963b\u585e\u6027\u7684\u3002</p> <p>\u4e0e\u786c\u4ef6\u63a7\u5236\u7684\u9884\u53d6\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u7684\u76ee\u6807\u4e5f\u662f\u5c06\u6267\u884c\u8fc7\u7a0b\u4e0e\u6570\u636e\u9884\u53d6\u8fc7\u7a0b\u91cd\u53e0\u3002\u5faa\u73af\u662f\u91cd\u8981\u7684\u9884\u53d6\u4f18\u5316\u76ee\u6807\uff0c\u56e0\u4e3a\u5b83\u4eec\u672c\u8eab\u5f88\u9002\u5408\u8fdb\u884c\u9884\u53d6\u4f18\u5316\u3002\u5982\u679c\u7f3a\u5931\u4ee3\u4ef7\u5f88\u5c0f\uff0c\u7f16\u8bd1\u5668\u53ea\u9700\u5c06\u5faa\u73af\u5c55\u5f00\u4e00\u4e24\u6b21\uff0c\u5728\u6267\u884c\u65f6\u8c03\u5ea6\u8fd9\u4e9b\u9884\u53d6\u64cd\u4f5c\u3002\u5982\u679c\u7f3a\u5931\u4ee3\u4ef7\u5f88\u5927\uff0c\u5b83\u4f1a\u4f7f\u7528\u8f6f\u4ef6\u6d41\u6c34\u7ebf\u6216\u8005\u5c06\u5faa\u73af\u5c55\u5f00\u591a\u6b21\uff0c\u4ee5\u9884\u5148\u63d0\u53d6\u6570\u636e\uff0c\u4f9b\u540e\u7eed\u9009\u4ee3\u4f7f\u7528\u3002</p> <p>\u4e0d\u8fc7\uff0c\u53d1\u51fa\u9884\u53d6\u6307\u4ee4\u4f1a\u5e26\u6765\u6307\u4ee4\u5f00\u9500\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u5fc5\u987b\u786e\u4fdd\u8fd9\u4e9b\u5f00\u9500\u4e0d\u4f1a\u5927\u4e8e\u6240\u5f97\u5230\u7684\u597d\u5904\u3002\u5982\u679c\u7a0b\u5e8f\u80fd\u591f\u5c06\u6ce8\u610f\u529b\u653e\u5728\u90a3\u4e9b\u53ef\u80fd\u5bfc\u81f4\u7f13\u5b58\u7f3a\u5931\u7684\u8bbf\u95ee\u4e0a\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u9884\u53d6\u64cd\u4f5c\uff0c\u540c\u65f6\u5927\u5927\u7f29\u77ed\u5b58\u50a8\u5668\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4\u3002</p> Question <p>For the following code, determine which accesses are likely to cause data cache misses. Next, insert prefetch instructions to reduce misses. Finally, calculate the number of prefetch instructions executed and the misses avoided by prefetching.</p> <p>Let's assume we have an 8 KiB direct-mapped data cache with 16-byte blocks, and it is a write-back cache that does write allocate. The elements of a and b are 8 bytes long because they are double-precision floating-point arrays. There are 3 rows and 100 columns for a and 101 rows and 3 columns for b. Let\u2019s also assume they are not in the cache at the start of the program.</p> <pre><code>for (i = 0; i &lt; 3; i \u00bc i + 1)\n    for (j = 0; j &lt; 100; j \u00bc j + 1)\n        a[i][j] = b[j][0] * b[j + 1][0];\n</code></pre> answer <p>The compiler will first determine which accesses are likely to cause cache misses; otherwise, we will waste time on issuing prefetch instructions for data that would be hits. Elements of a are written in the order that they are stored in memory, so a will benefit from spatial locality: The even values of j will miss and the odd values will hit. Because a has 3 rows and 100 columns, its accesses will lead to 3 \\(\\times\\) (100/2), or 150 misses.</p> <p>The array b does not benefit from spatial locality because the accesses are not in the order it is stored. The array b does benefit twice from temporal locality: the same elements are accessed for each iteration of i, and each iteration of j uses the same value of b as the last iteration. Ignoring potential conflict misses, the misses because of b will be for b[j + 1][0] accesses when i = 0, and also the first access to b[j][0] when j = 0. Because j goes from 0 to 99 when i = 0, accesses to b lead to 100 + 1, or 101 misses.</p> <p>Thus this loop will miss the data cache approximately 150 times for a plus 101 times for b, or 251 misses.</p>"},{"location":"Computer_Science/CA/Chapter2/#10-using-hbm-to-extend-the-memory-hierarchy","title":"10  Using HBM to Extend the Memory Hierarchy","text":"<p>\u9996\u5148\uff0c\u5982\u679c\u8bb8\u591a\u5757\u4e2d\u7684\u5185\u5bb9\u90fd\u4e0d\u4f1a\u7528\u5230\uff0c\u90a3\u4e48\u7f13\u5b58\u7684\u4f7f\u7528\u6548\u7387\u53ef\u80fd\u4f1a\u6bd4\u8f83\u4f4e\u4e0b;\u8fd9\u79f0\u4e3a\u788e\u7247\u5316\u95ee\u9898\uff0c\u5b83\u4e5f\u51fa\u73b0\u4e8e\u865a\u62df\u5b58\u50a8\u5668\u7cfb\u7edf\u4e2d\u3002\u6b64\u5916\uff0c\u5982\u679c\u8bb8\u591a\u6570\u636e\u90fd\u662f\u6ca1\u7528\u7684\uff0c\u90a3\u4e48\u4f20\u9001\u8fd9\u6837\u5927\u7684\u6570\u636e\u5757\u4e5f\u662f\u6548\u7387\u4f4e\u4e0b\u7684\u3002\u5176\u6b21\uff0c\u7531\u4e8e\u6570\u636e\u5757\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5 DRAM \u7f13\u5b58\u4e2d\u4fdd\u5b58\u7684\u4e0d\u540c\u6570\u636e\u5757\u7684\u6570\u76ee\u5c31\u8981\u5c11\u5f97\u591a\u4e86\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u66f4\u591a\u7684\u7f3a\u5931\uff0c\u5c24\u5176\u662f\u51b2\u7a81\u7f3a\u5931\u548c\u4e00\u81f4\u6027\u7f3a\u5931\u3002</p> <p>\u7b2c\u4e00\u4e2a\u95ee\u9898\u7684\u90e8\u5206\u89e3\u51b3\u65b9\u6cd5\u662f\u589e\u52a0\u5b50\u5757\u3002\u5b50\u5757\u5141\u8bb8\u4e00\u4e2a\u7f13\u5b58\u884c\u4e2d\u53ea\u6709\u90e8\u5206\u6570\u636e\u662f\u6709\u6548\u7684\uff0c\u5f53\u53d1\u751f\u7f3a\u5931\u65f6\uff0c\u53ef\u4ee5\u53ea\u83b7\u53d6\u5176\u4e2d\u6709\u6548\u7684\u5b50\u5757\u3002\u4f46\u5bf9\u4e8e\u89e3\u51b3\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u5b50\u5757\u65e0\u80fd\u4e3a\u529b\u3002</p> <p>\u4f7f\u7528\u8f83\u5c0f\u7684\u6570\u636e\u5757\u65f6\uff0c\u6807\u7b7e\u5b58\u50a8\u662f\u4e00\u4e2a\u4e3b\u8981\u7f3a\u9677\u3002\u8be5\u95ee\u9898\u6709\u4e00\u4e2a\u53ef\u80fd\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5c31\u662f\u76f4\u63a5\u628a HBM \u4f5c\u4e3a L4 \u7f13\u5b58\u7684\u6807\u7b7e\u5b58\u50a8\u5230 HBM \u4e2d\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#virtual-memory-and-virtual-machines","title":"Virtual Memory and Virtual Machines","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u548c\u4f53\u7cfb\u7ed3\u6784\u8054\u5408\u8d77\u6765\u5c31\u80fd\u4f7f\u8fdb\u7a0b\u5171\u4eab\u786c\u4ef6\u800c\u4e0d\u4f1a\u76f8\u4e92\u5e72\u6270\u3002\u4e3a\u6b64\uff0c\u5728\u8fd0\u884c\u4e00\u4e2a\u7528\u6237\u8fdb\u7a0b\u65f6\uff0c\u4f53\u7cfb\u7ed3\u6784\u5fc5\u987b\u9650\u5236\u7528\u6237\u8fdb\u7a0b\u80fd\u591f\u8bbf\u95ee\u7684\u8d44\u6e90\uff0c\u4f46\u8981\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u8bbf\u95ee\u66f4\u591a\u8d44\u6e90\u3002\u4f53\u7cfb\u7ed3\u6784\u81f3\u5c11\u8981\u505a\u5230\u4ee5\u4e0b\u51e0\u70b9</p> <p>(1) \u63d0\u4f9b\u81f3\u5c11\u4e24\u79cd\u6a21\u5f0f\uff0c\u6307\u51fa\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u662f\u7528\u6237\u8fdb\u7a0b\u8fd8\u662f\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u3002\u540e\u8005\u6709\u65f6\u88ab\u79f0\u4e3a\u5185\u6838(kernel)\u8fdb\u7a0b\u6216\u7ba1\u7406(supervisor)\u8fdb\u7a0b\u3002</p> <p>(2) \u63d0\u4f9b\u7528\u6237\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u4f46\u4e0d\u80fd\u5199\u5165\u7684\u5904\u7406\u5668\u72b6\u6001\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u79cd\u72b6\u6001\u5305\u62ec\u7528\u6237/\u7ba1\u7406\u6a21\u5f0f\u4f4d\u3001\u5f02\u5e38\u542f\u7528/\u7981\u7528\u4f4d\u548c\u5b58\u50a8\u5668\u8bbf\u95ee\u6743\u9650\u4fe1\u606f\u3002\u4e4b\u6240\u4ee5\u7981\u6b62\u7528\u6237\u5199\u5165\u8fd9\u4e9b\u72b6\u6001\u4fe1\u606f\uff0c\u662f\u56e0\u4e3a\u5982\u679c\u7528\u6237\u53ef\u4ee5\u6388\u4e88\u81ea\u5df1\u7ba1\u7406\u5458\u6743\u9650\u3001\u7981\u7528\u5f02\u5e38\u6216\u8005\u6539\u53d8\u5b58\u50a8\u5668\u8bbf\u95ee\u6743\u9650\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u4e0d\u80fd\u63a7\u5236\u7528\u6237\u8fdb\u7a0b\u4e86\u3002</p> <p>(3) \u63d0\u4f9b\u5904\u7406\u5668\u501f\u4ee5\u4ece\u7528\u6237\u6a21\u5f0f\u8f6c\u4e3a\u7ba1\u7406\u6a21\u5f0f\u53ca\u53cd\u5411\u8f6c\u6362\u7684\u673a\u5236\u3002\u524d\u4e00\u79cd\u8f6c\u6362\u901a\u5e38\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528(system call)\u5b8c\u6210\uff0c\u4f7f\u7528\u4e00\u79cd\u7279\u6b8a\u6307\u4ee4\u5c06\u63a7\u5236\u4f20\u9012\u5230\u7ba1\u7406\u4ee3\u7801\u7a7a\u95f4\u7684\u4e00\u4e2a\u4e13\u7528\u4f4d\u7f6e\u3002\u4fdd\u5b58\u7cfb\u7edf\u8c03\u7528\u65f6\u523b\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\uff0c\u5904\u7406\u5668\u8f6c\u5165\u7ba1\u7406\u6a21\u5f0f\u3002\u8fd4\u56de\u7528\u6237\u6a21\u5f0f\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u5b50\u7a0b\u5e8f\u8fd4\u56de\u8fc7\u7a0b\uff0c\u6062\u590d\u5230\u5148\u524d\u7684\u7528\u6237/\u7ba1\u7406\u6a21\u5f0f\u3002</p> <p>(4) \u63d0\u4f9b\u9650\u5236\u5b58\u50a8\u5668\u8bbf\u95ee\u7684\u673a\u5236,\u8fd9\u6837\u5728\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\u4e0d\u9700\u8981\u5c06\u8fdb\u7a0b\u5207\u6362\u5230\u78c1\u76d8\u5c31\u80fd\u4fdd\u62a4\u8be5\u8fdb\u7a0b\u7684\u5b58\u50a8\u5668\u72b6\u6001\u3002</p> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6700\u6d41\u884c\u7684\u673a\u5236\u8fd8\u662f\u6dfb\u52a0\u5bf9\u865a\u62df\u5b58\u50a8\u5668\u5404\u4e2a\u9875\u9762\u7684\u4fdd\u62a4\u6027\u9650\u5236\u3002\u56fa\u5b9a\u5927\u5c0f\u7684\u9875\u9762(\u901a\u5e38\u957f4KiB\u62168KiB)\u901a\u8fc7\u4e00\u4e2a\u9875\u8868\u7531\u865a\u62df\u5730\u5740\u7a7a\u95f4\u6620\u5c04\u5230\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002\u8fd9\u4e9b\u4fdd\u62a4\u6027\u9650\u5236\u5c31\u5305\u542b\u5728\u6bcf\u4e2a\u9875\u8868\u9879\u4e2d\u3002\u4fdd\u62a4\u6027\u9650\u5236\u53ef\u4ee5\u51b3\u5b9a\u4e00\u4e2a\u7528\u6237\u8fdb\u7a0b\u80fd\u5426\u8bfb\u53d6/\u5199\u5165\u8fd9\u4e2a\u9875\u9762\uff0c\u4ee5\u53ca\u80fd\u5426\u4ece\u8fd9\u4e2a\u9875\u9762\u6267\u884c\u4ee3\u7801\u3002\u6b64\u5916\uff0c\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u6ca1\u6709\u5305\u542b\u5728\u9875\u8868\u4e2d\uff0c\u90a3\u5b83\u5c31\u65e2\u4e0d\u80fd\u8bfb\u53d6\u4e5f\u4e0d\u80fd\u5199\u5165\u4e00\u4e2a\u9875\u9762\u3002\u7531\u4e8e\u53ea\u6709\u64cd\u4f5c\u7cfb\u7edf\u624d\u80fd\u66f4\u65b0\u9875\u8868\uff0c\u6240\u4ee5\u5206\u9875\u673a\u5236\u63d0\u4f9b\u4e86\u5168\u9762\u7684\u8bbf\u95ee\u4fdd\u62a4\u3002</p> <p>\u5206\u9875\u865a\u62df\u5b58\u50a8\u5668\u610f\u5473\u7740\u6bcf\u6b21\u5b58\u50a8\u5668\u8bbf\u95ee\u5728\u903b\u8f91\u4e0a\u90fd\u8981\u82b1\u8d39\u81f3\u5c11\u4e24\u500d\u7684\u65f6\u95f4\uff0c\u4e00\u6b21\u5b58\u50a8\u5668\u8bbf\u95ee\u7528\u4e8e\u83b7\u53d6\u7269\u7406\u5730\u5740\uff0c\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u7528\u4e8e\u83b7\u53d6\u6570\u636e\u3002\u8fd9\u79cd\u64cd\u4f5c\u6210\u672c\u592a\u9ad8\u4e86\u3002\u89e3\u51b3\u65b9\u6848\u662f\u4f9d\u9760\u5c40\u90e8\u6027\u539f\u7406\u3002\u5982\u679c\u8fd9\u4e9b\u8bbf\u95ee\u5177\u6709\u5c40\u90e8\u6027\uff0c\u90a3\u4e48\u8bbf\u95ee\u64cd\u4f5c\u7684\u5730\u5740\u53d8\u6362(address translation)\u4e5f\u80af\u5b9a\u5177\u6709\u5c40\u90e8\u6027\u3002\u53ea\u8981\u5c06\u8fd9\u4e9b\u5730\u5740\u53d8\u6362\u653e\u5728\u4e00\u4e2a\u7279\u6b8a\u7684\u7f13\u5b58\u4e2d\uff0c\u5b58\u50a8\u5668\u8bbf\u95ee\u5c31\u5f88\u5c11\u9700\u8981\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u64cd\u4f5c\u6765\u53d8\u6362\u5730\u5740\u4e86\u3002\u8fd9\u79cd\u7279\u6b8a\u7684\u5730\u5740\u53d8\u6362\u7f13\u5b58\u88ab\u79f0\u4e3a\u53d8\u6362\u65c1\u8def\u7f13\u51b2\u533a(TLB)\u3002</p> <p>TLB\u6761\u76ee\u7c7b\u4f3c\u4e8e\u7f13\u5b58\u6761\u76ee,\u5176\u4e2d\u7684\u6807\u7b7e\u4fdd\u5b58\u865a\u62df\u5730\u5740\u7684\u4e00\u90e8\u5206,\u6570\u636e\u90e8\u5206\u4fdd\u5b58\u7269\u7406\u9875\u5730\u5740\u4fdd\u62a4\u5b57\u6bb5\u3001\u6709\u6548\u4f4d\uff0c\u901a\u5e38\u8fd8\u6709\u4e00\u4e2a\u4f7f\u7528\u4f4d\u548c\u4e00\u4e2a\u810f\u4f4d(dirty bit)\u3002\u64cd\u4f5c\u7cfb\u7edf\u5728\u6539\u53d8\u8fd9\u4e9b\u4f4d\u65f6\uff0c\u9996\u5148\u6539\u53d8\u9875\u8868\u4e2d\u7684\u503c\uff0c\u7136\u540e\u4f7f\u76f8\u5e94\u7684TLB\u9879\u5931\u6548\u3002\u5f53\u4ece\u9875\u8868\u91cd\u65b0\u8f7d\u5165\u8fd9\u4e2a\u6761\u76ee\u65f6\uff0cTLB \u5373\u83b7\u5f97\u8fd9\u4e9b\u4f4d\u7684\u51c6\u786e\u526f\u672c\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#protection-via-virtual-machines","title":"Protection via Virtual Machines","text":"<p>VM \u4f7f\u7528\u7684ISA\u4e0e\u5176\u5e95\u5c42\u786c\u4ef6\u76f8\u5339\u914d\u3002\u8fd9\u79cd\u865a\u62df\u673a\u79f0\u4e3a(\u64cd\u4f5c)\u7cfb\u7edf\u865a\u62df\u673a(system virtual machine)\u3002</p> <p>\u5728\u4f20\u7edf\u5e73\u53f0\u4e0a\uff0c\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\"\u62e5\u6709\"\u6240\u6709\u786c\u4ef6\u8d44\u6e90\uff0c\u4f46\u5728\u4f7f\u7528\u865a\u62df\u673a\u65f6\uff0c\u591a\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u4e00\u8d77\u5171\u4eab\u786c\u4ef6\u8d44\u6e90\u3002</p> <p>\u4e3a\u865a\u62df\u673a\u63d0\u4f9b\u652f\u6301\u7684\u8f6f\u4ef6\u79f0\u4e3a\u865a\u62df\u673a\u76d1\u89c6\u5668(VMM)\u6216\u7ba1\u7406\u7a0b\u5e8f(hypervisor)\uff0cVMM\u662f\u865a\u62df\u673a\u6280\u672f\u7684\u6838\u5fc3\u3002</p> <p>\u5e95\u5c42\u786c\u4ef6\u5e73\u53f0\u79f0\u4e3a\u5bbf\u4e3b\u673a(host)\uff0c\u5176\u8d44\u6e90\u5728\u5ba2\u6237 VM \u4e4b\u95f4\u5171\u4eab\u3002</p> <p>VMM \u51b3\u5b9a\u4e86\u5982\u4f55\u5c06\u865a\u62df\u8d44\u6e90\u6620\u5c04\u5230\u7269\u7406\u8d44\u6e90:\u7269\u7406\u8d44\u6e90\u53ef\u4ee5\u5206\u65f6\u5171\u4eab\u3001\u5212\u5206\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u8f6f\u4ef6\u5185\u6a21\u62df\u3002VMM \u6bd4\u4f20\u7edf\u64cd\u4f5c\u7cfb\u7edf\u5c0f\u5f97\u591a\uff0cVMM \u7684\u4e00\u4e2a\u9694\u79bb\u90e8\u5206\u5927\u7ea6\u53ea\u6709 10000 \u884c\u4ee3\u7801\u3002</p>"},{"location":"Computer_Science/CA/Chapter2/#requirements-of-a-virtual-machine-monitor","title":"Requirements of a Virtual Machine Monitor","text":"<p>VM \u76d1\u89c6\u5668\u5fc5\u987b\u5b8c\u6210\u54ea\u4e9b\u4efb\u52a1?\u5b83\u5411\u5ba2\u6237\u8f6f\u4ef6\u63d0\u4f9b\u4e00\u4e2a\u8f6f\u4ef6\u63a5\u53e3\uff0c\u5fc5\u987b\u4f7f\u4e0d\u540c\u5ba2\u6237\u8f6f\u4ef6\u7684\u72b6\u6001\u76f8\u4e92\u9694\u79bb\uff0c\u8fd8\u5fc5\u987b\u4fdd\u62a4\u81ea\u5df1\u4ee5\u514d\u53d7\u5ba2\u6237\u8f6f\u4ef6\u7684\u7834\u574f(\u5305\u62ec\u5ba2\u6237\u64cd\u4f5c\u7cfb\u7edf)\u3002</p> <p>\u5b9a\u6027\u9700\u6c42\u5305\u62ec:</p> <ul> <li>\u5ba2\u6237\u8f6f\u4ef6\u5728 VM \u4e0a\u7684\u8fd0\u884c\u60c5\u51b5\u5e94\u5f53\u4e0e\u5728\u539f\u59cb\u786c\u4ef6\u4e0a\u5b8c\u5168\u76f8\u540c\uff0c\u5f53\u7136\uff0c\u4e0e\u6027\u80fd\u76f8\u5173\u7684\u884c\u4e3a\u6216\u8005\u56e0\u4e3a\u591a\u4e2a VM \u5171\u4eab\u56fa\u5b9a\u8d44\u6e90\u6240\u9020\u6210\u7684\u5c40\u9650\u9664\u5916;</li> <li>\u5ba2\u6237\u8f6f\u4ef6\u5e94\u5f53\u4e0d\u80fd\u76f4\u63a5\u4fee\u6539\u5b9e\u9645\u7cfb\u7edf\u8d44\u6e90\u7684\u5206\u914d\u3002</li> </ul> <p>\u4e3a\u4e86\u5b9e\u73b0\u5904\u7406\u5668\u7684\"\u865a\u62df\u5316\"\uff0cVMM \u5fc5\u987b\u63a7\u5236\u51e0\u4e4e\u6240\u6709\u64cd\u4f5c\u2014\u2014\u5bf9\u7279\u6743\u72b6\u6001\u7684\u8bbf\u95ee\u3001\u5730\u5740\u53d8\u6362\u3001I/0\u3001\u5f02\u5e38\u548c\u4e2d\u65ad\uff0c\u5373\u4f7f\u5f53\u524d\u8fd0\u884c\u7684\u5ba2\u6237 VM \u548c\u64cd\u4f5c\u7cfb\u7edf\u53ea\u662f\u4e34\u65f6\u4f7f\u7528\u5b83\u4eec\u4e5f\u662f\u5982\u6b64\u3002</p> <p>\u4e3a\u4e86\u8fdb\u884c\u7ba1\u7406\uff0cVMM \u7684\u7ba1\u7406\u6743\u9650\u5fc5\u987b\u9ad8\u4e8e\u5ba2\u6237 VM ,\u540e\u8005\u901a\u5e38\u4ee5\u7528\u6237\u6a21\u5f0f\u8fd0\u884c\uff1b\u8fd9\u6837\u8fd8\u80fd\u786e\u4fdd\u4efb\u4f55\u7279\u6743\u6307\u4ee4\u7684\u6267\u884c\u90fd\u7531 VMM \u5904\u7406\u3002\u7cfb\u7edf\u865a\u62df\u673a\u7684\u57fa\u672c\u9700\u6c42\u51e0\u4e4e\u4e0e\u4e0a\u8ff0\u5206\u9875\u865a\u62df\u5b58\u50a8\u5668\u7684\u9700\u6c42\u76f8\u540c\u3002</p> <ul> <li>\u81f3\u5c11\u4e24\u79cd\u5904\u7406\u5668\u6a21\u5f0f\uff1a\u7cfb\u7edf\u6a21\u5f0f\u548c\u7528\u6237\u6a21\u5f0f\u3002</li> <li>\u4ec5\u5728\u7cfb\u7edf\u6a21\u5f0f\u4e0b\u53ef\u7528\u7684\u6307\u4ee4\u7684\u4e00\u4e9b\u7279\u6743\u5b50\u96c6\uff0c\u5982\u679c\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u6267\u884c\u5c06\u4f1a\u5bfc\u81f4\u5f02\u5e38\u3002\u6240\u6709\u7cfb\u7edf\u8d44\u6e90\u90fd\u53ea\u80fd\u901a\u8fc7\u8fd9\u4e9b\u6307\u4ee4\u8fdb\u884c\u63a7\u5236\u3002</li> </ul>"},{"location":"Computer_Science/CA/homework/","title":"Homework","text":"<p> \u7ea6 12325 \u4e2a\u5b57  269 \u884c\u4ee3\u7801  11 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 65 \u5206\u949f</p>"},{"location":"Computer_Science/CA/homework/#_1","title":"\u7b2c\u4e00\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/CA/homework/#19","title":"1.9","text":"Question <p>Server farms such as Google and Yahoo! provide enough compute capacity for the highest request rate of the day. Imagine that most of the time these servers operate at only 60% capacity. Assume further that the power does not scale linearly with the load; that is, when the servers are operating at 60% capacity, they consume 90% of maximum power. The servers could be turned off, but they would take too long to restart in response to more load. A new system has been proposed that allows for a quick restart but requires 20% of the maximum power while in this \"barely alive\" state.</p> <p>a. How much power savings would be achieved by turning off 60% of the servers?</p> <p>b. How much power savings would be achieved by placing 60% of the servers in the \"barely alive\" state?</p> <p>c. How much power savings would be achieved by reducing the voltage by 20% and frequency by 40%?</p> <p>d. How much power savings would be achieved by placing 30% of the servers in the \"barely alive\" state and 30% off?</p> answer <p>a. </p> <p>\u5173\u6389 60% \u7684\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u662f 40% \u7684\u670d\u52a1\u5668\u5728\u8fd0\u884c\u3002\u6b64\u65f6\u603b\u529f\u7387\u662f \\(40\\% \\times 90\\% \\times \\text{\u6700\u5927\u529f\u7387} = 36\\% \\times \\text{\u6700\u5927\u529f\u7387}\\)\u3002</p> <p>\u539f\u6765\u7684\u603b\u529f\u7387\u662f \\(100\\% \\times 90\\% \\times \\text{\u6700\u5927\u529f\u7387} = 90\\% \\times \\text{\u6700\u5927\u529f\u7387}\\)\u3002</p> <p>\u8282\u7701\u7684\u529f\u7387\u662f \\(90\\% \\times \\text{\u6700\u5927\u529f\u7387} - 36\\% \\times \\text{\u6700\u5927\u529f\u7387} = 54\\% \\times \\text{\u6700\u5927\u529f\u7387}\\)\u3002</p> <p>\u6240\u4ee5\u8282\u7701\u7684\u6bd4\u4f8b\u4e3a \\(\\frac{54\\% \\times \\text{\u6700\u5927\u529f\u7387}}{90\\% \\times \\text{\u6700\u5927\u529f\u7387}} = 60\\%\\)\u3002</p> <p>b. </p> <p>\\(60\\% \\times 20\\% \\times \\text{\u6700\u5927\u529f\u7387} + 40\\% \\times 90\\% \\times \\text{\u6700\u5927\u529f\u7387} = 48\\%\\)\u3002</p> <p>\u8282\u7701\u7684\u529f\u7387\u4e3a \\(90\\% \\times \\text{\u6700\u5927\u529f\u7387} - 48\\% \\times \\text{\u6700\u5927\u529f\u7387} = 42\\% \\times \\text{\u6700\u5927\u529f\u7387}\\)\u3002</p> <p>\u6240\u4ee5\u8282\u7701\u7684\u6bd4\u4f8b\u4e3a \\(\\frac{42\\% \\times \\text{\u6700\u5927\u529f\u7387}}{90\\% \\times \\text{\u6700\u5927\u529f\u7387}} = 46.67\\%\\)\u3002</p> <p>c. </p> <p>\u6bcf\u4e2a\u6676\u4f53\u7ba1\u6240\u9700\u8981\u7684\u529f\u8017 \\(\\text{\u529f\u8017}_{\\text{\u52a8\u6001}} \\propto \\frac{1}{2} \\times \\text{\u5bb9\u6027\u8d1f\u8f7d} \\times \\text{\u7535\u538b}^2 \\times \\text{\u5f00\u5173\u9891\u7387}\\)</p> <p>80% * 80% * 60% = 38.4%</p> <p>\u6240\u4ee5\u8282\u7701\u4e86 61.6% \u7684\u529f\u8017\u3002</p> <p>d. </p> <p>\\(30\\% \\times 20\\% \\times \\text{\u6700\u5927\u529f\u7387} + 40\\% \\times 90\\% \\times \\text{\u6700\u5927\u529f\u7387} = 42\\%\\)\u3002</p> <p>\u8282\u7701\u7684\u529f\u7387\u4e3a \\(90\\% \\times \\text{\u6700\u5927\u529f\u7387} - 42\\% \\times \\text{\u6700\u5927\u529f\u7387} = 48\\% \\times \\text{\u6700\u5927\u529f\u7387}\\)\u3002</p> <p>\u6240\u4ee5\u8282\u7701\u7684\u6bd4\u4f8b\u4e3a \\(\\frac{48\\% \\times \\text{\u6700\u5927\u529f\u7387}}{90\\% \\times \\text{\u6700\u5927\u529f\u7387}} = 53.33\\%\\)\u3002</p>"},{"location":"Computer_Science/CA/homework/#111-ab","title":"1.11 ab","text":"Question <p>In a server farm such as that used by Amazon or eBay, a single failure does not cause the entire system to crash. Instead, it will reduce the number of requests that can be satisfied at any one time.</p> <p>a. If a company has 10,000 computers, each with an MTTF of 35 days, and it experiences catastrophic failure only if 1/3 of the computers fail, what is the MTTF for the system?</p> <p>b. If it costs an extra $1000, per computer, to double the MTTF, would this be a good business decision? Show your work.</p> answer <p>a. </p> <p>\u5047\u8bbe\u6bcf\u53f0\u670d\u52a1\u5668\u7684\u6545\u969c\u65f6\u95f4\u670d\u4ece\u6307\u6570\u5206\u5e03\uff0c\u6545\u969c\u7387 \\(\\lambda = \\frac{1}{35}\\) \u6bcf\u5929\u3002\u7cfb\u7edf\u5d29\u6e83\u9700\u81f3\u5c11 \\(\\frac{1}{3}\\) \u670d\u52a1\u5668\u6545\u969c\u3002</p> <p>\u603b\u6545\u969c\u8fc7\u7a0b\u4e3a\u6cca\u677e\u8fc7\u7a0b\uff0c\u7cfb\u7edf MTTF \u4e3a\u7b2c \\(\\frac{10000}{3}\\) \u6b21\u6545\u969c\u7684\u671f\u671b\u65f6\u95f4\uff1a</p> \\[\\text{\u7cfb\u7edf}_{MTTF} = \\frac{k}{n\\lambda} = \\frac{\\frac{10000}{3}}{10000 \\times 35} \\approx 11.67 \\text{\u5929}\\] <p>b. </p> <p>\u82e5\u6bcf\u53f0\u670d\u52a1\u5668 MTT F\u7ffb\u500d\u81f3 70 \u5929\uff0c\u5219 \\(\\lambda = \\frac{1}{70}\\)\uff0c\u7cfb\u7edf MTTF \u4e3a\u7b2c \\(\\frac{10000}{3}\\) \u6b21\u6545\u969c\u7684\u671f\u671b\u65f6\u95f4\uff1a</p> \\[\\text{\u7cfb\u7edf}_{MTTF} = \\frac{k}{n\\lambda} = \\frac{\\frac{10000}{3}}{10000 \\times 70} \\approx 23.33 \\text{\u5929}\\] <p>\u603b\u6210\u672c\u589e\u52a0 \\(1000 \\times 10000 = 1000000\\) \u7f8e\u5143\u3002</p> <p>\u5982\u679c\u8bbe\u6bcf\u6b21\u635f\u5931\u6210\u672c\u4e3a \\(X\\) \u800c\u8fd9\u4e00\u6574\u5957\u7cfb\u7edf\u5bff\u547d\u4e3a \\(Y\\) \u90a3\u4e48\u6bcf\u5e74\u53ef\u4ee5\u51cf\u5c11\u7ef4\u4fee \\(\\frac{365}{11.67} - \\frac{365}{23.33} = 15.63\\) \u6b21\u3002</p> <p>\u90a3\u4e48\u53ea\u8981 \\(X \\times Y \\times 15.63\\) &gt; 1000000 \u7f8e\u5143\uff0c\u4e5f\u5373 \\(X \\times Y &gt; 639795\\) \u7f8e\u5143\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51b3\u7b56\u5c31\u662f\u503c\u5f97\u7684\u3002</p>"},{"location":"Computer_Science/CA/homework/#116","title":"1.16","text":"Question <p>When parallelizing an application, the ideal speedup is speeding up by the number of processors. This is limited by two things: percentage of the application that can be parallelized and the cost of communication. Amdahl's Law takes into account the former but not the latter.</p> <p>a. What is the speedup with N processors if 80% of the application is parallelizable, ignoring the cost of communication?</p> <p>b. What is the speedup with eight processors if, for every processor added, the communication overhead is 0.5% of the original execution time.</p> <p>c. What is the speedup with eight processors if, for every time the number of processors is doubled, the communication overhead is increased by 0.5% of the original execution time?</p> <p>d. What is the speedup with N processors if, for every time the number of processors is doubled, the communication overhead is increased by 0.5% of the original execution time?</p> <p>e. Write the general equation that solves this question: What is the number of processors with the highest speedup in an application in which P% of the original execution time is parallelizable, and, for every time the number of processors is doubled, the communication is increased by 0.5% of the original execution time?</p> answer <p>a. </p> <p>\u52a0\u901f\u540e\u662f\u539f\u6765\u7684 \\(20\\% + \\frac{80\\%}{N}\\)</p> <p>\u6240\u4ee5\u52a0\u901f\u6bd4\u662f \\(\\frac{1}{20\\% + \\frac{80\\%}{N}}\\)</p> <p>b. </p> <p>\u52a0\u901f\u540e\u662f\u539f\u6765\u7684 \\(S = 20\\% + \\frac{80\\%}{8} + 0.5\\% \\times (8 - 1) = 33.5\\%\\)</p> <p>\u6240\u4ee5\u52a0\u901f\u6bd4\u662f \\(\\frac{1}{33.5\\%} = 2.985\\)</p> <p>c.</p> <p>\u52a0\u901f\u540e\u662f\u539f\u6765\u7684 \\(S = 20\\% + \\frac{80\\%}{8} + 0.5\\% \\times log_2(8) = 31.5\\%\\)</p> <p>\u6240\u4ee5\u52a0\u901f\u6bd4\u662f \\(\\frac{1}{31.5\\%} = 3.1746\\)</p> <p>d. </p> <p>\u52a0\u901f\u540e\u662f\u539f\u6765\u7684 \\(S = 20\\% + \\frac{80\\%}{N} + 0.5\\% \\times log_2(N)\\)</p> <p>\u6240\u4ee5\u52a0\u901f\u6bd4\u662f \\(\\frac{1}{20\\% + \\frac{80\\%}{N} + 0.5\\% \\times log_2(N)}\\)</p> <p>e. </p> <p>\u603b\u65f6\u95f4\u662f \\(T = (1 - P)\\% + \\frac{P\\%}{N} + 0.5\\% \\times log_2(N)\\)</p> <p>\u90a3\u4e48\u6c42\u89e3 \\(\\frac{\\mathrm{d}T}{\\mathrm{d}N} = 0\\) \u53ef\u4ee5\u5f97\u5230</p> \\[N = \\frac{P\\% \\times ln2}{0.5\\%}\\]"},{"location":"Computer_Science/CA/homework/#_2","title":"\u7b2c\u4e8c\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/CA/homework/#217","title":"2.17","text":"Question <p>The following questions investigate the impact of small and simple caches using CACTI and assume a 65 nm (0.065 ms) technology. (CACTI is available in an online form at.)</p> <p>a. Compare the access times of 64 KB caches with 64-byte blocks and a single bank. What are the relative access times of two-way and four-way set associative caches compared to a direct mapped organization?</p> <p>b. Compare the access times of four-way set associative caches with 64-byte blocks and a single bank. What are the relative access times of 32 and 64 KB caches compared to a 16 KB cache?</p> <p>c. For a 64 KB cache, find the cache associativity between 1 and 8 with the lowest average memory access time given that misses per instruction for a certain workload suite is 0.00664 for direct-mapped, 0.00366 for two-way set associative, 0.000987 for four-way set associative, and 0.000266 for eight-way set associative cache. Overall, there are 0.3 data references per instruction. Assume cache misses take 10 ns in all models. To calculate the hit time in cycles, assume the cycle time output using CACTI, which corresponds to the maximum frequency a cache can operate without any bubbles in the pipeline.</p> answer <p>a. \u7531 CACTI \u6a21\u62df\u7ed3\u679c \u5f97\u5230</p> <p>a direct mapped organization : 0.86 ns</p> <p>a two-way set associative organization : 1.12 ns</p> <p>a four-way set associative organization : 1.37 ns</p> <p>relatively, the access time</p> \\[\\frac{\\text{two-way}}{\\text{direct mapped}} = \\frac{1.12}{0.86} = 1.30 \\ ns\\] \\[\\frac{\\text{four-way}}{\\text{direct mapped}} = \\frac{1.37}{0.86} = 1.59 \\ ns\\] <p>b. \u7531 CACTI \u6a21\u62df\u7ed3\u679c \u5f97\u5230</p> <p>a 16 KB direct-mapped organization : 1.27 ns</p> <p>a 32 KB two-way set associative organization : 1.35 ns</p> <p>a 64 KB four-way set associative organization : 1.37 ns</p> <p>relatively, the access time</p> \\[\\frac{\\text{two-way}}{\\text{direct mapped}} = \\frac{1.35}{1.27} = 1.06 \\ ns\\] \\[\\frac{\\text{four-way}}{\\text{direct mapped}} = \\frac{1.37}{1.27} = 1.08 \\ ns\\] <p>c. </p> <p>\u5148\u8ba1\u7b97\u7f3a\u5931\u7387</p> \\[\\text{direct mapped} = \\frac{0.00664}{0.3} \\approx 2.21\\%\\] \\[\\text{two-way} = \\frac{0.00366}{0.3} \\approx 1.22\\%\\] \\[\\text{four-way} = \\frac{0.000987}{0.3} \\approx 3.29\\%\\] \\[\\text{eight-way} = \\frac{0.000266}{0.3} \\approx 0.09\\%\\] <p>\u518d\u628a\u547d\u4e2d\u65f6\u95f4\u8f6c\u6362\u6210\u5468\u671f\uff08\u5468\u671f\u8981\u5411\u4e0a\u53d6\u6574\uff09</p> \\[\\text{direct mapped} = \\lceil \\frac{0.86}{0.5} \\rceil = 2 \\ ns\\] \\[\\text{two-way} = \\lceil \\frac{1.12}{0.5} \\rceil = 3\\ ns\\] \\[\\text{four-way} = \\lceil \\frac{1.37}{0.83} \\rceil = 2 \\ ns\\] \\[\\text{eight-way} = \\lceil \\frac{2.03}{0.79} \\rceil = 3 \\ ns\\] <p>\u518d\u628a miss penalty \u8f6c\u6362\u6210\u5468\u671f\uff08\u5468\u671f\u8981\u5411\u4e0a\u53d6\u6574\uff09</p> \\[\\text{direct mapped} = \\lceil \\frac{10}{0.5} \\rceil = 20 \\ ns\\] \\[\\text{two-way} = \\lceil \\frac{10}{0.5} \\rceil = 20 \\ ns\\] \\[\\text{four-way} = \\lceil \\frac{10}{0.83} \\rceil = 13 \\ ns\\] \\[\\text{eight-way} = \\lceil \\frac{10}{0.79} \\rceil = 13 \\ ns\\] <p>\u6700\u540e\u8ba1\u7b97 AMAT</p> \\[AMAT = \\text{hit time} + \\text{miss rate} \\times \\text{miss penalty}\\] <ol> <li> <p>\u76f4\u63a5\u6620\u5c04 \\(((1 - 2.21\\%) \\times 2 + 2.21\\% \\times 20 ) \\times 0.5 \\approx 1.20 \\ ns\\)</p> </li> <li> <p>\u4e24\u8def \\(((1 - 1.22\\%) \\times 3 + 1.22\\% \\times 20 ) \\times 0.5 \\approx 1.59 \\ ns\\)</p> </li> <li> <p>\u56db\u8def \\(((1 - 3.29\\%) \\times 2 + 3.29\\% \\times 13 ) \\times 0.83 \\approx 1.96 \\ ns\\)</p> </li> <li> <p>\u516b\u8def \\(((1 - 0.09\\%) \\times 3 + 0.09\\% \\times 13 ) \\times 0.79 \\approx 2.38 \\ ns\\)</p> </li> </ol> <p>\u76f4\u63a5\u6620\u5c04\u7684 cache \u7684 AMAT \u6700\u5c0f</p>"},{"location":"Computer_Science/CA/homework/#218","title":"2.18","text":"Question <p>You are investigating the possible benefits of a way-predicting L1 cache. Assume that a 64 KB four-way set associative single-banked L1 data cache is the cycle time limiter in a system. For an alternative cache organization, you are considering a way-predicted cache modeled as a 64 KB direct-mapped cache with 80% prediction accuracy. Unless stated otherwise, assume that a mispredicted way access that hits in the cache takes one more cycle. Assume the miss rates and the miss penalties in question 2.8 part (c).</p> <p>a. What is the average memory access time of the current cache (in cycles) versus the way-predicted cache?</p> <p>b. If all other components could operate with the faster way-predicted cache cycle time (including the main memory), what would be the impact on performance from using the way-predicted cache?</p> <p>c. Way-predicted caches have usually been used only for instruction caches that feed an instruction queue or buffer. Imagine that you want to try out way prediction on a data cache. Assume that you have 80% prediction accuracy and that subsequent operations (e.g., data cache access of other instructions, dependent operations) are issued assuming a correct way prediction. Thus a way misprediction necessitates a pipe flush and replay trap, which requires 15 cycles. Is the change in average memory access time per load instruction with data cache way prediction positive or negative, and how much is it?</p> <p>d. As an alternative to way prediction, many large associative L2 caches serialize tag and data access so that only the required dataset array needs to be activated. This saves power but increases the access time. Use CACTI's detailed web interface for a 0.065 m process 1 MB four-way set associative cache with 64-byte blocks, 144 bits read out, 1 bank, only 1 read/write port, 30 bit tags, and ITRS-HP technology with global wires. What is the ratio of the access times for serializing tag and data access compared to parallel access?</p> answer <p>a. current cache</p> \\[AMAT = (\\lceil \\frac{1.37}{0.83} \\rceil \\times (1 - 0.33\\%) + 0.33\\% \\times \\lceil \\frac{10}{0.83} \\rceil) \\times 0.83 \\approx 1.69 \\ ns\\] <p>way-predicted cache</p> \\[AMAT = ((\\lceil \\frac{0.86}{0.5} \\rceil \\times 80\\% + (\\lceil \\frac{0.86}{0.5} \\rceil + 1) \\times 20 \\% ) \\times (1 - 0.33\\%) + 0.33\\% \\times \\lceil \\frac{10}{0.5} \\rceil) \\times 0.5 \\approx 1.13 \\ ns\\] <p>b. </p> <p>the max frequency of the four-way set associative cache \\(\\frac{1}{0.83} \\approx 1.20 GHz\\)</p> <p>the max frequency of the way-predicted cache \\(\\frac{1}{0.5} \\approx 2.00 GHz\\)</p> <p>the ratio of the access times is $ \\frac{2.00}{1.20} \\approx 1.67$</p> <p>c. </p> <p>way-predicted cache</p> \\[AMAT = ((\\lceil \\frac{0.86}{0.5} \\rceil \\times 80\\% + 15 \\times 20 \\% ) \\times (1 - 0.33\\%) + 0.33\\% \\times \\lceil \\frac{10}{0.5} \\rceil) \\times 0.5 \\approx 2.33 \\ ns\\] <p>so, negative</p> <p>the ratio is \\(\\frac{1.69}{2.33} \\approx 0.73\\)</p> <p>d.</p> <p>Parallel access: Tags and data are read at the same time with an access time of 1.59 ns.</p> <p>Serial access: read the tag first, hit and then read the data, and the access time is 2.4 ns.</p> <p>the ratio is \\(\\frac{2.4}{1.59} \\approx 1.51\\)</p>"},{"location":"Computer_Science/CA/homework/#226","title":"2.26","text":"Question <p>The ways of a set can be viewed as a priority list, ordered from high priority to low priority. Every time the set is touched, the list can be reorganized to change block priorities. With this view, cache management policies can be decomposed into three sub-policies: Insertion, Promotion, and Victim Selection. Insertion defines where newly fetched blocks are placed in the priority list. Promotion defines how a block\u2019s position in the list is changed every time it is touched (a cache hit). Victim Selection defines which entry of the list is evicted to make room for a new block when there is a cache miss.</p> <p>a. Can you frame the LRU cache policy in terms of the Insertion, Promotion, and Victim Selection sub-policies?</p> <p>b. Can you define other Insertion and Promotion policies that may be competitive and worth exploring further?</p> answer <p>a.</p> <p>Insertion: </p> <p>The newly acquired block is inserted into the head of the priority list (the highest priority position).</p> <p>Promotion:</p> <p>Whenever a block is hit (accessed), it is immediately moved to the head of the priority list.</p> <p>Victim Selection:</p> <p>When it's time to retire, select the tail of the priority list (the block that hasn't been visited for the longest time).</p> <p>b.</p> <p>Insertion:</p> <ol> <li>A new block is inserted in the middle of the priority list or the penultimate bit.</li> <li>Adjust the insertion position based on the block type or prefetch information. The prefetched data is inserted near the tail. Hot data is inserted directly into the head.</li> </ol> <p>Promotion:</p> <ol> <li>After each hit, the block moves forward by a fixed step.</li> <li>Adjust the lift based on the cumulative number of visits to the block.</li> <li>Raised to the head only with multiple hits in a short period of time.</li> </ol> <p>Victim Selection:</p> <p>No need to change.</p>"},{"location":"Computer_Science/CA/homework/#227","title":"2.27","text":"Question <p>In a processor that is running multiple programs, the last-level cache is typically shared by all the programs. This leads to interference, where one program's behavior and cache footprint can impact the cache available to other programs. First, this is a problem from a quality-of-service (QoS) perspective, where the interference leads to a program receiving fewer resources and lower performance than promised, say by the operator of a cloud service. Second, this is a problem in terms of privacy. Based on the interference it sees, a program can infer the memory access patterns of other programs. This is referred to as a timing channel, a form of information leakage from one program to others that can be exploited to compromise data privacy or to reverse-engineer a competitor's algorithm. What policies can you add to your last-level cache so that the behavior of one program is immune to the behavior of other programs sharing the cache?</p> answer <p>\u5728\u591a\u7a0b\u5e8f\u5171\u4eabLLC\u7684\u573a\u666f\u4e2d\uff0c\u4ee5\u4e0b\u4e24\u79cd\u95ee\u9898\u5c24\u4e3a\u7a81\u51fa\uff1a</p> <ol> <li> <p>\u670d\u52a1\u8d28\u91cf\uff08QoS\uff09\u95ee\u9898\uff1a\u67d0\u4e2a\u7a0b\u5e8f\u5360\u7528\u8fc7\u591a\u7f13\u5b58\u8d44\u6e90\uff0c\u5bfc\u81f4\u5176\u4ed6\u7a0b\u5e8f\u65e0\u6cd5\u8fbe\u5230\u6027\u80fd\u627f\u8bfa\u3002</p> </li> <li> <p>\u9690\u79c1\u6cc4\u9732\u95ee\u9898\uff1a\u901a\u8fc7\u7f13\u5b58\u8bbf\u95ee\u7684\u65f6\u95f4\u5dee\u5f02\uff08\u65f6\u95f4\u901a\u9053\uff09\uff0c\u63a8\u65ad\u5176\u4ed6\u7a0b\u5e8f\u7684\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f\uff0c\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u6cc4\u9732\u6216\u7b97\u6cd5\u9006\u5411\u5de5\u7a0b\u3002</p> </li> </ol> <p>\u89e3\u51b3\u65b9\u6848\uff1a\u7f13\u5b58\u7b56\u7565\u8bbe\u8ba1</p> <ol> <li> <p>\u7f13\u5b58\u5206\u533a\uff0c\u5c06\u7f13\u5b58\u5212\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u533a\u57df\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u72ec\u5360\u4e00\u90e8\u5206\u3002\u53ef\u4ee5\u662f\u9884\u5148\u56fa\u5b9a\u5206\u914d\u6bcf\u4e2a\u7a0b\u5e8f\u7684\u7f13\u5b58 way \u6570\u91cf\uff0c\u6216\u8005\u6839\u636e\u7a0b\u5e8f\u884c\u4e3a\u52a8\u6001\u8c03\u6574\u5206\u914d\u3002</p> </li> <li> <p>\u914d\u989d\u7ba1\u7406\uff0c\u9650\u5236\u6bcf\u4e2a\u7a0b\u5e8f\u53ef\u5360\u7528\u7684\u7f13\u5b58\u5757\u6570\u91cf\u3002</p> </li> <li> <p>\u66ff\u6362\u7b56\u7565\u4f18\u5316\uff0c\u6bd4\u5982\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u72ec\u7acb\u7ef4\u62a4\u66ff\u6362\u961f\u5217\uff0c\u4ec5\u5728\u672c\u7a0b\u5e8f\u5206\u914d\u7684\u7f13\u5b58\u533a\u57df\u5185\u6dd8\u6c70\u3002</p> </li> <li> <p>\u4f7f\u7528\u7a0b\u5e8f\u72ec\u6709\u7684\u5bc6\u94a5\u751f\u6210\u7f13\u5b58\u7d22\u5f15\uff0c\u4f7f\u5176\u4ed6\u7a0b\u5e8f\u65e0\u6cd5\u901a\u8fc7\u5730\u5740\u63a8\u65ad\u7f13\u5b58\u4f4d\u7f6e\uff0c\u7528\u4e8e\u5b9e\u73b0\u5b9e\u73b0\u5730\u5740\u6df7\u6dc6\u3002</p> </li> </ol>"},{"location":"Computer_Science/CA/homework/#228","title":"2.28","text":"Question <p>A large multimegabyte L3 cache can take tens of cycles to access because of the long wires that have to be traversed. For example, it may take 20 cycles to access a 16 MB L3 cache. Instead of organizing the 16 MB cache such that every access takes 20 cycles, we can organize the cache so that it is an array of smaller cache banks. Some of these banks may be closer to the processor core, while others may be further. This leads to nonuniform cache access (NUCA), where 2 MB of the cache may be accessible in 8 cycles, the next 2 MB in 10 cycles, and so on until the last 2 MB is accessed in 22 cycles. What new policies can you introduce to maximize performance in a NUCA cache?</p> answer <ol> <li> <p>Record the frequency of access or the most recent access time for each cache block. Blocks of high-frequency access are gradually migrated to the nearest bank. Blocks that have not been accessed within the period are migrated to the remote bank to free up near-end space.</p> </li> <li> <p>Each bank maintains the tags of the local block, reducing the delay of global tag lookup. Send requests to multiple banks at the same time and take advantage of physical distribution to reduce response times.</p> </li> </ol>"},{"location":"Computer_Science/CA/homework/#232","title":"2.32","text":"Question <p>You are provisioning a server with eight-core 3 GHz CMP that can execute a workload with an overall CPI of 2.0 (assuming that L2 cache miss refills are not delayed). The L2 cache line size is 32 bytes. Assuming the system uses DDR2-667 DIMMs, how many independent memory channels should be provided so the system is not limited by memory bandwidth if the bandwidth required is sometimes twice the average? The workloads incur, on average, 6.67 L2 misses per 1 K instructions.</p> answer \\[\\text{\u6307\u4ee4\u541e\u5410\u91cf} = \\frac{\\text{\u6838\u5fc3\u6570} \\times \\text{\u9891\u7387}}{\\text{CPI}} = \\frac{8 \\times 3 \\times 10^9}{2.0} = 12 \\times 10^9\\ \\text{\u6307\u4ee4/\u79d2}\\] \\[\\text{\u5e73\u5747L2\u672a\u547d\u4e2d\u6b21\u6570/\u79d2} = 12 \\times 10^9\\ \\text{\u6307\u4ee4/\u79d2} \\times \\frac{6.67}{1000} = 8 \\times 10^7\\ \\text{\u6b21/\u79d2}\\] \\[\\text{\u5e73\u5747\u5e26\u5bbd} = 8 \\times 10^7\\ \\text{\u6b21/\u79d2} \\times 32\\ \\text{\u5b57\u8282/\u6b21} = 2560\\ \\text{MB/\u79d2}\\] \\[\\text{\u5cf0\u503c\u5e26\u5bbd} = 2 \\times 2560\\ \\text{MB/\u79d2} = 5120\\ \\text{MB/\u79d2}\\] <p>\u7531 DDR2-667 DIMMs :</p> \\[\\text{\u5e26\u5bbd} = 667 \\times 10^6\\ \\text{\u6b21/\u79d2} \\times 8\\ \\text{\u5b57\u8282/\u6b21} = 5336\\ \\text{MB/\u79d2} &gt; 5120\\ \\text{MB/\u79d2}\\] <p>So, one memory channel is enough.</p>"},{"location":"Computer_Science/CA/homework/#233","title":"2.33","text":"Question <p>Consider a processor that has four memory channels. Should consecutive memory blocks be placed in the same bank, or should they be placed in different banks on different channels?</p> answer <p>In a four-channel memory system, the placement strategy for contiguous memory blocks needs to weigh row buffer hits (low latency) with parallel access (high throughput).</p> <p>be placed in the same bank: </p> <p>After the first access to the active row, subsequent visits directly read the row buffer to reduce latency. But, sequential requests need to be processed serially, and multi-channel parallelism cannot be leveraged. And if continuous access is intensive, the channel bandwidth utilization is low.</p> <p>be placed in different banks on different channels:</p> <p>Requests from different channels/banks can be processed at the same time, improving throughput, which take advantage of multi-channel parallelism and make it suitable for burst access. And each visit may require the activation of a new line, adding a single delay.</p> <p>In summary, in a four-channel memory system, sequential memory blocks should be distributed across different channels and banks. Although each access may face latency from row buffer misses, the overall throughput and system performance by processing multiple requests in parallel can result in significant overall throughput and system performance, especially for high-concurrency workloads.</p>"},{"location":"Computer_Science/CA/homework/#236","title":"2.36","text":"Question <p>Whenever a computer is idle, we can either put it in standby (where DRAM is still active) or we can let it hibernate. Assume that, to hibernate, we have to copy just the contents of DRAM to a nonvolatile medium such as Flash. If reading or writing a cache line of size 64 bytes to Flash requires 2.56 \\(\\mu\\) J and DRAM requires 0.5 nJ, and if idle power consumption for DRAM is 1.6 W (for 8 GB), how long should a system be idle to benefit from hibernating? Assume a main memory of size 8 GB.</p> answer <p>8 GB = 8 * \\(2^{30}\\) bytes = \\(2^{33}\\) bytes = \\(2^{27}\\) cache lines</p> <p>\u8bfb + \u5199\u4e00\u6b21\u7684\u603b\u529f\u8017\u662f\u4e00\u6b21 flash \u7684\u80fd\u8017 \\(2 \\times 2.56 \\ J\\) = 5.12 J</p> <p>\u5f85\u673a\u529f\u8017 1.6 W = 1.6 J/s</p> <p>\\(\\therefore \\ t = \\frac{2^{27} \\times 5.12 \\ \\mu J}{1.6 \\ J/s} \\approx 429.50 \\ s\\)</p> <p>When the system is idle for more than 429.50 seconds, sleep is more energy-efficient than standby.</p>"},{"location":"Computer_Science/CA/homework/#237","title":"2.37","text":"Question <p>Virtual machines (VMs) have the potential for adding many beneficial capabilities to computer systems, such as improved total cost of ownership (TCO) or availability. Could VMs be used to provide the following capabilities? If so, how could they facilitate this?</p> <p>a. Test applications in production environments using development machines?</p> <p>b. Quick redeployment of applications in case of disaster or failure?</p> <p>c. Higher performance in I/O-intensive applications?</p> <p>d. Fault isolation between different applications, resulting in higher availability for services?</p> <p>e. Performing software maintenance on systems while applications are running without significant interruption?</p> answer <p>a. Yes. Create a virtual machine (such as an operating system, dependent libraries, and network settings) on the development machine that is consistent with the configuration of the production environment, and deploy the application to be tested on the VM for testing.</p> <p>b. Yes. Package the application and its runtime environment as a virtual machine image and load the image on the standby hardware to boot the virtual machine for rapid recovery.</p> <p>c. No. The hypervisor needs to intercept I/O requests, resulting in additional context switching and latency.</p> <p>d. Yes. Each application runs on an independent virtual machine, allocating exclusive CPU, memory, and disk resources. A single VM crash or resource exhaustion does not affect other VMs.</p> <p>e. Yes. Migrate running virtual machines from one physical host to another without service interruption.</p>"},{"location":"Computer_Science/CA/homework/#238","title":"2.38","text":"Question <p>Virtualmachines canlose performance froma number of events, such as the execution of privileged instructions, TLB misses, traps, and I/O. These events are usually handled in system code. Thus one way of estimating the slowdown when running under a VM is the percentage of application execution time in system versus user mode. For example, an application spending 10% of its execution in system mode might slow down by 60% when running on a VM. Figure 2.35 lists the early performance of various system calls under native execution, pure virtualization, and paravirtualization for LMbench using Xen on an Itanium system with times measured in microseconds (courtesy of Matthew Chapman of the University of New South Wales).</p> <p>a. What types of programs would be expected to have smaller slowdowns when running under VMs?</p> <p>b. If slowdowns were linear as a function of system time, given the preceding slowdown, how much slower would a program spending 20% of its execution in system time be expected to run?</p> <p>c. What is the median slowdown of the system calls in the table above under pure virtualization and paravirtualization?</p> <p>d. Which functions in the table above have the largest slowdowns? What do you think the cause of this could be?</p> Benchmark Native Pure Para Null call 0.04 0.96 0.50 Null I/O 0.27 6.32 2.91 Stat 1.10 10.69 4.14 Open/close 1.99 20.43 7.71 Install signal handler 0.33 7.34 2.89 Handle signal 1.69 19.26 2.36 Fork 56.00 513.00 164.00 Exec 316.00 2084.00 578.00 Fork + exec sh 1451.00 7790.00 2360.00 <p>Figure 2.35 Early performance of various system calls under native execution, pure virtualization, and paravirtualization.</p> answer <p>a. \u8ba1\u7b97\u5bc6\u96c6\u578b\uff08\u5927\u90e8\u5206\u65f6\u95f4\u6267\u884c\u7528\u6237\u6001\u6307\u4ee4\uff09\u3001\u5185\u5b58\u5de5\u4f5c\u96c6\u5c0f\uff08\u51cf\u5c11\u56e0\u865a\u62df\u5185\u5b58\u7ba1\u7406\u5bfc\u81f4\u7684\u6027\u80fd\u635f\u5931\uff09\u3001\u4e14\u8f83\u5c11\u8fdb\u884cI/O\u6216\u7cfb\u7edf\u8c03\u7528\u7684\u7a0b\u5e8f\u3002</p> <p>b. According to \"an application spending 10% of its execution in system mode might slow down by 60% when running on a VM.\"</p> \\[60 \\% \\times \\frac{20 \\%}{10 \\%} = 120 \\%\\] <p>so the total times is \\(100\\% + 120\\% = 220\\%\\).</p> <p>c. </p> Benchmark \u7eaf\u865a\u62df\u5316\u51cf\u901f\u6bd4 \u534a\u865a\u62df\u5316\u51cf\u901f\u6bd4 Null call 0.96/0.04 = 24 0.50/0.04 = 12.5 Null I/O 6.32/0.27 \\(\\approx\\) 23.41 2.91/0.27 \\(\\approx\\) 9.67 Stat 10.69/1.10 \\(\\approx\\) 9.72 4.14/1.10 \\(\\approx\\) 3.76 Open/close 20.43/1.99 \\(\\approx\\) 10.27 7.71/1.99 \\(\\approx\\) 3.87 Install signal 7.34/0.33 \\(\\approx\\) 22.24 2.89/0.33 \\(\\approx\\) 8.76 Handle signal 19.26/1.69 \\(\\approx\\) 11.40 2.36/1.69 \\(\\approx\\) 1.40 Fork 513/56 \\(\\approx\\) 9.16 164/56 \\(\\approx\\) 2.93 Exec 2084/316 \\(\\approx\\) 6.59 578/316 \\(\\approx\\) 1.83 Fork + exec sh 7790/1451 \\(\\approx\\) 5.37 2360/1451 \\(\\approx\\) 1.63 <p>\u6392\u5e8f\u540e\u5f97\u5230:\u7eaf\u865a\u62df\u5316\u4e2d\u4f4d\u51cf\u901f\u6bd4\u4e3a 10.27\uff0c\u534a\u865a\u62df\u5316\u4e2d\u4f4d\u51cf\u901f\u6bd4\u4e3a 3.76\u3002</p> <p>d. Null call and Null I/O, because they have no actual work, the virtualization overhead is very high.</p>"},{"location":"Computer_Science/CA/homework/#241","title":"2.41","text":"Question <p>Since instruction-level parallelism can also be effectively exploited on in-order superscalar processors and very long instruction word (VLIW) processors with speculation, one important reason for building an out-of-order (OOO) superscalar processor is the ability to tolerate unpredictable memory latency caused by cache misses. Thus you can think about hardware supporting OOO issue as being part of the memory system. Look at the floorplan of the Alpha 21264 in Figure 2.36 to find the relative area of the integer and floating-point issue queues and mappers versus the caches. The queues schedule instructions for issue, and the mappers rename register specifiers. Therefore these are necessary additions to support OOO issue. The 21264 only has L1 data and instruction caches on chip, and they are both 64 KB two-way set associative. Use an OOO superscalar simulator such as SimpleScalar on memory-intensive benchmarks to find out how much performance is lost if the area of the issue queues and mappers is used for additional L1 data cache area in an in-order superscalar processor, instead of OOO issue in a model of the 21264. Make sure the other aspects of the machine are as similar as possible to make the comparison fair. Ignore any increase in access or cycle time from larger caches and effects of the larger data cache on the floorplan of the chip. (Note that this comparison will not be totally fair, as the code will not have been scheduled for the in-order processor by the compiler.)</p> <p></p> <p>Figure 2.36 Floorplan of the Alpha 21264 [Kessler 1999].</p> answer <ol> <li>\u5047\u8bbe Issue Queues \u548c Mappers \u7684\u9762\u79ef\u5360\u82af\u7247\u603b\u903b\u8f91\u9762\u79ef\u7684 15%\u3002\u5c06 15% \u7684\u9762\u79ef\u7528\u4e8e\u6269\u5927 L1 \u6570\u636e\u7f13\u5b58\uff0c\u5047\u8bbe\u9762\u79ef\u4e0e\u5bb9\u91cf\u7ebf\u6027\u76f8\u5173\uff0c\u5219\u65b0\u7f13\u5b58\u5bb9\u91cf\u4e3a\uff1a  </li> </ol> \\[64\\ \\text{KB} \\times \\left(1 + \\frac{15\\%}{\\text{\u539f\u7f13\u5b58\u9762\u79ef\u5360\u6bd4}}\\right)\\] <p>\u82e5\u539f\u7f13\u5b58\u9762\u79ef\u5360\u6bd4\u4e3a20%\uff0c\u5219\u65b0\u5bb9\u91cf\u4e3a\uff1a  </p> \\[64\\ \\text{KB} \\times \\left(1 + \\frac{15\\%}{20\\%}\\right) = 64 \\times 1.75 = 112\\ \\text{KB}.\\] <ol> <li>for OOO L1 cache \uff1a64 KB\uff0c2-way\u3002</li> </ol> <p>for In-Order L1 cache \uff1a112 KB  </p> <ol> <li>\u5047\u8bbe\u6a21\u62df\u7ed3\u679c\uff1a</li> </ol> \u914d\u7f6e IPC L1\u7f3a\u5931\u7387 \u6267\u884c\u65f6\u95f4\uff08\u79d2\uff09 \u4e71\u5e8f\uff0864 KB\uff09 2.0 5% 100 \u987a\u5e8f\uff08112 KB\uff09 1.5 3% 133 <ol> <li></li> </ol> \\[\\text{\u6027\u80fd\u635f\u5931} = \\frac{133 - 100}{100} \\times 100\\% = 33\\%\\]"},{"location":"Computer_Science/CA/homework/#_3","title":"\u7b2c\u4e09\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/CA/homework/#37","title":"3.7","text":"Question <p>Computers spend most of their time in loops, so multiple loop iterations are great places to speculatively find more work to keep CPU resources busy. Nothing is ever easy, though; the compiler emitted only one copy of that loop's code, so even though multiple iterations are handling distinct data, they will appear to use the same registers. To keep multiple iterations' register usages from colliding, we rename their registers. Figure 3.48 shows example code that we would like our hardware to rename. A compiler could have simply unrolled the loop and used different registers to avoid conflicts, but if we expect our hardware to unroll the loop, it must also do the register renaming. How? Assume your hardware has a pool of temporary registers (call them T registers, and assume that there are 64 of them, T0 through T63) that it can substitute for those registers designated by the compiler. This rename hardware is indexed by the src (source) register designation, and the value in the table is the T register of the last destination that targeted that register. (Think of these table values as producers, and the src registers are the consumers; it doesn't much matter where the producer puts its result as long as its consumers can find it.) Consider the code sequence in Figure 3.48. Every time you see a destination register in the code, substitute the next available T, beginning with T9. Then update all the src registers accordingly, so that true data dependences are maintained. Show the resulting code. (Hint: see Figure 3.49.)</p> <p></p> answer <pre><code>Loop:\n\n    fld   T9,0(Rx)\n\n    fmul.d T10,f0,T9\n\n    fdiv.d T11,f0,T9\n\n    fld   T12,0(Ry)\n\n    fadd.d T13,f0,T12\n\n    fadd.d T14,T11,T9\n\n    sd    T12,0(Ry)\n</code></pre>"},{"location":"Computer_Science/CA/homework/#38","title":"3.8","text":"Question <p>Exercise 3.7 explored simple register renaming: when the hardware register renamer sees a source register, it substitutes the destination T register ofthe last instruction to have targeted that source register, When the rename table sees a destination register, it substitutes the next available T for it, but superscalar designs need to handle multiple instructions per clock cycle at every stage in the machine, including the register renaming. A simple scalar processor would therefore look up both src register mappings for each instruction and allocate a new dest mapping per clock cycle. Superscalar processors must be able to do that as well, but they must also ensure that any dest-to-src relationships between the two concurrent instructions are handled correctly. Consider the sample codesequence in Figure 3.5l. Assume that we would like to simultaneously renamethe first two instructions. Further assume that the next two available T registers to be used are known at the beginning of the clock cycle in which these two instructions are being renamed. Conceptually, what we want is for the first instruction to do its rename table lookups and then update the table per its destination's T register. Then the second instruction would do exactly the same thing, and any interinstruction dependency would thereby be handled correctly. But there's not enough time to write that T register designation into the renaming table and then look it up again for the second instruction, all in the same clock cycle. That register substitution must instead be done live (in parallel with the register rename table update). Figure 3.52 shows a circuit diagram, using multiplexers and comparators, that will accomplish the necessary on-the-fly register renaming. Your task is to show the cycle-by-cycle state of the rename table for every instructionof the code shown in Figure 3.5l. Assume the table starts out with every entry equal to its index(T0 = 0; T1 = 1,...).</p> <p></p> answer <p>\u5bf9\u4e8e\u7535\u8def\u56fe\u7684\u89e3\u91ca\uff1a</p> <ol> <li>\u6838\u5fc3\u95ee\u9898: \u5c31\u50cf\u524d\u9762\u89e3\u91ca\u7684\uff0c\u8d85\u6807\u91cf\u5904\u7406\u5668\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u540c\u65f6\u5904\u7406\uff08\u6bd4\u5982\u91cd\u547d\u540d\uff09\u591a\u6761\u6307\u4ee4\u3002\u5982\u679c\u7d27\u8ddf\u7740\u7684\u4e24\u6761\u6307\u4ee4\u5b58\u5728\u4f9d\u8d56\uff08\u4f8b\u5982\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u8ba1\u7b97\u4e00\u4e2a\u7ed3\u679c\u5e76\u5199\u5165\u5bc4\u5b58\u5668 F1\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u9700\u8981\u8bfb\u53d6\u5bc4\u5b58\u5668 F1\uff09\uff0c\u90a3\u4e48\u5728\u540c\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u9700\u8981\u77e5\u9053 F1 \u88ab\u91cd\u547d\u540d\u6210\u4e86\u54ea\u4e2a\u65b0\u7684 T \u5bc4\u5b58\u5668\uff0c\u624d\u80fd\u6b63\u786e\u83b7\u53d6\u5230\u7b2c\u4e00\u6761\u6307\u4ee4\u5373\u5c06\u4ea7\u751f\u7684\u7ed3\u679c\u3002\u7b80\u5355\u7684\"\u5148\u67e5\u8868\u3001\u518d\u66f4\u65b0\u8868\"\u5bf9\u7b2c\u4e8c\u6761\u6307\u4ee4\u6765\u8bf4\u592a\u6162\u4e86\uff0c\u5b83\u9700\u8981\u201c\u5373\u65f6\u201d\u5730\u83b7\u53d6\u8fd9\u4e2a\u65b0\u7684\u6620\u5c04\u5173\u7cfb\u3002</li> <li>\u7535\u8def\u76ee\u6807: \u8fd9\u4e2a\u7535\u8def\u5c31\u662f\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u79cd\"\u5373\u65f6\"\uff08on-the-fly\uff09\u7684\u5bc4\u5b58\u5668\u66ff\u4ee3\u3002\u5b83\u5728\u91cd\u547d\u540d\u8868\u67e5\u627e\u7684\u540c\u65f6\uff0c\u68c0\u67e5\u4e24\u6761\uff08\u6216\u591a\u6761\uff09\u5e76\u53d1\u6307\u4ee4\u4e4b\u95f4\u7684\u4f9d\u8d56\uff0c\u5e76\u6839\u636e\u68c0\u67e5\u7ed3\u679c\u9009\u62e9\u6b63\u786e\u7684\u91cd\u547d\u540d\u3002</li> <li>\u56fe\u4e2d\u7684\u7ec4\u4ef6\u548c\u8fde\u63a5 (\u4ee5\u540c\u65f6\u5904\u7406 Figure 3.51 \u7684\u524d\u4e24\u6761\u6307\u4ee4 I0 \u548c I1 \u4e3a\u4f8b\uff0c\u56fe\u4e2d\u6807\u7b7e\u4e3a I1 \u548c I2):</li> </ol> <ul> <li>Rename table (\u91cd\u547d\u540d\u8868): \u8fd9\u4e2a\u8868\u5b58\u50a8\u4e86\u903b\u8f91\u5bc4\u5b58\u5668\uff08\u4f8b\u5982 F0, F1, F2...\uff09\u5f53\u524d\u88ab\u6620\u5c04\u5230\u54ea\u4e2a\u7269\u7406\u7684 T \u5bc4\u5b58\u5668\u3002\u8868\u4e2d\u6709 64 \u4e2a\u6761\u76ee\uff0c\u5bf9\u5e94\u53ef\u80fd\u7684 64 \u4e2a\u903b\u8f91\u5bc4\u5b58\u5668\uff08\u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528 RISC-V \u7684\u6d6e\u70b9\u5bc4\u5b58\u5668 F0-F31 \u6216\u6574\u6570\u5bc4\u5b58\u5668 x0-x31\uff0c\u5219\u8868\u4e2d\u6761\u76ee\u6570\u4f1a\u4e0d\u540c\uff0c\u8fd9\u91cc\u662f\u901a\u7528\u793a\u4f8b\uff0c\u5047\u8bbe\u5bf9\u5e94 F0-F63 \u6216\u7c7b\u4f3c\uff09\u3002\u6bcf\u4e2a\u6761\u76ee\u91cc\u5b58\u7684\u662f\u4e00\u4e2a T \u5bc4\u5b58\u5668\u7684\u7f16\u53f7\u3002\u56fe\u4e2d\u7684\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e9b\u6620\u5c04\uff0c\u6bd4\u5982\u903b\u8f91\u5bc4\u5b58\u5668 1 \u6620\u5c04\u5230 T21\uff0c2 \u6620\u5c04\u5230 T19\uff0c3 \u6620\u5c04\u5230 T38\uff0c4 \u6620\u5c04\u5230 T29 \u7b49\u3002</li> <li> <p>Next available T register (\u4e0b\u4e00\u4e2a\u53ef\u7528 T \u5bc4\u5b58\u5668): \u8fd9\u8868\u793a\u4e00\u4e2a T \u5bc4\u5b58\u5668\u6c60\uff0c\u7528\u4e8e\u4e3a\u76ee\u6807\u5bc4\u5b58\u5668\u5206\u914d\u65b0\u7684\u7269\u7406\u5bc4\u5b58\u5668\u3002\u56fe\u4e2d\u663e\u793a T10 \u548c T9 \u662f\u63a5\u4e0b\u6765\u8981\u5206\u914d\u7684 T \u5bc4\u5b58\u5668\u3002</p> <ul> <li> <p>I1 \u8f93\u5165 (\u5bf9\u5e94 Figure 3.51 I0: SUBD F1,F2,F3):</p> <ul> <li><code>dst=F1</code>: \u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u76ee\u6807\u5bc4\u5b58\u5668\u662f F1\u3002</li> <li><code>src1=F2</code>: \u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u7b2c\u4e00\u4e2a\u6e90\u5bc4\u5b58\u5668\u662f F2\u3002</li> <li><code>src2=F3</code>: \u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u7b2c\u4e8c\u4e2a\u6e90\u5bc4\u5b58\u5668\u662f F3\u3002</li> </ul> </li> <li> <p>I2 \u8f93\u5165 (\u5bf9\u5e94 Figure 3.51 I1: ADDD F4,F1,F2):</p> <ul> <li><code>dst=F4</code>: \u7b2c\u4e8c\u6761\u6307\u4ee4\u7684\u76ee\u6807\u5bc4\u5b58\u5668\u662f F4\u3002</li> <li><code>src1=F1</code>: \u7b2c\u4e8c\u6761\u6307\u4ee4\u7684\u7b2c\u4e00\u4e2a\u6e90\u5bc4\u5b58\u5668\u662f F1\u3002</li> <li><code>src2=F2</code>: \u7b2c\u4e8c\u6761\u6307\u4ee4\u7684\u7b2c\u4e8c\u4e2a\u6e90\u5bc4\u5b58\u5668\u662f F2\u3002</li> </ul> </li> <li> <p>I1 \u8f93\u51fa:</p> <ul> <li><code>dst=T9</code>: F1 \u88ab\u5206\u914d\u4e86\u65b0\u7684 T \u5bc4\u5b58\u5668 T9\u3002\u8fd9\u4e2a T9 \u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u4f1a\u66f4\u65b0\u5230\u91cd\u547d\u540d\u8868\u4e2d\u5bf9\u5e94 F1 \u7684\u6761\u76ee\u3002</li> <li><code>src1=T19</code>: F2 \u901a\u8fc7\u67e5\u91cd\u547d\u540d\u8868\u5f97\u5230\u6620\u5c04 T19\u3002</li> <li><code>src2=T38</code>: F3 \u901a\u8fc7\u67e5\u91cd\u547d\u540d\u8868\u5f97\u5230\u6620\u5c04 T38\u3002</li> </ul> </li> <li> <p>I2 \u8f93\u51fa:</p> <ul> <li><code>dst=T10</code>: F4 \u88ab\u5206\u914d\u4e86\u65b0\u7684 T \u5bc4\u5b58\u5668 T10\u3002\u8fd9\u4e2a T10 \u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u4f1a\u66f4\u65b0\u5230\u91cd\u547d\u540d\u8868\u4e2d\u5bf9\u5e94 F4 \u7684\u6761\u76ee\u3002</li> <li><code>src1=T9</code>: F1 \u88ab\u91cd\u547d\u540d\u4e3a T9\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e0d\u662f\u67e5\u8868\u5f97\u5230\u7684\u65e7\u503c\uff08\u5982\u679c F1 \u5728\u8868\u4e2d\u6709\u65e7\u6620\u5c04\u7684\u8bdd\uff09\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u4e86 I1 \u7684\u65b0\u76ee\u6807\u5bc4\u5b58\u5668 T9\u3002</li> <li><code>src2=T19</code>: F2 \u88ab\u91cd\u547d\u540d\u4e3a T19\u3002</li> </ul> </li> </ul> </li> </ul> <ol> <li> <p>\u5373\u65f6\u91cd\u547d\u540d\u7684\u903b\u8f91 (\u4ee5\u5904\u7406 I2 \u7684 src1 \u548c src2 \u4e3a\u4f8b):</p> <ul> <li>\u5bf9\u4e8e I2 \u7684\u6bcf\u4e2a\u6e90\u5bc4\u5b58\u5668 (src1=F1, src2=F2)\uff0c\u90fd\u9700\u8981\u51b3\u5b9a\u5b83\u5e94\u8be5\u88ab\u91cd\u547d\u540d\u4e3a\u4ec0\u4e48 T \u5bc4\u5b58\u5668\u3002</li> <li>\u5224\u65ad\u4f9d\u8d56: \u9700\u8981\u68c0\u67e5 I2 \u7684\u6e90\u5bc4\u5b58\u5668\u662f\u5426\u4e0e I1 \u7684\u76ee\u6807\u5bc4\u5b58\u5668\u76f8\u540c\u3002\u56fe\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u6bd4\u8f83\u5668\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd (<code>I1 dst = I2 src?</code>)\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e I2 \u7684 src1 (F1)\uff0c\u6bd4\u8f83\u5668\u4f1a\u68c0\u67e5 F1 \u662f\u5426\u7b49\u4e8e I1 \u7684 dst (F1)\u3002</li> <li> <p>\u591a\u8def\u590d\u7528\u5668 (Multiplexer/Mux): \u6839\u636e\u6bd4\u8f83\u5668\u7684\u7ed3\u679c\uff0c\u4e00\u4e2a\u591a\u8def\u590d\u7528\u5668\u4f1a\u9009\u62e9\u6700\u7ec8\u7684 T \u5bc4\u5b58\u5668\u3002</p> <ul> <li>\u5982\u679c I2 \u7684\u6e90\u5bc4\u5b58\u5668 \u7b49\u4e8e I1 \u7684\u76ee\u6807\u5bc4\u5b58\u5668 (\u6bd4\u8f83\u7ed3\u679c\u4e3a Y)\uff0c\u90a3\u4e48 I2 \u7684\u8fd9\u4e2a\u6e90\u5bc4\u5b58\u5668\u5c31\u88ab\u91cd\u547d\u540d\u4e3a I1 \u7684\u65b0\u76ee\u6807 T \u5bc4\u5b58\u5668 (\u5373 T9)\u3002</li> <li>\u5982\u679c I2 \u7684\u6e90\u5bc4\u5b58\u5668 \u4e0d\u7b49\u4e8e I1 \u7684\u76ee\u6807\u5bc4\u5b58\u5668 (\u6bd4\u8f83\u7ed3\u679c\u4e3a N)\uff0c\u90a3\u4e48 I2 \u7684\u8fd9\u4e2a\u6e90\u5bc4\u5b58\u5668\u5c31\u88ab\u91cd\u547d\u540d\u4e3a \u901a\u8fc7\u67e5\u91cd\u547d\u540d\u8868\u5f97\u5230\u7684\u5f53\u524d\u6620\u5c04 (\u4f8b\u5982 F2 \u67e5\u8868\u5f97\u5230 T19)\u3002</li> </ul> </li> <li> <p>\u56fe\u4e2d\u7684\u865a\u7ebf\u7bad\u5934\u5f62\u8c61\u5730\u5c55\u793a\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff1a</p> <ul> <li>\u5bf9\u4e8e I2 \u7684 src1 (F1)\uff0c\u56e0\u4e3a <code>F1 == I1 dst (F1)</code>\uff0c\u6240\u4ee5\u901a\u8fc7\u6bd4\u8f83\u5668\u548c\u591a\u8def\u590d\u7528\u5668\uff0c\u5b83\u88ab\u5bfc\u5411\u4e86 I1 \u7684\u65b0\u76ee\u6807\u5bc4\u5b58\u5668 T9\u3002</li> <li>\u5bf9\u4e8e I2 \u7684 src2 (F2)\uff0c\u56e0\u4e3a <code>F2 != I1 dst (F1)</code>\uff0c\u6240\u4ee5\u5b83\u901a\u8fc7\u67e5\u91cd\u547d\u540d\u8868\uff0c\u88ab\u5bfc\u5411\u4e86 F2 \u5bf9\u5e94\u7684 T \u5bc4\u5b58\u5668\uff08\u56fe\u4e2d\u793a\u4f8b\u662f T19\uff09\u3002</li> </ul> </li> </ul> </li> <li> <p>\u91cd\u547d\u540d\u8868\u7684\u66f4\u65b0: I1 \u7684\u76ee\u6807\u5bc4\u5b58\u5668 F1 \u88ab\u5206\u914d\u4e86 T9\uff0cI2 \u7684\u76ee\u6807\u5bc4\u5b58\u5668 F4 \u88ab\u5206\u914d\u4e86 T10\u3002\u8fd9\u4e9b\u65b0\u7684\u6620\u5c04\uff08F1 -&gt; T9, F4 -&gt; T10\uff09\u4f1a\u5728\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u672b\u5199\u5165\u91cd\u547d\u540d\u8868\u4e2d\uff0c\u4ee5\u4fbf\u540e\u7eed\u7684\u6307\u4ee4\u80fd\u591f\u67e5\u5230\u6700\u65b0\u7684\u6620\u5c04\u5173\u7cfb\u3002</p> </li> <li> <p>\u521d\u59cb\u72b6\u6001\uff1a</p> </li> </ol> <pre><code>F0 -&gt; T0\n\nF1 -&gt; T1\n\nF2 -&gt; T2\n\nF3 -&gt; T3\n\nF4 -&gt; T4\n\nF5 -&gt; T5\n\nF6 -&gt; T6\n\n...\n\n(\u5176\u4ed6 Fi -&gt; Ti)\n</code></pre> <p>\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 T \u5bc4\u5b58\u5668\u6c60: \u4ece T9 \u5f00\u59cb</p> <ol> <li>\u5468\u671f 1: \u540c\u65f6\u91cd\u547d\u540d\u6307\u4ee4 I0 \u548c I1</li> </ol> <p>\u5982\u7535\u8def\u56fe\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u3002</p> <p>\u5904\u7406 I0 (SUBD F1, F2, F3):</p> <ul> <li>\u76ee\u6807\u5bc4\u5b58\u5668 F1: \u5206\u914d T9\u3002\u65b0\u7684\u6620\u5c04: F1 \\(\\rightarrow\\) T9\u3002</li> <li>\u6e90\u5bc4\u5b58\u5668 F2: \u67e5\u627e\u91cd\u547d\u540d\u8868 \\(\\rightarrow\\) T2\u3002</li> <li>\u6e90\u5bc4\u5b58\u5668 F3: \u67e5\u627e\u91cd\u547d\u540d\u8868 \\(\\rightarrow\\) T3\u3002</li> <li>\u91cd\u547d\u540d\u540e\u7684 I0: <code>SUBD T9, T2, T3</code></li> </ul> <p>\u5904\u7406 I1 (ADDD F4, F1, F2):</p> <ul> <li>\u76ee\u6807\u5bc4\u5b58\u5668 F4: \u5206\u914d T10\u3002\u65b0\u7684\u6620\u5c04: F4 \\(\\rightarrow\\) T10\u3002</li> <li>\u6e90\u5bc4\u5b58\u5668 F1: \u4f9d\u8d56\u4e8e I0 \u7684\u76ee\u6807\u5bc4\u5b58\u5668 (F1)\u3002\u56e0\u6b64 F1 \u91cd\u547d\u540d\u4e3a I0 \u7684\u65b0\u76ee\u6807 T \u5bc4\u5b58\u5668 T9\u3002</li> <li>\u6e90\u5bc4\u5b58\u5668 F2: \u4e0d\u4f9d\u8d56\u4e8e I0 \u7684\u76ee\u6807\u5bc4\u5b58\u5668 (F1)\u3002\u67e5\u627e\u91cd\u547d\u540d\u8868 \\(\\rightarrow\\) T2\u3002</li> <li>\u91cd\u547d\u540d\u540e\u7684 I1: <code>ADDD T10, T9, T2</code></li> </ul> <p>\u5468\u671f 1 \u7ed3\u675f\u65f6\u7684\u91cd\u547d\u540d\u8868\u72b6\u6001 (Cycle 2 \u5f00\u59cb\u524d):</p> <pre><code>F0 -&gt; T0\n\nF1 -&gt; T9 (\u66f4\u65b0)\n\nF2 -&gt; T2\n\nF3 -&gt; T3\n\nF4 -&gt; T10 (\u66f4\u65b0)\n\nF5 -&gt; T5\n\nF6 -&gt; T6\n\n...\n\n(\u5176\u4ed6 Fi -&gt; Ti)\n</code></pre> <p>\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 T \u5bc4\u5b58\u5668\u6c60: \u4ece T11 \u5f00\u59cb</p> <ol> <li>\u5468\u671f 2: \u540c\u65f6\u91cd\u547d\u540d\u6307\u4ee4 I2 \u548c I3</li> </ol> <p>\u5904\u7406 I2 (MULTD F6, F4, F1):</p> <ul> <li>\u76ee\u6807\u5bc4\u5b58\u5668 F6: \u5206\u914d T11\u3002\u65b0\u7684\u6620\u5c04: F6 \\(\\rightarrow\\) T11\u3002</li> <li>\u6e90\u5bc4\u5b58\u5668 F4: \u67e5\u627e\u91cd\u547d\u540d\u8868 \\(\\rightarrow\\) T10\u3002</li> <li>\u6e90\u5bc4\u5b58\u5668 F1: \u67e5\u627e\u91cd\u547d\u540d\u8868 \\(\\rightarrow\\) T9\u3002</li> <li>\u91cd\u547d\u540d\u540e\u7684 I2: <code>MULTD T11, T10, T9</code></li> </ul> <p>\u5904\u7406 I3 (DIVD F0, F2, F6):</p> <ul> <li>\u76ee\u6807\u5bc4\u5b58\u5668 F0: \u5206\u914d T12\u3002\u65b0\u7684\u6620\u5c04: F0 \\(\\rightarrow\\) T12\u3002</li> <li>\u6e90\u5bc4\u5b58\u5668 F2: \u4e0d\u4f9d\u8d56\u4e8e I2 \u7684\u76ee\u6807\u5bc4\u5b58\u5668 (F6)\u3002\u67e5\u627e\u91cd\u547d\u540d\u8868 \\(\\rightarrow\\) T2\u3002</li> <li>\u6e90\u5bc4\u5b58\u5668 F6: \u4f9d\u8d56\u4e8e I2 \u7684\u76ee\u6807\u5bc4\u5b58\u5668 (F6)\u3002\u56e0\u6b64 F6 \u91cd\u547d\u540d\u4e3a I2 \u7684\u65b0\u76ee\u6807 T \u5bc4\u5b58\u5668 T11\u3002</li> <li>\u91cd\u547d\u540d\u540e\u7684 I3: <code>DIVD T12, T2, T11</code></li> </ul> <p>\u5468\u671f 2 \u7ed3\u675f\u65f6\u7684\u91cd\u547d\u540d\u8868\u72b6\u6001 (Cycle 3 \u5f00\u59cb\u524d):</p> <pre><code>F0 -&gt; T12 (\u66f4\u65b0)\n\nF1 -&gt; T9\n\nF2 -&gt; T2\n\nF3 -&gt; T3\n\nF4 -&gt; T10\n\nF5 -&gt; T5\n\nF6 -&gt; T11 (\u66f4\u65b0)\n\n...\n\n(\u5176\u4ed6 Fi -&gt; Ti)\n</code></pre> <p>\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 T \u5bc4\u5b58\u5668\u6c60: \u4ece T13 \u5f00\u59cb</p> <p>\u7efc\u4e0a\u6240\u8ff0\uff1a</p> <pre><code>SUBD T9, T2, T3\nADDD T10, T9, T2\nMULTD T11, T10, T9\nDIVD T12, T2, T11\n</code></pre>"},{"location":"Computer_Science/CA/homework/#311","title":"3.11","text":"Question <p>Assume a five-stage single-pipeline micro architecture (fetch, decode, execute, memory, write-back) and the code in Figure 3.54. All ops are one cycle except LW and SW, which are 1 + 2 cycles, and branches, which are 1 + 1 cycles. There is no forwarding. Show the phases of each instruction per clock cycle for one iteration of the loop.</p> <p>a. How many clock cycles per loop iteration are lost to branch overhead?</p> <p>b. Assume a static branch predictor, capable of recognizing a back-wards branch in the Decode stage. Now how many clock cycles are wasten to branch overhead?</p> <p>c. Assume a dynamic branch predictor. How many cycles are lost ona correct prediction?</p> <p></p> answer \u65f6\u949f\u5468\u671f I1 (LW) I2 (LW) I3 (ADDI) I4 (SUB) I5 (SW) I6 (BNZ) \u5907\u6ce8 1 IF 2 ID IF 3 EXE ID IF I2 \u9700\u8981 I1 \u7684 R3 (\u5468\u671f 6 \u5199\u56de) \u6240\u4ee5\u540e\u9762\u5f00\u59cb stall 4 M1 ID IF I2 \u505c\u987f\u7b49\u5f85 R3\u3002 5 M2 ID IF I2 \u505c\u987f\u3002 6 WB ID ID I1 \u5199\u56de R3\u3002 7 EXE ID IF I3 \u505c\u987f\u7b49\u5f85 R1\u3002 8 M1 ID IF I3 \u505c\u987f\u7b49\u5f85\u3002 9 M2 ID IF I3 \u505c\u987f\u3002 10 WB ID IF I2 \u5199\u56de R1\u3002 11 EXE ID IF 12 WB EXE ID IF 13 IF WB EXE ID \u5047\u8bbe\u4e0b\u4e00\u6761\u6307\u4ee4\u4e0e I1 \u76f8\u540c 14 ID IF M1 E1 \u5047\u8bbe\u4e0b\u4e00\u6761\u6307\u4ee4\u4e0e I2 \u76f8\u540c 15 M1 ID IF M2 E2 \u5047\u8bbe\u4e0b\u4e00\u6761\u6307\u4ee4\u4e0e I3 \u76f8\u540c\u3002\u8fd9\u91cc\u51b3\u5b9a\u662f\u5426\u8df3\u8f6c\u3002 <p>a. \u5728\u6ca1\u6709\u5206\u652f\u9884\u6d4b\u7684\u60c5\u51b5\u4e0b\uff0cBNZ \u6307\u4ee4\u5728\u5468\u671f 15 \u5224\u65ad\u7ed3\u675f\u540e\u51b3\u5b9a\u662f\u5426\u8df3\u8f6c\u3002\u6b64\u65f6\uff0c\u6d41\u6c34\u7ebf\u5df2\u7ecf\u987a\u5e8f\u53d6\u6307\u5e76\u5904\u7406\u4e86 BNZ \u4e4b\u540e\u7684\u6307\u4ee4\u3002\u7531\u4e8e\u53d1\u751f\u8df3\u8f6c\uff0c\u8fd9\u4e9b\u6307\u4ee4\u9700\u8981\u88ab flush\u3002\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5206\u652f\uff0c\u90a3\u4e48\u5728\u5468\u671f 13 \u65f6\u5c31\u53ef\u4ee5\u53d6\u5230\u6b63\u786e\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c\u800c\u73b0\u5728\u662f\u5728\u5468\u671f 15 \u65f6\u624d\u53d6\u51fa\u8fd9\u4e2a\u6307\u4ee4\u3002\u7531\u4e8e\u603b\u5f00\u9500\u4ece BNZ \u7684 E \u5f00\u59cb\u7b97\u8d77\u662f 2 \u4e2a\u5468\u671f\uff0c\u518d\u52a0\u4e0a\u8fd9\u91cc\u7684 (15 - 13 = 2) \u5468\u671f\uff0c\u4e00\u5171\u662f 4 \u4e2a\u5468\u671f\u3002</p> <p>b. \u9759\u6001\u9884\u6d4b\u5668\u5728\u8bd1\u7801\u9636\u6bb5\uff08ID\uff09\u5c31\u53ef\u4ee5\u6839\u636e\u5206\u652f\u7c7b\u578b\u548c\u76ee\u6807\u5730\u5740\u8fdb\u884c\u9884\u6d4b\u3002\u5bf9\u4e8e\u5411\u540e\u8df3\u8f6c\uff08\u5faa\u73af\uff09\uff0c\u901a\u5e38\u9884\u6d4b\u4e3a taken\u3002\u5982\u679c\u9884\u6d4b\u5728 ID \u9636\u6bb5\u5b8c\u6210\u5e76\u9884\u6d4b taken\uff0c\u6d41\u6c34\u7ebf\u53ef\u4ee5\u5728\u5206\u652f\u8fdb\u5165 E1 \u9636\u6bb5\u7684\u540c\u65f6\u5c31\u5f00\u59cb\u4ece\u9884\u6d4b\u7684\u76ee\u6807\u5730\u5740\u53d6\u6307\u3002\u5982\u679c\u9884\u6d4b\u6b63\u786e\uff0c\u5c31\u4e0d\u4f1a\u6709\u4f5c\u5e9f\u3002\u6240\u4ee5\u8fd9\u91cc\u548c\u6ca1\u6709\u5206\u652f\u76f8\u6bd4\u7f3a\u5c11\u4e86 2 \u4e2a\u5468\u671f(\u56e0\u4e3a\u9759\u6001\u9884\u6d4b\u5668\u9700\u8981 IF \u548c ID \u9636\u6bb5)\u3002</p> <p>c. \u5982\u679c\u52a8\u6001\u9884\u6d4b\u5668\u975e\u5e38\u9ad8\u6548\uff0c\u80fd\u591f\u5728\u5206\u652f\u6307\u4ee4\u88ab\u53d6\u6307\u7684\u540c\u4e00\u4e2a\u5468\u671f\u5c31\u9884\u6d4b\u4e3a taken \u5e76\u63d0\u4f9b\u76ee\u6807\u5730\u5740\uff0c\u90a3\u4e48\u6d41\u6c34\u7ebf\u53ef\u4ee5\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u7acb\u5373\u4ece\u76ee\u6807\u5730\u5740\u53d6\u6307\u3002\u5728\u8fd9\u79cd\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5206\u652f\u6307\u4ee4\u7684\u53d6\u6307\u548c\u540e\u7eed\u76ee\u6807\u6307\u4ee4\u7684\u53d6\u6307\u53ef\u4ee5\u7d27\u5bc6\u8854\u63a5\uff0c\u4e0d\u4f1a\u4ea7\u751f\u989d\u5916\u7684 bubble \u6216 flush\uff08\u56e0\u4e3a\u9884\u6d4b\u6b63\u786e\uff09\u3002\u6240\u4ee5\u5728\u5728\u9884\u6d4b\u5b8c\u7f8e\u60c5\u51b5\u4e0b\u7684\u7406\u60f3\u7ed3\u679c\u662f 0 \u5206\u652f\u5f00\u9500\u3002</p>"},{"location":"Computer_Science/CA/homework/#313","title":"3.13(\u524d\u4e24\u70b9)","text":"Question <p>In this exercise, you will explore performance trade-offs between three processors that each employ different types of multithreading (MT). Each of these processors is superscalar, uses in-order pipelines, requires a fixed three-cycle stall following all loads and branches, and has identical L1 caches. Instructions from the same thread issued in the same cycle are read in program order and must not contain any data or control dependences.</p> <ul> <li> <p>Processor A is a superscalar simultaneous MT architecture, capable of issuing up to two instructions per cycle from two threads.</p> </li> <li> <p>Processor B is a fine-grained MT architecture, capable of issuing up to four instructions per cycle from a single thread and switches threads on any pipeline stall.</p> </li> </ul> <p>Our application is a list searcher, which scans a region of memory for a specific value stored in R9 between the address range specified in R16 and R17. It is parallelized by evenly dividing the search space into four equal-sized contiguous blocks and assigning one search thread to each block (yielding four threads). Most of each thread's runtime is spent in the following unrolled loop body:</p> <pre><code>loop:   lw x1,0(x16)\n\n        lw x2,8(x16)\n\n        lw x3,16(x16)\n\n        lw x4,24(x16)\n\n        lw x5,32(x16)\n\n        lw x6,40(x16)\n\n        lw x7,48(x16)\n\n        lw x8,56(x16)\n\n        beq x9,x1,match0\n\n        beq x9,x2,match1\n\n        beq x9,x3,match2\n\n        beq x9,x4,match3\n\n        beq x9,x5,match4\n\n        beq x9,x6,match5\n\n        beq x9,x7,match6\n\n        beq x9,x8,match7\n\n        DADDIU x16,x16,#64\n\n        blt x16,x17,loop\n</code></pre> <p>Assume the following:</p> <ul> <li> <p>A barrier is used to ensure that all threads begin simultaneously.</p> </li> <li> <p>The first L1 cache miss occurs after two iterations of the loop.</p> </li> <li> <p>None of the BEQAL branches is taken.</p> </li> <li> <p>The BLT is always taken.</p> </li> <li> <p>All three processors schedule threads in a round-robin fashion.</p> </li> </ul> <p>Determine how many cycles are required for each processor to complete the first two iterations of the loop.</p> answer <p>\u7531\u4e8e\u65e0\u6570\u636e\u8f6c\u53d1\uff0c\u4e00\u6761\u6307\u4ee4\u9700\u8981\u4f7f\u7528\u524d\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\uff0c\u5fc5\u987b\u7b49\u5230\u524d\u4e00\u6761\u6307\u4ee4\u5c06\u7ed3\u679c\u5199\u56de\u5bc4\u5b58\u5668\u6587\u4ef6\u540e\u624d\u80fd\u5728\u6267\u884c\u9636\u6bb5\u4f7f\u7528\u3002\u53c8\u56e0\u4e3a\u9898\u76ee\u4e2d\u7ed9\u51fa\u5bf9\u4e8e LW \u548c\u5206\u652f\u6307\u4ee4\uff0c\u5728\u6307\u4ee4\u5b8c\u6210\u540e\uff0c\u540c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u9700\u8981\u989d\u5916\u7b49\u5f85 3 \u4e2a\u5468\u671f\u624d\u80fd\u53d1\u5c04\u6216\u8fdb\u5165\u6d41\u6c34\u7ebf\u3002\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\uff1a</p> <p>Processor A. \u8d85\u6807\u91cf\u540c\u65f6\u591a\u7ebf\u7a0b (SMT)\uff0c\u6bcf\u5468\u671f\u6700\u591a\u53d1\u51fa 2 \u6761\u6307\u4ee4\uff0c\u6765\u81ea\u4e24\u4e2a\u4e0d\u540c\u7ebf\u7a0b\u3002\u5468\u671f 1 \u4f7f\u7528\u7ebf\u7a0b 1 \u548c\u7ebf\u7a0b 2 \u4e00\u5171\u662f\u5904\u7406\u4e24\u6761\u6307\u4ee4\uff0c\u800c\u8fd9\u4e24\u4e2a\u7ebf\u7a0b\u4e0b\u4e00\u6b21\u662f\u5728\u5468\u671f 5 \u65f6\u624d\u80fd\u518d\u53d1\u5c04\u6307\u4ee4\u3002\u5468\u671f 2 \u540c\u7406\u53ef\u4ee5\u5f97\u5230\u4e0b\u4e00\u6b21\u65f6\u5468\u671f 6 \u65f6\u518d\u53d1\u5c04\u6307\u4ee4\u3002\u4e5f\u5c31\u662f\u8bf4\u5468\u671f 3 \u548c\u5468\u671f 4 \u90fd\u662f\u505c\u987f\u7684\u3002\u800c\u8fd9\u6837\u7684 LW \u6307\u4ee4\u4e00\u5171\u6709 4 \u7ec4 8 \u4e2a\u3002\u540c\u7406\u53ef\u5f97\uff0c\u5728\u8fdb\u5165 BEQ \u6307\u4ee4\u540e\u4e0e LW \u6307\u4ee4\u7684\u505c\u987f\u60c5\u51b5\u76f8\u540c\uff0c\u4e5f\u662f\u56db\u4e2a\u5468\u671f\u4e00\u7ec4\uff0c\u8fd9\u6837\u7684 BEQ \u6307\u4ee4\u4e00\u5171\u4e5f\u662f 4 \u7ec4 8 \u4e2a\u3002\u5bf9\u4e8e ADDI \u6307\u4ee4\u53ea\u9700\u8981 1 \u4e2a\u5468\u671f\uff0c\u800c\u6709 4 \u4e2a\u7ebf\u7a0b\uff0c\u4e00\u6b21\u53ef\u4ee5\u53d1\u5c04\u4e24\u6761\u6307\u4ee4\uff0c\u5373\u4f7f\u7528\u4e24\u4e2a\u7ebf\u7a0b\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u91cc\u9700\u8981 2 \u4e2a\u5468\u671f\u3002\u6700\u540e\u7684 BLT \u6307\u4ee4\u4e0e\u524d\u8ff0\u7684 BEQ \u6307\u4ee4\u7c7b\u4f3c\uff0c\u5728 BLT \u8fd9\u4e2a\u6307\u4ee4\u6240\u5728\u5468\u671f\u4e4b\u540e 3 \u4e2a\u5468\u671f\uff0c\u4e5f\u5c31\u662f\u7b2c 4 \u4e2a\u5468\u671f\u5c31\u7ed3\u675f\u4e86\u4e00\u8f6e\u5faa\u73af\u3002\u6240\u4ee5\u8ba1\u7b97\u53ef\u5f97:</p> \\[2 \\times (4 \\times 8 + 4 \\times 8 + 2 + 4) = 140\\] <p></p> <p>Processor B. \u7ec6\u7c92\u5ea6\u591a\u7ebf\u7a0b (Fine-grained MT)\uff0c\u6bcf\u5468\u671f\u6700\u591a\u53d1\u51fa 4 \u6761\u6307\u4ee4\uff0c\u6765\u81ea\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u5728\u4efb\u4f55\u6d41\u6c34\u7ebf\u505c\u987f\u65f6\u5207\u6362\u7ebf\u7a0b\u3002\u80fd\u529b\u867d\u7136\"\u53ea\u80fd\u6765\u81ea\u4e00\u4e2a\u7ebf\u7a0b\"\uff0c\u4f46\u5728\u7ec6\u7c92\u5ea6\u591a\u7ebf\u7a0b\u9690\u85cf\u4e86\u5355\u6307\u4ee4\u505c\u987f\u540e\uff0c\u5b83\u53ef\u4ee5\u5728\u7ebf\u7a0b\u5207\u6362\u56de\u6765\u65f6\uff0c\u5c1d\u8bd5\u4ece\u8be5\u7ebf\u7a0b\u53d1\u5c04\u591a\u6761\u5c31\u7eea\u4e14\u65e0\u4f9d\u8d56\u7684\u6307\u4ee4\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5373\u4f7f\u6bcf\u6b21\u53ea\u80fd\u53d1\u5c04\u4e00\u6761\u6307\u4ee4\uff0c\u7ec6\u7c92\u5ea6\u591a\u7ebf\u7a0b\u901a\u8fc7\u5feb\u901f\u5207\u6362\u4fdd\u8bc1\u4e86\u6d41\u6c34\u7ebf\u80fd\u6301\u7eed\u63a5\u6536\u6765\u81ea\u4e0d\u540c\u7ebf\u7a0b\u7684\u6307\u4ee4\uff0c\u907f\u514d\u4e86 Processor A \u5728\u5355\u4e2a\u7ebf\u7a0b\u505c\u987f\u65f6\u7684\u6d41\u6c34\u7ebf\u7a7a\u95f2\u3002</p> <p>\u4e5f\u5c31\u662f\u5bf9\u4e8e Processor B \u6765\u8bf4 LW \u6307\u4ee4\u53ef\u4ee5\u5728\u4e00\u4e2a\u5468\u671f\u4e2d\u53d1\u5c04 4 \u6761\u3002\u800c\u9700\u8981\u7b49\u5f85 3 \u4e2a\u5468\u671f\uff0c\u4e5f\u5c31\u662f\u5728\u5468\u671f 5 \u65f6\u7ebf\u7a0b 1 \u53c8\u53ef\u4ee5\u53d1\u5c04\u6307\u4ee4\u4e86\u3002\u800c\u5468\u671f 2 3 4 \u6b63\u597d\u53ef\u4ee5\u8ba9\u7ebf\u7a0b 2 3 4 \u7528\u4e8e\u53d1\u5c04 4 \u6761\u6307\u4ee4\u3002\u56e0\u6b64\u628a LW \u6307\u4ee4\u53d1\u5c04\u5b8c\u5168\u53ea\u9700\u8981 8 \u4e2a\u5468\u671f\u3002\u800c\u63a5\u4e0b\u6765\u7684 BEQ \u6307\u4ee4\u4e5f\u662f\u540c\u7406\u9700\u8981 8 \u4e2a\u5468\u671f\u3002 Processor B \u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u5468\u671f\u5185\u50cf Processor A \u90a3\u6837\u540c\u65f6\u53d1\u5c04\u6765\u81ea\u4e0d\u540c\u7ebf\u7a0b\u7684 BEQ \u6307\u4ee4\uff0c\u53ea\u80fd\u5728\u6bcf\u4e2a\u5468\u671f\u4ece\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u9009\u62e9\u6307\u4ee4\u53d1\u5c04\uff0c\u800c\u5355\u5468\u671f\u53ef\u4ee5\u53d1\u5c04 4 \u6761\u6765\u81ea\u540c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u6307\u4ee4\uff08\u5982\u679c\u5b83\u4eec\u72ec\u7acb\u4e14\u5c31\u7eea\uff09\u3002\u56e0\u6b64\u5bf9\u4e8e Processor B \u6765\u8bf4\uff0c\u7ebf\u7a0b 1 \u53d1\u5c04\u4e86\u4e00\u4e2a BEQ \u6307\u4ee4\u540e\uff0c\u4e0b\u4e00\u5468\u671f\u5207\u6362\u5230\u7ebf\u7a0b 2 \u53d1\u5c04\u4e00\u4e2a BEQ \u6307\u4ee4(\u56e0\u4e3a BEQ \u6307\u4ee4\u4e4b\u95f4\u5b58\u5728 control hazard \u6240\u4ee5\u4e00\u6b21\u53ea\u80fd\u53d1\u5c04\u4e00\u6761)\u3002\u56e0\u6b64\u53d1\u5c04 BEQ \u6307\u4ee4\u4e00\u5171\u9700\u8981 \\(4 \\times 8 = 32\\) \u4e2a\u5468\u671f\u3002\u63a5\u4e0b\u6765\u7684 ADDI \u548c BLT \u6307\u4ee4\u4e4b\u95f4\u5b58\u5728\u6570\u636e\u4f9d\u8d56\uff0c\u56e0\u6b64\u4e5f\u4e0d\u80fd\u5728\u4e00\u4e2a\u5468\u671f\u5185\u53d1\u5c04\u51fa\u53bb\u3002\u6240\u4ee5\u5bf9\u4e8e ADDI \u6307\u4ee4\u9700\u8981 4 \u4e2a\u5468\u671f\uff0c\u800c\u5bf9\u4e8e BLT \u6307\u4ee4\u540c\u6837\u4e5f\u9700\u8981 4 \u4e2a\u5468\u671f\u3002\u6240\u4ee5\u8ba1\u7b97\u53ef\u5f97:</p> \\[2 \\times (8 + 32 + 4 + 4) = 96\\] <p></p> <p></p>"},{"location":"Computer_Science/CA/homework/#316","title":"3.16","text":"Question <p>Tomasulo's algorithm has a disadvantage: only one result can compute per clock per CDB. Use the hardware configuration and latencies from the previous question and find a code sequence of no more than 10 instructions where Tomasulo's algorithm must stall due to CDB contention. Indicate where this occurs in your sequence.</p> answer \u6307\u4ee4 \u53d1\u51fa\u5468\u671f \u6267\u884c/\u8bbf\u5b58\u5f00\u59cb\u5468\u671f \u5199\u56deCDB\u5468\u671f fsub.d F12,F10,F11 1 2 12 addi x1,x1,100 2 3 4 addi x1,x1,200 3 5 6 addi x1,x1,200 4 7 8 addi x1,x1,200 5 9 10 addi x1,x1,200 6 11 12 (CDB\u7ade\u4e89)"},{"location":"Computer_Science/CA/homework/#_4","title":"\u7b2c\u56db\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/CA/homework/#41","title":"4.1","text":"Question <p>Assume the constants shown as follows.</p> Constants Values AA,AC,AG,AT 0,1,2,3 CA,CC,CG,CT 4,5,6,7 GA,GC,GG,GT 8,9,10,11 TA,TC,TG,TT 12,13,14,15 A,C,G,T 0,1,2,3 <p>Write code for RISC-V and RV64V. Assume the starting addresses of tiPL, tiPR, clL, clR, and clP are in RtiPL, RtiPR, RclL, RclR, and RclP, respectively. Do not unroll the loop. To facilitate vector addition reductions, assume that we add the following instructions to RV64V: Vector Summation Reduction Single Precision:</p> <p>vsum Fd, Vs</p> <p>This instruction performs a summation reduction on a vector register Vs, writing to the sum into scalar register Fd.</p> answer <p>\u5047\u8bbe\u6211\u4eec\u9700\u8981\u8ba1\u7b97 N \u4e2a\u7ed3\u679c\uff0c\u5b58\u653e\u5728 RclP \u6307\u5411\u7684\u6570\u7ec4\u4e2d\u3002\u5bf9\u4e8e\u7b2c k \u4e2a\u7ed3\u679c (0 &lt;= k &lt; N):</p> <ol> <li>\u8ba1\u7b97 <code>SumL</code>:</li> </ol> <ul> <li>\u4ece <code>RtiPL</code> \u8bfb\u53d6 4 \u4e2a\u6d6e\u70b9\u6570: <code>L\u2080, L\u2081, L\u2082, L\u2083</code> (\u59cb\u4e8e <code>RtiPL_base + k * 16</code> \u5b57\u8282\u5904)\u3002</li> <li>\u4ece <code>RclL</code> \u8bfb\u53d6 4 \u4e2a\u6d6e\u70b9\u6570: <code>CL\u2080, CL\u2081, CL\u2082, CL\u2083</code> (\u59cb\u4e8e <code>RclL_base + k * 16</code> \u5b57\u8282\u5904)\u3002</li> <li><code>SumL = L\u2080*CL\u2080 + L\u2081*CL\u2081 + L\u2082*CL\u2082 + L\u2083*CL\u2083</code>\u3002</li> </ul> <ol> <li>\u8ba1\u7b97 <code>SumR</code>:</li> </ol> <ul> <li>\u4ece <code>RtiPR</code> \u8bfb\u53d6 4 \u4e2a\u6d6e\u70b9\u6570: <code>R\u2080, R\u2081, R\u2082, R\u2083</code> (\u59cb\u4e8e <code>RtiPR_base + k * 16</code> \u5b57\u8282\u5904)\u3002</li> <li>\u4ece <code>RclR</code> \u8bfb\u53d6 4 \u4e2a\u6d6e\u70b9\u6570: <code>CR\u2080, CR\u2081, CR\u2082, CR\u2083</code> (\u59cb\u4e8e <code>RclR_base + k * 16</code> \u5b57\u8282\u5904)\u3002</li> <li><code>SumR = R\u2080*CR\u2080 + R\u2081*CR\u2081 + R\u2082*CR\u2082 + R\u2083*CR\u2083</code>\u3002</li> </ul> <ol> <li> <p><code>Result = SumL * SumR</code>\u3002</p> </li> <li> <p>\u5c06 <code>Result</code> \u5b58\u5165 <code>RclP</code> (\u4f4d\u7f6e <code>RclP_base + k * 4</code> \u5b57\u8282\u5904)\u3002</p> </li> </ol> <p>-<code>RISC-V</code></p> <pre><code># \u5047\u8bbe\u7684\u5bc4\u5b58\u5668\u5206\u914d:\n# x5 (RtiPL_ptr): \u6307\u5411 RtiPL \u5f53\u524d\u6570\u636e\u5757\u7684\u6307\u9488\n# x6 (RtiPR_ptr): \u6307\u5411 RtiPR \u5f53\u524d\u6570\u636e\u5757\u7684\u6307\u9488\n# x7 (RclL_ptr):  \u6307\u5411 RclL  \u5f53\u524d\u6570\u636e\u5757\u7684\u6307\u9488\n# x8 (RclR_ptr):  \u6307\u5411 RclR  \u5f53\u524d\u6570\u636e\u5757\u7684\u6307\u9488\n# x9 (RclP_ptr):  \u6307\u5411 RclP  \u5f53\u524d\u5b58\u50a8\u4f4d\u7f6e\u7684\u6307\u9488\n# x10 (N):        \u8981\u8ba1\u7b97\u7684\u7ed3\u679c\u603b\u6570 (\u5faa\u73af\u6b21\u6570)\n# x11 (k):        \u5faa\u73af\u8ba1\u6570\u5668 (0 to N-1)\n\n# \u6d6e\u70b9\u5bc4\u5b58\u5668:\n# f0-f7: \u52a0\u8f7d L0-L3, CL0-CL3 \u6216 R0-R3, CR0-CR3\n# f16-f19: \u4e34\u65f6\u4e58\u79ef\n# f20: SumL\n# f21: SumR\n# f22: Result (SumL * SumR)\n\ncalculate_scalar_new_task:\n    mv   x15, x5   # RtiPL_base\n    mv   x16, x6   # RtiPR_base\n    mv   x17, x7   # RclL_base\n    mv   x18, x8   # RclR_base\n    mv   x19, x9   # RclP_base\n\n    mv   x11, zero # k = 0\n\nloop_scalar_outer:\n    bge  x11, x10, loop_scalar_outer_end # \u68c0\u67e5 k &lt; N\n\n    # \u8ba1\u7b97 SumL , RtiPL_curr = RtiPL_base + k*16\n    slli x20, x11, 4      # x20 = k * 16 (16 bytes = 4 floats)\n    add  x21, x15, x20   # x21 = RtiPL_base + k*16\n    add  x22, x17, x20   # x22 = RclL_base + k*16\n\n    flw  f0, 0(x21)      # L0 = RtiPL[k*4+0]\n    flw  f1, 0(x22)      # CL0 = RclL[k*4+0]\n    flw  f2, 4(x21)      # L1 = RtiPL[k*4+1]\n    flw  f3, 4(x22)      # CL1 = RclL[k*4+1]\n    flw  f4, 8(x21)      # L2 = RtiPL[k*4+2]\n    flw  f5, 8(x22)      # CL2 = RclL[k*4+2]\n    flw  f6, 12(x21)     # L3 = RtiPL[k*4+3]\n    flw  f7, 12(x22)     # CL3 = RclL[k*4+3]\n\n    fmul.s f16, f0, f1    # L0*CL0\n    fmul.s f17, f2, f3    # L1*CL1\n    fmul.s f18, f4, f5    # L2*CL2\n    fmul.s f19, f6, f7    # L3*CL3\n\n    fadd.s f20, f16, f17  # (L0*CL0) + (L1*CL1)\n    fadd.s f20, f20, f18  # SumL_tmp + (L2*CL2)\n    fadd.s f20, f20, f19  # SumL = SumL_tmp + (L3*CL3)\n\n    # \u8ba1\u7b97 SumR\n    # RtiPR_curr = RtiPR_base + k*16\n    # RclR_curr  = RclR_base + k*16\n    add  x21, x16, x20   # x21 = RtiPR_base + k*16\n    add  x22, x18, x20   # x22 = RclR_base + k*16\n\n    flw  f0, 0(x21)      # R0\n    flw  f1, 0(x22)      # CR0\n    flw  f2, 4(x21)      # R1\n    flw  f3, 4(x22)      # CR1\n    flw  f4, 8(x21)      # R2\n    flw  f5, 8(x22)      # CR2\n    flw  f6, 12(x21)     # R3\n    flw  f7, 12(x22)     # CR3\n\n    fmul.s f16, f0, f1    # R0*CR0\n    fmul.s f17, f2, f3    # R1*CR1\n    fmul.s f18, f4, f5    # R2*CR2\n    fmul.s f19, f6, f7    # R3*CR3\n\n    fadd.s f21, f16, f17\n    fadd.s f21, f21, f18\n    fadd.s f21, f21, f19  # SumR\n\n    # \u8ba1\u7b97 Result = SumL * SumR\n    fmul.s f22, f20, f21  # Result\n\n    # \u5b58\u50a8 Result\n    # RclP_curr = RclP_base + k*4\n    slli x20, x11, 2      # x20 = k * 4 (4 bytes per float result)\n    add  x21, x19, x20   # x21 = RclP_base + k*4\n    fsw  f22, 0(x21)     # RclP[k] = Result\n\n    # \u66f4\u65b0\u5faa\u73af\u8ba1\u6570\u5668\n    addi x11, x11, 1      # k++\n    jal    loop_scalar_outer\n\nloop_scalar_outer_end:\n    ret\n</code></pre> <ul> <li>RV64V</li> </ul> <pre><code># \u5047\u8bbe\u7684\u5bc4\u5b58\u5668\u5206\u914d:\n# x5 (RtiPL_base): RtiPL \u7684\u57fa\u5730\u5740\n# x6 (RtiPR_base): RtiPR \u7684\u57fa\u5730\u5740\n# x7 (RclL_base):  RclL  \u7684\u57fa\u5730\u5740\n# x8 (RclR_base):  RclR  \u7684\u57fa\u5730\u5740\n# x9 (RclP_base):  RclP  \u7684\u57fa\u5730\u5740\n# x10 (N):         \u8981\u8ba1\u7b97\u7684\u7ed3\u679c\u603b\u6570 (\u5faa\u73af\u6b21\u6570)\n# x11 (k):         \u5faa\u73af\u8ba1\u6570\u5668 (0 to N-1)\n\n# \u5411\u91cf\u5bc4\u5b58\u5668:\n# v0: \u7528\u4e8e\u52a0\u8f7d L0-L3 \u6216 R0-R3\n# v1: \u7528\u4e8e\u52a0\u8f7d CL0-CL3 \u6216 CR0-CR3\n# v2: \u7528\u4e8e\u5b58\u50a8 v0 * v1 (\u5143\u7d20\u4e58\u79ef)\n\n# \u6d6e\u70b9\u5bc4\u5b58\u5668:\n# f20: SumL\n# f21: SumR\n# f22: Result (SumL * SumR)\n\ncalculate_vector_new_task:\n    mv   x11, zero # k = 0\n    li   t0, 4             # \u6211\u4eec\u8981\u5904\u74064\u4e2a\u5143\u7d20\n\nloop_vector_outer:\n    bge  x11, x10, loop_vector_outer_end # \u68c0\u67e5 k &lt; N\n\n    # \u8ba1\u7b97 SumL\n    # \u5730\u5740\u8ba1\u7b97: RtiPL_curr = RtiPL_base + k*16\n    slli x20, x11, 4      # x20 = k * 16 (bytes)\n    add  x21, x5, x20    # x21 = RtiPL_base + k*16\n    add  x22, x7, x20    # x22 = RclL_base + k*16\n\n    vld v0, (x21)     # v0 = {L0, L1, L2, L3}\n    vld v1, (x22)     # v1 = {CL0, CL1, CL2, CL3}\n\n    vfmul v2, v0, v1   # v2 = {L0*CL0, L1*CL1, L2*CL2, L3*CL3}\n    vsum f20, v2          # f20 = SumL = sum(v2 elements)\n\n    # \u8ba1\u7b97 SumR\n    # \u5730\u5740\u8ba1\u7b97: RtiPR_curr = RtiPR_base + k*16\n    add  x21, x6, x20    # x21 = RtiPR_base + k*16\n    add  x22, x8, x20    # x22 = RclR_base + k*16\n\n    vld v0, (x21)     # v0 = {R0, R1, R2, R3}\n    vld v1, (x22)     # v1 = {CR0, CR1, CR2, CR3}\n\n    vfmul v2, v0, v1   # v2[i] = v0[i] * v1[i]\n    vsum f21, v2          # f21 = SumR = sum(v2 elements)\n\n    # \u8ba1\u7b97 Result = SumL * SumR\n    fmul.s f22, f20, f21  # Result\n\n    # \u5b58\u50a8 Result\n    # RclP_curr = RclP_base + k*4\n    slli x20, x11, 2      # x20 = k * 4 (bytes)\n    add  x21, x9, x20    # x21 = RclP_base + k*4\n    fsw  f22, 0(x21)     # RclP[k] = Result\n\n    # \u66f4\u65b0\u5faa\u73af\u8ba1\u6570\u5668\n    addi x11, x11, 1      # k++\n    jal    loop_vector_outer\n\nloop_vector_outer_end:\n    ret\n</code></pre>"},{"location":"Computer_Science/CA/homework/#43","title":"4.3","text":"Question <p>Assume that the vector reduction instruction is executed on the vector functional unit, similar to a vector add instruction. Show how the code sequence lays out in convoys assuming a single instance of each vector functional unit. How many chimes will the code require? How many cycles per FLOP are needed, ignoring vector instruction issue overhead?</p> answer <p>\u4e00\u4e2a convoy \u5305\u542b\u5728\u540c\u4e00\u4e2a chime \u5185\u5f00\u59cb\u6267\u884c\u7684\u6307\u4ee4\u3002\u3001\u6240\u4ee5\u540c\u4e00 convoy \u5185\u7684\u6307\u4ee4\u4e0d\u80fd\u6709\u6570\u636e\u4f9d\u8d56\u3002\u7531\u4e8e\u6bcf\u79cd VFU \u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u6240\u4ee5\u540c\u4e00 convoy \u5185\u6700\u591a\u53ea\u80fd\u6709\u4e00\u6761\u6307\u4ee4\u4f7f\u7528\u7279\u5b9a\u7c7b\u578b\u7684 VFU\u3002</p> Chime \u6307\u4ee4 \u4f7f\u7528\u7684 VFU 1 I1: vld v_L0_data, (addr_L0) VLU 2 I2: vld v_CL0_data, (addr_CL0) VLU I3: vfmul v_ProdL, v_L0_data, v_CL0_data VMU I4: vsum f20, v_ProdL VRU 3 I5: vld v_R0_data, (addr_R0) VLU 4 I6: vld v_CR0_data, (addr_CR0) VLU I7: vfmul v_ProdR, v_R0_data, v_CR0_data VMU I8: vsum f21, v_ProdR VRU <p>\u8fd9\u6837\u7684\u5faa\u73af\u662f 4 \u6b21\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u4e24\u4e2a vld \u6307\u4ee4\u628a\u539f\u59cb\u6570\u636e load \u8fdb\u6765\u3002\u6240\u4ee5\u4e00\u5171\u662f 4 * 4 + 2 = 18 \u4e2a Chime\u3002</p> <p>\u5728\u6bcf\u4e2a\u5916\u5c42\u5faa\u73af\u8fed\u4ee3\u4e2d\uff08\u5373\u8ba1\u7b97\u4e00\u4e2a\u6700\u7ec8 <code>Result</code> \u7684\u8fc7\u7a0b\uff09\uff0c\u6267\u884c\u7684\u6d6e\u70b9\u8fd0\u7b97\u5982\u4e0b\uff1a</p> <ul> <li>I3 \u662f\u4e00\u4e2a\u5411\u91cf\u4e58\u6cd5\u3002\u5411\u91cf\u957f\u5ea6\u662f4\uff0c\u5219\u6267\u884c 4 \u6b21\u6d6e\u70b9\u4e58\u6cd5\u3002 (4 FLOPs)</li> <li>I4 \u662f\u4e00\u4e2a\u5411\u91cf\u5f52\u7ea6\u6c42\u548c\u3002\u5c06 4 \u4e2a\u5143\u7d20\u76f8\u52a0\u9700\u8981 3 \u6b21\u6d6e\u70b9\u52a0\u6cd5\u3002 (3 FLOPs)</li> <li>I7 \u540c I3\uff0c\u6267\u884c 4 \u6b21\u6d6e\u70b9\u4e58\u6cd5\u3002 (4 FLOPs)</li> <li>I8 \u540c I4\uff0c\u6267\u884c 3 \u6b21\u6d6e\u70b9\u52a0\u6cd5\u3002 (3 FLOPs)</li> <li>\u5728\u8fd9\u4e9b\u5411\u91cf\u64cd\u4f5c\u4e4b\u540e\uff0c\u8fd8\u6709\u4e00\u4e2a\u6807\u91cf\u6d6e\u70b9\u4e58\u6cd5\u7528\u4e8e\u8ba1\u7b97\u6700\u7ec8\u7ed3\u679c\u3002 (1 FLOP)</li> </ul> <p>\u56e0\u6b64\uff0c\u6bcf\u6b21\u5916\u5c42\u5faa\u73af\u8fed\u4ee3\u7684\u603b FLOPs = 4 (vfmul) + 3 (vsum) + 4 (vfmul) + 3 (vsum) + 1 (fmul.s) = 15 FLOPs\u3002</p> <p>\u7531\u6b64\u53ef\u4ee5\u8ba1\u7b97\u51fa 18 / 15 = 1.2 \u4e2a Chime \u53ef\u4ee5\u5e76\u884c\u6267\u884c\uff0c\u5373\u6bcf\u4e2a Chime \u53ef\u4ee5\u6267\u884c 15/18 = 5/6 \u4e2a FLOPs\u3002</p>"},{"location":"Computer_Science/CA/homework/#45","title":"4.5","text":"Question <p>Now assume we want to implement the MrBayes kernel on a GPU using a single thread block. Rewrite the C code of the kernel using CUDA. Assume that pointers to the conditional likelihood and transition probability tables are specified as parameters to the kernel. Invoke one thread for each iteration of the loop. Load any reused values into shared memory before performing operations on it.</p> answer <p>\u6211\u4eec\u9700\u8981\u628a\u4e00\u4e2a\u4e32\u884c\u7684 C \u5faa\u73af\uff0c\u5e76\u884c\u5316\u5230 GPU \u7684\u4e00\u4e2a\u7ebf\u7a0b\u5757\u4e2d\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5904\u7406\u539f\u5faa\u73af\u7684\u4e00\u6b21\u8fed\u4ee3\uff0c\u5e76\u5229\u7528\u5171\u4eab\u5185\u5b58\u4f18\u5316\u6570\u636e\u8bbf\u95ee\u3002</p> <pre><code>#define N_STATES 4\n\nint k = threadIdx.x; // \u6bcf\u4e2a\u7ebf\u7a0b\u5904\u7406\u4e00\u4e2a k\n\n__shared__ float s_clL_cache[MAX_THREADS_PER_BLOCK_DEFINE * N_STATES];\n__shared__ float s_clR_cache[MAX_THREADS_PER_BLOCK_DEFINE * N_STATES];\n\nfloat local_clL[N_STATES];\nfloat local_clR[N_STATES];\n\n# 1. \u6bcf\u4e2a\u7ebf\u7a0b\u52a0\u8f7d\u5176\u6240\u9700\u7684 clL \u548c clR \u503c\u5230\u5c40\u90e8\u6570\u7ec4\nfor (int i = 0; i &lt; N_STATES; ++i) {\n    local_clL[i] = clL_global[k * N_STATES + i];\n    local_clR[i] = clR_global[k * N_STATES + i];\n}\n\n# \u6839\u636e 4.1 \u5f97\u77e5\nconst int A_idx = 0, C_idx = 1, G_idx = 2, T_idx = 3;\nconst int AA = 0, AC = 1, AG = 2, AT = 3;\nconst int CA = 4, CC = 5, CG = 6, CT = 7;\nconst int GA = 8, GC = 9, GG = 10, GT = 11;\nconst int TA = 12, TC = 13, TG = 14, TT = 15;\n\n# 2. \u8ba1\u7b97 clP \u7684\u56db\u4e2a\u90e8\u5206\nfloat sumL, sumR;\n\n# \u8ba1\u7b97 clP[k*4 + A_idx] (\u7236\u72b6\u6001 A)\nsumL = tiPL_global[k * (N_STATES*N_STATES) + AA] * local_clL[A_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + AC] * local_clL[C_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + AG] * local_clL[G_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + AT] * local_clL[T_idx];\nsumR = tiPR_global[k * (N_STATES*N_STATES) + AA] * local_clR[A_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + AC] * local_clR[C_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + AG] * local_clR[G_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + AT] * local_clR[T_idx];\nclP_global[k * N_STATES + A_idx] = sumL * sumR;\n\n# \u8ba1\u7b97 clP[k*4 + C_idx] (\u7236\u72b6\u6001 C)\nsumL = tiPL_global[k * (N_STATES*N_STATES) + CA] * local_clL[A_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + CC] * local_clL[C_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + CG] * local_clL[G_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + CT] * local_clL[T_idx];\nsumR = tiPR_global[k * (N_STATES*N_STATES) + CA] * local_clR[A_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + CC] * local_clR[C_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + CG] * local_clR[G_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + CT] * local_clR[T_idx];\nclP_global[k * N_STATES + C_idx] = sumL * sumR;\n\n# \u8ba1\u7b97 clP[k*4 + G_idx] (\u7236\u72b6\u6001 G)\nsumL = tiPL_global[k * (N_STATES*N_STATES) + GA] * local_clL[A_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + GC] * local_clL[C_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + GG] * local_clL[G_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + GT] * local_clL[T_idx];\nsumR = tiPR_global[k * (N_STATES*N_STATES) + GA] * local_clR[A_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + GC] * local_clR[C_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + GG] * local_clR[G_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + GT] * local_clR[T_idx];\nclP_global[k * N_STATES + G_idx] = sumL * sumR;\n\n# \u8ba1\u7b97 clP[k*4 + T_idx] (\u7236\u72b6\u6001 T)\nsumL = tiPL_global[k * (N_STATES*N_STATES) + TA] * local_clL[A_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + TC] * local_clL[C_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + TG] * local_clL[G_idx] +\n       tiPL_global[k * (N_STATES*N_STATES) + TT] * local_clL[T_idx];\nsumR = tiPR_global[k * (N_STATES*N_STATES) + TA] * local_clR[A_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + TC] * local_clR[C_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + TG] * local_clR[G_idx] +\n       tiPR_global[k * (N_STATES*N_STATES) + TT] * local_clR[T_idx];\nclP_global[k * N_STATES + T_idx] = sumL * sumR;\n</code></pre> <p>\u5047\u8bbe <code>tiPL_global</code> \u548c <code>tiPR_global</code> \u662f\u8fd9\u6837\u7ec4\u7ec7\u7684\uff1a\u5bf9\u4e8e\u6bcf\u4e2a <code>k</code> (\u4f4d\u70b9/\u8282\u70b9)\uff0c\u90fd\u6709\u4e00\u5f20 <code>N_STATES x N_STATES</code> \u7684\u8f6c\u79fb\u6982\u7387\u8868\u3002\u56e0\u6b64\uff0c\u7b2c <code>k</code> \u4e2a\u8fd9\u6837\u7684\u8868\uff08\u5c55\u5e73\u540e\uff09\u7684\u8d77\u59cb\u4f4d\u7f6e\u662f <code>k * (N_STATES*N_STATES)</code>\u3002\u7136\u540e\uff0c<code>AA, AC, ..., TT</code> (\u5373 0 \u5230 15) \u662f\u8fd9\u5f20\u5c0f\u8868\u5185\u7684\u7d22\u5f15\u3002</p> <p>\u6240\u4ee5\uff0c<code>tiPL_global[k * (N_STATES*N_STATES) + AA]</code> \u610f\u5473\u7740\u8df3\u8f6c\u5230\u7b2c k \u5f20\u8f6c\u79fb\u6982\u7387\u5b50\u8868\u3002\u5728\u8be5\u5b50\u8868\u4e2d\uff0c\u4f7f\u7528\u50cf <code>AA</code> (parent_state_A_to_child_state_A) \u8fd9\u6837\u7684\u7d22\u5f15\u3002</p>"},{"location":"Computer_Science/CA/homework/#47","title":"4.7","text":"Question <p>Convert your code from Exercise 4.6 into PTX code. How many instructions are needed for the kernel?</p> <p>4.6</p> <p>With CUDA we can use coarse-grain parallelism at the block level to compute the conditional likelihood of multiple nodes in parallel. Assume that we want to compute the conditional likelihood from the bottom of the tree up. Assume seq_length \u00bc\u00bc 500 for all notes and that the group of tables for each of the 12 leaf nodes is stored in consecutive memory locations in the order of node number (e.g., the mth element of clP on node n is at clP [n4seq_length +m*4]). Assume that we want to compute the conditional likelihood for nodes 12\u201317, as shown in Figure 4.35. Change the method by which you compute the array indices in your answer from Exercise 4.5 to include the block number.</p> <p>4.5 </p> <p>Now assume we want to implement the MrBayes kernel on a GPU using a single thread block. Rewrite the C code of the kernel using CUDA. Assume that pointers to the conditional likelihood and transition probability tables are specified as parameters to the kernel. Invoke one thread for each iteration of the loop. Load any reused values into shared memory before performing operations on it.</p> <p></p> answer <p>\u5bf9\u4e8e 4.6</p> <pre><code>// \u6bcf\u4e2a\u5757\u8ba1\u7b97\u4e00\u4e2a\u8282\u70b9 (12-17)\nint node_index_in_batch = blockIdx.x; // 0 to 5\nint actual_node_id = 12 + node_index_in_batch; // \u5f53\u524d\u5757\u5904\u7406\u7684\u5b9e\u9645\u8282\u70b9ID (12 to 17)\n\n// \u5171\u4eab\u5185\u5b58\uff1a\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u7684 tiPL \u548c tiPR (\u6bcf\u4e2a16\u4e2afloat)\u3002\u8fd9\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u4f4d\u70b9\u8ba1\u7b97\u662f\u590d\u7528\u7684\u3002\n__shared__ float s_tiPL_branch[N_STATES * N_STATES];\n__shared__ float s_tiPR_branch[N_STATES * N_STATES];\n\n// \u7b2c\u4e00\u4e2a\u7ebf\u7a0b (threadIdx.x == 0) \u6216\u5757\u5185\u5c11\u91cf\u7ebf\u7a0b\u8d1f\u8d23\u52a0\u8f7d\nif (threadIdx.x &lt; (N_STATES * N_STATES)) {\n    int offset = threadIdx.x;\n\n    // \u9700\u8981\u77e5\u9053\u5982\u4f55\u4ece tiP_L_all_branches \u4e2d\u4e3a\u5f53\u524d node_index_in_batch \u63d0\u53d6\u6b63\u786e\u768416\u4e2a\u6d6e\u70b9\u6570\u3002\u5047\u8bbe tiP_L_all_branches[branch_idx * 16 + offset]\u3002branch_idx \u53ef\u4ee5\u662f node_index_in_batch\n    s_tiPL_branch[offset] = tiP_L_all_branches[node_index_in_batch * (N_STATES*N_STATES) + offset];\n    s_tiPR_branch[offset] = tiP_R_all_branches[node_index_in_batch * (N_STATES*N_STATES) + offset];\n}\n__syncthreads(); // \u786e\u4fdd\u6240\u6709\u7ebf\u7a0b\u770b\u5230\u52a0\u8f7d\u5230\u5171\u4eab\u5185\u5b58\u7684\u8f6c\u79fb\u6982\u7387\n\nif (site_idx &lt; seq_length) {\n    // \u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u3001\u5f53\u524d\u4f4d\u70b9\u7684 clP, clL, clR \u7684\u5730\u5740\n    // \u7d22\u5f15\u516c\u5f0f\uff1aclP[n*4*seq_length + m*4] -&gt; clP[actual_node_id * N_STATES * seq_length + site_idx * N_STATES]\n\n    long long clP_node_base_offset = (long long)actual_node_id * N_STATES * seq_length;\n    float* clP_site_ptr = clP_global_base + clP_node_base_offset + (long long)site_idx * N_STATES;\n\n    // \u83b7\u53d6\u5b50\u8282\u70b9\u7684 ID\n    int left_child_node_id  = child_node_indices[node_index_in_batch * 2 + 0];\n    int right_child_node_id = child_node_indices[node_index_in_batch * 2 + 1];\n\n    long long clL_node_base_offset = (long long)left_child_node_id * N_STATES * seq_length;\n    const float* clL_site_ptr = clL_global_base + clL_node_base_offset + (long long)site_idx * N_STATES;\n\n    long long clR_node_base_offset = (long long)right_child_node_id * N_STATES * seq_length;\n    const float* clR_site_ptr = clR_global_base + clR_node_base_offset + (long long)site_idx * N_STATES;\n\n    // \u8c03\u7528\u5355\u4e00\u4f4d\u70b9\u8ba1\u7b97\u51fd\u6570\uff0c\u4f20\u5165\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u8f6c\u79fb\u6982\u7387\n    calculate_one_site_likelihoods(clP_site_ptr, clL_site_ptr, clR_site_ptr,s_tiPL_branch, s_tiPR_branch);\n}\n</code></pre> <p>\u5bf9\u4e8e 4.7</p> <ol> <li>\u52a0\u8f7d clL[k4] \u5230 clL[k4+3] \u548c clR[k4] \u5230 clR[k4+3] \u5230\u5171\u4eab\u5185\u5b58 clL_s[0..3] \u548c clR_s[0..3]\u3002</li> </ol> <ul> <li>\u8ba1\u7b97 clL \u7684\u57fa\u5730\u5740\uff1a 5\u6761 mul, add, ld \u6307\u4ee4\u3002</li> <li>\u8ba1\u7b97 clR \u7684\u57fa\u5730\u5740\uff1a 5 \u6761\u6307\u4ee4\u3002</li> <li>\u4ece\u5168\u5c40\u5185\u5b58\u52a0\u8f7d4\u4e2a clL float \u5e76\u5b58\u5165\u5171\u4eab\u5185\u5b58\uff1a4 * (ld.global.f32 + st.shared.f32) = 8\u6761\u6307\u4ee4\u3002</li> <li>\u4ece\u5168\u5c40\u5185\u5b58\u52a0\u8f7d4\u4e2a clR float \u5e76\u5b58\u5165\u5171\u4eab\u5185\u5b58\uff1a4 * (ld.global.f32 + st.shared.f32) = 8\u6761\u6307\u4ee4\u3002</li> <li>5 + 5 + 8 + 8 = 26 \u6761 PTX \u6307\u4ee4\u3002</li> </ul> <ol> <li>\u52a0\u8f7d tiPL \u548c tiPR (\u540416\u4e2afloat) \u5230\u5bc4\u5b58\u5668\uff0c\u5e76\u4ece\u5171\u4eab\u5185\u5b58\u52a0\u8f7d clL_s, clR_s \u5230\u5bc4\u5b58\u5668\u3002</li> </ol> <ul> <li>\u8ba1\u7b97 tiPL \u7684\u57fa\u5730\u5740\uff1a 5 \u6761\u6307\u4ee4\u3002</li> <li>\u8ba1\u7b97 tiPR \u7684\u57fa\u5730\u5740\uff1a 5 \u6761\u6307\u4ee4\u3002</li> <li>\u4ece\u5168\u5c40\u5185\u5b58\u52a0\u8f7d16\u4e2a tiPL float \u5230\u5bc4\u5b58\u5668\uff1a16\u6761 ld.global.f32 \u6307\u4ee4\u3002</li> <li>\u4ece\u5168\u5c40\u5185\u5b58\u52a0\u8f7d16\u4e2a tiPR float \u5230\u5bc4\u5b58\u5668\uff1a16\u6761 ld.global.f32 \u6307\u4ee4\u3002</li> <li>\u4ece\u5171\u4eab\u5185\u5b58 clL_s \u52a0\u8f7d4\u4e2afloat\u5230\u5bc4\u5b58\u5668\uff1a4\u6761 ld.shared.f32 \u6307\u4ee4\u3002</li> <li>\u4ece\u5171\u4eab\u5185\u5b58 clR_s \u52a0\u8f7d4\u4e2afloat\u5230\u5bc4\u5b58\u5668\uff1a4\u6761 ld.shared.f32 \u6307\u4ee4\u3002</li> <li>5 + 5 + 16 + 16 + 4 + 4 = 50 \u6761 PTX \u6307\u4ee4\u3002</li> </ul> <ol> <li>\u6838\u5fc3\u8ba1\u7b97\u4e0e\u5b58\u50a8\uff08\u8ba1\u7b974\u4e2a\u7236\u72b6\u6001\u7684 clP \u503c\uff09\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\u72b6\u6001</li> </ol> <ul> <li>\u8ba1\u7b97 sumL \uff1a 4\u6b21\u4e58\u6cd5 (mul.f32) \u548c3\u6b21\u52a0\u6cd5 (add.f32)\u3002\u51717\u6761\u6307\u4ee4\u3002</li> <li>\u8ba1\u7b97 sumR \uff1a\u540c\u6837\u662f4\u6b21\u4e58\u6cd5\u548c3\u6b21\u52a0\u6cd5\u3002\u51717\u6761\u6307\u4ee4\u3002</li> <li>\u8ba1\u7b97 sumL * sumR\uff1a1\u6761 mul.f32 \u6307\u4ee4\u3002</li> <li>\u5c06\u7ed3\u679c\u5b58\u50a8\u5230\u5168\u5c40\u5185\u5b58 clP\uff1a1\u6761 st.global.f32 \u6307\u4ee4\u3002</li> <li>\u6bcf\u4e2a\u7236\u72b6\u6001\u7684\u8ba1\u7b97\u548c\u5b58\u50a8\u603b\u8ba1\uff1a7 + 7 + 1 + 1 = 16 \u6761 PTX \u6307\u4ee4\u3002</li> <li>\u7531\u4e8e\u67094\u4e2a\u7236\u72b6\u6001\uff1a4 * 16 = 64 \u6761 PTX \u6307\u4ee4\u3002</li> </ul> <p>PTX \u7247\u6bb5\u7684\u603b\u6307\u4ee4\u6570\u4f30\u7b97\uff1a</p> <p>\u603b\u8ba1 = 26 + 50 + 64 = 140 \u6761 PTX \u6307\u4ee4\u3002</p>"},{"location":"Computer_Science/CA/homework/#411","title":"4.11","text":"Question <p>Section 4.5 discussed the reduction operation that reduces a vector down to a scalar by repeated application of an operation. A reduction is a special type of a loop recurrence. An example is shown as follows:</p> <p>dot=0.0;</p> <p>for (i=0; i &lt; 64 ; i++) dot = dot + a[i] * b[i];</p> <p>A vectorizing compiler might apply a transformation called scalar expansion, which expands dot into a vector and splits the loop such that the multiply can be performed with a vector operation, leaving the reduction as a separate scalar operation:</p> <p>for (i=0; i &lt; 64;i++) dot[i] = a[i] * b[i];</p> <p>for (i=1; i &lt; 64; i++) dot[0] = dot[0] + dot[i];</p> <p>As mentioned in Section 4.5, if we allow the floating-point addition to be associative, there are several techniques available for parallelizing the reduction.</p> <p>a. One technique is called recurrence doubling, which adds sequences of progressively shorter vectors (ie, two 32-element vectors, then two 16-element vectors, and so on). Show how the C code would look for executing the second loop in this way.</p> <p>b. In some vector processors, the individual elements withinthe vector registers are addressable. In this case, the operands to a vector operation may be two different parts of the same vector register. This allows another solution for the reduction called partial sums. The idea is to reduce the vectortom sums wherem is the total latency through the vector functional unit, including the operand read and write times. Assume that the VMIPS vector registers are addressable (e.g., you can initiate a vector operation with the operand V1(16), indicating that the input operand begins with element 16). Also, assume that the total latency for adds, including the operand read and result write, is eight cycles. Write a VMIPS code sequence that reduces the contents of V1 to eight partial sums.</p> answer <p>a. \u6211\u4eec\u8981\u5bf9 dot \u6570\u7ec4\uff08\u5047\u8bbe\u957f\u5ea6\u4e3a64\uff0c<code>dot[0]</code> \u5230 <code>dot[63]</code>\uff09\u8fdb\u884c\u5f52\u7ea6\u6c42\u548c\uff0c\u5e76\u5c06\u6700\u7ec8\u7ed3\u679c\u7d2f\u52a0\u5230 <code>dot[0]</code>\u3002\u4f7f\u7528\u9012\u5f52\u500d\u589e\u6cd5\uff0c\u6bcf\u6b21\u6211\u4eec\u5c06\u5411\u91cf\u7684\"\u524d\u534a\u90e8\u5206\"\u4e0e\"\u540e\u534a\u90e8\u5206\"\u5bf9\u5e94\u76f8\u52a0\u3002</p> <pre><code>// \u521d\u59cb\u5411\u91cf\u957f\u5ea6\nint N = 64;\n\n// \u9012\u5f52\u500d\u589e\u7684\u5f52\u7ea6\u6c42\u548c\u90e8\u5206\uff0cstride \u4ee3\u8868\u5f53\u524d\u76f8\u52a0\u7684\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6216\u8005\u8bf4\u6bcf\u6b21\u64cd\u4f5c\u540e\u6709\u6548\u6570\u636e\u51cf\u534a\u7684\u6b65\u957f\nfor (int stride = 1; stride &lt; N; stride *= 2) {\n    int current_len = N;\n    while (current_len &gt; 1) {\n        int stride = current_len / 2;\n        for (int i = 0; i &lt; stride; ++i) {\n            dot[i] = dot[i] + dot[i + stride];\n        }\n        current_len /= 2; // \u6709\u6548\u6570\u636e\u957f\u5ea6\u51cf\u534a\n    }\n}\n</code></pre> <p>b. \u6211\u4eec\u8981\u5c06\u5411\u91cf\u5bc4\u5b58\u5668 V1\uff08\u5047\u8bbe\u5305\u542b64\u4e2a\u5143\u7d20\uff09\u7684\u5185\u5bb9\u5f52\u7ea6\u4e3a 8 \u4e2a\u90e8\u5206\u548c\u3002VMIPS \u52a0\u6cd5\u64cd\u4f5c\u7684\u603b\u5ef6\u8fdf\u662f 8 \u4e2a\u5468\u671f\u3002\u601d\u8def\u662f\u5229\u7528\u5411\u91cf\u5bc4\u5b58\u5668\u7684\u53ef\u5bfb\u5740\u6027\uff0c\u5c06 V1 \u5206\u6210 8 \u6bb5\uff0c\u6bcf\u6bb5\u5305\u542b 8 \u4e2a\u5143\u7d20\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06 V1 \u7684\u4e0d\u540c\u90e8\u5206\u8fdb\u884c\u9519\u4f4d\u76f8\u52a0\uff0c\u7ecf\u8fc7\u591a\u6b21\u8fed\u4ee3\uff0c\u4f7f\u5f97\u6bcf\u4e2a\"\u90e8\u5206\u548c\"\u7d2f\u79ef\u5176\u5bf9\u5e94\u6bb5\u7684\u5143\u7d20\u3002\u7531\u4e8e\u5ef6\u8fdf\u662f 8\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u542f\u52a8 8 \u8def\u4e0d\u76f8\u5173\u7684\u52a0\u6cd5\u6d41\uff0c\u5e76\u5c06\u5b83\u4eec\u7684\u7ed3\u679c\u6700\u7ec8\u7d2f\u52a0\u5230 V1 \u7684\u524d 8 \u4e2a\u5143\u7d20\u4e2d\u3002</p> <pre><code>SETVL 8\nADDV V1(0), V1(0), V1(8) # V1[i] = V1[i] + V1[i+8]\nADDV V1(0), V1(0), V1(16) # V1[i] = V1[i] + V1[i+16]\nADDV V1(0), V1(0), V1(24) # V1[i] = V1[i] + V1[i+24]\nADDV V1(0), V1(0), V1(32) # V1[i] = V1[i] + V1[i+32]\nADDV V1(0), V1(0), V1(40) # V1[i] = V1[i] + V1[i+40]\nADDV V1(0), V1(0), V1(48) # V1[i] = V1[i] + V1[i+48]\nADDV V1(0), V1(0), V1(56) # V1[i] = V1[i] + V1[i+56]\n</code></pre> <p>\u6267\u884c\u5b8c\u8fd9\u51e0\u6761\u8bed\u53e5\u540e\uff0cV1(0) \u5230 V1(7) \u5c31\u5305\u542b\u4e86\u6240\u9700\u76848\u4e2a\u90e8\u5206\u548c\u3002</p>"},{"location":"Computer_Science/CA/homework/#414","title":"4.14","text":"Question <p>In this exercise, we will examine several loops and analyze their potential for parallelization.</p> <p>a. Does the following loop have a loop-carried dependency?</p> <pre><code>for (i = 0;i &lt; 100;i++) {\n    A[i] = B[2*i+4];\n    B[4*i+5] = A[i];\n}\n</code></pre> <p>b. In the following loop, find all the true dependences, output dependences, and antidependences. Eliminate the output dependences and antidependences by renaming.</p> <pre><code>for (i=0;i &lt;100;i++) {\n    A[i] = A[i] * B[i]; /* S1 */\n    B[i] = A[i] + c; /* S2 */\n    A[i] = C[i] * c; /* S3 */\n    C[i] = D[i] * A[i]; /* S4 */\n}\n</code></pre> <p>c. Consider the following loop:</p> <pre><code>for (i=0;i &lt; 100;i++) {\n    A[i] = A[i] + B[i]; /* S1 */\n    B[i+1] = C[i] + D[i]; /* S2 */\n}\n</code></pre> <p>Are there dependences between S1 and S2? Is this loop parallel? If not, show how to make it parallel.</p> answer <p>\u662f\u5426\u53ef\u4ee5\u5e76\u884c\u5316\uff0c\u4e3b\u8981\u53d6\u51b3\u4e8e\u662f\u5426\u5b58\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u4f9d\u8d56\u3002</p> <p>\u6570\u636e\u4f9d\u8d56\u7684\u7c7b\u578b\uff1a</p> <ol> <li> <p>\u771f\u4f9d\u8d56 (True Dependence / Flow Dependence / RAW: Read After Write)\uff1a\u4e00\u6761\u8bed\u53e5\u5199\u5165\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\uff0c\u540e\u7eed\u7684\u53e6\u4e00\u6761\u8bed\u53e5\uff08\u6216\u540c\u4e00\u8bed\u53e5\u7684\u540e\u7eed\u8fed\u4ee3\uff09\u8bfb\u53d6\u8be5\u4f4d\u7f6e\u3002</p> </li> <li> <p>\u53cd\u4f9d\u8d56 (Anti-Dependence / WAR: Write After Read)\uff1a\u4e00\u6761\u8bed\u53e5\u8bfb\u53d6\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\uff0c\u540e\u7eed\u7684\u53e6\u4e00\u6761\u8bed\u53e5\uff08\u6216\u540c\u4e00\u8bed\u53e5\u7684\u540e\u7eed\u8fed\u4ee3\uff09\u5199\u5165\u8be5\u4f4d\u7f6e\u3002</p> </li> <li> <p>\u8f93\u51fa\u4f9d\u8d56 (Output Dependence / WAW: Write After Write)\uff1a\u4e24\u6761\u8bed\u53e5\uff08\u6216\u540c\u4e00\u8bed\u53e5\u7684\u4e0d\u540c\u8fed\u4ee3\uff09\u5199\u5165\u540c\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002</p> </li> <li> <p>\u8f93\u5165\u4f9d\u8d56 (Input Dependence / RAR: Read After Read)\uff1a\u4e24\u6761\u8bed\u53e5\uff08\u6216\u540c\u4e00\u8bed\u53e5\u7684\u4e0d\u540c\u8fed\u4ee3\uff09\u8bfb\u53d6\u540c\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002\u8fd9\u901a\u5e38\u4e0d\u5f71\u54cd\u5e76\u884c\u6027\uff0c\u56e0\u4e3a\u8bfb\u53d6\u64cd\u4f5c\u53ef\u4ee5\u5e76\u884c\u8fdb\u884c\u3002</p> </li> <li> <p>\u5faa\u73af\u643a\u5e26\u4f9d\u8d56 (Loop-carried Dependence)\uff1a\u5982\u679c\u4f9d\u8d56\u5173\u7cfb\u8de8\u8d8a\u4e86\u5faa\u73af\u7684\u4e0d\u540c\u8fed\u4ee3\uff0c\u5219\u79f0\u4e3a\u5faa\u73af\u643a\u5e26\u4f9d\u8d56\u3002\u4f8b\u5982\uff0c\u7b2c i \u6b21\u8fed\u4ee3\u5199\u5165\u7684\u503c\u88ab\u7b2c i+1 \u6b21\u8fed\u4ee3\u8bfb\u53d6\u3002</p> </li> </ol> <p>\u7efc\u5408\u4e0a\u8ff0\u6765\u770b\uff0c\u5faa\u73af\u643a\u5e26\u7684\u771f\u4f9d\u8d56\u662f\u5e76\u884c\u5316\u7684\u4e3b\u8981\u969c\u788d\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u770b\u4e0a\u8ff0\u4e09\u79cd\u60c5\u51b5\u4e0b\u3002</p> <p>a. \u7531\u4e8e <code>4*i+5 = 2*j+4</code> \u65e0\u6574\u6570\u89e3\uff0c\u5199\u5165 <code>B</code> \u7684\u4f4d\u7f6e\u4e0e\u8bfb\u53d6 <code>B</code> \u7684\u4f4d\u7f6e\u603b\u662f\u4e0d\u540c\u7684\uff08\u5373\u4f7f\u5728\u4e0d\u540c\u8fed\u4ee3\u4e2d\uff09\u3002\u56e0\u6b64\uff0c\u4e0d\u5b58\u5728\u7531\u6570\u7ec4 <code>B</code> \u5f15\u8d77\u7684\u5faa\u73af\u643a\u5e26\u4f9d\u8d56\u3002\u6240\u4ee5\u53ef\u4ee5\u5e76\u884c\u5316\u3002</p> <p>b. </p> <p>RAW:</p> <ol> <li> <p><code>S1 -&gt; S2</code>: <code>S1</code> \u5199\u5165<code>A[i]</code>\uff0c<code>S2</code> \u8bfb\u53d6 <code>A[i]</code>\u3002</p> </li> <li> <p><code>S3 -&gt; S4</code>: <code>S3</code> \u5199\u5165 A[i]\uff0c<code>S4</code> \u8bfb\u53d6 A[i]\u3002</p> </li> </ol> <p>WAR:</p> <ol> <li> <p><code>S1 -&gt; S3</code>: <code>S1</code> \u8bfb\u53d6 <code>A[i]</code> \uff0c<code>S3</code> \u5199\u5165 <code>A[i]</code>\u3002</p> </li> <li> <p><code>S2 -&gt; S1</code> (\u5bf9\u4e8e <code>B[i]</code>): <code>S1</code> (\u5728\u4e0b\u4e00\u6b21\u8fed\u4ee3) \u8bfb\u53d6 <code>B[i]</code>\uff0c<code>S2</code> \u5199\u5165 <code>B[i]</code>\u3002\u4f46\u8fd9\u91cc <code>S1</code> \u8bfb\u53d6\u7684\u662f\u8fed\u4ee3\u5f00\u59cb\u65f6\u7684 <code>B[i]</code>\uff0c<code>S2</code> \u5199\u5165\u7684\u662f\u672c\u8fed\u4ee3\u7684 <code>B[i]</code>\uff0c\u8fd9\u4e2a <code>B[i]</code> \u4f1a\u88ab\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684 <code>S1</code> \u8bfb\u53d6\u3002\u6240\u4ee5\uff0c<code>S2</code> (\u8fed\u4ee3 <code>i</code>) \u548c <code>S1</code> (\u8fed\u4ee3 <code>i+1</code>) \u4e4b\u95f4\u5b58\u5728\u5faa\u73af\u643a\u5e26\u7684 RAW \u5173\u4e8e <code>B[i]</code>\u3002\u6211\u4eec\u8fd9\u91cc\u5148\u5173\u6ce8\u8fed\u4ee3\u5185\u3002\u5982\u679c\u53ea\u770b\u8fed\u4ee3\u5185\uff0c<code>S1</code> \u8bfb\u53d6 <code>B[i]</code> (\u8f93\u5165\u503c)\uff0c<code>S2</code> \u5199\u5165 <code>B[i]</code>\uff0c\u8fd9\u662f\u8fed\u4ee3\u5185\u7684 <code>S1 -&gt; S2</code> \u53cd\u4f9d\u8d56\u3002</p> </li> <li> <p><code>S3 -&gt; S2</code> (\u5bf9\u4e8e <code>A[i]</code>): <code>S2</code> \u8bfb\u53d6 <code>A[i]</code> (<code>S1</code> \u7684\u7ed3\u679c)\uff0c<code>S3</code> \u5199\u5165 <code>A[i]</code>\u3002</p> </li> <li> <p><code>S4 -&gt; S3</code> (\u5bf9\u4e8e <code>C[i]</code>): <code>S3</code> \u8bfb\u53d6 <code>C[i]</code> \uff0c<code>S4</code> \u5199\u5165 <code>C[i]</code>\u3002</p> </li> </ol> <p>WAW:</p> <p><code>S1 -&gt; S3</code> (\u5bf9\u4e8e <code>A[i]</code>): <code>S1</code> \u5199\u5165 <code>A[i]</code>\uff0c<code>S3</code> \u5199\u5165 <code>A[i]</code>\u3002</p> <pre><code>// \u5bf9\u4e8e\u6bcf\u4e2a i\nA1_i = A_orig_i * B_orig_i; /* S1' (A_orig_i \u662f\u5faa\u73af\u5f00\u59cb\u65f6\u7684 A[i]) */\nB1_i = A1_i + c;            /* S2' */\nA2_i = C_orig_i * c;        /* S3' (C_orig_i \u662f\u5faa\u73af\u5f00\u59cb\u65f6\u7684 C[i]) */\nC1_i = D_orig_i * A2_i;     /* S4' (D_orig_i \u662f\u5faa\u73af\u5f00\u59cb\u65f6\u7684 D[i]) */\n\n// \u66f4\u65b0\u539f\u59cb\u6570\u7ec4\nA[i] = A2_i; // \u6700\u7ec8 A[i] \u7684\u503c\u6765\u81ea S3'\nB[i] = B1_i; // \u6700\u7ec8 B[i] \u7684\u503c\u6765\u81ea S2'\nC[i] = C1_i; // \u6700\u7ec8 C[i] \u7684\u503c\u6765\u81ea S4'\n</code></pre> <p>c. \u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u5faa\u73af\u643a\u5e26\u7684\u771f\u4f9d\u8d56\uff1a<code>S2</code> \u5728\u7b2c <code>i</code> \u6b21\u8fed\u4ee3\u5199\u5165 <code>B[i+1]</code>\uff0c\u800c <code>S1</code> \u5728\u7b2c <code>i+1</code> \u6b21\u8fed\u4ee3\u4f1a\u8bfb\u53d6\u8fd9\u4e2a\u7531\u524d\u4e00\u6b21\u8fed\u4ee3\u7684 <code>S2</code> \u5199\u5165\u7684 <code>B[i+1]</code>\u3002</p> <p>\u7531\u4e8e\u5b58\u5728\u5faa\u73af\u643a\u5e26\u7684\u771f\u4f9d\u8d56\uff0c\u8be5\u5faa\u73af\u672c\u8eab\u4e0d\u80fd\u76f4\u63a5\u5b8c\u5168\u5e76\u884c\u5316\u3002\u7b2c <code>i+1</code> \u6b21\u8fed\u4ee3\u7684 <code>S1</code> \u5fc5\u987b\u7b49\u5f85\u7b2c <code>i</code> \u6b21\u8fed\u4ee3\u7684 <code>S2</code> \u5b8c\u6210\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u7684\u65b9\u5f0f\u6765\u6d88\u9664\u8fd9\u4e2a\u4f9d\u8d56\u3002</p>"},{"location":"Computer_Science/CA/homework/#_5","title":"\u7b2c\u4e94\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/CA/homework/#51","title":"5.1","text":"Question <p>For each part of this exercise, the initial cache and memory state are assumed to initially have the contents shown in Figure 5.37. Each part of this exercise specifies a sequence of one or more CPU operations of the form</p> <p></p> <pre><code>Ccore#: R, &lt;address&gt; for reads\n\nand\n\nCcore#: W, &lt;address&gt; &lt;-- &lt;value written&gt; for writes.\n\nFor example,\n\nC3: R, AC10 &amp; C0: W, AC18 &lt;-- 0018\n</code></pre> <p>Read and write operations are for 1 byte at a time. Show the resulting state (i.e., coherence state, tags, and data) of the caches and memory after the actions given below. Show only the cache lines that experience some state change; for example:</p> <p><code>C0.L0: (I, AC20, 0001)</code> indicates that line 0 in core 0 assumes an \"invalid\" coherence state (I), stores <code>AC20</code> from the memory, and has data contents 0001. Furthermore, represent any changes to the memory state as <code>M: &lt;address&gt; &lt;\u2013 value</code>.</p> <p>Different parts (a) through (g) do not depend on one another: assume the actions in all parts are applied to the initial cache and memory states.</p> <p>a. <code>C0: R, AC20</code></p> <p>b. <code>C0: W, AC20 &lt;-- 80</code></p> <p>c. <code>C3: W, AC20 &lt;-- 80</code></p> <p>d. <code>C1: R, AC10</code></p> <p>e. <code>C0: W, AC08 &lt;-- 48</code></p> <p>f. <code>C0: W, AC30 &lt;-- 78</code></p> <p>g. <code>C3: W, AC30 &lt;-- 78</code></p> answer <p>\u5bf9\u4e8e\u6240\u6709\u64cd\u4f5c\uff1a</p> <p>\u8bfb\u547d\u4e2d\uff1a\u5982\u679c\u6570\u636e\u5728\u7f13\u5b58\u4e2d\u4e14\u72b6\u6001\u4e3a <code>M</code> \u6216 <code>S</code>\uff0c\u76f4\u63a5\u8bfb\u53d6\u3002\u72b6\u6001\u4e0d\u53d8\u3002</p> <p>\u8bfb\u672a\u547d\u4e2d\uff1a</p> <ul> <li>\u5982\u679c\u5176\u4ed6\u7f13\u5b58\u6709 <code>M</code> \u72b6\u6001\u7684\u526f\u672c\uff1a\u8be5\u7f13\u5b58\u5c06\u6570\u636e\u5199\u56de\u5185\u5b58\uff0c\u72b6\u6001\u53d8\u4e3a <code>S</code> \uff0c\u8bf7\u6c42\u6838\u5fc3\u4ece\u5185\u5b58\u8bfb\u53d6\u6570\u636e\uff0c\u72b6\u6001\u7f6e\u4e3a <code>S</code>\u3002</li> <li>\u5982\u679c\u5176\u4ed6\u7f13\u5b58\u6709 <code>S</code> \u72b6\u6001\u7684\u526f\u672c\u6216\u65e0\u526f\u672c\uff1a\u4ece\u5185\u5b58\u8bfb\u53d6\u6570\u636e\uff0c\u72b6\u6001\u7f6e\u4e3a <code>S</code>\u3002\u5176\u4ed6 <code>S</code> \u72b6\u6001\u526f\u672c\u4fdd\u6301 <code>S</code>\u3002</li> </ul> <p>\u5199\u547d\u4e2d\uff1a</p> <ul> <li>\u5982\u679c\u72b6\u6001\u662f <code>M</code>\uff1a\u76f4\u63a5\u5199\u5165\u3002\u72b6\u6001\u4fdd\u6301 M\u3002</li> <li>\u5982\u679c\u72b6\u6001\u662f <code>S</code>\uff1a\u9700\u8981\u83b7\u5f97\u72ec\u5360\u6743\u3002\u5411\u603b\u7ebf\u5e7f\u64ad\u4e00\u4e2a\"\u4f5c\u5e9f\"\u6216\"\u8bf7\u6c42\u72ec\u5360\"\u6d88\u606f\uff0c\u5176\u4ed6\u62e5\u6709\u8be5\u6570\u636e\u526f\u672c\u7684\u7f13\u5b58\u5c06\u5176\u72b6\u6001\u7f6e\u4e3a <code>I</code>\u3002\u672c\u6838\u5fc3\u7f13\u5b58\u72b6\u6001\u53d8\u4e3a <code>M</code>\uff0c\u7136\u540e\u5199\u5165\u3002</li> </ul> <p>\u5199\u672a\u547d\u4e2d\uff1a</p> <ul> <li>\u9996\u5148\u9700\u8981\u5c06\u5305\u542b\u8be5\u5730\u5740\u7684\u7f13\u5b58\u5757\u52a0\u8f7d\u5230\u7f13\u5b58\u4e2d\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u4e00\u6b21\u8bfb\u672a\u547d\u4e2d\uff08\u53ef\u80fd\u4ece\u5185\u5b58\u6216\u5176\u4ed6\u7f13\u5b58\u83b7\u53d6\u6570\u636e\uff09\u3002</li> <li>\u83b7\u53d6\u6570\u636e\u540e\uff0c\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u5199\u547d\u4e2d\u72b6\u6001 <code>S</code> \u7684\u60c5\u51b5\uff1a\u5c06\u5176\u4ed6\u526f\u672c\u7f6e\u4e3a <code>I</code>\uff0c\u672c\u6838\u5fc3\u72b6\u6001\u7f6e\u4e3a <code>M</code>\uff0c\u7136\u540e\u5199\u5165\u3002</li> <li>\u5982\u679c\u5176\u4ed6\u6838\u5fc3\u6709 <code>M</code> \u72b6\u6001\u526f\u672c\uff1a\u8be5\u6838\u5fc3\u5199\u56de\u6570\u636e\u5230\u5185\u5b58\uff0c\u72b6\u6001\u53d8\u4e3a <code>I</code>\u3002\u8bf7\u6c42\u6838\u5fc3\u4ece\u5185\u5b58\u8bfb\u53d6\uff0c\u7136\u540e\u72b6\u6001\u53d8\u4e3a <code>M</code> \u5e76\u5199\u5165\u3002</li> </ul> <p>a. </p> <ol> <li> <p><code>Core 0</code> \u7f13\u5b58\u672a\u547d\u4e2d\u3002</p> </li> <li> <p>\u8bfb\u8bf7\u6c42 <code>AC20</code>\u3002</p> </li> <li> <p><code>Core 0</code> \u5c06\u6570\u636e\u52a0\u8f7d\u5230\u5176\u4e00\u4e2a\u7f13\u5b58\u884c\u4e2d\u3002\u5047\u8bbe\u66ff\u6362 <code>L0</code> (\u56e0\u4e3a\u5b83\u5f53\u524d\u662f <code>I</code> )\u3002</p> </li> <li> <p><code>Core 0</code> \u4e2d\u8be5\u884c\u7684\u72b6\u6001\u53d8\u4e3a <code>S</code>\u3002</p> </li> <li> <p><code>Core 3</code> \u4e2d <code>C3.L0</code> \u7684\u72b6\u6001\u4fdd\u6301 <code>S</code>\u3002</p> </li> </ol> <ul> <li><code>C0.L0: (S, AC20, 0020)</code></li> </ul> <p>b. </p> <ol> <li> <p><code>Core 0</code> \u7f13\u5b58\u672a\u547d\u4e2d\u3002</p> </li> <li> <p>\u8bfb\u610f\u56fe\u4fee\u6539 <code>AC20</code>\u3002</p> </li> <li> <p><code>C3.L0 (S, AC20, 0020)</code>\u3002\u6536\u5230\u4f5c\u5e9f\u8bf7\u6c42\u540e\uff0c<code>C3.L0</code> \u72b6\u6001\u53d8\u4e3a <code>I</code>\u3002</p> </li> <li> <p><code>Core 0</code> \u4ece\u5185\u5b58\u52a0\u8f7d <code>AC20</code> \u7684\u6570\u636e (0020)\u3002</p> </li> <li> <p><code>Core 0</code> \u5c06\u5176\u7f13\u5b58\u884c (\u5047\u8bbe L0) \u72b6\u6001\u7f6e\u4e3a <code>M</code>\uff0c\u5e76\u5c06\u6570\u636e\u5199\u5165\u3002</p> </li> </ol> <ul> <li><code>C0.L0: (M, AC20, 0080)</code></li> <li><code>C3.L0: (I, AC20, 0020)</code></li> </ul> <p>c. </p> <ol> <li> <p><code>C3.L0 (S, AC20, 0020)</code>\u3002\u5199\u547d\u4e2d\u5e76\u4e14\u662f <code>S</code> \u72b6\u6001\u3002</p> </li> <li> <p><code>Core 3</code> \u9700\u8981\u5c06\u6b64\u884c\u5347\u7ea7\u4e3a <code>M</code> \u72b6\u6001\uff0c\u5e76\u4f7f\u5176\u4ed6\u6838\u5fc3\u7684\u526f\u672c\u65e0\u6548\u3002</p> </li> <li> <p><code>Core 3</code> \u7684 <code>C3.L0</code> \u72b6\u6001\u4ece <code>S</code> \u53d8\u4e3a <code>M</code>\uff0c\u5e76\u5c06\u6570\u636e <code>80</code> \u5199\u5165 <code>C3.L0</code>\u3002</p> </li> </ol> <ul> <li><code>C3.L0: (M, AC20, 0080)</code></li> </ul> <p>d.</p> <ol> <li> <p><code>Core 1</code> \u7f13\u5b58\u672a\u547d\u4e2d\u3002</p> </li> <li> <p><code>C0.L2 (M, AC10, 0030)</code>\u3002\u547d\u4e2d<code>M</code> \u72b6\u6001\u3002</p> </li> <li> <p><code>M: AC10 &lt;-- 0030</code> \u5c06\u5185\u5b58\u4e2d <code>AC10</code> \u4ece <code>0010</code> \u66f4\u65b0\u4e3a <code>0030</code>\u3002</p> </li> <li> <p><code>Core 0</code> \u7684 <code>C0.L2</code> \u72b6\u6001\u4ece <code>M</code> \u53d8\u4e3a <code>S</code>\u3002</p> </li> <li> <p><code>Core 1</code> \u4ece\u5185\u5b58\u52a0\u8f7d\u6570\u636e\uff0c\u5c06\u6570\u636e\u52a0\u8f7d\u5230\u5176\u4e00\u4e2a\u7f13\u5b58\u884c\u4e2d\uff0c\u66ff\u6362\u539f\u6765\u7684\u65e0\u6548\u884c\uff0c\u8be5\u884c\u7684\u72b6\u6001\u53d8\u4e3a <code>S</code>\u3002</p> </li> </ol> <ul> <li><code>M: AC10 &lt;-- 0030</code></li> <li><code>C0.L2: (S, AC10, 0030)</code></li> <li><code>C1.L2: (S, AC10, 0030)</code></li> </ul> <p>e. </p> <ol> <li> <p><code>C0.L1 (S, AC08, 0008)</code>\u3002\u547d\u4e2d <code>S</code> \u72b6\u6001\u3002</p> </li> <li> <p><code>Core 0</code> \u5c06\u6b64\u884c\u5347\u7ea7\u4e3a <code>M</code> \u72b6\u6001\uff0c\u5e76\u4f7f\u5176\u4ed6\u6838\u5fc3\u7684\u526f\u672c\u65e0\u6548\u3002<code>Core 3</code> \u6536\u5230\u4f5c\u5e9f\u8bf7\u6c42\u540e\uff0c<code>C3.L1</code> \u72b6\u6001\u53d8\u4e3a <code>I</code>\u3002</p> </li> <li> <p><code>Core 0</code> \u7684 <code>C0.L1</code> \u72b6\u6001\u4ece <code>S</code> \u53d8\u4e3a <code>M</code>\uff0c\u5e76\u5c06\u6570\u636e <code>48</code> \u5199\u5165 <code>C0.L1</code>\u3002</p> </li> </ol> <ul> <li><code>C0.L1: (M, AC08, 0048)</code></li> <li><code>C3.L1: (I, AC08, 0008)</code></li> </ul> <p>f. </p> <ol> <li> <p><code>Core 0</code> \u7f13\u5b58\u672a\u547d\u4e2d\u3002</p> </li> <li> <p><code>Core 0</code> \u4ece\u5185\u5b58\u52a0\u8f7d <code>AC30</code> \u7684\u6570\u636e\uff0c\u5c06\u5176\u7f13\u5b58\u884c (\u5047\u8bbe\u66ff\u6362 <code>L0</code>\uff0c\u56e0\u4e3a\u5b83\u521d\u59cb\u662f <code>I</code> ) \u72b6\u6001\u7f6e\u4e3a <code>M</code>\uff0c\u5e76\u5c06\u6570\u636e <code>0078</code> \u5199\u5165\u3002</p> </li> </ol> <ul> <li><code>C0.L0: (M, AC30, 0078)</code></li> </ul> <p>g. </p> <ol> <li> <p><code>Core 3</code> \u7f13\u5b58\u672a\u547d\u4e2d\u3002</p> </li> <li> <p><code>Core 3</code> \u4ece\u5185\u5b58\u52a0\u8f7d <code>AC30</code> \u7684\u6570\u636e\uff0c\u5c06\u5176\u7f13\u5b58\u884c (\u5047\u8bbe\u66ff\u6362 <code>L2</code>\uff0c\u56e0\u4e3a\u5b83\u521d\u59cb\u662f <code>I</code> ) \u72b6\u6001\u7f6e\u4e3a <code>M</code>\uff0c\u5e76\u5c06\u6570\u636e <code>0078</code> \u5199\u5165\u3002</p> </li> </ol> <ul> <li><code>C3.L2: (M, AC30, 0078)</code></li> </ul>"},{"location":"Computer_Science/CA/homework/#52","title":"5.2","text":"Question <p>The performance of a snooping cache-coherent multiprocessor depends on many detailed implementation issues that determine how quickly a cache responds with data in an exclusive or M state block. In some implementations, a processor read miss to a cache block that is exclusive in another processor's cache is faster than a miss to a block in memory. This is because caches are smaller, and thus faster, than main memory. Conversely, in some implementations, misses satisfied by memory are faster than those satisfied by caches. This is because caches are generally optimized for \"front side\" or CPU references, rather than \"back side\" or snooping accesses. For the multiprocessor illustrated in Figure 5.37, consider the execution of a sequence of operations on a single processor core where</p> <p></p> <ul> <li> <p>read and write hits generate no stall cycles;</p> </li> <li> <p>read and write misses generate \\(N_{memory}\\) and \\(N_{cache}\\) stall cycles if satisfied by memory and cache , respectively;</p> </li> <li> <p>write hits that generate an invalidate incur \\(N_{invalidate}\\) stall cycles; and</p> </li> <li> <p>a write-back of a block, either due to a conflict or another processor's request to an exclusive block, incurs an additional \\(N_{writeback}\\) stall cycles.</p> </li> </ul> <p>Consider two implementations with different performance characteristics summarized in Figure 5.38.</p> <p></p> <p>To observe how these cycle values are used, we illustrate how the following sequence of operations, assuming the initial caches\u2019 states in Figure 5.37, behave under implementation 1.</p> <p>C1: R, AC10</p> <p>C3: R, AC10</p> <p>For simplicity, assume that the second operation begins after the first completes, even though they are on different processor cores.</p> <p>For Implementation 1,</p> <ul> <li> <p>the first read generates 50 stall cycles because the read is satisfied by <code>C0</code>'s cache: <code>C1</code> stalls for 40 cycles while it waits for the block, and <code>C0</code> stalls for 10 cycles while it writes the block back to memory in response to <code>C1</code>'s request; and</p> </li> <li> <p>the second read by <code>C3</code> generates 100 stall cycles because its miss is satisfied by memory.</p> </li> </ul> <p>Therefore this sequence generates a total of 150 stall cycles.</p> <p>For the following sequences of operations, how many stall cycles are generated by each implementation?</p> <p>a. </p> <pre><code>C0: R, AC20\nC0: R, AC28\nC0: R, AC30\n</code></pre> <p>b.</p> <pre><code>C0: R, AC00\nC0: W, AC08 &lt;-- 48\nC0: W, AC30 &lt;-- 78\n</code></pre> <p>c. </p> <pre><code>C1: R, AC20\nC1: R, AC28\nC1: R, AC30\n</code></pre> <p>d. </p> <pre><code>C1: R, AC00\nC1: W, AC08 &lt;-- 48\nC1: W, AC30 &lt;-- 78\n</code></pre> answer <p>a. </p> <ol> <li> <p><code>C0</code> \u8bfb\u672a\u547d\u4e2d\u3002<code>C0</code> \u4ece\u5185\u5b58\u52a0\u8f7d <code>AC20</code>\u3002\u505c\u987f <code>N_memory</code> \u3002</p> </li> <li> <p><code>C0</code> \u8bfb\u672a\u547d\u4e2d\u3002<code>C1</code> \u5c06 <code>AC28 (0068)</code> \u5199\u56de\u5185\u5b58\u3002<code>M: AC28 &lt;-- 0068</code>\u3002<code>C1.L1</code> \u72b6\u6001\u53d8\u4e3a <code>S</code>\u3002\u505c\u987f <code>N_writeback</code> \u3002<code>C0</code> \u4ece\uff08\u73b0\u5728\u66f4\u65b0\u7684\uff09\u5185\u5b58\u6216 <code>C1</code> \u7f13\u5b58\u52a0\u8f7d <code>AC28 (0068)</code>\u3002\u505c\u987f <code>N_cache</code> \u4e0e <code>N_writeback</code> \u3002</p> </li> <li> <p><code>C0</code> \u8bfb\u672a\u547d\u4e2d\u3002\u4ece\u5185\u5b58\u52a0\u8f7d <code>AC30</code>\u3002\u505c\u987f <code>N_memory</code> \u3002</p> </li> </ol> <ul> <li>\u5bf9\u4e8e\u5b9e\u73b0 1 \u6765\u8bf4\u603b\u5171 100 + 50 + 10 + 100 = 260 \u5468\u671f\u3002</li> <li>\u5bf9\u4e8e\u5b9e\u73b0 2 \u6765\u8bf4\u603b\u5171 100 + 140 + 10 + 100 = 350 \u5468\u671f\u3002</li> </ul> <p>b. </p> <ol> <li> <p><code>C0</code> \u8bfb\u672a\u547d\u4e2d\u3002\u4ece\u5185\u5b58\u52a0\u8f7d <code>AC00</code>\u3002\u505c\u987f <code>N_memory</code> \u3002</p> </li> <li> <p><code>C0</code> \u5199\u547d\u4e2d <code>S</code> \u6001\u3002<code>C0</code> \u53d1\u9001 <code>Invalidate</code> \u4fe1\u53f7\u3002<code>C3.L1</code> \u53d8\u4e3a <code>I</code> \u6001\u3002\u505c\u987f <code>N_writeback</code> \u3002<code>C0.L1</code> \u53d8\u4e3a <code>M</code> \u6001\u5e76\u5199\u5165\u6570\u636e\u3002\u505c\u987f <code>N_invalidate</code> \u3002</p> </li> <li> <p><code>C0</code> \u5199\u672a\u547d\u4e2d\u3002\u4ece\u5185\u5b58\u52a0\u8f7d <code>AC30</code>\u3002\u505c\u987f <code>N_memory</code> \u3002</p> </li> </ol> <ul> <li>\u5bf9\u4e8e\u5b9e\u73b0 1 \u6765\u8bf4\u603b\u5171 100 + 15 + 10 + 100 = 225 \u5468\u671f\u3002</li> <li>\u5bf9\u4e8e\u5b9e\u73b0 2 \u6765\u8bf4\u603b\u5171 100 + 15 + 10 + 100 = 225 \u5468\u671f\u3002</li> </ul> <p>c. </p> <ol> <li> <p><code>C1</code> \u8bfb\u672a\u547d\u4e2d\u3002<code>C1</code> \u4ece\u5185\u5b58\u52a0\u8f7d <code>AC20</code>\u3002\u505c\u987f <code>N_memory</code> \u3002</p> </li> <li> <p><code>C1</code> \u8bfb\u547d\u4e2d <code>M</code> \u6001\u3002</p> </li> <li> <p><code>C1</code> \u8bfb\u672a\u547d\u4e2d\u3002\u4ece\u5185\u5b58\u52a0\u8f7d <code>AC30</code>\u3002\u505c\u987f <code>N_memory</code> \u3002</p> </li> </ol> <ul> <li>\u5bf9\u4e8e\u5b9e\u73b0 1 \u6765\u8bf4\u603b\u5171 100 + 0 + 100 = 200 \u5468\u671f\u3002</li> <li>\u5bf9\u4e8e\u5b9e\u73b0 2 \u6765\u8bf4\u603b\u5171 100 + 0 + 100 = 200 \u5468\u671f\u3002</li> </ul> <p>d. </p> <ol> <li> <p><code>C1</code> \u8bfb\u672a\u547d\u4e2d\u3002\u4ece\u5185\u5b58\u52a0\u8f7d <code>AC00</code>\u3002\u505c\u987f <code>N_memory</code> \u3002</p> </li> <li> <p><code>C1</code> \u5199\u672a\u547d\u4e2d\u3002<code>C0.L1</code> \u53d8\u4e3a <code>I</code>\u3002<code>C3.L1</code> \u53d8\u4e3a <code>I</code>\u3002\u505c\u987f <code>N_writeback</code> \u3002<code>C1</code> \u4ece\u5185\u5b58\u52a0\u8f7d <code>AC08</code>\uff0c\u5e76\u53d8\u4e3a <code>M</code> \u6001\u3002\u505c\u987f <code>N_memory</code> \u3002</p> </li> <li> <p><code>C1</code> \u5199\u672a\u547d\u4e2d\u3002\u4ece\u5185\u5b58\u52a0\u8f7d <code>AC30</code>\u3002\u505c\u987f <code>N_memory</code> \u3002</p> </li> </ol> <ul> <li>\u5bf9\u4e8e\u5b9e\u73b0 1 \u6765\u8bf4\u603b\u5171 100 + 100 + 10 + 100 = 310 \u5468\u671f\u3002</li> <li>\u5bf9\u4e8e\u5b9e\u73b0 2 \u6765\u8bf4\u603b\u5171 100 + 100 + 10 + 100 = 310 \u5468\u671f\u3002</li> </ul>"},{"location":"Computer_Science/CA/homework/#59","title":"5.9","text":"Question <p>For each part of this exercise, assume that initially all caches lines are invalid, and the data in memory <code>Mi</code> is the byte <code>i (0X00 &lt;= i &lt;= 0x07)</code> repeated as many times as the block size. Assume that successive requests are completely serialized. That is, no core will issue a coherency request until the previous request (by same or different core) is completed.</p> <p>For each of the following parts,</p> <ul> <li> <p>show the final state (i.e., coherence state, sharers/owners, tags, and data) of the caches and directory controller (including data values) after the given transaction sequence has completed; and</p> </li> <li> <p>show the messages transferred (choose a suitable format for message types).</p> </li> </ul> <p>a. </p> <pre><code>C3: R, M4\nC3: R, M2\nC7: W, M4 &lt;--0xaaaa\nC1: W, M4 &lt;--0xbbbb\n</code></pre> <p>b. </p> <pre><code>C3: R, M0\nC3: R, M2\nC6: W, M4 &lt;--0xaaaa\nC3: W, M4 &lt;--0xbbbb\n</code></pre> <p>c. </p> <pre><code>C0: R, M7\nC3: R, M4\nC6: W, M2 &lt;--0xaaaa\nC2: W, M2 &lt;--0xbbbb\n</code></pre> answer <p>\u5b9a\u4e49\u6d88\u606f\u7c7b\u578b\uff1a</p> <ul> <li><code>ReqCore -&gt; Dir: GetS(Address)</code> (\u8bf7\u6c42\u5171\u4eab\u526f\u672c)</li> <li><code>ReqCore -&gt; Dir: GetM(Address)</code> (\u8bf7\u6c42\u72ec\u5360/\u4fee\u6539\u526f\u672c)</li> <li><code>Dir -&gt; ReqCore: DataResp(Address, Data, [Sharers])</code> (\u76ee\u5f55\u54cd\u5e94\u6570\u636e\uff0c\u53ef\u80fd\u662f\u5171\u4eab\u7684)</li> <li><code>Dir -&gt; ReqCore: DataOwnerResp(Address, Data, OwnerID)</code> (\u76ee\u5f55\u54cd\u5e94\u6570\u636e\uff0c\u544a\u77e5\u6240\u6709\u8005\uff0c\u7528\u4e8e\u4fee\u6539)</li> <li><code>Dir -&gt; OwnerCore: FwdGetS(Address, ReqCore)</code> (\u76ee\u5f55\u5c06 <code>GetS</code> \u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5f53\u524d\u6240\u6709\u8005)</li> <li><code>Dir -&gt; OwnerCore: FwdGetM(Address, ReqCore)</code> (\u76ee\u5f55\u5c06 <code>GetM</code> \u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5f53\u524d\u6240\u6709\u8005)</li> <li><code>Dir -&gt; SharerCore: InvReq(Address)</code> (\u76ee\u5f55\u53d1\u9001\u65e0\u6548\u5316\u8bf7\u6c42\u7ed9\u5171\u4eab\u8005)</li> <li><code>SharerCore/OwnerCore -&gt; Dir: InvAck(Address)</code> (\u5171\u4eab\u8005/\u6240\u6709\u8005\u56de\u5e94\u65e0\u6548\u5316\u786e\u8ba4)</li> <li><code>OwnerCore -&gt; Dir: WbReq(Address, Data)</code> (\u6240\u6709\u8005\u5c06\u810f\u5757\u5199\u56de\u5185\u5b58\u7684\u8bf7\u6c42\uff0c\u5e76\u544a\u77e5\u76ee\u5f55)  <code>OwnerCore -&gt; ReqCore: DataFwd(Address, Data)</code> (\u6240\u6709\u8005\u76f4\u63a5\u8f6c\u53d1\u6570\u636e\u7ed9\u8bf7\u6c42\u8005 - \u67d0\u4e9b\u534f\u8bae\u652f\u6301)</li> </ul> <p>\u521d\u59cb\u7cfb\u7edf\u72b6\u6001:</p> <ul> <li>\u6240\u6709\u6838\u5fc3 (C0-C7) \u7684\u6240\u6709\u7f13\u5b58\u884c: \u72b6\u6001 <code>I</code> (\u65e0\u6548), Tag: <code>-</code>, Data: <code>-</code></li> <li> <p>\u76ee\u5f55\u63a7\u5236\u5668 (Directory): \u5bf9\u4e8e\u6240\u6709\u76f8\u5173\u5185\u5b58\u5757 <code>M0, M1, M2, M3, M4, M5, M6, M7</code>:</p> <ul> <li><code>Dir[Mi]</code>: State = <code>U</code> (Uncached), Sharers/Owner = <code>null</code></li> </ul> </li> <li> <p>\u5185\u5b58 (Memory): </p> <ul> <li><code>Mem[M0] = Data_M0_orig</code></li> <li><code>Mem[M1] = Data_M1_orig</code></li> <li><code>Mem[M2] = Data_M2_orig</code></li> <li><code>Mem[M3] = Data_M3_orig</code></li> <li><code>Mem[M4] = Data_M4_orig</code></li> <li><code>Mem[M7] = Data_M7_orig</code></li> </ul> </li> </ul> <p>a. \u5e8f\u5217: <code>C3: R, M4</code> ; <code>C3: R, M2</code> ; <code>C7: W, M4 &lt;--0xaaaa</code> ; <code>C1: W, M4 &lt;--0xbbbb</code></p> <ol> <li>C3 \u7f13\u5b58 M4 Miss\u3002</li> </ol> <p>\u6d88\u606f: <code>C3 -&gt; Dir: GetS(M4)</code></p> <p>\u76ee\u5f55 <code>Dir[M4]</code>: \u72b6\u6001 U\u3002\u76ee\u5f55\u4ece\u5185\u5b58\u83b7\u53d6 M4 (Data_M4_orig)\u3002</p> <p>\u6d88\u606f: <code>Dir -&gt; C3: DataResp(M4, Data_M4_orig)</code></p> <p><code>Dir[M4]</code> \u66f4\u65b0: State = <code>S</code>, Sharers = <code>{C3}</code></p> <p>C3 \u7f13\u5b58 M4: Line <code>Lx</code> \u72b6\u6001\u53d8\u4e3a <code>S</code>, Tag = <code>M4</code>, Data = <code>Data_M4_orig</code></p> <ol> <li>C3 \u7f13\u5b58 M2: Miss\u3002</li> </ol> <p>\u6d88\u606f: <code>C3 -&gt; Dir: GetS(M2)</code></p> <p>\u76ee\u5f55 <code>Dir[M2]</code>: \u72b6\u6001 U\u3002\u76ee\u5f55\u4ece\u5185\u5b58\u83b7\u53d6 M2 (Data_M2_orig)\u3002</p> <p>\u6d88\u606f: <code>Dir -&gt; C3: DataResp(M2, Data_M2_orig)</code></p> <p><code>Dir[M2]</code> \u66f4\u65b0: State = <code>S</code>, Sharers = <code>{C3}</code></p> <p>C3 \u7f13\u5b58 M2: Line <code>Ly</code> \u72b6\u6001\u53d8\u4e3a <code>S</code>, Tag = <code>M2</code>, Data = <code>Data_M2_orig</code></p> <ol> <li>C7 \u7f13\u5b58 M4: Miss\u3002</li> </ol> <p>\u6d88\u606f: <code>C7 -&gt; Dir: GetM(M4)</code></p> <p>\u76ee\u5f55 <code>Dir[M4]</code>: \u72b6\u6001 <code>S</code>, Sharers = <code>{C3}</code>.</p> <p>\u76ee\u5f55\u9700\u8981\u4f7f C3 \u4e2d\u7684\u526f\u672c\u65e0\u6548\u3002</p> <p>\u6d88\u606f: <code>Dir -&gt; C3: InvReq(M4)</code></p> <p>C3 \u6536\u5230 InvReq: C3.Lx (M4) \u72b6\u6001\u53d8\u4e3a <code>I</code></p> <p>\u6d88\u606f: <code>C3 -&gt; Dir: InvAck(M4)</code></p> <p>\u76ee\u5f55\u6536\u5230 C3 \u7684 InvAck\u3002\u4ece\u5185\u5b58\u83b7\u53d6 M4 (Data_M4_orig) \u63d0\u4f9b\u7ed9 C7\uff08\u56e0\u4e3aC7\u662f\u5199\u672a\u547d\u4e2d\uff0c\u9700\u8981\u6570\u636e\u5757\u8fdb\u884c\u4fee\u6539\uff09\u3002</p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C7: DataOwnerResp(M4, Data_M4_orig, C7)</code></p> <p>Dir[M4] \u66f4\u65b0: State = <code>EM</code>, Owner = <code>C7</code></p> <p>C7 \u7f13\u5b58 M4: Line \u72b6\u6001\u53d8\u4e3a <code>M</code>, Tag = <code>M4</code>, Data = <code>Data_M4_aaaa</code> (\u5199\u5165\u65b0\u503c)\uff0c\u5185\u5b58 <code>Mem[M4]</code> \u6b64\u65f6\u662f <code>Data_M4_orig</code> (\u8fc7\u65f6)\u3002</p> <ol> <li>C1 \u7f13\u5b58 M4: Miss\u3002</li> </ol> <p>\u6d88\u606f: <code>C1 -&gt; Dir: GetM(M4)</code></p> <p>\u76ee\u5f55 <code>Dir[M4]</code>: \u72b6\u6001 <code>EM</code>, Owner = <code>C7</code>.</p> <p>\u76ee\u5f55\u9700\u8981\u4ece\u5f53\u524d\u6240\u6709\u8005 C7 \u83b7\u53d6\u6700\u65b0\u6570\u636e\u5e76\u4f7f\u5176\u65e0\u6548\u3002</p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C7: FwdGetM(M4, C1)</code></p> <p>C7 \u6536\u5230 <code>FwdGetM</code>: \u5c06 <code>M4 (Data_M4_aaaa)</code> \u5199\u56de\u5185\u5b58\u3002 <code>Mem[M4]</code> \u66f4\u65b0\u4e3a <code>Data_M4_aaaa</code>.</p> <p>\u6d88\u606f\uff1a <code>C7 -&gt; Dir: WbReq(M4, Data_M4_aaaa)</code> </p> <p>C7.Lz (M4) \u72b6\u6001\u53d8\u4e3a <code>I</code>.</p> <p>\u6d88\u606f\uff1a <code>C7 -&gt; Dir: InvAck(M4)</code></p> <p>\u76ee\u5f55\u6536\u5230 C7 \u7684\u54cd\u5e94\u548c/\u6216\u786e\u8ba4\u5199\u56de\u3002\u73b0\u5728\u5185\u5b58\u62e5\u6709 <code>Data_M4_aaaa</code>\u3002\u76ee\u5f55\u5c06\u5199\u6743\u9650\u548c\u6700\u65b0\u6570\u636e\uff08\u73b0\u5728\u4ece\u5185\u5b58\u8bfb\u53d6\u7684\u662f <code>Data_M4_aaaa</code>\uff09\u6388\u4e88 C1\u3002</p> <p>\u6d88\u606f: <code>Dir -&gt; C1: DataOwnerResp(M4, Data_M4_aaaa, C1)</code></p> <p>Dir[M4] \u66f4\u65b0: State = <code>EM</code>, Owner = <code>C1</code></p> <p>C1 \u7f13\u5b58 M4: Line <code>Lw</code> \u72b6\u6001\u53d8\u4e3a <code>M</code>, Tag = <code>M4</code>, Data = <code>Data_M4_bbbb</code> (\u5199\u5165\u65b0\u503c)</p> <p>\u5185\u5b58 Mem[M4] \u6b64\u65f6\u662f <code>Data_M4_aaaa</code> (\u5728C1\u5199\u5165\u524d\u662f\u8fd9\u4e2a\uff0cC1\u5199\u5165\u540e\uff0c\u5185\u5b58\u76f8\u5bf9\u4e8eC1\u7684M\u526f\u672c\u53c8\u8fc7\u65f6\u4e86)\u3002</p> <p>\u6700\u7ec8\u72b6\u6001 (a):</p> <ul> <li><code>C1</code> : <code>Lw: (M, M4, Data_M4_bbbb)</code></li> <li><code>C3</code> : <code>Lx: (I, M4, Data_M4_orig)</code>, <code>Ly: (S, M2, Data_M4_orig)</code></li> <li><code>C7</code> : <code>Lz: (I, M4, Data_M4_aaaa)</code></li> <li>\u5176\u4ed6\u6838\u5fc3\u7f13\u5b58 <code>M2</code>, <code>M4</code> \u5747\u4e3a <code>I</code></li> <li><code>Dir[M2]</code>: (S, {C3})</li> <li><code>Dir[M4]</code>: (EM, Owner=C1)</li> <li><code>Mem[M4]</code>: <code>Data_M4_aaaa</code></li> <li><code>Mem[M2]</code>: <code>Data_M2_orig</code></li> </ul> <p>\u603b\u7ed3\u6d88\u606f\u5217\u8868\uff1a</p> <ol> <li> <p><code>C3-&gt;Dir: GetS(M4)</code></p> </li> <li> <p><code>Dir-&gt;C3: DataResp(M4, Data_M4_orig)</code></p> </li> <li> <p><code>C3-&gt;Dir: GetM(M2)</code></p> </li> <li> <p><code>Dir-&gt;C3: DataResp(M2, Data_M2_orig)</code></p> </li> <li> <p><code>C7-&gt;Dir: GetM(M4)</code></p> </li> <li> <p><code>Dir-&gt;C3: InvReq(M4)</code></p> </li> <li> <p><code>C3-&gt;Dir: InvAck(M4)</code></p> </li> <li> <p><code>Dir-&gt;C7: DataOwnerResp(M4, Data_M4_orig, C7)</code></p> </li> <li> <p><code>C1-&gt;Dir: GetM(M4)</code></p> </li> <li> <p><code>Dir-&gt;C7: FwdGetM(M4, C1)</code></p> </li> <li> <p><code>C7-&gt;Dir: WbReq(M4, Data_M4_aaaa)</code></p> </li> <li> <p><code>Dir-&gt;C1: DataOwnerResp(M4, Data_M4_aaaa, C1)</code></p> </li> </ol> <p>b. \u5e8f\u5217: <code>C3: R, M0</code> ; <code>C3: R, M2</code> ; <code>C6: W, M4 &lt;--0xaaaa</code> ; <code>C3: W, M4 &lt;--0xbbbb</code></p> <ol> <li>C3 \u7f13\u5b58 M0: Miss</li> </ol> <p>\u6d88\u606f\uff1a <code>C3 -&gt; Dir: GetS(M0)</code></p> <p><code>Dir[M0]: U -&gt; S, Sharers={C3}</code></p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C3: DataResp(M0, Data_M0_orig)</code></p> <p><code>C3.Lx: (S, M0, Data_M0_orig)</code></p> <ol> <li>C3 \u7f13\u5b58 M2: Miss</li> </ol> <p>\u6d88\u606f\uff1a <code>C3 -&gt; Dir: GetS(M2)</code></p> <p><code>Dir[M2]: U -&gt; S, Sharers={C3}</code></p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C3: DataResp(M2, Data_M2_orig)</code></p> <p><code>C3.Ly: (S, M2, Data_M2_orig)</code></p> <ol> <li>C6 \u7f13\u5b58 M4: Miss</li> </ol> <p>\u6d88\u606f\uff1a <code>C6 -&gt; Dir: GetM(M4)</code></p> <p><code>Dir[M4]: U</code> (M4\u6b64\u65f6\u672a\u88ab\u4efb\u4f55\u6838\u5fc3\u7f13\u5b58)</p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C6: DataOwnerResp(M4, Data_M4_orig, C6)</code></p> <p><code>Dir[M4]: U -&gt; EM, Owner=C6</code></p> <p><code>C6.Lz: (M, M4, Data_M4_aaaa)</code></p> <p><code>Mem[M4] = Data_M4_orig (stale)</code></p> <ol> <li>C3 \u7f13\u5b58 M4: Miss</li> </ol> <p>\u6d88\u606f\uff1a <code>C3 -&gt; Dir: GetM(M4)</code></p> <p><code>Dir[M4]: EM, Owner=C6</code></p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C6: FwdGetM(M4, C3)</code></p> <p><code>C6</code> \u6536\u5230 <code>FwdGetM</code>: \u5199\u56de <code>M4 (Data_M4_aaaa)</code> \u5230\u5185\u5b58\u3002<code>Mem[M4]</code> \u66f4\u65b0\u4e3a <code>Data_M4_aaaa</code></p> <p>\u6d88\u606f\uff1a <code>C6 -&gt; Dir: WbReq(M4, Data_M4_aaaa)</code></p> <p><code>C6.Lz (M4)</code> \u72b6\u6001\u53d8\u4e3a <code>I</code></p> <p>\u76ee\u5f55\u6536\u5230 <code>C6</code> \u5199\u56de\u3002</p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C3: DataOwnerResp(M4, Data_M4_aaaa, C3)</code></p> <p><code>Dir[M4]: Owner C6 -&gt; C3. (State remains EM)</code></p> <p><code>C3.Lw: (M, M4, Data_M4_bbbb)</code></p> <p><code>Mem[M4] = Data_M4_aaaa (stale relative to C3's copy)</code></p> <p>\u6700\u7ec8\u72b6\u6001 (b):</p> <ul> <li><code>C3</code> : <code>Lx: (S, M0, Data_M0_orig)</code>, <code>Ly: (S, M2, Data_M2_orig)</code>, <code>Lw: (M, M4, Data_M4_bbbb)</code></li> <li><code>C6</code> : <code>Lz: (I, M4, Data_M4_aaaa)</code></li> <li>\u5176\u4ed6\u6838\u5fc3\u7f13\u5b58 <code>M0</code> , <code>M2</code> , <code>M4</code> \u5747\u4e3a <code>I</code></li> <li><code>Dir[M0]</code>: (S, {C3})</li> <li><code>Dir[M2]</code>: (S, {C3})</li> <li><code>Dir[M4]</code>: (EM, Owner=C3)</li> <li><code>Mem[M0] = Data_M0_orig</code></li> <li><code>Mem[M2] = Data_M2_orig</code></li> <li><code>Mem[M4] = Data_M4_aaaa</code></li> </ul> <p>\u603b\u7ed3\u6d88\u606f\u5217\u8868\uff1a</p> <ol> <li> <p><code>C3-&gt;Dir: GetS(M0)</code></p> </li> <li> <p><code>Dir-&gt;C3: DataResp(M0, Data_M0_orig)</code></p> </li> <li> <p><code>C3-&gt;Dir: GetS(M2)</code></p> </li> <li> <p><code>Dir-&gt;C3: DataResp(M2, Data_M2_orig)</code></p> </li> <li> <p><code>C6-&gt;Dir: GetM(M4)</code></p> </li> <li> <p><code>Dir-&gt;C6: DataOwnerResp(M4, Data_M4_orig, C6)</code></p> </li> <li> <p><code>C3-&gt;Dir: GetM(M4)</code></p> </li> <li> <p><code>Dir-&gt;C6: FwdGetM(M4, C3)</code></p> </li> <li> <p><code>C6-&gt;Dir: WbReq(M4, Data_M4_aaaa)</code></p> </li> <li> <p><code>Dir-&gt;C3: DataOwnerResp(M4, Data_M4_aaaa, C3)</code></p> </li> </ol> <p>c. \u5e8f\u5217: <code>C0: R, M7</code> ; <code>C3: R, M4</code> ; <code>C6: W, M2 &lt;--0xaaaa</code> ; <code>C2: W, M2 &lt;--0xbbbb</code></p> <ol> <li>C0 \u7f13\u5b58 M7: Miss</li> </ol> <p>\u6d88\u606f\uff1a <code>C0 -&gt; Dir: GetS(M7)</code></p> <p><code>Dir[M7]: U -&gt; S, Sharers={C0}</code></p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C0: DataResp(M7, Data_M7_orig)</code></p> <p><code>C0.Lx: (S, M7, Data_M7_orig)</code></p> <ol> <li>C3 \u7f13\u5b58 M4: Miss</li> </ol> <p>\u6d88\u606f\uff1a <code>C3 -&gt; Dir: GetS(M4)</code></p> <p><code>Dir[M4]: U -&gt; S, Sharers={C3}</code></p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C3: DataResp(M4, Data_M4_orig)</code></p> <p><code>C3.Ly: (S, M4, Data_M4_orig)</code></p> <ol> <li>C6 \u7f13\u5b58 M2: Miss</li> </ol> <p>\u6d88\u606f\uff1a <code>C6 -&gt; Dir: GetM(M2)</code></p> <p><code>Dir[M2]: U</code></p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C6: DataOwnerResp(M2, Data_M2_orig, C6)</code></p> <p><code>Dir[M2]: U -&gt; EM, Owner=C6</code></p> <p><code>C6.Lz: (M, M2, Data_M2_aaaa)</code></p> <p><code>Mem[M2] = Data_M2_orig (stale)</code></p> <ol> <li>C2 \u7f13\u5b58 M2: Miss</li> </ol> <p>\u6d88\u606f\uff1a <code>C2 -&gt; Dir: GetM(M2)</code></p> <p><code>Dir[M2]: EM, Owner=C6</code></p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C6: FwdGetM(M2, C2)</code></p> <p><code>C6</code> \u6536\u5230 <code>FwdGetM</code>: \u5199\u56de <code>M2 (Data_M2_aaaa)</code> \u5230\u5185\u5b58\u3002<code>Mem[M2]</code> \u66f4\u65b0\u4e3a <code>Data_M2_aaaa</code></p> <p>\u6d88\u606f\uff1a <code>C6 -&gt; Dir: WbReq(M2, Data_M2_aaaa)</code></p> <p><code>C6.Lz (M2)</code> \u72b6\u6001\u53d8\u4e3a <code>I</code></p> <p>\u76ee\u5f55\u6536\u5230 <code>C6</code> \u5199\u56de\u3002</p> <p>\u6d88\u606f\uff1a <code>Dir -&gt; C2: DataOwnerResp(M2, Data_M2_aaaa, C2)</code></p> <p><code>Dir[M2]: Owner C6 -&gt; C2. (State remains EM)</code></p> <p><code>C2.Lw: (M, M2, Data_M2_bbbb)</code></p> <p><code>Mem[M2] = Data_M2_aaaa (stale relative to C2's copy)</code></p> <p>\u6700\u7ec8\u72b6\u6001 (c):</p> <ul> <li><code>C0</code> : <code>Lx: (S, M7, Data_M7_orig)</code></li> <li><code>C2</code> : <code>Lw: (M, M2, Data_M2_bbbb)</code></li> <li><code>C3</code> : <code>Ly: (S, M4, Data_M4_orig)</code></li> <li><code>C6</code> : <code>Lz: (I, M2, Data_M2_aaaa)</code></li> <li>\u5176\u4ed6\u6838\u5fc3\u76f8\u5173\u7f13\u5b58\u884c\u5747\u4e3a <code>I</code></li> <li><code>Dir[M7]</code>: (S, {C0})</li> <li><code>Dir[M4]</code>: (S, {C3})</li> <li><code>Dir[M2]</code>: (EM, Owner=C2)</li> <li><code>Mem[M2]</code>: <code>Data_M2_aaaa</code> (stale relative to C2's copy)</li> <li><code>Mem[M7]</code>: <code>Data_M7_orig</code></li> <li><code>Mem[M4]</code>: <code>Data_M4_orig</code></li> <li><code>Mem[M2]</code>: <code>Data_M2_aaaa</code></li> </ul> <p>\u603b\u7ed3\u6d88\u606f\u5217\u8868\uff1a</p> <ol> <li> <p><code>C0-&gt;Dir: GetS(M7)</code></p> </li> <li> <p><code>Dir-&gt;C0: DataResp(M7, Data_M7_orig)</code></p> </li> <li> <p><code>C3-&gt;Dir: GetS(M4)</code></p> </li> <li> <p><code>Dir-&gt;C3: DataResp(M4, Data_M4_orig)</code></p> </li> <li> <p><code>C6-&gt;Dir: GetM(M2)</code></p> </li> <li> <p><code>Dir-&gt;C6: DataOwnerResp(M2, Data_M2_orig, C6)</code></p> </li> <li> <p><code>C2-&gt;Dir: GetM(M2)</code></p> </li> <li> <p><code>Dir-&gt;C6: FwdGetM(M2, C2)</code></p> </li> <li> <p><code>C6-&gt;Dir: WbReq(M2, Data_M2_aaaa)</code></p> </li> <li> <p><code>Dir-&gt;C2: DataOwnerResp(M2, Data_M2_aaaa, C2)</code></p> </li> </ol>"},{"location":"Computer_Science/CO/","title":"Computer Organization notes","text":"<p> \u7ea6 141 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>\u8bfe\u7a0b\u4fe1\u606f</p> <ul> <li>\u667a\u4e91\u94fe\u63a5\uff1a\ud83d\udd17</li> <li>\u6388\u8bfe\uff1a\u6797\u8283</li> <li>\u6559\u6750\uff1a\u82f1\u6587\u7248 David A. Patterson, John L. Hennessy \u6709\u4e9b\u7531\u4e8e\u8fc7\u5927\u653e\u4e0d\u4e0a\u6765\uff0c\u6211\u4ee5\u540e\u5c1d\u8bd5\uff0c\u73b0\u5728\u7684\u8bdd\u90ae\u7bb1\u8054\u7cfb\u6211\u53ed \u4e2d\u6587\u7248 \u8bb2\u5230 I/O \u65f6\u591a\u6570\u5185\u5bb9\u6765\u81ea\u7b2c\u4e09\u7248\u7684\u4e66</li> <li>PPT\uff1a \ud83d\udcc1 \u524d\u4e94\u7ae0\u6211\u4ee5 md \u8001\u5e08\u7684 PPT \u4e3a\u4e3b\uff0c\u7b2c\u516d\u7ae0\u4ee5 lp \u8001\u5e08\u7684\u3002</li> <li>\u4f5c\u4e1a\uff1a\ud83d\udcdd </li> <li>\u6211\u7684\u7b14\u8bb0\uff1a\ud83d\udcdd</li> <li>\u5386\u5e74\u9898\uff1a\u627e\u5230\u7684\u4e00\u4efd\u524d\u4eba\u6574\u7406\u7684\u56de\u5fc6\u5377</li> <li>\u590d\u4e60\u8d44\u6599\uff1a\u524d\u8f88\u6574\u7406\u7684\u6982\u5ff5\u9898(\u6ce8\u610f\u5185\u542bMIPS) \u4ee5\u53ca \u670b\u8f88\u8f85\u5b66\u7684\u8d44\u6599</li> </ul>"},{"location":"Computer_Science/CO/COhomework/","title":"CO homework","text":"<p> \u7ea6 8554 \u4e2a\u5b57  35 \u884c\u4ee3\u7801  3 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 43 \u5206\u949f</p> <p>Abstract</p> <p>\u8fd9\u91cc\u662f\u8001\u5e08\u5e03\u7f6e\u7684\u9898\u76ee\uff0c\u6211\u4f1a\u9644\u4e0a\u7b54\u6848\u4e0e\u6211\u81ea\u5df1\u7684\u7b54\u6848(\u56e0\u4e3a\u539f\u4e66\u7b54\u6848\u6709\u8bef)\uff0c\u5e94\u8be5\u57fa\u672c\u4e0a\u6ca1\u6709\u9519\u4e86\u5427\u3002</p>  answer   10,364 KB / 2024-10-29 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/CO/COhomework/#1-introduction","title":"1 introduction","text":""},{"location":"Computer_Science/CO/COhomework/#12","title":"1.2","text":"<p>question</p> <p>The eight great ideas in computer architecture are similar to ideas  from other fields. Match the eight ideas from computer architecture, \u201cDesign for  Moore\u2019s Law,\u201d \u201cUse Abstraction to Simplify Design,\u201d \u201cMake the Common Case  Fast,\u201d \u201cPerformance via Parallelism,\u201d \u201cPerformance via Pipelining,\u201d \u201cPerformance  via Prediction,\u201d \u201cHierarchy of Memories,\u201d and \u201cDependability via Redundancy\u201d to  the following ideas from other fields: </p> <ul> <li>a. Assembly lines in automobile manufacturing </li> <li>b. Suspension bridge cables </li> <li>c. Aircraft and marine navigation systems that incorporate wind information </li> <li>d. Express elevators in buildings</li> <li>e. Library reserve desk</li> <li>f. Increasing the gate area on a CMOS transistor to decrease its switching time</li> <li>g. Adding electromagnetic aircraft catapults (which are electrically powered as opposed to current steam-powered models), allowed by the increased power generation offered by the new reactor technology</li> <li>h. Building self-driving cars whose control systems partially rely on existing sensor systems already installed into the base vehicle, such as lane departure systems and smart cruise control systems</li> </ul> <p>answer</p> <ul> <li> <p>a. Performance via Pipelining </p> </li> <li> <p>b. Dependability via Redundancy </p> </li> <li> <p>c. Performance via Prediction </p> </li> <li> <p>d. Make the Common Case Fast </p> </li> <li> <p>e. Hierarchy of Memories</p> </li> <li> <p>f. Performance via Parallelism</p> </li> <li> <p>g. Design for Moore\u2019s Law</p> </li> <li> <p>h. Use Abstraction to Simplify Design</p> </li> </ul> <p>\u89e3\u91ca\uff1a</p> <ul> <li> <p>a. \u88c5\u914d\u7ebf\u751f\u4ea7\uff08Performance via Pipelining\uff09\uff1a\u88c5\u914d\u7ebf\u901a\u8fc7\u5c06\u4efb\u52a1\u5206\u89e3\u6210\u591a\u4e2a\u9636\u6bb5\uff0c\u4f7f\u6bcf\u4e2a\u9636\u6bb5\u90fd\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\uff0c\u4ee5\u63d0\u9ad8\u6548\u7387\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u6d41\u6c34\u7ebf\u6280\u672f\uff0c\u5b83\u5c06\u8ba1\u7b97\u4efb\u52a1\u5206\u89e3\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u4ece\u800c\u63d0\u9ad8\u5904\u7406\u5668\u7684\u541e\u5410\u91cf\u548c\u6027\u80fd\u3002</p> </li> <li> <p>b. \u60ac\u7d22\u6865\u7535\u7f06\uff08Dependability via Redundancy\uff09\uff1a\u60ac\u7d22\u6865\u7535\u7f06\u4f1a\u6709\u591a\u6761\u7535\u7f06\u5171\u540c\u652f\u6491\u6865\u4f53\uff0c\u4ee5\u589e\u52a0\u5b89\u5168\u6027\u548c\u53ef\u9760\u6027\uff0c\u786e\u4fdd\u5373\u4f7f\u5176\u4e2d\u4e00\u6761\u7535\u7f06\u5931\u6548\uff0c\u5176\u4ed6\u7535\u7f06\u53ef\u4ee5\u7ee7\u7eed\u627f\u91cd\u3002\u8fd9\u4e2a\u6982\u5ff5\u4e0e\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u901a\u8fc7\u5197\u4f59\u8bbe\u8ba1\u6765\u63d0\u9ad8\u53ef\u9760\u6027\u4e00\u81f4\uff0c\u786e\u4fdd\u5728\u90e8\u4ef6\u5931\u6548\u65f6\u7cfb\u7edf\u4ecd\u7136\u53ef\u7528\u3002</p> </li> <li> <p>c. \u98de\u884c\u548c\u822a\u6d77\u5bfc\u822a\u7cfb\u7edf\u7ed3\u5408\u98ce\u529b\u4fe1\u606f\uff08Performance via Prediction\uff09\uff1a\u98de\u884c\u548c\u822a\u6d77\u5bfc\u822a\u7cfb\u7edf\u5229\u7528\u98ce\u529b\u4fe1\u606f\u6765\u9884\u6d4b\u548c\u4f18\u5316\u822a\u884c\u8def\u5f84\uff0c\u4ee5\u63d0\u9ad8\u6548\u7387\u548c\u5b89\u5168\u6027\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u7684\u201c\u9884\u6d4b\u6267\u884c\u201d\u6280\u672f\uff0c\u901a\u8fc7\u9884\u6d4b\u672a\u6765\u7684\u6307\u4ee4\u6216\u6570\u636e\u8bbf\u95ee\u6765\u63d0\u9ad8\u6027\u80fd\u3002</p> </li> <li> <p>d. \u5927\u697c\u7684\u5feb\u6377\u7535\u68af\uff08Make the Common Case Fast\uff09\uff1a\u5feb\u6377\u7535\u68af\u76f4\u63a5\u5c06\u4eba\u4eec\u9001\u5230\u5e38\u7528\u7684\u9ad8\u697c\u5c42\uff0c\u4f18\u5316\u4e86\u65e5\u5e38\u901a\u884c\u7684\u6548\u7387\u3002\u8fd9\u5bf9\u5e94\u4e8e\u201c\u8ba9\u5e38\u89c1\u60c5\u51b5\u66f4\u5feb\u201d\u7684\u7406\u5ff5\uff0c\u5373\u4f18\u5316\u7cfb\u7edf\u4e2d\u7684\u5e38\u7528\u60c5\u51b5\u4ee5\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u3002</p> </li> <li> <p>e. \u56fe\u4e66\u9986\u7684\u9884\u7559\u53f0\uff08Hierarchy of Memories\uff09\uff1a\u56fe\u4e66\u9986\u9884\u7559\u53f0\u4fdd\u5b58\u4e00\u4e9b\u70ed\u95e8\u4e66\u7c4d\uff0c\u65b9\u4fbf\u8bfb\u8005\u53d6\u7528\uff0c\u800c\u4e0d\u9700\u8981\u6df1\u5165\u4e66\u67b6\u5bfb\u627e\u3002\u7c7b\u4f3c\u4e8e\u8ba1\u7b97\u673a\u4e2d\u7684\u5b58\u50a8\u5c42\u6b21\u7ed3\u6784\uff0c\u8f83\u5feb\u7684\u7f13\u5b58\u5c42\u5b58\u653e\u5e38\u7528\u6570\u636e\uff0c\u4ece\u800c\u51cf\u5c11\u6570\u636e\u8bbf\u95ee\u7684\u5ef6\u8fdf\u3002</p> </li> <li> <p>f. \u589e\u5927CMOS\u6676\u4f53\u7ba1\u7684\u95e8\u9762\u79ef\u4ee5\u51cf\u5c11\u5207\u6362\u65f6\u95f4\uff08Performance via Parallelism\uff09\uff1a\u589e\u5927\u6676\u4f53\u7ba1\u7684\u9762\u79ef\u53ef\u4ee5\u652f\u6301\u66f4\u591a\u7684\u5e76\u884c\u64cd\u4f5c\uff0c\u4ece\u800c\u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u901a\u8fc7\u589e\u52a0\u5e76\u884c\u6027\u6765\u63d0\u5347\u8ba1\u7b97\u673a\u7684\u5904\u7406\u901f\u5ea6\u3002</p> </li> <li> <p>g. \u65b0\u53cd\u5e94\u5806\u6280\u672f\u652f\u6301\u7684\u7535\u78c1\u5f39\u5c04\u88c5\u7f6e\uff08Design for Moore\u2019s Law\uff09\uff1a\u65b0\u7684\u53cd\u5e94\u5806\u6280\u672f\u63d0\u5347\u4e86\u7535\u529b\u4f9b\u5e94\uff0c\u4ece\u800c\u5141\u8bb8\u4f7f\u7528\u7535\u78c1\u5f39\u5c04\u88c5\u7f6e\u3002\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u6280\u672f\u8fdb\u6b65\u5e26\u6765\u7684\u8bbe\u8ba1\u53ef\u80fd\u6027\uff0c\u4e0e\u6469\u5c14\u5b9a\u5f8b\u63a8\u52a8\u8ba1\u7b97\u673a\u8bbe\u8ba1\u7684\u8fdb\u6b65\u7c7b\u4f3c\u3002</p> </li> <li> <p>h. \u90e8\u5206\u4f9d\u8d56\u4e8e\u73b0\u6709\u4f20\u611f\u5668\u7684\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\uff08Use Abstraction to Simplify Design\uff09\uff1a\u81ea\u52a8\u9a7e\u9a76\u7cfb\u7edf\u5229\u7528\u4e86\u5df2\u7ecf\u5b89\u88c5\u5728\u8f66\u8f86\u4e0a\u7684\u4f20\u611f\u5668\uff08\u5982\u8f66\u9053\u504f\u79bb\u7cfb\u7edf\u3001\u667a\u80fd\u5de1\u822a\u63a7\u5236\u7cfb\u7edf\uff09\uff0c\u901a\u8fc7\u62bd\u8c61\u51cf\u5c11\u4e86\u8bbe\u8ba1\u7684\u590d\u6742\u6027\u3002</p> </li> </ul>"},{"location":"Computer_Science/CO/COhomework/#15","title":"1.5","text":"<p>question</p> <p>Consider three different processors P1, P2, and P3 executing  the same instruction set. P1 has a 3GHz clock rate and a CPI of 1.5. P2 has a  2.5GHz clock rate and a CPI of 1.0. P3 has a 4.0GHz clock rate and has a CPI  of 2.2. </p> <ul> <li>a. Which processor has the highest performance expressed in instructions per second? </li> <li>b. If the processors each execute a program in 10 seconds, find the number of cycles and the number of instructions. </li> <li>c. We are trying to reduce the execution time by 30%, but this leads to an increase  of 20% in the CPI. What clock rate should we have to get this time reduction?</li> </ul> <p>answer</p> <ul> <li>a. CPU time \u7684\u5012\u6570</li> </ul> <p>performance of P1 (instructions/sec) = 3 \u00d7 10\\(^9\\) /1.5 = 2 \u00d7 10\\(^9\\)</p> <p>performance of P2 (instructions/sec) = 2.5 \u00d7 10\\(^9\\) /1.0 = 2.5 \u00d7 10\\(^9\\)</p> <p>performance of P3 (instructions/sec) = 4 \u00d7 10\\(^9\\) /2.2 = 1.8 \u00d7 10\\(^9\\)</p> <ul> <li>b.  CPI \u662f\u6bcf\u6761\u6307\u4ee4\u7684\u5e73\u5747\u5468\u671f\u6570</li> </ul> <p>cycles(P1) = 10 \u00d7 3 \u00d7 10\\(^9\\) = 30 \u00d7 10\\(^9\\) </p> <p>cycles(P2) = 10 \u00d7 2.5 \u00d7 10\\(^9\\) = 25 \u00d7 10\\(^9\\) </p> <p>cycles(P3) = 10 \u00d7 4 \u00d7 10\\(^9\\) = 40 \u00d7 10\\(^9\\) </p> <p>No. instructions(P1) = 30 \u00d7 10\\(^9\\) /1.5= 20 \u00d7 10\\(^9\\)</p> <p>No. instructions(P2) = 25 \u00d7 10\\(^9\\) /1 = 25 \u00d7 10\\(^9\\)</p> <p>No. instructions(P3) = 40 \u00d7 10\\(^9\\) /2.2 = 18.18 \u00d7 10\\(^9\\)</p> <ul> <li>c. execution from 10 to 7</li> </ul> <p>\\(CPI_{new} = CPI_{old} \u00d7 1.2\\)    then CPI(P1) = 1.8, CPI(P2) = 1.2, CPI(P3) = 2.6 </p> <p>\\(f = No. instr. \u00d7 CPI/time\\)   then</p> <p>$f(P1) = 20 \u00d7 10^9 \u00d7 1.8 / 7 = 5.14 GHz $</p> <p>$f(P2) = 25 \u00d7 10^9 \u00d7 1.2 / 7 = 4.28 GHz $</p> <p>\\(f(P1) = 18.18 \u00d7 10^9 \u00d7 2.6 / 7 = 6.75 GHz\\)</p>"},{"location":"Computer_Science/CO/COhomework/#16","title":"1.6","text":"<p>question</p> <p>Consider two different implementations of the same instruction  set architecture. The instructions can be divided into four classes according to  their CPI (classes A, B, C, and D). P1 with a clock rate of 2.5GHz and CPIs of 1, 2,  3, and 3, and P2 with a clock rate of 3GHz and CPIs of 2, 2, 2, and 2. Given a program with a dynamic instruction count of 1.0E6 instructions divided  into classes as follows: 10% class A, 20% class B, 50% class C, and 20% class D,  which is faster: P1 or P2? </p> <ul> <li>a. What is the global CPI for each implementation? </li> <li>b. Find the clock cycles required in both cases.</li> </ul> <p>answer</p> <ul> <li> <p>a.</p> <p>Class A: 10\\(^5\\) instr. Class B: 2\u00d7 10\\(^5\\) instr. Class C: 5 \u00d7 10\\(^5\\) instr. Class D: 2 \u00d7 10\\(^5\\)</p> <p>instr.  Time = No. instr. \u00d7 CPI/clock rate </p> <p>Total time P1 = (10\\(^5\\)  + 2 \u00d7 10\\(^5\\) \u00d7 2 + 5 \u00d7 10\\(^5\\) \u00d7 3 + 2 \u00d7 10\\(^5\\)\u00d7 3)/(2.5 \u00d7 10\\(^9\\) ) =  10.4 \u00d7 10\\(^{-4}\\)s </p> <p>Total time P2 = (10\\(^5\\) \u00d7 2 + 2 \u00d7 10\\(^5\\) \u00d7 2 + 5 \u00d7 10\\(^5\\) \u00d7 2 + 2 \u00d7 10\\(^5\\) \u00d7 2)/(3 \u00d7 10\\(^9\\) ) = 6.66 \u00d7 10\\(^{-4}\\) s </p> <p>CPI(P1) = 10.4 \u00d7 10\\(^{-4}\\) \u00d7 2.5 \u00d7 10\\(^9\\) /10\\(^6\\) = 2.6 </p> <p>CPI(P2) = 6.66 \u00d7 10\\(^{-4}\\) \u00d7 3 \u00d7 10\\(^9\\) /10\\(^6\\) = 2.0 </p> </li> <li> <p>b.</p> <p>clock cycles(P1) = 10\\(^5\\) \u00d7 1 +2 \u00d7 10\\(^5\\) \u00d7 2 + 5 \u00d7 10\\(^5\\)\u00d7 3 +2 \u00d7 10\\(^5\\) \u00d7 3 = 26 \u00d7 10\\(^5\\)</p> <p>clock cycles(P2) = 10\\(^5\\)\u00d7 2 + 2 \u00d7 10\\(^5\\) \u00d7 2 + 5 \u00d7 10\\(^5\\)\u00d7 2 + 2 \u00d7 10\\(^5\\) \u00d7 2 = 20\u00d7 10\\(^5\\)</p> </li> </ul>"},{"location":"Computer_Science/CO/COhomework/#17","title":"1.7","text":"<p>question</p> <p>Compilers can have a profound impact on the performance  of an application. Assume that for a program, compiler A results in a dynamic  instruction count of 1.0E9 and has an execution time of 1.1 s, while compiler B  results in a dynamic instruction count of 1.2E9 and an execution time of 1.5 s. </p> <ul> <li>a. Find the average CPI for each program given that the processor has a clock cycle  time of 1ns. </li> <li>b. Assume the compiled programs run on two different processors. If the execution times on the two processors are the same, how much faster is the clock of the processor running compiler A\u2019s code versus the clock of the processor running  compiler B\u2019s code? </li> <li>c. A new compiler is developed that uses only 6.0E8 instructions and has an  average CPI of 1.1. What is the speedup of using this new compiler versus using  compiler A or B on the original processor?</li> </ul> <p>answer</p> <ul> <li>a.</li> </ul> <p>$CPI = T_{exec} \u00d7 f / No. instr. $</p> <p>Compiler A CPI = 1.1 </p> <p>Compiler B CPI  = 1.25 </p> <ul> <li>b.</li> </ul> <p>\\(f_B /f_A = (No. instr.(B) \u00d7 CPI(B))/(No. instr.(A) \u00d7 CPI(A)) = 1.37\\)</p> <ul> <li>c.</li> </ul> <p>$T_A /T_{new} = 1.67 $</p> <p>$T_B /T_{new} = 2.27 $</p>"},{"location":"Computer_Science/CO/COhomework/#113","title":"1.13","text":"<p>question</p> <p>Another pitfall cited in Section 1.10 is expecting to improve the overall  performance of a computer by improving only one aspect of the computer. Consider  a computer running a program that requires 250 s, with 70 s spent executing FP instructions, 85 s executed L/S instructions, and 40 s spent executing branch instructions. </p> <ul> <li>1.13.1. By how much is the total time reduced if the time for FP operations is reduced by 20%? </li> <li>1.13.2 . By how much is the time for INT operations reduced if the total time is reduced by 20%? </li> <li>1.13.3. Can the total time can be reduced by 20% by reducing only  the time for branch instructions?</li> </ul> <p>answer</p> <ul> <li>1.13.1</li> </ul> <p>\u8d85\u7ea7\u65e0\u654c\u6b79\u6bd2\uff0c\u8fd8\u6709\u4e00\u4e2a55s\u7684\u9690\u85cf\uff01\u8981\u5148\u52a0\u4e00\u52a0\u624d\u77e5\u9053\uff01</p> <p>$T_{fp} = 70 \u00d7 0.8 = 56 s. T_{new} = 56 + 85 + 55 + 40 = 236 s. Reduction: 5.6 $%</p> <ul> <li>1.13.2</li> </ul> <p>\\(250 \\times 0.2 = 50s\\) \uff0c\u8fd9 \\(50s\\) \u5168\u90e8\u51fa\u5728 \\(INT \\ operation\\) \u91cc\u9762 </p> <ul> <li>1.13.3</li> </ul> <p>NO</p> <p>$T_{new} = 250 \u00d7 0.8 = 200 s, T_{fp} + T_{int} + T_{l/s} = 210 s. $</p>"},{"location":"Computer_Science/CO/COhomework/#2-instructions-language-of-the-computer","title":"2 Instructions : language of the computer","text":""},{"location":"Computer_Science/CO/COhomework/#24","title":"2.4","text":"<p>question</p> <p>For the RISC-V assembly instructions below, what is the corresponding C statement? Assume that the variables f, g, h, i, and j are assigned to registers x5, x6, x7, x28, and x29, respectively. Assume that the base address of the arrays A and B are in registers x10 and x11, respectively.</p> <pre><code>slli x30, x5, 3             // x30 = f*8\n\nadd x30, x10, x30           // x30 = &amp;A[f]\n\nslli x31, x6, 3             // x31 = g*8\n\nadd x31, x11, x31           // x31 = &amp;B[g]\n\nld x5, 0(x30)              // f = A[f]\n\naddi x12, x30, 8\n\nld x30, 0(x12)\n\nadd x30, x30, x5\n\nsd x30, 0(x31)\n</code></pre> <p>answer</p> <p><code>B[g] = A[f] + A[f + 1];</code></p>"},{"location":"Computer_Science/CO/COhomework/#28","title":"2.8","text":"<p>question</p> <p>Translate the following RISC-V code to C. Assume that the variables f, g, h, i, and j are assigned to registers x5, x6, x7, x28, and x29, respectively. Assume that the base address of the arrays A and B are in registers x10 and x11, respectively.</p> <p>```addi x30, x10, 8 addi x30, x10, 8</p> <p>addi x31, x10, 0</p> <p>sd x31, 0(x30)</p> <p>ld x30, 0(x30)</p> <p>add x5, x30, x31 <pre><code>**answer**\n\n\u7b2c\u4e00\u6b65 x$30 = \\&amp; A[1]$\n\n\u7b2c\u4e8c\u6b65 x$31 = \\&amp;A[0]$\n\n\u7b2c\u4e09\u6b65 x$30 = \\&amp;A[0]$\n\n\u7b2c\u56db\u6b65 x$30 = \\&amp;A[0]$\n\n\u7b2c\u4e94\u6b65 x$5 = 2 * \\&amp;A$\n\n\u6240\u4ee5\u5f97\u5230`f = 2 * &amp;A`\n\n---\n\n### 2.12\n\n**question**\n\nProvide the instruction type and assembly language instruction for the following binary value:\n\n$0000 0000 0001 0000 1000 0000 1011 0011_{two}$\n\n**answer**\n\nThe opcode is $0110011$, so it's R-type.\n\nfunction 7 is $0000000$, function 3 is $000$, rd is $00001$, rs 2 is $00001$, rs 1 is $00001$\n\nadd x1, x1, x1 \n\n---\n\n### 2.14\n\n**question**\n\nProvide the instruction type, assembly language instruction, and binary representation of instruction described by the following RISC-V fields:\n\nopcode=0x33, funct3=0x0, funct7=0x20, rs2=5, rs1=7, rd=6\n\n**answer**\n\nR-type, sub x6, x7, x5 \n\n$0100 0000 0101 0011 1000 0011 0011 0011$\n\n---\n\n### 2.17\n\n**question**\n\nAssume the following register contents:\n\n$x5 = 0$x$ 0000 0000 AAAA AAAA, x6 = 0$x$ 1234 5678 1234 5678$\n\n- 2.17.1 For the register values shown above, what is the value of x7 for the following sequence of instructions?\n\n  \u200b         slli x7, x5, 4\n\n  \u200b         or x7, x7, x6\n\n- 2.17.2 For the register values shown above, what is the value of x7 for the following sequence of instructions?\n\n  \u200b         slli x7, x6, 4\n\n- 2.17.3 For the register values shown above, what is the value of x7 for the following sequence of instructions?\n\n  \u200b         srli x7, x5, 3\n\n  \u200b         addi x7, x7, 0xFEF\n\n**answer**\n\n- 2.17.1 \n\n  $x7 = 0$x$ 1234 567A BABE FEF8$ \n\n- 2.17.2\n\n  $x7 = 0$x$2345678123456780$ \n\n- 2.17.3\n\n  \u5728 `addi` \u6307\u4ee4\u4e2d\u7acb\u5373\u6570\u662f 12 \u4f4d\u7684\n\n  \u7b2c\u4e00\u6b65$x7 = 0$x$0000 0000 1555 5555$\n\n  \u7b2c\u4e8c\u6b65$x7 = 0$x$F000 0000 1555 6544$\n\n---\n\n### 2.22\n\n**question**\n\nSuppose the *program counter* (PC) is set to 0x20000000.\n\n- 2.22.1 What range of addresses can be reached using the RISC-V *jump-and-link* (jal) instruction? (In other words, what is the set of possible values for the PC after the jump instruction executes?)\n- 2.22.2 What range of addresses can be reached using the RISC-V *branch if equal* (beq) instruction? (In other words, what is the set of possible values for the PC after the branch instruction executes?)\n\n**answer**\n\n- 2.22.1\n\n  `jal` \u5c5e\u4e8e `UJ-type` ,\u7acb\u5373\u6570\u4e3a20\u4f4d\uff0c\u4f46\u6700\u540e\u4e00\u4f4d\u4e0d\u8868\u793a\uff0c\u800c `jal` \u662f\u6709\u7b26\u53f7\u7684\u3002\u56e0\u6b64\uff0c\u7acb\u5373\u6570\u8868\u793a\u7684\u6570\u8303\u56f4\u4e3a $-2^{19} \\to 2^{19} - 1$\u3002\u56e0\u6b64\u6700\u8fdc\u8ddd\u79bb\u4e3a$-2^{20} \\to 2^{20}-2$\uff0c\u4e5f\u5373$-0$x$0010 0000 \\ \u5230\\ 0$x$000F FFFE$\u3002\u6240\u4ee5\u53ef\u4ee5\u5230\u7684\u5730\u5740\u4e3a$0$x$1FF0 0000$\u5230$0$x$200F FFFE$\u3002\n\n- 2.22.2\n\n  `beq` \u5c5e\u4e8e `SB-type` ,\u7acb\u5373\u6570\u4e3a12\u4f4d\uff0c\u4f46\u6700\u540e\u4e00\u4f4d\u4e0d\u8868\u793a\uff0c\u800c `beq` \u662f\u6709\u7b26\u53f7\u7684\u3002\u56e0\u6b64\uff0c\u7acb\u5373\u6570\u8868\u793a\u7684\u6570\u8303\u56f4\u4e3a $-2^{11} \\to 2^{11}-1$\u3002\u56e0\u6b64\u6700\u8fdc\u8ddd\u79bb\u4e3a$-2^{12} \\ \u5230 \\ 2^{12}-2$\uff0c\u4e5f\u5373$-0$x$0000 1000$\u5230$0$x$0000 0FFE$\u3002\u6240\u4ee5\u53ef\u4ee5\u5230\u7684\u5730\u5740\u4e3a$0$x$1FFF F000$\u5230$0$x$2000 0FFE$\u3002\n\n---\n\n### 2.24\n\n**question**\n\nConsider the following RISC-V loop:\n\nLOOP: beq x6, x0, DONE\n\n\u200b           addi x6, x6, -1\n\n\u200b           addi x5, x5, 2\n\n\u200b           jal x0, LOOP\n\nDONE:\n\n- 2.24.1 Assume that the register x6 is initialized to the value 10. What is the final value in register x5 assuming the x5 is initially zero?\n- 2.24.2 For the loop above, write the equivalent C code. Assume that the registers x5 and x6 are integers acc and i, respectively.\n- 2.24.3 For the loop written in RISC-V assembly above, assume that the register x6 is initialized to the value N. How many RISC-V instructions are executed?\n- 2.24.4 For the loop written in RISC-V assembly above, replace the instruction \u201cbeq x6, x0, DONE\u201d with the instruction \u201cblt x6, x0, DONE\u201d and write the equivalent C code.\n\n**answer**\n\n- 2.24.1 \n\n  20\n\n- 2.24.2\n\n  ```c\n  while(i != 0){\n      i = i - 1;\n      acc = acc + 2;\n  }\n  ```\n\n- 2.24.3\n\n  4N+1\n\n- 2.24.4\n\n  ```c\n  while(i &gt;= 0){\n      i = i - 1;\n      acc = acc + 2;\n  }\n  ```\n\n---\n\n### 2.29\n\n**question**\n\nImplement the following C code in RISC-V assembly. Hint: Remember that the stack pointer must remain aligned on a multiple of 16.\n\n```c\nint fib(int n){\n    if (n==0)\n        return 0;\n    else if (n == 1)\n        return 1;\n    else\n        return fib(n\u22121) + fib(n\u22122);\n}\n</code></pre></p> <p>answer</p> <pre><code>fib:    addi    sp, sp, -16          # \u8c03\u6574\u6808\u7a7a\u95f4\uff0c\u4e3a 2 \u4e2a 8 \u5b57\u8282\u7684\u9879\u9884\u7559\u7a7a\u95f4\n        sd      ra, 8(sp)            # \u4fdd\u5b58\u8fd4\u56de\u5730\u5740\u5bc4\u5b58\u5668 ra \u5230 sp +8\n        sd      a0, 0(sp)            # \u4fdd\u5b58\u51fd\u6570\u53c2\u6570 n (a0) \u5230 sp +0\n\n        # \u68c0\u67e5\u662f\u5426\u4e3a\u57fa\u51c6\u60c5\u51b5 n == 0\n        beq     a0, x0, fib_zero     # \u5982\u679c n == 0\uff0c\u8df3\u8f6c\u5230 fib_zero\n\n        # \u68c0\u67e5\u662f\u5426\u4e3a\u57fa\u51c6\u60c5\u51b5 n == 1\n        li      t0, 1                # \u5c06\u7acb\u5373\u6570 1 \u52a0\u8f7d\u5230 t0\n        beq     a0, t0, fib_one      # \u5982\u679c n ==1\uff0c\u8df3\u8f6c\u5230 fib_one\n\n        # \u9012\u5f52\u60c5\u51b5: return fib(n-1) + fib(n-2)\n\n        # \u8ba1\u7b97 fib(n-1)\n        addi    a0, a0, -1           # a0 = n -1\n        jal     ra, fib              # \u8c03\u7528 fib(n-1)\n        addi    t1, a0, 0            # \u5c06 fib(n-1) \u7684\u8fd4\u56de\u503c\u4fdd\u5b58\u5230 t1\n\n        ld      a0, 0(sp)            # \u6062\u590d\u539f\u59cb\u7684 n \u503c\n\n        # \u8ba1\u7b97 fib(n-2)\n        addi    a0, a0, -2           # a0 = n -2\n        jal     ra, fib              # \u8c03\u7528 fib(n-2)\n        addi    t2, a0, 0            # \u5c06 fib(n-2) \u7684\u8fd4\u56de\u503c\u4fdd\u5b58\u5230 t2\n\n        # \u5c06 fib(n-1) \u548c fib(n-2) \u76f8\u52a0\n        add     a0, t1, t2           # a0 = fib(n-1) + fib(n-2)\n\n        ld      ra, 8(sp)             # \u4ece\u6808\u4e2d\u6062\u590d\u8fd4\u56de\u5730\u5740 ra\n        addi    sp, sp, 16            # \u6062\u590d\u6808\u6307\u9488 sp\n        jalr    zero, 0(ra)           # \u8fd4\u56de\u5230\u8c03\u7528\u8005\n\nfib_zero:\n        li      a0, 0                 # \u8bbe\u7f6e\u8fd4\u56de\u503c a0 = 0\n        ld      ra, 8(sp)             # \u4ece\u6808\u4e2d\u6062\u590d\u8fd4\u56de\u5730\u5740 ra\n        addi    sp, sp, 16            # \u6062\u590d\u6808\u6307\u9488 sp\n        jalr    zero, 0(ra)           # \u8fd4\u56de\u5230\u8c03\u7528\u8005\n\nfib_one:\n        li      a0, 1                # \u8bbe\u7f6e\u8fd4\u56de\u503c a0 = 1\n        ld      ra, 8(sp)             # \u4ece\u6808\u4e2d\u6062\u590d\u8fd4\u56de\u5730\u5740 ra\n        addi    sp, sp, 16            # \u6062\u590d\u6808\u6307\u9488 sp\n        jalr    zero, 0(ra)           # \u8fd4\u56de\u5230\u8c03\u7528\u8005 \n</code></pre>"},{"location":"Computer_Science/CO/COhomework/#3-arithmetic-for-computers","title":"3 Arithmetic for Computers","text":""},{"location":"Computer_Science/CO/COhomework/#37","title":"3.7","text":"<p>question</p> <p>Assume 185 and 122 are signed 8-bit decimal integers stored in sign-magnitude format. Calculate 185 + 122. Is there overflow, underflow, or neither?</p> <p>answer</p> <p>\\(185 =1011 1001 \\ and \\ 122 = 0111 1010\\)</p> <p>\u7531\u4e8e in sign-magnitude format \u5f97\u5230 \\(-57 + 122 = 65\\) </p> <p>neither</p>"},{"location":"Computer_Science/CO/COhomework/#320","title":"3.20","text":"<p>question</p> <p>What decimal number does the bit pattern \\(0 \u00d7 0C000000\\) represent if it is a two\u2019s complement integer? An unsigned integer?</p> <p>answer</p> <p>both the same</p> <p>\\(16^6 * 12 = 201326592\\)</p>"},{"location":"Computer_Science/CO/COhomework/#326","title":"3.26","text":"<p>question</p> <p>Write down the binary bit pattern to represent \\(\u22121.5625 \u00d7 10^{\u22121}\\) assuming a format similar to that employed by the DEC PDP-8 (the leftmost 12 bits are the exponent stored as a two\u2019s complement number, and the rightmost 24 bits are the fraction stored as a two\u2019s complement number). No hidden 1 is used. Comment on how the range and accuracy of this 36-bit pattern compares to the single and double precision IEEE 754 standards.</p> <p>answer</p> <p>\\(-1.5625_{10} \u00d7 10^{-1} = -0.15625_{10} \u00d7 10^0= 0.00101_2 \u00d7 2^{0} = -1.01_2 \u00d7 2^{-3}\\)</p> <p>\u6240\u4ee5\u5e94\u8be5\u662f</p> <p>$ -0.101_2 \u00d7 2^{-2} $</p> <ul> <li>fraction \\(-0.10100000000000000000000 = 101100000000000000000000\\)</li> <li>exponent \\(-2 = -000000000010 = 111111111110\\) </li> </ul> <p>\u6ca1\u6709 bias</p> <p>\u6240\u4ee5\u7b54\u6848\u662f</p> <p>\\(1111 1111 1110 1011 0000 0000 0000 0000 0000\\)</p> <p>\u4e0eIEEE 754\u6807\u51c6\u7684\u6bd4\u8f83\uff1a</p> <ul> <li> <p>\u8303\u56f4\uff1a DEC PDP-8\u683c\u5f0f\u7531\u4e8e\u6307\u6570\u4f4d\u8f83\u5c11\u4e14\u6ca1\u6709\u9690\u85cf\u4f4d\uff0c\u56e0\u6b64\u8303\u56f4\u6709\u9650\uff0c\u65e0\u6cd5\u8868\u793a\u66f4\u5927\u7684\u6570\u503c\u3002</p> </li> <li> <p>\u7cbe\u5ea6\uff1a DEC PDP-8\u768424\u4f4d\u5c3e\u6570\u63d0\u4f9b\u4e86\u5408\u7406\u7684\u7cbe\u5ea6\uff0c\u4f46\u76f8\u6bd4\u4e8eIEEE\u5355\u7cbe\u5ea6\uff0823\u4f4d\u52a0\u9690\u85cf\u4f4d\uff09\u548c\u53cc\u7cbe\u5ea6\uff0852\u4f4d\u52a0\u9690\u85cf\u4f4d\uff09\uff0c\u7cbe\u5ea6\u8f83\u4f4e\u3002\u56e0\u6b64\uff0c\u5728\u8868\u793a\u63a5\u8fd1\u96f6\u7684\u6570\u5b57\u65f6\uff0cDEC PDP-8\u683c\u5f0f\u53ef\u80fd\u4f1a\u5f15\u5165\u66f4\u591a\u7684\u820d\u5165\u8bef\u5dee\uff0c\u5bfc\u81f4\u7cbe\u5ea6\u4e0b\u964d\u3002</p> </li> </ul> <p>\u603b\u4f53\u6765\u8bf4\uff0cDEC PDP-8\u683c\u5f0f\u867d\u7136\u7b80\u5355\uff0c\u4f46\u5728\u8303\u56f4\u548c\u7cbe\u5ea6\u4e0a\u4e0d\u53caIEEE 754\u6807\u51c6\uff0c\u540e\u8005\u80fd\u591f\u652f\u6301\u66f4\u5e7f\u6cdb\u7684\u6570\u503c\u8303\u56f4\u548c\u66f4\u9ad8\u7684\u8868\u793a\u7cbe\u5ea6\u3002</p>"},{"location":"Computer_Science/CO/COhomework/#327","title":"3.27","text":"<p>question</p> <p>IEEE 754-2008 contains a half precision that is only 16 bits wide. The leftmost bit is still the sign bit, the exponent is 5 bits wide and has a bias of 15, and the mantissa is 10 bits long. A hidden 1 is assumed. Write down the bit pattern to represent \\(\u22121.5625 \u00d7 10^{\u22121 }\\)assuming a version of this format, which uses an excess-16 format to store the exponent. Comment on how the range and accuracy of this 16-bit floating point format compares to the single precision IEEE 754 standard.</p> <p>answer</p> <p>\\(-1.5625_{10} \u00d7 10^{-1} = -0.15625_{10} \u00d7 10^0= 0.00101_2 \u00d7 2^{0} = -1.01_2 \u00d7 2^{-3}\\)</p> <p>hidden one</p> <ul> <li>exponent $ -3 = -11 \\quad -3 + 15 = 12 \\quad 12 = 01100$ so \\(01100\\)</li> <li>fraction \\(-.01\\) so \\(0100000000\\)</li> </ul> <p>\u6240\u4ee5\u7b54\u6848\u662f</p> <p>\\(1 01100 0100000000\\)</p> <p>\u4e0eIEEE 754\u5355\u7cbe\u5ea6\u6807\u51c6\u7684\u6bd4\u8f83\uff1a</p> <ul> <li>\u8303\u56f4\uff1a \u534a\u7cbe\u5ea6\u683c\u5f0f\u7684\u6307\u6570\u8303\u56f4\u76f8\u5bf9\u8f83\u5c0f\uff0c\u80fd\u591f\u8868\u793a\u7684\u6570\u503c\u8303\u56f4\u6709\u9650\uff0c\u6700\u5927\u503c\u7ea6\u4e3a65504\uff0c\u800c\u5355\u7cbe\u5ea6\u7684\u8303\u56f4\u66f4\u5e7f\uff0c\u7ea6\u4e3a\\(3.4\u00d7  10^{38}\\)\u3002</li> <li>\u7cbe\u5ea6\uff1a \u534a\u7cbe\u5ea6\u683c\u5f0f\u7684\u5c3e\u6570\u53ea\u670910\u4f4d\uff0c\u76f8\u6bd4\u5355\u7cbe\u5ea6\u768423\u4f4d\uff08\u52a0\u4e0a\u9690\u542b\u76841\uff09\uff0c\u7cbe\u5ea6\u8f83\u4f4e\u3002\u5728\u8868\u793a\u5c0f\u6570\u65f6\uff0c\u534a\u7cbe\u5ea6\u683c\u5f0f\u53ef\u80fd\u4f1a\u5f15\u5165\u66f4\u591a\u7684\u820d\u5165\u8bef\u5dee\uff0c\u5c24\u5176\u662f\u5728\u63a5\u8fd1\u96f6\u7684\u503c\u65f6\u3002</li> </ul> <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\u534a\u7cbe\u5ea6\u683c\u5f0f\u5728\u8303\u56f4\u548c\u7cbe\u5ea6\u4e0a\u90fd\u4e0d\u5982\u5355\u7cbe\u5ea6IEEE 754\u6807\u51c6\uff0c\u9002\u7528\u4e8e\u5bf9\u5b58\u50a8\u7a7a\u95f4\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u666f\uff0c\u4f46\u5728\u7cbe\u5ea6\u8981\u6c42\u8f83\u9ad8\u7684\u5e94\u7528\u4e2d\u53ef\u80fd\u4e0d\u8db3\u3002</p>"},{"location":"Computer_Science/CO/COhomework/#332","title":"3.32","text":"<p>question</p> <p>Calculate $(3.984375 \u00d7 10^{\u22121} + 3.4375 \u00d7 10^{\u22121} ) + 1.771 \u00d7 10^3 $by hand, assuming each of the values is stored in the 16-bit half precision format  described in Exercise 3.27 (and also described in the text). Assume 1 guard, 1 round bit, and 1 sticky bit, and round to the nearest even. Show all the steps, and write your answer in both the 16-bit floating point format and in decimal.</p> <p>answer</p> <ul> <li>$3.984375 \u00d7 10^{\u22121} = 0.394375 = 0.0110011_2 = 1.1001100000 \u00d7 2^{-2} $</li> <li>$ 3.4375 \u00d7 10^{\u22121} = 0.34375 = 0.01011_2 = 1.0110000000 \u00d7 2^{-2} $</li> <li>\\(1.771 \u00d7 10^3 = 1771 = 11011101011\\)</li> </ul> <p>\\(1.1001100000 \u00d7 2^{-2} + 1.0110000000 \u00d7 2^{-2} = 10.1111100000 \u00d7 2^{-2} = 1.0111 1100 00 \u00d7 2^{-1}\\)</p> <p>\\(1.1011101011 \\times 2^{10}\\)</p> <p>\\(+0.0000 0000 0010 1111 10 000   \\quad guard = 1  \\quad  round = 0  \\quad  sticky = 1\\)</p> <p>\\(=1.1011101011 \\ 101 \\quad round \\ up\\)</p> <p>\\(=1.1011101100 \u00d7 2^{10}\\)</p> <p>$ 10 + 15 = 25 = 11001_2$</p> <p>\u6240\u4ee5\u7b54\u6848\u662f</p> <p>\\(0 11001 1011101100_2 = 1772\\)</p>"},{"location":"Computer_Science/CO/COhomework/#4-the-processor","title":"4 The Processor","text":""},{"location":"Computer_Science/CO/COhomework/#41","title":"4.1","text":"<p>question</p> <p>Consider the following instruction:</p> <p>Instruction: and rd, rs1, rs2</p> <p>Interpretation: Reg[rd] = Reg[rs1] AND Reg[rs2]</p> <ul> <li>4.1.1 What are the values of control signals generated by the control in Figure 4.10 for this instruction?</li> <li>4.1.2 Which resources (blocks) perform a useful function for this instruction?</li> <li>4.1.3 Which resources (blocks) produce no output for this instruction? Which resources produce output that is not used?</li> </ul> <p>answer</p> <ul> <li>4.1.1</li> </ul> RegWrite ALUSrc ALUOp Memwrite Memread MemToReg 1 0 and\u5bf9\u5e94\u7684 0 0 0 <p>Mathematically, the <code>MemRead</code> control wire is a \"don't care\": the instruction will run correctly regardless of the chosen value. Practically, however, <code>MemRead</code> should be set to false to prevent causing a segment fault or cache miss.</p> <ul> <li>4.1.2</li> </ul> <p>PC, Add, Registers, ALUsrc MUX, ALU, MemToReg MUX.</p> <ul> <li>4.1.3</li> </ul> <p>no one doesn't have output</p> <p>Imm Gen and Data Memory</p>"},{"location":"Computer_Science/CO/COhomework/#44","title":"4.4","text":"<p>question</p> <p>When silicon chips are fabricated, defects in materials (e.g., silicon) and manufacturing errors can result in defective circuits. A very common defect is for one signal wire to get \u201cbroken\u201d and always register a logical 0. This is often called a \u201cstuck-at-0\u201d fault.</p> <ul> <li>4.4.1 Which instructions fail to operate correctly if the MemToReg wire is stuck at 0?</li> <li>4.4.2 Which instructions fail to operate correctly if the ALUSrc wire is stuck at 0?</li> </ul> <p>answer</p> <ul> <li>4.4.1</li> </ul> <p>load</p> <ul> <li>4.4.2</li> </ul> <p>load \u3001 store \u3001 I-type</p>"},{"location":"Computer_Science/CO/COhomework/#46","title":"4.6","text":"<p>question</p> <p>Section 4.4 does not discuss I-type instructions like addi or andi.</p> <ul> <li>4.6.1 What additional logic blocks, if any, are needed to add I-type instructions to the CPU shown in Figure 4.21? Add any necessary logic blocks to Figure 4.21 and explain their purpose.</li> <li>4.6.2 List the values of the signals generated by the control unit for addi. Explain the reasoning for any \u201cdon\u2019t care\u201d control signals.</li> </ul> <p>answer</p> <ul> <li>4.6.1</li> </ul> <p>No any additional blocks needed.</p> <ul> <li> <p>4.6.2</p> RegWrite ALUSrc ALUOp Memwrite Memread MemToReg Branch 1 1 add\u5bf9\u5e94\u7684 0 0 0 0 </li> </ul>"},{"location":"Computer_Science/CO/COhomework/#47","title":"4.7","text":"<p>question</p> <p>Problems in this exercise assume that the logic blocks used to implement a processor\u2019s datapath have the following latencies:</p> I-Mem/D-Mem Register File Mux ALU Adder Single gate Register Read Register Setup Sign extend Control 250 ps 150 ps 25 ps 200 ps 150 ps 5 ps 30 ps 20 ps 50 ps 50 ps <p>\u201cRegister read\u201d is the time needed after the rising clock edge for the new register value to appear on the output. This value applies to the PC only. \u201cRegister setup\u201d is the amount of time a register\u2019s data input must be stable before the rising edge of the clock. This value applies to both the PC and Register File.</p> <ul> <li>4.7.1 What is the latency of an R-type instruction (i.e., how long must the clock period be to ensure that this instruction works correctly)?</li> <li>4.7.2 What is the latency of ld? (Check your answer carefully. Many students place extra muxes on the critical path.)</li> <li>4.7.3 What is the latency of sd? (Check your answer carefully. Many students place extra muxes on the critical path.)</li> <li>4.7.4 What is the latency of beq?</li> <li>4.7.5 What is the latency of an I-type instruction?</li> <li>4.7.6 What is the minimum clock period for this CPU?</li> </ul> <p>answer</p> <ul> <li>4.7.1</li> </ul> <p>30 + 250 + 150 + 25 + 200 + 25 + 20 = 700 ps</p> <ul> <li>4.7.2</li> </ul> <p>30 + 250 + 150 + 25 + 200 + 250 + 25 + 20 = 950 ps</p> <ul> <li>4.7.3</li> </ul> <p>30 + 250 + 150 + 25 + 200 + 250 = 905 ps</p> <ul> <li>4.7.4</li> </ul> <p>30 + 250 + 150 + 25 + 200 + 5 + 25 + 20 = 705 ps</p> <ul> <li>4.7.5</li> </ul> <p>30 + 250 + 150 + 25 + 200 + 25 + 20 = 700 ps</p> <ul> <li>4.7.6</li> </ul> <p>950 ps</p>"},{"location":"Computer_Science/CO/COhomework/#49","title":"4.9","text":"<p>question</p> <p>Consider the addition of a multiplier to the CPU shown in Figure 4.21. This addition will add 300ps to the latency of the ALU, but will reduce the number of instructions by 5% (because there will no longer be a need to emulate the multiply instruction).</p> <ul> <li>4.9.1 What is the clock cycle time with and without this improvement?</li> <li>4.9.2 What is the speedup achieved by adding this improvement?</li> <li>4.9.3 What is the slowest the new ALU can be and still result in improved performance?</li> </ul> <p>answer</p> <ul> <li>4.9.1</li> </ul> <p>without 950ps</p> <p>with 1250 ps</p> <ul> <li>4.9.2</li> </ul> <p>\\(\\(\\frac{950}{0.95 \\times 1250} = 0.8\\)\\)</p> <ul> <li>4.9.3</li> </ul> <p>\\(\\(950 - \\frac{950}{0.95} = 50\\)\\)</p> <p>So, from 200 ps to 250 ps</p>"},{"location":"Computer_Science/CO/COhomework/#411","title":"4.11","text":"<p>question</p> <p>Examine the difficulty of adding a proposed lwi.d rd, rs1, rs2 (\u201cLoad With Increment\u201d) instruction to RISC-V.</p> <p>Interpretation: Reg[rd]=Mem[Reg[rs1]+Reg[rs2]]</p> <ul> <li>4.11.1 Which new functional blocks (if any) do we need for this instruction?</li> <li>4.11.2 Which existing functional blocks (if any) require modification?</li> <li>4.11.3 Which new data paths (if any) do we need for this instruction?</li> <li>4.11.4 What new signals do we need (if any) from the control unit to support this instruction?</li> </ul> <p>answer</p> <ul> <li>4.11.1 </li> </ul> <p>no</p> <ul> <li>4.11.2 </li> </ul> <p>the control signals \u9700\u8981\u589e\u52a0\u5728 lwi \u4e0b\u7684\u4fe1\u53f7\u9009\u62e9</p> <ul> <li>4.11.3 </li> </ul> <p>no</p> <ul> <li>4.11.4 </li> </ul> <p>no</p>"},{"location":"Computer_Science/CO/COhomework/#416","title":"4.16","text":"<p>question</p> <p>In this exercise, we examine how pipelining affects the clock cycle time of the processor. Problems in this exercise assume that individual stages of the datapath have the following latencies:</p> IF ID EX MEM WB 250 ps 350 ps 150 ps 300 ps 200 ps <p>Also, assume that instructions executed by the processor are broken down as follows:</p> ALU/Logic Jump/Branch Load Store 45% 20% 20% 15% <ul> <li>4.16.1 What is the clock cycle time in a pipelined and non-pipelined processor?</li> <li>4.16.2 What is the total latency of an ld instruction in a pipelined and non-pipelined processor?</li> <li>4.16.3 If we can split one stage of the pipelined datapath into two new stages, each with half the latency of the original stage, which stage would you split and what is the new clock cycle time of the processor?</li> <li>4.16.4 Assuming there are no stalls or hazards, what is the utilization of the data memory?</li> <li>4.16.5 Assuming there are no stalls or hazards, what is the utilization of the write-register port of the \u201cRegisters\u201d unit?</li> </ul> <p>answer</p> <ul> <li>4.16.1 </li> </ul> <p>non-pipelined : 250 + 350 + 150 + 300 + 200 = 1250 ps</p> <p>pipelined : 350 ps</p> <ul> <li>4.16.2</li> </ul> <p>non-pipelined : 1250 ps</p> <p>pipelined : 1250 ps</p> <ul> <li>4.16.3</li> </ul> <p>Split the ID</p> <p>300 ps</p> <ul> <li>4.16.4</li> </ul> <p>20% + 15% = 35%</p> <ul> <li>4.16.5</li> </ul> <p>45% + 20% = 65%</p> <p>(\u6216\u8bb8\u5e94\u8be5\u662f65%-85%\u4e4b\u95f4\uff0c\u4f46\u662f\u8003\u8bd5\u7684\u65f6\u5019\u9898\u76ee\u91cc\u4f1a\u9690\u542b\u4fe1\u606f\uff0c\u6bd4\u5982\u4f1a\u4e0d\u4f1a\u652f\u6301jal\u5565\u7684\uff0c\u6216\u8bb8\u662f\u53ea\u652f\u6301R\u578b\u6307\u4ee4\u7684)</p>"},{"location":"Computer_Science/CO/COhomework/#418","title":"4.18","text":"<p>question</p> <p>Assume that x11 is initialized to 11 and x12 is initialized to 22. Suppose you executed the code below on a version of the pipeline from Section 4.5 that does not handle data hazards (i.e., the programmer is responsible for addressing data hazards by inserting NOP instructions where necessary). What would the final values of registers x13 and x14 be?</p> <pre><code>addi x11, x12, 5\nadd x13, x11, x12\naddi x14, x11, 15\n</code></pre> <p>answer</p> <pre><code>x13 11 + 22 = 33\nx14 11 + 15 = 26\n</code></pre>"},{"location":"Computer_Science/CO/COhomework/#420","title":"4.20","text":"<p>question</p> <p>Add NOP instructions to the code below so that it will run correctly on a pipeline that does not handle data hazards.</p> <pre><code>addi x11, x12, 5\nadd x13, x11, x12\naddi x14, x11, 15\nadd x15, x13, x12\n</code></pre> <p>answer</p> <pre><code>addi x11, x12, 5\nNOP\nNOP\nadd x13, x11, x12\naddi x14, x11, 15\nNOP\nadd x15, x13, x12\n</code></pre>"},{"location":"Computer_Science/CO/COhomework/#425","title":"4.25","text":"<p>question</p> <p>Consider the following loop.</p> <pre><code>LOOP : ld x10, 0(x13)\n       ld x11, 8(x13)\n       add x12, x10, x11\n       subi x13, x13, 16\n       bnez x12, LOOP\n</code></pre> <p>Assume that perfect branch prediction is used (no stalls due to control hazards), that there are no delay slots, that the pipeline has full forwarding support, and that branches are resolved in the EX (as opposed to the ID) stage.</p> <ul> <li>4.25.1 Show a pipeline execution diagram for the first two iterations of this loop.</li> <li>4.25.2 Mark pipeline stages that do not perform useful work. How often while the pipeline is full do we have a cycle in which all five pipeline stages are doing useful work? (Begin with the cycle during which the subi is in the IF stage. End with the cycle during which the bnez is in the IF stage.)</li> </ul> <p>answer</p> <ul> <li>4.25.1</li> </ul> <p></p> <p>\u4e0a\u9762\u662f\u7b54\u6848\u7ed9\u51fa\u7684\u89e3\u7b54\u3002\u6ce8\u610f\u6b64\u5904\u7b54\u6848\u6709\u8bef\uff0c\u7b2c\u4e00\u4e2a <code>stall</code> \u4e4b\u540e\u5e94\u8be5\u4e0d\u662f <code>EX</code> \u800c\u662f <code>ID</code> \uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5199\u4e00\u884c <code>NOP</code> \u6700\u4fdd\u9669\uff0c <code>data hazard</code> \u53ea\u8981\u4e0d\u662f <code>load use data hazard</code> \u53ea\u8981\u4e0d\u662f\u4e0a\u4e00\u4e2a <code>ld</code> \u7684 <code>rd</code> \u4e0d\u662f\u4e0b\u4e00\u4e2a\u7684 <code>rs</code> \uff08\u524d\u63d0\u662f\u5fc5\u987b\u8981\u652f\u6301 <code>forwarding</code> \u5426\u5219\u8981\u633a\u4e24\u4e2a\u5468\u671f\uff09</p> <p>\u6240\u4ee5\u53ef\u4ee5\u5199\u6210</p> <pre><code>ld x10, 0(x13)\nld x11, 8(x13)\nadd x12, x10, x11\naddi x13, x13, -16\nbnez x12, LOOP\nld x10, 0(x13)\nld x11, 8(x13)\nadd x12, x10, x11\naddi x13, x13, -16\nbnez x12, LOOP\n</code></pre> <ul> <li>4.25.2</li> </ul> <p>In a particular clock cycle,a pipeline stage is not doing useful work if it is stalled or if the instruction going through that stage is not doing any useful work there. As the diagram above shows,there are not any cycles during which every pipeline stage is doing useful work.</p>"},{"location":"Computer_Science/CO/COhomework/#5-large-and-fast-exploiting-memory-hierarchy","title":"5 Large and Fast: Exploiting Memory Hierarchy","text":""},{"location":"Computer_Science/CO/COhomework/#53","title":"5.3","text":"<p>question</p> <p>By convention, a cache is named according to the amount of data it contains (i.e., a 4 KiB cache can hold 4 KiB of data); however, caches also require SRAM to store metadata such as tags and valid bits. For this exercise, you will examine how a cache\u2019s configuration affects the total amount of SRAM needed to implement it as well as the performance of the cache. For all parts, assume that the caches are byte addressable, and that addresses and words are 64 bits.</p> <ul> <li>5.3.1 Calculate the total number of bits required to implement a 32 KiB cache with two-word blocks.</li> <li>5.3.2 Calculate the total number of bits required to implement a 64 KiB cache with 16-word blocks. How much bigger is this cache than the 32 KiB cache described in Exercise 5.3.1? (Notice that, by changing the block size, we doubled the amount of data without doubling the total size of the cache.)</li> <li>5.3.3 Explain why this 64 KiB cache, despite its larger data size, might provide slower performance than the first cache.</li> <li>5.3.4 Generate a series of read requests that have a lower miss rate on a 32 KiB two-way set associative cache than on the cache described in Exercise 5.3.1.</li> </ul> <p>answer</p> <ul> <li>5.3.1 </li> </ul> <p>each block \\(64 \\times 2 = 2^{7}\\)bits</p> <p>cache contains \\(32 \\times 2^{10} \\times 8= 2^{18}\\)bits</p> <p>so there are \\(\\frac{2^{18}}{2^7} = 2^{11}\\)blocks</p> <p>word offset \\(3\\), block offset \\(1\\), index \\(11\\), so the tag \\(64-3-1-11 = 49\\)</p> <p>$total  = 2^{18} + 2^{11} \\times (49+1) = 2^{18} + 25 \\times 2^{12} =364544 $ bits</p> <ul> <li>5.3.2</li> </ul> <p>each block \\(64 \\times 16 = 2^{10}\\) bits</p> <p>cache contains \\(64 \\times 2^{10} \\times 8 = 2^{19}\\) bits</p> <p>so there are \\(2^{9}\\) blocks</p> <p>word offset 3, block offset 4, index 9, so the tag \\(64-3-4-9 = 48\\)</p> <p>\\(total = 2^{19}+ 2^{9} \\times (48 + 1) = 549376\\) bits</p> <p>\\(\\frac{549376}{364544} \\approx 1.507\\)</p> <ul> <li>5.3.3</li> </ul> <p>\u5f53 <code>cache</code> \u7684\u5927\u5c0f\u53d8\u5927\u540e\u5bf9\u4e8e <code>cache</code> \u7684\u5bfb\u5740\u9700\u8981\u82b1\u7684\u65f6\u95f4\u4e5f\u4f1a\u53d8\u591a\uff0c\u6240\u4ee5 <code>hit time</code> \u82b1\u8d39\u7684\u65f6\u95f4\u4e5f\u4f1a\u53d8\u591a\u3002\u800c\u7b2c\u4e8c\u4e2a <code>cache</code> \u7684 <code>block</code> \u7684\u6570\u91cf\u6bd4\u7b2c\u4e00\u4e2a <code>cache</code> \u8981\u5c11\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a <code>cache</code> \u7684 <code>miss rate</code> \u4f1a\u66f4\u9ad8\uff0c\u90a3\u4e48 <code>might provide slower performance</code> .</p> <ul> <li>5.3.4</li> </ul> <p>\u8bbf\u95ee \\(0,2^{15},0,2^{15},\\dots\\) \u5373\u53ef\u3002\u5728\u76f4\u63a5\u6620\u5c04\u7f13\u5b58\u4e2d\u5730\u5740\u4f1a\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5185\u5b58\u4e2d\u800c\u5728 <code>2-way associative</code> \u4e2d\u4f1a\u5b58\u5165 <code>set</code> \u4e2d\u7684\u4e24\u4e2a\u4f4d\u7f6e</p>"},{"location":"Computer_Science/CO/COhomework/#54","title":"5.4","text":"<p>question</p> <p>Section 5.3 shows the typical method to index a direct-mapped cache, specifically (Block address) modulo (Number of blocks in the cache). Assuming a 64-bit address and 1024 blocks in the cache, consider a different indexing function, specifically (Block address[63:54] XOR Block address[53:44]). Is it possible to use this to index a direct-mapped cache? If so, explain why and discuss any changes that might need to be made to the cache. If it is not possible, explain why.</p> <p>answer</p> <p>\\(2^{10}\\) blocks</p> <p>index 10</p> <p>[63:54] XOR [53:44] \u4f1a\u4ea7\u751f 10 bits \u53ef\u4ee5\u7528\u4f5c index</p> <p>\u6240\u4ee5\u7406\u8bba\u4e0a\u662f\u53ef\u884c\u7684</p> <p>\u9700\u8981\u589e\u52a0\u652f\u6301\u5f02\u6216\u64cd\u4f5c\u7684\u786c\u4ef6</p>"},{"location":"Computer_Science/CO/COhomework/#55","title":"5.5","text":"<p>question</p> <p>For a direct-mapped cache design with a 64-bit address, the following bits of the address are used to access the cache.</p> Tag Index Offset 63-10 9-5 4-0 <ul> <li> <p>5.5.1 What is the cache block size (in words)?</p> </li> <li> <p>5.5.2 How many blocks does the cache have?</p> </li> <li> <p>5.5.3 What is the ratio between total bits required for such a cache implementation over the data storage bits? </p> </li> </ul> <p>Beginning from power on, the following byte-addressed cache references are recorded. </p> <p>Address</p> Hex 00 04 10 84 E8 A0 400 1E 8C C1C B4 884 Dec 0 4 16 132 232 160 1024 30 140 3100 180 2180 <ul> <li> <p>5.5.4 For each reference, list (1) its tag, index, and offset, (2) whether it is a hit or a miss, and (3) which bytes were replaced (if any).</p> </li> <li> <p>5.5.5 What is the hit ratio?</p> </li> <li> <p>5.5.6 List the final state of the cache, with each valid entry represented as a record of . For example, <code>&lt;0, 3, Mem[0xC00]-Mem[0xC1F]&gt;</code> <p>answer</p> <ul> <li>5.5.1</li> </ul> <p>5\u4f4d <code>offset</code> \uff0c \u4e00\u4e2a <code>word</code> 8\u4e2a byte \uff0c<code>word offset</code> \u662f 3 \u4f4d\uff0c\u6240\u4ee5 <code>block offset</code> \u662f 2 \u4f4d\uff0c\u4e5f\u5c31\u662f <code>block size</code> \\(= 2^2=4\\) words</p> <ul> <li>5.5.2</li> </ul> <p>\u6709 5 \u4f4d <code>index</code> \uff0c\u6240\u4ee5\u4e00\u5171 \\(2^5=32\\) \u4e2a <code>blocks</code>.</p> <ul> <li>5.5.3</li> </ul> <p>$ 2^{5} \\times 2^{5} \\times 2^{3} = 8192 $ bits</p> <p><code>total</code> $ = 2^{5} \\times (54 + 1)  + 2^{5} \\times 2^{5} \\times 2^{3} =  9952$ bits</p> <p>\\(\\frac{9952}{8192} \\approx 1.21\\)</p> <ul> <li>5.5.4</li> </ul> binary address Tag index offset hit or miss if replaced(\u5bf9\u5e94\u7684block) 0000 0000 0000 00 00000 00000 miss 0000 0000 0100 00 00000 00100 hit 0000 0001 0000 00 00000 10000 hit 0000 1000 0100 00 00100 00100 miss 0000 1110 1000 00 00111 01000 miss 0000 1010 0000 00 00101 00000 miss 0100 0000 0000 01 00000 00000 miss 0000 0000 0000 0000 0001 1110 00 00000 11110 miss 0100 0000 0000 0000 1000 1100 00 00100 01100 hit 1100 0001 1100 11 00000 11100 miss 0000 0000 0000 0000 1011 0100 00 00101 10100 hit 1000 1000 0100 10 00100 00100 miss 0000 1000 1100 <ul> <li>5.5.5</li> </ul> <p>\\(\\frac{4}{12} \\approx 33\\%\\)</p> <ul> <li>5.5.6</li> </ul> <p><code>&lt;4,2,Mem[Ox 880] - Mem[Ox89f]</code></p> <p><code>&lt;5,0,Mem[Ox 0A0] - Mem[Ox 0Bf]</code></p> <p><code>&lt;0,3,Mem[Ox C00] - Mem[Ox C1f]</code></p> <p><code>&lt;7,0,Mem[Ox 0e0] - Mem[Ox 0ff]</code></p>"},{"location":"Computer_Science/CO/COhomework/#56","title":"5.6","text":"<p>question</p> <p>Recall that we have two write policies and two write allocation policies, and their combinations can be implemented either in L1 or L2 cache. Assume the following choices for L1 and L2 caches:</p> L1 L2 Write through, non-write allocate Write back, write allocate <ul> <li>5.6.1 Buffers are employed between different levels of memory hierarchy to reduce access latency. For this given configuration, list the possible buffers needed between L1 and L2 caches, as well as L2 cache and memory.</li> <li>5.6.2 Describe the procedure of handling an L1 write-miss, considering the components involved and the possibility of replacing a dirty block.</li> <li>5.6.3 For a multilevel exclusive cache configuration (a block can only reside in one of the L1 and L2 caches), describe the procedures of handling an L1 write-miss and an L1 read-miss, considering the components involved and the possibility of replacing a dirty block.</li> </ul> <p>answer</p> <ul> <li>5.6.1</li> </ul> <p>between L1 and L2  : the buffer for write miss penalty for L2 </p> <p>(\u8fd9\u4e2a <code>write buffer</code> \u662f\u4e3a\u4e86\u964d\u4f4e\u4e0a\u4e00\u7ea7\u5f80\u4e0b\u4e00\u7ea7\u53bb\u5199\u7684\u5f00\u9500\uff0c\u6bd4\u5982 <code>write through</code> \u4e0d\u7ba1\u662f\u4e0d\u662f <code>miss</code> \u90fd\u8981\u5f80\u56de\u5199\u3002\u5e76\u4e14\uff0c\u5982\u679c\u53d1\u751f\u4e86 <code>write miss</code> \uff0c\u90a3\u4e48 L1 \u548c L2 \u4e4b\u95f4\u7684 <code>write buffer</code> \u964d\u4f4e\u7684\u662f L1 \u7684 <code>penalty</code> )</p> <p>between L2 and memory : the buffer for write back</p> <ul> <li>5.6.2</li> </ul> <p>For non-write allocate, the word will be written into L2 directly. If write miss doesn't happen, just write into L2 cache because of the \"Write back\". And if write miss happens, since L2 is Write back, first check the dirty bit. If the dirty bit is 0, just read from memory and write. If the dirty bit is 1, we need write this block to memory and then read and write.</p> <ul> <li>5.6.3</li> </ul> <p>For L1 write-miss, the block will be written into L2, and let its dirty bit to be 1.</p> <p>For L1 read-miss, if L2 doesn't read miss, the block will be written to memory (if dirty bit is 1) and read into L1 and will not in L2. If L2 also read miss, it will read from memory and transfer to L1 but not saved in L2.</p>"},{"location":"Computer_Science/CO/COhomework/#510","title":"5.10","text":"<p>question</p> <p>In this exercise, we will look at the different ways capacity affects overall performance. In general, cache access time is proportional to capacity. Assume that main memory accesses take 70ns and that 36% of all instructions access data memory. The following table shows data for L1 caches attached to each of two processors, P1 and P2.</p> L1 Size L1 Miss Rate L1 Hit Time P1 2 KiB 8.0% 0.66 ns P2 4 KiB 6.0% 0.90 ns <ul> <li> <p>5.10.1 Assuming that the L1 hit time determines the cycle times for P1 and P2, what are their respective clock rates?</p> </li> <li> <p>5.10.2 What is the Average Memory Access Time for P1 and P2 (in cycles)?</p> </li> <li> <p>5.10.3 Assuming a base CPI of 1.0 without any memory stalls, what is the total CPI for P1 and P2? Which processor is faster? (When we say a \u201cbase CPI of 1.0\u201d, we mean that instructions complete in one cycle, unless either the instruction access or the data access causes a cache miss.)</p> </li> </ul> <p>For the next three problems, we will consider the addition of an L2 cache to P1 (to presumably make up for its limited L1 cache capacity). Use the L1 cache capacities and hit times from the previous table when solving these problems. The L2 miss rate indicated is its local miss rate.</p> L2 Size L2 Miss Rate L2 Hit Time 1 MiB 95% 5.62 ns <ul> <li> <p>5.10.4 What is the AMAT for P1 with the addition of an L2 cache? Is the AMAT better or worse with the L2 cache?</p> </li> <li> <p>5.10.5 Assuming a base CPI of 1.0 without any memory stalls, what is the total CPI for P1 with the addition of an L2 cache?</p> </li> <li> <p>5.10.6 What would the L2 miss rate need to be in order for P1 with an L2 cache to be faster than P1 without an L2 cache?</p> </li> <li> <p>5.10.7 What would the L2 miss rate need to be in order for P1 with an L2 cache to be faster than P2 without an L2 cache?</p> </li> </ul> <p>answer</p> <ul> <li>5.10.1</li> </ul> <p>P1 : \\(\\frac{1}{0.66 ns} = 1.52 \\times 10^{9} Hz\\)</p> <p>P2 : \\(\\frac{1}{0.90 ns} = 1.11 \\times 10^{9} Hz\\)</p> <ul> <li>5.10.2</li> </ul> <p>P1 : </p> <p>If miss \\(\\lceil \\frac{70 ns}{0.66 ns} \\rceil = 107 cycles\\)</p> <p>AMAT : \\(8\\% \\times 107 + 1 = 9.56 cycles\\)</p> <p>P2 : </p> <p>If miss \\(\\lceil \\frac{70ns}{0.90ns} \\rceil = 78cycles\\)</p> <p>AMAT : \\(6\\% \\times 78 + 1 = 5.68cycles\\)</p> <ul> <li>5.10.3</li> </ul> <p>P1 CPI : </p> <p>\\(1 + 8\\% \\times 107 + 36\\% \\times 8\\% \\times 107 = 12.6416\\)</p> <p>P2 CPI :</p> <p>\\(1 + 6\\% \\times 78 + 36\\% \\times 6\\% \\times 78 = 7.3648\\)</p> <p>\\(T_{P1} = 12.6416 \\times 0.66 = 8.343456 ns\\) and \\(T_{P2} = 6.62832 ns\\)</p> <p>so, P2 is faster</p> <ul> <li>5.10.4</li> </ul> <p>If miss and could be found in L2 : \\(\\lceil \\frac{5.62}{0.66} \\rceil = 9cycles\\)</p> <p>If miss and couldn't be found in L2 : \\(\\lceil \\frac{70}{0.66} \\rceil = 107cycles\\)</p> <p>AMAT : \\(1 + 8\\% \\times 9 + 8\\% \\times 95\\% \\times 107 = 9.852cycles\\) </p> <p>worse</p> <ul> <li>5.10.5</li> </ul> <p>CPI : \\(1 + 8\\% \\times (9 + 95\\% \\times 107) + 36\\% \\times 8\\% \\times (9 + 95\\% \\times 107) = 13.03872\\)</p> <ul> <li>5.10.6</li> </ul> <p>so $ 1 + 8\\% \\times (9 + x \\times 107) + 36\\% \\times 8\\% (9 + x \\times 107) \\le 12.6416$</p> <p>we could get $ x \\le 91.59\\% $</p> <ul> <li>5.10.7 </li> </ul> <p>so \\([1 + 8\\% \\times (9 + x \\times 107) + 36\\% \\times 8\\% (9 + x \\times 107)] \\times 0.66 \\le 6.62832\\)</p> <p>we could get \\(x \\le 69.27\\%\\)</p> <p>(\u8fd9\u91cc\u8981\u6ce8\u610f\u5df2\u7ecf\u4e0d\u662f\u540c\u4e00\u4e2a <code>CPU</code> \u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4 <code>clock cycle time</code> \u662f\u4e0d\u540c\u7684\uff0c\u56e0\u6b64\u8ba1\u7b97\u7684\u9002\u5408\u4e0d\u80fd\u518d\u7531 <code>cycle</code> \u7684\u6570\u91cf\u6765\u8ba1\u7b97\u4e86)</p>"},{"location":"Computer_Science/CO/COhomework/#511","title":"5.11","text":"<p>question</p> <p>This exercise examines the effect of different cache designs, specifically comparing associative caches to the direct-mapped caches from Section 5.4. For these exercises, refer to the sequence of word address shown below.</p> <p><code>0x03, 0xb4, 0x2b, 0x02, 0xbe, 0x58, 0xbf, 0x0e, 0x1f, 0xb5, 0xbf, 0xba, 0x2e, 0xce</code></p> <ul> <li>5.11.1 Sketch the organization of a three-way set associative cache with two-word blocks and a total size of 48 words. Your sketch should have a style similar to Figure 5.18, but clearly show the width of the tag and data fields.</li> <li>5.11.2 Trace the behavior of the cache from Exercise 5.11.1. Assume a true LRU replacement policy. For each reference, identify</li> <li>the binary word address,</li> <li>the tag</li> <li>the index</li> <li>the offset</li> <li>whether the reference is a hit or a miss, and</li> <li>which tags are in each way of the cache after the reference has been handled.</li> <li>5.11.3 Sketch the organization of a fully associative cache with one-word blocks and a total size of eight words. Your sketch should have a style similar to Figure 5.18, but clearly show the width of the tag and data fields.</li> <li>5.11.4 Trace the behavior of the cache from Exercise 5.11.3. Assume a true LRU replacement policy. For each reference, identify</li> <li>the binary word address,</li> <li>the tag</li> <li>the index</li> <li>the offset</li> <li>whether the reference is a hit or a miss, and</li> <li>the contents of the cache after each reference has been handled.</li> <li>5.11.5 Sketch the organization of a fully associative cache with two-word blocks and a total size of eight words. Your sketch should have a style similar to Figure 5.18, but clearly show the width of the tag and data fields.</li> <li>5.11.6 Trace the behavior of the cache from Exercise 5.11.5. Assume an LRU replacement policy. For each reference, identify</li> <li>the binary word address,</li> <li>the tag</li> <li>the index</li> <li>the offset</li> <li>whether the reference is a hit or a miss, and</li> <li>the contents of the cache after each reference has been handled.</li> <li>5.11.7 Repeat Exercise 5.11.6 using MRU (most recently used) replacement.</li> <li>5.11.8 Repeat Exercise 5.11.6 using the optimal replacement policy (i.e., the one that gives the lowest miss rate).</li> </ul> <p>answer</p> <ul> <li>5.11.1</li> </ul> <p>\u4e0e\u4e4b\u7c7b\u4f3c</p> <p></p> <ul> <li>5.11.2</li> </ul> Binary Address tag index word offset hit or miss way0 way1 way2 0000 0011 0000 001 1 miss T(1)=0 1011 0100 1011 010 0 miss T(1) = 0T(2) = b 0010 1011 0010 101 1 miss T(1) = 0T(2)=bT(5) = 2 0000 0010 0000 001 0 hit T(1) = 0T(2)=bT(5) = 2 1011 1110 1011 111 0 miss T(1) = 0T(2)=bT(5) = 2T(7) = b 0101 1000 0101 100 0 miss T(1) = 0T(2)=bT(5) = 2T(7) = bT(4) = 5 1011 1111 1011 111 1 hit T(1) = 0T(2)=bT(5) = 2T(7) = bT(4) = 5 0000 1110 0000 111 0 miss T(1) = 0T(2)=bT(5) = 2T(7) = bT(4) = 5 T(7) = 0 0001 1111 0001 111 1 miss T(1) = 0T(2)=bT(5) = 2T(7) = bT(4) = 5 T(7)=0 T(7) = 1 1011 0101 1011 010 1 hit T(1) = 0T(2)=bT(5) = 2T(7) = bT(4) = 5 T(7)=0 T(7) = 1 1011 1111 1011 111 1 hit T(1) = 0T(2)=bT(5) = 2T(7) = bT(4) = 5 T(7)=0 T(7) = 1 1011 1010 1011 101 0 miss T(1) = 0T(2)=bT(5) = 2T(7) = bT(4) = 5 T(7)=0T(5) = b T(7) = 1 0010 1110 0010 111 0 miss T(1) = 0T(2)=bT(5) = 2T(7) = bT(4) = 5 T(7)=2T(5) = b T(7) = 1 1100 1110 1100 111 0 miss T(1) = 0T(2)=bT(5) = 2T(7) = bT(4) = 5 T(7)=2T(5) = b T(7) = c <ul> <li> <p>5.11.3</p> </li> <li> <p>5.11.4</p> </li> </ul> <p>\u6ca1\u6709 index</p> <p>\u6ca1\u6709 word offset</p> Binary Address tag hit or miss data 0000 0011 0000 0011 miss 0000 0011 1011 0100 1011 0100 miss 0000 00111011 0100 0010 1011 0010 1011 miss 0000 00111011 01000010 1011 0000 0010 0000 0010 miss 0000 00111011 01000010 10110000 0010 1011 1110 1011 1110 miss 0000 00111011 01000010 10110000 00101011 1110 0101 1000 0101 1000 miss 0000 00111011 01000010 10110000 00101011 11100101 1000 1011 1111 1011 1111 miss 0000 00111011 01000010 10110000 00101011 11100101 10001011 1111 0000 1110 0000 1110 miss 0000 00111011 01000010 10110000 00101011 11100101 10001011 11110000 1110 0001 1111 0001 1111 miss 1011 01000010 10110000 00101011 11100101 10001011 11110000 11100001 1111 1011 0101 1011 0101 miss 0010 10110000 00101011 11100101 10001011 11110000 11100001 11111011 0101 1011 1111 1011 1111 hit 0010 10110000 00101011 11100101 10000000 11100001 11111011 01011011 1111 1011 1010 1011 1010 miss 0000 00101011 11100101 10000000 11100001 11111011 01011011 11111011 1010 0010 1110 0010 1110 miss 1011 11100101 10000000 11100001 11111011 01011011 11111011 10100010 1110 1100 1110 1100 1110 miss 0101 10000000 11100001 11111011 01011011 11111011 10100010 11101100 1110 <ul> <li> <p>5.11.5 </p> </li> <li> <p>5.11.6</p> </li> </ul> <p>\u6ca1\u6709 index</p> Binary Address tag word offset hit or miss data 0000 0011 0000 001 1 miss [2,3] 1011 0100 1011 010 0 miss [2,3],[b4,b5] 0010 1011 0010 101 1 miss [2,3],[b4,b5],[2a,2b] 0000 0010 0000 001 0 hit [b4,b5],[2a,2b],[2,3] 1011 1110 1011 111 0 miss [b4,b5],[2a,2b],[2,3],[be,bf] 0101 1000 0101 100 0 miss [2a,2b],[2,3],[be,bf],[58,59] 1011 1111 1011 111 1 hit [2a,2b],[2,3],[58,59],[be,bf] 0000 1110 0000 111 0 miss [2,3],[58,59],[be,bf],[e,f] 0001 1111 0001 111 1 miss [58,59],[be,bf],[e,f],[1e,1f] 1011 0101 1011 010 1 miss [be,bf],[e,f],[1e,1f],[b4,b5] 1011 1111 1011 111 1 hit [e,f],[1e,1f],[b4,b5],[be,bf] 1011 1010 1011 101 0 miss [1e,1f],[b4,b5],[be,bf],[ba,bb] 0010 1110 0010 111 0 miss [b4,b5],[be,bf],[ba,bb],[2e,2f] 1100 1110 1100 111 0 miss [be,bf],[ba,bb],[2e,2f,[ce,cf] <ul> <li>5.11.7</li> </ul> <p>\u6ca1\u6709 index</p> Binary Address tag word offset hit or miss data 0000 0011 0000 001 1 miss [2,3] 1011 0100 1011 010 0 miss [2,3],[b4,b5] 0010 1011 0010 101 1 miss [2,3],[b4,b5],[2a,2b] 0000 0010 0000 001 0 hit [b4,b5],[2a,2b],[2,3] 1011 1110 1011 111 0 miss [b4,b5],[2a,2b],[2,3],[be,bf] 0101 1000 0101 100 0 miss [b4,b5],[2a,2b],[2,3],[58,59] 1011 1111 1011 111 1 miss [b4,b5],[2a,2b],[2,3],[be,bf] 0000 1110 0000 111 0 miss [b4,b5],[2a,2b],[2,3],[e,f] 0001 1111 0001 111 1 miss [b4,b5],[2a,2b],[2,3],[1e,1f] 1011 0101 1011 010 1 hit [2a,2b],[2,3],[1e,1f],[b4,b5] 1011 1111 1011 111 1 miss [2a,2b],[2,3],[1e,1f],[be,bf] 1011 1010 1011 101 0 miss [2a,2b],[2,3],[1e,1f],[ba,bb] 0010 1110 0010 111 0 miss [2a,2b],[2,3],[1e,1f],[2e,2f] 1100 1110 1100 111 0 miss [2a,2b],[2,3],[1e,1f],[ce,cf] <ul> <li>5.11.8 </li> </ul> <p>\u4e0a\u5e1d\u89c6\u89d2\uff0c\u51cf\u5c11\u66ff\u6362\u6b21\u6570(\u540e\u9762\u5982\u679c\u8981\u7528\u90a3\u5c31\u4e0d\u66ff\u6362\u51fa\u53bb)</p>"},{"location":"Computer_Science/CO/COhomework/#516","title":"5.16","text":"<p>question</p> <p>As described in Section 5.7, virtual memory uses a page table to track the mapping of virtual addresses to physical addresses. This exercise shows how this table must be updated as addresses are accessed. The following data constitute a stream of virtual byte addresses as seen on a system. Assume 4 KiB pages, a four entry fully associative TLB, and true LRU replacement. If pages must be brought in from disk, increment the next largest page number.</p> Decimal 4669 2227 13916 34587 48870 12608 49225 hex 0x123d 0x08b3 0x365c 0x871b 0xbee6 0x3140 0xc049 <p>TLB</p> Valid Tag Physical Page Number Time Since Last  Access 1 0xb 12 4 1 0x7 4 1 1 0x3 6 3 0 0x4 9 7 <p>Page table</p> Index Valid Physical Page or in Disk 0 1 5 1 0 Disk 2 0 Disk 3 1 6 4 1 9 5 1 11 6 0 Disk 7 1 4 8 0 Disk 9 0 Disk a 1 3 b 1 12 <ul> <li>5.16.1 For each access shown above, list</li> <li>whether the access is a hit or miss in the TLB,</li> <li>whether the access is a hit or miss in the page table,</li> <li>whether the access is a page fault,</li> <li>the updated state of the TLB.</li> <li>5.16.2 Repeat Exercise 5.16.1, but this time use 16 KiB pages instead of 4 KiB pages. What would be some of the advantages of having a larger page size? What are some of the disadvantages?</li> <li>5.16.3 Repeat Exercise 5.16.1, but this time use 4 KiB pages and a two-way set associative TLB.</li> <li>5.16.4 Repeat Exercise 5.16.1, but this time use 4 KiB pages and a direct mapped TLB.</li> <li>5.16.5 Discuss why a CPU must have a TLB for high performance. How would virtual memory accesses be handled if there were no TLB?</li> </ul> <p>answer</p> <ul> <li>5.16.1</li> </ul> <p>\u200b       Page size: 4 KiB (\\(2^{12} = 4096\\) bytes)</p> <p>\u200b       Page offset : 12 \u4f4d</p> <p>\u200b       virtual address : 16 \u4f4d</p> <p>\u200b       \\(\\therefore\\) virtual page number 4 \u4f4d</p> Address(0x) Virtual page(0x) TLB | Page table valid Tag(0x) Physical Page 123d 1 M/PF 1/1/1/1 1/7/3/b 13/4/6/12 08b3 0 M/H 1/1/1/1 0/1/7/3 5/13/4/6 365c 3 H 1/1/1/1 3/0/1/7 6/5/13/4 871b 8 M/PF 1/1/1/1 8/3/0/1 14/6/5/13 bee6 b M/H 1/1/1/1 b/8/3/0 12/14/6/5 3140 3 H 1/1/1/1 3/b/8/0 6/12/14/5 c049 c M/PF 1/1/1/1 c/3/b/8 15/6/12/14 <ul> <li>5.16.2</li> </ul> <p>Page size: 16 KiB (\\(2^{14}\\) bytes)</p> <p>Page offset : 14 \u4f4d</p> <p>virtual address : 16 \u4f4d</p> <p>\\(\\therefore\\) virtual page number 2 \u4f4d</p> Address(0x) Virtual page(0x) TLB | Page table valid Tag(0x) Physical Page 123d 0 M/H 1/1/1/1 0/7/3/b 5/4/6/12 08b3 0 H 1/1/1/1 0/7/3/b 5/4/6/12 365c 0 H 1/1/1/1 0/7/3/b 5/4/6/12 871b 2 M/PF 1/1/1/1 2/0/7/3 13/5/4/6 bee6 2 H 1/1/1/1 2/0/7/3 13/5/4/6 3140 0 H 1/1/1/1 0/2/7/3 5/13/4/6 c049 3 H 1/1/1/1 3/0/2/7 6/5/13/4 <p>\u66f4\u5927\u7684\u9875\u9762\u610f\u5473\u7740\u6bcf\u4e2a\u9875\u9762\u6620\u5c04\u66f4\u591a\u7684\u5185\u5b58\uff0c\u51cf\u5c11\u4e86\u9700\u8981\u5728\u9875\u8868\u4e2d\u7ef4\u62a4\u7684\u6761\u76ee\u6570\u91cf\u3002\u7531\u4e8e\u9875\u8868\u9879\u66f4\u5c11\uff0c\u67e5\u627e\u9875\u8868\u7684\u6b21\u6570\u51cf\u5c11\uff0c\u63d0\u9ad8\u4e86\u8bbf\u95ee\u6548\u7387\u3002\u6bcf\u6b21\u52a0\u8f7d\u66f4\u5927\u7684\u9875\u9762\uff0c\u53ef\u4ee5\u8986\u76d6\u66f4\u591a\u7684\u6570\u636e\uff0c\u51cf\u5c11page fault\u3002\u540c\u65f6\u964d\u4f4e\u4e86 TLB \u7684 miss rate \u3002</p> <p>\u5927\u9875\u9762\u53ef\u80fd\u5bfc\u81f4\u9875\u9762\u6ca1\u6709\u88ab\u5b8c\u5168\u5229\u7528\uff0c\u6d6a\u8d39\u5185\u5b58\u3002\u5982\u679c\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u5bfc\u81f4\u66f4\u591a\u7684\u5185\u5b58\u8bbf\u95ee\u3002</p> <ul> <li>5.16.3</li> </ul> <p>2-way set associate</p> <p>virtual page number % n way = index</p> <p>virtual page number / n way = tag</p> Address(0x) Virtual page(0x) TLB | Page table valid Tag(0x) Physical Page 123d 1 M/PF 1/1/1/1 3/b | 0/7 6/12 | 13/4 08b3 0 M/H 1/1/1/1 0/3 | 0/7 5/6 | 13/4 365c 3 M/H 1/1/1/1 0/3 | 1/0 5/6 | 6/13 871b 8 M/PF 1/1/1/1 4/0 | 1/0 14/5 | 6/13 bee6 b M/H 1/1/1/1 4/0 | 5/1 14/5 | 12/6 3140 3 H 1/1/1/1 4/0 | 1/5 14/5 | 6/12 c049 c M/PF 1/1/1/1 6/4 | 1/5 15/14 | 6/12 <ul> <li>5.16.4</li> </ul> <p>direct map</p> <p>index = 4 \u4e5f\u5373\u4e24\u4f4d</p> <p>tag \u4e5f\u4e24\u4f4d</p> Address(0x) Virtual page(0x) TLB | Page table valid Tag(0x) Physical Page 123d 1 M/PF 1/1/1/1 b/0/3/4 12/13/6/9 08b3 0 M/H 1/1/1/1 0/0/3/4 5/13/6/9 365c 3 M/H 1/1/1/1 0/0/3/0 5/13/6/6 871b 8 M/PF 1/1/1/1 1/0/3/0 14/13/6/6 bee6 b M/H 1/1/1/1 1/0/3/2 14/13/6/12 3140 3 M/H 1/1/1/1 1/0/3/0 14/13/6/6 c049 c M/PF 1/1/1/1 3/0/3/0 15/13/6/6 <ul> <li>5.16.5</li> </ul> <p>\u6bcf\u6b21\u8bbf\u95ee\u90fd\u9700\u8981\u67e5\u627e\u9875\u8868\uff0chit time \u6bd4\u8f83\u5927\u3002\u540c\u65f6 CPU \u7684\u7f13\u5b58\u672a\u547d\u4e2d\u7387\u8f83\u9ad8\uff0c\u4e25\u91cd\u5f71\u54cd\u6027\u80fd\u3002</p>"},{"location":"Computer_Science/CO/COhomework/#517","title":"5.17","text":"<p>question</p> <p>There are several parameters that affect the overall size of the page table. Listed below are key page table parameters.</p> Virtual Address Size Page Size Page Table Entry Size 32 bits 8 KiB 4 bytes <ul> <li>5.17.1 Given the parameters shown above, calculate the maximum possible page table size for a system running five processes.</li> <li>5.17.2 Given the parameters shown above, calculate the total page table size for a system running five applications that each utilize half of the virtual memory available, given a two-level page table approach with up to 256 entries at the 1st level. Assume each entry of the main page table is 6 bytes. Calculate the minimum and maximum amount of memory required for this page table.</li> <li>5.17.3 A cache designer wants to increase the size of a 4 KiB virtually indexed, physically tagged cache. Given the page size shown above, is it possible to make a 16 KiB direct-mapped cache, assuming two 64-bit words per block? How would the designer increase the data size of the cache?</li> </ul> <p>answer</p> <ul> <li>5.17.1</li> </ul> <p>$ 8 \\times 2^{10} = 2^{13}bytes$</p> <p>32-13=19 pages</p> <p>$\\therefore 2^{19} \\times 4 \\times 5 = $ 10MiB</p> <ul> <li>5.17.2</li> </ul> <p>\u4e00\u5171 19 \u9875</p> <p>\\(256 = 2^8\\) \u6240\u4ee5\u4e00\u7ea7\u9875\u88688\u9875</p> <p>for level 2 :  \\(2^{19-8} = 2^{11}\\) entries \u90a3\u4e48\u4e8c\u7ea7\u9875\u886811\u9875</p> <p>\u6bcf\u4e00\u9875\u6240\u8986\u76d6\u7684\u5185\u5b58 8 KB</p> <p>\u6bcf\u4e2a2\u7ea7\u9875\u8868\u7684\u8986\u76d6\u5185\u5b58\u7684 \\(2^{11} \\times 2^{13} = 2^{24}\\)bytes</p> <p>half means \\(2^{32-1} = 2^{31}\\)bytes</p> <p>\u6bcf\u4e2a\u5e94\u7528\u9700\u8981\u76842\u7ea7\u9875\u8868\u7684\u6570\u76ee\u4e3a \\(2^{31-24} = 2^{7}\\) \u4e2a</p> <p>\u6bcf\u4e2a2\u7ea7\u9875\u8868\u81ea\u8eab\u7684\u5927\u5c0f\u5360\u636e\u5185\u5b58 \\(2^{11} \\times 4 bytes = 8KB\\)</p> <p>\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e8c\u7ea7\u9875\u8868\u603b\u5185\u5b58\u4e3a \\(2^7 \\cdot 8KB = 1MB\\)</p> <p>\u4f7f\u7528 \\(2^7\\) \u4e2a\u4e8c\u7ea7\u9875\u8868\u90a3\u4e48\u4f7f\u7528 \\(2^7\\) \u4e2a\u4e00\u7ea7\u9875\u8868</p> <p>\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u7ea7\u9875\u8868\u5360\u7528\u5185\u5b58 \\(2^7 \\cdot 6 \\ bytes = 3 \\times 2^8\\) bytes</p> <p>min :  \\(5 \\times (2^{20} + 3 \\times 2^8)\\) bytes</p> <p>max : \u4e5f\u5373\u4e00\u7ea7\u9875\u8868\u5168\u90e8\u7528\u4e0a  \\(5 \\times (2^{20} + 3 \\times 2^9)\\) bytes</p> <ul> <li>5.17.3</li> </ul> <p>\\(16 \\times 2^{10} = 2^{14}\\) bytes</p> <p>\\(2^{14-1-3} = 2^{10}\\) blocks</p> <p>10 index , 4 offset</p> <p>for page , 8 KB page offset  13 &lt; 10 + 4 = 14</p> <p>increase the cache's associativity and then the index will reduce</p>"},{"location":"Computer_Science/CO/COhomework/#520","title":"5.20","text":"<p>question</p> <p>In this exercise, we will examine how replacement policies affect miss rate. Assume a two-way set associative cache with four one-word blocks. Consider the following word address sequence: 0, 1, 2, 3, 4, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0.</p> <p>// Consider the following address sequence: 0, 2, 4, 8, 10, 12, 14, 16, 0</p> <ul> <li>5.20.1 Assuming an LRU replacement policy, which accesses are hits?</li> <li>5.20.2 Assuming an MRU (most recently used) replacement policy, which accesses are hits?</li> <li>5.20.3 Simulate a random replacement policy by flipping a coin. For example, \u201cheads\u201d means to evict the first block in a set and \u201ctails\u201d means to evict the second block in a set. How many hits does this address sequence exhibit?</li> <li>5.20.4 Describe an optimal replacement policy for this sequence. Which accesses are hits using this policy?</li> <li>5.20.5 Describe why it is difficult to implement a cache replacement policy that is optimal for all address sequences.</li> <li>5.20.6 Assume you could make a decision upon each memory reference whether or not you want the requested address to be cached. What effect could this have on miss rate?</li> </ul> <p>answer</p> <ul> <li>5.20.1</li> </ul> <p>00 00\uff0c00 01\uff0c00 10\uff0c00 11\uff0c01 00\uff0c00 10\uff0c00 11\uff0c01 00\uff0c0101\uff0c0110\uff0c0111\uff0c0000\uff0c0001\uff0c0010\uff0c0011\uff0c0100\uff0c0101\uff0c0110\uff0c0111\uff0c0000</p> <p>index \u4e3a 1</p> <p>M,M,M,M,M,H,H,H,M,M,M,M,M,M,M,M,M,M,M,M</p> <ul> <li>5.20.2</li> </ul> <p>M,M,M,M,M,M,H,M,M,M,M,H,H,M,M,M,M,H,H,M</p> <ul> <li> <p>5.20.3 \u4e0d\u80fd\u786e\u5b9a</p> </li> <li> <p>5.20.4 MRU</p> </li> <li> <p>5.20.5 \u9884\u6d4b\u672a\u6765\u7684\u6570\u636e\u662f\u975e\u5e38\u96be\u7684</p> </li> <li> <p>5.20.6 \u5982\u679c\u5df2\u77e5\u4e00\u4e2a\u5730\u5740\u5177\u6709\u6709\u9650\u7684\u65f6\u95f4\u5c40\u90e8\u6027\uff0c\u5e76\u4e14\u4f1a\u5728\u7f13\u5b58\u4e2d\u4e0e\u53e6\u4e00\u4e2a\u5757\u4ea7\u751f\u51b2\u7a81\uff0c\u9009\u62e9\u4e0d\u7f13\u5b58\u5b83\u3002\u53ef\u80fd\u4f1a\u6539\u5584\u7f3a\u5931\u7387\u3002</p> </li> </ul>"},{"location":"Computer_Science/CO/Chapter%201/","title":"Chapter 1","text":"<p> \u7ea6 1048 \u4e2a\u5b57  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"Computer_Science/CO/Chapter%201/#_1","title":"\u541e\u5410\u7387\u548c\u54cd\u5e94\u65f6\u95f4","text":"\u541e\u5410\u7387\u548c\u54cd\u5e94\u65f6\u95f4 <p>\u4e0b\u9762\u4e24\u79cd\u6539\u8fdb\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u65b9\u5f0f\u80fd\u5426\u589e\u52a0\u5176\u541e\u5410\u7387\u6216\u51cf\u5c11\u5176\u54cd\u5e94\u65f6\u95f4\uff0c\u6216\u53ef\u4e8c\u8005\u517c\u5f97?</p> <p>1.\u5c06\u8ba1\u7b97\u673a\u4e2d\u7684\u5904\u7406\u5668\u66f4\u6362\u4e3a\u66f4\u9ad8\u901f\u7684\u578b\u53f7\u3002</p> <p>2.\u4e3a\u7cfb\u7edf\u589e\u52a0\u989d\u5916\u7684\u5904\u7406\u5668\uff0c\u4f7f\u7528\u591a\u5904\u7406\u5668\u6765\u5206\u522b\u5904\u7406\u72ec\u7acb\u7684\u4efb\u52a1\uff0c\u5982\u641c\u7d22\u4e07\u7ef4\u7f51\u7b49</p> Answer <p>\u4e00\u822c\u6765\u8bf4\uff0c\u964d\u4f4e\u54cd\u5e94\u65f6\u95f4\u51e0\u4e4e\u603b\u662f\u53ef\u4ee5\u589e\u52a0\u541e\u5410\u7387\u3002\u56e0\u6b64\uff0c\u65b9\u5f0f1\u540c\u65f6\u6539\u8fdb\u4e86\u54cd\u5e94\u65f6\u95f4\u548c\u541e\u5410\u7387\u3002\u65b9\u5f0f2\u4e0d\u4f1a\u4f7f\u4efb\u52a1\u5b8c\u6210\u5f97\u66f4\u5feb\uff0c\u53ea\u6709\u541e\u5410\u7387\u5f97\u5230\u63d0\u9ad8\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u65b9\u5f0f2\u5bf9\u5904\u7406\u4efb\u52a1\u7684\u9700\u6c42\u548c\u541e\u5410\u7387\u4e00\u6837\u5927\uff0c\u7cfb\u7edf\u53ef\u80fd\u5f3a\u5236\u540e\u7eed\u8bf7\u6c42\u8fdb\u884c\u6392\u961f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6539\u5584\u541e\u5410\u7387\u53ef\u540c\u65f6\u6539\u8fdb\u54cd\u5e94\u65f6\u95f4\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u51cf\u5c11\u961f\u5217\u4e2d\u7684\u7b49\u5f85\u65f6\u95f4\u3002\u6240\u4ee5\uff0c\u5728\u5b9e\u9645\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\uff0c\u54cd\u5e94\u65f6\u95f4\u548c\u541e\u5410\u7387\u5f80\u5f80\u76f8\u4e92\u5f71\u54cd\u3002</p>"},{"location":"Computer_Science/CO/Chapter%201/#cpi-and-cycle-times","title":"CPI and cycle times","text":"\\[1 G = 10^{9}\\] \\[CPU \\ Time = CPU \\ Clock \\ Cycles \\times Clock \\ Cycle \\ Time = \\frac{CPU \\ Clock \\ Cycles}{Clock \\ Rate}\\] \\[Clock \\ Cycles = Instuction \\ Count \\times Cycles \\ per \\ Instruction(CPI)\\] \\[CPU \\ Time = Instruction \\ Count \\times CPI \\times Clock \\ Cycle \\ Time = \\frac{Instruction \\ Count \\times CPI}{Clock \\ Rate}\\] \\[CPI = \\frac{Clock \\ Cycles}{Instruction \\ Count} = \\sum\\limits_{i=1}^{n} (CPI_i \\times \\frac{Instruction \\ Count_i}{Instruction \\ Count})\\] \\[CPU \\ Time = \\frac{Instructions}{Program} \\times \\frac{Clock \\ Cycles}{Instruction} \\times \\frac{Seconds}{Clock \\ cycle}\\]"},{"location":"Computer_Science/CO/Chapter%201/#relative-performance","title":"relative performance","text":"<ul> <li> <p>Define Performance = \\(\\frac{1}{Execution \\ Time}\\)</p> </li> <li> <p>X is n time faster than Y: </p> </li> </ul> \\[\\frac{Performance_X}{Performance_Y} = \\frac{Execution \\ Time_Y}{Execution \\ Time_X} = n\\] <p>Example</p> <p>10s on A, 15s on B</p> \\[\\frac{Execution \\ Time_B}{Execution \\ Time_A} = \\frac{15}{10} = 1.5\\] <p>So A is 1.5 times faster than B</p>"},{"location":"Computer_Science/CO/Chapter%201/#the-power","title":"the power","text":"<p>The dominant technologyfor integrated circuits is called CMOS (complementarymetal oxide semiconductor). For CMOS, the primary source ofenergy consumptionis so-called dynamic energy-that is, energy that is consumed when transistorsswitch states from 0 to l and vice versa. The dynamic energy depends on thecapacitive loading of each transistor and the voltage applied:</p> \\[Energy \\propto Capacitive \\ load \\times Voltage^2\\] <p>This equation is the energy of a pulse during the logic transition of \\(0 \\rightarrow 1 \\rightarrow 0\\) or \\(1 \\rightarrow 0 \\rightarrow 1\\) . The energy of a single transition is then</p> \\[Energy \\propto \\frac{1}{2} Capacitive \\ load \\times Voltage^2\\] <p>The power required per transistor is just the product of energy of a transition and the frequency of transitions:</p> \\[Power \\propto \\frac{1}{2} Capacitive \\ load \\times Voltage^2 \\times Frequency \\ switched\\] Question <p>Suppose we developed a new, simpler processor that has 85% ofthe capacitiveload of the more complex older processor, Further, assume that it can adjustvoltage so that it can reduce voltage 15% compared to processor B, whichresults in a 15% shrink in frequency. What is the impact on dynamic power?</p> Answer \\[\\frac{Power_{new}}{Power_{old}} = \\frac{(Capacitive \\ load \\times 0.85) \\times (Voltage \\times 0.85)^2 \\times (Frequency \\times 0.85)}{(Capacitive \\ load \\times Voltage^2 \\times Frequency \\ switched)}\\] <p>Thus the power ratio is \\(0.85^4 = 0.52\\)</p> <p>Hence, the new processor uses about half the power of the old processor.</p>"},{"location":"Computer_Science/CO/Chapter%201/#amdahls-law","title":"Amdahl\u2019s Law","text":"\\[T_{improved} = \\frac{T_{affected}}{improvement \\ factor} + T_{unaffected}\\] <p>\u9488\u5bf9\u7279\u5b9a\u60c5\u51b5\u7684\u6027\u80fd\u63d0\u5347\uff0c\u53d7\u5230\u88ab\u6539\u8fdb\u7684\u7279\u5f81\u6240\u5360\u6bd4\u4f8b\u7684\u9650\u5236\u3002\u8fd9\u4e2a\u6982\u5ff5\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u88ab\u79f0\u4e3a\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u5b9a\u5f8b\u3002</p>"},{"location":"Computer_Science/CO/Chapter%201/#eight-great-ideas","title":"Eight Great Ideas","text":"<ol> <li>Design for Moore\u2019s Law \uff08\u8bbe\u8ba1\u7d27\u8ddf\u6469\u5c14\u5b9a\u5f8b\uff09</li> </ol> <ul> <li> <p>Moore's Law: Integrated circuit resources double every 18-24 months.</p> </li> <li> <p>Design for where it will be when finishes rather than design for where it starts.</p> </li> </ul> <ol> <li> <p>Use Abstraction to Simplify Design (\u91c7\u7528\u62bd\u8c61\u7b80\u5316\u8bbe\u8ba1)    - \u5c42\u6b21\u5316\u3001\u6a21\u5757\u5316\u7684\u8bbe\u8ba1</p> </li> <li> <p>Make the Common Case Fast (\u52a0\u901f\u5927\u6982\u7387\u4e8b\u4ef6)</p> </li> <li> <p>Performance via Parallelism (\u901a\u8fc7\u5e76\u884c\u63d0\u9ad8\u6027\u80fd)</p> </li> <li> <p>Performance via Pipelining (\u901a\u8fc7\u6d41\u6c34\u7ebf\u63d0\u9ad8\u6027\u80fd)</p> </li> </ol> <ul> <li> <p>\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\uff0c\u6bcf\u4e2a\u6d41\u7a0b\u540c\u65f6\u8fdb\u884c\uff0c\u53ea\u4e0d\u8fc7\u6bcf\u4e00\u4e2a\u6d41\u7a0b\u5de5\u4f5c\u7684\u5bf9\u8c61\u662f\u65f6\u95f4\u4e0a\u76f8\u90bb\u7684\u82e5\u5e72\u4ea7\u54c1\uff1b</p> </li> <li> <p>\u76f8\u6bd4\u4e8e\u7b49\u4e00\u4e2a\u4ea7\u54c1\u5b8c\u5168\u751f\u4ea7\u5b8c\u518d\u5f00\u59cb\u4e0b\u4e00\u4e2a\u4ea7\u54c1\u7684\u751f\u4ea7\uff0c\u4f1a\u5feb\u5f88\u591a\uff1b</p> </li> <li> <p>\u5e0c\u671b\u6bcf\u4e00\u4e2a\u6d41\u7a0b\u7684\u65f6\u95f4\u662f\u76f8\u5bf9\u5747\u5300\u7684\uff1b</p> </li> </ul> <ol> <li>Performance via Prediction (\u901a\u8fc7\u9884\u6d4b\u63d0\u9ad8\u6027\u80fd)</li> </ol> <ul> <li> <p>\u4f8b\u5982\u5148\u5f53\u4f5c <code>if()</code> \u6761\u4ef6\u6210\u7acb\uff0c\u6267\u884c\u5b8c\u5185\u90e8\u5185\u5bb9\uff0c\u5982\u679c\u540e\u6765\u53d1\u73b0\u786e\u5b9e\u6210\u7acb\uff0c\u90a3\u4e48\u76f4\u63a5 apply\uff0c\u5426\u5219\u5c31\u518d\u91cd\u65b0\u6b63\u5e38\u505a\uff1b</p> </li> <li> <p>\u8fd9\u4e48\u505a\u5c31\u597d\u5728\uff08\u53c8\u6216\u8005\u8bf4\u53ea\u6709\u8fd9\u79cd\u60c5\u51b5\u9002\u5408\u9884\u6d4b\uff09\uff0c\u9884\u6d4b\u6210\u529f\u4e86\u5c31\u52a0\u901f\u4e86\uff0c\u9884\u6d4b\u5931\u8d25\u4e86\u7ea0\u6b63\u7684\u6210\u672c\u4e5f\u4e0d\u9ad8\uff1b</p> </li> </ul> <ol> <li> <p>Hierarchy of Memories (\u5b58\u50a8\u5668\u5c42\u6b21)</p> <ul> <li>Disk / Tape -&gt; Main Memory(DRAM) -&gt; L2-Cache(SRAM) -&gt; L1-Cache(On-Chip) -&gt; Registers</li> </ul> </li> <li> <p>Dependability via Redundancy (\u901a\u8fc7\u5197\u4f59\u63d0\u9ad8\u53ef\u9760\u6027)    - \u7c7b\u4f3c\u4e8e\u5361\u8f66\u7684\u591a\u4e2a\u8f6e\u80ce\uff0c\u4e00\u4e2a\u6a21\u5757 down \u4e86\u4ee5\u540e\u4e0d\u4f1a\u5267\u70c8\u5f71\u54cd\u6574\u4e2a\u7cfb\u7edf\uff1b</p> </li> </ol>"},{"location":"Computer_Science/CO/Chapter%201/#_2","title":"\u51af\u00b7\u504c\u4f0a\u66fc\u67b6\u6784","text":"<ul> <li>\u8ba1\u7b97\u4e0e\u5b58\u50a8\u5206\u79bb</li> <li>\u6570\u636e\u548c\u6307\u4ee4\u653e\u5728\u540c\u4e00\u4e2a\u5b58\u50a8\u5668</li> </ul>"},{"location":"Computer_Science/CO/Chapter%202/","title":"Chapter 2","text":"<p> \u7ea6 3134 \u4e2a\u5b57  170 \u884c\u4ee3\u7801  15 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 18 \u5206\u949f</p>"},{"location":"Computer_Science/CO/Chapter%202/#risc-v-operands","title":"RISC-V operands","text":"Name Example Comments 32 registers x0-x31 Fast locations for data. In RiSC-V, data must be in registers to perform arithmetic. Register xO always equals 0. \\(2^{61}\\)memory words Memory[0],Memory[8],...,Memory[18,446,744,073,709,511,608] Accessed only by data transfer instructions. RiSC-V uses byte addresses, sosequential doubleword accesses differ by 8. Memory holds data structures,arrays, and spilled registers."},{"location":"Computer_Science/CO/Chapter%202/#regs","title":"regs","text":"<p>32\u4e2a64\u4f4d\u5bc4\u5b58\u5668</p> <p>|x0(zero)|0|The constant value 0|</p> <p></p> <p>RISC-V \u7ea6\u5b9a\uff1a</p> <ul> <li><code>x5</code> - <code>x7</code> \u4ee5\u53ca <code>x28</code> - <code>x31</code> \u662f temp reg\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd caller \u4fdd\u5b58\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u4fdd\u8bc1\u5728\u7ecf\u8fc7\u8fc7\u7a0b\u8c03\u7528\u4e4b\u540e\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u4e0d\u53d8\u3002</li> <li><code>x8</code> - <code>x9</code> \u548c <code>x18</code> - <code>x27</code> \u662f saved reg\uff0ccallee \u9700\u8981\u4fdd\u8bc1\u8c03\u7528\u524d\u540e\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u4e0d\u53d8\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c callee \u8981\u7528\u5230\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u5fc5\u987b\u4fdd\u5b58\u4e00\u4efd\uff0c\u8fd4\u56de\u524d\u6062\u590d\u3002</li> <li><code>x10</code> - <code>x17</code> \u662f 8 \u4e2a\u53c2\u6570\u5bc4\u5b58\u5668\uff0c\u51fd\u6570\u8c03\u7528\u7684\u524d 8 \u4e2a\u53c2\u6570\u4f1a\u653e\u5728\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e2d\uff1b\u5982\u679c\u53c2\u6570\u8d85\u8fc7 8 \u4e2a\u7684\u8bdd\u5c31\u9700\u8981\u653e\u5230\u6808\u4e0a\uff08\u653e\u5728 <code>fp</code> \u4e0a\u65b9\uff0c <code>fp + 8</code> \u662f\u7b2c 9 \u4e2a\u53c2\u6570\uff0c <code>fp + 16</code> \u7684\u7b2c 10 \u4e2a\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff09\u3002\u540c\u65f6\uff0c\u8fc7\u7a0b\u7684\u7ed3\u679c\u4e5f\u4f1a\u653e\u5230\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e2d\uff08\u5f53\u7136\uff0c\u5bf9\u4e8e C \u8bed\u8a00\u8fd9\u79cd\u53ea\u80fd\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\u7684\u8bed\u8a00\uff0c\u53ef\u80fd\u53ea\u4f1a\u7528\u5230 <code>x10</code> \uff09\u3002</li> <li><code>x1</code> \u7528\u6765\u4fdd\u5b58\u8fd4\u56de\u5730\u5740\uff0c\u6240\u4ee5\u4e5f\u53eb <code>ra</code> \u3002\u56e0\u6b64\uff0c\u4f2a\u6307\u4ee4 <code>ret</code> \u5176\u5b9e\u5c31\u662f <code>jalr x0, 0(x1)</code> \u3002</li> <li>\u6808\u6307\u9488\u662f <code>x2</code>\uff0c\u4e5f\u53eb<code>sp</code>\uff1b\u59cb\u7ec8\u6307\u5411\u6808\u9876\u5143\u7d20\u3002\u6808\u4ece\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\u3002</li> <li><code>addi sp, sp, -24</code> , <code>sd x5, 16(sp)</code> , <code>sd x6, 8(sp)</code> , <code>sd x20, 0(sp)</code> \u53ef\u4ee5\u5b9e\u73b0\u5c06 x5, x6, x20 \u538b\u6808\u3002</li> <li>\u4e00\u4e9b RISC-V \u7f16\u8bd1\u5668\u4fdd\u7559\u5bc4\u5b58\u5668 <code>x3</code> \u7528\u6765\u6307\u5411\u9759\u6001\u53d8\u91cf\u533a\uff0c\u79f0\u4e3a global pointer <code>gp</code> \u3002</li> <li>\u4e00\u4e9b RISC-V \u7f16\u8bd1\u5668\u4f7f\u7528 <code>x8</code> \u6307\u5411 activation record \u7684\u7b2c\u4e00\u4e2a dword\uff0c\u65b9\u4fbf\u8bbf\u95ee\u5c40\u90e8\u53d8\u91cf\uff1b\u56e0\u6b64 <code>x8</code> \u4e5f\u79f0\u4e3a <code>frame pointer(fp)</code>\u3002\u5728\u8fdb\u5165\u51fd\u6570\u65f6\uff0c\u7528 <code>sp</code> \u5c06 <code>fp</code>\u521d\u59cb\u5316\u3002</li> <li><code>fp</code> \u7684\u65b9\u4fbf\u6027\u5728\u4e8e\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u6240\u6709\u5f15\u7528\u76f8\u5bf9\u4e8e <code>fp</code> \u7684\u504f\u79fb\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u662f\u5bf9 <code>sp</code> \u4e0d\u4e00\u5b9a\u3002\u5f53\u7136\uff0c\u5982\u679c\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u4ec0\u4e48\u6808\u7684\u53d8\u5316\u6216\u8005\u6839\u672c\u6ca1\u6709\u5c40\u90e8\u53d8\u91cf\uff0c\u90a3\u5c31\u6ca1\u6709\u5fc5\u8981\u7528 <code>fp</code> \u4e86\u3002</li> </ul>"},{"location":"Computer_Science/CO/Chapter%202/#_1","title":"\u5bfb\u5740","text":"<p>RISC-V architecture \u7684\u5730\u5740\u662f 64 \u4f4d\u7684\uff0c\u5730\u5740\u4e3a\u5b57\u8282\u5730\u5740\uff0c\u56e0\u6b64\u603b\u5171\u53ef\u4ee5\u5bfb\u5740 \\(2^{64}\\) \u4e2a\u5b57\u8282\uff0c\u5373 \\(2^{61}\\) \u4e2a dword (doubleword, \u4e0b\u540c)\uff0c\u56e0\u4e3a\u4e00\u4e2a dword \u5360 \\(log_2\\frac{\u206164}{8}=3\\) \u4f4d\u3002</p> <p>\u5728\u4e00\u4e9b architecture \u4e2d\uff0cword \u7684\u8d77\u59cb\u5730\u5740\u5fc5\u987b\u662f word \u5927\u5c0f\u7684\u6574\u500d\u6570\uff0cdword \u4e5f\u4e00\u6837\uff0c\u8fd9\u79cd\u8981\u6c42\u79f0\u4e3a alignment restriction\u3002RISC-V \u5141\u8bb8\u4e0d\u5bf9\u9f50\u7684\u5bfb\u5740\uff0c\u4f46\u662f\u6548\u7387\u4f1a\u4f4e\u3002</p> <p>RISC-V \u4f7f\u7528 little endian \u5c0f\u7aef\u7f16\u5740\u3002</p> <p>\u4ee5 int \u7c7b\u578b\u7684 0x12345678 \u4e3a\u4f8b\uff0c\u5728\u5185\u5b58\u4e2d\u7684\u5206\u5e03\u60c5\u51b5\u4e3a\uff08\u5047\u8bbe\u4ece\u5730\u5740 0x 4000 \u5f00\u59cb\u5b58\u653e\uff09</p> <ul> <li>Little-endian</li> </ul> <pre><code>\u5185\u5b58\u5730\u5740 0x4000 0x4001 0x4002 0x4003\n\u5b58\u653e\u5185\u5bb9 0x78 0x56 0x34 0x12\n</code></pre> <ul> <li>Big-endian</li> </ul> <pre><code>\u5185\u5b58\u5730\u5740 0x4000 0x4001 0x4002 0x4003\n\u5b58\u653e\u5185\u5bb9 0x12 0x34 0x56 0x78\n</code></pre> <p>\u5982\u679c\u4f60\u5c06\u5730\u5740\u6a2a\u7740\u5199\uff0c\u5373\u4ece\u5de6\u5230\u53f3\u9012\u589e\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5927\u7aef\u6765\u8bf4\u662f\u6bd4\u8f83\u81ea\u7136\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u5c0f\u7aef\u6765\u8bf4\u4f1a\u6bd4\u8f83\u4e0d\u81ea\u7136\u3002</p>"},{"location":"Computer_Science/CO/Chapter%202/#risc-v-assembly-language","title":"RISC-V assembly language","text":"<ul> <li>\u903b\u8f91\u79fb\u4e0d\u8003\u8651\u7b26\u53f7\u4f4d\uff0c\u5de6\u79fb\u65f6\u9ad8\u4f4d\u88650\uff0c\u53f3\u79fb\u65f6\u4f4e\u4f4d\u88650</li> <li>\u7b97\u6570\u79fb\u8003\u8651\u7b26\u53f7\u4f4d</li> </ul>"},{"location":"Computer_Science/CO/Chapter%202/#c","title":"C\u8f6c\u6c47\u7f16\u4f8b\u9898","text":"f = (g + h) - (i + j); <p>\u53d8\u91cf <code>f\u3001g\u3001h\u3001i</code> \u548c <code>j</code> \u5206\u522b\u5206\u914d\u7ed9\u5bc4\u5b58\u5668 <code>x19\u3001x20\u3001x21\u3001x22</code> \u548c <code>x23</code> \u3002\u7f16\u8bd1\u540e\u7684 RISC-V \u4ee3\u7801\u662f\u4ec0\u4e48?</p> Answer <pre><code>add x5, x20, x21 // register x5 contains g + h\nadd x6, x22, x23 // register x6 contains i + j\nsub x19, x5, x6 // f gets x5 - x6, which is (g + h) - (i + j)\n</code></pre> A[12] = h + A[8]; <p>\u5047\u8bbe\u53d8\u91cf <code>h</code> \u5b58\u653e\u5728\u5bc4\u5b58\u5668 <code>x21</code> \u4e2d\uff0c\u6570\u7ec4 <code>A</code> \u7684\u57fa\u5740\u5b58\u653e\u5728\u5bc4\u5b58\u5668 <code>x22</code> \u4e2d\u3002C \u8d4b\u503c\u8bed\u53e5\u7684 RISC-V \u6c47\u7f16\u4ee3\u7801\u662f\u4ec0\u4e48?</p> Answer <pre><code>ld x9, 64(x22) // Temporary reg x9 gets A[8]\nadd x9, x9, x21 // Temporary reg x9 gets A[8] + h\n</code></pre> if (i == j) f = g + h; else f = g - h; <p>\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\u4e2d\uff0c <code>f\u3001g\u3001h\u3001i</code> \u548c <code>j</code> \u662f\u53d8\u91cf\u3002\u5982\u679c\u4e94\u4e2a\u53d8\u91cf <code>f</code> \u5230 <code>j</code> \u5bf9\u5e94\u4e8e <code>x19</code> \u5230 <code>x23</code> \u8fd95\u4e2a\u5bc4\u5b58\u5668\uff0c\u8fd9\u4e2aC\u8bed\u8a00\u7684 <code>if</code> \u8bed\u53e5\u7f16\u8bd1\u540e\u7684 RISC-V \u4ee3\u7801\u662f\u4ec0\u4e48?</p> Answer <pre><code>bne x22, x23, Else // go to Else if i != j\nadd x19, x20, x21 // f = g + h (skipped if i != j)\nbeq x0, x0, Exit // if 0 == 0, go to Exit\nElse: sub x19, x20, x21 // f = g - h (skipped if i == j)\n</code></pre> while ( save[i] == k) i += 1; <p>\u5047\u8bbe <code>i</code> \u548c <code>k</code> \u5bf9\u5e94\u4e8e\u5bc4\u5b58\u5668 <code>x22</code> \u548c <code>x24</code> \uff0c\u6570\u7ec4\u7684\u57fa\u5740\u4fdd\u5b58\u5728 <code>x25</code> \u4e2d\u3002\u4e0e\u6b64C\u8bed\u8a00\u4ee3\u7801\u76f8\u5bf9\u5e94\u7684 RISC-V \u6c47\u7f16\u4ee3\u7801\u662f\u4ec0\u4e48?</p> Answer <pre><code>Loop: slli x10, x22, 3 // Temp reg x10 = i * 8\nadd x10, x10, x25 // x10 = address of save[i]\nld x9, 0(x10) // Temp reg x9 = save[i]\nbne x9, x24, Exit // go to Exit if save[i] != k\naddi x22, x22, 1 // i += 1\nbeq x0, x0, Loop // go to Loop\n</code></pre> \u6ca1\u6709\u8c03\u7528\u5176\u4ed6\u8fc7\u7a0b\u7684C <pre><code>long long int leaf_example(long long int g, long long int h, long long int i, long long int j) {\n    long long int f;\n\n    f = (g + h) - (i + j);\n    return f;\n}\n</code></pre> <p>\u7f16\u8bd1\u6210 RISC-V \u4ee3\u7801\u662f\u4ec0\u4e48?\u53c2\u6570\u53d8\u91cf <code>g\u3001h\u3001i</code> \u548c <code>j</code> \u5bf9\u5e94\u4e8e\u53c2\u6570\u5bc4\u5b58\u5668 <code>x10\u3001x11\u3001x12</code> \u548c <code>x13</code> \uff0c <code>f</code> \u5bf9\u5e94\u4e8e <code>x20</code> \u3002</p> Answer <pre><code>addi sp, sp, -24 // adjust stack to make room for 3 items\nsd x5, 16(sp) // save register x5 for use afterwards\nsd x6, 8(sp) // save register x6 for use afterwards\nsd x20, 0(sp) // save register x20 for use afterwards\nadd x5, x10, x11 // x5 = g + h\nadd x6, x12, x13 // x6 = i + j\nsub x20, x5, x6 // x20 = f = g + h - i - j\naddi x10, x20, 0 // return f (x10 = x20 + 0)\nld x20, 0(sp) // restore register x20 for caller\nld x6, 8(sp) // restore register x6 for caller\nld x5, 16(sp) // restore register x5 for caller\naddi sp, sp, 24 // adjust stack to delete 3 items\njalr x0, 0(x1) // branch back to calling routine\n</code></pre> \u7f16\u8bd1\u4e00\u4e2a\u9012\u5f52\uff08\u5d4c\u5957\uff09C\u8fc7\u7a0b <pre><code>long long int fact (long long int n) {\n    if (n &lt; 1) return 1;\n    else return n * fact (n - 1);\n}\n</code></pre> <p>\u7f16\u8bd1\u6210 RISC-V \u4ee3\u7801\u662f\u4ec0\u4e48?\u53c2\u6570\u53d8\u91cf <code>n</code> \u5bf9\u5e94\u4e8e\u53c2\u6570\u5bc4\u5b58\u5668 <code>x10</code> \u3002</p> Answer <pre><code>addi sp, sp, -16 // adjust stack for 2 items\nsd x1, 8(sp) // save the return address\nsd x10, 0(sp) // save the argument n\naddi x5, x10, -1 // x5 = n - 1\nbge x5, x0, L1 // if n &gt;= 1, go to L1\naddi x10, x0, 1 // return 1\naddi sp, sp, 16 // pop 2 items off stack\njalr x0, 0(x1) // return to caller\nL1: addi x10, x10, -1 // n &gt;= 1: argument gets (n - 1)\njal x1, fact // call fact with (n - 1)\naddi x6, x10, 0 // return from jal: move result of fact(n - 1) to x6\nld x10, 0(sp) // restore argument n\nld x1, 8(sp) // restore return address\naddi sp, sp, 16 // adjust stack pointer to pop 2 items\nmul x10, x6, x10 // return n * fact(n - 1)\njalr x0, 0(x1) // return to caller\n</code></pre> \u4e00\u4e9b\u9012\u5f52\uff08\u5c3e\u8c03\u7528\uff09\u53ef\u4ee5\u4e0d\u7528\u9012\u5f52\u800c\u901a\u8fc7\u8fed\u4ee3\u5b9e\u73b0 <pre><code>long long int sum (long long int n, long long int acc){\n    if (n &gt; 0)\n        return sum (n - 1, n + acc);\n    else return acc;\n}\n</code></pre> Answer <pre><code>sum: ble x10, x0, sum_exit // go to sum_exit if n &lt;= 0\nadd x11, x11, x10 // add n to acc\naddi x10, x10, -1 // n = n - 1\njal x0, sum // jump to sum\nsum_exit: addi x12, x11, 0 // return acc\njalr x0, 0(x1) // return to caller\n</code></pre> \u590d\u5236\u5b57\u7b26\u4e32 <pre><code>void strcpy (char x[], char y[]){\n    size_t i;\n    i = 0;\n    while ((x[i] = y[i]) != '\\0') /* copy &amp; test byte */\n        i++;\n}\n</code></pre> <p>\u7f16\u8bd1\u6210 RISC-V \u4ee3\u7801\u662f\u4ec0\u4e48?\u5047\u8bbe\u6570\u7ec4 <code>x</code> \u548c <code>y</code> \u7684\u57fa\u5740\u5b58\u653e\u5728 <code>x10</code> \u548c <code>x11</code> \u4e2d\uff0c\u800c <code>i</code> \u5728 <code>x19</code> \u4e2d\u3002</p> Answer <pre><code>strcpy: addi sp, sp, -8 // adjust stack for 1 more item\nsd x19, 0(sp) // save x19\nadd x19, x0, x0 // i = 0\nL1: add x5, x19, x11 // address of y[i] in x5\nlbu x6, 0(x5) // x6 = y[i]\nadd x7, x19, x10 // address of x[i] in x7\nsb x6, 0(x7) // x[i] = y[i]\nbeq x6, x0, L2\naddi x19, x19, 1 // i++\njal x0, L1 // go to L1\nL2: ld x19, 0(sp) // restore old x19\naddi sp, sp, 8 // pop 1 doubleword off stack\njalr x0, 0(x1) // return\n</code></pre> Swap <pre><code>void swap (long long int v[], size_t k){\n    long long int temp;\n    temp = v[k];\n    v[k] = v[k+1];\n    v[k+1] = temp;\n}\n</code></pre> <p>\u7f16\u8bd1\u6210 RISC-V \u4ee3\u7801\u662f\u4ec0\u4e48?</p> Answer <pre><code>swap: slli x6, x11, 3 // reg x6 = k * 8\nadd x6, x10, x6 // reg x6 = v + (k * 8)\nld x5, 0(x6) // reg x5 (temp) = v[k]\nld x7, 8(x6) // reg x7 = v[k+1]\nsd x7, 0(x6) // v[k] = reg x7\nsd x5, 8(x6) // v[k+1] = reg x5 (temp)\njalr x0, 0(x1) // return to calling routine\n</code></pre> Sort <pre><code>void sort (long long int v[], size_t n){\n    size_t i, j;\n    for (i = 0; i &lt; n; i += 1){\n        for (j = i - 1; j &gt;= 0 &amp;&amp; v[j] &gt; v[j+1]; j -= 1){\n            swap(v, j);\n        }\n    }\n}\n</code></pre> <p>\u7f16\u8bd1\u6210 RISC-V \u4ee3\u7801\u662f\u4ec0\u4e48?</p> Answer <pre><code>sort: addi sp, sp, -40\nsd x1, 32(sp)\nsd x22, 24(sp)\nsd x21, 16(sp)\nsd x20, 8(sp)\nsd x19, 0(sp)\nmv x21, x10\nmv x22, x11\nli x19, 0\nfor1tst: bge x19, x22, exit1\naddi x20, x19, -1\nfor2tst: blt x20, 0, exit2\nslli x5, x20, 3\nadd x5, x21, x5\nld x6, 0(x5)\nld x7, 8(x5)\nble x6, x7, exit2\nmv x10, x21\nmv x11, x20\njal x1, swap\naddi x20, x20, -1\nj for2tst\nexit2: addi x19, x19, 1\nj for1tst\nexit1: ld x19, 0(sp)\nld x20, 8(sp)\nld x21, 16(sp)\nld x22, 24(sp)\nld x1, 32(sp)\naddi sp, sp, 40\njalr x0, 0(x1)\n</code></pre> \u6570\u7ec4\u548c\u6307\u9488 <pre><code>clear1(long long int array[], size_t int size){\n    size_t i;\n    for (i = 0; i &lt; size; i += 1){\n        array[i] = 0;\n    }\n}\nclear2(long long int *array, size_t int size){\n    long long int *p;\n    for (p = &amp;array[0]; p &lt; &amp;array[size]; p += 1){\n        *p = 0;\n    }\n}\n</code></pre> <p>\u7f16\u8bd1\u6210 RISC-V \u4ee3\u7801\u662f\u4ec0\u4e48?</p> Answer <pre><code>li x5, 0\nloop1: slli x6, x5, 3\nadd x7, x10, x6\nsd x0, 0(x7)\naddi x5, x5, 1\nblt x5, x11, loop1\nmv x5, x10\nslli x6, x11, 3\nadd x7, x10, x6\nloop2: sd x0, 0(x5)\naddi x5, x5, 8\nbltu x5, x7, loop2\n</code></pre>"},{"location":"Computer_Science/CO/Chapter%202/#_2","title":"\u5927\u7acb\u5373\u6570","text":"<p>RISC-V\u6307\u4ee4\u4e2d\u5b58\u5728<code>load upper immediate</code>(\u53d6\u7acb\u5373\u6570\u9ad8\u4f4d\uff0c<code>lui</code>)\uff0c\u7528\u4e8e\u5c0620 \u4f4d\u5e38\u6570\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u7684\u7b2c31\u4f4d\u5230\u7b2c12\u4f4d\u3002\u5c06\u7b2c31\u4f4d\u7684\u503c\u590d\u5236\u586b\u5145\u5230\u6700\u5de6\u8fb932\u4f4d\uff0c\u6700\u53f3\u8fb9\u768412\u4f4d\u75280\u586b\u5145\u3002\uff08\u4e5f\u5373\u6709\u7b26\u53f7\uff09\u3002</p> \u5927\u7acb\u5373\u6570 <p></p> Answer <p></p> <p></p> Further <p>\u56e0\u4e3a <code>addi</code> \u662f\u6709\u7b26\u53f7\u7684\u3002</p> <p></p> <p></p> <p>\u56e0\u6b64\u6211\u4eec\u5728\u8fdb\u884c\u5927\u7acb\u5373\u6570\u8fd0\u7b97\u65f6\uff0c\u53ef\u4ee5\u5148\u4f7f\u7528 <code>lui</code> \u5c06\u9ad820\u4f4d\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\uff0c\u518d\u4f7f\u7528 <code>slli</code> \u79fb\u4f4d\u540e\u518d\u52a0\u4e0a\u4f4e12\u4f4d\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f <code>addi</code> \u662f\u6709\u7b26\u53f7\u7684\u3002</p>"},{"location":"Computer_Science/CO/Chapter%202/#risc-v","title":"RISC-V\u5bfb\u5740\u6a21\u5f0f","text":""},{"location":"Computer_Science/CO/Chapter%202/#decoding-machine-language","title":"Decoding Machine Language","text":""},{"location":"Computer_Science/CO/Chapter%202/#instruction-formats-of-risc-v","title":"Instruction formats of RISC-V","text":""},{"location":"Computer_Science/CO/Chapter%202/#_3","title":"\u539f\u5b50\u4ea4\u6362","text":"<p>\u5728\u8ba1\u7b97\u4e2d\uff0c\u540c\u6b65\u673a\u5236\u901a\u5e38\u7531\u7528\u6237\u7ea7\u7684\u8f6f\u4ef6\u4f8b\u7a0b\u6240\u6784\u5efa\uff0c\u800c\u8fd9\u4f9d\u8d56\u4e8e\u786c\u4ef6\u63d0\u4f9b\u7684\u540c\u6b65\u6307\u4ee4\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecd\u52a0\u9501(lock)\u548c\u89e3\u9501(unlock)\u540c\u6b65\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002\u52a0\u9501\u548c\u89e3\u9501\u53ef\u76f4\u63a5\u7528\u4e8e\u521b\u5efa\u53ea\u6709\u5355\u4e2a\u5904\u7406\u5668\u53ef\u4ee5\u64cd\u4f5c\u7684\u533a\u57df\uff0c\u79f0\u4e3a\u4e92\u65a5(mutual exclusion)\u533a\uff0c\u4ee5\u53ca\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u540c\u6b65\u673a\u5236\u3002</p> <p>\u5728\u591a\u5904\u7406\u5668\u4e2d\u5b9e\u73b0\u540c\u6b65\u6240\u9700\u7684\u5173\u952e\u662f\u4e00\u7ec4\u786c\u4ef6\u539f\u8bed\uff0c\u80fd\u591f\u63d0\u4f9b\u4ee5\u539f\u5b50\u65b9\u5f0f\u8bfb\u53d6\u548c\u4fee\u6539\u5185\u5b58\u5355\u5143\u7684\u80fd\u529b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u5185\u5b58\u5355\u5143\u7684\u8bfb\u53d6\u548c\u5199\u5165\u4e4b\u95f4\u4e0d\u80fd\u63d2\u5165\u5176\u4ed6\u4efb\u4f55\u64cd\u4f5c\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u80fd\u529b\uff0c\u6784\u5efa\u57fa\u672c\u540c\u6b65\u539f\u8bed\u7684\u6210\u672c\u5c06\u4f1a\u5f88\u9ad8\uff0c\u5e76\u4f1a\u968f\u7740\u5904\u7406\u5668\u6570\u91cf\u7684\u589e\u52a0\u800c\u6025\u5267\u589e\u52a0\u3002\u6709\u8bb8\u591a\u57fa\u672c\u786c\u4ef6\u539f\u8bed\u7684\u5b9e\u73b0\u65b9\u6848\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u63d0\u4f9b\u4e86\u539f\u5b50\u8bfb\u548c\u539f\u5b50\u5199\u7684\u80fd\u529b\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5224\u65ad\u8bfb\u5199\u662f\u5426\u662f\u539f\u5b50\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002</p> <p>\u6211\u4eec\u4ece\u539f\u5b50\u4ea4\u6362(atomic exchange\u6216atomic swap)\u539f\u8bed\u5f00\u59cb\uff0c\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u5b83\u6765\u6784\u5efa\u57fa\u672c\u540c\u6b65\u539f\u8bed\u3002\u5b83\u662f\u6784\u5efa\u540c\u6b65\u673a\u5236\u7684\u4e00\u79cd\u5178\u578b\u64cd\u4f5c\uff0c\u5b83\u5c06\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u4e0e\u5b58\u50a8\u5668\u4e2d\u7684\u503c\u8fdb\u884c\u4ea4\u6362\u3002</p> <p>\u4e3a\u4e86\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u5b83\u6765\u6784\u5efa\u57fa\u672c\u540c\u6b65\u539f\u8bed\uff0c\u5047\u8bbe\u8981\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u9501\u53d8\u91cf\uff0c\u5176\u4e2d\u503c0\u7528\u4e8e\u8868\u793a\u9501\u53d8\u91cf\u53ef\u7528\uff0c\u503c1\u7528\u4e8e\u8868\u793a\u9501\u53d8\u91cf\u5df2\u88ab\u5360\u7528\u3002\u5904\u7406\u5668\u5c1d\u8bd5\u901a\u8fc7\u5c06\u5bc4\u5b58\u5668\u4e2d\u76841\u4e0e\u8be5\u9501\u53d8\u91cf\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u7684\u503c\u8fdb\u884c\u4ea4\u6362\u6765\u8bbe\u7f6e\u52a0\u9501\u3002\u5982\u679c\u67d0\u4e2a\u5176\u4ed6\u5904\u7406\u5668\u5df2\u58f0\u660e\u8bbf\u95ee\u8be5\u9501\u53d8\u91cf\uff0c\u5219\u4ea4\u6362\u6307\u4ee4\u7684\u8fd4\u56de\u503c\u4e3a1,\u8868\u660e\u8be5\u9501\u5df2\u88ab\u5176\u4ed6\u5904\u7406\u5668\u5360\u7528\uff0c\u5426\u5219\u4e3a0,\u8868\u793a\u52a0\u9501\u6210\u529f\u3002\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u9501\u53d8\u91cf\u7684\u503c\u53d8\u4e3a1,\u4ee5\u9632\u6b62\u5176\u4ed6\u5904\u7406\u5668\u4e5f\u52a0\u9501\u6210\u529f\u3002</p> <p>\u4f8b\u5982\uff0c\u8003\u8651\u4e24\u4e2a\u5904\u7406\u5668\u5c1d\u8bd5\u540c\u65f6\u8fdb\u884c\u4ea4\u6362\u64cd\u4f5c\uff1a\u8fd9\u79cd\u7ade\u4e89\u4f1a\u88ab\u963b\u6b62\uff0c\u56e0\u4e3a\u5176\u4e2d\u4e00\u4e2a\u5904\u7406\u5668\u5c06\u9996\u5148\u6267\u884c\u4ea4\u6362\uff0c\u5e76\u8fd4\u56de0,\u800c\u7b2c\u4e8c\u4e2a\u5904\u7406\u5668\u5728\u8fdb\u884c\u4ea4\u6362\u65f6\u5c06\u8fd4\u56de1\u3002\u4f7f\u7528\u4ea4\u6362\u539f\u8bed\u5b9e\u73b0\u540c\u6b65\u7684\u5173\u952e\u662f\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff1a\u4ea4\u6362\u662f\u4e0d\u53ef\u5206\u5272\u7684\uff0c\u786c\u4ef6\u5c06\u5bf9\u4e24\u4e2a\u540c\u65f6\u53d1\u751f\u7684\u4ea4\u6362\u8fdb\u884c\u6392\u5e8f\u3002\u5c1d\u8bd5\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8bbe\u7f6e\u540c\u6b65\u53d8\u91cf\u7684\u4e24\u4e2a\u5904\u7406\u5668\u90fd\u4e0d\u53ef\u80fd\u8ba4\u4e3a\u5b83\u4eec\u540c\u65f6\u8bbe\u7f6e\u4e86\u53d8\u91cf\u3002</p> <p>\u5b9e\u73b0\u5355\u4e2a\u7684\u539f\u5b50\u5b58\u50a8\u64cd\u4f5c\u4e3a\u5904\u7406\u5668\u7684\u8bbe\u8ba1\u5e26\u6765\u4e86\u4e00\u4e9b\u6311\u6218\uff0c\u56e0\u4e3a\u5b83\u8981\u6c42\u5728\u5355\u6761\u4e0d\u53ef\u4e2d\u65ad\u7684\u6307\u4ee4\u4e2d\u5b8c\u6210\u5b58\u50a8\u5668\u7684\u8bfb\u548c\u5199\u64cd\u4f5c\u3002</p> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u6307\u4ee4\u5bf9\uff0c\u5176\u4e2d\u7b2c\u4e8c\u6761\u6307\u4ee4\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8be5\u503c\u8868\u793a\u8be5\u6307\u4ee4\u5bf9\u662f\u5426\u88ab\u539f\u5b50\u6267\u884c\u3002\u5982\u679c\u4efb\u4f55\u5904\u7406\u5668\u6267\u884c\u7684\u6240\u6709\u5176\u4ed6\u64cd\u4f5c\u90fd\u53d1\u751f\u5728\u8be5\u5bf9\u6307\u4ee4\u4e4b\u524d\u6216\u4e4b\u540e\uff0c\u5219\u8be5\u6307\u4ee4\u5bf9\u5b9e\u9645\u4e0a\u662f\u539f\u5b50\u7684\u3002\u56e0\u6b64\uff0c\u5f53\u6307\u4ee4\u5bf9\u5b9e\u9645\u4e0a\u662f\u539f\u5b50\u64cd\u4f5c\u65f6\uff0c\u6ca1\u6709\u5176\u4ed6\u5904\u7406\u5668\u53ef\u4ee5\u5728\u6307\u4ee4\u5bf9\u4e4b\u95f4\u6539\u53d8\u503c\u3002</p> <p>\u5728RISC-V\u4e2d\uff0c\u8fd9\u5bf9\u6307\u4ee4\u6307\u7684\u662f\u4e00\u4e2a\u79f0\u4e3a\u4fdd\u7559\u52a0\u8f7d(load-reserved)\u53cc\u5b57(1r.d)\u7684\u7279\u6b8a\u52a0\u8f7d\u6307\u4ee4\u548c\u4e00\u4e2a\u79f0\u4e3a\u6761\u4ef6\u5b58\u50a8(<code>store-conditional</code>)\u53cc\u5b57(<code>sc.d</code>)\u7684\u7279\u6b8a\u5b58\u50a8\u6307\u4ee4\u3002\u8fd9\u4e9b\u6307\u4ee4\u6309\u5e8f\u4f7f\u7528\uff1a\u5982\u679c\u4fdd\u7559\u52a0\u8f7d\u6307\u4ee4\u6307\u5b9a\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u5185\u5bb9\u5728\u6761\u4ef6\u5b58\u50a8\u6307\u4ee4\u6267\u884c\u5230\u540c\u4e00\u5730\u5740\u4e4b\u524d\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5219\u6761\u4ef6\u5b58\u50a8\u6307\u4ee4\u5931\u8d25\u4e14\u4e0d\u4f1a\u5c06\u503c\u5199\u5165\u5185\u5b58\u3002\u6761\u4ef6\u5b58\u50a8\u6307\u4ee4\u5b9a\u4e49\u4e3a\u5c06(\u53ef\u80fd\u662f\u4e0d\u540c\u7684)\u5bc4\u5b58\u5668\u7684\u503c\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u6210\u529f\u5219\u5c06\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u66f4\u6539\u4e3a0,\u5982\u679c\u5931\u8d25\u5219\u66f4\u6539\u4e3a\u975e\u96f6\u503c\u3002\u56e0\u6b64\uff0csc.d\u6307\u5b9a\u4e86\u4e09\u4e2a\u5bc4\u5b58\u5668\uff1a\u4e00\u4e2a\u7528\u4e8e\u4fdd\u5b58\u5730\u5740\uff0c\u4e00\u4e2a\u7528\u4e8e\u6307\u793a\u539f\u5b50\u64cd\u4f5c\u5931\u8d25\u6216\u6210\u529f\uff0c\u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e\u5982\u679c\u6210\u529f\u5219\u5c06\u503c\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002\u7531\u4e8e\u4fdd\u7559\u52a0\u8f7d\u6307\u4ee4\u8fd4\u56de\u521d\u59cb\u503c\uff0c\u5e76\u4e14\u6761\u4ef6\u5b58\u50a8\u6307\u4ee4\u4ec5\u5728\u6210\u529f\u65f6\u8fd4\u56de0\uff0c\u56e0\u6b64\u4ee5\u4e0b\u5e8f\u5217\u5728\u5bc4\u5b58\u5668<code>x20</code>\u4e2d\u6307\u5b9a\u7684\u5185\u5b58\u4f4d\u7f6e\u4e0a\u5b9e\u73b0\u539f\u5b50\u4ea4\u6362\uff1a</p> <p>\u539f\u5b50\u4ea4\u6362</p> <pre><code>again: 1r.d x10, (x20) // load-reserved\nsc.d x11, x23, (x20) // store-conditional\nbne x11, x0, again // branch if store fails\naddi x23, x20, 0 // put loaded value in x23\n</code></pre> <p>\u6bcf\u5f53\u5904\u7406\u5668\u5e72\u9884\u5e76\u4fee\u6539<code>lr.d</code>\u548c<code>sc.d</code>\u6307\u4ee4\u4e4b\u95f4\u7684\u5185\u5b58\u4e2d\u7684\u503c\u65f6\uff0c<code>sc.d</code>\u5c31\u4f1a\u5c06\u975e\u96f6\u503c\u5199\u5165<code>x11</code>,\u4ece\u800c\u5bfc\u81f4\u4ee3\u7801\u5e8f\u5217\u91cd\u65b0\u6267\u884c\u3002\u5728\u6b64\u5e8f\u5217\u7ed3\u675f\u65f6\uff0c<code>\u00d723</code>\u7684\u503c\u548c<code>\u00d720</code>\u6307\u5411\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\u53d1\u751f\u4e86\u539f\u5b50\u4ea4\u6362\u3002  </p> <p>Further</p> <p>\u867d\u7136\u4e0a\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u539f\u5b50\u4ea4\u6362\uff0c\u4f46\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u83b7\u53d6\u5bc4\u5b58\u5668 <code>x20</code> \u5bf9\u5e94\u5b58\u50a8\u4e2d\u7684\u9501\u53d8\u91cf\uff0c\u5176\u4e2d\u503c 0 \u8868\u793a\u9501\u53d8\u91cf\u662f\u7a7a\u95f2\u7684\uff0c\u503c 1 \u8868\u793a\u9501\u53d8\u91cf\u88ab\u5360\u7528\uff1a</p> <pre><code>addi x12, x0, 1 // copy locked value\nagain: 1r.d x10, (x20) // load-reserved to read lock\nbne x10, x0, again // check if it is 0 yet\nsc.d x11, x12, (x20) // attempt to store new value \nbne x11, x0, again // branch if store fails\nsd x0, 0(x20) // free lock by writing 0\n</code></pre>"},{"location":"Computer_Science/CO/Chapter%202/#_4","title":"\u8865\u5145","text":"<ul> <li>\u68c0\u67e5 index out of bounds\uff1a\u5982\u679c <code>x20 = i, x11 = size</code> \uff0c\u90a3\u4e48 <code>bgeu x20, x11, IndexOutOfBounds</code> \uff0c\u5373 <code>x20 &gt;= x11 || x20 &lt; 0</code></li> <li>ASCII\uff0c\u662f 8 \u4f4d\u7684\uff0c\u53ef\u4ee5\u7528 <code>lbu</code></li> <li>Unicode\uff0c\u662f 16 \u4f4d\u7684\uff0c\u53ef\u4ee5\u7528 <code>lhu</code></li> </ul>"},{"location":"Computer_Science/CO/Chapter%202/#translating-and-starting-a-program","title":"Translating and Starting a Program","text":""},{"location":"Computer_Science/CO/Chapter%202/#compiler","title":"Compiler","text":"<p>The assembler turns the assembly language program into an object file, which is a combination of machine language instructions, data, and information needed to place instructions properly in memory.</p>"},{"location":"Computer_Science/CO/Chapter%202/#linker","title":"Linker","text":"<p>What we have presented so far suggests that a single change to one line of one procedure requires compiling and assembling the whole program. Complete retranslation is a terrible waste of computing resources. This repetition is particularly wasteful for standard library routines, because programmers would be compiling and assembling routines that by definition almost never change. An alternative is to compile and assemble each procedure independently, so that a change to one line would require compiling and assembling only one procedure. This alternative requires a new systems program, called a link editor or linker, which takes all the independently assembled machine language programs and \u201cstitches\u201d them together. The reason a linker is useful is that it is much faster to patch code than it is to recompile and reassemble.</p> <p>\u94fe\u63a5\u5668\u7684\u5de5\u4f5c\u6709\u4e09\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>\u5c06\u4ee3\u7801\u548c\u6570\u636e\u6a21\u5757\u6309\u7b26\u53f7\u7279\u5f81\u653e\u5165\u5185\u5b58\u3002</li> <li>\u51b3\u5b9a\u6570\u636e\u548c\u6307\u4ee4\u6807\u7b7e\u7684\u5730\u5740\u3002</li> <li>\u4fee\u6b63\u5185\u90e8\u548c\u5916\u90e8\u5f15\u7528\u3002</li> </ol> <p>\u94fe\u63a5\u5668\u751f\u6210\u53ef\u5728\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u901a\u5e38\uff0c\u6b64\u6587\u4ef6\u5177\u6709\u4e0e\u76ee\u6807\u6587\u4ef6\u76f8\u540c\u7684\u683c\u5f0f\uff0c\u4f46\u5b83\u4e0d\u5305\u542b\u4efb\u4f55\u672a\u89e3\u6790\u7684\u5f15\u7528\u3002\u5177\u6709\u90e8\u5206\u94fe\u63a5\u7684\u6587\u4ef6\u662f\u53ef\u80fd\u7684\uff0c\u4f8b\u5982\u5e93\u7a0b\u5e8f\uff0c\u5728\u76ee\u6807\u6587\u4ef6\u4e2d\u4ecd\u7136\u6709\u672a\u89e3\u6790\u7684\u5730\u5740\u3002</p>"},{"location":"Computer_Science/CO/Chapter%202/#loader","title":"Loader","text":"<p>Now that the executable file is on disk, the operating system reads it to memory and starts it. </p> <p>\u52a0\u8f7d\u5668\u7684\u64cd\u4f5c\uff1a</p> <ol> <li>\u8bfb\u53d6\u53ef\u6267\u884c\u6587\u4ef6\u9996\u90e8\u4ee5\u786e\u5b9a\u6b63\u6587\u6bb5\u548c\u6570\u636e\u6bb5\u7684\u5927\u5c0f\u3002</li> <li>\u4e3a\u6b63\u6587\u548c\u6570\u636e\u521b\u5efa\u8db3\u591f\u5927\u7684\u5730\u5740\u7a7a\u95f4\u3002</li> <li>\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6307\u4ee4\u548c\u6570\u636e\u590d\u5236\u5230\u5185\u5b58\u4e2d\u3002</li> <li>\u5c06\u4e3b\u7a0b\u5e8f\u7684\u53c2\u6570(\u5982\u679c\u6709)\u590d\u5236\u5230\u6808\u9876\u3002</li> <li>\u521d\u59cb\u5316\u5904\u7406\u5668\u5bc4\u5b58\u5668\u5e76\u5c06\u6808\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u4f4d\u7f6e\u3002</li> <li>\u8df3\u8f6c\u5230\u542f\u52a8\u4f8b\u7a0b\uff0c\u5c06\u53c2\u6570\u590d\u5236\u5230\u53c2\u6570\u5bc4\u5b58\u5668\u4e2d\u5e76\u8c03\u7528\u7a0b\u5e8f\u7684\u4e3b\u4f8b\u7a0b\u3002\u5f53\u4e3b\u4f8b\u7a0b\u8fd4\u56de\u65f6\uff0c\u542f\u52a8\u4f8b\u7a0b\u901a\u8fc7exit\u7cfb\u7edf\u8c03\u7528\u7ec8\u6b62\u7a0b\u5e8f\u3002</li> </ol>"},{"location":"Computer_Science/CO/Chapter%202/#dynamically-linked-libraries","title":"Dynamically Linked Libraries","text":"<p>\u52a8\u6001\u94fe\u63a5\u5e93(<code>dynamically linked libraries</code>,<code>DLL</code>),\u5176\u5e93\u4f8b\u7a0b\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e4b\u524d\u4e0d\u4f1a\u88ab\u94fe\u63a5\u548c\u52a0\u8f7d\u3002\u7a0b\u5e8f\u548c\u5e93\u4f8b\u7a0b\u90fd\u4fdd\u5b58\u6709\u5173\u975e\u5c40\u90e8\u8fc7\u7a0b\u53ca\u5176\u540d\u5b57\u7684\u989d\u5916\u4fe1\u606f\u3002</p>"},{"location":"Computer_Science/CO/Chapter%203/","title":"Chapter 3","text":"<p> \u7ea6 1590 \u4e2a\u5b57  7 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f</p>"},{"location":"Computer_Science/CO/Chapter%203/#multiplication-v3","title":"Multiplication -- v3","text":"<p>\u5176\u6d41\u7a0b\u5927\u6982\u662f\uff0c\u4e00\u5171\u8fdb\u884c 64 \u6b21\uff1a</p> <ol> <li>\u5224\u65ad Product \u5bc4\u5b58\u5668\u7684\u6700\u4f4e\u4f4d\u662f\u5426\u662f 1\uff1a</li> <li>\u5982\u679c\u662f\uff0c\u5219\u5c06 Multiplicand \u5bc4\u5b58\u5668\u7684\u503c\u52a0\u5230 Product \u5bc4\u5b58\u5668\u7684\u5de6\u534a\u90e8\u5206\u91cc\uff1b</li> <li>\u5982\u679c\u5426\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b65\uff1b</li> <li>\u5c06 Product \u5bc4\u5b58\u5668\u7684\u503c\u53f3\u79fb\u4e00\u4f4d\uff1b</li> <li>\u5224\u65ad\u662f\u5426\u505a\u6ee1 64 \u6b21\uff0c\u51b3\u5b9a\u662f\u5426\u7ec8\u6b62\uff1b</li> </ol>"},{"location":"Computer_Science/CO/Chapter%203/#booths-algorithm","title":"Booth's Algorithm","text":"<ul> <li>Assumes: Z = \\(y \\times 10111100\\)</li> </ul> \\[Z = y(10000000 + 111100 + 100 - 100)\\] \\[ = y(1 \\times 2^7 + 1000000 - 100)\\] \\[ = y(1 \\times 2^7 + 1 \\times 2^6 - 2^2)\\] \\[ = y(1\\times 2^7 + 1 \\times 2^6 + 0 \\times 2^5 + 0 \\times 2^4 + 0 \\times 2^3 + 0 \\times 2^2 + 0 \\times 2^1 + 0 \\times 2^0 - 1 \\times 2^2)\\] \\[ = y(1 \\times 2^7 + 1 \\times 2^6 + 0 \\times 2^5 + 0 \\times 2^4 + 0 \\times 2^3 - 1 \\times 2^2 + 0 \\times 2^1 + 0 \\times 2^0)\\] \\[ = y \\times 2^7 + \\mathop{y \\times 1 \\times 2^6}\\limits_{add} + \\mathop{0 \\times 2^5 + 0\\times 2^4 + 0 \\times 2^3 + 0 \\times 2^2}\\limits_{Only shift} - \\mathop{y \\times 2^2}\\limits_{sub} + \\mathop{0 \\times 2^1 + 0 \\times 2^0}\\limits_{Only shift}\\] <ul> <li>Action</li> </ul> 1 0 subtract Multiplicand from left 1 1 no arithmetic operation-shift 0 1 add multiplicand to left half 0 0 no arithmetic operation-shift <ul> <li>\\(Bit_{-1} = '0'\\)</li> </ul>"},{"location":"Computer_Science/CO/Chapter%203/#division-v3","title":"Division -- v3","text":"<p>\u5176\u6d41\u7a0b\u5927\u6982\u662f\uff0c\u4e00\u5171\u8fdb\u884c64\u6b21\uff08v1\u7248\u672c\u8981\u8fdb\u884c65\u6b21\uff09\uff1a</p> <ol> <li>Remainder \u5bc4\u5b58\u5668\u5de6\u79fb\u4e00\u4f4d\uff0c\u79fb\u51fa\u6765\u7a7a\u4f4d\u7f6e\u7ed9\u5546\uff1b</li> <li>\u5c06 Divisor \u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u4ece Remainder \u5bc4\u5b58\u5668\u7684\u5de6\u8fb9\u51cf\u6389\uff0c\u5e76\u628a\u7ed3\u679c\u653e\u5728\u5de6\u534a\u8fb9\uff1b</li> <li>\u5224\u65ad Remainder \u5bc4\u5b58\u5668\u4e0e 0 \u7684\u5927\u5c0f\uff1b</li> <li>\u5982\u679c\u5927\u4e8e\u7b49\u4e8e 0 \u90a3\u4e48\u5c06 Remainder \u5bc4\u5b58\u5668\u5de6\u79fb\u4e00\u4f4d\u5e76\u628a\u6700\u53f3\u4e00\u4f4d\uff08\u4e5f\u5373\u521a\u79fb\u51fa\u6765\u76840\uff09\u6539\u4e3a1\uff0c\u8fdb\u5165\u7b2c6\u6b65\uff1b</li> <li>\u5982\u679c\u5c0f\u4e8e 0 \u90a3\u4e48\u5c06 Divisor \u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u518d\u52a0\u5230 Remainder \u5bc4\u5b58\u5668\u7684\u5de6\u8fb9\uff0c\u518d\u5c06 Remainder \u5bc4\u5b58\u5668\u5de6\u79fb\u4e00\u4f4d\uff0c\u8fdb\u5165\u7b2c6\u6b65\uff1b</li> <li>\u5224\u65ad\u662f\u5426\u505a\u6ee164\u6b21\uff0c\u51b3\u5b9a\u662f\u5426\u7ec8\u6b62\uff1b</li> </ol>"},{"location":"Computer_Science/CO/Chapter%203/#signed-division","title":"Signed Division","text":""},{"location":"Computer_Science/CO/Chapter%203/#ieee-754","title":"IEEE 754 \u6d6e\u70b9\u8868\u793a","text":"<p>\u6211\u4eec\u5c06\u5c0f\u6570\u70b9\u5de6\u8fb9\u53ea\u6709 1 \u4f4d\u6570\u5b57\u7684\u8868\u793a\u6570\u7684\u65b9\u6cd5\u79f0\u4e3a \u79d1\u5b66\u8bb0\u6570\u6cd5, scientific notation\uff0c\u800c\u5982\u679c\u5c0f\u6570\u70b9\u5de6\u8fb9\u7684\u6570\u5b57\u4e0d\u662f 0\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u6570\u7684\u8868\u793a\u662f\u4e00\u4e2a \u89c4\u683c\u5316\u6570, normalized number\u3002\u79d1\u5b66\u8bb0\u6570\u6cd5\u80fd\u7528\u6765\u8868\u793a\u5341\u8fdb\u5236\u6570\uff0c\u5f53\u7136\u4e5f\u80fd\u7528\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u3002</p> <p>IEEE 754 \u89c4\u5b9a\u4e86\u4e00\u79cd\u6d6e\u70b9\u6570\u6807\u51c6\uff1a\u6211\u4eec\u5c06\u6d6e\u70b9\u6570\u8868\u793a\u4e3a \\((\u22121)^S \\times F \\times 2^E\\) \u7684\u5f62\u5f0f\uff0c\u8fd9\u91cc\u7684 \\(F \\times 2^E\\) \u662f\u4e00\u4e2a\u89c4\u683c\u5316\u6570\uff0c\u800c \\((\u22121)^S\\) \u7528\u6765\u8868\u793a\u7b26\u53f7\u4f4d\uff1aS \u4e3a 0 \u8bf4\u660e\u8be5\u6d6e\u70b9\u6570\u4e3a\u6b63\u6570\uff0c\u4e3a 1 \u5219\u4e3a\u8d1f\u6570\uff1bF \u548c E \u4e5f\u7528\u82e5\u5e72 bits \u8868\u793a\uff0c\u5206\u522b\u8868\u793a\u5c3e\u6570\u548c\u6307\u6570\uff0c\u6211\u4eec\u7a0d\u540e\u8ba8\u8bba\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5c06\u5176\u8868\u793a\u4e3a \\(1.xxxxx_2 \\times 2^{yyyy}\\) \u7684\u5f62\u5f0f\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6ca1\u6cd5\u76f4\u63a5\u901a\u8fc7\u8fd9\u79cd\u8868\u8fbe\u5f62\u5f0f\u8868\u793a 0\uff08\u4e3a\u4ec0\u4e48\u5c0f\u6570\u70b9\u5de6\u8fb9\u662f 1 \u5462\uff1f\u56e0\u4e3a\u4e8c\u8fdb\u5236\u53ea\u6709 0 \u548c 1\uff0c\u800c\u89c4\u683c\u5316\u8981\u6c42\u5c0f\u6570\u70b9\u5de6\u8fb9\u4e0d\u80fd\u4e3a 0\uff09\u3002\u6211\u4eec\u901a\u8fc7\u79d1\u5b66\u8bb0\u6570\u6cd5\u8c03\u6574\u4e86\u5c0f\u6570\u70b9\u7684\u4f4d\u7f6e\u4f7f\u5176\u6ee1\u8db3\u89c4\u683c\u5316\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u6211\u4eec\u79f0\u8fd9\u79cd\u6570\u7684\u8868\u793a\u65b9\u6cd5\u4e3a \u6d6e\u70b9, floating point\u3002</p> <p>\u5c0f\u6570\u70b9\u7684\u82f1\u6587\u662f decimal point\uff0c\u4f46\u662f\u6211\u4eec\u8fd9\u79cd\u8868\u793a\u65b9\u6cd5\u4e0d\u518d\u662f decimal \u7684\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u8d77\u4e2a\u65b0\u540d\u5b57\uff1a\u4e8c\u8fdb\u5236\u5c0f\u6570\u70b9, binary point\u3002</p> <p>IEEE 754 \u89c4\u5b9a\u4e86\u4e24\u79cd\u7cbe\u5ea6\u7684\u6d6e\u70b9\u6570\u683c\u5f0f\uff0c\u5206\u522b\u662f single precision \u548c double precision\uff08\u5206\u522b\u5bf9\u5e94 C \u8bed\u8a00\u4e2d\u7684 <code>float</code> \u548c <code>double</code> \uff09\uff0cRISC-V \u8fd9\u4e24\u79cd\u90fd\u652f\u6301\uff1a</p> <p> </p> <p>\u5728\u4e0a\u8868\u4e2d\uff1a</p> <ul> <li>\u7b2c 1 \u6761\u8868\u793a 0\uff1b</li> <li>\u7b2c 2 \u6761\u8868\u793a\u975e\u89c4\u683c\u5316\u6570\uff0c\u8fd9\u79cd\u6570\u4e3b\u8981\u662f\u4e3a\u4e86\u7528\u6765\u8868\u793a\u4e00\u4e9b\u5f88\u5c0f\u7684\u6570\uff0c\u5b83\u7684\u53d6\u503c\u4e3a \\((\u22121)^S \\times (0+fraction) \\times 2^{\u2212bias}\\)\uff1b\u4f46\u662f\u5e76\u975e\u6240\u6709\u673a\u5668\u90fd\u652f\u6301\u8fd9\u79cd\u8868\u793a\uff0c\u6709\u7684\u673a\u5668\u4f1a\u76f4\u63a5\u629b\u51fa\u4e00\u4e2a exception\u3002\u6211\u4eec\u4e0d\u8003\u8651\u975e\u89c4\u683c\u6570\u7684\u5b58\u5728\uff1b</li> <li>\u7b2c 3 \u6761\u8868\u793a\u6b63\u5e38\u7684\u6d6e\u70b9\u6570\uff1b</li> <li>\u7b2c 4 \u6761\u8868\u793a\u65e0\u7a77\u5927\u6216\u8005\u65e0\u7a77\u5c0f\uff0c\u51fa\u73b0\u5728 exponent overflow \u6216\u8005\u6d6e\u70b9\u6570\u8fd0\u7b97\u4e2d\u975e 0 \u6570\u9664\u4ee5 0 \u7684\u60c5\u51b5\uff1b</li> <li>\u7b2c 5 \u6761\u8868\u793a\u975e\u6570\uff0c\u51fa\u73b0\u5728 0/0, inf / inf, inf - inf, inf * 0 \u7684\u60c5\u51b5</li> </ul> <p>\uff08\u5982\u679c\u6570\u5b57\u8fc7\u5927\u4e0d\u80fd\u8868\u793a\uff0c\u5373 overflow\uff0c\u5219\u7ed3\u679c\u7f6e\u4e3a inf\uff1b\u5982\u679c\u6570\u5b57\u8fc7\u5c0f\u4e0d\u80fd\u8868\u793a\uff0c\u5373 underflow\uff0c\u5219\u7ed3\u679c\u7f6e\u4e3a 0\u3002\uff09</p> <p>\u8fd9\u4e24\u79cd\u8868\u793a\u6cd5\u7684\u8303\u56f4\u548c\u7cbe\u5ea6\u5206\u522b\u662f\u591a\u5c11\u5462\uff1f</p> <ul> <li>\u8303\u56f4</li> <li>\u80fd\u8868\u793a\u503c\u7684 \u7edd\u5bf9\u503c \u7684\u8303\u56f4\u662f \\(1.0_2 \\times 2^{1\u2212bias} \u223c 1.11\\dots11_2 \\times 2^{11 \\dots 11_2 \u2212 1 \u2212 bias}\\)\uff0c\u5373 \\(1 \\times 2^{1\u2212bias} \u223c (2 \u2212 2^{-Fra\\#}) \\times 2^{(2^{Exp\\#} - 1) - 1 - bias}\\)\uff0c\u5176\u4e2d <code>Fra#</code> \u548c <code>Exp#</code> \u5206\u522b\u8868\u793a fraction \u548c exponent \u7684\u4f4d\u6570\uff1b</li> <li>\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff1a\\(\u00b11 \\times 2^{\u2212126}\u223c\u00b1(2\u22122^{\u221223}) \\times 2^{127}\\)</li> <li>\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff1a\\(\u00b11 \\times 2^{\u22121022}\u223c\u00b1(2\u22122^{\u221252}) \\times 2^{1023}\\)</li> <li>\u7cbe\u5ea6</li> <li>\\(2^{-Fra\\#}\\)</li> <li>\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff1a\\(2^{\u221223}\\)</li> <li>\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff1a\\(2^{-52}\\)</li> </ul>"},{"location":"Computer_Science/CO/Chapter%203/#binary-floating-point-addition","title":"Binary Floating-Point Addition","text":"<p>\u4ee5 \\(1.000_2 \\times 2^{\u22121} \u2212 1.110_2 \\times 2{\u22122}\\) \u4e3a\u4f8b\uff0c \u6d6e\u70b9\u6570\u7684\u52a0\u51cf\u6cd5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a</p> <ol> <li>Alignment: \u6307\u6570\u5bf9\u9f50\uff0c\u5c06\u5c0f\u6307\u6570\u5bf9\u9f50\u5230\u5927\u6307\u6570\uff1a</li> </ol> <p>\\(\u22121.110_2 \\times 2^{\u22122} = \u22120.111_2 \\times 2^{\u22121}\\)</p> <ol> <li> <p>\u4e3a\u4ec0\u4e48\u662f\u5c0f\u5bf9\u5927\uff1f\u9996\u5148\uff0c\u5c0f\u5bf9\u5927\u7684\u8fc7\u7a0b\u662f\u5728\u5c0f\u6307\u6570\u7684 fraction \u524d\u8865 <code>0</code>\uff0c\u53ef\u80fd\u5bfc\u81f4\u672b\u5c3e\u6570\u636e\u4e22\u5931\uff1b\u5927\u5bf9\u5c0f\u7684\u8fc7\u7a0b\u662f\u5728\u5927\u6307\u6570\u7684 fraction \u540e\u8865 <code>0</code>\uff0c\u53ef\u80fd\u5bfc\u81f4\u524d\u9762\u7684\u6570\u636e\u4e22\u5931\u3002\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4fdd\u6301\u7684\u7cbe\u786e\u4f4d\u6570\u662f\u6709\u9650\u7684\uff0c\u800c\u5728\u8feb\u4e0d\u5f97\u5df2\u4e22\u53bb\u7cbe\u5ea6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8ba9\u5c0f\u7684\u90a3\u4e2a\u6570\u7684\u672b\u51e0\u4f4d\u88ab\u4e22\u6389\u7684\u4ee3\u4ef7\u6bd4\u5927\u7684\u524d\u51e0\u4f4d\u4e22\u5931\u8981\u5c0f\u592a\u591a\u4e86\uff1b</p> </li> <li> <p>Addiction Fraction \u90e8\u5206\u76f8\u52a0\u51cf\uff1a\\(1.000\u22120.111=0.001\\)</p> </li> <li> <p>Normalization: \u5c06\u7ed3\u679c\u89c4\u683c\u5316\uff1a\\(0.001 \\times 2^{\u22121} = 1.000 \\times 2^{\u22124}\\)\uff1b\u540c\u65f6\u9700\u8981\u68c0\u67e5\u662f\u5426\u51fa\u73b0 overflow \u6216\u8005 underflow\uff0c\u5982\u679c\u51fa\u73b0\u5219\u89e6\u53d1 Exception</p> </li> <li> <p>Rounding: \u5c06 Fraction \u90e8\u5206\u820d\u5165\u5230\u6b63\u786e\u4f4d\u6570\uff1b\u820d\u5165\u7ed3\u679c\u53ef\u80fd\u8fd8\u9700\u8981\u89c4\u683c\u5316\uff0c\u6b64\u65f6\u56de\u5230\u6b65\u9aa4 3 \u7ee7\u7eed\u8fd0\u884c</p> </li> </ol> <p></p>"},{"location":"Computer_Science/CO/Chapter%203/#binary-floating-point-multiplication","title":"Binary Floating-Point Multiplication","text":"<p>\u5206\u522b\u5904\u7406\u7b26\u53f7\u4f4d\u3001exponent \u548c fraction\uff1a</p> <ul> <li>\u5c06\u4e24\u4e2a Exponent \u76f8\u52a0\u5e76 \u51cf\u53bb\u4e00\u4e2a bias\uff0c\u56e0\u4e3a bias \u52a0\u4e86 2 \u6b21</li> <li>\u5c06\u4e24\u4e2a (1 + Fraction) \u76f8\u4e58\uff0c\u5e76\u5c06\u5176\u89c4\u683c\u5316\uff1b\u6b64\u65f6\u540c\u6837\u8981\u8003\u8651 overflow \u548c underflow\uff1b\u7136\u540e\u820d\u5165\uff0c\u5982\u679c\u8fd8\u9700\u8981\u89c4\u683c\u5316\u5219\u91cd\u590d\u6267\u884c</li> <li>\u6839\u636e\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u7b26\u53f7\u51b3\u5b9a\u7ed3\u679c\u7684\u7b26\u53f7</li> </ul>"},{"location":"Computer_Science/CO/Chapter%203/#accurate-arithmetic","title":"Accurate Arithmetic","text":"<p>Extra bits of precision (<code>guard</code>, <code>round</code>, <code>sticky</code>)</p> <ul> <li><code>guard</code> \u548c <code>round</code> \u5c31\u662f\u6b63\u5e38\u540e\u9762\u4e24\u4f4d</li> <li><code>sticky</code>\u662f <code>round</code>\u662f\u5426\u8fd8\u6709\u975e0\u6570\u3002 <code>round</code> \u540e\u9762\u5168\u4e3a0\u5219 <code>sticky</code> \u4e3a0\u3002 <code>round</code> \u540e\u9762\u6709\u975e0\u5219 <code>sticky</code>\u4e3a1\u3002</li> </ul>"},{"location":"Computer_Science/CO/Chapter%203/#round-to-nearest-even","title":"Round to nearest even","text":"<p>Rounding to nearest even(Keep LSB to 0 when extra bits are 100)</p> <p>\\(0101010100|011 -&gt; 0101010100 (+0)\\) \\(0101010101|011 -&gt; 0101010101 (+0)\\) \\(0101010100|100 -&gt; 0101010100 (+0,keep LSB to 0)\\) \\(0101010101|100 -&gt; 0101010110 (+1,keep LSB to 0)\\) \\(0101010100|101 -&gt; 0101010101 (+1)\\) \\(0101010101|101 -&gt; 0101010110 (+1)\\)</p> <p>\u4e09\u820d\u4e94\u5165\u56db\u6210\u53cc</p> <p>Units in the last place(ulp)\uff1a\u7cbe\u5ea6\u635f\u5931\u7684\u6700\u5c0f\u5355\u4f4d</p> <p>\u5219\u8be5\u7cbe\u5ea6\u4e3a <code>0.5 ulp</code>\u3002</p>"},{"location":"Computer_Science/CO/Chapter%204/","title":"Chapter 4","text":"<p> \u7ea6 6611 \u4e2a\u5b57  21 \u884c\u4ee3\u7801  31 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 33 \u5206\u949f</p>"},{"location":"Computer_Science/CO/Chapter%204/#simple-data-path-with-control-unit","title":"Simple Data Path with Control Unit","text":""},{"location":"Computer_Science/CO/Chapter%204/#control-signal","title":"control signal","text":"<p>\u200b   6\u4e2a\u63a7\u5236\u4fe1\u53f7\u7684\u529f\u80fd\u3002\u5f53\u4e24\u8def\u591a\u9009\u5668\u76841\u4f4d\u63a7\u5236\u4fe1\u53f7\u6709\u6548\u65f6\uff0c\u591a\u9009\u5668\u9009\u62e9\u5bf9\u5e94\u4e8e1\u7684\u8f93\u5165\u3002\u5426\u5219\u9009\u62e9\u5bf9\u5e94\u4e8e0\u7684\u8f93\u5165\u3002\u8bf7\u8bb0\u4f4f\uff0c\u6240\u6709\u72b6\u6001\u5355\u5143\u90fd\u5c06\u65f6\u949f\u4fe1\u53f7\u4f5c\u4e3a\u9690\u5f0f\u8f93\u5165\uff0c\u800c\u4e14\u65f6\u949f\u63a7\u5236\u5199\u64cd\u4f5c\u3002\u65f6\u949f\u4fe1\u53f7\u4ece\u6765\u4e0d\u5728\u72b6\u6001\u5355\u5143\u4e4b\u5916\u901a\u8fc7\u4efb\u4f55\u95e8\u7535\u8def\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u80fd\u5bfc\u81f4\u65f6\u5e8f\u95ee\u9898\u3002</p> <p></p> \u6307\u4ee4 ALUSrc MemtoReg RegWrite Memread MemWrite Branch ALUop R\u578b\u6307\u4ee4 \u5bc4\u5b58\u5668 ALU\u8ba1\u7b97\u7ed3\u679c \u5199\u56de\u5bc4\u5b58\u5668 \u4e0d\u8bfb\u5185\u5b58 \u4e0d\u5199\u5185\u5b58 \u4e0d\u5206\u652f 10 ld(I-type) \u7acb\u5373\u6570 \u5185\u5b58\u8bfb\u51fa\u7ed3\u679c \u5199\u56de\u5bc4\u5b58\u5668 \u8bfb\u5185\u5b58 \u4e0d\u5199\u5185\u5b58 \u4e0d\u5206\u652f 00 sd(S-type) \u7acb\u5373\u6570 X \u4e0d\u5199\u56de\u5bc4\u5b58\u5668 \u4e0d\u8bfb\u5185\u5b58 \u5199\u5185\u5b58 \u4e0d\u5206\u652f 00 beq(SB-type) \u5bc4\u5b58\u5668 X \u4e0d\u5199\u56de\u5bc4\u5b58\u5668 \u4e0d\u8bfb\u5185\u5b58 \u4e0d\u5199\u5185\u5b58 \u5206\u652f 01"},{"location":"Computer_Science/CO/Chapter%204/#_1","title":"\u6570\u636e\u901a\u8def\u64cd\u4f5c","text":""},{"location":"Computer_Science/CO/Chapter%204/#add-rdrs1rs2","title":"<code>add rd,rs1,rs2</code>","text":"<ol> <li>\u53d6\u51fa\u6307\u4ee4\uff0cPC\u81ea\u589e\u3002</li> <li>\u4ece\u5bc4\u5b58\u5668\u5806\u8bfb\u51fa\u4e24\u4e2a\u5bc4\u5b58\u5668 <code>rs1</code> \u548c <code>rs2</code> ,\u540c\u65f6\u4e3b\u63a7\u5236\u5355\u5143\u5728\u6b64\u6b65\u9aa4\u8ba1\u7b97\u63a7\u5236\u4fe1\u53f7\u3002</li> <li>\u6839\u636e\u90e8\u5206\u64cd\u4f5c\u7801\u786e\u5b9aALU\u7684\u529f\u80fd\uff0c\u5bf9\u4ece\u5bc4\u5b58\u5668\u5806\u8bfb\u51fa\u7684\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u3002</li> <li>\u5c06ALU\u7684\u7ed3\u679c\u5199\u5165\u5bc4\u5b58\u5668\u5806\u4e2d\u7684\u76ee\u6807\u5bc4\u5b58\u5668 <code>rd</code>\u3002</li> </ol> <p>\u7070\u8272\u90e8\u5206\u4e3a\u4e0d\u5fc5\u7528\u7684\u5355\u5143</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%204/#ld-rdoffsetrs1","title":"<code>ld rd,offset(rs1)</code>","text":"<ol> <li>\u4ece\u6307\u4ee4\u5b58\u50a8\u5668\u4e2d\u53d6\u51fa\u6307\u4ee4\uff0cPC\u81ea\u589e\u3002</li> <li>\u4ece\u5bc4\u5b58\u5668\u5806\u8bfb\u51fa\u5bc4\u5b58\u5668 <code>rs1</code> \u7684\u503c\u3002</li> <li>ALU\u5c06\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u8bfb\u51fa\u7684\u503c\u548c\u7b26\u53f7\u6269\u5c55\u540e\u7684\u6307\u4ee4\u4e2d\u768412\u4f4d(\u504f\u79fb\u91cf)\u76f8\u52a0\u3002</li> <li>\u5c06ALU\u7684\u7ed3\u679c\u7528\u4f5c\u6570\u636e\u5b58\u50a8\u5668\u7684\u5730\u5740\u3002</li> <li>\u5c06\u4ece\u5b58\u50a8\u5668\u8bfb\u51fa\u7684\u6570\u636e\u5199\u5165\u5bc4\u5b58\u5668\u5806 <code>rd</code> \u3002</li> </ol> <p>\u7070\u8272\u90e8\u5206\u4e3a\u4e0d\u5fc5\u8981\u5355\u5143</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%204/#sd-rs2offsetrs1","title":"<code>sd rs2,offset(rs1)</code>","text":"<ol> <li>\u4ece\u6307\u4ee4\u5b58\u50a8\u5668\u4e2d\u53d6\u51fa\u6307\u4ee4\uff0cPC\u81ea\u589e\u3002</li> <li>\u4ece\u5bc4\u5b58\u5668\u5806\u8bfb\u51fa\u5bc4\u5b58\u5668 <code>rs1</code> \u548c <code>rs2</code> \u7684\u503c\u3002</li> <li>ALU\u5c06\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u8bfb\u51fa\u7684\u503c <code>rs1</code> \u548c\u7b26\u53f7\u6269\u5c55\u540e\u7684\u6307\u4ee4\u4e2d\u768412\u4f4d(\u504f\u79fb\u91cf)\u76f8\u52a0\u3002</li> <li>\u5c06ALU\u7684\u7ed3\u679c\u7528\u4f5c\u6570\u636e\u5b58\u50a8\u5668\u7684\u5b58\u50a8\u5730\u5740\u3002</li> <li>\u5c06\u4ece\u5bc4\u5b58\u5668\u8bfb\u51fa\u7684\u6570\u636e <code>rs2</code> \u5199\u5165\u5b58\u50a8\u5668 <code>rs1 +  offset</code>\u7684\u4f4d\u7f6e \u3002\u4e0d\u5b58\u5728\u5c06\u6570\u636e\u5b58\u50a8\u5668\u7684\u5185\u5bb9\u5199\u5165\u5bc4\u5b58\u5668\u5806\u7684\u64cd\u4f5c</li> </ol>"},{"location":"Computer_Science/CO/Chapter%204/#beq-rs1rs2offset","title":"<code>beq rs1,rs2,offset</code>","text":"<ol> <li>\u4ece\u6307\u4ee4\u5b58\u50a8\u5668\u4e2d\u53d6\u51fa\u6307\u4ee4\uff0cPC\u81ea\u589e\u3002</li> <li>\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u8bfb\u51fa\u4e24\u4e2a\u5bc4\u5b58\u5668 <code>rs1</code> \u548c <code>rs2</code> \u3002</li> <li>ALU\u5c06\u4ece\u5bc4\u5b58\u5668\u5806\u8bfb\u51fa\u7684\u4e24\u6570\u76f8\u51cf\u3002PC\u4e0e\u5de6\u79fb\u4e00\u4f4d\u3001\u7b26\u53f7\u6269\u5c55\u7684\u6307\u4ee4\u4e2d\u768412\u4f4d(\u504f\u79fb)\u76f8\u52a0\uff0c\u7ed3\u679c\u662f\u5206\u652f\u76ee\u6807\u5730\u5740\u3002</li> <li>ALU\u7684\u96f6\u8f93\u51fa\u51b3\u5b9a\u5c06\u54ea\u4e2a\u52a0\u6cd5\u5668\u7684\u7ed3\u679c\u5199\u5165PC\u3002</li> </ol> <p>\u7070\u8272\u90e8\u5206\u4e3a\u4e0d\u5fc5\u8981\u5355\u5143</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%204/#jal","title":"\u66f4\u590d\u6742\u4e00\u70b9(\u5e26\u4e0a<code>jal</code>)","text":""},{"location":"Computer_Science/CO/Chapter%204/#jal-x1procedure","title":"<code>jal x1,procedure</code>","text":"<ol> <li>\u4ece\u6307\u4ee4\u5b58\u50a8\u5668\u4e2d\u53d6\u51fa\u6307\u4ee4\u3002</li> <li>ALU\u5c06PC\u4e0e\u5de6\u79fb\u4e00\u4f4d\u3001\u7b26\u53f7\u6269\u5c55\u7684\u6307\u4ee4\u4e2d\u768412\u4f4d(\u504f\u79fb)\u76f8\u52a0\uff0c\u7ed3\u679c\u662f\u8df3\u8f6c\u76ee\u6807\u5730\u5740\u3002\u518d\u66f4\u65b0PC\u3002</li> <li>\u5b58\u50a8\u8fd4\u56de\u5730\u5740<code>PC+4</code>\u81f3\u5bc4\u5b58\u5668<code>rd</code>\u4e2d\u3002</li> </ol> <p>\u7070\u8272\u90e8\u5206\u662f\u4e0d\u5fc5\u8981\u5355\u5143</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%204/#jalr-ra-offsetrs1","title":"<code>jalr ra , offset(rs1)</code>","text":"<ol> <li>\u4ece\u6307\u4ee4\u5b58\u50a8\u5668\u4e2d\u53d6\u51fa\u6307\u4ee4\u3002</li> <li><code>PC + 4</code>\u4fdd\u5b58\u5230<code>ra</code>\u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e2d\u3002</li> <li>\u8ba1\u7b97 <code>rs1</code> \u4e2d\u8bfb\u51fa\u7684\u5730\u5740\u5728ALU\u4e2d\u52a0\u4e0a\u7acb\u5373\u6570\u5f97\u5230\u6700\u7ec8\u8981\u8df3\u8f6c\u7684\u5730\u5740\u3002\u53bb\u8df3\u8f6c\u3002</li> </ol> <p>\u56e0\u6b64\u76f8\u8f83\u4e8e <code>jal</code> \u800c\u8a00 <code>jalr</code> \u591a\u7684\u7ebf\u6709\u4e24\u6761\u3002\u7b2c\u4e00\u6761\u662f ALU \u8ba1\u7b97\u540e\u5f97\u51fa\u7684\u6570\u5230 MUX \u8fd4\u56de\u81f3 <code>PC</code> \uff0c\u7b2c\u4e8c\u6761\u662f <code>PC+4</code> \u5b58\u81f3 <code>register</code> \u4e2d\u7684\u4e00\u6761\u3002</p>"},{"location":"Computer_Science/CO/Chapter%204/#pipeline","title":"Pipeline","text":""},{"location":"Computer_Science/CO/Chapter%204/#five-stages","title":"Five stages","text":"<p>RISC-V\u6307\u4ee4\u901a\u5e38\u5305\u542b\u4e94\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>Fetch instruction from memory.(IF)</li> <li>Read registers and decode the instruction.(ID)</li> <li>Execute the operation or calculate an address.(EX)</li> <li>Access an operand in data memory (if necessary).(MEM)</li> <li>Write the result into a register (if necessary).(WB)</li> </ol> <p></p> <ol> <li>\u524d\u534a\u5468\u671f\u7528\u6765\u5199\u540e\u534a\u5468\u671f\u7528\u6765\u8bfb\uff0c\u6709\u53ef\u80fd\u5728\u4e0b\u4e00\u6761\u6307\u4ee4\u4ea7\u751f\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u65f6\u53ef\u4ee5\u8d76\u4e0a\u3002</li> <li>\u6d41\u6c34\u7ebf\u6280\u672f\u901a\u8fc7\u63d0\u9ad8\u6307\u4ee4\u541e\u5410\u7387\u6765\u63d0\u9ad8\u6027\u80fd\uff0c\u800c\u4e0d\u662f\u51cf\u5c11\u5355\u4e2a\u6307\u4ee4\u7684\u6267\u884c\u65f6\u95f4\u3002</li> <li>Reg files \u7684\u5199\u5165\u5747\u53d1\u751f\u5728\u4e0a\u534a\u5468\u671f\uff0c\u4e5f\u5c31\u662f\u4e0a\u5347\u6cbf\uff1b\u800c Pipeline registers \u548c <code>PC</code> \u7684\u5199\u5165\u5747\u53d1\u751f\u5728\u4e0b\u534a\u5468\u671f\uff0c\u4e5f\u5c31\u662f\u4e0b\u964d\u6cbf\u3002\u5982\u679c <code>PC</code> \u5728\u4e0a\u5347\u6cbf\u5199\u5165\uff0c\u4e5f\u5c31\u662f\u5728\u4e0a\u5347\u6cbf\u66f4\u65b0\u5230\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5728\u4e0b\u964d\u6cbf\u8981\u5c06\u5f53\u524d\u6307\u4ee4\u5199\u5165 <code>IF/ID</code> \u7684\u65f6\u5019\uff0c\u4ece inst mem \u4e2d\u8bfb\u51fa\u7684\u6307\u4ee4\u5df2\u7ecf\u662f\u4e0b\u4e00\u6761\u800c\u4e0d\u662f\u5f53\u524d\u6307\u4ee4\u4e86\uff01\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8ba9 <code>PC</code> \u5728\u4e0b\u964d\u6cbf\u5199\u5165\uff0c\u8fd9\u6837\u624d\u80fd\u8bfb\u53d6\u5230\u6b63\u786e\u7684\u6307\u4ee4\u3002</li> </ol>"},{"location":"Computer_Science/CO/Chapter%204/#hazards","title":"Hazards","text":"<ol> <li>Structural Hazard : \u786c\u4ef6\u4e0d\u652f\u6301\u591a\u6761\u6307\u4ee4\u5728\u540c\u4e00\u65f6\u949f\u5468\u671f\u6267\u884c\u3002</li> <li>Data Hazards : \u7531\u4e8e\u4e00\u4e2a\u6b65\u9aa4\u5fc5\u987b\u7b49\u5f85\u53e6\u4e00\u4e2a\u6b65\u9aa4\u5b8c\u6210\u800c\u5bfc\u81f4\u7684\u6d41\u6c34\u7ebf\u505c\u987f\u3002</li> <li>Control Hazards : \u9700\u8981\u6839\u636e\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\u505a\u51fa\u51b3\u5b9a\uff0c\u800c\u5176\u4ed6\u6307\u4ee4\u6b63\u5728\u6267\u884c\u3002</li> </ol>"},{"location":"Computer_Science/CO/Chapter%204/#data-hazard-forwardingbypassing","title":"Data Hazard Forwarding/Bypassing","text":"<p>\u5411\u5185\u90e8\u8d44\u6e90\u6dfb\u52a0\u989d\u5916\u7684\u786c\u4ef6\u4ee5\u5c3d\u5feb\u627e\u5230\u7f3a\u5c11\u7684\u8fd0\u7b97\u9879\u7684\u529e\u6cd5\u3002</p> <p>\u5c06 <code>add</code> \u6267\u884c\u9636\u6bb5\u540e <code>x1</code> \u4e2d\u7684\u503c\uff0c\u524d\u9012\u7ed9 <code>sub</code> \u6307\u4ee4\u4f5c\u4e3a\u6267\u884c\u9636\u6bb5\u7684\u8f93\u5165\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%204/#bubblepipeline-stall","title":"bubble(<code>pipeline stall</code>)","text":"<p>\u5728\u7b2c\u4e00\u4e2a\u6307\u4ee4\u7684\u7b2c\u56db\u4e2a\u9636\u6bb5\u540e\uff0c<code>sub</code> \u6307\u4ee4\u6240\u9700\u7684\u6570\u636e\u624d\u53ef\u7528\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%204/#recording","title":"recording","text":"Question <pre><code>a = b + e;\nc = b + f;\n</code></pre> <p>Here is the generated RISC-V code for this segment, assuming all variables are in memory and are addressable as offsets from x31:</p> <pre><code>ld x1, 0(x31) // Load b\nld x2, 8(x31) // Load e\nadd x3, x1, x2 // b + e\nsd x3, 24(x31) // Store a\nld x4, 16(x31) // Load f\nadd x5, x1, x4 // b + f\nsd x5, 32(x31) // Store c\n</code></pre> <p>Find the hazard in the preceding code segment and reorder the instructions to avoid any pipeline stalls. </p> Answer <pre><code>ld x1, 0(x31)\nld x2, 8(x31)\nld x4, 16(x31)\nadd x3, x1, x2\nsd x3, 24(x31)\nadd x5, x1, x4\nsd x5, 32(x31)\n</code></pre>"},{"location":"Computer_Science/CO/Chapter%204/#control-hazards","title":"Control Hazards","text":"<p>\u63a7\u5236\u5192\u9669\u6709\u4e09\u79cd\u89e3\u51b3\u529e\u6cd5:</p> <ol> <li>\u505c\u987f : \u4fdd\u5b88\u65b9\u6cd5\uff0c\u6709\u6548\u4f46\u901f\u5ea6\u5f88\u6162</li> <li>\u9884\u6d4b</li> </ol>"},{"location":"Computer_Science/CO/Chapter%204/#predict","title":"Predict","text":"<p>Computers do indeed use prediction to handle conditional branches. </p> <p>\u52a8\u6001\u9884\u6d4b\u7684\u4e00\u79cd\u5e38\u7528\u5b9e\u73b0\u65b9\u6cd5\u662f\u4fdd\u5b58\u6bcf\u4e2a\u6761\u4ef6\u5206\u652f\u662f\u5426\u53d1\u751f\u5206\u652f\u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u7136\u540e\u6839\u636e\u6700\u8fd1\u7684\u8fc7\u53bb\u884c\u4e3a\u6765\u9884\u6d4b\u672a\u6765\u3002\u5f53\u9884\u6d4b\u9519\u8bef\u65f6\uff0c\u6d41\u6c34\u7ebf\u63a7\u5236\u5fc5\u987b\u786e\u4fdd\u9884\u6d4b\u9519\u8bef\u7684\u6761\u4ef6\u5206\u652f\u6307\u4ee4\u4e4b\u540e\u7684\u6307\u4ee4\u6267\u884c\u4e0d\u4f1a\u751f\u6548\uff0c\u5e76\u4e14\u5fc5\u987b\u4ece\u6b63\u786e\u7684\u5206\u652f\u5730\u5740\u5904\u91cd\u65b0\u542f\u52a8\u6d41\u6c34\u7ebf\u3002</p>"},{"location":"Computer_Science/CO/Chapter%204/#_2","title":"\u6d41\u6c34\u7ebf\u7684\u6307\u4ee4","text":"<p>There are, however, two exceptions to this left-to-right flow of instructions:</p> <ul> <li>The write-back stage, which places the result back into the register file in the middle of the datapath. </li> <li>The selection of the next value of the PC, choosing between the incremented PC and the branch address from the MEM stage.</li> </ul> <p>\u7136\u800c\uff0c\u5728\u4ece\u5de6\u5230\u53f3\u7684\u6307\u4ee4\u6d41\u52a8\u8fc7\u7a0b\u4e2d\u5b58\u5728\u4e24\u4e2a\u7279\u6b8a\u60c5\u51b5\uff1a</p> <ul> <li> <p>\u5728\u5199\u56de\u9636\u6bb5\uff0c\u5b83\u5c06\u7ed3\u679c\u5199\u56de\u4f4d\u4e8e\u6570\u636e\u901a\u8def\u4e2d\u6bb5\u7684\u5bc4\u5b58\u5668\u5806\u4e2d\u3002</p> </li> <li> <p>\u5728\u9009\u62e9\u4e0b\u4e00PC\u503c\u65f6\uff0c\u5728\u81ea\u589ePC\u503c\u4e0eMEM\u9636\u6bb5\u7684\u5206\u652f\u5730\u5740\u4e4b\u95f4\u8fdb\u884c\u9009\u62e9\u3002</p> </li> </ul> <p>\u4ece\u53f3\u5230\u5de6\u7684\u6570\u636e\u6d41\u5411\u4e0d\u4f1a\u5bf9\u5f53\u524d\u7684\u6307\u4ee4\u9020\u6210\u5f71\u54cd\uff0c\u8fd9\u79cd\u53cd\u5411\u7684\u6570\u636e\u6d41\u52a8\u53ea\u4f1a\u5f71\u54cd\u6d41\u6c34\u7ebf\u4e2d\u7684\u540e\u7eed\u6307\u4ee4\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7b2c\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u4f1a\u5bfc\u81f4\u6570\u636e\u5192\u9669\uff0c\u7b2c\u4e8c\u79cd\u4f1a\u5bfc\u81f4\u63a7\u5236\u5192\u9669\u3002</p> <p>\u4e00\u79cd\u8868\u793a\u6d41\u6c34\u7ebf\u6570\u636e\u901a\u8def\u5982\u4f55\u6267\u884c\u7684\u65b9\u6cd5\u662f\u5047\u5b9a\u6bcf\u4e00\u6761\u6307\u4ee4\u90fd\u6709\u72ec\u7acb\u7684\u6570\u636e\u901a\u8def\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u6570\u636e\u901a\u8def\u653e\u5728\u540c\u4e00\u65f6\u95f4\u8f74\u4e0a\u6765\u8868\u793a\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165\u5bc4\u5b58\u5668\u4fdd\u5b58\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u90e8\u5206\u6570\u636e\u901a\u8def\u53ef\u4ee5\u5728\u6307\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u88ab\u5171\u4eab\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6307\u4ee4\u5b58\u50a8\u5668\u53ea\u5728\u6307\u4ee4\u7684\u4e94\u4e2a\u9636\u6bb5\u4e2d\u7684\u4e00\u4e2a\u9636\u6bb5\u88ab\u4f7f\u7528\uff0c\u800c\u5728\u5176\u4ed6\u56db\u4e2a\u9636\u6bb5\u4e2d\u5141\u8bb8\u88ab\u5176\u4ed6\u6307\u4ee4\u5171\u4eab\u3002\u4e3a\u4e86\u4fdd\u7559\u5728\u5176\u4ed6\u56db\u4e2a\u9636\u6bb5\u4e2d\u7684\u6307\u4ee4\u7684\u503c\uff0c\u5fc5\u987b\u628a\u4ece\u6307\u4ee4\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u7684\u6570\u636e\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u3002</p>"},{"location":"Computer_Science/CO/Chapter%204/#_3","title":"\u6570\u636e\u901a\u8def(\u975e\u6700\u7ec8\u7248)","text":""},{"location":"Computer_Science/CO/Chapter%204/#ld","title":"<code>ld</code>","text":"<p><code>NOTE</code> : \u5c3d\u7ba1\u5728\u9636\u6bb5\u4e8c\u4e2d\u52a0\u8f7d\u6307\u4ee4\u53ea\u9700\u8981\u5bc4\u5b58\u56681\u4e2d\u7684\u503c\uff0c\u4f46\u662f\u5904\u7406\u5668\u6b64\u65f6\u5e76\u4e0d\u77e5\u9053\u5f53\u524d\u662f\u54ea\u4e00\u6761\u6307\u4ee4\u6b63\u5728\u88ab\u8bd1\u7801\uff0c\u56e0\u6b64\u5904\u7406\u5668\u5c06\u7b26\u53f7\u6269\u5c55\u540e\u768416\u4f4d\u5e38\u91cf\u4ee5\u53ca\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u90fd\u5b58\u5165 <code>ID/EX</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002\u6211\u4eec\u5e76\u4e0d\u4e00\u5b9a\u9700\u8981\u5168\u90e8\u7684\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u6570\uff0c\u4f46\u662f\u4fdd\u7559\u5168\u90e8\u4e09\u4e2a\u64cd\u4f5c\u6570\u53ef\u4ee5\u7b80\u5316\u63a7\u5236\u3002</p> <p><code>ld</code> \u6307\u4ee4\u7684\u4e94\u4e2a\u9636\u6bb5 : </p> <ol> <li>\u53d6\u6307\uff1a</li> </ol> <p>\u4f7f\u7528PC\u4e2d\u7684\u5730\u5740\u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u6307\u4ee4\uff0c\u7136\u540e\u5c06\u6307\u4ee4\u653e\u5165 <code>IF/ID</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002PC\u4e2d\u7684\u5730\u5740\u81ea\u589e4,\u7136\u540e\u5199\u56dePC,\u4ee5\u4e3a\u4e0b\u4e00\u65f6\u949f\u5468\u671f\u505a\u51c6\u5907\u3002\u8fd9\u4e2aPC\u503c\u4e5f\u4fdd\u5b58\u5728 <code>IF/ID</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\uff0c\u4ee5\u5907\u540e\u7eed\u7684\u6307\u4ee4\u4f7f\u7528(\u4f8b\u5982beq)\u3002\u8ba1\u7b97\u673a\u5e76\u4e0d\u77e5\u9053\u5f53\u524d\u6b63\u5728\u63d0\u53d6\u7684\u662f\u54ea\u4e00\u79cd\u6307\u4ee4\uff0c\u56e0\u6b64\u5b83\u5fc5\u987b\u4e3a\u4efb\u4f55\u4e00\u79cd\u6307\u4ee4\u505a\u597d\u51c6\u5907\uff0c\u5e76\u4e14\u5c06\u6240\u6709\u53ef\u80fd\u6709\u7528\u7684\u4fe1\u606f\u6cbf\u6d41\u6c34\u7ebf\u4f20\u9012\u51fa\u53bb\u3002</p> <ol> <li>\u6307\u4ee4\u8bd1\u7801\u548c\u8bfb\u5bc4\u5b58\u5668\u5806\uff1a</li> </ol> <p>\u8be5\u6307\u4ee4\u63d0\u4f9b\u4e00\u4e2a64\u4f4d\u7b26\u53f7\u6269\u5c55\u7684\u7acb\u5373\u6570\u5b57\u6bb5\uff0c\u4ee5\u53ca\u4e24\u4e2a\u5c06\u8981\u8bfb\u53d6\u7684\u5bc4\u5b58\u5668\u7f16\u53f7\u3002\u6240\u6709\u8fd9\u4e09\u4e2a\u503c\u90fd\u4e0ePC\u5730\u5740\u4e00\u8d77\u5b58\u50a8\u5728 <code>ID/EX</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u5411\u53f3\u4f20\u9012\u5728\u4e4b\u540e\u7684\u65f6\u949f\u5468\u671f\u91cc\u6307\u4ee4\u53ef\u80fd\u7528\u5230\u7684\u6240\u6709\u4fe1\u606f\u3002</p> <ol> <li>\u6267\u884c\u6216\u5730\u5740\u8ba1\u7b97\uff1a</li> </ol> <p>\u52a0\u8f7d\u6307\u4ee4\u4ece <code>ID/EX</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u548c\u4e00\u4e2a\u7b26\u53f7\u6269\u5c55\u7684\u7acb\u5373\u6570\uff0c\u5e76\u4e14\u4f7f\u7528ALU\u90e8\u4ef6\u5c06\u5b83\u4eec\u76f8\u52a0\uff0c\u5b83\u4eec\u7684\u548c\u88ab\u5b58\u50a8\u5728 <code>EX/MEM</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002</p> <ol> <li>\u5b58\u50a8\u5668\u8bbf\u95ee\uff1a</li> </ol> <p>\u52a0\u8f7d\u6307\u4ee4\u4f7f\u7528\u6765\u81ea <code>EX/MEM</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u7684\u5730\u5740\u8bfb\u53d6\u6570\u636e\u5b58\u50a8\u5668\uff0c\u5e76\u5c06\u6570\u636e\u5b58\u5165 <code>MEM/WB</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002</p> <ol> <li>\u5199\u56de\uff1a</li> </ol> <p>\u4ece <code>MEM/WB</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u5c06\u5b83\u5199\u5165\u56fe\u4e2d\u95f4\u7684\u5bc4\u5b58\u5668\u5806\u4e2d\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%204/#sd","title":"<code>sd</code>","text":"<p><code>sd</code> \u6307\u4ee4\u7684\u4e94\u4e2a\u9636\u6bb5 : </p> <ol> <li>\u53d6\u6307\uff1a</li> </ol> <p>\u4f7f\u7528PC\u4e2d\u7684\u5730\u5740\u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u6307\u4ee4\uff0c\u7136\u540e\u5c06\u5176\u653e\u5165 <code>IF/ID</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002\u8be5\u9636\u6bb5\u53d1\u751f\u5728\u6307\u4ee4\u88ab\u8bc6\u522b\u4e4b\u524d\uff0c\u52a0\u8f7d\u548c\u5b58\u50a8\u6307\u4ee4\u8fd9\u4e00\u9636\u6bb5\u76f8\u540c\u3002</p> <ol> <li> <p>\u6307\u4ee4\u8bd1\u7801\u548c\u8bfb\u5bc4\u5b58\u5668\u5806\uff1a</p> <p><code>IF/ID</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u7684\u6307\u4ee4\u63d0\u4f9b\u4e86\u7528\u4e8e\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u4e24\u4e2a\u5bc4\u5b58\u5668\u7f16\u53f7\u4ee5\u53ca\u4e00\u4e2a\u7b26\u53f7\u6269\u5c55\u7684\u7acb\u5373\u6570\u3002\u8fd9\u4e09\u4e2a64\u4f4d\u7684\u503c\u90fd\u5b58\u50a8\u5728 <code>ID/EX</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002\u52a0\u8f7d\u6307\u4ee4\u548c\u5b58\u50a8\u6307\u4ee4\u7684\u7b2c\u4e8c\u4e2a\u6d41\u6c34\u9636\u6bb5\u4e5f\u76f8\u540c\u3002\u56e0\u4e3a\u6b64\u65f6\u8fd8\u4e0d\u77e5\u9053\u6307\u4ee4\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u6240\u6709\u7684\u6307\u4ee4\u90fd\u4f1a\u6267\u884c\u8fd9\u4e24\u4e2a\u9636\u6bb5\u3002(\u867d\u7136\u5b58\u50a8\u6307\u4ee4\u4f7f\u7528 <code>rs2</code> \u5b57\u6bb5\u8bfb\u53d6\u672c\u6d41\u6c34\u7ebf\u9636\u6bb5\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5bc4\u5b58\u5668\uff0c\u4f46\u662f\u8be5\u6d41\u6c34\u7ebf\u56fe\u4e2d\u5e76\u672a\u663e\u793a\u8fd9\u4e2a\u7ec6\u8282\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u56fe\u8868\u3002)</p> </li> <li> <p>\u6307\u4ee4\u6267\u884c\u548c\u5730\u5740\u8ba1\u7b97\uff1a</p> </li> </ol> <p>\u6307\u4ee4\u6d41\u6c34\u7ebf\u4e2d\u7684\u7b2c\u4e09\u6b65\uff0c\u6709\u6548\u5730\u5740\u88ab\u5b58\u653e\u5728 <code>EX/MEM</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002</p> <ol> <li>\u5b58\u50a8\u5668\u8bbf\u95ee\uff1a</li> </ol> <p>\u88ab\u5199\u5165\u5b58\u50a8\u5668\u7684\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\uff0c\u5305\u542b\u8981\u88ab\u5b58\u50a8\u7684\u6570\u636e\u7684\u5bc4\u5b58\u5668\u5728\u8f83\u65e9\u7684\u6d41\u6c34\u7ebf\u9636\u6bb5\u5c31\u5df2\u7ecf\u88ab\u8bfb\u53d6\u5e76\u5b58\u50a8\u5728 <code>ID/EX</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002\u5728 <code>MEM</code>\u9636\u6bb5\u83b7\u5f97\u8fd9\u4e2a\u6570\u636e\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u5728EX\u9636\u6bb5\u4e2d\u5c06\u8be5\u6570\u636e\u653e\u5165 <code>EX/MEM</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\uff0c\u5c31\u50cf\u6211\u4eec\u5c06\u6709\u6548\u5730\u5740\u5b58\u50a8\u5728 <code>EX/MEM</code> \u4e2d\u90a3\u6837\u3002</p> <ol> <li>\u5199\u56de\uff1a</li> </ol> <p>\u5b58\u50a8\u6307\u4ee4\u7684\u6700\u540e\u4e00\u6b65\u3002\u5bf9\u5b58\u50a8\u6307\u4ee4\u6765\u8bf4\uff0c\u5728\u5199\u56de\u9636\u6bb5\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u4e8b\u60c5\u3002\u7531\u4e8e\u5b58\u50a8\u6307\u4ee4\u4e4b\u540e\u7684\u6bcf\u4e00\u6761\u6307\u4ee4\u90fd\u5df2\u7ecf\u8fdb\u5165\u6d41\u6c34\u7ebf\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u65e0\u6cd5\u52a0\u901f\u8fd9\u4e9b\u6307\u4ee4\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u6307\u4ee4\u90fd\u8981\u7ecf\u8fc7\u6d41\u6c34\u7ebf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9636\u6bb5\uff0c\u5373\u4f7f\u5b83\u5728\u8fd9\u4e2a\u9636\u6bb5\u6ca1\u6709\u4efb\u4f55\u4e8b\u60c5\u8981\u505a\uff0c\u56e0\u4e3a\u540e\u7eed\u6307\u4ee4\u5df2\u7ecf\u6309\u7167\u6700\u5927\u901f\u7387\u5728\u6d41\u6c34\u7ebf\u4e2d\u8fdb\u884c\u5904\u7406\u4e86\u3002</p> <p>\u5b58\u50a8\u6307\u4ee4\u518d\u6b21\u8bf4\u660e\u4e86\u5982\u679c\u8981\u5c06\u76f8\u5173\u4fe1\u606f\u4ece\u4e4b\u524d\u7684\u6d41\u6c34\u7ebf\u9636\u6bb5\u4f20\u9012\u5230\u540e\u7eed\u7684\u6d41\u6c34\u7ebf\u9636\u6bb5\uff0c\u5c31\u5fc5\u987b\u5c06\u5b83\u4eec\u653e\u7f6e\u5728\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002\u5426\u5219\uff0c\u5f53\u4e0b\u4e00\u6761\u6307\u4ee4\u8fdb\u5165\u6d41\u6c34\u7ebf\u65f6\uff0c\u8be5\u4fe1\u606f\u5c31\u4f1a\u4e22\u5931\u3002\u5bf9\u4e8e\u5b58\u50a8\u6307\u4ee4\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5728 <code>ID</code> \u9636\u6bb5\u8bfb\u53d6\u7684\u5bc4\u5b58\u5668\u4fe1\u606f\u4f20\u9012\u5230 <code>MEM</code> \u9636\u6bb5\uff0c\u7136\u540e\u5199\u5165\u5b58\u50a8\u5668\u4e2d\u3002\u8fd9\u4e9b\u6570\u636e\u6700\u521d\u653e\u7f6e\u5728 <code>ID/EX</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\uff0c\u4e4b\u540e\u88ab\u4f20\u9001\u5230 <code>EX/MEM</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u3002</p> <p>\u5176\u6b21\uff0c\u52a0\u8f7d\u548c\u5b58\u50a8\u6307\u4ee4\u8fd8\u8bf4\u660e\u4e86\u7b2c\u4e8c\u4e2a\u5173\u952e\u70b9\uff1a\u5728\u6d41\u6c34\u7ebf\u6570\u636e\u901a\u8def\u8bbe\u8ba1\u4e2d\u7684\u6bcf\u4e00\u4e2a\u903b\u8f91\u90e8\u4ef6(\u4f8b\u5982\u6307\u4ee4\u5b58\u50a8\u5668\u3001\u5bc4\u5b58\u5668\u8bfb\u7aef\u53e3\u3001ALU\u3001\u6570\u636e\u5b58\u50a8\u5668\u3001\u5bc4\u5b58\u5668\u5199\u7aef\u53e3\u7b49)\u53ea\u80fd\u5728\u5355\u4e2a\u6d41\u6c34\u7ebf\u9636\u6bb5\u4e2d\u88ab\u4f7f\u7528\uff0c\u5426\u5219\u5c31\u4f1a\u53d1\u751f\u7ed3\u6784\u5192\u9669\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u90e8\u4ef6\u4ee5\u53ca\u5bf9\u5b83\u4eec\u7684\u63a7\u5236\u53ea\u80fd\u4e0e\u4e00\u4e2a\u6d41\u6c34\u7ebf\u9636\u6bb5\u76f8\u5173\u8054\u3002</p> <p></p> <p>\u4fee\u590d\u9519\u8bef\u540e\u7684\u7248\u672c : </p> <p></p> <p>\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u53d1\u73b0\u52a0\u8f7d\u6307\u4ee4\u8bbe\u8ba1\u4e2d\u7684\u4e00\u4e2a\u9519\u8bef\u3002\u5728\u52a0\u8f7d\u6307\u4ee4\u6d41\u6c34\u7684 <code>WB</code> \u9636\u6bb5\u6539\u5199\u4e86\u54ea\u4e2a\u5bc4\u5b58\u5668?\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u6b64\u65f6\u7684\u5bc4\u5b58\u5668\u53f7\u662f\u54ea\u6761\u6307\u4ee4\u63d0\u4f9b\u7684?</p> <p><code>IF/ID</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u7684\u6307\u4ee4\u63d0\u4f9b\u4e86\u5199\u5165\u5bc4\u5b58\u5668\u7f16\u53f7\u3002\u4f46\u662f\uff0c\u8fd9\u6761\u6307\u4ee4\u662f\u52a0\u8f7d\u6307\u4ee4\u4e4b\u540e\u7684\u6307\u4ee4\u4e86(\u8fd9\u5c31\u662f\u9519\u8bef\u6240\u5728)\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728\u52a0\u8f7d\u6307\u4ee4\u7684\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u4fdd\u7559\u76ee\u6807\u5bc4\u5b58\u5668\u7f16\u53f7\u3002\u5c31\u50cf\u5b58\u50a8\u6307\u4ee4\u4e3a\u4e86 <code>MEM</code> \u9636\u6bb5\u7684\u4f7f\u7528\u800c\u5c06\u5bc4\u5b58\u5668\u503c\u4ece <code>ID/EX</code> \u4e2d\u4f20\u9012\u5230 <code>EX/MEM</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u90a3\u6837\uff0c\u52a0\u8f7d\u6307\u4ee4\u9700\u8981\u4e3a\u4e86 <code>WB</code> \u9636\u6bb5\u7684\u4f7f\u7528\u800c\u5c06\u5bc4\u5b58\u5668\u7f16\u53f7\u4ece <code>ID/EX</code> \u901a\u8fc7 <code>EX/MEM</code> \u4f20\u9012\u5230 <code>MEM/WB</code> \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u3002\u6362\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u4e3a\u4e86\u5171\u4eab\u6d41\u6c34\u7ebf\u6570\u636e\u901a\u8def\uff0c\u6211\u4eec\u9700\u8981\u5728 <code>IF</code> \u9636\u6bb5\u4fdd\u5b58\u8bfb\u53d6\u7684\u6307\u4ee4\uff0c\u56e0\u6b64\u6bcf\u4e2a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u90fd\u8981\u4fdd\u5b58\u5f53\u524d\u9636\u6bb5\u548c\u540e\u7eed\u9636\u6bb5\u6240\u9700\u7684\u90e8\u5206\u6307\u4ee4\u4fe1\u606f\u3002</p> <p>\u4fee\u6b63\u540e\u7684\u6570\u636e\u901a\u8def\u5c06\u5199\u5165\u5bc4\u5b58\u5668\u7f16\u53f7\u5148\u4f20\u9012\u5230 <code>ID/EX</code> \u5bc4\u5b58\u5668\u4e2d\uff0c\u7136\u540e\u4f20\u9001\u5230 <code>EX/MEM</code> \u5bc4\u5b58\u5668\uff0c\u6700\u540e\u4f20\u9001\u5230 <code>MEM/WB</code> \u5bc4\u5b58\u5668\u3002\u5bc4\u5b58\u5668\u7f16\u53f7\u5728 <code>WB</code> \u9636\u6bb5\u88ab\u4f7f\u7528\uff0c\u6307\u5b9a\u4e86\u8981\u5199\u5165\u7684\u5bc4\u5b58\u5668\u3002\u4fee\u6b63\u540e\u6570\u636e\u901a\u8def\u56fe\uff0c\u5b83\u9ad8\u4eae\u663e\u793a\u4e86\u52a0\u8f7d\u6307\u4ee4\u5728\u6240\u6709\u4e94\u4e2a\u6d41\u6c34\u7ebf\u9636\u6bb5\u4e2d\u7528\u5230\u7684\u786c\u4ef6\u3002</p>"},{"location":"Computer_Science/CO/Chapter%204/#_4","title":"\u6570\u636e\u901a\u8def(\u66f4\u65b0\u7248)","text":""},{"location":"Computer_Science/CO/Chapter%204/#pipeline-control","title":"Pipeline Control","text":"<p><code>NOTE</code> : \u4e0e\u5355\u5468\u671f\u5b9e\u73b0\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u6211\u4eec\u5047\u5b9aPC\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u88ab\u5199\u5165\uff0c\u56e0\u6b64PC\u6ca1\u6709\u5355\u72ec\u7684\u5199\u5165\u4fe1\u53f7\u3002\u540c\u7406\uff0c\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668(<code>IF /ID\u3001ID/EX\u3001EX/MEM\u548cMEM/WB</code>)\u4e5f\u6ca1\u6709\u5355\u72ec\u7684\u5199\u5165\u4fe1\u53f7\uff0c\u56e0\u4e3a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e5f\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u5185\u90fd\u88ab\u5199\u5165\u3002</p> <ol> <li>\u53d6\u6307\uff1a</li> </ol> <p>\u8bfb\u6307\u4ee4\u5b58\u50a8\u5668\u548c\u5199PC\u7684\u63a7\u5236\u4fe1\u53f7\u603b\u662f\u6709\u6548\u7684\uff0c\u56e0\u6b64\u5728\u8fd9\u4e2a\u9636\u6bb5\u6ca1\u6709\u4ec0\u4e48\u9700\u8981\u7279\u522b\u63a7\u5236\u7684\u5185\u5bb9\u3002</p> <ol> <li>\u6307\u4ee4\u8bd1\u7801/\u8bfb\u5bc4\u5b58\u5668\u5806\uff1a</li> </ol> <p>\u5728RISC-V\u6307\u4ee4\u683c\u5f0f\u4e2d\u4e24\u4e2a\u6e90\u5bc4\u5b58\u5668\u603b\u662f\u4f4d\u4e8e\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u5728\u8fd9\u4e2a\u9636\u6bb5\u4e5f\u6ca1\u6709\u4ec0\u4e48\u9700\u8981\u7279\u522b\u63a7\u5236\u7684\u5185\u5bb9\u3002</p> <ol> <li>\u6267\u884c/\u5730\u5740\u8ba1\u7b97\uff1a</li> </ol> <p>\u8981\u8bbe\u7f6e\u7684\u4fe1\u53f7\u662f <code>ALUOp</code> \u548c <code>ALUSrc</code> ,\u8fd9\u4e2a\u4fe1\u53f7\u9009\u62e9ALU\u64cd\u4f5c\uff0c\u5e76\u5c06\u8bfb\u6570\u636e2\u6216\u8005\u7b26\u53f7\u6269\u5c55\u7684\u7acb\u5373\u6570\u4f5c\u4e3aALU\u7684\u8f93\u5165\u3002</p> <ol> <li>\u5b58\u50a8\u5668\u8bbf\u95ee\uff1a</li> </ol> <p>\u672c\u9636\u6bb5\u8981\u8bbe\u7f6e\u7684\u63a7\u5236\u7ebf\u662f <code>Branch</code>\u3001 <code>MemRead</code> \u548c <code>MemWrite</code>\u3002\u8fd9\u4e9b\u4fe1\u53f7\u5206\u522b\u7531\u76f8\u7b49\u5219\u5206\u652f\u3001\u52a0\u8f7d\u548c\u5b58\u50a8\u6307\u4ee4\u8bbe\u7f6e\u3002\u9664\u975e\u63a7\u5236\u7535\u8def\u6807\u793a\u8fd9\u662f\u4e00\u6761\u5206\u652f\u6307\u4ee4\u5e76\u4e14ALU\u7684\u8f93\u51fa\u4e3a0,\u5426\u5219\u5c06\u9009\u62e9\u7ebf\u6027\u5730\u5740\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u4f5c\u4e3a <code>PCSrc</code> \u4fe1\u53f7\u3002</p> <ol> <li>\u5199\u56de\uff1a</li> </ol> <p>\u4e24\u6761\u63a7\u5236\u7ebf\u662f <code>MemtoReg</code> \u548c <code>RegWrite</code> , <code>MemtoReg</code> \u51b3\u5b9a\u662f\u5c06ALU\u7ed3\u679c\u8fd8\u662f\u5c06\u5b58\u50a8\u5668\u503c\u53d1\u9001\u5230\u5bc4\u5b58\u5668\u5806\u4e2d\uff0c<code>RegWrite</code> \u5199\u5165\u6240\u9009\u503c\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%204/#data-hazard-forwarding","title":"Data Hazard : forwarding","text":"<p>\u4e24\u5bf9\u5192\u9669\u7684\u6761\u4ef6 : </p> <pre><code>1a. EX/MEM.RegisterRd = ID/EX.RegisterRs1\n1b. EX/MEM.RegisterRd = ID/EX.RegisterRs2\n2a. MEM/WB.RegisterRd = ID/EX.RegisterRs1\n2b. MEM/WB.RegisterRd = ID/EX.RegisterRs2\n</code></pre> <p>\u56e0\u4e3a\u5e76\u4e0d\u662f\u6240\u6709\u7684\u6307\u4ee4\u90fd\u4f1a\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7b56\u7565\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u5b83\u6709\u65f6\u4f1a\u5728\u4e0d\u5e94\u8be5\u524d\u9012\u7684\u65f6\u5019\u4e5f\u5c06\u6570\u636e\u524d\u9012\u51fa\u53bb\u3002\u4e00\u79cd\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u68c0\u67e5 <code>RegWrite</code> \u4fe1\u53f7\u662f\u5426\u662f\u6709\u6548\u7684\uff1a\u68c0\u67e5\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u5728 <code>EX</code> \u548c <code>MEM</code> \u9636\u6bb5\u7684 <code>WB</code> \u63a7\u5236\u5b57\u6bb5\u4ee5\u786e\u5b9a <code>RegWrite</code> \u4fe1\u53f7\u662f\u5426\u6709\u6548\u3002</p> <p>\u53ef\u4ee5\u4ece\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u83b7\u5f97\u6570\u636e\u800c\u975e\u7b49\u5f85 <code>WB</code> \u9636\u6bb5\u5199\u5165\u5bc4\u5b58\u5668\u5806\u3002\u56e0\u6b64\uff0c\u53ea\u8981\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4fdd\u5b58\u4e86\u9700\u8981\u88ab\u524d\u9012\u7684\u6570\u636e\uff0c\u540e\u7eed\u7684\u6307\u4ee4\u5c31\u53ef\u4ee5\u5f97\u5230\u6240\u9700\u7684\u6570\u636e\u3002</p>"},{"location":"Computer_Science/CO/Chapter%204/#with-forwarding-version","title":"with forwarding version(\u793a\u610f\u56fe | \u672a\u52a0\u7acb\u5373\u6570\u7248)","text":""},{"location":"Computer_Science/CO/Chapter%204/#ex-hazard","title":"EX hazard","text":"<pre><code>if (EX/MEM.RegWrite\nand (EX/MEM.RegisterRd \u2260 0)\nand (EX/MEM.RegisterRd = ID/EX.RegisterRs1)) ForwardA = 10\n\nif (EX/MEM.RegWrite\nand (EX/MEM.RegisterRd \u2260 0)\nand (EX/MEM.RegisterRd = ID/EX.RegisterRs2)) ForwardB = 10\n</code></pre>"},{"location":"Computer_Science/CO/Chapter%204/#mem-hazard","title":"MEM hazard","text":"<p>\u4e00\u79cd\u590d\u6742\u7684\u6f5c\u5728\u6570\u636e\u5192\u9669\u662f\u5728 <code>WB</code> \u9636\u6bb5\u6307\u4ee4\u7684\u7ed3\u679c\u3001 <code>MEM</code> \u9636\u6bb5\u6307\u4ee4\u7684\u7ed3\u679c\u548c <code>ALU</code> \u9636\u6bb5\u6307\u4ee4\u7684\u6e90\u64cd\u4f5c\u6570\u4e4b\u95f4\u53d1\u751f\u7684\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\u5bf9\u4e00\u7ec4\u6570\u636e\u505a\u6c42\u548c\u64cd\u4f5c\u65f6\uff0c\u4e00\u7cfb\u5217\u7684\u6307\u4ee4\u5c06\u4f1a\u8bfb\u548c\u5199\u4e00\u4e2a\u76f8\u540c\u7684\u5bc4\u5b58\u5668\uff1a</p> <pre><code>add x1,x1,x2\nadd x1,x1,x3\nadd x1,x1,x4\n......\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u5e94\u8be5\u662f\u6765\u81ea <code>MEM</code> \u9636\u6bb5\u524d\u9012\u7684\u6570\u636e\uff0c\u56e0\u4e3a <code>MEM</code> \u9636\u6bb5\u4e2d\u7684\u7ed3\u679c\u5c31\u662f\u6700\u8fd1\u7684\u7ed3\u679c\u3002\u56e0\u6b64\uff0c<code>MEM</code> \u5192\u9669\u7684\u63a7\u5236\u5e94\u8be5\u662f:</p> <pre><code>if (MEM/WB.RegWrite\nand (MEM/WB.RegisterRd \u2260 0)\nand not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRs1))\nand (MEM/WB.RegisterRd = ID/EX.RegisterRs1)) ForwardA = 01\n\nif (MEM/WB.RegWrite\nand (MEM/WB.RegisterRd \u2260 0)\nand not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRs2))\nand (MEM/WB.RegisterRd = ID/EX.RegisterRs2)) ForwardB = 01\n</code></pre>"},{"location":"Computer_Science/CO/Chapter%204/#with-alusrc-mux-version","title":"with ALUSrc MUX version","text":""},{"location":"Computer_Science/CO/Chapter%204/#stall-ld-hazard","title":"Stall( <code>ld</code> Hazard)","text":"<pre><code>if (ID/EX.MemRead and\n((ID/EX.RegisterRd = IF/ID.RegisterRs1) or\n(ID/EX.RegisterRd = IF/ID.RegisterRs2)))\nstall the pipeline\n</code></pre> <p>\u7a7a\u6307\u4ee4</p> <p>\u89e3\u9664 <code>EX</code>\u3001<code>MEM</code>\u548c<code>WB</code> \u9636\u6bb5\u7684\u4e03\u4e2a\u63a7\u5236\u4fe1\u53f7(\u5c06\u5b83\u4eec\u8bbe\u7f6e\u4e3a0)\u5c31\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u201c\u6ca1\u6709\u4efb\u4f55\u64cd\u4f5c\u201d\u7684\u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u7a7a\u6307\u4ee4\u3002</p>"},{"location":"Computer_Science/CO/Chapter%204/#branch","title":"\u63a7\u5236\u5192\u9669(branch)","text":"<p>\u200b   \u963b\u585e\u6d41\u6c34\u7ebf\u76f4\u5230\u5206\u652f\u5b8c\u6210\u7684\u7b56\u7565\u975e\u5e38\u8017\u65f6\u3002\u4e00\u79cd\u63d0\u5347\u5206\u652f\u963b\u585e\u6548\u7387\u7684\u65b9\u6cd5\u662f\u9884\u6d4b\u6761\u4ef6\u5206\u652f\u4e0d\u53d1\u751f\u5e76\u6301\u7eed\u6267\u884c\u987a\u5e8f\u6307\u4ee4\u6d41\u3002\u4e00\u65e6\u6761\u4ef6\u5206\u652f\u53d1\u751f\uff0c\u5df2\u7ecf\u88ab\u8bfb\u53d6\u548c\u8bd1\u7801\u7684\u6307\u4ee4\u5c31\u5c06\u88ab\u4e22\u5f03\uff0c\u6d41\u6c34\u7ebf\u7ee7\u7eed\u4ece\u5206\u652f\u76ee\u6807\u5904\u5f00\u59cb\u6267\u884c\u3002\u5982\u679c\u6761\u4ef6\u5206\u652f\u4e0d\u53d1\u751f\u7684\u6982\u7387\u662f50%,\u540c\u65f6\u4e22\u5f03\u6307\u4ee4\u7684\u4ee3\u4ef7\u53c8\u5f88\u5c0f\uff0c\u90a3\u4e48\u8fd9\u79cd\u4f18\u5316\u65b9\u5f0f\u53ef\u4ee5\u51cf\u5c11\u4e00\u534a\u7531\u63a7\u5236\u5192\u9669\u5e26\u6765\u7684\u4ee3\u4ef7\u3002</p> <p>\u4e22\u5f03\u6307\u4ee4\u9700\u8981\u6539\u53d8\u5f53\u5206\u652f\u5230\u8fbe <code>MEM</code> \u9636\u6bb5\u65f6 <code>IF</code>\u3001<code>ID</code>\u548c<code>EX</code> \u9636\u6bb5\u7684\u4e09\u6761\u6307\u4ee4\u3002\u800c\u5728\u52a0\u8f7d-\u4f7f\u7528\u7684\u6570\u636e\u5192\u9669\u4e2d\uff0c\u53ea\u9700\u8981\u5c06 <code>ID</code> \u9636\u6bb5\u7684\u63a7\u5236\u4fe1\u53f7\u53d8\u6210 0 \u5e76\u4e14\u5c06\u8be5\u9636\u6bb5\u7684\u6307\u4ee4\u4ece\u6d41\u6c34\u7ebf\u4e2d\u8fc7\u6ee4\u51fa\u53bb\u5373\u53ef\u3002</p> <p>\u4ed4\u7ec6\u9605\u8bfb...</p> <pre><code>    \u4e00\u79cd\u63d0\u5347\u6761\u4ef6\u5206\u652f\u6027\u80fd\u7684\u65b9\u5f0f\u662f\u51cf\u5c11\u53d1\u751f\u5206\u652f\u65f6\u6240\u9700\u7684\u4ee3\u4ef7\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5047\u5b9a\u5206\u652f\u6240\u9700\u7684\u4e0b\u4e00PC\u503c\u5728 MEM \u9636\u6bb5\u624d\u80fd\u88ab\u83b7\u53d6\uff0c\u4f46\u5982\u679c\u6211\u4eec\u5c06\u6d41\u6c34\u7ebf\u4e2d\u7684\u6761\u4ef6\u5206\u652f\u6307\u4ee4\u63d0\u65e9\u79fb\u52a8\u6267\u884c\uff0c\u5c31\u53ef\u4ee5\u5237\u65b0\u66f4\u5c11\u7684\u6307\u4ee4\u3002\u8981\u5c06\u5206\u652f\u51b3\u5b9a\u5411\u524d\u79fb\u52a8\uff0c\u9700\u8981\u4e24\u4e2a\u64cd\u4f5c\u63d0\u65e9\u53d1\u751f:\u8ba1\u7b97\u5206\u652f\u76ee\u6807\u5730\u5740\u548c\u5224\u65ad\u5206\u652f\u6761\u4ef6\u3002\u5176\u4e2d\uff0c\u5c06\u5206\u652f\u5730\u5740\u63d0\u524d\u8fdb\u884c\u8ba1\u7b97\u662f\u76f8\u5bf9\u7b80\u5355\u7684\u3002\u5728IF/ID\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u5df2\u7ecf\u5f97\u5230\u4e86PC\u503c\u548c\u7acb\u5373\u6570\u5b57\u6bb5\uff0c\u6240\u4ee5\u53ea\u9700\u5c06\u5206\u652f\u5730\u5740\u4eceEX\u9636\u6bb5\u79fb\u52a8\u5230ID\u9636\u6bb5\u5373\u53ef\u3002\u5f53\u7136\uff0c\u5206\u652f\u5730\u5740\u7684\u76ee\u6807\u8ba1\u7b97\u5c06\u4f1a\u5728\u6240\u6709\u6307\u4ee4\u4e2d\u90fd\u6267\u884c\uff0c\u4f46\u53ea\u6709\u5728\u9700\u8981\u65f6\u624d\u4f1a\u88ab\u4f7f\u7528\u3002\n    \u56f0\u96be\u7684\u90e8\u5206\u662f\u5206\u652f\u51b3\u5b9a\u672c\u8eab\u3002\u5bf9\u4e8e\u76f8\u7b49\u65f6\u8df3\u8f6c\u6307\u4ee4\uff0c\u9700\u8981\u5728ID\u9636\u6bb5\u6bd4\u8f83\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002\u76f8\u7b49\u7684\u5224\u65ad\u65b9\u6cd5\u53ef\u4ee5\u662f\u5148\u5c06\u76f8\u5e94\u4f4d\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c\uff0c\u518d\u5bf9\u7ed3\u679c\u6309\u4f4d\u8fdb\u884c\u6216\u64cd\u4f5c\u3002\u5c06\u5206\u652f\u68c0\u6d4b\u79fb\u52a8\u5230ID\u9636\u6bb5\u8fd8\u9700\u8981\u989d\u5916\u7684\u524d\u9012\u548c\u5192\u9669\u68c0\u6d4b\u786c\u4ef6\uff0c\u56e0\u4e3a\u5206\u652f\u53ef\u80fd\u4f9d\u8d56\u8fd8\u5728\u6d41\u6c34\u7ebf\u4e2d\u7684\u7ed3\u679c\uff0c\u5728\u4f18\u5316\u540e\u4f9d\u7136\u8981\u4fdd\u8bc1\u8fd0\u884c\u6b63\u786e\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u5b9e\u73b0\u76f8\u7b49\u65f6\u8df3\u8f6c\u6307\u4ee4(\u6216\u8005\u4e0d\u7b49\u65f6\u8df3\u8f6c\u6307\u4ee4)\uff0c\u9700\u8981\u5728ID\u9636\u6bb5\u5c06\u7ed3\u679c\u524d\u9012\u7ed9\u76f8\u7b49\u6d4b\u8bd5\u903b\u8f91\u3002\u8fd9\u91cc\u5b58\u5728\u4e24\u4e2a\u590d\u6742\u7684\u56e0\u7d20:\n    1.\u5728ID\u9636\u6bb5\u9700\u8981\u5c06\u6307\u4ee4\u8bd1\u7801\uff0c\u51b3\u5b9a\u662f\u5426\u9700\u8981\u5c06\u6307\u4ee4\u65c1\u8def\u81f3\u76f8\u7b49\u68c0\u6d4b\u5355\u5143\uff0c\u5e76\u4e14\u5b8c\u6210\u76f8\u7b49\u6d4b\u8bd5\u4ee5\u9632\u6307\u4ee4\u662f\u4e00\u6761\u5206\u652f\u6307\u4ee4\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06PC\u8bbe\u7f6e\u4e3a\u5206\u652f\u76ee\u6807\u5730\u5740\u3002\u5bf9\u5206\u652f\u6307\u4ee4\u7684\u64cd\u4f5c\u6570\u8fdb\u884c\u524d\u9012\u7684\u64cd\u4f5c\u539f\u5148\u662f\u7531ALU\u524d\u9012\u903b\u8f91\u5904\u7406\u7684\uff0c\u4f46\u662f\u5728ID\u9636\u6bb5\u5f15\u5165\u76f8\u7b49\u68c0\u6d4b\u5355\u5143\u540e\u5c31\u9700\u8981\u6dfb\u52a0\u65b0\u7684\u524d\u9012\u903b\u8f91\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u65c1\u8def\u83b7\u5f97\u7684\u5206\u652f\u6307\u4ee4\u7684\u6e90\u64cd\u4f5c\u6570\u65e2\u53ef\u4ee5\u4eceEX/MEM\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u83b7\u5f97\uff0c\u4e5f\u53ef\u4ee5\u4eceMEM/WB\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u83b7\u5f97\u3002\n    2.\u5728ID\u9636\u6bb5\u5206\u652f\u6bd4\u8f83\u6240\u9700\u7684\u503c\u53ef\u80fd\u5728\u4e4b\u540e\u624d\u4f1a\u4ea7\u751f\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u4ea7\u751f\u6570\u636e\u5192\u9669\uff0c\u6240\u4ee5\u6307\u4ee4\u505c\u987f\u4e5f\u662f\u5fc5\u9700\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u6761 ALU\u6307\u4ee4\u6070\u597d\u5728\u5206\u652f\u6307\u4ee4\u4e4b\u524d\uff0c\u5e76\u4e14\u8fd9\u6761 ALU \u6307\u4ee4\u4ea7\u751f\u6761\u4ef6\u5206\u652f\u68c0\u6d4b\u65f6\u6240\u9700\u7684\u64cd\u4f5c\u6570\uff0c\u90a3\u4e48\u4e00\u6b21\u6307\u4ee4\u505c\u987f\u5c31\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3aALU\u6307\u4ee4\u7684EX\u9636\u6bb5\u5c06\u53d1\u751f\u5728\u5206\u652f\u6307\u4ee4\u7684ID\u9636\u6bb5\u4e4b\u540e\u3002\u53c8\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u6761\u52a0\u8f7d\u6307\u4ee4\u6070\u597d\u5728\u6761\u4ef6\u5206\u652f\u6307\u4ee4\u4e4b\u540e\uff0c\u5e76\u4e14\u6761\u4ef6\u5206\u652f\u6307\u4ee4\u4f9d\u8d56\u52a0\u8f7d\u6307\u4ee4\u7684\u7ed3\u679c\uff0c\u90a3\u4e48\u4e24\u4e2a\u65f6\u949f\u5468\u671f\u7684\u505c\u987f\u5c31\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u52a0\u8f7d\u6307\u4ee4\u7684\u7ed3\u679c\u8981\u5728 MEM \u9636\u6bb5\u7684\u6700\u540e\u624d\u80fd\u4ea7\u751f\uff0c\u4f46\u662f\u5728\u5206\u652f\u6307\u4ee4\u7684ID\u9636\u6bb5\u7684\u5f00\u59cb\u5c31\u9700\u8981\u4e86\u3002\n    \u5c3d\u7ba1\u8fd9\u5f88\u56f0\u96be\uff0c\u4f46\u662f\u5c06\u6761\u4ef6\u5206\u652f\u6307\u4ee4\u7684\u6267\u884c\u79fb\u52a8\u5230 ID \u9636\u6bb5\u7684\u786e\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4f18\u5316\uff0c\u56e0\u4e3a\u8fd9\u5c06\u5206\u652f\u53d1\u751f\u65f6\u7684\u4ee3\u4ef7\u51cf\u8f7b\u81f3\u53ea\u6709\u4e00\u6761\u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u5206\u652f\u53d1\u751f\u65f6\u6b63\u5728\u53d6\u7684\u90a3\u6761\u6307\u4ee4\u3002\n    \u4e3a\u4e86\u6e05\u9664 IF \u9636\u6bb5\u7684\u6307\u4ee4\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u6761\u79f0\u4e3a IF.Flush \u7684\u63a7\u5236\u7ebf\uff0c\u5b83\u5c06 IF/IF \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\u7684\u6307\u4ee4\u5b57\u6bb5\u8bbe\u7f6e\u4e3a 0 \u3002\u5c06\u5bc4\u5b58\u5668\u6e05\u7a7a\u7684\u7ed3\u679c\u662f\u5c06\u5df2\u7ecf\u53d6\u5230\u7684\u6307\u4ee4\u8f6c\u6362\u6210\u4e00\u6761 nop \u6307\u4ee4\uff0c\u8be5\u6307\u4ee4\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u4e5f\u4e0d\u6539\u53d8\u4efb\u4f55\u72b6\u6001\u3002\n</code></pre>"},{"location":"Computer_Science/CO/Chapter%204/#_5","title":"\u52a8\u6001\u5206\u652f\u9884\u6d4b","text":"<p>\u4e00\u79cd\u65b9\u6cd5\u662f\u68c0\u67e5\u6307\u4ee4\u4e2d\u7684\u5730\u5740\uff0c\u67e5\u770b\u4e0a\u4e00\u6b21\u8be5\u6307\u4ee4\u6267\u884c\u65f6\u6761\u4ef6\u5206\u652f\u662f\u5426\u53d1\u751f\u4e86\u8df3\u8f6c\uff0c\u5982\u679c\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u5219\u4ece\u4e0a\u4e00\u6b21\u6267\u884c\u7684\u5730\u5740\u4e2d\u53d6\u51fa\u6307\u4ee4\u3002\u8fd9\u79cd\u6280\u672f\u79f0\u4e3a\u52a8\u6001\u5206\u652f\u9884\u6d4b\u3002 \u200b\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u79cd\u5b9e\u73b0\u65b9\u6848\u662f\u91c7\u7528\u5206\u652f\u9884\u6d4b\u7f13\u5b58\u6216\u5206\u652f\u5386\u53f2\u8868\uff0c\u5206\u652f\u9884\u6d4b\u7f13\u5b58\u662f\u4e00\u5757\u6309\u7167\u5206\u652f\u6307\u4ee4\u7684\u4f4e\u4f4d\u5730\u5740\u5b9a\u4f4d\u7684\u5c0f\u5bb9\u91cf\u5b58\u50a8\u5668\u3002\u8fd9\u5757\u5b58\u50a8\u5668\u5305\u542b\u4e86\u4e00\u4e2a\u6bd4\u7279\uff0c\u7528\u4e8e\u8868\u660e\u4e00\u4e2a\u5206\u652f\u6700\u8fd1\u662f\u5426\u53d1\u751f\u4e86\u8df3\u8f6c\u3002</p> \u5faa\u73af\u4e0e\u9884\u6d4b <p>\u73b0\u5728\u8003\u8651\u4e00\u4e2a\u5faa\u73af\u5206\u652f\uff0c\u5b83\u5728\u4e00\u884c\u4ee3\u7801\u4e2d\u53d1\u751f\u4e869\u6b21\u8df3\u8f6c\uff0c\u4e4b\u540e\u4ea7\u751f1\u6b21\u672a\u8df3\u8f6c\u3002\u5047\u5b9a\u8fd9\u4e2a\u5206\u652f\u7684\u9884\u6d4b\u4f4d\u5728\u9884\u6d4b\u7f13\u5b58\u4e2d\uff0c\u8bf7\u8ba1\u7b97\u8fd9\u6761\u5206\u652f\u6307\u4ee4\u7684\u9884\u6d4b\u6b63\u786e\u7387\u3002</p> Answer <p>\u7a33\u5b9a\u72b6\u6001\u7684\u9884\u6d4b\u884c\u4e3a\u4f1a\u5728\u7b2c\u4e00\u6b21\u4ee5\u53ca\u6700\u540e\u4e00\u6b21\u9884\u6d4b\u5faa\u73af\u4e2d\u9884\u6d4b\u5931\u6548\u3002\u5176\u4e2d\uff0c\u6700\u540e\u4e00\u6b21\u8fed\u4ee3\u7684\u9884\u6d4b\u5931\u6548\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u56e0\u4e3a\u6b64\u65f6\u8be5\u5206\u652f\u7684\u9884\u6d4b\u4f4d\u4f1a\u8bbe\u7f6e\u4e3a\u8df3\u8f6c\uff0c\u56e0\u4e3a\u5206\u652f\u5728\u8fd9\u884c\u4ee3\u7801\u4e0a\u5df2\u7ecf\u53d1\u751f\u4e869\u6b21\u8df3\u8f6c\u3002\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u65f6\u5206\u652f\u9884\u6d4b\u9519\u8bef\u662f\u56e0\u4e3a\u5728\u5faa\u73af\u7684\u4e0a\u4e00\u6b21\u8fed\u4ee3\u6267\u884c\u4e2d\u8be5\u9884\u6d4b\u4f4d\u88ab\u8bbe\u7f6e\u4e3a\u4e0d\u8df3\u8f6c\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u5b9e\u9645\u53d1\u751f\u8df3\u8f6c\u7387\u4e3a90%\u7684\u5206\u652f\u7684\u5206\u652f\u9884\u6d4b\u6b63\u786e\u7387\u53ea\u670980%(2\u6b21\u4e0d\u6b63\u786e\u7684\u9884\u6d4b\uff0c8\u6b21\u6b63\u786e\u9884\u6d4b)\u3002</p> <p></p> <p>NOTE : 2\u4f4d\u9884\u6d4b\u673a\u5236\u7684\u72b6\u6001\u8f6c\u6362\u56fe\u3002\u901a\u8fc7\u4f7f\u75282\u4f4d\u800c\u4e0d\u662f1\u4f4d\u7684\u9884\u6d4b\u4f4d\uff0c\u5728\u4e00\u4e2a\u5206\u652f\u7ecf\u5e38\u53d1\u751f\u8df3\u8f6c\u6216\u7ecf\u5e38\u4e0d\u8df3\u8f6c\u7684\u60c5\u51b5\u4e0b(\u5927\u591a\u6570\u5206\u652f\u90fd\u662f\u8fd9\u6837\u7684)\u53ea\u4f1a\u53d1\u751f\u4e00\u6b21\u9884\u6d4b\u5931\u6548\u30022\u4f4d\u9884\u6d4b\u4f4d\u5728\u7cfb\u7edf\u4e2d\u53ef\u4ee5\u88ab\u7f16\u7801\u4e3a\u56db\u4e2a\u72b6\u6001\u30022\u4f4d\u9884\u6d4b\u673a\u5236\u662f\u57fa\u4e8e\u8ba1\u6570\u5668\u7684\u9884\u6d4b\u5668\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8be5\u9884\u6d4b\u5668\u5728\u5206\u652f\u8df3\u8f6c\u65f6\u52a01\uff0c\u5728\u5206\u652f\u4e0d\u8df3\u8f6c\u65f6\u51cf1\uff0c\u5e76\u4e14\u4f7f\u7528\u8868\u793a\u8303\u56f4\u7684\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u9884\u6d4b\u5206\u652f\u8df3\u8f6c\u4e0e\u4e0d\u8df3\u8f6c\u4e4b\u95f4\u7684\u5206\u754c\u70b9\u3002</p>"},{"location":"Computer_Science/CO/Chapter%204/#exceptions-and-interrupts","title":"Exceptions and Interrupts","text":""},{"location":"Computer_Science/CO/Chapter%204/#exceptions","title":"Exceptions","text":"<p>\u200b\u5728\u76ee\u524d\u6240\u8bb2\u8fc7\u7684\u5b9e\u73b0\u4e2d\uff0c\u53ea\u5b58\u5728\u4e24\u79cd\u4f8b\u5916\u7c7b\u578b\uff1a\u672a\u5b9a\u4e49\u6307\u4ee4\u548c\u786c\u4ef6\u6545\u969c\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u5728\u6307\u4ee4 <code>add x1,x2,x1</code> \u6267\u884c\u65f6\u51fa\u73b0\u786c\u4ef6\u6545\u969c\u3002\u5f53\u4f8b\u5916\u53d1\u751f\u65f6\uff0c\u5904\u7406\u5668\u5fc5\u987b\u6267\u884c\u7684\u57fa\u672c\u52a8\u4f5c\u662f\uff1a\u5728\u7cfb\u7edf\u4f8b\u5916\u7a0b\u5e8f\u8ba1\u6570\u5668(Supervisor Exception Program Counter,SEPC)\u4e2d\u4fdd\u5b58\u53d1\u751f\u4f8b\u5916\u7684\u6307\u4ee4\u5730\u5740\uff0c\u540c\u65f6\u5c06\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u3002 \u200b\u4e4b\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u505a\u51fa\u76f8\u5e94\u52a8\u4f5c\uff0c\u5305\u62ec\u4e3a\u7528\u6237\u7a0b\u5e8f\u63d0\u4f9b\u7cfb\u7edf\u670d\u52a1\uff0c\u786c\u4ef6\u6545\u969c\u65f6\u6267\u884c\u9884\u5148\u5b9a\u4e49\u597d\u7684\u64cd\u4f5c\uff0c\u6216\u8005\u505c\u6b62\u5f53\u524d\u7a0b\u5e8f\u7684\u6267\u884c\u5e76\u62a5\u544a\u9519\u8bef\u3002\u5b8c\u6210\u4f8b\u5916\u5904\u7406\u7684\u6240\u6709\u64cd\u4f5c\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528SEPC\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9\u91cd\u542f\u7a0b\u5e8f\u7684\u6b63\u5e38\u6267\u884c\u3002\u53ef\u80fd\u662f\u7ee7\u7eed\u6267\u884c\u539f\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u80fd\u662f\u7ec8\u6b62\u7a0b\u5e8f\u3002</p> <p>\u200b\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4f8b\u5916\u5904\u7406\uff0c\u9664\u4e86\u5f15\u53d1\u4f8b\u5916\u7684\u6307\u4ee4\u5916\uff0c\u8fd8\u5fc5\u987b\u83b7\u5f97\u4f8b\u5916\u53d1\u751f\u7684\u539f\u56e0\u3002\u76ee\u524d\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u6765\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf\u3002</p> <ol> <li>(RISC-V)\u7cfb\u7edf\u4f8b\u5916\u539f\u56e0\u5bc4\u5b58\u5668(Supervisor Exception Cause Register\uff0cSCAUSE)\uff0c\u8be5\u5bc4\u5b58\u5668\u4e2d\u8bb0\u5f55\u4e86\u4f8b\u5916\u539f\u56e0\u3002</li> </ol> <p>\u4e3a\u6240\u6709\u4f8b\u5916\u63d0\u4f9b\u7edf\u4e00\u7684\u5165\u53e3\u5730\u5740\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u89e3\u6790\u72b6\u6001\u5bc4\u5b58\u5668\u6765\u786e\u5b9a\u4f8b\u5916\u539f\u56e0\u3002</p> <ol> <li>\u5411\u91cf\u5f0f\u4e2d\u65ad(vectored interrupt)\u3002\u8be5\u65b9\u6cd5\u7528\u57fa\u5740\u5bc4\u5b58\u5668\u52a0\u4e0a\u4f8b\u5916\u539f\u56e0(\u4f5c\u4e3a\u504f\u79fb)\u4f5c\u4e3a\u76ee\u6807\u5730\u5740\u6765\u5b8c\u6210\u63a7\u5236\u6d41\u8f6c\u6362\u3002</li> </ol> <p>\u6bcf\u4e2a\u4f8b\u5916\u5165\u53e3\u9700\u8981\u63d0\u4f9b\u6bd4\u598232\u5b57\u8282\u62168\u6761\u6307\u4ee4\u5927\u5c0f\u7684\u533a\u57df\uff0c\u4f9b\u64cd\u4f5c\u7cfb\u7edf\u8bb0\u5f55\u4f8b\u5916\u539f\u56e0\u5e76\u8fdb\u884c\u7b80\u5355\u5904\u7406\u3002</p>"},{"location":"Computer_Science/CO/Chapter%204/#parallelism-via-instructions-maybe","title":"Parallelism via Instructions(\u4e86\u89e3 maybe)","text":"<p>Pipelining exploits the potential parallelism among instructions. This parallelism is called, naturally enough, instruction-level parallelism (ILP).</p> <p>\u4e24\u79cd\u529e\u6cd5:</p> <ol> <li>increasing the depth of the pipeline to overlap more instructions</li> <li>launch multiple instructions in every pipeline stage</li> </ol>"},{"location":"Computer_Science/CO/Chapter%204/#static-multiple-issue","title":"Static Multiple Issue","text":"Simple Multiple-Issue Code Scheduling <p>How would this loop be scheduled on a static two-issue pipeline for RISC-V?</p> <pre><code>loop: ld x31, 0(x20) // x31 = array element\nadd x31, x31, x21 // add scalar in x21\nsd x31, 0(x20) // store result\naddi x20, x20, -8 // decrement pointer\nblt x22, x20, Loop // compare to loop limits, branch if x20 &gt; x22\n</code></pre> Answer ALU or branch instruction Data transfer instruction Clock cycle Loop: ld x31, 0(x20) 1 addi x20, x20, -8 2 add x31, x31, x21 3 blt x22, x20, Loop sd x31, 8(x20) 4"},{"location":"Computer_Science/CO/Chapter%204/#dynamic-multiple-issue","title":"Dynamic Multiple-Issue","text":"<p>\u4e71\u5e8f\u591a\u53d1\u987a\u5e8f\u6267\u884c\u5148\u90fd\u8dd1\u4e86\u4f46\u662f\u5199\u5230\u5bc4\u5b58\u5668\u91cc\u9762\u7684\u65f6\u5019\u9700\u8981\u987a\u5e8f</p> <p>\u6bd4\u5982ALU\u8ba1\u7b97\u7ed3\u679cpush\u5230\u961f\u5217\u91cc\u9762\u518d\u53bb\u53d6</p>"},{"location":"Computer_Science/CO/Chapter%205/","title":"chapter 5","text":"<p> \u7ea6 7187 \u4e2a\u5b57  26 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 36 \u5206\u949f</p>"},{"location":"Computer_Science/CO/Chapter%205/#principle-of-locality","title":"principle of locality","text":""},{"location":"Computer_Science/CO/Chapter%205/#temporal-locality-locality-in-time","title":"Temporal locality (locality in time)","text":"<p>\u65f6\u95f4\u5c40\u90e8\u6027\uff1a\u8be5\u539f\u7406\u8868\u660e\u5982\u679c\u67d0\u4e2a\u6570\u636e\u9879\u88ab\u8bbf\u95ee\uff0c\u90a3\u4e48\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5b83\u53ef\u80fd\u518d\u6b21\u88ab\u8bbf\u95ee\u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#spatial-locality-locality-in-space","title":"Spatial locality (locality in space)","text":"<p>\u7a7a\u95f4\u5c40\u90e8\u6027\uff1a\u8be5\u539f\u7406\u8868\u660e\u5982\u679c\u67d0\u4e2a\u6570\u636e\u9879\u88ab\u8bbf\u95ee\uff0c\u4e0e\u5b83\u5730\u5740\u76f8\u90bb\u7684\u6570\u636e\u9879\u53ef\u80fd\u5f88\u5feb\u4e5f\u5c06\u88ab\u8bbf\u95ee\u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#memory-hierarchy","title":"memory hierarchy","text":"<ul> <li>\u5757\u6216\u884c\uff1a\u5728\u76f8\u90bb\u4e24\u5c42\u4e4b\u95f4\u8fdb\u884c\u4fe1\u606f\u4ea4\u6362\u7684\u6700\u5c0f\u5355\u5143</li> <li>\u547d\u4e2d(hit)\uff1a\u5904\u7406\u5668\u6240\u9700\u7684\u6570\u636e\u5728\u672c\u5c42\u7684\u5b58\u50a8\u4e2d\u627e\u5230</li> <li>\u5931\u6548(miss)\uff1a\u5904\u7406\u5668\u6240\u9700\u7684\u6570\u636e\u6ca1\u6709\u5728\u672c\u5c42\u7684\u5b58\u50a8\u4e2d\u627e\u5230</li> <li>\u547d\u4e2d\u7387(hit rate\u6216hit ratio)\uff1a\u5728\u8bbf\u95ee\u672c\u5c42\u5b58\u50a8\u65f6\u547d\u4e2d\u7684\u6b21\u6570\u5360\u603b\u6b21\u6570\u7684\u6bd4\u4f8b\uff0c\u901a\u5e38\u4f5c\u4e3a\u5b58\u50a8\u5c42\u6b21\u7ed3\u6784\u7684\u6027\u80fd\u8861\u91cf\u6307\u6807\u4e4b\u4e00\u3002</li> <li>\u5931\u6548\u7387(missrate,\u53731-hit rate)\uff1a\u5728\u8bbf\u95ee\u672c\u5c42\u5b58\u50a8\u65f6\u5931\u6548\u7684\u6b21\u6570\u5360\u603b\u6b21\u6570\u7684\u6bd4\u4f8b\u3002</li> <li>\u547d\u4e2d\u65f6\u95f4(hit time)\uff1a\u8bbf\u95ee\u67d0\u4e2a\u5b58\u50a8\u5c42\u6b21\u6240\u9700\u7684\u65f6\u95f4\uff0c\u5305\u62ec\u5224\u65ad\u547d\u4e2d\u6216\u5931\u6548\u7684\u65f6\u95f4\u3002</li> <li>\u5931\u6548\u635f\u5931(miss penalty)\uff1a\u5c06\u6570\u636e\u5757\u4ece\u4e0b\u5c42\u5b58\u50a8\u590d\u5236\u81f3\u67d0\u5c42\u6240\u9700\u7684\u65f6\u95f4\uff0c\u5305\u62ec\u6570\u636e\u5757\u7684\u8bbf\u95ee\u65f6\u95f4\u3001\u4f20\u8f93\u65f6\u95f4\u3001\u5199\u5165\u76ee\u6807\u5c42\u7684\u65f6\u95f4\u548c\u5c06\u6570\u636e\u5757\u8fd4\u56de\u7ed9\u8bf7\u6c42\u8005\u7684\u65f6\u95f4\u3002</li> <li>\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e2d\uff0c\u5c42\u6b21\u5316\u5b58\u50a8\u662f\u771f\u5b9e\u5b58\u5728\u7684\u3002\u8fd9\u610f\u5473\u7740\u6570\u636e\u53ea\u6709\u5148\u5728\u7b2c<code>i+1</code>\u5c42\u51fa\u73b0\uff0c\u624d\u80fd\u5728\u7b2c<code>i</code>\u5c42\u51fa\u73b0\u3002</li> </ul>"},{"location":"Computer_Science/CO/Chapter%205/#memory-technologies","title":"Memory Technologies","text":""},{"location":"Computer_Science/CO/Chapter%205/#static-random-access-memory-sram","title":"static random access memory (SRAM)(\u6613\u5931\u6027)","text":"<p>\u200b   SRAM\u5b58\u50a8\u662f\u4e00\u79cd\u5b58\u50a8\u9635\u5217\u7ed3\u6784\u7684\u7b80\u5355\u96c6\u6210\u7535\u8def\uff0c\u901a\u5e38\u6709\u4e00\u4e2a\u8bfb\u5199\u7aef\u53e3\u3002\u867d\u7136\u8bfb\u5199\u64cd\u4f5c\u7684\u8bbf\u95ee\u65f6\u95f4\u4e0d\u540c\uff0c\u4f46\u5bf9\u4e8e\u4efb\u610f\u4f4d\u7f6e\u7684\u6570\u636e\uff0cSRAM\u7684\u8bbf\u95ee\u65f6\u95f4\u662f\u56fa\u5b9a\u7684\u3002 \u200b   SRAM\u4e0d\u9700\u8981\u5237\u65b0\u7535\u8def\uff0c\u6240\u4ee5\u8bbf\u95ee\u65f6\u95f4\u53ef\u4ee5\u548c\u5904\u7406\u5668\u7684\u65f6\u949f\u5468\u671f\u63a5\u8fd1\u3002\u4e3a\u9632\u6b62\u8bfb\u64cd\u4f5c\u65f6\u4fe1\u606f\u4e22\u5931\uff0c\u5178\u578b\u7684SRAM\u6bcf\u6bd4\u7279\u91c7\u75286\u4e2a\u62168\u4e2a\u6676\u4f53\u7ba1\u6765\u5b9e\u73b0\u3002\u5728\u5f85\u673a\u6a21\u5f0f\u4e0b\uff0cSRAM\u53ea\u9700\u8981\u6700\u5c0f\u7684\u529f\u7387\u6765\u4fdd\u6301\u7535\u8377\u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#dynamic-random-access-memory-dram","title":"dynamic random access memory (DRAM)(\u6613\u5931\u6027)","text":"<p>\u200b   \u5728SRAM\u4e2d\uff0c\u53ea\u8981\u63d0\u4f9b\u7535\u6e90\uff0c\u6570\u503c\u4f1a\u88ab\u4e00\u76f4\u4fdd\u5b58\u3002\u800c\u5728DRAM\u4e2d\uff0c\u4f7f\u7528\u7535\u5bb9\u4fdd\u5b58\u7535\u8377\u7684\u65b9\u5f0f\u6765\u5b58\u50a8\u6570\u636e\u3002\u91c7\u7528\u5355\u4e2a\u6676\u4f53\u7ba1\u6765\u8bbf\u95ee\u5b58\u50a8\u7684\u7535\u8377\uff0c\u6216\u8005\u8bfb\u53d6\u5b83\uff0c\u6216\u8005\u6539\u5199\u5b83\u3002DRAM\u7684\u6bcf\u4e2a\u6bd4\u7279\u4ec5\u4f7f\u7528\u5355\u4e2a\u6676\u4f53\u7ba1\u6765\u5b58\u50a8\u6570\u636e\u3002\u7531\u4e8eDRAM\u5728\u5355\u4e2a\u6676\u4f53\u7ba1\u4e0a\u5b58\u50a8\u7535\u8377\uff0c\u56e0\u6b64\u4e0d\u80fd\u957f\u4e45\u4fdd\u6301\u6570\u636e\uff0c\u5fc5\u987b\u8fdb\u884c\u5468\u671f\u6027\u7684\u5237\u65b0\u3002\u4e0eSRAM\u76f8\u6bd4\uff0c\u8fd9\u4e5f\u662f\u8be5\u7ed3\u6784\u88ab\u79f0\u4e3a\u52a8\u6001\u7684\u539f\u56e0\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%205/#flash-memory","title":"flash memory(\u975e\u6613\u5931\u6027)","text":"<p>\u95ea\u5b58\u662f\u4e00\u79cd\u7535\u53ef\u64e6\u9664\u7684\u53ef\u7f16\u7a0b\u53ea\u8bfb\u5b58\u50a8\u5668(Electrically Erasable Programmable Read-onlyMemory,EEPROM)\u3002</p> <p>\u4e0e\u78c1\u76d8\u548cDRAM\u4e0d\u540c\uff0c\u4f46\u4e0e\u5176\u4ed6EEPROM\u6280\u672f\u76f8\u4f3c\uff0c\u95ea\u5b58\u7684\u5199\u64cd\u4f5c\u4f1a\u5bf9\u5668\u4ef6\u672c\u8eab\u4ea7\u751f\u78e8\u635f\u3002\u4e3a\u5e94\u5bf9\u8fd9\u79cd\u9650\u5236\uff0c\u5927\u591a\u6570\u95ea\u5b58\u4ea7\u54c1\u90fd\u5305\u62ec\u4e00\u4e2a\u63a7\u5236\u5668\uff0c\u7528\u6765\u5c06\u53d1\u751f\u591a\u6b21\u5199\u7684\u5757\u91cd\u65b0\u6620\u5c04\u5230\u8f83\u5c11\u88ab\u5199\u7684\u5757\uff0c\u4ece\u800c\u4f7f\u5f97\u5199\u64cd\u4f5c\u5c3d\u91cf\u5206\u6563\u3002\u8be5\u6280\u672f\u88ab\u79f0\u4e3a\u8017\u635f\u5747\u8861(wearleveling)\u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#magnetic-disk","title":"magnetic disk","text":"<ul> <li>\u78c1\u9053(track)\uff1a\u78c1\u76d8\u8868\u9762\u4e0a\u5343\u540c\u5fc3\u5706\u4e2d\u7684\u4e00\u4e2a\u3002</li> <li>\u6247\u533a(sector)\uff1a\u78c1\u76d8\u78c1\u9053\u4e0a\u7684\u4e00\u6bb5\uff0c\u6247\u533a\u662f\u8bfb\u5199\u78c1\u76d8\u4fe1\u606f\u7684\u6700\u5c0f\u5355\u4f4d\u3002</li> <li>\u67f1\u9762(cylinder)\uff1a\u8868\u793a\u67d0\u78c1\u5934\u5728\u7ed9\u5b9a\u70b9\u80fd\u591f\u8bbf\u95ee\u5230\u7684\u6240\u6709\u78c1\u9053\u96c6\u5408\u3002</li> <li>\u5bfb\u9053(seek)\uff1a\u5c06\u8bfb\u5199\u5934\uff08\u78c1\u5934\uff09\u5b9a\u4f4d\u5230\u78c1\u76d8\u4e0a\u6b63\u786e\u7684\u78c1\u9053\u4e0a\u65b9\u7684\u8fc7\u7a0b\u3002</li> <li>\u5bfb\u9053\u65f6\u95f4(seek time)\uff1a\u5c06\u78c1\u5934\u79fb\u52a8\u5230\u6240\u9700\u78c1\u9053\u4e0a\u65b9\u7684\u65f6\u95f4\u3002</li> <li>\u65cb\u8f6c\u5ef6\u65f6\uff1a\u4e5f\u79f0\u4e3a\u65cb\u8f6c\u5ef6\u8fdf(rotational delay),\u5373\u78c1\u76d8\u4e0a\u6240\u9700\u6247\u533a\u65cb\u8f6c\u5230\u8bfb\u5199\u78c1\u5934\u4e0b\u7684\u65f6\u95f4\u3002\u901a\u5e38\u5047\u8bbe\u4e3a\u65cb\u8f6c\u534a\u5468\u7684\u65f6\u95f4\u3002</li> <li>\u4f20\u8f93\u65f6\u95f4(transfer time)\uff1a\u4f20\u8f93\u6570\u636e\u5757(block)\u7684\u65f6\u95f4\u3002</li> </ul> Question <p>512B sector, 15,000rpm, 4ms average seek time, 100 MB/s transfer rate, 0.2ms controller overhead, idle disk, what's average read time?</p> Answer <p>\\(4ms+\\frac{1}{2} \\times [1/\\frac{15000}{60}] + \\frac{512B}{100MB/s} + 0.2ms = 6.2 ms\\)</p>"},{"location":"Computer_Science/CO/Chapter%205/#direct-mapped-cache","title":"\u76f4\u63a5\u6620\u5c04( <code>direct mapped cache</code> )","text":"<p>\u76f4\u63a5\u6620\u5c04\u7684cache\u4f7f\u7528\u4e0b\u8ff0\u6620\u5c04\u65b9\u6cd5\u6765\u627e\u5230\u5bf9\u5e94\u7684\u6570\u636e\u5757</p> \\[(\u5757\u5730\u5740) mod (cache\u4e2d\u7684\u6570\u636e\u5757\u6570\u91cf)\\] \\[\u5757\u5730\u5740 = \\frac{\u5b57\u8282\u5730\u5740}{\u6bcf\u5757\u4e2d\u7684\u5b57\u8282\u6570}\\] <ul> <li>\u6807\u7b7e\uff1a\u5b58\u50a8\u5c42\u6b21\u4e2d\u7684\u8868\u9879\u4f4d\uff0c\u7528\u6765\u8bb0\u5f55\u5bf9\u5e94\u8bf7\u6c42\u5b57\u7684\u5730\u5740\u4fe1\u606f\uff0c\u4fdd\u5b58\u4e86\u6240\u9700\u8981\u7684\u5730\u5740\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u7528\u6765\u786e\u5b9a\u6240\u9700\u6570\u636e\u5757\u662f\u5426\u5728\u8be5\u5b58\u50a8\u5c42\u6b21\u4e2d\u3002</li> <li>\u627e\u5230 <code>block index</code> \u7528\u4e8e\u5bfb\u5740\uff0c\u518d\u8fdb\u884c <code>tag</code> \u4f4d\u548c <code>valid bit</code> \u4f4d\u7684\u6bd4\u8f83\uff0c\u518d\u7ed9\u51fa <code>hit</code> \u4fe1\u53f7\u3002</li> <li><code>m</code> \u662f\u4e00\u4e2a <code>block</code> \u591a\u5c11\u5b57</li> <li><code>byte offset</code> \u662f\u4e00\u4e2a\u5b57\u591a\u5c11\u5b57\u8282</li> <li><code>m + byte offset</code> \u4e5f\u5c31\u662f <code>offset</code> \u4ee3\u8868\u7684\u662f\u6570\u636e\u5728 <code>block</code> \u4e2d\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a <code>offset</code> \u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684</li> <li>\u53bb\u6389 <code>m</code> \u548c <code>byte offset</code> \u540e\u77e5\u9053 <code>block address</code> \u662f\u591a\u5c11</li> <li>\u5982\u679c\u662f <code>direct mapped cache</code> \u7b97\u51fa <code>block index</code> \u518d\u53bb\u67e5\u8868\u6839\u636e <code>index</code> \u67e5\u627e</li> <li>\u770b <code>valid bit</code> \u4ee5\u53ca\u4e0e <code>tag</code> \u6bd4\u8f83\u662f\u5426\u662f\u9700\u8981\u5bfb\u627e\u7684\uff0c\u518d\u7ed9\u51fa <code>hit</code> \u4fe1\u53f7\u3002</li> </ul> <p></p> <p>\u5bf9\u4e8e\u4e00\u4e2a 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u800c\u8a00\uff0c\u5730\u5740\u662f 64 \u4f4d\uff0c <code>n</code> \u4f4d <code>index</code> \u4e14\u4e00\u4e2a <code>word</code> \u4e3a 8 bytes(\u4f46\u662f\u5728\u6559\u6750\u524d\u6587\u5b9a\u4e0b\u6b64\u5904\u8ba1\u7b97\u65f6 \u4e00\u4e2a <code>word</code> \u7b97\u4f5c 4 bytes)\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230 <code>tag</code> \u7684\u5927\u5c0f\u4e3a (64 - n - m - 2)\uff0c\u90a3\u4e48 <code>direct mapped cache</code> \u7684\u603b\u5bb9\u91cf\u4e3a:</p> \\[2^{n} \\times (2^{m+5} +(64 - n - m - 2) + 1)\\] Question <p></p> Note <p></p> \u90a3\u4e48\u5982\u679c\u5730\u5740\u53d8\u5927\u5462 <p></p> Question <p></p> Note <p>\u6bcf\u5757\u4e2d\u7684\u5b57\u8282\u6570\u4e3a16\uff0c\u5219\u5b57\u8282\u5730\u57401200\u5bf9\u5e94\u7684\u5757\u5730\u5740\u4e3a \\(\\frac{1200}{16} = 75\\) , \u8be5\u5757\u5730\u5740\u6620\u5c04\u5230\u7684 <code>cache</code> \u5757\u53f7\u4e3a \\((75 \\text{mod} 64) = 11\\) </p> <p>\u5bb9\u91cf\u66f4\u5927\u7684\u5757\u53ef\u4ee5\u901a\u8fc7\u6316\u6398\u7a7a\u95f4\u5c40\u90e8\u6027\u6765\u964d\u4f4e\u5931\u6548\u7387\uff0c\u56e0\u4e3a\u6b64\u65f6\u66f4\u5927\u5bb9\u91cf\u7684\u6570\u636e\u5757\u4f1a\u964d\u4f4e\u5931\u6548\u7387\uff0c\u51cf\u5c11 <code>cache</code> \u4e2d\u4e0e\u6570\u636e\u5b58\u50a8\u76f8\u5173\u7684\u6807\u7b7e\u5b58\u50a8\uff0c\u63d0\u9ad8 <code>cache</code> \u7684\u6548\u7387\u3002</p> <p>Note</p> <p>\u65f6\u95f4\u5c40\u90e8\u6027\u662f\u6307\u88ab\u5f15\u7528\u8fc7\u4e00\u6b21\u7684\u5185\u5b58\u4f4d\u7f6e\u5f88\u53ef\u80fd\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\u518d\u88ab\u591a\u6b21\u5f15\u7528\u3002</p> <p>\u7a7a\u95f4\u5c40\u90e8\u6027\u662f\u6307\u5982\u679c\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u88ab\u5f15\u7528\u4e86\u4e00\u6b21\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5f88\u53ef\u80fd\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\u5f15\u7528\u5176\u9644\u8fd1\u7684\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002</p> <p>\u4e0b\u56fe\u4e2d\uff0c\u968f\u7740\u5757\u5927\u5c0f\u7684\u589e\u957f\uff0c\u5931\u6548\u7387\u901a\u5e38\u90fd\u5728\u4e0b\u964d\u3002\u5982\u679c\u5355\u4e2a\u5757\u5927\u5c0f\u5360 <code>cache</code> \u5bb9\u91cf\u7684\u6bd4\u4f8b\u589e\u52a0\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u5931\u6548\u7387\u6700\u7ec8\u4f1a\u968f\u4e4b\u4e0a\u5347\u3002\u8fd9\u662f\u56e0\u4e3a <code>cache</code> \u4e2d\u53ef\u5b58\u653e\u7684\u5757\u6570\u53d8\u5c11\u4e86\u3002\u6700\u7ec8\uff0c\u67d0\u4e2a\u6570\u636e\u5757\u4f1a\u5728\u5b83\u7684\u5927\u91cf\u6570\u636e\u88ab\u8bbf\u95ee\u4e4b\u524d\u5c31\u88ab\u6324\u51fa <code>cache</code> \u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u636e\u5757\uff0c\u5757\u4e2d\u5404\u5b57\u4e4b\u95f4\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\u4e5f\u4f1a\u968f\u4e4b\u964d\u4f4e\uff0c\u5931\u6548\u7387\u964d\u4f4e\u5e26\u6765\u7684\u597d\u5904\u4e5f\u5c31\u968f\u4e4b\u51cf\u5c11\u3002</p> <p>\u589e\u5927\u5757\u5bb9\u91cf\u65f6\uff0c\u53e6\u4e00\u4e2a\u66f4\u4e25\u91cd\u7684\u95ee\u9898\u662f\u5931\u6548\u635f\u5931\u3002\u5931\u6548\u635f\u5931\u662f\u4ece\u4e0b\u4e00\u7ea7\u5b58\u50a8\u83b7\u5f97\u6570\u636e\u5757\u5e76\u52a0\u8f7d\u5230 <code>cache</code> \u7684\u65f6\u95f4\u3002\u8be5\u65f6\u95f4\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u8bbf\u95ee\u547d\u4e2d\u7684\u65f6\u95f4\u548c\u6570\u636e\u7684\u4f20\u8f93\u65f6\u95f4\u3002\u5f88\u660e\u663e\uff0c\u9664\u975e\u6211\u4eec\u6539\u53d8\u5b58\u50a8\u7cfb\u7edf\uff0c\u5426\u5219\u4f20\u8f93\u65f6\u95f4(\u4e5f\u53ef\u4ee5\u8bf4\u662f\u5931\u6548\u635f\u5931)\u5c06\u968f\u7740\u6570\u636e\u5757\u5bb9\u91cf\u7684\u589e\u5927\u800c\u589e\u5927\u3002\u800c\u4e14\uff0c\u968f\u7740\u6570\u636e\u5757\u5bb9\u91cf\u7684\u589e\u5927\uff0c\u5931\u6548\u7387\u6539\u5584\u5e26\u6765\u7684\u6536\u76ca\u5f00\u59cb\u964d\u4f4e\u3002\u6700\u7ec8\u7684\u7ed3\u679c\u662f\uff0c\u5931\u6548\u635f\u5931\u589e\u5927\u5f15\u8d77\u7684\u6027\u80fd\u4e0b\u964d\u8d85\u8fc7\u4e86\u5931\u6548\u7387\u964d\u4f4e\u5e26\u6765\u7684\u6536\u76ca\uff0ccache\u6027\u80fd\u5f53\u7136\u968f\u4e4b\u4e0b\u964d\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%205/#set-associative","title":"Set associative","text":"<p>\u7ec4\u76f8\u8054cache : cache \u7684\u4e00\u79cd\u7ec4\u7ec7\u7ed3\u6784\uff0c\u6bcf\u4e2a\u6570\u636e\u5757\u5728cache\u4e2d\u5b58\u653e\u7684\u4f4d\u7f6e\u6570\u91cf\u5177\u6709\u56fa\u5b9a\u503c(\u81f3\u5c11\u4e3a2)\u3002</p> <p>\u5305\u542b\u4e3b\u5b58\u5757\u7684\u7ec4\u53f7\u4e3a \uff1a</p> \\[(\\text{\u6570\u636e\u5757\u53f7}) \\text{mod} (cache \\text{\u4e2d\u7684\u7ec4\u6570})\\] <p>\u7531\u4e8e\u6570\u636e\u5757\u53ef\u4ee5\u653e\u7f6e\u5728\u8be5\u7ec4\u5185\u7684\u4efb\u610f\u4f4d\u7f6e\uff0c\u7ec4\u5185\u6240\u6709\u5143\u7d20\u7684\u6240\u6709\u6807\u7b7e\u90fd\u5fc5\u987b\u88ab\u68c0\u67e5\u3002\u63d0\u9ad8\u76f8\u8054\u5ea6\u7684\u597d\u5904\u662f\u901a\u5e38\u53ef\u4ee5\u964d\u4f4e\u5931\u6548\u7387\uff0c\u4e3b\u8981\u7684\u95ee\u9898\u5728\u4e8e\u53ef\u80fd\u4f1a\u589e\u52a0\u547d\u4e2d\u65f6\u95f4\u3002</p> <p>Note</p> <p>\u53ef\u4ee5\u60f3\u89c1\u7684\u662f\u5728\u8003\u8651 <code>cache</code> \u7684\u6027\u80fd\u65f6\uff0c\u5bb9\u91cf\u548c\u76f8\u8054\u5ea6\u5e76\u4e0d\u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#cache","title":"cache\u5931\u6548","text":"<ul> <li>\u5b9a\u4e49\uff1a\u7531\u4e8e\u6240\u9700\u6570\u636e\u4e0d\u5728cache\u4e2d\uff0c\u5bf9cache\u53d1\u51fa\u7684\u6570\u636e\u8bf7\u6c42\u4e0d\u80fd\u88ab\u54cd\u5e94\u3002</li> </ul> <p><code>Stall the CPU, fetch block from memory, deliver to cache, restart CPU read</code></p> <ol> <li>Send the original PC value (current PC-4) to the memory.</li> <li> <p>Instruct main memory to perform a read and wait for the memory to complete its access.</p> </li> <li> <p>Write the cache entry, putting the data from memory in the data portion of the entry, writing the upper bits of the address (from the ALU) into the tag field, and turning the valid bit on.</p> </li> <li>Restart the instruction execution at the first step, which will refetch the instruction again, this time finding it in the cache.</li> </ol> <p>\u4e00\u65e6\u53d1\u751f\u6307\u4ee4cache\u5931\u6548\uff0c\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u5904\u7406\u6b65\u9aa4\uff1a</p> <ol> <li>\u5c06PC\u7684\u539f\u59cb\u503c(\u5f53\u524dPC-4)\u53d1\u9001\u5230\u5185\u5b58\u3002</li> <li>\u5bf9\u4e3b\u5b58\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u7b49\u5f85\u4e3b\u5b58\u5b8c\u6210\u672c\u6b21\u8bbf\u95ee\u3002</li> <li>\u5199cache\u8868\u9879\uff0c\u5c06\u4ece\u5185\u5b58\u83b7\u5f97\u7684\u6570\u636e\u5199\u5165\u5230\u8be5\u8868\u9879\u7684\u6570\u636e\u90e8\u5206\uff0c\u5c06\u5730\u5740\u7684\u9ad8\u4f4d(\u6765\u81ea\u4e8eALU)\u5199\u5165\u6807\u7b7e\u5b57\u6bb5\uff0c\u5e76\u5c06\u6709\u6548\u4f4d\u7f6e\u4e3a\u6709\u6548\u3002</li> <li>\u91cd\u542f\u6307\u4ee4\u6267\u884c\u3002\u8fd9\u5c06\u4f1a\u91cd\u65b0\u53d6\u6307\uff0c\u672c\u6b21\u53d6\u6307\u5c06\u5728\u6307\u4ee4cache\u4e2d\u547d\u4e2d\u3002</li> </ol>"},{"location":"Computer_Science/CO/Chapter%205/#write","title":"Write","text":""},{"location":"Computer_Science/CO/Chapter%205/#block-placement","title":"Block Placement","text":""},{"location":"Computer_Science/CO/Chapter%205/#direct-mapped","title":"Direct mapped","text":"<p>address MOD Number of blocks in cache</p> <p>\u5f88\u5bb9\u6613\u5efa\u7acb\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e5f\u6613\u4e8e\u67e5\u627e\uff0c\u4f46\u662f\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a <code>cache</code> \uff0c\u4f1a\u4ea7\u751f\u7ade\u4e89\u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#fully-associate","title":"Fully associate","text":"<p>Block can go anywhere in cache</p> <p>\u53ef\u4ee5\u51cf\u5c11\u7ade\u4e89\uff0c\u4f46\u662f\u67e5\u627e\u5341\u5206\u9ebb\u70e6\u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#set-associate","title":"Set associate","text":"<p>Block can go in one of a set of places in the cache. Block address MOD Number of sets in the cache. </p> <p>If sets have n blocks, the cache is said to be n-way set associative.</p> <p>\u628a\u53ef\u7528\u7684\u6253\u5305\u6210\u4e00\u4e2a <code>set</code> \u3002</p> <p>\u6ce8\u610f\u5230</p> <p>Direct mapped is the same as 1-way set associative\uff0c and fully associative is m-way set associative(for a cache with m blocks).</p>"},{"location":"Computer_Science/CO/Chapter%205/#block-identification","title":"Block Identification","text":""},{"location":"Computer_Science/CO/Chapter%205/#tag","title":"Tag","text":"<ul> <li>Every block has an address tag that stores the main memory address of the data stored in the block.</li> <li>When checking the cache, the processor will compare the requested memory address to the cache tag -- if the two are equal, then there is a cache hit and the data is present in the cache</li> </ul>"},{"location":"Computer_Science/CO/Chapter%205/#valid-bit","title":"Valid bit","text":"<ul> <li>Often, each cache block also has a valid bit that tells if the contents of the cache block are valid</li> </ul>"},{"location":"Computer_Science/CO/Chapter%205/#block-replacement","title":"Block Replacement","text":"<ul> <li>Random replacement - randomly pick any block</li> <li>\u786c\u4ef6\u4e0a\u5f88\u5bb9\u6613\u5b9e\u73b0\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u968f\u673a\u6570\u751f\u6210\u5668\u5373\u53ef</li> <li>\u5728\u9ad8\u901f\u7f13\u5b58\u4e2d\u5747\u5300\u5206\u914d</li> <li>\u53ef\u80fd\u4f1a\u9a71\u9010\u5373\u5c06\u88ab\u8bbf\u95ee\u7684\u533a\u5757</li> <li>Least-recently used (LRU) - pick the block in the set which was least recently accessed</li> <li>\u5047\u8bbe\u6700\u8fd1\u88ab\u8bbf\u95ee\u7684\u533a\u5757\u6709\u66f4\u5927\u7684\u53ef\u80fd\u518d\u6b21\u88ab\u5f15\u7528</li> <li>\u9700\u8981\u66f4\u591a\u7684\u7a7a\u95f4\u6765\u5b58\u50a8\u66f4\u591a\u7684\u4fe1\u606f</li> <li>First in,first out(FIFO) - Choose a block from the set which was first came into the cache</li> <li>\u7c7b\u4f3c\u4e8e\u961f\u5217</li> </ul>"},{"location":"Computer_Science/CO/Chapter%205/#write-strategy","title":"Write Strategy","text":"<ul> <li>\u5199\u56de(write-back):Write the data into only the data cache</li> <li>\u53ea\u66f4\u65b0 <code>cache</code> \u6240\u4ee5\u901f\u5ea6\u8db3\u591f\u5feb\uff0c\u4e4b\u540e\u518d\u5199\u56de <code>memory</code></li> <li>\u7f3a\u70b9\u662f <code>cause inconsistence</code> \uff0c\u56e0\u6b64\u6b64\u65f6\u5185\u5b58\u548c <code>cache</code> \u4e0d\u540c</li> <li>\u6b64\u65f6\u4e0d\u80fd\u76f4\u63a5\u4e22\u5f03 <code>cache</code> \u4e2d\u7684\u6570\u636e\u4e86\uff0c\u53ef\u80fd\u9700\u8981\u5148\u628a\u8fd9\u4e2a\u6570\u636e\u5199\u56de <code>memory</code></li> <li><code>cache control bits</code> : both <code>valid</code> and <code>dirty</code> bits<ul> <li><code>valid bit</code> \u6307\u793a\u8be5\u4f4d\u7f6e\u7684\u6570\u636e\u662f\u5426\u662f\u5185\u5b58\u8bfb\u5165\u7684\uff0c\u907f\u514d\u8be5\u5904\u662f\u521d\u59cb\u5316\u5185\u5bb9\u800c\u5bf9\u64cd\u4f5c\u5e26\u6765\u5e72\u6270\u3002</li> <li><code>dirty bit</code> \u6307\u793a\u8be5\u4f4d\u7f6e\u662f\u5426\u88ab\u66f4\u65b0\u8fc7\u800c\u50a8\u5b58\u5185\u5b58\u4e2d\u8fd8\u672a\u88ab\u66f4\u65b0\u3002</li> </ul> </li> <li>much lower bandwidth : \u56e0\u4e3a\u88ab\u6539\u5199\u7684\u6570\u636e\u5757\u5728\u66ff\u6362\u51fa <code>cache</code> \u65f6\u624d\u88ab\u5199\u5230\u4e0b\u4e00\u7ea7\u5b58\u50a8\u3002</li> <li>\u5199\u7a7f\u900f/\u5199\u76f4\u8fbe(write-through): Write the data into both the memory and the cache</li> <li>\u540c\u6b65\u66f4\u65b0\u5185\u5b58\u4e0e\u4e0b\u6e38\u5b58\u50a8\u5668\u3002</li> <li>\u7f3a\u70b9\u662f\u5f88\u6162\uff0c\u56e0\u4e3a\u8981\u5230\u4e0b\u6e38\u5b58\u50a8\u5668\u5c31\u4f1a\u53d8\u6162\u3002</li> <li>\u603b\u662f\u53ef\u4ee5\u76f4\u63a5\u4e22\u5f03 <code>cache</code> \u4e2d\u7684\u6570\u636e</li> <li><code>cache control bit</code> : only a valid bit</li> <li>memory (or other processors) always have latest data</li> <li>\u6b64\u65f6\uff0c\u8bfb\u5931\u6548\u4e0d\u4f1a\u5bf9\u5199\u9020\u6210\u5f71\u54cd\uff0c\u56e0\u4e3a <code>memory hierarchy</code> is consistent</li> <li>\u5728\u786c\u4ef6\u4e0a\u6613\u4e8e\u5b9e\u73b0</li> </ul> <p>Info</p> <p>\u5199\u64cd\u4f5c\u603b\u662f\u540c\u65f6\u66f4\u65b0 <code>cache</code> \u548c\u4e0b\u4e00\u7ea7\u5b58\u50a8\uff0c\u4fdd\u8bc1\u4e24\u8005\u4e4b\u95f4\u7684\u6570\u636e\u4e00\u81f4\u3002\u4e0d\u8fc7\u662f\u8fdf\u6216\u8005\u65e9\u7684\u95ee\u9898\u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#write-stall","title":"Write stall","text":"<ul> <li>\u5b9a\u4e49\uff1a\u5f53 <code>CPU</code> \u5fc5\u987b\u7b49\u5f85\u5199\u5165\u5b8c\u6210\u65f6\u5c31\u9700\u8981 <code>stall</code></li> </ul> <p>\u6b64\u65f6\u53ef\u4ee5\u91c7\u53d6\u7684\u7b56\u7565\u662f\u4f7f\u7528 <code>write buffer</code> \uff0c\u4e00\u4e2a\u4fdd\u5b58\u7b49\u5f85\u5199\u5165\u4e3b\u5b58\u7684\u6570\u636e\u7684\u961f\u5217\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u6570\u636e\u5728\u5199\u5165 <code>cache</code> \u7684\u540c\u65f6\u4e5f\u5199\u5165\u5199\u7f13\u51b2(buffer) \u4e2d\uff0c\u4e4b\u540e\u5904\u7406\u5668\u7ee7\u7eed\u6267\u884c\u3002\u5f53\u5199\u5165\u4e3b\u5b58\u7684\u64cd\u4f5c\u5b8c\u6210\u540e\uff0c\u5199\u7f13\u51b2\u4e2d\u7684\u8868\u9879\u5c06\u88ab\u91ca\u653e\u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#write-misses","title":"write misses","text":"<ul> <li>\u5b9a\u4e49\uff1a\u5199\u5931\u6548\u4e5f\u5373 <code>CPU</code> \u7b97\u5b8c\u4e0d\u5728 <code>cache</code> \u4e2d\u3002\u6362\u53e5\u8bdd\u8bf4\u4e5f\u5c31\u662f\u8981\u5199\u7684 <code>block</code> \u4e0d\u5728 <code>cache</code> \u91cc\u9762\u3002</li> </ul> <p>\u6b64\u65f6\u6211\u4eec\u62e5\u6709\u4e24\u79cd\u7b56\u7565\u3002</p> <ol> <li><code>Write allocate</code> (\u5199\u5206\u914d)</li> </ol> <p>\u5c06\u8be5\u6570\u636e\u5757\u4ece\u5185\u5b58\u53d6\u5165 <code>cache</code> \u4e2d\uff0c\u6539\u5199\u8be5\u6570\u636e\u5757\u4e2d\u76f8\u5e94\u90e8\u5206\u7684\u6570\u636e\u3002</p> <ol> <li><code>Write around (no write allocate)</code></li> </ol> <p>\u5728\u5185\u5b58\u4e2d\u66f4\u65b0\u76f8\u5e94\u90e8\u5206\u7684\u6570\u636e\uff0c\u5e76\u4e0d\u5c06\u5176\u53d6\u5165 <code>cache</code> \u3002</p> <p>\u8fd9\u4e00\u7b56\u7565\u7684\u52a8\u673a\u662f\u6709\u65f6\u5019\u7a0b\u5e8f\u9700\u8981\u5199\u6574\u4e2a\u6570\u636e\u5757(\u4f8b\u5982\u521d\u59cb\u5316\u65f6)\uff0c\u6b64\u65f6\u6bcf\u6b21\u5931\u6548\u53d6\u5165 <code>cache</code> \u7684\u64cd\u4f5c\u662f\u4e0d\u5fc5\u8981\u7684\u3002</p> <p>\u5176\u5b9e\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u7b56\u7565\uff0c\u56e0\u4e3a\u5c31\u7b97\u731c\u9519\u4e86(\u4e5f\u5373\u5176\u5b9e\u6211\u4e0b\u4e00\u6b21\u786e\u5b9e\u9700\u8981\u518d\u6b21\u7528\u5230\u8fd9\u4e2a\u6570\u636e)\uff0c\u90a3\u4e48\u6211\u5176\u5b9e\u4e5f\u53ea\u9700\u8981\u53bb\u53d6\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e2a\u5f00\u9500\u5e76\u4e0d\u5927\u3002</p> <p>Note</p> <p>In general, write-back caches use write-allocate , and  write-through caches use write-around . \u53ef\u4ee5\u60f3\u89c1\uff0c write-back \u548c write around \u5e76\u4e0d\u4f1a\u7ec4\u5408\u3002\u524d\u8005\u9700\u8981\u628a\u6570\u636e\u4ec5\u5199\u5165 <code>cache</code> \u800c\u540e\u8005\u9009\u62e9\u5e76\u4e0d\u628a\u6570\u636e\u5199\u5165 <code>cache</code> \u4e2d\u3002</p> <p>ATTENTION</p> <p>\u5f53\u53d1\u751f <code>Write misses</code> \u65f6\uff0c\u6211\u4eec\u9700\u8981 read the entire block into the cache, then write the word \u3002\u8fd9\u662f\u7531\u4e8eCPU\u53ea\u5f80 <code>cache</code> \u4e2d\u5199\u4e00\u4e2a\u5b57\uff0c\u4f46\u662f\u6211\u4eec\u8981\u4fdd\u8bc1\u6574\u4e2a <code>block</code> \u90fd\u5728 <code>cache</code> \u91cc\u9762\uff0c\u4e5f\u5373\u9700\u8981\u4fdd\u8bc1 <code>block</code> \u7684\u5b8c\u6574\u6027\u3002\u5426\u5219 <code>block</code> \u8be5\u6570\u636e\u8fb9\u4e0a\u5269\u4e0b\u4e09\u4e2a\u4f4d\u7f6e\u90fd\u662f\u7a7a\u7684\u3002\u90a3\u4e48\u4e0b\u6b21\u5f80\u5185\u5b58\u4f20\u65f6\u5c31\u628a\u5185\u5b58\u4e2d\u8be5\u4f4d\u7f6e\u5bf9\u5e94\u7684\u6570\u636e\u6e05\u7a7a\u4e86\u3002</p> <p>\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u4e00\u4e2a <code>write</code> \u53ea\u6539\u53d8\u4e00\u4e2a <code>block</code> \u4e2d\u7684\u4e00\u4e2a\u5b57\uff0c\u56e0\u6b64\u9700\u8981\u5c06 <code>block</code> \u5185\u6570\u636e\u8bfb\u8fc7\u6765\u518d\u53ea\u6539\u4e00\u4e2a\u5b57\u3002</p> Question <p>Assume</p> <p>1 clock cycles to send the address</p> <p>15 memory bus clock cycles for each DRAM access initiated</p> <p>1 bus clock cycles to send a word of data</p> <p>Block size is 4 words</p> <p>Every word is 4 bytes</p> <p>\u8bf7\u5206\u522b\u8ba1\u7b97 With a main memory width of 4\uff0c2\uff0c1 words \u4ee5\u53ca With 4 banks Interleaved Memory \u7684 <code>Bandwidth</code></p> <p></p> Answer <ol> <li>\u5148\u627e\u5230\u8fd9\u4e2a\u5b57\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u5e76\u8bfb\u51fa\u5bf9\u5e94 <code>data</code> \uff0c\u800c <code>cache</code> \u548c\u4e3b\u5b58\u4e2d\u4f20\u8f93\u7684\u6700\u5c0f\u5355\u5143\u662f <code>block</code> \uff0c\u6b64\u65f6\u53ef\u4ee5\u5f97\u5230\uff1a</li> </ol> <p>The miss penalty (The time to transfer one block is):</p> \\[1+4\\times (1+15)\uff1d65 CLKs\\] <p>\u90a3\u4e48\u4e00\u5171\u7531\u56db\u4e2a <code>block</code> \uff0c\u6bcf\u4e2a <code>block</code> \u662f\u56db\u4e2a <code>byte</code> \uff0c\u53ef\u4ee5\u5f97\u5230\u5e26\u5bbd\uff1a</p> <p>Bandwidth : \\(\\frac{4\\times 4}{65} \\apppox \\frac{1}{4}\\)</p> <ol> <li>With a main memory width of 2 words</li> </ol> <p>The miss penalty</p> \\[1+2\\times (15+1) = 33 CLKs\\] <p>Bandwidth : \\(\\frac{4\\times 4}{33} = \\frac{16}{33} \\approx 0.48\\)</p> <ol> <li>With a main memory width of 4 words</li> </ol> <p>The miss penalty</p> \\[1+1\\times (15+1) = 17 CLKs\\] <p>Bandwidth : \\(\\frac{4\\times 4}{17} = \\frac{16}{17} \\approx 0.98\\)</p> <ol> <li>With 4 banks Interleaved Memory</li> </ol> <p>The miss penalty</p> \\[1 + 15 + (4\\times 1) = 20\\] <p>Bandwidth : \\(\\frac{4\\times 4}{20} = 0.8\\)</p>"},{"location":"Computer_Science/CO/Chapter%205/#cache-performance","title":"cache performance","text":"<p>\u5728\u672c\u8282\u4e2d\uff0c\u5148\u4ece\u8bc4\u4f30\u548c\u5206\u6790cache\u6027\u80fd\u7684\u65b9\u6cd5\u5f00\u59cb\uff0c\u4e4b\u540e\u4ecb\u7ecd\u4e24\u79cd\u4e0d\u540c\u7684\u6539\u5584cache\u6027\u80fd\u7684\u6280\u672f\u3002\u7b2c\u4e00\u9879\u6280\u672f\u4e3b\u8981\u5173\u6ce8\u901a\u8fc7\u51cf\u5c11\u4e24\u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u5757\u4e89\u593a\u540c\u4e00\u7f13\u5b58\u4f4d\u7f6e\u7684\u53d1\u751f\u6982\u7387\u6765\u964d\u4f4e\u5931\u6548\u7387\u3002\u7b2c\u4e8c\u9879\u6280\u672f\u662f\u901a\u8fc7\u6dfb\u52a0\u989d\u5916\u7684\u4e00\u4e2a\u5b58\u50a8\u5c42\u6b21\u6765\u51cf\u5c11\u5931\u6548\u4ee3\u4ef7\u3002\u8fd9\u9879\u6280\u672f\u88ab\u79f0\u4e3a\u591a\u7ea7\u7f13\u5b58(multilevel caching)\u3002</p> <p>\\(\\(Average \\ Memory \\  Assess \\ time \\ (AMTI) \\ = hit \\ time \\ + \\ miss \\ time\\)\\)</p> <p>\u4e5f\u5373\uff1a</p> \\[Average \\ Memory \\  Assess \\ time \\ (AMTI) \\ = hit \\ time \\ + \\ miss \\ ratio \\times miss \\ penalty\\] <p>We use CPU time to measure cache performance.</p> <p><code>CPU</code> \u65f6\u95f4\u53ef\u4ee5\u88ab\u5206\u6210 <code>CPU</code> \u7528\u4e8e\u6267\u884c\u7a0b\u5e8f\u7684\u65f6\u95f4\u548c <code>CPU</code> \u7528\u6765\u7b49\u5f85\u8bbf\u5b58\u7684\u65f6\u95f4\u3002\u901a\u5e38\u5047\u8bbe <code>cache</code> \u547d\u4e2d\u7684\u8bbf\u95ee\u65f6\u95f4\u53ea\u662f\u6b63\u5e38 <code>CPU</code> \u6267\u884c\u65f6\u95f4\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\uff1a</p> \\[CPU \\ time \\ = (CPU \\ execution \\ clock \\ cycles \\ + \\ Memory-stall \\ clock \\ cycles) \\times Clock \\ cycle \\ time\\] <p>\u5047\u8bbe\u7b49\u5f85\u5b58\u50a8\u8bbf\u95ee\u7684\u65f6\u949f\u5468\u671f\u6570\u4e3b\u8981\u6765\u81ea\u4e8e <code>cache</code> \u7684\u5931\u6548\u3002\u90a3\u4e48\u7b49\u5f85\u5b58\u50a8\u8bbf\u95ee\u7684\u65f6\u949f\u5468\u671f\u6570\u53ef\u4ee5\u88ab\u5b9a\u4e49\u4e3a\uff0c\u8bfb\u64cd\u4f5c\u5e26\u6765\u7684\u505c\u987f\u5468\u671f\u6570\u52a0\u4e0a\u5199\u64cd\u4f5c\u5e26\u6765\u7684\u505c\u987f\u5468\u671f\u6570\u3002</p> \\[Memory-stall \\ clock \\ cycles \\ = \\ \\# \\ of \\ instructions \\times miss \\ ratio \\times miss \\ penalty\\] \\[= \\ Read-stall \\ cycles \\ + \\ Write-stall \\ cycles\\] <p>For Read-stall</p> \\[Read-stall \\ cycles = \\frac{Read}{Program}(\\text{\u8bfb\u64cd\u4f5c\u6b21\u6570}) \\times Read \\ miss \\ rate \\times Read \\ miss penalty\\] <p>For a write-through plus write buffer scheme:</p> \\[Write-stall \\ cycles \\ = \\frac{Write}{Program}(\\text{\u5199\u64cd\u4f5c\u6b21\u6570}) \\times Write \\ miss \\ rate \\times Write \\ miss \\ penalty \\ + \\ Write \\ buffer \\ stalls\\] <p>Info</p> <p>\u7531\u4e8e\u5199\u7f13\u51b2\u505c\u987f\u4e3b\u8981\u4f9d\u8d56\u4e8e\u5199\u64cd\u4f5c\u7684\u5bc6\u96c6\u5ea6\uff0c\u800c\u4e0d\u53ea\u662f\u5b83\u7684\u9891\u5ea6\uff0c\u4e0d\u53ef\u80fd\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u8ba1\u7b97\u6b64\u7c7b\u505c\u987f\u7684\u7b49\u5f0f\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5982\u679c\u7cfb\u7edf\u4e2d\u6709\u4e00\u4e2a\u5bb9\u91cf\u5408\u7406\u7684\u5199\u7f13\u51b2(\u4f8b\u5982\uff0c\u56db\u4e2a\u6216\u8005\u66f4\u591a\u5b57),\u540c\u65f6\u4e3b\u5b58\u63a5\u6536\u5199\u8bf7\u6c42\u7684\u901f\u5ea6\u80fd\u591f\u5927\u4e8e\u7a0b\u5e8f\u7684\u5e73\u5747\u5199\u901f\u5ea6\uff0c\u5199\u7f13\u51b2\u5f15\u8d77\u7684\u505c\u987f\u5c06\u4f1a\u5f88\u5c11\uff0c\u51e0\u4e4e\u80fd\u591f\u5ffd\u7565\u3002\u5982\u679c\u7cfb\u7edf\u4e0d\u80fd\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bbe\u8ba1\u53ef\u80fd\u4e0d\u5408\u7406\u3002\u8bbe\u8ba1\u8005\u8981\u4e48\u4f7f\u7528\u66f4\u6df1\u7684\u5199\u7f13\u51b2\uff0c\u8981\u4e48\u4f7f\u7528\u5199\u8fd4\u56de\u7b56\u7565\u3002</p> <p>\u5199\u8fd4\u56de\u7b56\u7565\u4e5f\u4f1a\u989d\u5916\u589e\u52a0\u505c\u987f\uff0c\u4e3b\u8981\u6765\u6e90\u4e8e\u5f53\u6570\u636e\u5757\u88ab\u66ff\u6362\u5e76\u9700\u8981\u5c06\u5176\u5199\u56de\u5230\u4e3b\u5b58\u65f6\u3002</p> <p>\u540c\u65f6\uff0c\u5982\u679c <code>cache block size</code> \u662f\u4e00\u4e2a\u5b57\uff0c\u90a3\u4e48\u5728 <code>write-through</code> \u4e0b <code>write miss penalty is 0</code> \u3002\u5199\u64cd\u4f5c\u76f4\u63a5\u540c\u65f6\u53d1\u751f\u5728\u7f13\u5b58\u548c\u4e3b\u5b58\u4e0a\uff0c\u4e0d\u9700\u8981\u989d\u5916\u52a0\u8f7d\u6574\u4e2a\u5757\u5230\u7f13\u5b58\u4e2d\u3002</p> <p>\u5728\u5927\u591a\u6570\u5199\u7a7f\u900f <code>cache</code> \u7684\u7ed3\u6784\u4e2d\uff0c\u8bfb\u548c\u5199\u7684\u5931\u6548\u4ee3\u4ef7\u662f\u76f8\u540c\u7684(\u90fd\u662f\u5c06\u6570\u636e\u5757\u4ece\u5185\u5b58\u53d6\u81f3cache\u6240\u82b1\u7684\u65f6\u95f4)\u3002\u5047\u8bbe\u5199\u7f13\u51b2\u505c\u987f\u662f\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u7684\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5931\u6548\u7387\u548c\u5931\u6548\u4ee3\u4ef7\u6765\u540c\u65f6\u523b\u753b\u8bfb\u64cd\u4f5c\u548c\u5199\u64cd\u4f5c\uff1a</p> \\[Memory-stall \\ clock \\ cycles \\ \uff1d \\ \\frac{Memory \\ accesses}{Program} \\times Miss \\ rate \\times Miss \\ penalty\\] <p>\u8fd9\u4e2a\u516c\u5f0f\u4e5f\u53ef\u4ee5\u8bb0\u4f5c</p> \\[Memory-stall \\ clock \\ cycles \\ \uff1d \\ \\frac{Instructions}{Program} \\times \\frac{Misses}{Instructions} \\times Miss \\ penalty\\] <p>Note</p> <p>\u7531\u6b64\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u63d0\u9ad8\u6027\u80fd\u6765\u8bf4\uff0c\u76ee\u6807\u4e0d\u53ea\u662f\u964d\u4f4e <code>miss rate</code> \u800c\u662f <code>miss</code> \u4ea7\u751f\u7684\u65f6\u95f4\uff0c\u4e5f\u5373 \\(miss \\ rate \\times miss \\ penalty\\) \u3002</p> Question <p>Assume the miss rate of an instruction cache is 2% and the miss rate of the data cache is 4%. If a processor has a CPI of 2 without any memory stalls, and the miss penalty is 100 cycles for all misses, determine how much faster a processor would run with a perfect cache that never missed. Assume the frequency of all loads and stores is 36%.</p> Answer <p></p> FURTHER <p>Suppose we speed-up the computer in the previous example by reducing its CPI from 2 to 1 without changing the clock rate, which might be done with an improved pipeline.</p> Answer <p></p> FURTHER <p>Suppose we increase the performance of the computer in the previous example by doublingits clock rate for same memory system. How much faster will the computer be with the faster clock to slow clock?</p> Answer <p></p> <p>This, the computer with the faster clock is about 1.2 times faster rather than 2 time faster.</p> <p>\u4e4b\u524d\u7684\u4f8b\u5b50\u548c\u7b49\u5f0f\u90fd\u5047\u8bbe\u547d\u4e2d\u65f6\u95f4\u4e0d\u662f\u5f71\u54cdcache\u6027\u80fd\u7684\u91cd\u8981\u56e0\u7d20\u3002\u5f88\u6e05\u695a\uff0c\u5982\u679c\u547d\u4e2d\u65f6\u95f4\u589e\u52a0\uff0c\u5728\u5b58\u50a8\u7cfb\u7edf\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u5b57\u6240\u82b1\u7684\u65f6\u95f4\u4e5f\u5728\u589e\u52a0\u3002\u8fd9\u53ef\u80fd\u5f15\u8d77\u5904\u7406\u5668\u65f6\u949f\u5468\u671f\u7684\u589e\u5927\u3002\u4f8b\u5982\u589e\u5927 <code>cache</code> \u7684\u5bb9\u91cf\u3002\u66f4\u5927\u7684 <code>cache</code> \u81ea\u7136\u4f1a\u6709\u66f4\u957f\u7684\u8bbf\u95ee\u65f6\u95f4\u3002\u547d\u4e2d\u65f6\u95f4\u7684\u589e\u52a0\u53ef\u80fd\u4f1a\u4e3a\u6d41\u6c34\u7ebf\u589e\u52a0\u4e00\u4e2a\u6d41\u6c34\u7ea7\uff0c\u8fd9\u6837\u5373\u4f7f <code>cache</code> \u547d\u4e2d\u4e5f\u4f1a\u82b1\u8d39\u591a\u4e2a\u65f6\u949f\u5468\u671f\u3002\u8ba1\u7b97\u52a0\u6df1\u6d41\u6c34\u7ebf\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u5219\u66f4\u4e3a\u590d\u6742\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u5927\u5bb9\u91cf <code>cache</code> \u6765\u8bf4\uff0c\u76f8\u6bd4\u547d\u4e2d\u7387\u7684\u63d0\u5347\uff0c\u547d\u4e2d\u65f6\u95f4\u7684\u589e\u52a0\u53cd\u800c\u4f1a\u66f4\u5360\u4f18\u52bf\uff0c\u8fd9\u5c06\u4f1a\u5bfc\u81f4\u5904\u7406\u5668\u6027\u80fd\u7684\u4e0b\u964d\u3002</p> Question <p>Assume </p> <p>Cache size is 4K Block </p> <p>Block size is 4 words</p> <p>Physical address is 32bits</p> <p>Question:Find the total number of set and total number of tag bits for variety associativity?</p> Answer <p></p>"},{"location":"Computer_Science/CO/Chapter%205/#decreasing-miss-penalty-with-multilevel-caches","title":"Decreasing miss penalty with multilevel caches","text":"<p>Add a second level cache:</p> <p>\u6211\u4eec\u505a32\u4e2a\u5bc4\u5b58\u5668\u800c\u975e128\u4e2a\uff0c\u662f\u56e0\u4e3a\u540e\u8005\u9700\u8981\u591a\u7ea7\u8bd1\u7801\u5bfb\u5740\uff0c\u90a3\u4e48\u9700\u8981\u65f6\u95f4\u66f4\u957f\u4e86\u3002\u6211\u4eec\u4e00\u65b9\u9762\u5e0c\u671b\u5bc4\u5b58\u5668\u591a\uff0c\u53e6\u4e00\u65b9\u9762\u5982\u679c\u5bc4\u5b58\u5668\u6570\u91cf\u589e\u52a0\u540e\u5bfb\u5740\u65f6\u95f4\u4f1a\u53d8\u957f\u3002\u800c cache \u672c\u8d28\u662f\u4e3a\u4e86\u5904\u7406\u5668\u670d\u52a1\uff0c\u4e5f\u5373\u5e0c\u671b\u4e00\u5468\u671f <code>load</code> \u4fbf\u80fd\u8bfb\u4e0a\u6765\u3002\u6240\u4ee5\u5148\u505a\u4e00\u4e2a <code>L1</code> \u7f13\u5b58\u4e3a\u4e86\u5feb\uff0c <code>L2</code> \u4e3a\u4e86\u201c\u5927\u201d\u3002\u4e8b\u5b9e\u4e0a\u662f <code>cache</code> \u548c <code>DRAM</code> \u4e4b\u95f4\u6709\u4e00\u4e2a\u663e\u7740\u7684\u901f\u5ea6\u5dee\uff0c\u5e0c\u671b\u80fd\u515c\u4f4f\u4f7f\u5f97 <code>MISS RATE</code> \u8db3\u591f\u4f4e\u6b64\u65f6 <code>CPU</code> \u4f1a\u8ba4\u4e3a\u5185\u5b58\u7a7a\u95f4\u662f\u65e0\u9650\u5927\u7684\uff0c\u6b64\u65f6\u53ef\u4ee5\u79f0\u4e3a\u201c\u5927\u201d\u3002</p> Question <p>CPI of 1.0 on a 5GHz machine with a 2% miss rate, 100ns DRAM access</p> <p>Adding 2nd level cache with 5ns access time decreases miss rate to 0.5%</p> <p>The processor with secondary cache is faster by\uff1f</p> Answer <p></p>"},{"location":"Computer_Science/CO/Chapter%205/#miss-penalties","title":"Miss Penalties","text":"<p>\u65e0\u8bba\u662f <code>read</code> \u8fd8\u662f <code>write</code> \uff0c\u5f53\u53d1\u751f <code>miss</code> \u65f6\u90fd\u9700\u8981\u53bb <code>fetch data</code> \u3002\u8fd9\u5bf9\u4e8e <code>read</code> \u6765\u8bf4\u5f88\u597d\u7406\u89e3\uff0c\u4e0d\u5728\u6240\u4ee5\u9700\u8981\u8bfb\u8fc7\u6765\u3002\u800c\u5bf9\u4e8e <code>write</code> \u6765\u8bf4\uff08\u5728\u524d\u6587\u4e5f\u63d0\u5230\u8fc7\uff09\u7531\u4e8e\u5904\u7406\u5668 <code>access</code> \u7684\u6570\u636e\u7684\u5927\u5c0f\u548c <code>block</code> \u4e0d\u4e00\u5b9a\u5339\u914d\uff0c\u800c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u4f20\u9012\u90fd\u662f\u4ee5 <code>block</code> \u7684\u5f62\u5f0f\u3002\u5f53\u7136\u4e86\uff0c\u5982\u679c\u4e00\u4e2a <code>block</code> \u662f\u4e00\u4e2a <code>word</code> \uff0c\u90a3\u4e48\u6b64\u65f6\u5bf9\u4e8e <code>write miss</code> \u6765\u8bf4\u53ef\u4ee5\u4e0d\u9700\u8981 <code>fetch</code> \u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#read-miss","title":"Read Miss","text":"<ol> <li>Need to fetch data from memory to cache.</li> <li>\u5224\u65ad <code>Write-back Cache &amp; Dirty bit</code> :    - \u5982\u679c <code>Yes</code> \uff0c\u90a3\u4e48\u5148\u628a\u6b64\u65f6 <code>cache</code> \u91cc\u7684\u4e1c\u897f\u5199\u56de\u4e3b\u5b58( <code>Save dirty block first</code> )\uff0c\u518d\u53bb <code>Fetch Memory (Block)</code> \u3002    - \u5982\u679c <code>No</code> \uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5 <code>Fetch Memory (Block)</code> \u3002</li> </ol> <p>Attention</p> <p>\u5728\u9898\u76ee\u4e2d\u5982\u679c\u662f <code>write back</code> \u7b56\u7565\u7684\u8bdd\uff0c\u5f53 <code>cache</code> \u6ee1\u4e86\u4e4b\u540e\u5c31\u9700\u8981\u5148\u5b58\u56de\u53bb\uff0c\u4e5f\u5c31\u662f\u5b58\u5728\u4e24\u500d\u7684 <code>penalty</code> \u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#write-miss","title":"Write Miss","text":"<ol> <li>\u5982\u679c <code>block</code> \u4e0d\u662f\u4e00\u4e2a <code>word</code> \uff0c\u90a3\u4e48 <code>need to fetch data from memory to cache</code>\u3002</li> <li>\u5224\u65ad <code>Write Allocate</code> :    - \u5982\u679c <code>No</code> \uff0c\u4e5f\u5c31\u662f\u8bf4\u91c7\u7528\u7684\u7b56\u7565\u662f <code>Write Around</code> \uff0c\u90a3\u4e48\u7684\u5f00\u9500\u662f <code>write buffer</code> \u672a\u6ee1\u65f6\u76f4\u63a5\u4e22\u8fdb\u53bb\uff1b <code>write buffer</code> \u6ee1\u65f6\u7684 <code>stall</code> \u3002    - \u5982\u679c <code>Yes</code> \uff0c\u90a3\u4e48 <code>Need to  write to cache</code> \uff0c\u6b64\u65f6\u518d\u5224\u65ad <code>Write-back Cache &amp; Dirty?</code><ul> <li>\u5982\u679c <code>No</code> \uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5 <code>Fetch Memory (Block)</code> \u3002</li> <li>\u5982\u679c <code>Yes</code> \uff0c\u90a3\u4e48\u5148\u628a\u6b64\u65f6 <code>cache</code> \u91cc\u7684\u4e1c\u897f\u5199\u56de\u4e3b\u5b58( <code>Save dirty block first</code> )\uff0c\u518d\u53bb <code>Fetch Memory (Block)</code> \u3002</li> </ul> </li> </ol>"},{"location":"Computer_Science/CO/Chapter%205/#_1","title":"\u56fe\u7247\u7248\u603b\u7ed3","text":"<ul> <li>If the write buffer stalls are small, we can safely ignore them. (No penalty on Write Memory)</li> <li>If the cache block size is one word, the write miss penalty is 0. (Except the block is dirty)</li> </ul>"},{"location":"Computer_Science/CO/Chapter%205/#virtual-memory","title":"Virtual Memory","text":"<p>\u63d0\u51fa\u865a\u62df\u5b58\u50a8\u7684\u4e3b\u8981\u52a8\u673a\u6709\u4e24\u4e2a\uff1a</p> <p>\uff081\uff09\u5141\u8bb8\u5728\u591a\u4e2a\u7a0b\u5e8f\u4e4b\u95f4\u9ad8\u6548\u5b89\u5168\u5730\u5171\u4eab\u5185\u5b58\uff0c\u4f8b\u5982\u4e91\u8ba1\u7b97\u7684\u591a\u4e2a\u865a\u62df\u673a\u6240\u9700\u7684\u5185\u5b58\u3002</p> <p>\uff082\uff09\u6d88\u9664\u5c0f\u800c\u53d7\u9650\u7684\u4e3b\u5b58\u5bb9\u91cf\u5bf9\u7a0b\u5e8f\u8bbe\u8ba1\u9020\u6210\u7684\u5f71\u54cd\u3002</p> <p>\u5728\u7f16\u8bd1\u865a\u62df\u673a\u65f6\uff0c\u65e0\u6cd5\u77e5\u9053\u54ea\u4e9b\u865a\u62df\u673a\u5c06\u4e0e\u5176\u4ed6\u865a\u62df\u673a\u5171\u4eab\u5b58\u50a8\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5171\u4eab\u5b58\u50a8\u7684\u865a\u62df\u673a\u5728\u8fd0\u884c\u65f6\u4f1a\u52a8\u6001\u53d8\u5316\u3002\u7531\u4e8e\u8fd9\u79cd\u52a8\u6001\u7684\u4ea4\u4e92\u4f5c\u7528\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u7f16\u8bd1\u5230\u5b83\u81ea\u5df1\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u2014\u2014\u53ea\u6709\u8fd9\u4e2a\u7a0b\u5e8f\u80fd\u8bbf\u95ee\u7684\u4e00\u7cfb\u5217\u5b58\u50a8\u4f4d\u7f6e\u3002\u865a\u62df\u5b58\u50a8\u5b9e\u73b0\u4e86\u5c06\u7a0b\u5e8f\u5730\u5740\u7a7a\u95f4\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u3002\u8fd9\u79cd\u5730\u5740\u8f6c\u6362\u5904\u7406\u52a0\u5f3a\u4e86\u5404\u4e2a\u7a0b\u5e8f\u5730\u5740\u7a7a\u95f4\u4e4b\u95f4\u7684\u4fdd\u62a4\u3002</p> <p>\u5de6\u8fb9\u662f\u865a\u62df\u5730\u5740\uff0c\u53f3\u8fb9\u662f\u5b9e\u4f53\uff0c\u4e0a\u9762\u662f\u5185\u5b58\uff0c\u4e0b\u9762\u662f\u78c1\u76d8\u3002</p> <p>\u7070\u8272\u662f\u5728\u78c1\u76d8\u4e2d\uff0c\u767d\u8272\u5728\u5185\u5b58\u4e2d\u3002\u800c\u5728\u5185\u5b58\u4e2d\u7684\u6700\u7ec8\u90fd\u4f1a\u5728\u78c1\u76d8\u4e2d\u3002</p> <p>\u8fd9\u6837\u7528\u6620\u5c04\u8868\u6765\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u865a\u62df\u5730\u5740\u4f46\u5f88\u96be\u5f97\u5230\u53e6\u4e00\u4e2a\u7528\u6237\u7684\u7269\u7406\u5730\u5740\uff0c\u56e0\u6b64\u906d\u5230\u653b\u51fb\u7684\u53ef\u80fd\u51cf\u5c0f\u4e86\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%205/#pages-virtual-memory-blocks","title":"Pages: virtual memory blocks","text":"<p>Page faults: the data is not in memory, retrieve it from disk. \u4e5f\u5c31\u76f8\u5f53\u4e8e <code>miss</code> \u3002</p> <p>\u9700\u8981\u8003\u8651\u7684\u4e8b\u60c5\uff1a</p> <ol> <li>huge miss penalty, thus pages should be fairly large (e.g., 4KB)</li> </ol> <p>\u597d\u5904\u6709\u5f88\u591a</p> <ul> <li>\u5229\u7528\u65f6\u7a7a\u5c40\u90e8\u6027\uff0c\u77ed\u671f\u5185\u5728\u4e00\u4e2a\u5927\u7684 <code>page</code> \u91cc\u53ef\u80fd\u8bbf\u95ee\u7684\u4e1c\u897f\u4f1a\u591a\u3002</li> <li>\u5728\u78c1\u76d8\u4e2d\u5f88\u591a\u65f6\u95f4\u4f1a\u82b1\u8d39\u5728\u5bfb\u5740\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u679c\u6709\u66f4\u5927\u7684 <code>page</code> \uff0c\u90a3\u4e48\u627e\u5230\u540e\u8fd9\u9644\u8fd1\u7684\u6570\u636e\u90fd\u80fd\u8bfb\u5230\u4e00\u4e2a\u8f83\u5927 <code>page</code> \u91cc\uff0c\u5e0c\u671b\u51cf\u5c11\u6765\u5bfb\u5740\u7684\u6b21\u6570\u3002</li> </ul> <ol> <li>reducing page faults is important (LRU is worth the price)</li> </ol> <ul> <li>\u4e5f\u662f\u5229\u7528\u4e86\u65f6\u95f4\u76f8\u5173\u6027\uff0c\u6700\u8fd1\u6700\u5c11\u7528\u7684\u518d\u5220\u53bb\uff0c\u4e5f\u662f\u4e3a\u4e86\u964d\u4f4e <code>page faults</code> \u3002</li> </ul> <ol> <li>can handle the faults in software instead of hardware</li> </ol> <ul> <li>\u56e0\u4e3a\u505c\u4e00\u6b21\u4f1a\u505c\u5c06\u8fd1\u4e00\u767e\u4e07\u4e2a\u5468\u671f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u5404\u79cd\u5404\u6837\u7684\u8f6f\u4ef6\u7684\u7a0b\u5e8f\u53bb\u5904\u7406\uff0c\u4e0d\u9700\u8981\u4e13\u95e8\u7684\u7535\u8def\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8f6f\u4ef6\u53bb\u505a\u3002\u4e5f\u5c31\u662f\u7528\u64cd\u4f5c\u7cfb\u7edf\u6765\u89e3\u51b3 <code>page faults</code> \u800c\u4e0d\u662f\u4f7f\u7528\u786c\u4ef6\u52a0\u901f\u3002</li> <li>\u7f3a\u9875\u5931\u6548\u53ef\u4ee5\u7531\u8f6f\u4ef6\u5904\u7406\uff0c\u56e0\u4e3a\u4e0e\u78c1\u76d8\u8bbf\u95ee\u65f6\u95f4\u76f8\u6bd4\uff0c\u8fd9\u6837\u7684\u5f00\u9500\u5c06\u5f88\u5c0f\u3002\u6b64\u5916\uff0c\u8f6f\u4ef6\u53ef\u4ee5\u7528\u5de7\u5999\u7684\u7b97\u6cd5\u6765\u9009\u62e9\u5982\u4f55\u653e\u7f6e\u9875\u9762\uff0c\u53ea\u8981\u5931\u6548\u7387\u51cf\u5c11\u5f88\u5c0f\u4e00\u90e8\u5206\u5c31\u8db3\u4ee5\u5f25\u8865\u7b97\u6cd5\u7684\u5f00\u9500\u3002</li> </ul> <ol> <li>using write-through is too expensive so we use write back</li> </ol> <ul> <li>\u5f80\u78c1\u76d8\u4e2d\u5199\u7684\u6570\u636e\u662f\u5f88\u5927\u7684\uff0c\u8bbe\u8ba1 <code>buffer</code> \u4e5f\u4e0d\u73b0\u5b9e</li> <li><code>write buffer</code> \u7684\u5bb9\u91cf\u4f1a\u4e0d\u4f1a\u5199\u6ee1\u7531\u4e24\u4ef6\u4e8b\u51b3\u5b9a\uff0c \u5199\u7684\u6570\u91cf\u4e0e <code>buffer</code> \u4e2d\u7684\u6570\u636e\u5199\u4e00\u6b21\u5230\u78c1\u76d8\u4e2d\u9700\u8981\u7684\u65f6\u95f4\u3002</li> <li>\u5199\u7a7f\u900f\u7b56\u7565\u5bf9\u4e8e\u865a\u62df\u5b58\u50a8\u4e0d\u5408\u9002\uff0c\u56e0\u4e3a\u5199\u5165\u65f6\u95f4\u8fc7\u957f\u3002\u76f8\u53cd\uff0c\u865a\u62df\u5b58\u50a8\u7cfb\u7edf\u91c7\u7528\u5199\u56de\u7b56\u7565\u3002</li> </ul> <p></p>"},{"location":"Computer_Science/CO/Chapter%205/#page-table","title":"Page Table","text":"<p>\u7531\u4e0a\u56fe\u4e5f\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u4f7f\u7528\u7684\u662f <code>fully associate</code> \u3002\u6240\u4ee5\u4e0d\u518d\u9075\u5faa\u7b80\u5355\u7684\u53d6\u6a21\u64cd\u4f5c\u3002\u800c\u662f\u5728\u5185\u5b58\u4e2d\u5b58\u653e\u8fd9\u4e00\u6620\u5c04\u5173\u7cfb\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u7684 <code>Page Table</code> \u3002</p> <p>\u9875\u8868 (page table)\uff1a\u5728\u865a\u62df\u5b58\u50a8\u7cfb\u7edf\u4e2d\uff0c\u4fdd\u5b58\u7740\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u4e4b\u95f4\u8f6c\u6362\u5173\u7cfb\u7684\u8868\u3002\u9875\u8868\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u901a\u5e38\u4f7f\u7528\u865a\u62df\u9875\u53f7\u6765\u7d22\u5f15\uff0c\u5982\u679c\u8fd9\u4e2a\u9875\u5728\u5185\u5b58\u4e2d\uff0c\u9875\u8868\u4e2d\u7684\u5bf9\u5e94\u9879\u5305\u542b\u8be5\u9875\u5bf9\u5e94\u7684\u7269\u7406\u9875\u53f7\u3002</p> <p>\u8fd9\u5f20\u8868\u6bcf\u4e00\u884c\u7684\u5730\u5740\u662f\u865a\u62df\u5730\u5740\u76f4\u63a5\u5bfb\u5740\uff0c\u884c\u91cc\u9762\u5b58\u7684\u5c31\u662f\u7269\u7406\u9875\u8868\u5730\u5740\uff0c\u4ee5\u53ca\u662f\u5426\u5728\u4e3b\u5b58\u91cc(\u7c7b\u4f3c\u4e8e <code>valid bit</code> )\u3002</p> <p>\u53ef\u4ee5\u770b\u5230\u5176\u5b9e\u6211\u4eec\u8bbf\u95ee\u4e86\u4e24\u6b21\u5185\u5b58\uff0c\u5f53\u7136\u8fd9\u4e00\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528 <code>cache</code> \u6765\u52a0\u901f\u3002</p> <p><code>page table register</code> \u5f53\u4e2d\u5b58\u653e\u7684\u662f\u4e0d\u540c\u8fdb\u7a0b\u9875\u8868\u7684\u8d77\u59cb\u5730\u5740\uff0c\u6307\u5411\u9875\u8868\u7b2c\u4e00\u884c\u3002\u53d6\u865a\u62df\u9875\u8868\u5730\u5740\u6765\u5bfb\u5740\u627e\u5230\u7279\u5b9a\u7684\u9875\u8868\u7684\u884c\uff0c\u518d\u4e0e <code>page offset</code> \u62fc\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\u7269\u7406\u5730\u5740 \u3002</p>"},{"location":"Computer_Science/CO/Chapter%205/#page-fault","title":"Page fault","text":"<p>When the OS creates a process, it usually creates the space on disk for all the pages of a process.</p> <ul> <li>When a page fault occurs, the OS will be given control through exception mechanism.</li> <li>The OS will find the page in the disk by the page table.</li> <li>Next, the OS will bring the requested page into main memory. If all the pages in main memory are in use, the OS will use LRU strategy to choose a page to replace.</li> </ul> Question <p>How larger page table?</p> <p>Assume: </p> <ul> <li> <p>Virtual address is 32 bits</p> </li> <li> <p>page size is 4KB</p> </li> <li> <p>Entry size is 4 Bytes</p> </li> </ul> Answer <p></p>"},{"location":"Computer_Science/CO/Chapter%205/#tlb","title":"TLB","text":"<p>The TLB (Translation-lookaside Buffer) acts as Cache on the page table.</p> <p>\u7ed9\u9875\u8868\u4e00\u4e2a <code>cache</code> \uff0c\u90a3\u4e48\u4e0d\u76f4\u63a5\u5728\u5185\u5b58\u7684\u9875\u8868\u4e2d\u67e5\u800c\u662f\u7528 <code>cache</code> \u6765\u8bfb\uff0c\u5c31\u53ef\u4ee5\u63d0\u901f\u3002</p> <p>\u8fd9\u4e2a <code>cache</code> \u4e2d\u7684 <code>ref</code> \u662f\u5b9a\u671f\u6253\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u6e05\u96f6\u65f6\u95f4\u6233\uff0c\u4e00\u6bb5\u65f6\u95f4\u540e\u65b0\u8fdb\u6765\u7684 <code>ref</code> \u662f1\uff0c\u65e7\u7684 <code>ref</code> \u4e3a0\u3002</p> <p></p> <p></p> <p></p> <p>TLB\u5931\u6548\uff1a</p> <ol> <li> <p>\u9875\u5728\u5185\u5b58\u4e2d\uff0c\u53ea\u9700\u521b\u5efa\u7f3a\u5c11\u7684TLB\u8868\u9879\u3002</p> </li> <li> <p>\u9875\u4e0d\u5728\u5185\u5b58\u4e2d\uff0c\u9700\u8981\u5c06\u63a7\u5236\u8f6c\u79fb\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u6765\u5904\u7406\u7f3a\u9875\u5931\u6548\u3002</p> </li> </ol> <p>\u5904\u7406TLB\u5931\u6548\u6216\u7f3a\u9875\u5931\u6548\u9700\u8981\u4f7f\u7528\u4f8b\u5916\u673a\u5236\u6765\u4e2d\u65ad\u6d3b\u8dc3\u8fdb\u7a0b\uff0c\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u64cd\u4f5c\u7cfb\u7edf\uff0c\u7136\u540e\u518d\u6062\u590d\u6267\u884c\u88ab\u4e2d\u65ad\u7684\u8fdb\u7a0b\u3002\u7f3a\u9875\u5c06\u5728\u4e3b\u5b58\u8bbf\u95ee\u65f6\u949f\u5468\u671f\u7684\u67d0\u4e00\u65f6\u523b\u88ab\u53d1\u73b0\u3002\u4e3a\u4e86\u5728\u7f3a\u9875\u5931\u6548\u5904\u7406\u7ed3\u675f\u540e\u91cd\u542f\u6307\u4ee4\uff0c\u5fc5\u987b\u4fdd\u5b58\u5bfc\u81f4\u7f3a\u9875\u5931\u6548\u7684\u6307\u4ee4\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u3002\u7ba1\u7406\u6001\u4f8b\u5916\u7a0b\u5e8f\u8ba1\u6570\u5668(SEPC)\u7528\u4e8e\u4fdd\u5b58\u8be5\u503c\u3002</p> <p>\u6b64\u5916\uff0cTLB\u5931\u6548\u6216\u7f3a\u9875\u5931\u6548\u4f8b\u5916\u5fc5\u987b\u5728\u8bbf\u5b58\u53d1\u751f\u7684\u540c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u7684\u672b\u5c3e\u88ab\u5224\u5b9a\uff0c\u8fd9\u6837\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5c06\u5f00\u59cb\u8fdb\u884c\u4f8b\u5916\u5904\u7406\u800c\u4e0d\u662f\u7ee7\u7eed\u6b63\u5e38\u7684\u6307\u4ee4\u6267\u884c\u3002\u5982\u679c\u5728\u6b64\u65f6\u949f\u5468\u671f\u5185\u672a\u8bc6\u522b\u51fa\u7f3a\u9875\u5931\u6548\uff0c\u4e00\u6761 <code>load</code> \u6307\u4ee4\u53ef\u80fd\u4f1a\u6539\u5199\u5bc4\u5b58\u5668\uff0c\u800c\u5f53\u6211\u4eec\u5c1d\u8bd5\u91cd\u65b0\u542f\u52a8\u6307\u4ee4\u65f6\uff0c\u8fd9\u53ef\u80fd\u662f\u707e\u96be\u6027\u7684\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u8003\u8651\u6307\u4ee4 <code>lb x10,0(x10)</code> : \u8ba1\u7b97\u673a\u5fc5\u987b\u9632\u6b62\u5199\u6d41\u6c34\u7ebf\u9636\u6bb5\u7684\u53d1\u751f\uff1b\u5426\u5219\uff0c\u5c31\u65e0\u6cd5\u6b63\u786e\u91cd\u542f\u6307\u4ee4\uff0c\u56e0\u4e3a <code>x10</code> \u7684\u5185\u5bb9\u4f1a\u88ab\u7834\u574f\u3002store\u6307\u4ee4\u4e5f\u6709\u7c7b\u4f3c\u7684\u590d\u6742\u60c5\u51b5\u3002\u5f53\u53d1\u751f\u7f3a\u9875\u5931\u6548\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u963b\u6b62\u5199\u5185\u5b58\u7684\u64cd\u4f5c\u7684\u5b8c\u6210\uff0c\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u4ee4\u5230\u5185\u5b58\u7684\u5199\u63a7\u5236\u7ebf\u4e3a\u65e0\u6548\u6765\u5b8c\u6210\u7684\u3002</p> <p>\u4e00\u65e6\u64cd\u4f5c\u7cfb\u7edf\u77e5\u9053\u5f15\u8d77\u7f3a\u9875\u5931\u6548\u7684\u865a\u62df\u5730\u5740\uff0c\u5b83\u5fc5\u987b\u5b8c\u6210\u4ee5\u4e0b\u4e09\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>\u4f7f\u7528\u865a\u62df\u5730\u5740\u627e\u5230\u5bf9\u5e94\u7684\u9875\u8868\u8868\u9879\uff0c\u5e76\u5728\u8f85\u52a9\u5b58\u50a8\u4e2d\u627e\u5230\u5f15\u7528\u9875\u7684\u4f4d\u7f6e\u3002</li> <li>\u9009\u62e9\u8981\u66ff\u6362\u7684\u7269\u7406\u9875\uff1b\u5982\u679c\u6240\u9009\u9875\u662f\u810f\u7684\uff0c\u5219\u5fc5\u987b\u5148\u5c06\u5176\u5199\u5165\u8f85\u52a9\u5185\u5b58\uff0c\u7136\u540e\u624d\u80fd\u5c06\u65b0\u7684\u865a\u62df\u9875\u5199\u5230\u6b64\u7269\u7406\u9875\u4e2d\u3002</li> <li>\u542f\u52a8\u8bfb\u64cd\u4f5c\uff0c\u5c06\u88ab\u8bbf\u95ee\u7684\u9875\u4ece\u78c1\u76d8\u4e0a\u53d6\u56de\u5230\u6240\u9009\u62e9\u7684\u7269\u7406\u9875\u7684\u4f4d\u7f6e\u4e0a\u3002</li> </ol> <p>\u6570\u636e\u8bbf\u95ee\u5f15\u8d77\u7684\u7f3a\u9875\u5931\u6548\u4f8b\u5916\u5f88\u96be\u5904\u7406\uff0c\u662f\u7531\u4e8e\u4ee5\u4e0b\u4e09\u4e2a\u7279\u5f81\uff1a</p> <ol> <li>\u5b83\u4eec\u53d1\u751f\u5728\u6307\u4ee4\u7684\u4e2d\u95f4\uff0c\u4e0e\u6307\u4ee4\u7f3a\u9875\u5931\u6548\u4e0d\u540c\u3002</li> <li>\u5728\u4f8b\u5916\u5904\u7406\u7ed3\u675f\u4e4b\u524d\u65e0\u6cd5\u5b8c\u6210\u6307\u4ee4\u3002</li> <li>\u4f8b\u5916\u5904\u7406\u7ed3\u675f\u540e\uff0c\u6307\u4ee4\u5fc5\u987b\u91cd\u65b0\u542f\u52a8\uff0c\u5c31\u50cf\u4ec0\u4e48\u90fd\u6ca1\u53d1\u751f\u8fc7\u4e00\u6837\u3002</li> </ol>"},{"location":"Computer_Science/CO/Chapter%205/#possible-combinations-of-event","title":"Possible combinations of Event","text":"<ul> <li><code>TLB hit</code> \u4ee3\u8868\u6570\u636e\u5728\u5185\u5b58\u91cc</li> <li>\u5982\u679c <code>TLB</code> hit \u90a3\u4e48 <code>page table</code> \u91cc\u9762\u4e5f\u4f1a hit \uff0c\u800c <code>TLB</code> miss \uff0c<code>page table</code> \u4e5f\u662f\u53ef\u4ee5 hit\u7684</li> <li>\u4f46\u662f\u662f\u5426\u5728 <code>cache</code> \u91cc\u9762\u5374\u662f\u4e0d\u4e00\u5b9a\u7684</li> </ul>"},{"location":"Computer_Science/CO/Chapter%206/","title":"Chapter 6","text":"<p> \u7ea6 4818 \u4e2a\u5b57  12 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 24 \u5206\u949f</p> <p>I/O \u9700\u8981\u6709\u53ef\u6269\u5c55\u6027\uff08\u79cd\u7c7b\u3001\u4ea4\u4e92\u7684\u6570\u636e\u91cf\u3001\u9891\u7387\uff09\uff0c\u53ef\u9760\u6027\u3002</p> <p>\u5982\u4f55\u8bc4\u4f30 <code>I/O system performance</code> \u662f\u5f88\u56f0\u96be\u7684\u3002</p>"},{"location":"Computer_Science/CO/Chapter%206/#typical-collection-of-io-device","title":"Typical collection of I/O device","text":"<ul> <li>\u78c1\u76d8\u4e0d\u662f\u5185\u5b58\uff0c\u662f\u5916\u8bbe\u3002</li> <li>\u663e\u793a\u5668\uff0c\u952e\u76d8\u9f20\u6807\u7b49\u5916\u8bbe\u3002</li> <li>\u7f51\u7edc\u3002</li> </ul>"},{"location":"Computer_Science/CO/Chapter%206/#three-characters-of-io","title":"Three characters of I/O","text":"<ul> <li> <p>Behavior</p> </li> <li> <p>\u8f93\u5165\u8bbe\u5907\u6216\u8f93\u51fa\u8bbe\u5907</p> <p>\u8f93\u5165\u662f\u53ea\u8bfb\uff0c\u8f93\u51fa\u662f\u53ea\u5199\u4e0d\u8bfb\uff0c\u5b58\u50a8\u662f\u53ef\u4ee5\u88ab\u91cd\u590d\u8bfb\u91cd\u590d\u5199\u3002</p> </li> <li> <p>Partner</p> </li> <li> <p>\u53ef\u4ee5\u548c\u4eba\u6253\u4ea4\u9053\uff08\u952e\u76d8\u9f20\u6807\uff09\uff0c\u4e5f\u53ef\u4ee5\u548c\u673a\u5668\uff08\u4f8b\u5982\u7f51\u7edc\uff09\u3002</p> </li> <li> <p>Data rate</p> </li> <li> <p>\u6570\u636e\u5728 <code>I/O</code> \u8bbe\u5907\u4e0e\u4e3b\u5b58\u6216\u5b58\u50a8\u5668\u4e4b\u95f4\u4f20\u8f93\u7684\u5cf0\u503c\u901f\u5ea6\u3002</p> </li> <li> <p>\u6570\u636e\u91cf\u5728\u4e0d\u540c\u7684 <code>I/O</code> \u8bbe\u5907\u91cc\u5dee\u522b\u4e5f\u5f88\u5927\u3002</p> </li> </ul> <p>I/O Performance Depends on the Application</p> <ul> <li>Throughput</li> </ul> <p>\u6211\u4eec\u5982\u4f55\u8bc4\u6d4bI/O\u6027\u80fd\u5e38\u5e38\u53d6\u51b3\u4e8e\u5177\u4f53\u5e94\u7528\u3002\u5728\u67d0\u4e9b\u73af\u5883\u4e0b\uff0c\u6211\u4eec\u6ce8\u91cd\u7cfb\u7edf\u7684\u541e\u5410\u91cf\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>I/O</code> \u5e26\u5bbd\u5c06\u662f\u6700\u91cd\u8981\u7684\u3002\u4f46\u5373\u4fbf\u662f <code>I/O</code> \u5e26\u5bbd\u53c8\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u6d4b\u91cf\uff1a</p> <ol> <li> <p>\u5728\u67d0\u4e00\u65f6\u95f4\u5185\u6211\u4eec\u80fd\u4ece\u7cfb\u7edf\u4e2d\u4f20\u51fa\u591a\u5c11\u6570\u636e?</p> </li> <li> <p>\u5728\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6211\u4eec\u80fd\u591f\u505a\u591a\u5c11I/O\u64cd\u4f5c?</p> </li> </ol> <p>\u6700\u597d\u7684\u6027\u80fd\u6d4b\u91cf\u65b9\u6cd5\u7684\u786e\u5b9a\u53d6\u51b3\u4e8e\u5b9e\u9645\u7684\u5de5\u4f5c\u73af\u5883\u3002</p> <ul> <li> <p>Response time </p> </li> <li> <p>\u5b8c\u6210\u7279\u5b9a\u4efb\u52a1\u603b\u5171\u9700\u8981\u7684\u65f6\u95f4</p> </li> <li> <p>\u4f8b\u5982\u4f7f\u7528\u9f20\u6807\u65f6\u6ce8\u91cd\u8003\u8651</p> </li> <li> <p>both throughput and response time</p> </li> </ul>"},{"location":"Computer_Science/CO/Chapter%206/#the-organization-of-hard-disk","title":"The Organization of Hard Disk","text":"<ul> <li>\u67f1\u9762(cylinder)\uff1a\u5728\u6240\u6709\u76d8\u9762\u7684\u67d0\u4e00\u7ed9\u5b9a\u4f4d\u7f6e\u4e0b\uff0c\u6240\u6709\u8bfb/\u5199\u5934\u4e0b\u9762\u7684\u8f68\u9053\u6240\u5f62\u6210\u7684\u67f1\u9762\u3002\u4e3a\u4e86\u8bfb/\u5199\u4fe1\u606f\uff0c\u8bfb/\u5199\u5934\u5fc5\u987b\u88ab\u79fb\u52a8\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002\u8bfb\u5199\u6bcf\u5f20\u8868\u9762\u7684\u78c1\u5934\u90fd\u88ab\u8fde\u5728\u4e00\u8d77\u5e76\u4e14\u4e00\u8d77\u79fb\u52a8\uff0c\u56e0\u6b64\u6bcf\u4e2a\u5934\u5904\u5728\u76f8\u5e94\u8868\u9762\u7684\u76f8\u540c\u7684\u8f68\u9053\u4e0a\u3002</li> <li>\u8f68\u9053(track)\uff1a\u5171\u540c\u7ec4\u6210\u78c1\u76d8\u7684\u8868\u9762\u7684\u4e0a\u5343\u4e2a\u540c\u5fc3\u5706\u4e2d\u7684\u4e00\u4e2a\u3002</li> <li>\u6247\u533a(sector)\uff1a\u7ec4\u6210\u78c1\u76d8\u8f68\u9053\u7684\u591a\u4e2a\u6bb5\u4e2d\u7684\u4e00\u4e2a;\u6247\u533a\u662f\u78c1\u76d8\u8bfb\u5199\u4fe1\u606f\u7684\u6700\u5c0f\u5355\u4f4d\u3002</li> </ul> <p>\u4e3a\u4e86\u5b58\u53d6\u6570\u636e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u901a\u8fc7\u4e00\u4e2a\u4e09\u6b65\u8fc7\u7a0b\u6765\u6307\u5f15\u78c1\u76d8\u3002</p> <ol> <li> <p>\u5bfb\u9053\uff1a\u628a\u78c1\u5934\u5b9a\u4f4d\u5230\u6b63\u786e\u7684\u78c1\u9053\u4e0a\u3002\u78c1\u5934\u627e\u5230\u6b63\u786e\u78c1\u9053\u82b1\u8d39\u7684\u65f6\u95f4\u4e3a\u5bfb\u9053\u65f6\u95f4 (seek time) \u3002</p> </li> <li> <p>\u65cb\u8f6c\u65f6\u5ef6/\u65cb\u8f6c\u5ef6\u8fdf\uff1a\u78c1\u5934\u5230\u8fbe\u6b63\u786e\u78c1\u9053\u540e\uff0c\u9700\u8981\u7b49\u5f85\u6b63\u786e\u7684\u6247\u533a\u8f6c\u5230\u8bfb\u5199\u5934\u4e0b\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u3002\u53d6\u5f97\u6240\u9700\u8981\u4fe1\u606f\u7684\u5e73\u5747\u65f6\u5ef6\u662f\u78c1\u76d8\u65cb\u8f6c\u534a\u5468\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002</p> </li> <li> <p>\u4f20\u8f93\u65f6\u95f4\uff1a\u4f20\u8f93\u4e00\u5757\uff08\u4e00\u822c\u662f\u4e00\u4e2a\u6247\u533a\uff09\u6570\u636e\u4f4d\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002\u4f20\u8f93\u65f6\u95f4\u662f\u6247\u533a\u5927\u5c0f\u3001\u65cb\u8f6c\u901f\u5ea6\u548c\u78c1\u9053\u8bb0\u5f55\u5bc6\u5ea6\u7684\u51fd\u6570\u3002</p> </li> <li> <p>\u63a7\u5236\u5668\u65f6\u95f4(controller time)\uff1a\u78c1\u76d8\u63a7\u5236\u5668(disk controller)\u901a\u5e38\u7528\u6765\u7cbe\u7ec6\u5730\u63a7\u5236\u78c1\u76d8\u4ee5\u53ca\u78c1\u76d8\u4e0e\u5185\u5b58\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u5b83\u662f\u5728\u8fdb\u884cI/0\u5b58\u53d6\u64cd\u4f5c\u65f6\u63a7\u5236\u5668\u5e26\u6765\u7684\u5f00\u9500\u3002</p> </li> </ol> <p>\u6267\u884c <code>I/O</code> \u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u5c06\u7531\u8fd9\u56db\u6bb5\u65f6\u95f4\u7ec4\u6210\uff0c\u6b64\u5916\u8fd8\u6709\u56e0\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u78c1\u76d8\u800c\u5e26\u6765\u7684\u7b49\u5f85\u65f6\u95f4\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%206/#dependability-reliability-availability","title":"Dependability, Reliability, Availability","text":""},{"location":"Computer_Science/CO/Chapter%206/#_1","title":"\u53ef\u4f9d\u8d56\u6027","text":"<p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u53ef\u4f9d\u8d56\u6027\u6307\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u8d28\u91cf\u8fbe\u5230\u6709\u7406\u7531\u7ed9\u4e88\u4fe1\u4efb\u7684\u6c34\u5e73\u3002\u7cfb\u7edf\u63d0\u4f9b\u7684\u670d\u52a1\u662f\u6307\u5176\u4ed6\u7cfb\u7edf\u4e0e\u672c\u7cfb\u7edf\u7528\u6237\u4ea4\u4e92\u65f6\u89c2\u5bdf\u5230\u7684\u672c\u7cfb\u7edf\u7684\u5b9e\u9645\u884c\u4e3a\u3002\u6bcf\u4e00\u4e2a\u6a21\u5757\u5747\u6709\u6307\u5b9a\u7684\u7406\u60f3\u884c\u4e3a\uff0c\u5176\u4e2d\u670d\u52a1\u8bf4\u660e\u5e94\u662f\u5bf9\u671f\u671b\u884c\u4e3a\u5e7f\u6cdb\u8ba4\u540c\u7684\u63cf\u8ff0\u3002\u5f53\u5b9e\u9645\u884c\u4e3a\u504f\u79bb\u6307\u5b9a\u884c\u4e3a\u65f6\uff0c\u7cfb\u7edf\u53d1\u751f\u9519\u8bef\u3002</p> <p>\u80fd\u591f\u770b\u5230\u7cfb\u7edf\u5728\u8bf4\u660e\u4e66\u6240\u8ff0\u7684\u5982\u4e0b\u4e24\u79cd\u670d\u52a1\u72b6\u6001\u4e4b\u95f4\u53d8\u5316\uff1a</p> <ol> <li> <p>\u670d\u52a1\u5b9e\u73b0(Service accomplishment)\uff1a\u8fd9\u91cc\u670d\u52a1\u6309\u7167\u9884\u5b9a\u65b9\u5f0f\u63d0\u4f9b\u3002</p> </li> <li> <p>\u670d\u52a1\u4e2d\u65ad(Service interruption)\uff1a\u8fd9\u91cc\u63d0\u4f9b\u7684\u670d\u52a1\u4e0d\u540c\u4e8e\u9884\u5b9a\u670d\u52a1\u3002</p> </li> </ol> <p>\u72b6\u60011\u81f3\u72b6\u60012\u7684\u8f6c\u6362\u662f\u7531\u6545\u969c\u5f15\u8d77\u7684\uff0c\u800c\u72b6\u60012\u81f3\u72b6\u60011\u7684\u8f6c\u6362\u88ab\u79f0\u4e3a\u6062\u590d(restorations)\u3002\u6545\u969c\u53ef\u4ee5\u662f\u6c38\u4e45\u6216\u95f4\u6b47\u7684\u3002\u540e\u8005\u662f\u66f4\u96be\u5206\u6790\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6b64\u65f6\u7cfb\u7edf\u5728\u4e24\u79cd\u72b6\u6001\u4e4b\u95f4\u6296\u52a8\uff1b\u76f8\u6bd4\u8f83\u800c\u8a00\uff0c\u6c38\u4e45\u6545\u969c\u7684\u5206\u6790\u8981\u5bb9\u6613\u5f97\u591a\u3002</p>"},{"location":"Computer_Science/CO/Chapter%206/#_2","title":"\u53ef\u9760\u6027","text":"<p>\u8fde\u7eed\u670d\u52a1\u65f6\u95f4\u7684\u5ea6\u91cf\u2014\u2014\u6216\u8005\u4ece\u53c2\u8003\u70b9\u81f3\u51fa\u73b0\u6545\u969c\u6240\u9700\u65f6\u95f4\u7684\u91cf\u5ea6\u3002</p> <p>MTTF\uff08\u78c1\u76d8\u5e73\u5747\u6545\u969c\u65f6\u95f4\uff09</p> <p>MTTR\uff08\u670d\u52a1\u4e2d\u65ad\u7528\u4fee\u7406\u7684\u5e73\u5747\u65f6\u95f4\uff09</p> <p>MTBF\uff08\u6545\u969c\u95f4\u7684\u5e73\u5747\u65f6\u95f4\uff09 = MTTF  + MTTR</p>"},{"location":"Computer_Science/CO/Chapter%206/#_3","title":"\u53ef\u7528\u6027","text":"<p>\u670d\u52a1\u5b9e\u73b0\u7684\u91cf\u5ea6\u3002</p> \\[\\text{\u53ef\u7528\u6027} = \\frac{MTTF}{MTTF + MTTR}\\]"},{"location":"Computer_Science/CO/Chapter%206/#mttf","title":"\u4e09\u79cd\u6539\u8fdbMTTF \u7684\u65b9\u6cd5","text":"<p>\u4eba\u7684\u64cd\u4f5c\u662f\u9519\u8bef\u7684\u4e3b\u8981\u6765\u6e90\u3002</p> <ol> <li> <p>\u9519\u8bef\u907f\u514d(fault avoidance):\u901a\u8fc7\u6784\u5efa\u6280\u672f\u9632\u6b62\u9519\u8bef\u7684\u53d1\u751f\u3002</p> </li> <li> <p>\u9519\u8bef\u627f\u53d7(fault tolerance):\u5229\u7528\u5197\u4f59\u6280\u672f\u5141\u8bb8\u670d\u52a1\u5728\u9519\u8bef\u53d1\u751f\u65f6\u4ecd\u80fd\u7167\u5e38\u5de5\u4f5c\uff0c\u8fd9\u91cc\u9519\u8bef\u4e3b\u8981\u6307\u786c\u4ef6\u9519\u8bef\u3002</p> </li> <li> <p>\u9519\u8bef\u9884\u6d4b(fault forecasting):\u9884\u6d4b\u9519\u8bef\u7684\u5b58\u5728\u4e0e\u4ea7\u751f\uff0c\u5305\u62ec\u786c\u4ef6\u9519\u8bef\u548c\u8f6f\u4ef6\u9519\u8bef\u3002</p> </li> </ol> <p>\u7f29\u77edMTTR\u53ef\u4ee5\u548c\u589e\u5927MTTF\u4e00\u6837\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u6bd4\u5982\uff0c\u7528\u4e8e\u9519\u8bef\u63a2\u6d4b\u3001\u8bca\u65ad\u548c\u4fee\u590d\u7684\u5de5\u5177\u6709\u52a9\u4e8e\u51cf\u5c11\u4eba\u3001\u8f6f\u4ef6\u548c\u786c\u4ef6\u4fee\u590d\u9519\u8bef\u7684\u65f6\u95f4\u3002</p>"},{"location":"Computer_Science/CO/Chapter%206/#raid","title":"RAID","text":"<p>\u5229\u7528\u5197\u4f59\u6765\u589e\u52a0\u78c1\u76d8\u5b58\u50a8\u7684\u53ef\u7528\u6027\uff0c\u8fd9\u4e00\u6280\u672f\u88ab\u7528\u4e8e\u5ec9\u4ef7\u78c1\u76d8\u5197\u4f59\u9635\u5217\u3002</p> <p>Files are \"striped\" across multiple disks. Redundancy yields high data availability. Disks will still fail. Contents reconstructed from data redundantly stored in the array.</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%206/#raid-0-no-redundancy","title":"RAID 0: No Redundancy","text":"<p>\u4ec5\u4ec5\u628a\u6570\u636e\u5206\u6563\u5230\u591a\u4e2a\u78c1\u76d8\uff0c\u79f0\u4e3a\u6761\u5e26\u5316\uff0c\u81ea\u52a8\u628a\u8bbf\u95ee\u5206\u5230\u51e0\u4e2a\u78c1\u76d8\u4e0a\u3002\u5728\u4e00\u7ec4\u78c1\u76d8\u4e0a\u8fdb\u884c\u6761\u5e26\u5316\u4f7f\u5f97\u8fd9\u4e00\u7ec4\u78c1\u76d8\u5bf9\u4e8e\u8f6f\u4ef6\u6765\u8bf4\u662f\u4e00\u4e2a\u5927\u78c1\u76d8\uff0c\u4ece\u800c\u7b80\u5316\u4e86\u5b58\u50a8\u7ba1\u7406\u3002\u8fd9\u6837\u5bf9\u5927\u89c4\u6a21\u8bbf\u95ee\u6765\u8bf4\u4e5f\u6539\u8fdb\u4e86\u6027\u80fd\uff0c\u56e0\u4e3a\u591a\u4e2a\u78c1\u76d8\u53ef\u4ee5\u540c\u65f6\u64cd\u4f5c\u3002</p> <p><code>RAID0</code> \u8bf4\u6cd5\u6709\u4e9b\u4e0d\u59a5\uff0c\u56e0\u4e3a\u6839\u672c\u6ca1\u6709\u5197\u4f59\u3002\u7136\u800c\uff0cRAID\u7684\u7ea7\u522b\u901a\u5e38\u7531\u64cd\u4f5c\u5458\u5728\u521b\u5efa\u5b58\u50a8\u7cfb\u7edf\u65f6\u8bbe\u7f6e\uff0c\u800cRAID0\u7ecf\u5e38\u88ab\u5217\u4e3a\u5176\u4e2d\u4e00\u4e2a\u9009\u9879\u3002\u56e0\u6b64\uff0cRAIDO\u7684\u8bf4\u6cd5\u5c31\u88ab\u5e7f\u6cdb\u4f7f\u7528\u4e86\u3002</p>"},{"location":"Computer_Science/CO/Chapter%206/#raid-1-disk-mirroringshadowing","title":"RAID 1: Disk Mirroring/Shadowing","text":"<p>\u4f7f\u7528\u6bd4RAID0\u591a\u4e00\u500d\u7684\u78c1\u76d8\u6570\u3002\u6570\u636e\u5199\u5165\u67d0\u4e2a\u76d8\u65f6\uff0c\u540c\u6837\u7684\u6570\u636e\u4f1a\u5199\u5165\u5176\u5197\u4f59\u76d8\uff0c\u56e0\u6b64\u59cb\u7ec8\u5b58\u5728\u4fe1\u606f\u7684\u4e24\u4efd\u526f\u672c\u3002\u5982\u679c\u4e00\u4e2a\u78c1\u76d8\u51fa\u73b0\u6545\u969c\uff0c\u7cfb\u7edf\u5c31\u8f6c\u5411\u5176\u201c\u955c\u50cf\u201d\u8bfb\u53d6\u5185\u5bb9\u4ee5\u83b7\u5f97\u6240\u9700\u4fe1\u606f\u3002\u955c\u50cf\u662f\u6700\u6602\u8d35\u7684RAID\u65b9\u6848\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u6700\u591a\u7684\u78c1\u76d8\u3002</p>"},{"location":"Computer_Science/CO/Chapter%206/#raid-2","title":"RAID 2","text":"<p>RAID2\u501f\u7528\u4e86\u4e3b\u5b58\u5e38\u7528\u7684\u9519\u8bef\u68c0\u67e5\u548c\u6062\u590d\u6280\u672f\u3002RAID2\u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u4e0d\u505a\u4ecb\u7ecd\u3002</p>"},{"location":"Computer_Science/CO/Chapter%206/#raid-3-bit-interleaved-parity-disk","title":"RAID 3: Bit-Interleaved Parity Disk","text":"<p>\u589e\u52a0\u53ef\u7528\u6027\u7684\u5f00\u9500\u53ef\u4ee5\u51cf\u81f3 \\(\\frac{1}{N}\\) ,\u8fd9\u91ccN\u4e3a\u4fdd\u62a4\u7ec4\u5185\u78c1\u76d8\u7684\u6570\u76ee\u3002</p> <p>\u6211\u4eec\u4e0d\u518d\u4e3a\u6bcf\u5757\u78c1\u76d8\u505a\u4e00\u4e2a\u539f\u59cb\u6570\u636e\u7684\u5b8c\u5168\u62f7\u8d1d\uff0c\u800c\u53ea\u9700\u8981\u52a0\u5165\u8db3\u591f\u7684\u5197\u4f59\u4fe1\u606f\u4ee5\u4fbf\u5728\u51fa\u9519\u7684\u65f6\u5019\u6062\u590d\u4e22\u5931\u7684\u4fe1\u606f\u3002\u8bfb\u5199\u64cd\u4f5c\u5728\u7ec4\u5185\u6240\u6709\u78c1\u76d8\u4e0a\u8fdb\u884c\uff0c\u4e00\u4e2a\u989d\u5916\u7684\u78c1\u76d8\u5b58\u6709\u6821\u9a8c\u4fe1\u606f\u4ee5\u9632\u9519\u8bef\u7684\u53d1\u751f\u3002\u4f8b\u5982\u4f7f\u7528\u5947\u5076\u6821\u9a8c(parity)\u7b56\u7565\u6765\u5b9e\u73b0\u3002</p> <p>\u4e0eRAID1\u4e0d\u540c\uff0cRAID 3\u5fc5\u987b\u8bfb\u5f88\u591a\u78c1\u76d8\u624d\u80fd\u786e\u5b9a\u4e22\u5931\u7684\u6570\u636e\u3002\u8be5\u6280\u672f\u80cc\u540e\u7684\u5047\u5b9a\u5c31\u662f\u7528\u66f4\u957f\u65f6\u95f4\u6765\u6062\u590d\u9519\u8bef\u4f46\u4f7f\u7528\u66f4\u5c11\u7684\u5197\u4f59\u5b58\u50a8\u662f\u4e00\u79cd\u597d\u7684\u6743\u8861\u3002</p>"},{"location":"Computer_Science/CO/Chapter%206/#raid-4-block-interleaved-parity","title":"RAID 4: Block-Interleaved Parity","text":"<p><code>RAID4</code> \u4f7f\u7528\u540c <code>RAID3</code> \u4e00\u6837\u7684\u6570\u636e\u78c1\u76d8\u548c\u6821\u9a8c\u76d8\u7684\u6bd4\u7387\uff0c\u4f46\u8bbf\u95ee\u6570\u636e\u7684\u65b9\u5f0f\u4e0d\u540c\u3002\u5947\u5076\u6821\u9a8c\u7801\u4ee5\u5757\u4e3a\u5355\u4f4d\u5b58\u50a8\uff0c\u4e0e\u4e00\u7ec4\u6570\u636e\u5757\u76f8\u5173\u3002</p> <p>\u5728RAID3\u4e2d\uff0c\u6bcf\u4e00\u6b21\u8bbf\u95ee\u90fd\u7528\u5230\u6240\u6709\u78c1\u76d8\u3002\u7136\u800c\u67d0\u4e9b\u5e94\u7528\u504f\u91cd\u4e8e\u8f83\u5c0f\u7684\u6570\u636e\u8bbf\u95ee\uff0c\u5141\u8bb8\u5e76\u884c\u5730\u53d1\u751f\u591a\u4e2a\u72ec\u7acb\u8bbf\u95ee\u3002</p> <p>\u8fd9\u5c31\u662fRAID 4~6\u7ea7\u7684\u76ee\u7684\u3002\u7531\u4e8e\u8bfb\u64cd\u4f5c\u65f6\u9700\u8981\u68c0\u67e5\u6bcf\u4e2a\u6247\u533a\u7684\u9519\u8bef\u68c0\u6d4b\u4fe1\u606f\u6765\u5224\u65ad\u6570\u636e\u6b63\u786e\u4e0e\u5426\uff0c\u53ea\u8981\u6700\u5c0f\u8bbf\u95ee\u6570\u636e\u91cf\u4ecd\u4e3a\u4e00\u4e2a\u6247\u533a\uff0c\u5404\u78c1\u76d8\u4e0a\u8fd9\u4e9b\u201c\u5c0f\u6570\u636e\u91cf\u7684\u8bfb\u64cd\u4f5c\u201d\u5c31\u53ef\u4ee5\u72ec\u7acb\u5730\u8fdb\u884c\u3002\u5728RAID\u73af\u5883\u4e2d\uff0c\u5c0f\u6570\u636e\u91cf\u8bbf\u95ee\u5728\u4fdd\u62a4\u7ec4\u4e2d\u7684\u4e00\u4e2a\u78c1\u76d8\u4e2d\u53d1\u751f\uff0c\u800c\u5927\u6570\u636e\u91cf\u8bbf\u95ee\u9700\u8981\u7528\u5230\u4fdd\u62a4\u7ec4\u4e2d\u7684\u6240\u6709\u78c1\u76d8\u3002</p> <p>\u5199\u64cd\u4f5c\u662f\u53e6\u4e00\u4e2a\u9ebb\u70e6\u3002\u770b\u4e0a\u53bb\u4f3c\u4e4e\u6bcf\u4e00\u6b21\u5c0f\u6570\u636e\u91cf\u7684\u5199\u64cd\u4f5c\u90fd\u9700\u8981\u8bbf\u95ee\u5176\u4ed6\u78c1\u76d8\u6765\u8bfb\u53d6\u91cd\u65b0\u8ba1\u7b97\u65b0\u7684\u5947\u5076\u6821\u9a8c\u6240\u9700\u7684\u5176\u4ed6\u4fe1\u606f\u3002\u4e00\u6b21\u201c\u5c0f\u6570\u636e\u91cf\u7684\u5199\u64cd\u4f5c\u201d,\u9700\u8981\u8bfb\u53d6\u65e7\u6570\u636e\u548c\u5947\u5076\u6821\u9a8c\uff0c\u6dfb\u52a0\u65b0\u4fe1\u606f\uff0c\u63a5\u7740\u628a\u65b0\u7684\u5947\u5076\u6821\u9a8c\u548c\u5199\u5165\u6821\u9a8c\u76d8\uff0c\u628a\u65b0\u7684\u6570\u636e\u5199\u5165\u6570\u636e\u76d8\u3002</p> <p>\u800c\u5728\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u7531\u4e8e <code>RAID 4</code> \u662f\u4e00\u4e2a\u6574\u4e2a\u7684\u6821\u9a8c\u76d8, \u5728 <code>small read</code> \u7684\u60c5\u51b5\u4e0b\u901f\u5ea6\u4f1a\u53d8\u5feb\uff0c\u56e0\u4e3a\u53ef\u4ee5\u540c\u65f6\u8bfb\u3002 <code>large write</code> \u4e5f\u9ad8\u6548\u3002 \u800c <code>large read</code> \u8981\u6392\u961f\uff0c\u5bf9\u4e8e <code>small write</code> \u4f1a\u8981\u6c42\u5b9e\u65f6\u7b97\u51fa <code>p</code> \u7684\u503c\u3002\u56e0\u4e3a\u90fd\u8981\u5199\u6821\u9a8c\u76d8\u5c31\u53c8\u8981\u6392\u961f\u800c\u53c8\u8981\u540c\u4e00\u884c\u5168\u8bfb\u624d\u80fd\u5199\u6821\u9a8c\u76d8\u3002</p> <p></p> <p>\u51cf\u5c0f\u5f00\u9500\u7684\u5173\u952e\u5728\u4e8e\u6821\u9a8c\u7801\u4e0d\u8fc7\u662f\u4fe1\u606f\u7684\u4e00\u4e2a\u603b\u548c\uff1b\u901a\u8fc7\u89c2\u5bdf\u5199\u5165\u65b0\u4fe1\u606f\u540e\u54ea\u4e9b\u4f4d\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5c31\u53ea\u9700\u6539\u53d8\u6821\u9a8c\u76d8\u4e0a\u7684\u5bf9\u5e94\u4f4d\u4fe1\u606f\u5373\u53ef\u3002\u6211\u4eec\u5fc5\u987b\u4ece\u8981\u5199\u7684\u78c1\u76d8\u8bfb\u53d6\u65e7\u6570\u636e\uff0c\u7528\u65e7\u6570\u636e\u4e0e\u65b0\u6570\u636e\u6bd4\u8f83\uff0c\u770b\u54ea\u4e9b\u4f4d\u53d1\u751f\u4e86\u53d8\u5316\u3002\u8bfb\u65e7\u5947\u5076\u6821\u9a8c\u548c\uff0c\u6539\u53d8\u5bf9\u5e94\u7684\u4f4d\uff0c\u7136\u540e\u5199\u5165\u65b0\u6570\u636e\u4ee5\u53ca\u65b0\u7684\u6821\u9a8c\u548c\u3002\u8fd9\u6837\uff0c\u4e00\u6b21\u5c0f\u6570\u636e\u91cf\u7684\u5199\u64cd\u4f5c\u5305\u542b\u5bf9\u4e24\u4e2a\u78c1\u76d8\u76844\u6b21\u8bbf\u95ee\uff0c\u800c\u4e0d\u662f\u8bbf\u95ee\u6240\u6709\u7684\u78c1\u76d8\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%206/#raid-5-high-io-rate-interleaved-parity","title":"RAID 5: High I/O Rate Interleaved Parity","text":"<p>\u5728RAID 5\u4e2d\u6570\u636e\u5757\u7684\u6bcf\u884c\u7684\u6821\u9a8c\u4fe1\u606f\u4e0d\u518d\u9650\u5b9a\u4e8e\u5355\u4e2a\u78c1\u76d8\u3002\u8fd9\u79cd\u7ec4\u7ec7\u65b9\u5f0f\u4f7f\u5f97\u591a\u4e2a\u5199\u64cd\u4f5c\u53ef\u4ee5\u540c\u65f6\u53d1\u751f\uff0c\u53ea\u8981\u6821\u9a8c\u5757\u4e0d\u5728\u76f8\u540c\u7684\u78c1\u76d8\u4e0a\u3002</p> <p></p>"},{"location":"Computer_Science/CO/Chapter%206/#raid-6-pq-redundancy","title":"RAID 6: P+Q Redundancy","text":"<p>\u57fa\u4e8e\u5947\u5076\u6821\u9a8c\u7684\u673a\u5236\u53ef\u4f7f\u7cfb\u7edf\u514d\u53d7\u5355\u4e2a\u53ef\u81ea\u52a8\u8bc6\u522b\u7684\u9519\u8bef\u7684\u7834\u574f\u3002\u5f53\u5355\u4e2a\u9519\u8bef\u7ea0\u6b63\u673a\u5236\u4e0d\u8db3\u4ee5\u4fdd\u62a4\u7cfb\u7edf\u65f6\uff0c\u53ef\u5229\u7528\u5947\u5076\u6821\u9a8c\u5bf9\u6570\u636e\u548c\u53e6\u4e00\u4e2a\u6821\u9a8c\u76d8\u7684\u4fe1\u606f\u8fdb\u884c\u4e8c\u6b21\u8ba1\u7b97\u3002\u4e8c\u6b21\u6821\u9a8c\u5757\u673a\u5236\u53ef\u4f7f\u7cfb\u7edf\u4ece\u4e8c\u6b21\u9519\u8bef\u4e2d\u6062\u590d\u8fc7\u6765\u3002\u56e0\u6b64\uff0c\u5b83\u7684\u5b58\u50a8\u5f00\u9500\u662fRAID 5\u7684\u4e24\u500d\u3002</p> <p>\u5c0f\u6570\u636e\u5199\u64cd\u4f5c\u6377\u5f84\u8fd8\u6210\u7acb\uff0c\u53ea\u662f\u73b0\u5728\u8981\u8bbf\u95ee6\u4e2a\u76d8(\u800c\u4e0d\u662f4\u4e2a\u76d8)\u4ee5\u66f4\u65b0P\u548cQ\u4fe1\u606f\u3002</p> <p></p> <p></p>"},{"location":"Computer_Science/CO/Chapter%206/#buses","title":"Buses","text":"<p>\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u540c\u7684\u5b50\u7cfb\u7edf\u5fc5\u987b\u5177\u6709\u8fde\u63a5\u5f7c\u6b64\u7684\u63a5\u53e3\u3002\u6bd4\u5982\uff0c\u5185\u5b58\u548c\u5904\u7406\u5668\u9700\u8981\u901a\u4fe1\uff0c\u5904\u7406\u5668\u548cI/O\u8bbe\u5907\u4e5f\u9700\u8981\u901a\u4fe1\u3002\u591a\u5e74\u4ee5\u6765\uff0c\u8fd9\u4e9b\u5de5\u4f5c\u90fd\u662f\u7531\u603b\u7ebf\u6765\u5b8c\u6210\u7684\u3002\u603b\u7ebf\u662f\u4e00\u6761\u5171\u4eab\u7684\u901a\u4fe1\u94fe\u8def\uff0c\u5b83\u7528\u4e00\u5957\u7ebf\u8def\u6765\u8fde\u63a5\u591a\u4e2a\u5b50\u7cfb\u7edf\u3002\u603b\u7ebf\u7ed3\u6784\u7684\u4e24\u4e2a\u4e3b\u8981\u4f18\u70b9\u662f\u529f\u80fd\u591a\u548c\u6210\u672c\u4f4e\u3002\u901a\u8fc7\u5b9a\u4e49\u4e00\u79cd\u8fde\u63a5\u65b9\u6848\uff0c\u5c31\u80fd\u591f\u65b9\u4fbf\u5730\u6dfb\u52a0\u65b0\u8bbe\u5907\uff0c\u5916\u56f4\u8bbe\u5907\u4e5f\u53ef\u4ee5\u5728\u4f7f\u7528\u540c\u7c7b\u603b\u7ebf\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e4b\u95f4\u79fb\u52a8\u3002\u800c\u4e14\uff0c\u56e0\u4e3a\u540c\u4e00\u5957\u7ebf\u8def\u88ab\u591a\u4e2a\u8def\u5f84\u5171\u4eab\uff0c\u6240\u4ee5\u603b\u7ebf\u5177\u6709\u8f83\u597d\u7684\u6210\u672c\u6548\u76ca\u3002</p> <p>\u603b\u7ebf\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\u5b83\u4f1a\u4ea7\u751f\u901a\u4fe1\u74f6\u9888\uff0c\u8fd9\u53ef\u80fd\u4f1a\u9650\u5236 <code>I/O</code> \u7684\u6700\u5927\u541e\u5410\u91cf\u3002\u5f53 <code>I/O</code> \u6570\u636e\u4f20\u8f93\u5fc5\u987b\u901a\u8fc7\u5355\u4e2a\u603b\u7ebf\u7684\u65f6\u5019\uff0c\u8fd9\u6761\u603b\u7ebf\u7684\u5e26\u5bbd\u5c31\u4f1a\u9650\u5236 <code>I/O</code> \u7684\u6700\u5927\u541e\u5410\u91cf\u3002</p> <p>\u603b\u7ebf\u8bbe\u8ba1\u975e\u5e38\u56f0\u96be\uff0c\u5176\u4e2d\u7684\u4e00\u4e2a\u539f\u56e0\u662f\u6700\u9ad8\u603b\u7ebf\u901f\u5ea6\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u88ab\u5982\u4e0b\u7269\u7406\u56e0\u7d20\u6240\u9650\u5236\uff1a\u603b\u7ebf\u957f\u5ea6\u3001\u8bbe\u5907\u6570\u91cf\u3002\u8fd9\u79cd\u7269\u7406\u4e0a\u7684\u9650\u5236\u4f7f\u6211\u4eec\u4e0d\u80fd\u4efb\u610f\u5feb\u5730\u8fd0\u884c\u603b\u7ebf\u3002\u53e6\u5916\uff0c\u8981\u652f\u6301\u4e00\u7cfb\u5217\u5ef6\u8fdf\u548c\u6570\u636e\u4f20\u8f93\u7387\u5404\u4e0d\u76f8\u540c\u7684\u8bbe\u5907\u4e5f\u4f7f\u5f97\u603b\u7ebf\u8bbe\u8ba1\u6781\u5bcc\u6311\u6218\u6027\u3002</p>"},{"location":"Computer_Science/CO/Chapter%206/#bus-basics","title":"Bus Basics","text":"<p>A bus contains two types of lines</p> <ul> <li>Control lines: signal requests and acknowledgments, and to indicate what types of information is on the data lines.</li> </ul> <p>\u63a7\u5236\u7ebf\u8def\u7528\u6765\u4f20\u8f93\u8bf7\u6c42\u548c\u786e\u8ba4\u4fe1\u53f7\uff0c\u5e76\u6307\u51fa\u6570\u636e\u7ebf\u4e0a\u7684\u4fe1\u606f\u7c7b\u578b\u3002</p> <ul> <li>Data lines: carry information (e.g., data, addresses, and complex commands) between the source and the destination.</li> </ul> <p>\u603b\u7ebf\u7684\u6570\u636e\u7ebf\u5728\u6e90\u548c\u76ee\u7684\u4e4b\u95f4\u4f20\u9012\u4fe1\u606f\u3002\u8fd9\u79cd\u4fe1\u606f\u53ef\u80fd\u5305\u62ec\u6570\u636e\u3001\u590d\u6742\u6307\u4ee4\u6216\u8005\u5730\u5740\u3002</p> <p>\u4e00\u4e2a\u5178\u578b\u7684\u603b\u7ebf\u4e8b\u52a1\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff1a\u53d1\u9001\u5730\u5740\u548c\u63a5\u6536/\u53d1\u9001\u6570\u636e\u3002</p> <p>Two operations</p> <ul> <li>input: receiving data from the device to memory</li> </ul> <p>\u8f93\u5165\u8bbe\u5907\u662f\u5916\u8bbe\u5230\u5185\u5b58\uff0c\u53bb\u5185\u5b58\u7684\uff0c\u4e0d\u662f\u53bbCPU\u7684\u3002</p> <ul> <li>output: sending data to a device from memory</li> </ul> <p>\u8f93\u51fa\u8bbe\u5907\u662f\u5185\u5b58\u53bb\u5916\u8bbe</p> <p></p> <p>\u603b\u7ebf\u53ef\u5206\u4e3a \u5904\u7406\u5668-\u5185\u5b58\u603b\u7ebf \u548c <code>I/O</code> \u603b\u7ebf\u3002</p> <p>\u5904\u7406\u5668-\u5185\u5b58\u603b\u7ebf\u957f\u5ea6\u77ed\uff0c\u901f\u5ea6\u901a\u5e38\u5f88\u9ad8\uff0c\u800c\u4e14\u914d\u5408\u5185\u5b58\u7cfb\u7edf\u4f7f\u5185\u5b58-\u5904\u7406\u5668\u7684\u5e26\u5bbd\u8fbe\u5230\u6700\u5927\u3002</p> <p><code>I/O</code> \u603b\u7ebf\u5b83\u53ef\u4ee5\u5f88\u957f\uff0c\u53ef\u4ee5\u8fde\u63a5\u5f88\u591a\u7c7b\u578b\u7684\u8bbe\u5907\uff0c\u4e14\u7ecf\u5e38\u8981\u8fde\u63a5\u591a\u79cd\u5177\u6709\u4e0d\u540c\u6570\u636e\u5e26\u5bbd\u7684\u8bbe\u5907\u3002 <code>I/O</code> \u603b\u7ebf\u4e00\u822c\u4e0d\u548c\u5185\u5b58\u76f4\u63a5\u8fde\u63a5\u800c\u662f\u901a\u8fc7\u5904\u7406\u5668-\u5185\u5b58\u603b\u7ebf\u6216\u80cc\u677f\u603b\u7ebf\u8fde\u63a5\u5230\u5185\u5b58\u4e0a\u3002</p> <p>\u603b\u7ebf\u901a\u4fe1\u7684\u4e24\u79cd\u57fa\u672c\u65b9\u5f0f\u662f\u540c\u6b65\u548c\u5f02\u6b65\u3002</p> <p>\u5982\u679c\u603b\u7ebf\u662f\u540c\u6b65\u7684\uff0c\u63a7\u5236\u7ebf\u4e0a\u5c31\u6709\u4e00\u4e2a\u65f6\u949f\u4ee5\u53ca\u4e00\u4e2a\u4e0e\u8be5\u65f6\u949f\u76f8\u5173\u7684\u56fa\u5b9a\u7684\u901a\u4fe1\u534f\u8bae\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u4f7f\u5904\u7406\u5668-\u5185\u5b58\u603b\u7ebf\u6267\u884c\u4e00\u4e2a\u4ece\u5185\u5b58\u8bfb\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u534f\u8bae\u80fd\u591f\u5728\u7b2c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u4f20\u8f93\u5730\u5740\u548c\u8bfb\u64cd\u4f5c\u547d\u4ee4\uff0c\u5e76\u4f7f\u7528\u63a7\u5236\u7ebf\u6765\u6307\u660e\u8bf7\u6c42\u7684\u7c7b\u578b\u3002\u5185\u5b58\u53ef\u80fd\u88ab\u8981\u6c42\u5728\u7b2c\u4e94\u4e2a\u65f6\u949f\u5468\u671f\u505a\u51fa\u54cd\u5e94\uff0c\u63d0\u4f9b\u6570\u636e\u5b57\u3002\u8fd9\u79cd\u534f\u8bae\u5728\u5c0f\u578b\u6709\u9650\u72b6\u6001\u673a\u4e0a\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002\u7531\u4e8e\u8fd9\u79cd\u534f\u8bae\u662f\u9884\u5148\u786e\u5b9a\u7684\uff0c\u6d89\u53ca\u7684\u903b\u8f91\u63a7\u5236\u5f88\u5c11\uff0c\u6240\u4ee5\u603b\u7ebf\u53ef\u4ee5\u8fd0\u884c\u5f97\u5f88\u5feb\u4e14\u63a5\u53e3\u4e0a\u7684\u903b\u8f91\u7535\u8def\u4e5f\u4f1a\u5f88\u5c0f\u3002</p> <p>\u7136\u800c\u540c\u6b65\u603b\u7ebf\u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u7f3a\u70b9\u3002\u7b2c\u4e00\uff0c\u603b\u7ebf\u4e0a\u7684\u6bcf\u4e00\u8bbe\u5907\u90fd\u5fc5\u987b\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u65f6\u949f\u9891\u7387\u4e0b\u3002\u7b2c\u4e8c\uff0c\u7531\u4e8e\u65f6\u949f\u504f\u5dee\u95ee\u9898\uff0c\u901f\u5ea6\u5f88\u5feb\u7684\u540c\u6b65\u603b\u7ebf\uff0c\u957f\u5ea6\u4e0d\u80fd\u592a\u5927\u3002\u5904\u7406\u5668-\u5185\u5b58\u603b\u7ebf\u901a\u5e38\u662f\u540c\u6b65\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u8bbe\u5907\u95f4\u901a\u4fe1\u7684\u8ddd\u79bb\u77ed\u3001\u6570\u91cf\u5c11\uff0c\u800c\u4e14\u51c6\u5907\u5728\u5feb\u7684\u65f6\u949f\u9891\u7387\u4e0a\u64cd\u4f5c\u3002</p> <p>\u5f02\u6b65\u603b\u7ebf\u4e0d\u9700\u8981\u65f6\u949f\u3002\u6b63\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u65f6\u949f\uff0c\u6240\u4ee5\u5f02\u6b65\u603b\u7ebf\u53ef\u4ee5\u9002\u5e94\u5f88\u591a\u4e0d\u540c\u7684\u8bbe\u5907\uff0c\u5f02\u6b65\u603b\u7ebf\u53ef\u4ee5\u5ef6\u957f\u800c\u4e0d\u7528\u62c5\u5fc3\u65f6\u949f\u504f\u5dee\u6216\u5176\u4ed6\u540c\u6b65\u95ee\u9898\u3002\u4e3a\u4e86\u534f\u8c03\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u5f02\u6b65\u603b\u7ebf\u91c7\u7528\u63e1\u624b\u534f\u8bae\u3002\u63e1\u624b\u534f\u8bae\u7531\u4e00\u7cfb\u5217\u6b65\u9aa4\u7ec4\u6210\uff0c\u53ea\u6709\u5f53\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u8fbe\u6210\u4e00\u81f4\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u6b65\u3002\u8fd9\u79cd\u534f\u8bae\u901a\u8fc7\u4e00\u5957\u9644\u52a0\u7684\u63a7\u5236\u7ebf\u8def\u6765\u5b9e\u73b0\u3002</p> <p>\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4f1a\u8bf4\u660e\u5f02\u6b65\u603b\u7ebf\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u8003\u8651\u8bbe\u5907\u4ece\u5185\u5b58\u7cfb\u7edf\u8bf7\u6c42\u6570\u636e\u5b57\u7684\u60c5\u51b5\u3002\u5047\u5b9a\u6709\u4e09\u6761\u63a7\u5236\u7ebf\uff1a</p> <ol> <li> <p>\u8bfb\u8bf7\u6c42(ReadReq):\u7528\u6765\u5411\u5185\u5b58\u53d1\u51fa\u4e00\u4e2a\u8bfb\u8bf7\u6c42\u3002\u5e76\u540c\u65f6\u628a\u5730\u5740\u653e\u5230\u6570\u636e\u7ebf\u4e0a\u3002</p> </li> <li> <p>\u6570\u636e\u5c31\u7eea(DataRdy):\u7528\u6765\u6307\u660e\u6570\u636e\u5b57\u5df2\u7ecf\u5728\u6570\u636e\u7ebf\u4e0a\u5c31\u7eea\u3002\u5728\u8f93\u51fa\u4e8b\u52a1\u4e2d\uff0c\u5185\u5b58\u5c06\u53d1\u51fa\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u56e0\u4e3a\u5b83\u662f\u6570\u636e\u63d0\u4f9b\u8005\u3002\u5728\u8f93\u5165\u4e8b\u52a1\u4e2d\uff0c\u7531 <code>I/O</code> \u8bbe\u5907\u63d0\u4f9b\u6570\u636e\uff0c\u6240\u4ee5\u5c06\u7531 <code>I/O</code> \u8bbe\u5907\u6765\u53d1\u51fa\u8fd9\u4e2a\u4fe1\u53f7\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e2d\uff0c\u6570\u636e\u90fd\u4f1a\u540c\u65f6\u653e\u5728\u6570\u636e\u7ebf\u4e0a\u3002</p> </li> <li> <p>\u5e94\u7b54(Ack):\u7528\u6765\u5e94\u7b54\u53e6\u4e00\u65b9\u7684\u8bfb\u8bf7\u6c42\u548c\u6570\u636e\u5c31\u7eea\u4fe1\u53f7\u3002</p> </li> </ol> <p>\u5728\u5f02\u6b65\u534f\u8bae\u4e2d\uff0c\u8bfb\u8bf7\u6c42\u548c\u6570\u636e\u5c31\u7eea\u7684\u63a7\u5236\u4fe1\u53f7\u5c06\u4e00\u76f4\u7ef4\u6301\uff0c\u76f4\u5230\u53e6\u4e00\u901a\u4fe1\u65b9(\u5185\u5b58\u6216\u8bbe\u5907)\u6307\u660e\u63a7\u5236\u7ebf\u5df2\u8bbf\u95ee\u4e14\u6570\u636e\u7ebf\u5df2\u8bfb\u53d6\uff1b\u8fd9\u79cd\u6307\u793a\u7531\u5e94\u7b54\u7ebf\u53d1\u51fa\u4fe1\u53f7\u6765\u5b8c\u6210\u3002\u4ee5\u4e0a\u5168\u8fc7\u7a0b\u79f0\u4e3a\u63e1\u624b(handshaking)\u3002</p> <p></p> <ol> <li> <p>When memory sees the ReadReq line, it reads the address from the data bus, begin the memory read operation\uff0cthen raises Ack to tell the device that the ReadReq signal has been seen.</p> </li> <li> <p>I/O device sees the Ack line high and releases the ReadReq data lines.</p> </li> <li> <p>Memory sees that ReadReq is low and drops the Ack line.</p> </li> <li> <p>When the memory has the data ready, it places the data on the data lines and raises DataRdy.</p> </li> <li> <p>The I/O device sees DataRdy, reads the data from the bus , and signals that it has the data by raising ACK. </p> </li> <li> <p>The memory sees Ack signals, drops DataRdy, and releases the data lines.</p> </li> <li> <p>Finally, the I/O device, seeing DataRdy go low, drops the ACK line, which indicates that the transmission is completed.</p> </li> </ol> <p>ATTENTION</p> <p>1 \u8868\u793a\u4fe1\u53f7\u4f20\u8fc7\u6765\u6709\u5ef6\u8fdf\u6240\u4ee5\u662f\u659c\u7684\u3002</p> <p>4 \u8fd9\u90e8\u5206\u5728\u53d6\u6570\u636e\u5176\u5b9e\u5728 <code>ack</code> \u53d8\u6210 1 \u65f6\u5c31\u5f00\u59cb\u53d6\u4e86,\u4ee3\u8868\u7684\u662f\u53d6\u6570\u636e\u7684\u5ef6\u8fdf\u3002\u800c\u82e5\u53d6\u6570\u636e\u7684\u65f6\u95f4\u5f88\u77ed\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u6ca1\u6709 4 \u8fd9\u90e8\u5206\u3002</p> <p>6\u548c7\u628a\u603b\u7ebf\u91ca\u653e\u51fa\u6765</p>"},{"location":"Computer_Science/CO/Chapter%206/#bus-arbitration","title":"Bus Arbitration","text":"<p>\u6ca1\u6709\u63a7\u5236\u5f88\u591a\u8bbe\u5907\u8bbf\u95ee\u5c31\u4f1a\u6709\u51b2\u7a81\u3002</p> <p>So, a bus master is needed. Bus masters initiate and control all bus requests.</p> <p>Deciding which bus master gets to use the bus next. In a bus arbitration scheme, a device wanting to use the bus signals a bus request and is later granted the bus.</p> <p>I/O\u7684\u62d3\u6251\u7ed3\u6784\u4e5f\u4f1a\u5f71\u54cd\u603b\u7ebf\u4ef2\u88c1\u7684\u516c\u5e73\u6027\u3002\u56e0\u6b64\u6211\u4eec\u4f1a\u8003\u8651\u603b\u7ebf\u7684\u8fde\u63a5\u3002</p> <p>Four bus arbitration schemes:</p> <ul> <li>daisy chain arbitration (not very fair)</li> <li>centralized, parallel arbitration (requires an arbiter)</li> <li>self selection</li> <li>collision detection</li> </ul> <p>Two factors in choosing which device to grant the bus:</p> <ul> <li>bus priority \u8bbe\u5907\u81ea\u8eab\u7684\u4f18\u5148\u7ea7</li> <li>fairness \u516c\u5e73\u6027(\u907f\u514d\u7269\u7406\u8fde\u63a5\u4e0a\u9020\u6210\u7684\u4e0d\u516c\u5e73\u800c\u5f71\u54cd\u6027\u80fd)</li> </ul>"},{"location":"Computer_Science/CO/Chapter%206/#increasing-the-bus-bandwidth","title":"Increasing the Bus Bandwidth","text":"<ul> <li>Increasing data bus width</li> <li>Use separate address and data lines</li> <li>Transfer multiple words</li> </ul>"},{"location":"Computer_Science/CO/Chapter%206/#interfacing-io-devices","title":"Interfacing I/O Devices","text":"<p>Three characteristics of I/O systems</p> <ul> <li>shared by multiple programs using the processor.    \u7531\u4f7f\u7528\u8be5\u5904\u7406\u5668\u7684\u591a\u4e2a\u7a0b\u5e8f\u5171\u4eab</li> <li>often use interrupts to communicate information about I/O operations.    \u901a\u5e38\u4f7f\u7528\u4e2d\u65ad\u6765\u901a\u4fe1\u6709\u5173I/O\u64cd\u4f5c\u7684\u4fe1\u606f</li> <li>The low-level control of an I/O devices is complex.    \u8f93\u5165/\u8f93\u51fa\u8bbe\u5907\u7684\u4f4e\u7ea7\u63a7\u5236\u662f\u590d\u6742\u7684</li> </ul> <p>Three types of communication are required:</p> <ul> <li>The OS must be able to give commands to the I/O devices.    \u8be5\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u80fd\u591f\u5411I/O\u8bbe\u5907\u53d1\u51fa\u547d\u4ee4</li> <li>The device must be able to notify the OS, when I/O device completed an operation or has encountered an error.    \u5f53I/O\u8bbe\u5907\u5b8c\u6210\u64cd\u4f5c\u6216\u9047\u5230\u9519\u8bef\u65f6\uff0c\u8be5\u8bbe\u5907\u5fc5\u987b\u80fd\u591f\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf</li> <li>Data must be transferred between memory and an I/O device   \u6570\u636e\u5fc5\u987b\u5728\u5185\u5b58\u548cI/O\u8bbe\u5907\u4e4b\u95f4\u4f20\u8f93</li> </ul>"},{"location":"Computer_Science/CO/Chapter%206/#communication-with-the-processor","title":"Communication with the Processor","text":"<ul> <li> <p>Polling: The processor periodically checks status bit to see if it is time for the next I/O operation. </p> </li> <li> <p>Interrupt: When an I/O device wants to notify processor that it has completed some operation or needs attentions, it causes processor to be  interrupted.</p> </li> <li> <p>DMA (direct memory access): the device controller transfer data directly to or from memory without involving processor.</p> </li> </ul> <p>\u76f4\u63a5\u4ece\u5185\u5b58\u4f20\u6570\u636e\u5185\u5b58\u548c\u78c1\u76d8\u4e4b\u95f4\u7684\u901a\u8baf\u65b9\u5f0f\u662f\u4e00\u4e2a\u7279\u522b\u7684\u6280\u672f\uff0c\u4f46\u662f\u53d1\u8d77\u8fd9\u4e2a\u65b9\u5f0f\u4e5f\u9700\u8981\u4e2d\u65ad\u3002\u5269\u4e0b\u7684\u4e8b\u662f DMA \u505a\uff0c\u4e0d\u7528DMA\u5c31\u662f\u90fd\u662f\u5904\u7406\u5668\u6765\u63a7\u5236\u3002</p> <p>The processor sets up the DMA by supplying some information, including the identity of the device, the operation, the memory address that is the source or destination of the data to be transferred, and the number of bytes to transfer. </p> <p>The DMA starts the operation on the device and arbitrates for the bus. If the request requires more than one transfer on the bus, the DMA unit generates the next memory address and initiates the next transfer.</p> <p>Once the DMA transfer is complete, the controller interrupts the  processor, which then examines whether errors occur.</p>"},{"location":"Computer_Science/CO/Chapter%206/#compare","title":"Compare","text":"<p>The disadvantage of polling is that it wastes a lot of processor time. When the CPU polls the I/O devices periodically, the I/O devices maybe have no request or have not get ready.</p> <p>If the I/O operations is interrupt driven, the OS can work on other tasks while data is being read from or written to the device.</p> <p>Because DMA doesn\u2019t need the control of processor, it will not consume much of processor time.</p> <p>Info</p> <p>\u6b64\u5904\u4f8b\u9898\u5efa\u8bae\u6d4f\u89c8\u4e00\u904d PPT \u3002\uff08\u542c\u8bf4\u8003\u8bd5\u4e5f\u4e0d\u5927\u8003\u3002\uff09 </p>"},{"location":"Computer_Science/CO/PPT_download/","title":"PPT","text":"<p> \u7ea6 59 \u4e2a\u5b57  7 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f</p>  Chapter1   5,406 KB / 2024-09-11 <p> \u4e0b\u8f7d</p>  Chapter2   3,415 KB / 2024-10-08 <p> \u4e0b\u8f7d</p>  Chapter3   2,366 KB / 2024-09-24 <p> \u4e0b\u8f7d</p>  Chapter4_1   2,585 KB / 2024-10-22 <p> \u4e0b\u8f7d</p>  Chapter4_2   8,546 KB / 2024-11-19 <p> \u4e0b\u8f7d</p>  Chapter5   7,749 KB / 2024-11-19 <p> \u4e0b\u8f7d</p>  Chapter6   4,772 KB / 2024-12-14 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/DB/","title":"Database System notes","text":"<p> \u7ea6 152 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>\u8bfe\u7a0b\u4fe1\u606f</p> <ul> <li>\u667a\u4e91\u94fe\u63a5\uff1a\ud83d\udd17</li> <li>\u6388\u8bfe\uff1a\u9648\u521a</li> <li>\u6559\u6750\uff1aDatabase System Concepts, 7th edition - 2019</li> <li>PPT\uff1a [\ud83d\udcc1]</li> <li>\u4f5c\u4e1a\uff1a\ud83d\udcdd</li> <li>\u6211\u7684\u7b14\u8bb0\uff1a\ud83d\udcdd</li> <li>\u5386\u5e74\u9898\uff1a</li> <li>\u590d\u4e60\u8d44\u6599\uff1a</li> </ul> <p>\u5b66\u4e60\u5efa\u8bae</p> <ol> <li> <p>\u590d\u4e60\u65f6\u628a\u6240\u6709\u8001\u5e08\u7684\u590d\u4e60\u8bfe\u770b\u4e00\u904d</p> </li> <li> <p>\u5c3d\u65e9\u5f00\u59cb\u5199 miniSQL \u4ee5\u53ca\u53ef\u4ee5\u53bb\u5b66\u4e60\u4e00\u4e0b\u524d\u7aef\u6709\u5173\u7684\u77e5\u8bc6\uff08\u4f8b\u5982\u4f7f\u7528ElementPlus UI\u7ec4\u4ef6\uff09</p> </li> <li> <p>\u4e0d\u7ba1\u662f\u667a\u4e91\u8fd8\u662f\u7ebf\u4e0b\u8bfe\u5802\uff0c\u5b59\u8001\u5e08\u90fd\u4e0d\u4f1a\u8ba9\u4f60\u5931\u671b\u3002</p> </li> </ol> \u6084\u6084\u5199\u4e00\u70b9\u6307\u8def <p>\u6570\u636e\u5e93\u7684\u5b9e\u9a8c\u4ece lab5 \u5f00\u59cb\u5c31\u4ee4\u4eba\u6298\u78e8\u4e0d\u5df2\uff0c\u4f46\u662f\u5927\u5bb6\u90fd\u77e5\u9053 GitHub \uff0c\u4e0a\u53bb\u770b\u770b\u4e5f\u8bb8\u6709\u60ca\u559c\u5462\u3002</p>"},{"location":"Computer_Science/DB/Chapter1/","title":"Chapter 1 | Introduction","text":"<p> \u7ea6 6448 \u4e2a\u5b57  7 \u884c\u4ee3\u7801  8 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 32 \u5206\u949f</p> Table of Contents <ul> <li> <p>Purpose of Database Systems</p> </li> <li> <p>View of Data </p> </li> <li> <p>Database Language </p> </li> <li> <p>Database Design </p> </li> <li> <p>Database Users and Administrators </p> </li> <li> <p>Transaction Management </p> </li> <li> <p>Database Architecture </p> </li> <li> <p>History of Database Systems </p> </li> <li> <p>Summary </p> </li> </ul> <p>Database is a collection of interrelated data about a enterprise, which is managed by a DBMS(Database Management System).</p> <p>A database-management system (DBMS) is a collection of interrelated data and a set of programs to access those data.</p> <p>\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u7531\u4e00\u4e2a\u4e92\u76f8\u5173\u8054\u7684\u6570\u636e\u7684\u96c6\u5408\u548c\u4e00\u7ec4\u7528\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\u7684\u7a0b\u5e8f\u7ec4\u6210\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter1/#purpose-of-database-systems","title":"Purpose of Database Systems","text":""},{"location":"Computer_Science/DB/Chapter1/#database-system-applications","title":"Database-System Applications","text":"<p>Data processing and management are the most important fields of computer applications. </p> <p>Database systems are used to manage collections of data that:</p> <ul> <li>are highly valuable \u5177\u6709\u5f88\u9ad8\u4ef7\u503c\u7684\u6570\u636e\u96c6\u5408</li> <li>are relatively large \u76f8\u5bf9\u5e9e\u5927\u7684\u6570\u636e\u96c6\u5408</li> <li>are accessed by multiple users and applications, often at the same time \u5e38\u5e38\u540c\u65f6\u88ab\u591a\u4e2a\u7528\u6237\u548c\u5e94\u7528\u7cfb\u7edf\u8bbf\u95ee\u7684\u6570\u636e\u96c6\u5408</li> </ul>"},{"location":"Computer_Science/DB/Chapter1/#classic-database-applications","title":"classic Database Applications","text":"<ul> <li>Banking: all transactions</li> <li>Airlines: reservations, schedules</li> <li>Universities:  registration, grades</li> <li>Sales: customers, products, purchases</li> <li>Manufacturing: production, inventory, orders, supply chain</li> <li>Human resources: employee records, salaries, tax deductions </li> </ul>"},{"location":"Computer_Science/DB/Chapter1/#database-access-approaches","title":"Database Access Approaches","text":"<p>Method 1:</p> <p>Access database by using interactive tools (e.g., Query Analyzer of SQL Server, Sql Plus and Work Sheet of ORACLE, etc.) provided by DBMS. </p> <p>Method 2:</p> <p>Invoke ODBC/JDBC to access database by using development tools (e.g., VC++, PB, Delphi, ASP, JSP, PHP, etc.). </p> <p>Broadly speaking, there are two modes in which databases are used.</p> <ul> <li>The first mode is to support online transaction processing, where a large number of users use the database, with each user retrieving relatively small amounts of data, and performing small updates. This is the primary mode of use for the vast majority of users of database applications such as those that we outlined earlier.</li> </ul> <p>\u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u652f\u6301\u8054\u673a\u4e8b\u52a1\u5904\u7406\uff0c\u5373\u5927\u91cf\u7684\u7528\u6237\u4f7f\u7528\u6570\u636e\u5e93\uff0c\u6bcf\u4e2a\u7528\u6237\u68c0\u7d22\u76f8\u5bf9\u5c11\u91cf\u7684\u6570\u636e\uff0c\u8fdb\u884c\u5c0f\u7684\u66f4\u65b0\u3002\u8fd9\u662f\u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf\u7684\u7edd\u5927\u591a\u6570\u7528\u6237(\u8bf8\u5982\u6211\u4eec\u524d\u9762\u5217\u4e3e\u8fc7\u7684\u90a3\u4e9b\u7528\u6237)\u7684\u4e3b\u8981\u4f7f\u7528\u65b9\u5f0f\u3002</p> <ul> <li>The second mode is to support data analytics, that is, the processing of data to draw conclusions, and infer rules or decision procedures, which are then used to drive business decisions.</li> </ul> <p>\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u662f\u652f\u6301\u6570\u636e\u5206\u6790(dataanalytics)\uff0c\u5373\u5ba1\u9605\u6570\u636e\uff0c\u7ed9\u51fa\u7ed3\u8bba\uff0c\u5e76\u63a8\u5bfc\u51fa\u89c4\u5219\u6216\u51b3\u7b56\u7a0b\u5e8f\uff0c\u4ee5\u7528\u4e8e\u9a71\u52a8\u4e1a\u52a1\u51b3\u7b56\u3002</p>"},{"location":"Computer_Science/DB/Chapter1/#characteristics-of-dbms","title":"Characteristics of DBMS","text":"<ul> <li> <p>Efficiency and scalability in data access. </p> <p>The primary goal of a DBMS is to provide a way to store and retrieve database information that is both convenient and efficient. \u4f7f\u5f97\u5b58\u53d6\u66f4\u52a0\u6709\u6548\u548c\u53ef\u6269\u5c55</p> </li> <li> <p>Reduced application development time.</p> </li> <li> <p>Data independence (including physical data independence and logical data independence). </p> </li> <li> <p>Data integrity and security.</p> <p>The database system must ensure the safety of the information stored, despite system crashes or attempts at unauthorized access.</p> </li> <li> <p>Concurrent access and robustness (i.e., recovery). </p> <p>If data are to be shared among several users, the system must provide concurrency control mechanisms to avoid possible anomalous results.</p> </li> </ul>"},{"location":"Computer_Science/DB/Chapter1/#file-processing-system","title":"File-Processing System","text":"<p>File-processing system is supported by a conventional operating system. The system stores permanent records in various files, and it needs different application programs to extract records from, and add records to, the appropriate files.</p> <p>Keeping organizational information in a file-processing system has a number of major disadvantages:</p> <ul> <li> <p>\u6570\u636e\u7684\u5197\u4f59\u548c\u4e0d\u4e00\u81f4\u6027(data redundancy and inconsistency)\u3002</p> <p>\u7531\u4e8e\u6587\u4ef6\u548c\u7a0b\u5e8f\u662f\u5728\u5f88\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\u5185\u7531\u4e0d\u540c\u7684\u7a0b\u5e8f\u5458\u521b\u5efa\u7684\uff0c\u4e0d\u540c\u6587\u4ef6\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u7ed3\u6784\uff0c\u4e0d\u540c\u7a0b\u5e8f\u53ef\u80fd\u91c7\u7528\u4e0d\u540c\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u7f16\u5199\u3002\u6b64\u5916\uff0c\u76f8\u540c\u7684\u4fe1\u606f\u53ef\u80fd\u5728\u51e0\u4e2a\u5730\u65b9(\u6587\u4ef6)\u91cd\u590d\u5b58\u50a8\u3002\u4f8b\u5982\uff0c\u5982\u679c\u67d0\u5b66\u751f\u6709\u4e24\u4e2a\u4e13\u4e1a(\u4f8b\u5982\u97f3\u4e50\u548c\u6570\u5b66)\uff0c\u8be5\u5b66\u751f\u7684\u5730\u5740\u548c\u7535\u8bdd\u53f7\u7801\u5c31\u53ef\u80fd\u65e2\u51fa\u73b0\u5728\u5305\u542b\u97f3\u4e50\u7cfb\u5b66\u751f\u8bb0\u5f55\u7684\u6587\u4ef6\u4e2d\uff0c\u53c8\u51fa\u73b0\u5728\u5305\u542b\u6570\u5b66\u7cfb\u5b66\u751f\u8bb0\u5f55\u7684\u6587\u4ef6\u4e2d\u3002\u8fd9\u79cd\u5197\u4f59\u9664\u4e86\u5bfc\u81f4\u5b58\u50a8\u548c\u8bbf\u95ee\u5f00\u9500\u589e\u5927\uff0c\u8fd8\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4(data imconsistency)\uff0c\u5373\u540c\u4e00\u6570\u636e\u7684\u4e0d\u540c\u526f\u672c\u4e0d\u4e00\u81f4\u3002\u4f8b\u5982\uff0c\u5b66\u751f\u5730\u5740\u7684\u66f4\u6539\u53ef\u80fd\u5728\u97f3\u4e50\u7cfb\u8bb0\u5f55\u4e2d\u5f97\u5230\u4e86\u53cd\u6620\u800c\u5728\u7cfb\u7edf\u7684\u5176\u4ed6\u5730\u65b9\u5374\u6ca1\u6709\u3002</p> </li> <li> <p>\u6570\u636e\u8bbf\u95ee\u56f0\u96be(diffculty in accessing data)\u3002</p> <p>\u5047\u8bbe\u5927\u5b66\u7684\u67d0\u4e2a\u529e\u4e8b\u4eba\u5458\u9700\u8981\u627e\u51fa\u5c45\u4f4f\u5728\u67d0\u4e2a\u7279\u5b9a\u90ae\u653f\u7f16\u7801\u533a\u57df\u5185\u7684\u6240\u6709\u5b66\u751f\u7684\u59d3\u540d\u3002\u4e8e\u662f\u4ed6\u8981\u6c42\u6570\u636e\u5904\u7406\u90e8\u95e8\u751f\u6210\u8fd9\u6837\u7684\u4e00\u4e2a\u5217\u8868\u3002\u7531\u4e8e\u539f\u59cb\u7cfb\u7edf\u7684\u8bbe\u8ba1\u8005\u5e76\u672a\u9884\u6599\u5230\u4f1a\u6709\u8fd9\u6837\u7684\u9700\u6c42\uff0c\u56e0\u6b64\u6ca1\u6709\u73b0\u6210\u7684\u5e94\u7528\u7a0b\u5e8f\u53bb\u6ee1\u8db3\u8fd9\u4e2a\u9700\u6c42\u3002\u7136\u800c\uff0c\u7cfb\u7edf\u4e2d\u6709\u4e00\u4e2a\u4ea7\u751f\u6240\u6709\u5b66\u751f\u5217\u8868\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u65f6\u8be5\u529e\u4e8b\u4eba\u5458\u6709\u4e24\u79cd\u9009\u62e9:\u4e00\u79cd\u662f\u53d6\u5f97\u6240\u6709\u5b66\u751f\u7684\u5217\u8868\u5e76\u4ece\u4e2d\u624b\u5de5\u62bd\u53d6\u6240\u9700\u4fe1\u606f\uff1b\u53e6\u4e00\u79cd\u662f\u8981\u6c42\u67d0\u4e2a\u7a0b\u5e8f\u5458\u7f16\u5199\u6240\u9700\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e24\u79cd\u65b9\u6848\u663e\u7136\u90fd\u4e0d\u592a\u4ee4\u4eba\u6ee1\u610f\u5047\u8bbe\u7f16\u5199\u4e86\u8fd9\u6837\u7684\u7a0b\u5e8f\uff0c\u51e0\u5929\u4ee5\u540e\u8fd9\u4e2a\u529e\u4e8b\u4eba\u5458\u53ef\u80fd\u53c8\u9700\u8981\u5c06\u8be5\u5217\u8868\u51cf\u5c11\u5230\u53ea\u5217\u51fa\u81f3\u5c11\u9009\u4fee\u4e86 60 \u5b66\u65f6\u7684\u90a3\u4e9b\u5b66\u751f\u3002\u53ef\u4ee5\u9884\u89c1\uff0c\u4ea7\u751f\u8fd9\u6837\u4e00\u4e2a\u5217\u8868\u7684\u7a0b\u5e8f\u53c8\u4e0d\u5b58\u5728\uff0c\u8fd9\u4e2a\u804c\u5458\u5c31\u518d\u6b21\u9762\u4e34\u524d\u9762\u90a3\u4e24\u79cd\u90fd\u4e0d\u5c3d\u4eba\u610f\u7684\u9009\u62e9\u3002</p> </li> <li> <p>\u6570\u636e\u5b64\u7acb\uff0c\u6570\u636e\u5b64\u5c9b(data isolation)\u3002</p> <p>\u7531\u4e8e\u6570\u636e\u5206\u6563\u5728\u4e0d\u540c\u6587\u4ef6\u4e2d\uff0c\u8fd9\u4e9b\u6587\u4ef6\u53c8\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684\u683c\u5f0f\uff0c\u56e0\u6b64\u7f16\u5199\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u68c0\u7d22\u9002\u5f53\u6570\u636e\u662f\u5f88\u56f0\u96be\u7684\u3002</p> </li> <li> <p>\u5b8c\u6574\u6027\u95ee\u9898(integrity problem)\u3002</p> <p>\u6570\u636e\u5e93\u4e2d\u6240\u5b58\u50a8\u6570\u636e\u7684\u503c\u5fc5\u987b\u6ee1\u8db3\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u4e00\u81f4\u6027\u7ea6\u675f(consistency constraint)\u3002\u5047\u8bbe\u5927\u5b66\u4e3a\u6bcf\u4e2a\u7cfb\u7ef4\u62a4\u4e00\u4e2a\u8d26\u6237\uff0c\u5e76\u4e14\u8bb0\u5f55\u5404\u4e2a\u8d26\u6237\u7684\u4f59\u989d\u3002\u6211\u4eec\u8fd8\u5047\u8bbe\u5927\u5b66\u8981\u6c42\u6bcf\u4e2a\u7cfb\u7684\u8d26\u6237\u4f59\u989d\u6c38\u8fdc\u4e0d\u80fd\u4f4e\u4e8e\u96f6\u3002\u5f00\u53d1\u4eba\u5458\u901a\u8fc7\u5728\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u52a0\u5165\u9002\u5f53\u7684\u4ee3\u7801\u6765\u5f3a\u5236\u7cfb\u7edf\u4e2d\u7684\u8fd9\u4e9b\u7ea6\u675f\u3002\u7136\u800c\uff0c\u5f53\u65b0\u7684\u7ea6\u675f\u52a0\u5165\u65f6\uff0c\u901a\u8fc7\u4fee\u6539\u7a0b\u5e8f\u6765\u4f53\u73b0\u8fd9\u4e9b\u65b0\u7684\u7ea6\u675f\u662f\u5f88\u56f0\u96be\u7684\u3002\u5c24\u5176\u662f\u5f53\u7ea6\u675f\u6d89\u53ca\u4e0d\u540c\u6587\u4ef6\u4e2d\u7684\u591a\u4e2a\u6570\u636e\u9879\u65f6\uff0c\u95ee\u9898\u5c31\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u4e86\u3002</p> </li> <li> <p>\u539f\u5b50\u6027\u95ee\u9898(atomicity problem)\u3002</p> <p>\u5982\u540c\u4efb\u4f55\u522b\u7684\u8bbe\u5907\u4e00\u6837\uff0c\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e5f\u4f1a\u53d1\u751f\u6545\u969c\u3002\u4e00\u65e6\u6545\u969c\u53d1\u751f\uff0c\u6570\u636e\u5c31\u5e94\u88ab\u6062\u590d\u5230\u6545\u969c\u53d1\u751f\u4ee5\u524d\u7684\u4e00\u81f4\u7684\u72b6\u6001\uff0c\u5bf9\u5f88\u591a\u5e94\u7528\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u4fdd\u8bc1\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u8003\u8651\u4e00\u4e2a\u94f6\u884c\u7cfb\u7edf\uff0c\u5b83\u6709\u4e00\u4e2a\u628a\u8d26\u6237 A \u7684 500 \u7f8e\u5143\u8f6c\u5165\u8d26\u6237 B \u7684\u7a0b\u5e8f\u3002\u5047\u8bbe\u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u7cfb\u7edf\u6545\u969c\uff0c\u5f88\u53ef\u80fd\u8d26\u6237 A \u7684\u4f59\u989d\u4e2d\u51cf\u53bb\u4e86 500 \u7f8e\u5143\uff0c\u4f46\u8fd8\u6ca1\u6709\u5b58\u4eba\u8d26\u6237B\u7684\u4f59\u989d\u4e2d\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u6570\u636e\u5e93\u72b6\u6001\u7684\u4e0d\u4e00\u81f4\u3002\u663e\u7136\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u7684\u501f\u548c\u8d37\u4e24\u4e2a\u64cd\u4f5c\u5fc5\u987b\u662f\u8981\u4e48\u90fd\u53d1\u751f\u8981\u4e48\u90fd\u4e0d\u53d1\u751f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8f6c\u8d26\u8fd9\u4e2a\u64cd\u4f5c\u5fc5\u987b\u662f\u539f\u5b50\u7684\u2014\u2014\u5b83\u8981\u4e48\u5168\u90e8\u53d1\u751f\u8981\u4e48\u6839\u672c\u4e0d\u53d1\u751f\u3002\u5728\u4f20\u7edf\u7684\u6587\u4ef6\u5904\u7406\u7cfb\u7edf\u4e2d\uff0c\u4fdd\u6301\u539f\u5b50\u6027\u662f\u5f88\u96be\u505a\u5230\u7684\u3002</p> </li> <li> <p>\u5e76\u53d1\u8bbf\u95ee\u5f02\u5e38(concurrent-access anomaly)\u3002</p> <p>\u4e3a\u4e86\u63d0\u9ad8\u7cfb\u7edf\u7684\u603b\u4f53\u6027\u80fd\u4ee5\u53ca\u52a0\u5feb\u54cd\u5e94\u901f\u5ea6\uff0c\u8bb8\u591a\u7cfb\u7edf\u5141\u8bb8\u591a\u4e2a\u7528\u6237\u540c\u65f6\u66f4\u65b0\u6570\u636e\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u4eca\u6700\u5927\u7684\u4e92\u8054\u7f51\u96f6\u552e\u5546\u6bcf\u5929\u5c31\u53ef\u80fd\u6709\u6765\u81ea\u8d2d\u4e70\u8005\u5bf9\u5176\u6570\u636e\u7684\u6570\u767e\u4e07\u6b21\u8bbf\u95ee\u3002\u5728\u8fd9\u6837\u7684\u73af\u5883\u4e2d\uff0c\u5e76\u53d1\u7684\u66f4\u65b0\u64cd\u4f5c\u53ef\u80fd\u76f8\u4e92\u5f71\u54cd\uff0c\u6709\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u7684\u4e0d\u4e00\u81f4\u3002\u8bbe\u8d26\u6237A\u7684\u4f59\u989d\u662f 10000 \u7f8e\u5143\uff0c\u5047\u8bbe\u4e24\u4e2a\u94f6\u884c\u804c\u5458\u51e0\u4e4e\u540c\u65f6\u4ece\u8d26\u6237\u4e2d\u53d6\u6b3e(\u4f8b\u5982\u5206\u522b\u53d6\u51fa 500 \u7f8e\u5143\u548c 100 \u7f8e\u5143)\uff0c\u8fd9\u6837\u7684\u5e76\u53d1\u6267\u884c\u5c31\u53ef\u80fd\u4f7f\u8d26\u6237\u5904\u4e8e\u4e00\u79cd\u9519\u8bef\u7684(\u6216\u4e0d\u4e00\u81f4\u7684)\u72b6\u6001\u3002\u5047\u8bbe\u6bcf\u4e2a\u53d6\u6b3e\u64cd\u4f5c\u5bf9\u5e94\u6267\u884c\u7684\u7a0b\u5e8f\u662f\u8bfb\u53d6\u65e7\u7684\u8d26\u6237\u4f59\u989d\uff0c\u5728\u5176\u4e0a\u51cf\u53bb\u53d6\u6b3e\u7684\u91d1\u989d\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5199\u56de\u3002\u5982\u679c\u4e24\u6b21\u53d6\u6b3e\u7684\u7a0b\u5e8f\u5e76\u53d1\u6267\u884c\uff0c\u53ef\u80fd\u5b83\u4eec\u8bfb\u5230\u7684\u4f59\u989d\u90fd\u662f 10000 \u7f8e\u5143\uff0c\u5e76\u5c06\u5206\u522b\u5199\u56de 9500 \u7f8e\u5143\u548c 9900 \u7f8e\u5143\u3002\u8d26\u6237A\u7684\u4f59\u989d\u4e2d\u5230\u5e95\u5269\u4e0b 9500 \u7f8e\u5143\u8fd8\u662f 9900 \u7f8e\u5143\u89c6\u54ea\u4e2a\u7a0b\u5e8f\u6700\u540e\u5199\u56de\u7ed3\u679c\u800c\u5b9a\uff0c\u800c\u5b9e\u9645\u4e0a\u6b63\u786e\u7684\u503c\u5e94\u8be5\u662f 9400 \u7f8e\u5143\u3002\u4e3a\u4e86\u6d88\u9664\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u53ef\u80fd\u6027\uff0c\u7cfb\u7edf\u5fc5\u987b\u8fdb\u884c\u67d0\u79cd\u5f62\u5f0f\u7684\u76d1\u7ba1\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6570\u636e\u53ef\u80fd\u88ab\u591a\u4e2a\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u76f8\u4e92\u95f4\u4e8b\u5148\u53c8\u6ca1\u6709\u534f\u8c03\uff0c\u8fd9\u79cd\u76d1\u7ba1\u5c31\u5f88\u96be\u63d0\u4f9b\u3002</p> </li> <li> <p>\u5b89\u5168\u6027\u95ee\u9898(security problem)\u3002</p> <p>\u5e76\u975e\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u6bcf\u4e00\u4e2a\u7528\u6237\u90fd\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u6570\u636e\u3002\u4f8b\u5982\u5728\u5927\u5b66\u4e2d\uff0c\u5de5\u8d44\u7ba1\u7406\u4eba\u5458\u53ea\u9700\u8981\u770b\u5230\u6570\u636e\u5e93\u4e2d\u5173\u4e8e\u8d22\u52a1\u4fe1\u606f\u7684\u90a3\u4e2a\u90e8\u5206\u3002\u4ed6\u4eec\u4e0d\u9700\u8981\u5bf9\u5173\u4e8e\u5b66\u672f\u8bb0\u5f55\u7684\u4fe1\u606f\u8fdb\u884c\u8bbf\u95ee\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u5e94\u7528\u7a0b\u5e8f\u603b\u662f\u5373\u5e2d\u5730\u52a0\u5165\u6587\u4ef6\u5904\u7406\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u6837\u7684\u5b89\u5168\u6027\u7ea6\u675f\u96be\u4ee5\u5b9e\u73b0\u3002</p> <p>Hard to provide user access to some, but not all</p> <ul> <li>data Authentication(\u8ba4\u8bc1)</li> <li>Priviledge(\u6743\u9650)</li> <li>Audit(\u5ba1\u8ba1)</li> </ul> </li> </ul> <p>Database systems offer solutions to all the above problems!</p> Characteristics of Databases: <ul> <li>data persistence(\u6570\u636e\u6301\u4e45\u6027)</li> <li>convenience in accessing data(\u6570\u636e\u8bbf\u95ee\u4fbf\u5229\u6027)</li> <li>data integrity(\u6570\u636e\u5b8c\u6574\u6027)</li> <li>concurrency control for multiple user(\u591a\u7528\u6237\u5e76\u53d1\u63a7\u5236)</li> <li>failure recovery(\u6545\u969c\u6062\u590d)</li> <li>security control(\u5b89\u5168\u63a7\u5236)</li> </ul>"},{"location":"Computer_Science/DB/Chapter1/#data-model","title":"data model","text":"<p>Underlying the structure of a database is the data model: a collection of conceptual tools for describing data, data relationships, data semantics, and consistency constraints.</p> <p>\u6570\u636e\u5e93\u7ed3\u6784\u7684\u57fa\u7840\u662f\u6570\u636e\u6a21\u578b(data model):\u4e00\u4e2a\u63cf\u8ff0\u6570\u636e\u3001\u6570\u636e\u8054\u7cfb\u3001\u6570\u636e\u8bed\u4e49\u4ee5\u53ca\u81f4\u6027\u7ea6\u675f\u7684\u6982\u5ff5\u5de5\u5177\u7684\u96c6\u5408\u3002</p> <ul> <li> <p>\u5173\u7cfb\u6a21\u578b(relational model)\u3002</p> <p>\u5173\u7cfb\u6a21\u578b\u7528\u8868\u7684\u96c6\u5408\u6765\u8868\u793a\u6570\u636e\u548c\u6570\u636e\u95f4\u7684\u8054\u7cfb\u3002\u6bcf\u4e2a\u8868\u6709\u591a\u4e2a\u5217\uff0c\u6bcf\u5217\u6709\u552f\u4e00\u7684\u5217\u540d\u3002\u8868\u4e5f\u79f0\u4f5c\u5173\u7cfb\u3002\u5173\u7cfb\u578b\u662f\u57fa\u4e8e\u8bb0\u5f55\u7684\u6a21\u578b\u7684\u4e00\u79cd\u3002\u57fa\u4e8e\u8bb0\u5f55\u7684\u6a21\u578b\u7684\u540d\u79f0\u7684\u7531\u6765\u662f\u6570\u636e\u5e93\u662f\u7531\u82e5\u5e72\u79cd\u56fa\u5b9a\u683c\u5f0f\u7684\u8bb0\u5f55\u6784\u6210\u7684\u6bcf\u4e2a\u8868\u5305\u542b\u67d0\u79cd\u7279\u5b9a\u7c7b\u578b\u7684\u8bb0\u5f55\u3002\u6bcf\u4e2a\u8bb0\u5f55\u7c7b\u578b\u5b9a\u4e49\u4e86\u56fa\u5b9a\u6570\u76ee\u7684\u5b57\u6bb5\u6216\u5c5e\u6027\u3002\u8868\u7684\u5217\u5bf9\u5e94\u4e8e\u8bb0\u5f55\u7c7b\u578b\u7684\u5c5e\u6027\u3002\u5173\u7cfb\u6570\u636e\u6a21\u578b\u662f\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u6570\u636e\u6a21\u578b\uff0c\u5f53\u4eca\u5927\u91cf\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u90fd\u57fa\u4e8e\u8fd9\u79cd\u5173\u7cfb\u6a21\u578b\u3002</p> </li> <li> <p>\u5b9e\u4f53-\u8054\u7cfb\u6a21\u578b(entity-relationship model)</p> <p>\u5b9e\u4f53-\u8054\u7cfb\u6570\u636e\u6a21\u578b\u4f7f\u7528\u79f0\u4f5c\u5b9e\u4f53\u7684\u57fa\u672c\u5bf9\u8c61\u7684\u96c6\u5408\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u5bf9\u8c61\u95f4\u7684\u8054\u7cfb\u3002\u5b9e\u4f53\u662f\u73b0\u5b9e\u4e16\u754c\u4e2d\u53ef\u533a\u522b\u4e8e\u5176\u4ed6\u5bf9\u8c61\u7684\u4e00\u4ef6\"\u4e8b\u60c5\"\u6216\u4e00\u4e2a\"\u7269\u4f53\"\u3002\u5b9e\u4f53-\u8054\u7cfb\u6a21\u578b\u88ab\u5e7f\u6cdb\u7528\u4e8e\u6570\u636e\u5e93\u8bbe\u8ba1\u3002</p> </li> <li> <p>\u534a\u7ed3\u6784\u5316\u6570\u636e\u6a21\u578b(semi-structured data model)</p> <p>\u534a\u7ed3\u6784\u5316\u6570\u636e\u6a21\u578b\u5141\u8bb8\u5728\u5176\u6570\u636e\u5b9a\u4e49\u4e2d\u67d0\u4e9b\u76f8\u540c\u7c7b\u578b\u7684\u6570\u636e\u9879\u542b\u6709\u4e0d\u540c\u7684\u5c5e\u6027\u96c6\u3002\u8fd9\u548c\u524d\u9762\u8bb2\u5230\u7684\u6570\u636e\u6a21\u578b\u5f62\u6210\u4e86\u5bf9\u6bd4:\u5728\u90a3\u4e9b\u6570\u636e\u6a21\u578b\u4e2d\u7279\u5b9a\u7c7b\u578b\u7684\u6bcf\u4e00\u4e2a\u6570\u636e\u9879\u90fd\u5fc5\u987b\u6709\u76f8\u540c\u7684\u5c5e\u6027\u96c6\u3002<code>JSON</code>\u548c\u53ef\u6269\u5c55\u6807\u8bb0\u8bed\u8a00(extensible MarkupLanguage\uff0cXML)\u88ab\u5e7f\u6cdb\u5730\u7528\u6765\u8868\u793a\u534a\u7ed3\u6784\u5316\u6570\u636e\u3002</p> </li> <li> <p>\u57fa\u4e8e\u5bf9\u8c61\u7684\u6570\u636e\u6a21\u578b(object-based data model)</p> <ul> <li>Object-oriented (\u9762\u5411\u5bf9\u8c61\u6570\u636e\u6a21\u578b)</li> <li>Object-relational (\u5bf9\u8c61-\u5173\u7cfb\u6a21\u578b\u6a21\u578b)</li> </ul> <p>\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1(\u7279\u522b\u662f Java C++\u6216C#)\u5df2\u7ecf\u6210\u4e3a\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u8f6f\u4ef6\u5f00\u53d1\u65b9\u6cd5\u3002\u8fd9\u5728\u6700\u521d\u7684\u65f6\u5019\u5bfc\u81f4\u4e86\u4e00\u4e2a\u72ec\u7279\u7684\u9762\u5411\u5bf9\u8c61\u6570\u636e\u6a21\u578b\u7684\u53d1\u5c55\uff0c\u4f46\u662f\u73b0\u5728\u5bf9\u8c61\u7684\u6982\u5ff5\u5df2\u7ecf\u88ab\u5f88\u597d\u5730\u6574\u5408\u5230\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u3002\u5df2\u7ecf\u6709\u4e86\u628a\u5bf9\u8c61\u5b58\u653e\u5230\u5173\u7cfb\u8868\u4e2d\u7684\u89c4\u8303\u3002\u8fc7\u7a0b\u53ef\u4ee5\u88ab\u5b58\u653e\u5728\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\uff0c\u5e76\u7531\u6570\u636e\u5e93\u7cfb\u7edf\u6765\u6267\u884c\u5b83\u4eec\u3002\u8fd9\u53ef\u4ee5\u770b\u6210\u5bf9\u5173\u7cfb\u6a21\u578b\u8fdb\u884c\u6269\u5c55\uff0c\u589e\u52a0\u4e86\u5c01\u88c5\u3001\u65b9\u6cd5\u548c\u5bf9\u8c61\u6807\u8bc6\u7b49\u6982\u5ff5\u3002</p> </li> <li> <p>Other older models:</p> <ul> <li>Network model (\u7f51\u72b6\u6a21\u578b)</li> </ul> <p>\u7f51\u72b6\u6a21\u578b\u662f\u4e00\u79cd\u6570\u636e\u5e93\u6a21\u578b\uff0c\u5b83\u5141\u8bb8\u8bb0\u5f55\u4e4b\u95f4\u5b58\u5728\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u3002\u7f51\u72b6\u6a21\u578b\u4e2d\u7684\u8bb0\u5f55\u53ef\u4ee5\u6709\u591a\u4e2a\u7236\u8bb0\u5f55\u548c\u591a\u4e2a\u5b50\u8bb0\u5f55\uff0c\u5f62\u6210\u4e00\u4e2a\u590d\u6742\u7684\u7f51\u72b6\u7ed3\u6784\u3002</p> <ul> <li>Hierarchical model (\u5c42\u6b21\u6a21\u578b)</li> </ul> <p>\u5c42\u6b21\u6a21\u578b\u662f\u4e00\u79cd\u6570\u636e\u5e93\u6a21\u578b\uff0c\u5b83\u4f7f\u7528\u6811\u5f62\u7ed3\u6784\u6765\u8868\u793a\u6570\u636e\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u6bcf\u4e2a\u8bb0\u5f55\u6709\u4e00\u4e2a\u7236\u8bb0\u5f55\u548c\u591a\u4e2a\u5b50\u8bb0\u5f55\uff0c\u5f62\u6210\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\u3002</p> </li> </ul>"},{"location":"Computer_Science/DB/Chapter1/#view-of-data","title":"View of Data","text":"<p>For the system to be usable, it must retrieve data efficiently. The need for efficiency has led database system developers to use complex data structures to represent data in the database. Since many database-system users are not computer trained, developers hide the complexity from users through several levels of data abstraction, to simplify users\u2019 interactions with the system:</p> <ul> <li> <p> \u7269\u7406\u5c42 (physical level)\u3002      \u6700\u4f4e\u5c42\u6b21\u7684\u62bd\u8c61\uff0c\u63cf\u8ff0\u6570\u636e\u5b9e\u9645\u4e0a\u662f\u600e\u6837\u5b58\u50a8\u7684\u3002\u7269\u7406\u5c42\u8be6\u7ec6\u63cf\u8ff0\u590d\u6742\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u3002</p> </li> <li> <p>\u903b\u8f91\u5c42(logical level)\u3002</p> <p>\u6bd4\u7269\u7406\u5c42\u5c42\u6b21\u7a0d\u9ad8\u7684\u62bd\u8c61\uff0c\u63cf\u8ff0\u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u4ec0\u4e48\u6570\u636e\u4ee5\u53ca\u8fd9\u4e9b\u6570\u636e\u95f4\u5b58\u5728\u4ec0\u4e48\u8054\u7cfb\u3002\u8fd9\u6837\u903b\u8f91\u5c42\u5c31\u901a\u8fc7\u5c11\u91cf\u76f8\u5bf9\u7b80\u5355\u7684\u7ed3\u6784\u63cf\u8ff0\u4e86\u6574\u4e2a\u6570\u636e\u5e93\u3002\u867d\u7136\u903b\u8f91\u5c42\u7684\u7b80\u5355\u7ed3\u6784\u7684\u5b9e\u73b0\u53ef\u80fd\u6d89\u53ca\u590d\u6742\u7684\u7269\u7406\u5c42\u7ed3\u6784\uff0c\u4f46\u903b\u8f91\u5c42\u7684\u7528\u6237\u4e0d\u5fc5\u610f\u8bc6\u5230\u8fd9\u6837\u7684\u590d\u6742\u6027\u3002\u8fd9\u79f0\u4f5c\u7269\u7406\u6570\u636e\u72ec\u7acb\u6027(physical data independence)\u3002\u6570\u636e\u5e93\u7ba1\u7406\u5458\u4f7f\u7528\u62bd\u8c61\u7684\u903b\u8f91\u5c42\uff0c\u4ed6\u5fc5\u987b\u786e\u5b9a\u6570\u636e\u5e93\u4e2d\u5e94\u8be5\u4fdd\u5b58\u54ea\u4e9b\u4fe1\u606f\u3002</p> </li> <li> <p>\u89c6\u56fe\u5c42(view level)\u3002</p> <p>\u6700\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\uff0c\u5b83\u53ea\u63cf\u8ff0\u6574\u4e2a\u6570\u636e\u5e93\u7684\u67d0\u4e2a\u90e8\u5206\u3002\u5c3d\u7ba1\u5728\u903b\u8f91\u5c42\u4f7f\u7528\u4e86\u76f8\u5bf9\u7b80\u5355\u7684\u7ed3\u6784\uff0c\u4f46\u7531\u4e8e\u4e00\u4e2a\u5927\u578b\u6570\u636e\u5e93\u4e2d\u6240\u5b58\u4fe1\u606f\u7684\u591a\u6837\u6027\uff0c\u4ecd\u5b58\u5728\u4e00\u5b9a\u7a0b\u5ea6\u7684\u590d\u6742\u6027\u3002\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u5f88\u591a\u7528\u6237\u5e76\u4e0d\u9700\u8981\u6240\u6709\u7684\u8fd9\u4e9b\u4fe1\u606f\uff0c\u800c\u53ea\u9700\u8981\u8bbf\u95ee\u6570\u636e\u5e93\u7684\u4e00\u90e8\u5206\u3002\u89c6\u56fe\u5c42\u62bd\u8c61\u7684\u5b58\u5728\u6b63\u662f\u4e3a\u4e86\u4f7f\u8fd9\u4e9b\u7528\u6237\u4e0e\u7cfb\u7edf\u7684\u4ea4\u4e92\u66f4\u7b80\u5355\u7cfb\u7edf\u53ef\u4ee5\u4e3a\u540c\u4e00\u6570\u636e\u5e93\u63d0\u4f9b\u591a\u4e2a\u89c6\u56fe\u3002</p> </li> </ul> <p></p> Example <pre><code>type instructor = record \n    ID: string;\n    name: string;\n    dept_name: string;\n    salary: integer;\nend \n</code></pre> <p>\u5728\u7269\u7406\u5c42\uff0c\u4e00\u4e2a instructor \u8bb0\u5f55\u53ef\u80fd\u88ab\u63cf\u8ff0\u4e3a\u5305\u542b\u8fde\u7eed\u7684\u5b57\u8282\u7684\u5757\u3002\u7f16\u8bd1\u5668\u5bf9\u7a0b\u5e8f\u8bbe\u8ba1\u4eba\u5458\u5c4f\u853d\u4e86\u8fd9\u4e00\u5c42\u7684\u7ec6\u8282\u3002\u4e0e\u6b64\u7c7b\u4f3c\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u5bf9\u6570\u636e\u5e93\u7a0b\u5e8f\u8bbe\u8ba1\u4eba\u5458\u5c4f\u853d\u4e86\u8bb8\u591a\u6700\u5e95\u5c42\u7684\u5b58\u50a8\u7ec6\u8282\u3002\u800c\u6570\u636e\u5e93\u7ba1\u7406\u5458\u53ef\u80fd\u4e86\u89e3\u6570\u636e\u7269\u7406\u7ec4\u7ec7\u7684\u67d0\u4e9b\u7ec6\u8282\u3002\u4f8b\u5982\uff0c\u6709\u8bb8\u591a\u79cd\u5c06\u8868\u5b58\u50a8\u5230\u6587\u4ef6\u4e2d\u7684\u53ef\u80fd\u7684\u65b9\u6cd5\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\uff0c\u5c06\u8868\u5b58\u50a8\u4e3a\u6587\u4ef6\u4e2d\u7684\u4e00\u7cfb\u5217\u8bb0\u5f55\uff0c\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u5b57\u7b26(\u4f8b\u5982\u9017\u53f7)\u6765\u533a\u5206\u5f00\u8bb0\u5f55\u4e2d\u4e0d\u540c\u7684\u5c5e\u6027\uff0c\u7528\u53e6\u4e00\u4e2a\u7279\u6b8a\u7684\u5b57\u7b26(\u4f8b\u5982\u6362\u884c\u7b26)\u6765\u533a\u5206\u5f00\u4e0d\u540c\u7684\u8bb0\u5f55\u3002\u5982\u679c\u6240\u6709\u7684\u5c5e\u6027\u90fd\u662f\u56fa\u5b9a\u957f\u5ea6\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u53e6\u5916\u5b58\u50a8\u5c5e\u6027\u7684\u957f\u5ea6\uff0c\u800c\u6587\u4ef6\u4e2d\u7684\u533a\u5206\u7b26\u5c31\u53ef\u4ee5\u4e0d\u7528\u4e86\u3002\u53ef\u53d8\u957f\u5ea6\u5c5e\u6027\u53ef\u4ee5\u7528\u5148\u5b58\u50a8\u957f\u5ea6\u3001\u540e\u9762\u7d27\u8ddf\u6570\u636e\u7684\u529e\u6cd5\u6765\u89e3\u51b3\u3002\u6570\u636e\u5e93\u4f7f\u7528\u4e00\u79cd\u79f0\u4f5c\u7d22\u5f15\u7684\u6570\u636e\u7ed3\u6784\u6765\u652f\u6301\u5bf9\u8bb0\u5f55\u7684\u9ad8\u6548\u68c0\u7d22;\u8fd9\u4e9b\u4e5f\u662f\u7269\u7406\u5c42\u7684\u6784\u6210\u6210\u5206\u3002</p> <p>\u5728\u903b\u8f91\u5c42\uff0c\u6bcf\u4e2a\u8fd9\u6837\u7684\u8bb0\u5f55\u901a\u8fc7\u7c7b\u578b\u5b9a\u4e49\u8fdb\u884c\u63cf\u8ff0\uff0c\u6b63\u5982\u524d\u9762\u7684\u4ee3\u7801\u6bb5\u6240\u793a\u3002\u5728\u903b\u8f91\u5c42\u4e0a\u540c\u65f6\u8fd8\u8981\u5b9a\u4e49\u8fd9\u4e9b\u8bb0\u5f55\u7c7b\u578b\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb;\u8fd9\u6837\u7684\u76f8\u4e92\u5173\u7cfb\u7684\u4e00\u4e2a\u793a\u4f8b\u662f\uff0cinstructor \u8bb0\u5f55\u7684 dept_name \u503c\u5fc5\u987b\u51fa\u73b0\u5728 department \u8868\u4e2d\u3002\u7a0b\u5e8f\u8bbe\u8ba1\u4eba\u5458\u6b63\u662f\u5728\u8fd9\u4e2a\u62bd\u8c61\u5c42\u6b21\u4e0a\u4f7f\u7528\u67d0\u79cd\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u8fdb\u884c\u5de5\u4f5c\u3002\u4e0e\u6b64\u7c7b\u4f3c\uff0c\u6570\u636e\u5e93\u7ba1\u7406\u5458\u901a\u5e38\u4e5f\u662f\u5728\u8fd9\u4e2a\u62bd\u8c61\u5c42\u6b21\u4e0a\u5de5\u4f5c\u3002</p> <p>\u6700\u540e\uff0c\u5728\u89c6\u56fe\u5c42\uff0c\u8ba1\u7b97\u673a\u7528\u6237\u770b\u89c1\u7684\u662f\u5bf9\u5176\u5c4f\u853d\u4e86\u6570\u636e\u7c7b\u578b\u7ec6\u8282\u7684\u4e00\u7ec4\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u89c6\u56fe\u5c42\u4e0a\u5b9a\u4e49\u4e86\u6570\u636e\u5e93\u7684\u591a\u4e2a\u89c6\u56fe\uff0c\u6570\u636e\u5e93\u7528\u6237\u770b\u5230\u7684\u662f\u67d0\u4e9b\u6216\u6240\u6709\u89c6\u56fe\u3002\u9664\u4e86\u5c4f\u853d\u6570\u636e\u5e93\u7684\u903b\u8f91\u5c42\u7ec6\u8282\u4ee5\u5916\uff0c\u89c6\u56fe\u8fd8\u63d0\u4f9b\u4e86\u9632\u6b62\u7528\u6237\u8bbf\u95ee\u6570\u636e\u5e93\u7684\u67d0\u4e9b\u90e8\u5206\u7684\u5b89\u5168\u6027\u673a\u5236\u3002\u4f8b\u5982\uff0c\u5927\u5b66\u6ce8\u518c\u529e\u516c\u5ba4\u7684\u804c\u5458\u53ea\u80fd\u770b\u89c1\u6570\u636e\u5e93\u4e2d\u5173\u4e8e\u5b66\u751f\u7684\u90a3\u90e8\u5206\u4fe1\u606f\uff0c\u800c\u4e0d\u80fd\u8bbf\u95ee\u6d89\u53ca\u6559\u5e08\u5de5\u8d44\u7684\u4fe1\u606f\u3002</p>"},{"location":"Computer_Science/DB/Chapter1/#schemas-and-instances","title":"Schemas and Instances","text":"<p>\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4fe1\u606f\u4f1a\u88ab\u63d2\u5165\u6216\u5220\u9664\uff0c\u6570\u636e\u5e93\u4e5f\u5c31\u53d1\u751f\u4e86\u6539\u53d8\u3002\u7279\u5b9a\u65f6\u523b\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u7684\u4fe1\u606f\u7684\u96c6\u5408\u79f0\u4f5c\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u5b9e\u4f8b(instance)\u3002\u800c\u6570\u636e\u5e93\u7684\u603b\u4f53\u8bbe\u8ba1\u79f0\u4f5c\u6570\u636e\u5e93\u6a21\u5f0f(schema)\u3002</p> <p>Note</p> <p>instance: be like variable</p> <p>schema: be like type</p> <ul> <li>physical schema: \u5728\u7269\u7406\u5c42\u63cf\u8ff0\u6570\u636e\u5e93\u7684\u8bbe\u8ba1</li> <li>logical schema: \u5728\u903b\u8f91\u5c42\u63cf\u8ff0\u6570\u636e\u5e93\u7684\u8bbe\u8ba1</li> <li>subschema: \u5728\u89c6\u56fe\u5c42\u63cf\u8ff0\u6570\u636e\u5e93\u7684\u8bbe\u8ba1</li> </ul> <p>\u5728\u8fd9\u4e9b\u6a21\u5f0f\u4e2d\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5458\u4f7f\u7528\u903b\u8f91\u6a21\u5f0f\u6765\u6784\u9020\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u5176\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u5f71\u54cd\u6765\u770b\uff0c\u903b\u8f91\u6a21\u5f0f\u662f\u76ee\u524d\u6700\u91cd\u8981\u7684\u4e00\u79cd\u6a21\u5f0f\u3002\u7269\u7406\u6a21\u5f0f\u9690\u85cf\u5728\u903b\u8f91\u6a21\u5f0f\u4e4b\u4e0b\uff0c\u5e76\u4e14\u901a\u5e38\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e1d\u6beb\u4e0d\u53d7\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u88ab\u8f7b\u6613\u5730\u66f4\u6539\u3002\u5e94\u7528\u7a0b\u5e8f\u5982\u679c\u4e0d\u4f9d\u8d56\u4e8e\u7269\u7406\u6a21\u5f0f\uff0c\u5373\u4f7f\u7269\u7406\u6a21\u5f0f\u6539\u53d8\u4e86\u5b83\u4eec\u4e5f\u65e0\u987b\u91cd\u5199\uff0c\u5b83\u4eec\u5c31\u88ab\u79f0\u4e3a\u5177\u6709\u7269\u7406\u6570\u636e\u72ec\u7acb\u6027(physical data independence)\u3002 </p> <p>Physical data independence \u2013 the ability to modify the physical schema without changing the logical schema. </p> <p>Logical data independence \u2013 protect application programs from changes in logical structure of data. </p> <pre><code>Logical data independence is hard to achieve as the application programs are heavily dependent on the logical structure of data.\n</code></pre>"},{"location":"Computer_Science/DB/Chapter1/#database-language","title":"Database Language","text":"<p>Data Definition Language (DDL): Specification notation for defining the database schema. </p> <p>\u7528\u4e8e\u5b9a\u4e49\u6570\u636e\u5e93\u67b6\u6784\u7684\u89c4\u8303\u8868\u793a\u6cd5\u3002</p> <p>Specifies a database scheme as a set of definitions of relational schema.  Also specifies storage structure, access methods, and consistency constraints.</p> <p>DDL statements are compiled, resulting in a set of tables stored in a special file called data dictionary. </p> <p>\u6570\u636e\u5e93\u7cfb\u7edf\u4ec5\u5b9e\u73b0\u53ef\u4ee5\u4ee5\u6700\u5c0f\u4ee3\u4ef7\u6d4b\u8bd5\u7684\u5b8c\u6574\u6027\u7ea6\u675f\u3002</p> <ul> <li> <p>\u57df\u7ea6\u675f(domain constraint)\u3002</p> <p>\u6bcf\u4e2a\u5c5e\u6027\u90fd\u5fc5\u987b\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u6240\u6709\u53ef\u80fd\u7684\u53d6\u503c\u6784\u6210\u7684\u57df(\u4f8b\u5982\uff0c\u6574\u6570\u578b\u3001\u5b57\u7b26\u578b\u3001\u65e5\u671f/\u65f6\u95f4\u578b)\u3002\u58f0\u660e\u4e00\u4e2a\u5c5e\u6027\u5c5e\u4e8e\u67d0\u4e2a\u5177\u4f53\u7684\u57df\u5c31\u76f8\u5f53\u4e8e\u7ea6\u675f\u5b83\u53ef\u4ee5\u53d6\u7684\u503c\u3002\u57df\u7ea6\u675f\u662f\u5b8c\u6574\u6027\u7ea6\u675f\u7684\u6700\u57fa\u672c\u5f62\u5f0f\u3002\u6bcf\u5f53\u6709\u65b0\u6570\u636e\u9879\u63d2\u5165\u6570\u636e\u5e93\u4e2d\uff0c\u7cfb\u7edf\u5c31\u80fd\u65b9\u4fbf\u5730\u8fdb\u884c\u57df\u7ea6\u675f\u68c0\u6d4b\u3002</p> </li> <li> <p>\u5f15\u7528\u5b8c\u6574\u6027(referential integrity)\u3002</p> <p>\u5e38\u5e38\u6709\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u786e\u4fdd\u4e00\u4e2a\u5173\u7cfb\u4e2d\u7ed9\u5b9a\u5c5e\u6027\u96c6\u4e0a\u7684\u53d6\u503c\u4e5f\u5728\u53e6\u4e00\u5173\u7cfb\u7684\u67d0\u4e00\u5c5e\u6027\u96c6\u7684\u53d6\u503c\u4e2d\u51fa\u73b0(\u5f15\u7528\u5b8c\u6574\u6027)\u3002\u4f8b\u5982\u6bcf\u95e8\u8bfe\u7a0b\u6240\u5217\u51fa\u7684\u7cfb\u5fc5\u987b\u662f\u5927\u5b66\u4e2d\u5b9e\u9645\u5b58\u5728\u7684\u7cfb\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u4e00\u4e2a course \u8bb0\u5f55\u4e2d\u7684 dept_name \u503c\u5fc5\u987b\u51fa\u73b0\u5728 department \u5173\u7cfb\u4e2d\u7684\u67d0\u4e2a\u8bb0\u5f55\u7684 dept_name \u5c5e\u6027\u4e2d\u3002\u6570\u636e\u5e93\u7684\u4fee\u6539\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5f15\u7528\u5b8c\u6574\u6027\u7684\u7834\u574f\u3002\u5f53\u5f15\u7528\u5b8c\u6574\u6027\u7ea6\u675f\u88ab\u8fdd\u53cd\u65f6\uff0c\u901a\u5e38\u7684\u5904\u7406\u662f\u62d2\u7edd\u6267\u884c\u5bfc\u81f4\u5b8c\u6574\u6027\u88ab\u7834\u574f\u7684\u64cd\u4f5c\u3002</p> </li> <li> <p>\u6388\u6743(authorization)\u3002</p> <p>\u6211\u4eec\u4e5f\u8bb8\u60f3\u5bf9\u7528\u6237\u52a0\u4ee5\u533a\u522b\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u7528\u6237\u5728\u6570\u636e\u5e93\u4e2d\u7684\u4e0d\u540c\u6570\u636e\u503c\u4e0a\u5141\u8bb8\u4e0d\u540c\u7684\u8bbf\u95ee\u7c7b\u578b\u3002\u8fd9\u4e9b\u533a\u522b\u4ee5\u6388\u6743\u6765\u8868\u8fbe\uff0c\u6700\u5e38\u89c1\u7684\u662f:\u8bfb\u6743\u9650(read authorization)\uff0c\u5141\u8bb8\u8bfb\u53d6\u6570\u636e\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u6570\u636e;\u63d2\u5165\u6743\u9650(insert authorization)\uff0c\u5141\u8bb8\u63d2\u5165\u65b0\u6570\u636e\uff0c\u4f46\u4e0d\u5141\u8bb8\u4fee\u6539\u5df2\u6709\u6570\u636e;\u66f4\u65b0\u6743\u9650(update authorization)\uff0c\u5141\u8bb8\u4fee\u6539\u4f46\u4e0d\u80fd\u5220\u9664\u6570\u636e;\u5220\u9664\u6743\u9650(delete authorization)\uff0c\u5141\u8bb8\u5220\u9664\u6570\u636e\u3002\u6211\u4eec\u53ef\u4ee5\u8d4b\u4e88\u7528\u6237\u6240\u6709\u6216\u8005\u90e8\u5206\u8fd9\u4e9b\u6743\u9650\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u8d4b\u4e88\u7528\u6237\u4efb\u4f55\u8fd9\u4e9b\u6743\u9650\u3002</p> </li> </ul> <p>DDL\u7684\u8f93\u51fa\u653e\u5728\u6570\u636e\u5b57\u5178(data dictionary)\u4e2d\uff0c\u6570\u636e\u5b57\u5178\u5305\u542b\u5143\u6570\u636e(metadata)\uff0c\u5143\u6570\u636e\u662f\u5173\u4e8e\u6570\u636e\u7684\u6570\u636e\u3002\u53ef\u4ee5\u628a\u6570\u636e\u5b57\u5178\u770b\u4f5c\u4e00\u79cd\u7279\u6b8a\u7684\u8868\uff0c\u8fd9\u79cd\u8868\u53ea\u80fd\u7531\u6570\u636e\u5e93\u7cfb\u7edf\u672c\u8eab(\u4e0d\u662f\u5e38\u89c4\u7684\u7528\u6237)\u6765\u8bbf\u95ee\u548c\u4fee\u6539\u3002</p> <p>Data Manipulation Language (DML): Language for accessing and manipulating the data organized by appropriate data model.  \u7528\u4e8e\u8bbf\u95ee\u548c\u4f5c\u6309\u9002\u5f53\u6570\u636e\u6a21\u578b\u7ec4\u7ec7\u7684\u6570\u636e\u7684\u8bed\u8a00\u3002</p> <ul> <li>Retrieve data from the database </li> <li>Insert / delete / update data in the database </li> <li>DML also known as query language </li> </ul> <p>Two classes of DMLs</p> <ul> <li>Procedural DML (\u8fc7\u7a0b\u5316\u7684) \u2013 user specifies what data is required and how to get those data  (e.g., C, Pascal, Java, etc.). </li> </ul> <p>\u8981\u6c42\u7528\u6237\u6307\u5b9a\u9700\u8981\u4ec0\u4e48\u6570\u636e\u4ee5\u53ca\u5982\u4f55\u83b7\u5f97\u8fd9\u4e9b\u6570\u636e</p> <ul> <li>Nonprocedural DML \uff08\u58f0\u660e\u5f0f\u7684/\u975e\u8fc7\u7a0b\u5316\u7684\uff09\u2013 user specifies what data is required without specifying how to get those data  (e.g., SQL, Prolog, etc.).</li> </ul> <p>\u53ea\u8981\u6c42\u7528\u6237\u6307\u5b9a\u9700\u8981\u4ec0\u4e48\u6570\u636e\uff0c\u800c\u4e0d\u5fc5\u6307\u660e\u5982\u4f55\u83b7\u5f97\u8fd9\u4e9b\u6570\u636e </p> <p>SQL = DDL+ DML + DCL</p> <p>\u4e00\u4e2a\u67e5\u8be2\u793a\u4f8b\uff1a</p> <pre><code>select instructor.name\nfrom instructor\nwhere instructor.dept name = 'History';\n</code></pre> <p>\u67e5\u8be2\u53ef\u4ee5\u4e0d\u6b62\u6d89\u53ca\u4e00\u4e2a\u8868\uff1a</p> <pre><code>select instructor.ID, department.dept name\nfrom instructor, department\nwhere instructor.dept name= department.dept name and\ndepartment.budget &gt; 95000;\n</code></pre> <p>Three classes of SQL usage</p> <ol> <li> <p>Use it directly in the interactive environment, e.g., Query Analyzer of SQL Server, Sql*Plus and Work Sheet of Oracle, mysql command line client of MySQL, etc. </p> </li> <li> <p>Use it by host language through ODBC / JDBC. </p> </li> <li> <p>Use it by host language with embed-SQL. </p> </li> </ol> <p>Data Control Language (DCL) </p>"},{"location":"Computer_Science/DB/Chapter1/#database-design","title":"Database Design","text":"<p>Entity-Relationship (E-R) Model</p> <ul> <li> <p>Entities (objects) \u5b9e\u4f53 (\u5bf9\u8c61)</p> <p>Entities are described by a set of attributes(\u5c5e\u6027). </p> </li> <li> <p>Relationships between entities \u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb</p> <p>Relationship set depositor associates customers with accounts.</p> </li> </ul> <p></p> <p>\u4e00\u5bf9\u4e00/\u4e00\u5bf9\u591a/\u591a\u5bf9\u4e00/\u591a\u5bf9\u591a</p>"},{"location":"Computer_Science/DB/Chapter1/#database-users-and-administrators","title":"Database Users and Administrators","text":"<p>Database administrator (DBA): A special user having central control over database and programs accessing those data. </p> <ul> <li>DBA has the highest privilege for the database. </li> <li>DBA coordinates all the activities of the database system.  DBA \u534f\u8c03\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u6240\u6709\u6d3b\u52a8.</li> <li>DBA controls all users authority to the database. </li> <li>DBA has a good understanding of the enterprise\u2019s information resources and requirements. </li> </ul> <p>Database administrator's duties/functions include: </p> <ul> <li>\u6a21\u5f0f\u5b9a\u4e49(schema definition)\u3002     DBA \u901a\u8fc7\u6267\u884c\u7528 DDL \u7f16\u5199\u7684\u4e00\u7cfb\u5217\u6570\u636e\u5b9a\u4e49\u8bed\u53e5\u6765\u521b\u5efa\u6700\u521d\u7684\u6570\u636e\u5e93\u6a21\u5f0f\u3002</li> <li>\u5b58\u50a8\u7ed3\u6784\u53ca\u5b58\u53d6\u65b9\u6cd5\u5b9a\u4e49(storage structure and access-method definition)\u3002     DBA \u53ef\u4ee5\u5177\u4f53\u8bf4\u660e\u4e0e\u6570\u636e\u7269\u7406\u7ec4\u7ec7\u53ca\u7d22\u5f15\u521b\u5efa\u76f8\u5173\u7684\u4e00\u4e9b\u53c2\u6570\u3002</li> <li>\u6a21\u5f0f\u53ca\u7269\u7406\u7ec4\u7ec7\u7684\u4fee\u6539(schema and physical-organization modification)\u3002     \u7531 DBA \u5bf9\u6a21\u5f0f\u548c\u7269\u7406\u7ec4\u7ec7\u8fdb\u884c\u4fee\u6539\uff0c\u4ee5\u53cd\u6620\u673a\u6784\u7684\u9700\u6c42\u53d8\u5316\uff0c\u6216\u4e3a\u63d0\u9ad8\u6027\u80fd\u9009\u62e9\u4e0d\u540c\u7684\u7269\u7406\u7ec4\u7ec7\u3002</li> <li>\u6570\u636e\u8bbf\u95ee\u6388\u6743(granting of authorization for data access)\u3002     \u901a\u8fc7\u6388\u4e88\u4e0d\u540c\u7c7b\u578b\u7684\u6743\u9650\u6570\u636e\u5e93\u7ba1\u7406\u5458\u53ef\u4ee5\u89c4\u5b9a\u4e0d\u540c\u7684\u7528\u6237\u5404\u81ea\u53ef\u4ee5\u8bbf\u95ee\u7684\u6570\u636e\u5e93\u7684\u90e8\u5206\u3002\u6388\u6743\u4fe1\u606f\u4fdd\u5b58\u5728\u4e00\u4e2a\u7279\u6b8a\u7684\u7cfb\u7edf\u7ed3\u6784\u4e2d\uff0c\u4e00\u65e6\u7cfb\u7edf\u4e2d\u6709\u8bbf\u95ee\u6570\u636e\u7684\u8981\u6c42\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u5c31\u53bb\u67e5\u9605\u8fd9\u4e9b\u4fe1\u606f\u3002</li> <li>\u65e5\u5e38\u7ef4\u62a4(routine maintenance)\u3002     \u6570\u636e\u5e93\u7ba1\u7406\u5458\u7684\u65e5\u5e38\u7ef4\u62a4\u6d3b\u52a8\u6709:\u5468\u671f\u6027\u5730\u5907\u4efd\u6570\u636e\u5e93\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u4ee5\u9632\u6b62\u50cf\u6d2a\u6c34\u4e4b\u7c7b\u7684\u707e\u96be\u53d1\u751f\u65f6\u6570\u636e\u4e22\u5931\u3002\u786e\u4fdd\u5728\u6b63\u5e38\u8fd0\u8f6c\u65f6\u6709\u8db3\u591f\u7684\u7a7a\u4f59\u78c1\u76d8\u7a7a\u95f4\uff0c\u5e76\u4e14\u5728\u9700\u8981\u65f6\u5347\u7ea7\u78c1\u76d8\u7a7a\u95f4\u3002\u76d1\u89c6\u6570\u636e\u5e93\u4e0a\u8fd0\u884c\u7684\u4f5c\u4e1a\uff0c\u5e76\u786e\u4fdd\u6570\u636e\u5e93\u7684\u6027\u80fd\u4e0d\u56e0\u4e00\u4e9b\u7528\u6237\u63d0\u4ea4\u4e86\u65f6\u95f4\u82b1\u8d39\u8f83\u591a\u7684\u4efb\u52a1\u800c\u964d\u4f4e\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter1/#transaction-management","title":"Transaction Management","text":"<p>A transaction is a collection of operations that performs a single logical function in a database application. </p> <p>\u4e8b\u52a1\u662f\u6267\u884c\u6570\u636e\u5e93\u5e94\u7528\u4e2d\u5355\u4e2a\u903b\u8f91\u529f\u80fd\u7684\u4e00\u7ec4\u64cd\u4f5c\u3002</p> <p>Transaction requirements include atomicity, consistence, isolation, durability. </p> <p>Transaction-management component ensures that the database remains in a consistent (or correct) state, although system failures (e.g., power failures and operating system crashes) and transaction failures.</p> <p>\u4e8b\u52a1\u7ba1\u7406\u7ec4\u4ef6\u786e\u4fdd\u6570\u636e\u5e93\u5728\u7cfb\u7edf\u6545\u969c\uff08\u4f8b\u5982\uff0c\u7535\u6e90\u6545\u969c\u548c\u4f5c\u7cfb\u7edf\u5d29\u6e83\uff09\u548c\u4e8b\u52a1\u6545\u969c\u65f6\u4fdd\u6301\u4e00\u81f4\uff08\u6216\u6b63\u786e\uff09\u72b6\u6001\u3002</p> <p>Concurrency-control manager controls the interaction among the concurrent transactions. </p> <p>\u5e76\u53d1\u63a7\u5236\u7ba1\u7406\u5668\u63a7\u5236\u5e76\u53d1\u4e8b\u52a1\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002</p> <p>The storage manager is the component of a database system that provides the interface between the low-level data stored in the database and the application programs and queries submitted to the system.</p> <p>\u5b58\u50a8\u7ba1\u7406\u5668\u662f\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\u8d1f\u8d23\u5728\u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u7684\u4f4e\u5c42\u6570\u636e\u4e0e\u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u5411\u7cfb\u7edf\u63d0\u4ea4\u7684\u67e5\u8be2\u4e4b\u95f4\u63d0\u4f9b\u63a5\u53e3\u7684\u90e8\u4ef6\u3002</p> <p>The storage manager is responsible for the interaction with the file manager. The raw data are stored on the disk using the file system provided by the operating system.</p> <p>\u5b58\u50a8\u7ba1\u7406\u5668\u8d1f\u8d23\u4e0e\u6587\u4ef6\u7ba1\u7406\u5668\u8fdb\u884c\u4ea4\u4e92\u539f\u59cb\u6570\u636e\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u6587\u4ef6\u7cfb\u7edf\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u3002\u5b58\u50a8\u7ba1\u7406\u5668\u5c06\u5404\u79cd DML \u8bed\u53e5\u7ffb\u8bd1\u4e3a\u5e95\u5c42\u6587\u4ef6\u7cfb\u7edf\u547d\u4ee4\u3002</p> <p>Thus, the storage manager is responsible for storing, retrieving, and updating data in the database.</p> <p>\u56e0\u6b64\uff0c\u5b58\u50a8\u7ba1\u7406\u5668\u8d1f\u8d23\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u5b58\u50a8\u3001\u68c0\u7d22\u548c\u66f4\u65b0\u3002</p> <p>The storage manager components include:</p> <ul> <li>Authorization and integrity manager</li> <li>Transaction manager</li> <li>File manager</li> <li>Buffer manager</li> </ul> <p>\u5b58\u50a8\u7ba1\u7406\u5668\u7ec4\u4ef6\u529f\u80fd</p> <ul> <li> <p>\u6743\u9650\u53ca\u5b8c\u6574\u6027\u7ba1\u7406\u5668(authorization and integrity manager),\u5b83\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u5b8c\u6574\u6027\u7ea6\u675f\uff0c\u5e76\u68c0\u67e5\u8bd5\u56fe\u8bbf\u95ee\u6570\u636e\u7684\u7528\u6237\u7684\u6743\u9650\u3002</p> </li> <li> <p>\u4e8b\u52a1\u7ba1\u7406\u5668(transaction manager)\uff0c\u5b83\u4fdd\u8bc1\u5373\u4f7f\u7cfb\u7edf\u53d1\u751f\u4e86\u6545\u969c\uff0c\u6570\u636e\u5e93\u4e5f\u4fdd\u6301\u5728\u4e00\u81f4\u7684(\u6b63\u786e\u7684)\u72b6\u6001\uff0c\u5e76\u4fdd\u8bc1\u5e76\u53d1\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u53d1\u751f\u51b2\u7a81\u3002</p> </li> <li> <p>\u6587\u4ef6\u7ba1\u7406\u5668(file manager)\uff0c\u5b83\u7ba1\u7406\u78c1\u76d8\u5b58\u50a8\u7a7a\u95f4\u7684\u5206\u914d\uff0c\u7ba1\u7406\u7528\u4e8e\u8868\u793a\u78c1\u76d8\u4e0a\u6240\u5b58\u50a8\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\u3002</p> </li> <li> <p>\u7f13\u51b2\u533a\u7ba1\u7406\u5668(buffer manager)\uff0c\u5b83\u8d1f\u8d23\u5c06\u6570\u636e\u4ece\u78c1\u76d8\u4e0a\u53d6\u5230\u5185\u5b58\u4e2d\uff0c\u5e76\u51b3\u5b9a\u54ea\u4e9b\u6570\u636e\u5e94\u88ab\u7f13\u51b2\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u662f\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u4e00\u4e2a\u5173\u952e\u90e8\u5206\uff0c\u56e0\u4e3a\u5b83\u4f7f\u6570\u636e\u5e93\u53ef\u4ee5\u5904\u7406\u6bd4\u5185\u5b58\u5927\u5f97\u591a\u7684\u6570\u636e\u3002</p> </li> </ul> <p>\u4f5c\u4e3a\u7cfb\u7edf\u7269\u7406\u5b9e\u73b0\u7684\u4e00\u90e8\u5206\uff0c\u5b58\u50a8\u7ba1\u7406\u5668\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u51e0\u79cd\u6570\u636e\u7ed3\u6784:</p> <ul> <li>\u6570\u636e\u6587\u4ef6(datafle)\uff0c\u5b83\u5b58\u50a8\u6570\u636e\u5e93\u81ea\u8eab\u3002</li> <li>\u6570\u636e\u5b57\u5178(data dictionary)\uff0c\u5b83\u5b58\u50a8\u5173\u4e8e\u6570\u636e\u5e93\u7ed3\u6784\u7684\u5143\u6570\u636e\uff0c\u7279\u522b\u662f\u6570\u636e\u5e93\u6a21\u5f0f</li> <li>\u7d22\u5f15(index)\uff0c\u5b83\u63d0\u4f9b\u5bf9\u6570\u636e\u9879\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u6570\u636e\u5e93\u7d22\u5f15\u63d0\u4f9b\u4e86\u6307\u5411\u5305\u542b\u7279\u5b9a\u503c\u7684\u6570\u636e\u9879\u7684\u6307\u9488\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter1/#query-processor","title":"Query Processor","text":"<p>The query processor components include:</p> <ul> <li>DDL interpreter, which interprets DDL statements and records the definitions in the data dictionary.(Parsing and translation)</li> <li>DML compiler, which translates DML statements in a query language into an evaluation plan consisting of low-level instructions that the query-evaluation engine understands.     A query can usually be translated into any of a number of alternative evaluation plans that all give the same result. The DML compiler also performs query optimization; that is, it picks the lowest cost evaluation plan from among the alternatives. (Optimization)</li> <li>Query evaluation engine, which executes low-level instructions generated by the DML compiler. (Evaluation)</li> </ul> <p></p>"},{"location":"Computer_Science/DB/Chapter1/#database-system-internals","title":"Database System Internals","text":""},{"location":"Computer_Science/DB/Chapter1/#database-architecture","title":"Database Architecture","text":"<p>The architecture of a database system is greatly influenced by the underlying computer system on which the database is running: </p> <ul> <li>Centralized </li> <li>Client-server </li> <li>Parallel (multi-processor) </li> <li>Distributed </li> </ul> <p></p>"},{"location":"Computer_Science/DB/Chapter1/#history","title":"History","text":"<ul> <li>1973 Turing Award: Charles W. Bachman (father of databases)</li> <li>1981 Turing Award: Edgar F. Codd</li> <li>1998 Turing Award: Jim Gray</li> <li>2014 Turing Award: Michael Stonebraker</li> </ul>"},{"location":"Computer_Science/DB/Chapter12/","title":"Chapter 12 | Physical Storage Systems","text":"<p> \u7ea6 3526 \u4e2a\u5b57  6 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 18 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter12/#classification-of-physical-storage-media","title":"Classification of Physical Storage Media","text":"<p>Can differentiate storage into: volatile and non-volatile.</p> <ul> <li>volatile storage(\u6613\u5931\u5b58\u50a8): loses contents when power is switched off</li> <li>non-volatile storage\uff08\u975e\u6613\u5931\u5b58\u50a8\uff09:<ul> <li>Contents persist even when power is switched off.</li> <li>Includes secondary and tertiary storage, as well as batter-backed up main-memory.</li> </ul> </li> </ul> <p></p> <p></p>"},{"location":"Computer_Science/DB/Chapter12/#storage-hierarchy","title":"Storage Hierarchy","text":"<p>primary storage: Fastest media but volatile (cache, main memory).</p> <p>secondary storage: next level in hierarchy, non-volatile, moderately fast access time, also called on-line storage     - E.g. flash memory, magnetic disks</p> <p>tertiary storage: lowest level in hierarchy, non-volatile, slow access time, also called off-line storage     - E.g. magnetic tape, optical storage</p> <p>\u6700\u5feb\u7684\u5b58\u50a8\u4ecb\u8d28(\u4f8b\u5982\u9ad8\u901f\u7f13\u5b58\u548c\u4e3b\u5b58)\u79f0\u4e3a\u4e3b\u5b58\u50a8\u5668(primary storage)\u3002\u5c42\u6b21\u7ed3\u6784\u4e2d\u4e3b\u5b58\u50a8\u4ecb\u8d28\u7684\u4e0b\u4e00\u5c42\u4ecb\u8d28(\u4f8b\u5982\u95ea\u5b58\u548c\u78c1\u76d8)\u79f0\u4e3a\u8f85\u52a9\u5b58\u50a8\u5668(secondary storage)\uff0c\u6216\u5728\u7ebf\u5b58\u50a8\u5668(online storage)\u3002\u5c42\u6b21\u7ed3\u6784\u4e2d\u6700\u5e95\u5c42\u7684\u4ecb\u8d28(\u5982\u78c1\u5e26\u548c\u5149\u76d8)\u79f0\u4e3a\u4e09\u7ea7\u5b58\u50a8\u5668(tertiary storage)\uff0c\u6216\u79bb\u7ebf\u5b58\u50a8\u5668(offine storage)\u3002</p>"},{"location":"Computer_Science/DB/Chapter12/#magnetic-disks","title":"Magnetic Disks","text":"<p>\u5728\u4f7f\u7528\u78c1\u76d8\u65f6\uff0c\u9a71\u52a8\u7535\u673a\u4ee5\u6052\u5b9a\u7684\u9ad8\u901f\u65cb\u8f6c\u78c1\u76d8\uff0c\u901a\u5e38\u662f\u6bcf\u5206\u949f5400\u523010000\u8f6c\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u578b\u53f7\u3002</p> <p>Read-write head: Positioned very close to the platter surface (almost touching it). Reads or writes magnetically encoded information.</p> <p>\u6709\u4e00\u4e2a\u8bfb\u5199\u5934\u6b63\u597d\u4f4d\u4e8e\u76d8\u7247\u8868\u9762\u7684\u4e0a\u65b9\u3002\u4e3a\u4e86\u589e\u5927\u8bb0\u5f55\u5bc6\u5ea6\uff0c\u8bfb\u5199\u5934\u5c3d\u53ef\u80fd\u5730\u9760\u8fd1\u78c1\u76d8\u76d8\u7247\u7684\u8868\u9762\u3002\u8bfb\u5199\u5934\u4e00\u822c\u60ac\u6d6e\u4e8e\u79bb\u76d8\u7247\u8868\u9762\u4ec5\u6570\u5fae\u7c73\u7684\u4f4d\u7f6e\u4e0a;\u78c1\u76d8\u7684\u65cb\u8f6c\u4f1a\u4ea7\u751f\u5fae\u98ce\uff0c\u800c\u78c1\u5934\u88c5\u7f6e\u7684\u5f62\u72b6\u4f7f\u5176\u5728\u5fae\u98ce\u4f5c\u7528\u4e0b\u6070\u597d\u6d6e\u4e8e\u76d8\u7247\u8868\u9762\u4e4b\u4e0a\u3002\u56e0\u4e3a\u8bfb\u5199\u5934\u79bb\u76d8\u7247\u8868\u9762\u975e\u5e38\u8fd1\uff0c\u6240\u4ee5\u76d8\u7247\u5fc5\u987b\u5236\u4f5c\u5f97\u975e\u5e38\u5e73\u3002</p> <p>Surface of platter divided into circular tracks\uff08\u78c1\u9053\uff09Over 50K-100K tracks per platter on typical hard disks.</p> <p>\u76d8\u7247\u7684\u8868\u9762\u88ab\u903b\u8f91\u5730\u5212\u5206\u4e3a\u78c1\u9053(track)\u3002</p> <p>Each track is divided into sectors\uff08\u6247\u533a\uff09. A sector is the smallest unit of data that can be read or written. Sector size typically 512 bytes. Typical sectors per track: 500 to 1000 (on inner tracks) to 1000 to 2000 (on outer tracks)</p> <p>\u78c1\u9053\u53c8\u88ab\u5212\u5206\u4e3a\u6247\u533a(sector)\u3002\u6247\u533a(sector)\u662f\u4ece\u78c1\u76d8\u8bfb\u51fa\u548c\u5199\u5165\u4fe1\u606f\u7684\u6700\u5c0f\u5355\u4f4d\u3002\u6247\u533a\u7684\u5927\u5c0f\u901a\u5e38\u4e3a512\u5b57\u8282\uff0c\u5e76\u4e14\u5f53\u4eca\u7684\u78c1\u76d8\u5177\u670920\u4ebf\u5230240\u4ebf\u4e2a\u6247\u533a\u3002\u5185\u4fa7\u78c1\u9053(\u79bb\u8f6c\u8f74\u66f4\u8fd1\u7684\u5730\u65b9)\u6bd4\u5916\u4fa7\u78c1\u9053\u7684\u957f\u5ea6\u66f4\u77ed\uff0c\u4e14\u5916\u4fa7\u78c1\u9053\u6bd4\u5185\u4fa7\u78c1\u9053\u62e5\u6709\u66f4\u591a\u7684\u6247\u533a\u3002</p> <p>To read/write a sector, disk arm swings to position head on right track\uff0cplatter spins continually; data is read/written as sector passes under head.</p> <p>Head-disk assemblies, multiple disk platters on a single spindle (1 to 5 usually), one head per platter, mounted on a common arm.</p> <p>Cylinder\uff08\u67f1\u9762\uff09 i consists of \\(i^{th}\\) track of all the platters.</p> <p>\u78c1\u76d8\u76d8\u7247\u7684\u6bcf\u4e00\u9762\u90fd\u6709\u4e00\u4e2a\u8bfb\u5199\u5934\uff0c\u8bfb\u5199\u5934\u901a\u8fc7\u5728\u76d8\u7247\u4e0a\u79fb\u52a8\u6765\u8bbf\u95ee\u4e0d\u540c\u7684\u78c1\u9053\u3002\u4e00\u5f20\u78c1\u76d8\u901a\u5e38\u5305\u62ec\u5f88\u591a\u4e2a\u76d8\u7247\uff0c\u6240\u6709\u78c1\u9053\u7684\u8bfb\u5199\u5934\u88ab\u5b89\u88c5\u5728\u4e00\u4e2a\u88ab\u79f0\u4e3a\u78c1\u76d8\u81c2(disk arm)\u7684\u5355\u72ec\u88c5\u7f6e\u4e0a\uff0c\u5e76\u4e14\u4e00\u8d77\u79fb\u52a8\u3002</p> <p>\u5b89\u88c5\u5728\u8f6c\u8f74\u4e0a\u7684\u78c1\u76d8\u76d8\u7247\u548c\u5b89\u88c5\u5728\u78c1\u76d8\u81c2\u4e0a\u7684\u8bfb\u5199\u5934\u5408\u5728\u4e00\u8d77\u88ab\u79f0\u4e3a\u78c1\u5934-\u78c1\u76d8\u88c5\u7f6e(head-disk assembly)\u3002</p> <p>\u56e0\u4e3a\u6240\u6709\u76d8\u7247\u4e0a\u7684\u8bfb\u5199\u5934\u662f\u4e00\u8d77\u79fb\u52a8\u7684\uff0c\u6240\u4ee5\u5f53\u4e00\u4e2a\u76d8\u7247\u4e0a\u7684\u8bfb\u5199\u5934\u4f4d\u4e8e\u7b2c i \u6761\u78c1\u9053\u4e0a\u65f6\uff0c\u6240\u6709\u5176\u4ed6\u76d8\u7247\u7684\u8bfb\u5199\u5934\u4e5f\u90fd\u5728\u5b83\u4eec\u76f8\u5e94\u76d8\u7247\u7684\u7b2c i \u6761\u78c1\u9053\u4e0a\u3002\u7531\u6b64\uff0c\u6240\u6709\u76d8\u7247\u7684\u7b2c i \u6761\u78c1\u9053\u5408\u5728\u4e00\u8d77\u88ab\u79f0\u4e3a\u7b2c i \u4e2a\u67f1\u9762(cylinder)\u3002</p> <p></p> <p>Disk controller(\u78c1\u76d8\u63a7\u5236\u5668) \u2013 interfaces between the computer system and the disk drive hardware.</p> <ul> <li>accepts high-level commands to read or write a sector, initiates actions such as moving the disk arm to the right track and actually reading or writing the data</li> <li>Computes and attaches checksums to each sector to verify that data is read back correctly<ul> <li>If data is corrupted, with very high probability stored checksum won't match recomputed checksum</li> <li>Ensures successful writing by reading back sector after writing it</li> </ul> </li> <li>Performs remapping of bad sectors</li> </ul> <p>\u78c1\u76d8\u63a7\u5236\u5668(disk controller)\u4f5c\u4e3a\u8ba1\u7b97\u673a\u7cfb\u7edf\u548c\u5b9e\u9645\u7684\u78c1\u76d8\u9a71\u52a8\u5668\u786c\u4ef6\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5728\u73b0\u4ee3\u78c1\u76d8\u7cfb\u7edf\u4e2d\uff0c\u78c1\u76d8\u63a7\u5236\u5668\u5728\u78c1\u76d8\u9a71\u52a8\u5355\u5143\u5185\u90e8\u5b9e\u73b0\u3002</p> <ul> <li>\u78c1\u76d8\u63a7\u5236\u5668\u63a5\u53d7\u9ad8\u5c42\u6b21\u7684\u8bfb\u6216\u5199\u6247\u533a\u7684\u547d\u4ee4\uff0c\u7136\u540e\u5f00\u59cb\u64cd\u4f5c\uff0c\u5982\u5c06\u78c1\u76d8\u81c2\u79fb\u52a8\u5230\u6b63\u786e\u7684\u78c1\u9053\uff0c\u5e76\u5b9e\u9645\u5730\u5bf9\u6570\u636e\u8fdb\u884c\u8bfb\u6216\u5199\u3002</li> <li>\u78c1\u76d8\u63a7\u5236\u5668\u4e3a\u5b83\u6240\u5199\u7684\u6bcf\u4e2a\u6247\u533a\u9644\u52a0\u6821\u9a8c\u548c(check sum)\uff0c\u6821\u9a8c\u548c\u662f\u6839\u636e\u5199\u5230\u6247\u533a\u4e2d\u7684\u6570\u636e\u8ba1\u7b97\u5f97\u51fa\u7684\u3002\u5f53\u4ece\u6247\u533a\u8bfb\u56de\u6570\u636e\u65f6\uff0c\u78c1\u76d8\u63a7\u5236\u5668\u7528\u8bfb\u5230\u7684\u6570\u636e\u518d\u4e00\u6b21\u8ba1\u7b97\u6821\u9a8c\u548c\uff0c\u5e76\u5c06\u5176\u4e0e\u5b58\u50a8\u7684\u6821\u9a8c\u548c\u8fdb\u884c\u6bd4\u8f83\u3002<ul> <li>\u5982\u679c\u6570\u636e\u88ab\u7834\u574f\uff0c\u5219\u65b0\u8ba1\u7b97\u51fa\u7684\u6821\u9a8c\u548c\u4e0e\u5b58\u50a8\u7684\u6821\u9a8c\u548c\u4e0d\u5339\u914d\u7684\u53ef\u80fd\u6027\u5c31\u5f88\u9ad8\u3002\u5982\u679c\u53d1\u751f\u4e86\u8fd9\u6837\u7684\u9519\u8bef\uff0c\u78c1\u76d8\u63a7\u5236\u5668\u5c31\u4f1a\u91cd\u8bfb\u51e0\u6b21;\u5982\u679c\u9519\u8bef\u7ee7\u7eed\u53d1\u751f\uff0c\u78c1\u76d8\u63a7\u5236\u5668\u5c31\u4f1a\u53d1\u51fa\u4e00\u4e2a\u8bfb\u53d6\u5931\u8d25\u7684\u4fe1\u53f7\u3002</li> </ul> </li> <li>\u78c1\u76d8\u63a7\u5236\u5668\u6267\u884c\u7684\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u4efb\u52a1\u662f\u574f\u6247\u533a\u7684\u91cd\u6620\u5c04(remapping of bad sector)\u3002\u5982\u679c\u78c1\u76d8\u63a7\u5236\u5668\u5728\u78c1\u76d8\u521d\u59cb\u683c\u5f0f\u5316\u6216\u5c1d\u8bd5\u5199\u5165\u4e00\u4e2a\u6247\u533a\u65f6\u68c0\u6d4b\u5230\u8be5\u6247\u533a\u5df2\u635f\u574f\uff0c\u5b83\u4f1a\u628a\u8fd9\u4e2a\u6247\u533a\u5728\u903b\u8f91\u4e0a\u6620\u5c04\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u7269\u7406\u4f4d\u7f6e(\u4ece\u4e3a\u6b64\u76ee\u7684\u800c\u7559\u51fa\u7684\u989d\u5916\u6247\u533a\u6c60\u4e2d\u5206\u914d)\u3002\u91cd\u6620\u5c04\u88ab\u8bb0\u5f55\u5728\u78c1\u76d8\u4e0a\u6216\u975e\u6613\u5931\u6027\u5b58\u50a8\u5668\u4e2d\uff0c\u5e76\u4e14\u5199\u64cd\u4f5c\u5728\u65b0\u7684\u4f4d\u7f6e\u4e0a\u6267\u884c\u3002</li> </ul> <p></p>"},{"location":"Computer_Science/DB/Chapter12/#performance-measures-of-disks","title":"Performance Measures of Disks","text":"<p>\u78c1\u76d8\u8d28\u91cf\u7684\u4e3b\u8981\u5ea6\u91cf\u6307\u6807\u662f\u5bb9\u91cf\u3001\u8bbf\u95ee\u65f6\u95f4\u3001\u6570\u636e\u4f20\u8f93\u7387\u548c\u53ef\u9760\u6027\u3002</p> <p>Access time(\u8bbf\u95ee\u65f6\u95f4) \u2013 the time it takes from when a read or write request is issued to when data transfer begins. Consists of:</p> <p>\u8bbf\u95ee\u65f6\u95f4(access time)\u662f\u4ece\u53d1\u51fa\u8bfb\u6216\u5199\u8bf7\u6c42\u5230\u6570\u636e\u5f00\u59cb\u4f20\u8f93\u4e4b\u95f4\u7684\u65f6\u95f4\u3002</p> <ol> <li>Seek time\uff08\u5bfb\u9053\u65f6\u95f4\uff09 \u2013 time it takes to reposition the arm over the correct track.</li> </ol> <ul> <li>Average seek time is 1/2 the worst case seek time.</li> <li>4 to 10 milliseconds on typical disks</li> </ul> <p>\u4e3a\u4e86\u8bbf\u95ee(\u5373\u8bfb\u6216\u5199)\u78c1\u76d8\u4e0a\u6307\u5b9a\u6247\u533a\u7684\u6570\u636e\uff0c\u78c1\u76d8\u81c2\u5fc5\u987b\u5148\u79fb\u52a8\u5230\u6b63\u786e\u78c1\u9053\u7684\u4e0a\u65b9\uff0c\u7136\u540e\u7b49\u5f85\u78c1\u76d8\u65cb\u8f6c\uff0c\u76f4\u5230\u6307\u5b9a\u7684\u6247\u533a\u51fa\u73b0\u5728\u5b83\u4e0b\u65b9\u3002\u78c1\u76d8\u81c2\u91cd\u5b9a\u4f4d\u7684\u65f6\u95f4\u79f0\u4e3a\u5bfb\u9053\u65f6\u95f4(seek time)\uff0c\u5e76\u4e14\u5b83\u968f\u78c1\u76d8\u81c2\u5fc5\u987b\u79fb\u52a8\u8ddd\u79bb\u7684\u589e\u5927\u800c\u589e\u5927\u3002</p> <p>\u5982\u679c\u6240\u6709\u7684\u78c1\u9053\u5305\u542b\u76f8\u540c\u6570\u91cf\u7684\u6247\u533a\uff0c\u540c\u65f6\u6211\u4eec\u5ffd\u7565\u8bfb\u5199\u5934\u5f00\u59cb\u79fb\u52a8\u548c\u7ed3\u675f\u79fb\u52a8\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5e73\u5747\u5bfb\u9053\u65f6\u95f4\u662f\u6700\u574f\u60c5\u51b5\u4e0b\u5bfb\u9053\u65f6\u95f4\u7684\u4e09\u5206\u4e4b\u4e00\u3002\u8003\u8651\u5230\u524d\u9762\u5ffd\u7565\u7684\u90a3\u4e9b\u56e0\u7d20\uff0c\u5e73\u5747\u5bfb\u9053\u65f6\u95f4\u5927\u7ea6\u662f\u6700\u5927\u5bfb\u9053\u65f6\u95f4\u7684\u4e00\u534a\u3002</p> <ol> <li>Rotational latency \uff08\u65cb\u8f6c\u5ef6\u8fdf\uff09\u2013 time it takes for the sector to be accessed to appear under the head.</li> </ol> <ul> <li>Average latency is 1/2 of the worst case latency.</li> <li>4 to 11 milliseconds on typical disks (5400 to 15000 r.p.m.)</li> </ul> <p>\u4e00\u65e6\u8bfb\u5199\u5934\u5230\u8fbe\u6240\u9700\u7684\u78c1\u9053\uff0c\u7b49\u5f85\u88ab\u8bbf\u95ee\u7684\u6247\u533a\u51fa\u73b0\u5728\u8bfb\u5199\u5934\u4e0b\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u79f0\u4e3a\u65cb\u8f6c\u5ef6\u8fdf\u65f6\u95f4(rotational latency time)\u3002\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u78c1\u76d8\u9700\u8981\u65cb\u8f6c\u534a\u5468\u624d\u80fd\u4f7f\u6240\u8981\u8bbf\u95ee\u7684\u6247\u533a\u7684\u5f00\u59cb\u5904\u51fa\u73b0\u5728\u8bfb\u5199\u5934\u7684\u4e0b\u65b9\u3002\u56e0\u6b64\u78c1\u76d8\u7684\u5e73\u5747\u5ef6\u8fdf\u65f6\u95f4(average latency time)\u662f\u78c1\u76d8\u65cb\u8f6c\u4e00\u6574\u5468\u65f6\u95f4\u7684\u4e00\u534a\u3002</p> <ol> <li>Data-transfer rate\uff08\u6570\u636e\u4f20\u8f93\u7387\uff09 \u2013 the rate at which data can be retrieved from or stored to the disk.</li> </ol> <ul> <li>25 to 100 MB per second max rate, lower for inner tracks</li> <li>Multiple disks may share a controller, so rate that controller can handle is also important</li> </ul> <p>\u6570\u636e\u4f20\u8f93\u7387(data-transfer rate)\u662f\u4ece\u78c1\u76d8\u83b7\u53d6\u6570\u636e\u6216\u8005\u5411\u78c1\u76d8\u5b58\u50a8\u6570\u636e\u7684\u901f\u7387\u3002</p> <p>Disk block is a logical unit for storage allocation and retrieval, 4 to 16 kilobytes typically.</p> <ul> <li>Smaller blocks: more transfers from disk</li> <li>Larger blocks: more space wasted due to partially filled blocks</li> </ul> <p>\u78c1\u76d8 I/O \u8bf7\u6c42\u901a\u5e38\u7531\u6587\u4ef6\u7cfb\u7edf\u4ea7\u751f\uff0c\u4f46\u53ef\u4ee5\u7531\u6570\u636e\u5e93\u7cfb\u7edf\u76f4\u63a5\u4ea7\u751f\u3002\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u6307\u5b9a\u8981\u5f15\u7528\u7684\u78c1\u76d8\u4e0a\u7684\u5730\u5740;\u8be5\u5730\u5740\u91c7\u7528\u5757\u53f7(block number)\u7684\u5f62\u5f0f\u3002\u78c1\u76d8\u5757(disk block)\u662f\u5b58\u50a8\u5206\u914d\u548c\u68c0\u7d22\u7684\u903b\u8f91\u5355\u5143\uff0c\u800c\u5f53\u4eca\u7684\u5757\u89c4\u6a21\u901a\u5e38\u5728 4KB \u5230 16KB \u4e4b\u95f4\u3002\u6570\u636e\u4ee5\u5757\u4e3a\u5355\u4f4d\u5728\u78c1\u76d8\u548c\u4e3b\u5b58\u4e4b\u95f4\u4f20\u8f93\u3002\u672f\u8bed\u9875\u9762(page)\u901a\u5e38\u7528\u6765\u6307\u5757\u3002</p> <p>Sequential access pattern(\u987a\u5e8f\u8bbf\u95ee\u6a21\u5f0f)</p> <ul> <li>Successive requests are for successive disk blocks</li> <li> <p>Disk seek required only for first block</p> </li> <li> <p>\u7b2c\u4e00\u4e2a\u5757\u9700\u8981\u78c1\u76d8\u5bfb\u9053</p> </li> <li>\u540e\u7eed\u7684\u8bf7\u6c42\u8981\u4e48\u4e0d\u9700\u8981\u5bfb\u9053\uff0c\u8981\u4e48\u9700\u8981\u5411\u76f8\u90bb\u7684\u78c1\u9053\u5bfb\u9053</li> </ul> <p>\u8fd9\u6bd4\u5411\u66f4\u8fdc\u7684\u78c1\u9053\u5bfb\u9053\u8981\u5feb\u3002\u5728\u987a\u5e8f\u8bbf\u95ee\u6a21\u5f0f\u4e0b\uff0c\u6570\u636e\u4f20\u8f93\u901f\u7387\u662f\u6700\u9ad8\u7684\uff0c\u56e0\u4e3a\u5bfb\u9053\u65f6\u95f4\u6700\u77ed\u3002</p> <p>Random access pattern\uff08\u968f\u673a\u8bbf\u95ee\u6a21\u5f0f\uff09</p> <ul> <li>Successive requests are for blocks that can be anywhere on disk</li> <li>Each access requires a seek</li> <li>Transfer rates are low since a lot of time is wasted in seeks</li> </ul> <p>\u5728\u968f\u673a\u8bbf\u95ee(random access)\u6a21\u5f0f\u4e2d\uff0c\u8fde\u7eed\u7684\u8bf7\u6c42\u662f\u9488\u5bf9\u968f\u673a\u5206\u5e03\u5728\u78c1\u76d8\u4e0a\u7684\u5757\u7684\u3002\u6bcf\u4e00\u4e2a\u8fd9\u6837\u7684\u8bf7\u6c42\u90fd\u9700\u8981\u4e00\u6b21\u5bfb\u9053\u3002</p> <p>I/O operations per second (IOPS \uff0c\u6bcf\u79d2I/O\u64cd\u4f5c\u6570)</p> <ul> <li>Number of random block reads that a disk can support per second</li> <li>50 to 200 IOPS on current generation magnetic disks</li> </ul> <p>\u6bcf\u79d2 I/O \u64cd\u4f5c(I/O Operations per Second\uff0cIOPS)\u6570\uff0c\u5373\u5728\u4e00\u79d2\u949f\u5185\u53ef\u4ee5\u7531\u78c1\u76d8\u6ee1\u8db3\u7684\u968f\u673a\u5757\u8bbf\u95ee\u6570\u91cf\uff0c\u53d6\u51b3\u4e8e\u78c1\u76d8\u7684\u8bbf\u95ee\u65f6\u95f4\u3001\u5757\u7684\u89c4\u6a21\u548c\u6570\u636e\u4f20\u8f93\u901f\u7387\u3002</p> <p>Mean time to failure (MTTF\uff0c\u5e73\u5747\u6545\u969c\u65f6\u95f4) \u2013 the average time the disk is expected to run continuously without any failure.</p> <ul> <li>Typically 3 to 5 years</li> <li>Probability of failure of new disks is quite low, corresponding to a \"theoretical MTTF\" of 500,000 to 1,200,000 hours \uff0857 to 136 years\uff09for a new disk</li> <li>An MTTF of 1,200,000 hours for a new disk means that given 1000 relatively new disks, on an average one will fail every 1200 hours(50 days)</li> <li>MTTF decreases as disk ages</li> </ul>"},{"location":"Computer_Science/DB/Chapter12/#optimization-of-disk-block-access","title":"Optimization of Disk-Block Access","text":"<ul> <li>Buffering: in-memory buffer to cache disk blocks</li> <li>Read-ahead(Prefetch): Read extra blocks from a track in anticipation that they will be requested soon</li> <li>Disk-arm-scheduling algorithms re-order block requests so that disk arm movement is minimized<ul> <li>elevator algorithm</li> </ul> </li> </ul> <ul> <li> <p>File organization</p> <ul> <li>Allocate blocks of a file in as contiguous a manner as possible</li> <li>Allocation in units of extents(\u76d8\u533a)</li> <li>Files may get fragmented<ul> <li>E.g., if free blocks on disk are scattered, and newly created file has its blocks scattered over the disk</li> <li>Sequential access to a fragmented file results in increased disk arm movement</li> <li>Some systems have utilities to defragment the file system, in order to speed up file access</li> </ul> </li> </ul> </li> <li> <p>Nonvolatile write buffers \uff08\u975e\u6613\u5931\u6027\u5199\u7f13\u5b58\uff09\u2014\u2014 speed up disk writes by writing blocks to a non-volatile RAM buffer immediately</p> <ul> <li>Non-volatile RAM: battery backed up RAM or flash memory</li> <li>Even if power fails, the data is safe and will be written to disk when power returns</li> <li>Controller then writes to disk whenever the disk has no other requests or request has been pending for some time</li> <li>Database operations that require data to be safely stored before continuing can continue without waiting for data to be written to disk</li> <li>Writes can be reordered to minimize disk arm movement</li> </ul> </li> <li> <p>Log disk\uff08\u65e5\u5fd7\u78c1\u76d8\uff09\u2014\u2014 a disk devoted to writing a sequential log of block updates</p> <ul> <li>Used exactly like nonvolatile RAM</li> <li>Write to log disk is very fast since no seeks are required</li> <li>No need for special hardware (NV-RAM)</li> </ul> </li> </ul>"},{"location":"Computer_Science/DB/Chapter12/#flash-storage","title":"Flash Storage","text":"<p>NAND flash - used widely for storage, cheaper than NOR flash     - requires page-at-a-time read (page: 512 bytes to 4 KB)     - Not much difference between sequential and random read     - Page can only be written once     - Must be erased to allow rewrite</p> <p>SSD(Solid State Disks)</p> <p>Use standard block-oriented disk interfaces, but store data on multiple flash storage devices internally</p> Magnetic Disk Solid State Disk Retrieve a page 5-10 milliseconds 20-100 microseconds Random access 50 to 200 IOPS reads: 10,000 IOPS writes: 40,000 IOPS Data transfer rate 200M 500M(SATA), 3G(NVMe) Power consumption higher lower Update mode in place erase \\(\\rightarrow\\) rewrite Realiability MTTF : 500,000 to 1,200,000 hours erase blocks: 100,000 to 1,000,000 erases <p>Erase happens in units of erase block</p> <ul> <li>Takes 2 to 5 milliseconds</li> <li>Erase block typically 256 KB to 1 MB (128 to 256 pages)</li> <li>After 100,000 to 1,000,000 erases, erase block becomes unreliable and cannot be used</li> </ul> <p>\u95ea\u5b58\u7684\u5199\u5165\u7a0d\u6709\u4e9b\u590d\u6742\u3002\u5199\u4e00\u4e2a\u95ea\u5b58\u9875\u9762\u901a\u5e38\u9700\u8981\u82b1\u8d39\u5927\u7ea6100\u5fae\u79d2\u3002\u4f46\u662f\uff0c\u4e00\u65e6\u5199\u5165\uff0c\u5c31\u4e0d\u80fd\u76f4\u63a5\u91cd\u5199\u95ea\u5b58\u9875\u3002\u76f8\u53cd\uff0c\u5fc5\u987b\u5148\u5c06\u5176\u64e6\u9664\u7136\u540e\u518d\u91cd\u5199\u3002\u64e6\u9664\u64cd\u4f5c\u5fc5\u987b\u5728\u4e00\u7ec4\u9875(\u79f0\u4e3a\u64e6\u9664\u5757(erase block)\uff0c\u5373\u64e6\u9664\u5757\u4e2d\u7684\u6240\u6709\u9875)\u4e0a\u6267\u884c\uff0c\u5e76\u82b1\u8d39 2 \u5230 5 \u6beb\u79d2\u3002\u4e00\u4e2a\u64e6\u9664\u5757(\u5728\u95ea\u5b58\u6587\u732e\u4e2d\u901a\u5e38\u5c31\u53ea\u79f0\u4e3a\"\u5757\")\u901a\u5e38\u4e3a 256KB \u52301MB\uff0c\u5e76\u5305\u542b 128 \u5230 256 \u4e2a\u9875\u3002\u53e6\u5916\uff0c\u4e00\u4e2a\u95ea\u5b58\u9875\u53ef\u4ee5\u88ab\u64e6\u9664\u7684\u6b21\u6570\u662f\u6709\u9650\u7684\uff0c\u901a\u5e38\u7ea6\u4e3a 100000 \u5230 1000000 \u6b21\u3002\u4e00\u65e6\u8fbe\u5230\u8fd9\u4e2a\u9650\u5236\uff0c\u5728\u5b58\u50a8\u4f4d\u4e2d\u5c31\u53ef\u80fd\u53d1\u751f\u9519\u8bef\u3002</p> <p>Remapping of logical page addresses to physical page addresses avoids waiting for erase</p> <p>Flash translation table tracks mapping also stored in a label field of flash page, remapping carried out by flash translation layer</p> <p>\u95ea\u5b58\u7cfb\u7edf\u901a\u8fc7\u5c06\u903b\u8f91\u9875\u53f7\u6620\u5c04\u5230\u7269\u7406\u9875\u53f7\u6765\u9650\u5236\u6162\u7684\u64e6\u9664\u901f\u5ea6\u548c\u66f4\u65b0\u9650\u5236\u7684\u5f71\u54cd\u3002\u5f53\u4e00\u4e2a\u903b\u8f91\u9875\u88ab\u66f4\u65b0\u65f6\uff0c\u5b83\u53ef\u4ee5\u88ab\u91cd\u65b0\u6620\u5c04\u5230\u5df2\u88ab\u64e6\u9664\u7684\u4efb\u4f55\u7269\u7406\u9875\uff0c\u5e76\u4e14\u5b83\u539f\u6765\u7684\u4f4d\u7f6e\u53ef\u4ee5\u968f\u540e\u88ab\u64e6\u9664\u3002\u6bcf\u4e2a\u7269\u7406\u9875\u90fd\u6709\u4e00\u4e2a\u5c0f\u7684\u5b58\u50a8\u533a\u57df\u6765\u4fdd\u5b58\u5b83\u7684\u903b\u8f91\u5730\u5740;\u5982\u679c\u903b\u8f91\u5730\u5740\u88ab\u91cd\u65b0\u6620\u5c04\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u7269\u7406\u9875\uff0c\u5219\u539f\u6765\u7684\u7269\u7406\u9875\u88ab\u6807\u8bb0\u4e3a\u5df2\u5220\u9664\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u626b\u63cf\u7269\u7406\u9875\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u903b\u8f91\u9875\u7684\u4f4d\u7f6e\u3002\u4e3a\u4e86\u5feb\u901f\u8bbf\u95ee\uff0c\u903b\u8f91\u5230\u7269\u7406\u7684\u9875\u9762\u6620\u5c04\u88ab\u590d\u5236\u5230\u5185\u5b58\u4e2d\u7684\u8f6c\u6362\u8868(translation table)\u4e2d\u3002</p> <p></p> <p>wear leveling(\u78e8\u635f\u5747\u8861)- evenly distributed erase operators across physical blocks</p> <p>\u5305\u542b\u591a\u4e2a\u5220\u9664\u9875\u7684\u5757\u5c06\u5b9a\u671f\u88ab\u64e6\u9664\uff0c\u8981\u6ce8\u610f\u5148\u5c06\u8fd9\u4e9b\u5757\u4e2d\u672a\u88ab\u5220\u9664\u7684\u9875\u590d\u5236\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u5757(\u8f6c\u6362\u8868\u4f1a\u5bf9\u8fd9\u4e9b\u672a\u5220\u9664\u7684\u9875\u9762\u8fdb\u884c\u66f4\u65b0)\u4e2d\u3002\u7531\u4e8e\u6bcf\u4e2a\u7269\u7406\u9875\u53ea\u80fd\u66f4\u65b0\u56fa\u5b9a\u7684\u6b21\u6570\uff0c\u56e0\u6b64\u88ab\u64e6\u9664\u591a\u6b21\u7684\u7269\u7406\u9875\u88ab\u6307\u5b9a\u7ed9\"\u51b7\u6570\u636e\"\uff0c\u5373\u5f88\u5c11\u88ab\u66f4\u65b0\u7684\u6570\u636e;\u800c\u5c1a\u672a\u88ab\u64e6\u9664\u591a\u6b21\u7684\u9875\u7528\u4e8e\u5b58\u50a8\"\u70ed\u6570\u636e\"\uff0c\u5373\u88ab\u9891\u7e41\u66f4\u65b0\u7684\u6570\u636e\u3002\u8fd9\u79cd\u8de8\u7269\u7406\u5757\u5747\u5300\u5206\u5e03\u64e6\u9664\u64cd\u4f5c\u7684\u539f\u5219\u79f0\u4f5c\u635f\u8017\u5747\u8861(wear leveling)\uff0c\u800c\u4e14\u901a\u5e38\u662f\u7531\u95ea\u5b58\u63a7\u5236\u5668\u900f\u660e\u5730\u6267\u884c\u7684\u3002\u5982\u679c\u4e00\u4e2a\u7269\u7406\u9875\u7531\u4e8e\u8fc7\u91cf\u66f4\u65b0\u88ab\u635f\u574f\uff0c\u5b83\u53ef\u4ee5\u4e0d\u518d\u88ab\u4f7f\u7528\uff0c\u800c\u4e0d\u5f71\u54cd\u6574\u4e2a\u95ea\u5b58\u3002</p> <p>\u6240\u6709\u4e0a\u8ff0\u52a8\u4f5c\u901a\u8fc7\u4e00\u4e2a\u53eb\u4f5c\u95ea\u5b58\u8f6c\u6362\u5c42(fashtranslation layer)\u7684\u8f6f\u4ef6\u5c42\u6267\u884c\u3002\u5728\u8fd9\u4e00\u5c42\u4e4b\u4e0a\uff0c\u95ea\u5b58\u770b\u8d77\u6765\u548c\u78c1\u76d8\u5b58\u50a8\u5668\u4e00\u6837\uff0c\u90fd\u63d0\u4f9b\u540c\u6837\u7684\u9762\u5411\u9875/\u6247\u533a\u7684\u63a5\u53e3\uff0c\u53ea\u4e0d\u8fc7\u95ea\u5b58\u5b58\u50a8\u8981\u5feb\u5f97\u591a\u3002\u56e0\u6b64\uff0c\u6587\u4ef6\u7cfb\u7edf\u548c\u6570\u636e\u5e93\u5b58\u50a8\u7ed3\u6784\u53ef\u4ee5\u770b\u5230\u76f8\u540c\u7684\u5e95\u5c42\u5b58\u50a8\u7ed3\u6784\u7684\u903b\u8f91\u89c6\u56fe\uff0c\u65e0\u8bba\u5b83\u662f\u95ea\u5b58\u8fd8\u662f\u78c1\u76d8\u5b58\u50a8\u5668\u3002</p>"},{"location":"Computer_Science/DB/Chapter12/#storage-class-memorynvm","title":"Storage Class Memory(NVM)","text":"<p>3D-XPoint memory technology pioneered by Intel</p> <p>Available as Intel Optane:</p> <ul> <li>SSD interface shipped from 2017<ul> <li>Allows lower latency than flash SSDs</li> </ul> </li> <li>Non-volatile memory interface announced in 2018<ul> <li>Supports direct access to words, at speeds comparable to main-memory speeds</li> </ul> </li> </ul> DRAM NVM SSD HDD Read Latency 1x 2-4x 500x Write Latency 1x 2-8x 5000x Persistence No Yes Yes Byte-Addressable Yes Yes No Endurance Yes No No"},{"location":"Computer_Science/DB/Chapter13/","title":"Chapter 13 | Data Storage Structures","text":"<p> \u7ea6 4493 \u4e2a\u5b57  14 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 22 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter13/#file-organization","title":"File Organization","text":"<p>The database is stored as a collection of files.</p> <p>Each file is a sequence of records.</p> <p>A record is a sequence of fields.</p> <p>One approach:</p> <ul> <li>assume record size is fixed</li> <li>each file has records of one particular type only</li> <li>different files are used for different relations</li> </ul> <p>This case is easiest to implement; will consider variable length records later.</p> <p>We assume that records are smaller than a disk block</p>"},{"location":"Computer_Science/DB/Chapter13/#fixed-length-records","title":"Fixed-Length Records","text":"<p>Simple approach:</p> <p>Store record <code>i</code> starting from byte <code>n * (i \u2013 1)</code>, where n is the size of each record.</p> <p>Record access is simple but records may cross blocks</p> <ul> <li>Modification: do not allow records to cross block boundaries</li> </ul> <p></p> <p>Deletion of record i: </p> <p>alternatives:(e.g. delete record 3)</p> <ol> <li>move records i + 1, ..., n to i, ... , n \u2013 1</li> </ol> <p></p> <ol> <li>move record n to i</li> </ol> <p></p> <ol> <li>do not move records, but link all free records on a free list</li> </ol> <p>\u5728\u6587\u4ef6\u7684\u5f00\u5934\uff0c\u6211\u4eec\u5206\u914d\u7279\u5b9a\u6570\u91cf\u7684\u5b57\u8282\u4f5c\u4e3a\u6587\u4ef6\u5934(file header)\u3002\u6587\u4ef6\u5934\u5c06\u5305\u542b\u6709\u5173\u6587\u4ef6\u7684\u5404\u79cd\u4fe1\u606f\u3002</p> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u9700\u8981\u5728\u6587\u4ef6\u5934\u4e2d\u5b58\u50a8\u7684\u53ea\u6709\u5185\u5bb9\u88ab\u5220\u9664\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\u7684\u5730\u5740\u3002\u6211\u4eec\u7528\u8fd9\u7b2c\u4e00\u6761\u8bb0\u5f55\u6765\u5b58\u50a8\u7b2c\u4e8c\u6761\u53ef\u7528\u8bb0\u5f55\u7684\u5730\u5740\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u76f4\u89c2\u5730\u628a\u8fd9\u4e9b\u5b58\u50a8\u7684\u5730\u5740\u770b\u4f5c\u6307\u9488(pointer)\uff0c\u56e0\u4e3a\u5b83\u4eec\u6307\u5411\u4e00\u6761\u8bb0\u5f55\u7684\u4f4d\u7f6e\u3002\u4e8e\u662f\uff0c\u88ab\u5220\u9664\u7684\u8bb0\u5f55\u5f62\u6210\u4e86\u4e00\u6761\u94fe\u8868\uff0c\u901a\u5e38\u79f0\u4e3a\u81ea\u7531\u94fe\u8868(free list)\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter13/#variable-length-records","title":"Variable-Length Records","text":"<p>Variable-length records arise in database systems in several ways:</p> <ul> <li>Storage of multiple record types in a file.</li> <li>Record types that allow variable lengths for one or more fields such as strings (varchar)</li> <li>Record types that allow repeating fields (used in some older data models).</li> </ul> <p>Attributes are stored in order.</p> <p>Variable length attributes represented by fixed size (offset, length), with actual data stored after all fixed length attributes.</p> <p>\u5177\u6709\u53d8\u957f\u5c5e\u6027\u7684\u8bb0\u5f55\u7684\u8868\u793a\u901a\u5e38\u5305\u542b\u4e24\u4e2a\u90e8\u5206:</p> <ol> <li>\u5e26\u6709\u5b9a\u957f\u4fe1\u606f\u7684\u521d\u59cb\u90e8\u5206\uff0c\u5176\u7ed3\u6784\u5bf9\u4e8e\u76f8\u540c\u5173\u7cfb\u7684\u6240\u6709\u8bb0\u5f55\u90fd\u662f\u4e00\u6837\u7684\uff0c\u8bf8\u5982\u6570\u5b57\u503c\u3001\u65e5\u671f\u6216\u5b9a\u957f\u5b57\u7b26\u4e32\u90a3\u6837\u7684\u56fa\u5b9a\u957f\u5ea6\u7684\u5c5e\u6027\uff0c\u88ab\u5206\u914d\u5b58\u50a8\u5b83\u4eec\u7684\u503c\u6240\u9700\u7684\u5b57\u8282\u6570\u3002</li> <li>\u53d8\u957f\u5c5e\u6027\u7684\u5185\u5bb9\uff0c\u8bf8\u5982\u53ef\u53d8\u957f\u5b57\u7b26\u4e32\u7c7b\u578b\u90a3\u6837\u7684\u53d8\u957f\u5c5e\u6027\uff0c\u5728\u8bb0\u5f55\u7684\u521d\u59cb\u90e8\u5206\u4e2d\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a(\u504f\u79fb\u91cf\uff0c\u957f\u5ea6)\u5bf9\uff0c\u5176\u4e2d\u504f\u79fb\u91cf\u8868\u793a\u5728\u8bb0\u5f55\u4e2d\u8be5\u5c5e\u6027\u7684\u6570\u636e\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u800c\u957f\u5ea6\u8868\u793a\u53d8\u957f\u5c5e\u6027\u7684\u5b57\u8282\u957f\u5ea6\u3002</li> </ol> <p>\u5728\u8bb0\u5f55\u7684\u521d\u59cb\u5b9a\u957f\u90e8\u5206\u4e4b\u540e\uff0c\u53d8\u957f\u5c5e\u6027\u7684\u503c\u662f\u8fde\u7eed\u5b58\u50a8\u7684\u3002\u56e0\u6b64\uff0c\u65e0\u8bba\u662f\u56fa\u5b9a\u957f\u5ea6\u8fd8\u662f\u53ef\u53d8\u957f\u5ea6\uff0c\u8bb0\u5f55\u7684\u521d\u59cb\u90e8\u5206\u90fd\u5b58\u50a8\u7740\u6709\u5173\u6bcf\u4e2a\u5c5e\u6027\u7684\u56fa\u5b9a\u957f\u5ea6\u7684\u4fe1\u606f\u3002</p> <p>Null values represented by null-value bitmap\uff08\u7a7a\u4f4d\u56fe\uff09</p> <p>e.g. </p> <p>Instructor(id\uff0cname, dept_name, salary)</p> <p></p> <p>\u8fd9\u4e2a\u56fe\u4e5f\u8bf4\u660e\u4e86\u7a7a\u4f4d\u56fe(null bitmap)\u7684\u4f7f\u7528\uff0c\u5b83\u8868\u793a\u8bb0\u5f55\u7684\u54ea\u4e2a\u5c5e\u6027\u662f\u7a7a\u503c\u3002\u5728\u8fd9\u4e2a\u7279\u5b9a\u7684\u8bb0\u5f55\u4e2d\uff0c\u5982\u679c salary \u662f\u7a7a\u503c\uff0c\u4f4d\u56fe\u7684\u7b2c\u56db\u4f4d\u5c06\u88ab\u8bbe\u7f6e\u4e3a 1 (\u4e5f\u5c31\u662f 0001) \uff0c\u5b58\u50a8\u5728\u7b2c 12 \u81f3 19 \u5b57\u8282\u4e4b\u95f4\u7684 salary \u503c\u5c06\u88ab\u5ffd\u7565\u3002</p> <p>\u7531\u4e8e\u8bb0\u5f55\u6709\u56db\u4e2a\u5c5e\u6027\uff0c\u5c3d\u7ba1\u66f4\u591a\u5c5e\u6027\u53ef\u80fd\u9700\u8981\u66f4\u591a\u5b57\u8282\uff0c\u4f46\u8be5\u8bb0\u5f55\u7684\u7a7a\u4f4d\u56fe\u53ea\u5360\u75281\u4e2a\u5b57\u8282\u3002</p> <p>\u5728\u67d0\u4e9b\u8868\u793a\u4e2d\uff0c\u7a7a\u4f4d\u56fe\u5b58\u50a8\u5728\u8bb0\u5f55\u7684\u5f00\u5934\uff0c\u5e76\u4e14\u5bf9\u4e8e\u53d6\u7a7a\u503c\u7684\u5c5e\u6027\uff0c\u6839\u672c\u4e0d\u5b58\u50a8\u6570\u636e(\u503c\u6216\u504f\u79fb\u91cf/\u957f\u5ea6)\u3002\u8fd9\u79cd\u8868\u793a\u4ee5\u63d0\u53d6\u8bb0\u5f55\u5c5e\u6027\u7684\u989d\u5916\u5de5\u4f5c\u4e3a\u4ee3\u4ef7\u6765\u8282\u7701\u4e00\u4e9b\u5b58\u50a8\u7a7a\u95f4\u3002\u5bf9\u4e8e\u8bb0\u5f55\u62e5\u6709\u5927\u91cf\u5b57\u6bb5\u5e76\u4e14\u5927\u591a\u6570\u5b57\u6bb5\u90fd\u662f\u7a7a\u7684\u67d0\u4e9b\u5e94\u7528\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u8868\u793a\u7279\u522b\u6709\u7528\u3002</p>"},{"location":"Computer_Science/DB/Chapter13/#variable-length-records-slotted-page-structure","title":"Variable-Length Records: Slotted Page Structure","text":"<p>Slotted page\uff08\u5206\u69fd\u9875\uff09 header contains:</p> <ul> <li>number of record entries</li> <li>end of free space in the block</li> <li>location and size of each record</li> </ul> <p>\u6211\u4eec\u63a5\u4e0b\u6765\u5904\u7406\u5728\u5757\u4e2d\u5b58\u50a8\u53d8\u957f\u8bb0\u5f55\u7684\u95ee\u9898\uff0c\u5206\u69fd\u7684\u9875\u7ed3\u6784(slotted-page structure)\u822c\u7528\u4e8e\u5728\u5757\u4e2d\u7ec4\u7ec7\u8bb0\u5f55\uff0c\u6bcf\u4e2a\u5757\u7684\u5f00\u59cb\u5904\u6709\u4e00\u4e2a\u5757\u5934\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f:</p> <ul> <li>\u5757\u5934\u4e2d\u8bb0\u5f55\u9879\u7684\u6570\u91cf;</li> <li>\u5757\u4e2d\u81ea\u7531\u7a7a\u95f4\u7684\u672b\u5c3e\u5904;</li> <li>\u4e00\u4e2a\u7531\u5305\u542b\u6bcf\u6761\u8bb0\u5f55\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u7684\u9879\u7ec4\u6210\u7684\u6570\u7ec4\u3002</li> </ul> <p>Records can be moved around within a page to keep them contiguous with no empty space between them; entry in the header must be updated.</p> <p>\u5b9e\u9645\u4e0a\u8bb0\u5f55\u4ece\u5757\u7684\u672b\u5c3e\u5904\u5f00\u59cb\u5728\u5757\u4e2d\u8fde\u7eed\u5206\u914d\u7a7a\u95f4\u3002\u5757\u4e2d\u7684\u81ea\u7531\u7a7a\u95f4\u662f\u8fde\u7eed\u7684\uff0c\u4f4d\u4e8e\u5757\u5934\u6570\u7ec4\u7684\u6700\u540e\u4e00\u9879\u548c\u7b2c\u4e00\u6761\u8bb0\u5f55\u4e4b\u95f4\u3002\u5982\u679c\u63d2\u5165\u4e00\u6761\u8bb0\u5f55\uff0c\u5728\u81ea\u7531\u7a7a\u95f4\u7684\u5c3e\u90e8\u7ed9\u8fd9\u6761\u8bb0\u5f55\u5206\u914d\u7a7a\u95f4\uff0c\u5e76\u4e14\u5c06\u5305\u542b\u8fd9\u6761\u8bb0\u5f55\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u7684\u9879\u52a0\u5230\u5757\u5934\u4e2d\u3002</p> <p>\u5982\u679c\u4e00\u6761\u8bb0\u5f55\u88ab\u5220\u9664\uff0c\u5b83\u6240\u5360\u7528\u7684\u7a7a\u95f4\u88ab\u91ca\u653e\uff0c\u5e76\u4e14\u5b83\u7684\u9879\u88ab\u7f6e\u4e3a deleted (\u6bd4\u5982\u8fd9\u6761\u8bb0\u5f55\u7684\u5927\u5c0f\u88ab\u7f6e\u4e3a -1 )\u3002\u6b64\u5916\uff0c\u5757\u4e2d\u4f4d\u4e8e\u88ab\u5220\u9664\u8bb0\u5f55\u4e4b\u524d\u7684\u8bb0\u5f55\u5c06\u88ab\u79fb\u52a8\uff0c\u4f7f\u5f97\u7531\u5220\u9664\u800c\u4ea7\u751f\u7684\u81ea\u7531\u7a7a\u95f4\u80fd\u88ab\u91cd\u65b0\u4f7f\u7528\uff0c\u5e76\u4e14\u6240\u6709\u81ea\u7531\u7a7a\u95f4\u4ecd\u7136\u5b58\u5728\u4e8e\u5757\u5934\u6570\u7ec4\u7684\u6700\u540e\u4e00\u9879\u548c\u7b2c\u4e00\u6761\u8bb0\u5f55\u4e4b\u95f4\u3002\u5757\u5934\u4e2d\u7684\u81ea\u7531\u7a7a\u95f4\u672b\u5c3e\u6307\u9488\u4e5f\u8981\u505a\u9002\u5f53\u4fee\u6539\u3002</p> <p>\u53ea\u8981\u5757\u4e2d\u8fd8\u6709\u7a7a\u95f4\uff0c\u4f7f\u7528\u7c7b\u4f3c\u7684\u6280\u672f\u53ef\u4ee5\u4f7f\u8bb0\u5f55\u589e\u957f\u6216\u7f29\u77ed\u3002\u79fb\u52a8\u8bb0\u5f55\u7684\u4ee3\u4ef7\u5e76\u4e0d\u592a\u9ad8\uff0c\u56e0\u4e3a\u5757\u7684\u5927\u5c0f\u662f\u6709\u9650\u7684:\u5178\u578b\u7684\u503c\u4e3a 4KB \u5230 8KB\u3002</p> <p>Record pointers should not point directly to record \u2014 instead they should point to the entry for the record in header.</p> <p>\u5206\u69fd\u7684\u9875\u7ed3\u6784\u8981\u6c42\u6ca1\u6709\u6307\u9488\u76f4\u63a5\u6307\u5411\u8bb0\u5f55\u3002\u53d6\u800c\u4ee3\u4e4b\uff0c\u6307\u9488\u5fc5\u987b\u6307\u5411\u5757\u5934\u4e2d\u8bb0\u6709\u8bb0\u5f55\u5b9e\u9645\u4f4d\u7f6e\u7684\u9879(\u4e5f\u5c31\u662f\u6307\u5411\u5757\u5934\uff0c\u7136\u540e\u4ece\u5757\u5934\u5185\u5f97\u5230\u4f4d\u7f6e\u540e\u518d\u8d70)\u3002\u5728\u652f\u6301\u6307\u5411\u8bb0\u5f55\u7684\u95f4\u63a5\u6307\u9488\u7684\u540c\u65f6\uff0c\u8fd9\u79cd\u95f4\u63a5\u5c42\u6b21\u5141\u8bb8\u79fb\u52a8\u8bb0\u5f55\u4ee5\u9632\u6b62\u5728\u5757\u7684\u5185\u90e8\u51fa\u73b0\u788e\u7247\u7a7a\u95f4\u3002</p>"},{"location":"Computer_Science/DB/Chapter13/#organization-of-records-in-files","title":"Organization of Records in Files","text":"<ol> <li>Heap \u2013 record can be placed anywhere in the file where there is space</li> <li> <p>Sequential \u2013 store records in sequential order, based on the value of the search key of each record</p> </li> <li> <p>multitable clustering file organization \u2014 records of several different relations can be stored in the same file</p> </li> </ol> <ul> <li>Motivation: store related records on the same block to minimize I/O</li> </ul> <ol> <li>B+-tree file organization</li> </ol> <ul> <li>Ordered storage even with inserts/deletes</li> </ul> <ol> <li>Hashing \u2013 a hash function computed on search key; the result specifies in which block of the file the record should be placed</li> </ol>"},{"location":"Computer_Science/DB/Chapter13/#heap-file-organization","title":"Heap File Organization","text":"<p>Records can be placed anywhere in the file where there is free space</p> <p>Records usually do not move once allocated</p> <p>Important to be able to efficiently find free space within file</p> <p>Free-space map:</p> <p>Array with 1 entry per block. Each entry is a few bits to a byte, and records fraction of block that is free</p> <p>In example below, 3 bits per block, value divided by 8 indicates</p> <p>\u5927\u591a\u6570\u6570\u636e\u5e93\u4f7f\u7528\u4e00\u79cd\u53eb\u4f5c\u81ea\u7531\u7a7a\u95f4\u56fe(free-space map)\u7684\u8282\u7701\u7a7a\u95f4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4fbf\u8ddf\u8e2a\u5177\u6709\u81ea\u7531\u7a7a\u95f4\u6765\u5b58\u50a8\u8bb0\u5f55\u7684\u5757\u3002\u81ea\u7531\u7a7a\u95f4\u56fe\u901a\u5e38\u88ab\u8868\u793a\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u5bf9\u5173\u7cfb\u4e2d\u7684\u6bcf\u4e2a\u5757\uff0c\u8be5\u6570\u7ec4\u90fd\u5305\u542b\u4e00\u4e2a\u9879\u3002\u6bcf\u4e2a\u9879\u8868\u793a\u4e00\u4e2a\u6bd4\u4f8b,\u5373\u5728\u5757\u4e2d\u81f3\u5c11\u6709\u6bd4\u4f8b\u4e3a f \u7684\u7a7a\u95f4\u662f\u81ea\u7531\u7684\u3002</p> <p></p> <p>\u4e3a\u4e86\u627e\u5230\u4e00\u4e2a\u53ef\u4ee5\u5b58\u50a8\u7ed9\u5b9a\u5927\u5c0f\u7684\u65b0\u8bb0\u5f55\u7684\u5757\uff0c\u6570\u636e\u5e93\u53ef\u4ee5\u626b\u63cf\u81ea\u7531\u7a7a\u95f4\u56fe\u4ee5\u627e\u5230\u4e00\u4e2a\u5177\u6709\u8db3\u591f\u81ea\u7531\u7a7a\u95f4\u7684\u5757\u6765\u5b58\u50a8\u90a3\u6761\u8bb0\u5f55\u3002\u5982\u679c\u4e0d\u5b58\u5728\u90a3\u6837\u7684\u5757\uff0c\u5c06\u7ed9\u5173\u7cfb\u5206\u914d\u4e00\u4e2a\u65b0\u5757\uff0c\u5e76\u66f4\u65b0\u81ea\u7531\u7a7a\u95f4\u56fe\u4ee5\u53cd\u6620\u65b0\u5757\u7684\u5b58\u5728\u3002</p> <p>Can have second-level free-space map.</p> <p>\u5c3d\u7ba1\u8fd9\u79cd\u626b\u63cf\u6bd4\u5b9e\u9645\u83b7\u53d6\u5757\u6765\u627e\u5230\u81ea\u7531\u7a7a\u95f4\u8981\u5feb\u5f97\u591a\uff0c\u4f46\u5bf9\u4e8e\u5927\u578b\u6587\u4ef6\u5b83\u4ecd\u7136\u975e\u5e38\u6162\u4e3a\u4e86\u8fdb\u4e00\u6b65\u52a0\u901f\u5b9a\u4f4d\u5177\u6709\u8db3\u591f\u81ea\u7531\u7a7a\u95f4\u7684\u5757\u7684\u4efb\u52a1\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e8c\u7ea7\u81ea\u7531\u7a7a\u95f4\u56fe\uff0c\u6bd4\u5982\u5b83\u7684\u6bcf\u4e2a\u9879\u8868\u793a\u4e3b\u81ea\u7531\u7a7a\u95f4\u56fe\u7684 100 \u4e2a\u9879\u3002\u6bcf\u4e2a\u9879\u5b58\u50a8\u4e86\u5176\u5bf9\u5e94\u7684\u4e3b\u81ea\u7531\u7a7a\u95f4\u56fe\u4e2d 100 \u4e2a\u9879\u4e4b\u5185\u7684\u6700\u5927\u503c\u3002</p> <p>In example above, each entry stores maximum from 4 entries of first-level free-space map</p> <p>Free space map written to disk periodically, OK to have wrong (old) values for some entries (will be detected and fixed)</p> <p>\u6bcf\u5f53\u56fe\u4e2d\u4e00\u4e2a\u9879\u88ab\u66f4\u65b0\u5c31\u5c06\u81ea\u7531\u7a7a\u95f4\u56fe\u5199\u5165\u78c1\u76d8\uff0c\u8fd9\u5c06\u662f\u975e\u5e38\u6602\u8d35\u7684\u3002\u53d6\u800c\u4ee3\u4e4b\uff0c\u81ea\u7531\u7a7a\u95f4\u56fe\u88ab\u5468\u671f\u6027\u5730\u5199\u5165\u78c1\u76d8;\u56e0\u6b64\uff0c\u78c1\u76d8\u4e0a\u7684\u81ea\u7531\u7a7a\u95f4\u56fe\u53ef\u80fd\u662f\u8fc7\u65f6\u7684\uff0c\u5f53\u6570\u636e\u5e93\u542f\u52a8\u65f6\u5b83\u53ef\u80fd\u4f1a\u5f97\u5230\u5173\u4e8e\u81ea\u7531\u7a7a\u95f4\u7684\u8fc7\u65f6\u6570\u636e\u3002\u4e3a\u4e86\u4fee\u6b63\u8fd9\u4e9b\u9519\u8bef\uff0c\u5173\u7cfb\u88ab\u5b9a\u671f\u626b\u63cf\uff0c\u9519\u8bef\u7a7a\u95f4\u56fe\u88ab\u91cd\u65b0\u8ba1\u7b97\u5e76\u5199\u5230\u78c1\u76d8\u3002</p>"},{"location":"Computer_Science/DB/Chapter13/#sequential-file-organization","title":"Sequential File Organization","text":"<p>Suitable for applications that require sequential processing of the entire file</p> <p>The records in the file are ordered by a search-key</p> <p>\u987a\u5e8f\u6587\u4ef6(sequential file)\u662f\u4e3a\u4e86\u9ad8\u6548\u5904\u7406\u6309\u67d0\u4e2a\u641c\u7d22\u7801\u7684\u987a\u5e8f\u6392\u5e8f\u7684\u8bb0\u5f55\u800c\u8bbe\u8ba1\u7684\u3002\u641c\u7d22\u7801(search key)\u662f\u4efb\u610f\u7684\u5c5e\u6027\u6216\u8005\u5c5e\u6027\u7684\u96c6\u5408\u3002</p> <p></p> <p>Deletion \u2013 use pointer chains</p> <p>Insertion \u2013 locate the position where the record is to be inserted</p> <ul> <li>if there is free space insert there </li> <li>if no free space, insert the record in an overflow block</li> <li>In either case, pointer chain must be updated</li> </ul> <ol> <li>\u5728\u6587\u4ef6\u4e2d\u5b9a\u4f4d\u6309\u641c\u7d22\u7801\u987a\u5e8f\u4f4d\u4e8e\u5f85\u63d2\u5165\u8bb0\u5f55\u4e4b\u524d\u7684\u90a3\u6761\u8bb0\u5f55\u3002</li> <li>\u5982\u679c\u5728\u8fd9\u6761\u8bb0\u5f55\u6240\u5728\u5757\u4e2d\u6709\u4e00\u6761\u81ea\u7531\u7684\u8bb0\u5f55(\u5373\u5220\u9664\u540e\u7559\u4e0b\u6765\u7684\u7a7a\u95f4)\uff0c\u5c31\u5728\u8fd9\u91cc\u63d2\u4eba\u65b0\u7684\u8bb0\u5f55\u3002\u5426\u5219\uff0c\u5c06\u65b0\u8bb0\u5f55\u63d2\u4eba\u4e00\u4e2a\u6ea2\u51fa\u5757(overflow block)\u4e2d\u3002</li> <li>\u65e0\u8bba\u54ea\u79cd\u60c5\u51b5\u90fd\u8981\u8c03\u6574\u6307\u9488\uff0c\u4f7f\u5176\u80fd\u6309\u641c\u7d22\u7801\u987a\u5e8f\u628a\u8bb0\u5f55\u94fe\u63a5\u5728\u4e00\u8d77\u3002</li> </ol> <p>Need to reorganize the file from time to time to restore sequential order.</p> <p>\u5f53\u641c\u7d22\u7801\u987a\u5e8f\u548c\u7269\u7406\u987a\u5e8f\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\u4e27\u5931\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff0c\u6587\u4ef6\u5e94\u8be5\u88ab\u91cd\u7ec4(reorganized)\uff0c\u4f7f\u5f97\u5b83\u518d\u6b21\u5728\u7269\u7406\u4e0a\u6309\u987a\u5e8f\u5b58\u653e\u3002\u8fd9\u79cd\u91cd\u7ec4\u7684\u4ee3\u4ef7\u662f\u5f88\u9ad8\u7684\uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u7cfb\u7edf\u8d1f\u8f7d\u4f4e\u7684\u65f6\u5019\u6267\u884c\u3002\u9700\u8981\u91cd\u7ec4\u7684\u9891\u7387\u4f9d\u8d56\u4e8e\u65b0\u8bb0\u5f55\u63d2\u5165\u7684\u9891\u7387\u3002\u5728\u63d2\u5165\u5f88\u5c11\u53d1\u751f\u7684\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u4f7f\u6587\u4ef6\u5728\u7269\u7406\u4e0a\u603b\u4fdd\u6301\u6709\u5e8f\u662f\u53ef\u80fd\u7684\u3002\u6b64\u65f6\u4e5f\u53ef\u4ee5\u4e0d\u9700\u8981\u6307\u9488\u57df\u3002</p>"},{"location":"Computer_Science/DB/Chapter13/#multitable-clustering-file-organization","title":"Multitable Clustering File Organization","text":"<p>Store several relations in one file using a multitable clustering file organization</p> <p>\u9488\u5bf9\u7279\u5b9a dept_name \u7684\u6240\u6709 instructor \u5143\u7ec4\u88ab\u5b58\u50a8\u5728\u8be5 dept_name \u6240\u5bf9\u5e94\u7684 department \u5143\u7ec4\u7684\u9644\u8fd1\u3002\u6211\u4eec\u8bf4\u8fd9\u4e24\u4e2a\u5173\u7cfb\u5728 dept_name \u7801\u4e0a\u662f\u805a\u7c07\u7684\u3002</p> <p></p> <p>good for queries involving join department \\(\\bowtie\\) instructor, and for queries involving one single department and its instructors</p> <p>bad for queries involving only department</p> <p>results in variable size records</p> <p>Can add pointer chains to link records of a particular relation</p> <p></p>"},{"location":"Computer_Science/DB/Chapter13/#table-partitioning","title":"Table Partitioning","text":"<p>Table partitioning: Records in a relation can be partitioned into smaller relations that are stored separately</p> <p>E.g., transaction relation may be partitioned into transaction_2018, transaction_2019, etc.</p> <p>\u8bb8\u591a\u6570\u636e\u5e93\u5141\u8bb8\u5c06\u4e00\u4e2a\u5173\u7cfb\u4e2d\u7684\u8bb0\u5f55\u5212\u5206\u4e3a\u66f4\u5c0f\u7684\u5173\u7cfb\uff0c\u8fd9\u4e9b\u5173\u7cfb\u5206\u522b\u8fdb\u884c\u5b58\u50a8\u3002\u8fd9\u79cd\u8868\u5212\u5206(table partitioning)\u901a\u5e38\u57fa\u4e8e\u4e00\u4e2a\u5c5e\u6027\u503c\u6765\u5b8c\u6210\u3002</p> <p>Queries written on transaction must access records in all partitions</p> <p>Unless query has a selection such as <code>year=2019</code>, in which case only one partition in needed</p> <p>Partitioning:</p> <ul> <li>Reduces costs of some operations such as free space management</li> <li>Allows different partitions to be stored on different storage devices<ul> <li>E.g., transaction partition for current year on SSD, for older years on magnetic disk</li> </ul> </li> </ul> <p>\u67d0\u4e9b\u64cd\u4f5c\u7684\u4ee3\u4ef7\u968f\u5173\u7cfb\u7684\u89c4\u6a21\u4e00\u540c\u589e\u957f\uff0c\u6bd4\u5982\u627e\u5230\u4e00\u6761\u8bb0\u5f55\u7684\u81ea\u7531\u7a7a\u95f4;\u901a\u8fc7\u7f29\u5c0f\u6bcf\u4e2a\u5173\u7cfb\u7684\u89c4\u6a21\uff0c\u5212\u5206\u6709\u52a9\u4e8e\u51cf\u5c11\u8fd9\u79cd\u5f00\u9500\u3002</p> <p>\u5212\u5206\u4e5f\u53ef\u4ee5\u7528\u6765\u5c06\u4e00\u4e2a\u5173\u7cfb\u7684\u4e0d\u540c\u90e8\u5206\u5b58\u50a8\u5230\u4e0d\u540c\u7684\u5b58\u50a8\u8bbe\u5907\u4e0a\u3002</p>"},{"location":"Computer_Science/DB/Chapter13/#data-dictionary-storage","title":"Data Dictionary Storage","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u8003\u8651\u4e86\u5173\u7cfb\u672c\u8eab\u7684\u8868\u793a\u3002\u4e00\u4e2a\u5173\u7cfb\u6570\u636e\u5e93\u7cfb\u7edf\u9700\u8981\u7ef4\u62a4\u5173\u4e8e\u5173\u7cfb\u7684\u6570\u636e\uff0c\u6bd4\u5982\u5173\u7cfb\u7684\u6a21\u5f0f\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\"\u5173\u4e8e\u6570\u636e\u7684\u6570\u636e\"\u88ab\u79f0\u4e3a\u5143\u6570\u636e(metadata)\u3002</p> <p>The Data dictionary (also called system catalog) stores metadata; that is, data about data, such as</p> <p>Information about relations</p> <ul> <li>names of relations \u5173\u7cfb\u7684\u540d\u79f0</li> <li>names, types and lengths of attributes of each relation \u6bcf\u4e2a\u5173\u7cfb\u4e2d\u5c5e\u6027\u7684\u540d\u79f0\uff0c\u5c5e\u6027\u7684\u57df\u548c\u957f\u5ea6</li> <li>names and definitions of views \u5728\u6570\u636e\u5e93\u4e0a\u5b9a\u4e49\u7684\u89c6\u56fe\u7684\u540d\u79f0\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u89c6\u56fe\u7684\u5b9a\u4e49</li> <li>integrity constraints \u5b8c\u6574\u6027\u7ea6\u675f</li> <li>User and accounting information, including passwords</li> <li>Statistical and descriptive data : number of tuples in each relation</li> <li>Physical file organization information:<ul> <li>How relation is stored (sequential/hash/...)</li> <li>Physical location of relation</li> </ul> </li> <li>Information about indices</li> </ul>"},{"location":"Computer_Science/DB/Chapter13/#relational-representation-of-system-metadata","title":"Relational Representation of System Metadata","text":""},{"location":"Computer_Science/DB/Chapter13/#storage-access","title":"Storage Access","text":"<p>Blocks are units of both storage allocation and data transfer.</p> <p>Database system seeks to minimize the number of block transfers between the disk and memory. We can reduce the number of disk accesses by keeping as many blocks as possible in main memory.</p> <p>\u56e0\u4e3a\u4ece\u78c1\u76d8\u8bbf\u95ee\u6570\u636e\u8fdc\u6bd4\u4ece\u5185\u5b58\u8bbf\u95ee\u6570\u636e\u8981\u6162\uff0c\u6240\u4ee5\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u5c31\u662f\u5c3d\u91cf\u51cf\u5c11\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e4b\u95f4\u4f20\u8f93\u7684\u5757\u6570\u91cf\u3002</p> <p>\u51cf\u5c11\u78c1\u76d8\u8bbf\u95ee\u6b21\u6570\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u5728\u4e3b\u5b58\u4e2d\u4fdd\u7559\u5c3d\u53ef\u80fd\u591a\u7684\u5757\u3002\u8fd9\u6837\u505a\u7684\u76ee\u6807\u662f\u6700\u5927\u5316\u8981\u8bbf\u95ee\u7684\u5757\u5df2\u7ecf\u5728\u4e3b\u5b58\u4e2d\u7684\u6982\u7387\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u8bbf\u95ee\u78c1\u76d8\u3002</p> <p>\u56e0\u4e3a\u5728\u4e3b\u5b58\u4e2d\u4fdd\u7559\u6240\u6709\u5757\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6211\u4eec\u9700\u8981\u7ba1\u7406\u4e3b\u5b58\u4e2d\u7528\u4e8e\u5b58\u50a8\u5757\u7684\u53ef\u7528\u7a7a\u95f4\u7684\u5206\u914d\u3002</p> <p>Buffer \u2013 portion of main memory available to store copies of disk blocks.</p> <p>\u7f13\u51b2\u533a(buffer)\u662f\u4e3b\u5b58\u4e2d\u7528\u4e8e\u5b58\u50a8\u78c1\u76d8\u5757\u7684\u62f7\u8d1d\u7684\u90a3\u90e8\u5206\u3002\u6bcf\u4e2a\u5757\u603b\u6709\u4e00\u4efd\u62f7\u8d1d\u5b58\u653e\u5728\u78c1\u76d8\u4e0a\uff0c\u4f46\u662f\u78c1\u76d8\u4e0a\u7684\u62f7\u8d1d\u53ef\u80fd\u6bd4\u7f13\u51b2\u533a\u4e2d\u7684\u7248\u672c\u65e7\u3002</p> <p>Buffer manager \u2013 subsystem responsible for allocating buffer space in main memory.</p> <p>\u8d1f\u8d23\u7f13\u51b2\u533a\u7a7a\u95f4\u5206\u914d\u7684\u5b50\u7cfb\u7edf\u79f0\u4e3a\u7f13\u51b2\u533a\u7ba1\u7406\u5668(buffer manager)\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter13/#buffer-manager-in-dbms","title":"Buffer Manager in DBMS","text":""},{"location":"Computer_Science/DB/Chapter13/#lru-example","title":"LRU Example","text":"<p>\u5f53\u7f13\u51b2\u533a\u4e2d\u6ca1\u6709\u5269\u4f59\u7a7a\u95f4\u65f6\uff0c\u4e00\u4e2a\u5757\u5fc5\u987b\u88ab\u79fb\u51fa(evicted)\uff0c\u5373\u5728\u65b0\u5757\u8bfb\u5165\u7f13\u51b2\u533a\u4e4b\u524d\uff0c\u5fc5\u987b\u628a\u4e00\u4e2a\u5757\u4ece\u7f13\u51b2\u533a\u4e2d\u53bb\u9664\u3002\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\u6700\u8fd1\u6700\u5c11\u4f7f\u7528(Least Recently Used.LRU)\u65b9\u6848\uff0c\u5373\u6700\u8fd1\u6700\u5c11\u8bbf\u95ee\u7684\u5757\u88ab\u5199\u56de\u78c1\u76d8\uff0c\u5e76\u4ece\u7f13\u51b2\u533a\u4e2d\u79fb\u8d70\u3002</p> <ul> <li>Supposing there are 4 buffer pages. </li> <li>Initial is empty occupied\u3002</li> <li>The access sequence is 1, 4, 8, 1, 5, 2, 3, 2, 4. </li> <li>According to the LRU policy , there are 3 times replacement occurred.</li> </ul> <p></p>"},{"location":"Computer_Science/DB/Chapter13/#buffer-manager","title":"Buffer Manager","text":"<p>Programs call on the buffer manager when they need a block from disk.</p> <ol> <li>If the block is already in the buffer, buffer manager returns the address of the block in main memory</li> <li>If the block is not in the buffer, the buffer manager<ul> <li>Allocates space in the buffer for the block<ul> <li>Replacing (throwing out) some other block, if required, to make space for the new block.</li> <li>Replaced block written back to disk only if it was modified since the most recent time that it was written to/fetched from the disk.</li> </ul> </li> <li>Reads the block from the disk to the buffer, and returns the address of the block in main memory to requester.</li> </ul> </li> </ol> <p>\u5f53\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\u7684\u7a0b\u5e8f\u9700\u8981\u78c1\u76d8\u4e0a\u7684\u5757\u65f6\uff0c\u5b83\u5411\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u53d1\u51fa\u8bf7\u6c42(\u5373\u8c03\u7528)\u3002</p> <ol> <li>\u5982\u679c\u8fd9\u4e2a\u5757\u5df2\u7ecf\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u5219\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u5c06\u8fd9\u4e2a\u5757\u5728\u4e3b\u5b58\u4e2d\u7684\u5730\u5740\u4f20\u7ed9\u8bf7\u6c42\u8005\u3002</li> <li>\u5982\u679c\u8fd9\u4e2a\u5757\u4e0d\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u5219\u7f13\u51b2\u533a\u7ba1\u7406\u5668:<ul> <li>\u9996\u5148\u5728\u7f13\u51b2\u533a\u4e2d\u4e3a\u8fd9\u4e2a\u5757\u5206\u914d\u7a7a\u95f4:<ul> <li>\u5982\u679c\u9700\u8981\uff0c\u53ef\u80fd\u4f1a\u628a\u4e00\u4e9b\u5176\u4ed6\u5757\u79fb\u51fa\u4e3b\u5b58\uff0c\u4e3a\u8fd9\u4e2a\u65b0\u5757\u817e\u51fa\u7a7a\u95f4\u3002</li> <li>\u88ab\u79fb\u51fa\u7684\u5757\u4ec5\u5f53\u5b83\u5728\u6700\u8fd1\u4e00\u6b21\u5199\u56de\u78c1\u76d8\u540e\u88ab\u4fee\u6539\u8fc7\u624d\u88ab\u5199\u56de\u78c1\u76d8(\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8fd9\u4e2a\u5757\u5728\u4e0a\u4e00\u6b21\u88ab\u8bfb\u5165\u7f13\u51b2\u533a\u5f53\u4e2d\uff0c\u4e00\u76f4\u5230\u88ab\u79fb\u51fa\u8fd9\u6bb5\u65f6\u95f4\u5185\u90fd\u6ca1\u6709\u88ab\u4fee\u6539\u8fc7\uff0c\u90a3\u4e48\u5c31\u4e0d\u5199\u56de\u78c1\u76d8\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e22\u6389)\u3002</li> </ul> </li> <li>\u7136\u540e\uff0c\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u628a\u88ab\u8bf7\u6c42\u7684\u5757\u4ece\u78c1\u76d8\u8bfb\u5165\u7f13\u51b2\u533a\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5757\u5728\u4e3b\u5b58\u4e2d\u7684\u5730\u5740\u4f20\u7ed9\u8bf7\u6c42\u8005\u3002</li> </ul> </li> </ol> <p>\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u7684\u5185\u90e8\u52a8\u4f5c\u5bf9\u53d1\u51fa\u78c1\u76d8\u5757\u8bf7\u6c42\u7684\u7a0b\u5e8f\u662f\u900f\u660e\u7684\u3002</p> <p>Buffer replacement strategy (details coming up!)</p>"},{"location":"Computer_Science/DB/Chapter13/#pin","title":"pin","text":"<p>\u4e00\u65e6\u4e00\u4e2a\u5757\u88ab\u8bfb\u5165\u7f13\u51b2\u533a\uff0c\u6570\u636e\u5e93\u8fdb\u7a0b\u5c31\u53ef\u4ee5\u4ece\u7f13\u51b2\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u8be5\u5757\u7684\u5185\u5bb9\u3002\u7136\u800c\uff0c\u5f53\u5757\u6b63\u5728\u88ab\u8bfb\u53d6\u65f6\uff0c\u5982\u679c\u4e00\u4e2a\u5e76\u53d1\u8fdb\u7a0b\u79fb\u51fa\u4e86\u8fd9\u4e2a\u5757\uff0c\u5e76\u628a\u5b83\u66ff\u6362\u6210\u53e6\u4e00\u4e2a\u4e0d\u540c\u7684\u5757\uff0c\u90a3\u4e48\u8bfb\u539f\u6765\u5757\u7684\u5185\u5bb9\u7684\u8bfb\u53d6\u64cd\u4f5c\u5c06\u8bfb\u5230\u4e0d\u6b63\u786e\u7684\u6570\u636e;\u5982\u679c\u4e00\u4e2a\u5757\u88ab\u79fb\u51fa\u65f6\u5b83\u6b63\u5728\u88ab\u5199\u4eba\uff0c\u90a3\u4e48\u5199\u4eba\u64cd\u4f5c\u5c06\u6700\u7ec8\u635f\u574f\u88ab\u66ff\u6362\u7684\u5757\u7684\u5185\u5bb9\u3002</p> <p>Pinned block: memory block that is not allowed to be written back to disk</p> <p>\u56e0\u6b64\uff0c\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u7f13\u51b2\u5757\u4e2d\u8bfb\u53d6\u6570\u636e\u4e4b\u524d\uff0c\u786e\u4fdd\u6b64\u5757\u4e0d\u4f1a\u88ab\u79fb\u51fa\u662f\u5f88\u91cd\u8981\u7684\u3002</p> <ul> <li>Pin done before reading/writing data from a block</li> <li>Unpin done when read /write is complete</li> <li> <p>Multiple concurrent pin/unpin operations possible: Keep a pin count, buffer block can be evicted only if pin count = 0</p> </li> <li> <p>\u9489\u4f4f(pin)\u64cd\u4f5c:\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u7edd\u4e0d\u4f1a\u79fb\u51fa\u4e00\u4e2a\u88ab\u9489\u4f4f\u7684\u5757\u3002</p> </li> <li>\u5f53\u8fdb\u7a0b\u5b8c\u6210\u6570\u636e\u8bfb\u53d6\u540e\uff0c\u5b83\u5c06\u6267\u884c\u89e3\u9664\u9489\u4f4f(unpin)\u64cd\u4f5c\uff0c\u5141\u8bb8\u8be5\u5757\u5728\u5fc5\u8981\u65f6\u88ab\u79fb\u51fa\u3002</li> <li>\u591a\u4e2a\u8fdb\u7a0b\u80fd\u4ece\u7f13\u51b2\u533a\u7684\u4e00\u4e2a\u5757\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\u8981\u6c42\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u8bbf\u95ee\u6570\u636e\u524d\u6267\u884c\u9489\u4f4f\u64cd\u4f5c\u5e76\u5728\u5b8c\u6210\u8bbf\u95ee\u540e\u6267\u884c\u89e3\u9664\u9489\u4f4f\u64cd\u4f5c\u3002\u76f4\u5230\u6240\u6709\u5bf9\u5757\u6267\u884c\u4e86\u9489\u4f4f\u64cd\u4f5c\u7684\u8fdb\u7a0b\u90fd\u89e3\u9664\u9489\u4f4f\u4e4b\u540e\u8be5\u5757\u624d\u80fd\u88ab\u79fb\u51fa\u3002\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u53ef\u4ee5\u786e\u4fdd\u8fd9\u4e2a\u6027\u8d28\uff0c\u90a3\u5c31\u662f\u4e3a\u6bcf\u4e2a\u7f13\u51b2\u5757\u7ef4\u62a4\u9489\u4f4f\u8ba1\u6570(pin count)\u3002\u5bf9\u6bcf\u4e2a\u9489\u4f4f\u64cd\u4f5c\u589e\u52a0\u8be5\u8ba1\u6570\uff0c\u4e14\u5bf9\u6bcf\u4e2a\u89e3\u9664\u9489\u4f4f\u64cd\u4f5c\u51cf\u5c11\u8be5\u8ba1\u6570\u3002\u4ec5\u5f53\u4e00\u4e2a\u9875\u9762\u7684\u9489\u4f4f\u8ba1\u6570\u7b49\u4e8e 0 \u65f6\uff0c\u5b83\u624d\u80fd\u88ab\u79fb\u51fa\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter13/#shared-and-exclusive-locks-on-buffer","title":"Shared and exclusive locks on buffer","text":"<p>\u4ece\u9875\u9762\u589e\u52a0\u6216\u5220\u9664\u5143\u7ec4\u7684\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u79fb\u52a8\u6b64\u9875\u9762\u7684\u5185\u5bb9;\u5728\u6b64\u671f\u95f4\uff0c\u4efb\u4f55\u5176\u4ed6\u8fdb\u7a0b\u90fd\u4e0d\u5e94\u8bfb\u53d6\u8be5\u9875\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5185\u5bb9\u53ef\u80fd\u662f\u4e0d\u4e00\u81f4\u7684\u3002\u6570\u636e\u5e93\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u5141\u8bb8\u8fdb\u7a0b\u83b7\u53d6\u7f13\u51b2\u533a\u4e0a\u7684\u5171\u4eab\u6392\u4ed6\u9501\u3002</p> <ul> <li>Needed to prevent concurrent operations from reading page contents as they are moved/reorganized, and to ensure only one move/reorganize at a time</li> <li>Readers get shared lock, updates to a block require exclusive lock</li> <li>Locking rules:<ul> <li>Only one process can get exclusive lock at a time</li> <li>Shared lock cannot be concurrently with exclusive lock</li> <li>Multiple processes may be given shared lock concurrently</li> </ul> </li> </ul>"},{"location":"Computer_Science/DB/Chapter13/#buffer-replacement-policies","title":"Buffer-Replacement Policies","text":"<ol> <li>LRU strategy - replace the block least recently used.</li> </ol> <p>Idea behind LRU \u2013 use past pattern of block references as a predictor of future references</p> <p>Queries have well-defined access patterns (such as sequential scans), and a database system can use the information in a user's query to predict future references</p> <p>LRU can be a bad strategy for certain access patterns involving repeated scans of data</p> <p>For example: when computing the join of 2 relations r and s by a nested loops</p> <p>for each tuple tr of r do      for each tuple ts of s do          if the tuples tr and ts match ...</p> <p>Mixed strategy with hints on replacement strategy provided by the query optimizer is preferable</p> <ol> <li> <p>Toss-immediate strategy \u2013 frees the space occupied by a block as soon as the final tuple of that block has been processed</p> </li> <li> <p>Most recently used (MRU) strategy \u2013 system must pin the block currently being processed. After the final tuple of that block has been processed, the block is unpinned, and it becomes the most recently used block.</p> </li> </ol> <p>Buffer managers also support forced output of blocks for the purpose of recovery</p>"},{"location":"Computer_Science/DB/Chapter14/","title":"Chapter 14 | Indexing","text":"<p> \u7ea6 6406 \u4e2a\u5b57  8 \u884c\u4ee3\u7801  24 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 32 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter14/#basic-concepts","title":"Basic Concepts","text":"<p>Indexing mechanisms used to speed up access to desired data.</p> <p>Search Key - attribute to set of attributes used to look up records in a file.</p> <p>An index file consists of records (called index entries) of the form</p> <p>\u7d22\u5f15\u9879(index entry)\u6216\u7d22\u5f15\u8bb0\u5f55(index record)\u7531\u4e00\u4e2a\u641c\u7d22\u7801\u503c\u548c\u6307\u9488\u6784\u6210\u3002</p> <ul> <li>\u8fd9\u4e9b\u6307\u9488\u6307\u5411\u5177\u6709\u8be5\u641c\u7d22\u7801\u503c\u7684\u4e00\u6761\u6216\u591a\u6761\u8bb0\u5f55\u3002</li> <li>\u6307\u5411\u4e00\u6761\u8bb0\u5f55\u7684\u6307\u9488\u7531\u78c1\u76d8\u5757\u7684\u6807\u8bc6\u548c\u6807\u8bc6\u51fa\u5757\u5185\u8bb0\u5f55\u7684\u78c1\u76d8\u5757\u5185\u504f\u79fb\u91cf\u6240\u7ec4\u6210\u3002</li> </ul> <p></p> <p>Index files are typically much smaller than the original file</p> <p>Two basic kinds of indices:</p> <ol> <li>Ordered indices: search keys are stored in sorted order</li> <li>Hash indices: search keys are distributed uniformly across \"buckets\" using a \"hash function\".</li> </ol>"},{"location":"Computer_Science/DB/Chapter14/#index-evaluation-metrics","title":"Index Evaluation Metrics","text":"<p>Access types supported efficiently.</p> <ol> <li>Point query: records with a specified value in the attribute</li> <li>Range query: or records with an attribute value falling in a specified range of values.</li> </ol> <p>\u8861\u91cf\u6307\u6807:</p> <ol> <li>Access time</li> <li>Insertion time</li> <li>Deletion time</li> <li>Space overhead</li> </ol>"},{"location":"Computer_Science/DB/Chapter14/#ordered-indices","title":"Ordered Indices","text":"<p>In an ordered index, index entries are stored sorted on the search key value.</p> <ol> <li>Primary index\uff08\u4e3b\u7d22\u5f15\uff09also called clustering index\uff08\u805a\u96c6\u7d22\u5f15\uff09: in a sequentially ordered file, the index whose search key specifies the sequential order of the file.</li> </ol> <ul> <li>\u7269\u7406\u6587\u4ef6\u6309\u7167\u4e00\u4e2a\u987a\u5e8f\u6392\u653e\uff0csearch-key \u7684\u987a\u5e8f\u4e0e\u7269\u7406\u6587\u4ef6\u7684\u987a\u5e8f\u4e00\u81f4\u3002\u4e5f\u5c31\u662f\u641c\u7d22\u7801\u5b9a\u4e49\u4e86\u6587\u4ef6\u7684\u6b21\u5e8f\u3002</li> <li>The search key of a primary index is usually but not necessarily the primary key.</li> </ul> <ol> <li>Secondary index\uff08\u8f85\u52a9\u7d22\u5f15\uff09: an index whose search key specifies an order different from the sequential order of the file. Also called non-clustering index.</li> </ol> <p>\u641c\u7d22\u7801\u6307\u5b9a\u7684\u6b21\u5e8f\u4e0e\u6587\u4ef6\u7684\u6392\u5217\u6b21\u5e8f\u4e0d\u540c\u7684\u7d22\u5f15\u88ab\u79f0\u4e3a\u975e\u805a\u96c6\u7d22\u5f15(non-clustering index)\u6216\u8f85\u52a9\u7d22\u5f15(secondary index)\u3002</p> <p>Index-sequential file\uff08\u7d22\u5f15\u987a\u5e8f\u6587\u4ef6\uff09: ordered sequential file with a primary index.</p>"},{"location":"Computer_Science/DB/Chapter14/#primary-index-example","title":"Primary index Example","text":"<ul> <li>primary index on ID attribute of instructor</li> </ul>"},{"location":"Computer_Science/DB/Chapter14/#secondary-index-example","title":"Secondary index Example","text":"<ul> <li>Secondary index on salary attribute of instructor</li> </ul>"},{"location":"Computer_Science/DB/Chapter14/#dense-index-files","title":"Dense Index Files","text":"<ul> <li>Dense index(\u7a20\u5bc6\u7d22\u5f15) \u2014 Index record appears for every search-key value in the file.</li> </ul> <p>\u7a20\u5bc6\u7d22\u5f15\u4e2d\uff0c\u5bf9\u4e8e\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e2a\u641c\u7d22\u7801\u503c\u90fd\u6709\u4e00\u4e2a\u7d22\u5f15\u9879\u3002</p> <p>\u5728\u7a20\u5bc6\u805a\u96c6\u7d22\u5f15\u4e2d\uff0c\u7d22\u5f15\u8bb0\u5f55\u5305\u62ec\u641c\u7d22\u7801\u503c\u4ee5\u53ca\u6307\u5411\u5177\u6709\u8be5\u641c\u7d22\u7801\u503c\u7684\u7b2c\u4e00\u6761\u6570\u636e\u8bb0\u5f55\u7684\u6307\u9488\u3002\u5177\u6709\u76f8\u540c\u641c\u7d22\u7801\u503c\u7684\u5176\u4f59\u8bb0\u5f55\u4f1a\u987a\u5e8f\u5730\u5b58\u50a8\u5728\u7b2c\u4e00\u6761\u8bb0\u5f55\u4e4b\u540e\u7531\u4e8e\u8be5\u7d22\u5f15\u662f\u805a\u96c6\u7d22\u5f15\uff0c\u56e0\u6b64\u8bb0\u5f55\u662f\u6839\u636e\u76f8\u540c\u7684\u641c\u7d22\u7801\u503c\u6392\u5e8f\u7684\u3002</p> <p>\u5728\u7a20\u5bc6\u975e\u805a\u96c6\u7d22\u5f15\u4e2d\uff0c\u7d22\u5f15\u5fc5\u987b\u5b58\u50a8\u6307\u5411\u5177\u6709\u76f8\u540c\u641c\u7d22\u7801\u503c\u7684\u6240\u6709\u8bb0\u5f55\u7684\u6307\u9488 \u5217\u8868\u3002</p> <p>E.g. index on ID attribute of instructor relation</p> <p></p> <p>E.g. Dense index on dept_name, with instructor file sorted on dept_name</p> <p></p>"},{"location":"Computer_Science/DB/Chapter14/#sparse-index-files","title":"Sparse Index Files","text":"<p>Sparse Index\uff08\u7a00\u758f\u7d22\u5f15\uff09: contains index records for only some search-key values.</p> <p>\u5728\u7a00\u758f\u7d22\u5f15\u4e2d\uff0c\u53ea\u4e3a\u67d0\u4e9b\u641c\u7d22\u7801\u503c\u5efa\u7acb\u7d22\u5f15\u9879\u3002</p> <p>Applicable when records are sequentially ordered on search-key.</p> <p>\u53ea\u6709\u5f53\u5173\u7cfb\u6309\u641c\u7d22\u7801\u6392\u5217\u6b21\u5e8f\u5b58\u50a8\u65f6\u624d\u80fd\u4f7f\u7528\u7a00\u758f\u7d22\u5f15\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u53ea\u6709\u7d22\u5f15\u662f\u805a\u96c6\u7d22\u5f15\u65f6\u624d\u4f7f\u7528\u7a00\u758f\u7d22\u5f15\u3002</p> <p>\u548c\u7a20\u5bc6\u7d22\u5f15\u4e2d\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u6bcf\u4e2a\u7d22\u5f15\u9879\u4e5f\u5305\u62ec\u4e00\u4e2a\u641c\u7d22\u7801\u503c\u548c\u6307\u5411\u5177\u6709\u8be5\u641c\u7d22\u7801\u503c\u7684\u7b2c\u4e00\u6761\u6570\u636e\u8bb0\u5f55\u7684\u6307\u9488\u3002</p> <p>To locate a record with search-key value K we:</p> <ol> <li>Find index record with largest search-key value &lt; K</li> <li>Search file sequentially starting at the record to which the index record points</li> </ol> <p>\u4e3a\u4e86\u5b9a\u4f4d\u4e00\u6761\u8bb0\u5f55:</p> <ol> <li>\u6211\u4eec\u627e\u5230\u6240\u5177\u6709\u7684\u6700\u5927\u641c\u7d22\u7801\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u6211\u4eec\u6240\u627e\u8bb0\u5f55\u7684\u641c\u7d22\u7801\u503c\u7684\u7d22\u5f15\u9879\u3002</li> <li>\u6211\u4eec\u4ece\u8be5\u7d22\u5f15\u9879\u6307\u5411\u7684\u8bb0\u5f55\u5f00\u59cb\uff0c\u7136\u540e\u6cbf\u7740\u6587\u4ef6\u4e2d\u7684\u6307\u9488\u67e5\u627e\uff0c\u76f4\u5230\u627e\u5230\u6240\u9700\u8bb0\u5f55\u4e3a\u6b62\u3002</li> </ol> <p></p> <p>Compared to dense indices:</p> <ol> <li>Less space and less maintenance overhead for insertions and deletions. \u7a7a\u95f4\u548c\u7ef4\u62a4\u6210\u672c\u5c0f\u3002</li> <li>Generally slower than dense index for locating records. \u67e5\u627e\u8bb0\u5f55\u7684\u901f\u5ea6\u4e00\u822c\u6bd4\u7a20\u5bc6\u7d22\u5f15\u6162\u3002</li> <li>Good tradeoff: sparse index with an index entry for every block in file, corresponding to least search-key value in the block. \u7d22\u5f15\u7684\u89c4\u6a21\u6bd4\u8f83\u5c0f\u3002</li> </ol> <p></p>"},{"location":"Computer_Science/DB/Chapter14/#multilevel-index","title":"Multilevel Index\uff08\u591a\u7ea7\u7d22\u5f15\uff09","text":"<p>If primary index does not fit in memory, access becomes expensive.</p> <p>Solution: treat primary index kept on disk as a sequential file and construct a sparse index on it.</p> <p>\u4e3a\u4e86\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u50cf\u5bf9\u5f85\u5176\u4ed6\u4efb\u4f55\u987a\u5e8f\u6587\u4ef6\u90a3\u6837\u5bf9\u5f85\u7d22\u5f15\uff0c\u5e76\u4e14\u5728\u539f\u59cb\u7684\u7d22\u5f15\u4e0a\u6784\u9020\u4e00\u4e2a\u7a00\u758f\u7684\u5916\u5c42\u7d22\u5f15\uff0c\u73b0\u5728\u6211\u4eec\u628a\u539f\u59cb\u7d22\u5f15\u79f0\u4e3a\u5185\u5c42\u7d22\u5f15\u3002</p> <ol> <li>outer index \u2013 a sparse index of primary index</li> <li>inner index \u2013 the primary index file</li> </ol> <p>If even outer index is too large to fit in main memory, yet another level of index can be created, and so on.</p> <p>Indices at all levels must be updated on insertion or deletion from the file.</p> <p></p>"},{"location":"Computer_Science/DB/Chapter14/#b-tree","title":"B+ Tree","text":""},{"location":"Computer_Science/DB/Chapter14/#b-tree-index","title":"B+ Tree Index","text":"<p>A B+ tree is a rooted tree satisfying the following properties:</p> <ol> <li>All paths from root to leaf are of the same length</li> <li>Inner node(not a root or a leaf): between \\(\\lceil \\frac{n}{2} \\rceil\\) and \\(n\\) children</li> <li>Leaf node: between \\(\\lceil \\frac{n-1}{2} \\rceil\\) and \\(n - 1\\) keys</li> <li>Special cases:<ul> <li>If the root is not a leaf : at least 2 children.</li> <li>If the root is a leaf : between 0 and (n\u20131) values.</li> </ul> </li> </ol> <p></p> <p>B+ tree \u7684\u6700\u4f4e\u9ad8\u5ea6\u4e0e\u6700\u9ad8\u9ad8\u5ea6\u8ba1\u7b97</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u4e00\u9875\u662f 4KB \u7684\u78c1\u76d8\uff0c\u4e00\u5171\u662f 4096 B\u3002\u4e00\u4e2a\u6307\u9488\u5047\u8bbe\u662f int \u7c7b\u578b\u7684\uff0c\u4e5f\u5c31\u662f 4B \uff0c\u5b58\u653e\u7684\u5185\u5bb9\u5047\u8bbe\u662f 10B \u7684\u3002\u90a3\u4e48\u5bf9\u4e8e\u6b64\u65f6\u7684 B+ \u6811\uff0c\u6700\u4f4e\u9ad8\u5ea6\u548c\u6700\u9ad8\u9ad8\u5ea6\u5982\u4e0b\uff1a</p> <ul> <li>\u6700\u9ad8\u9ad8\u5ea6\uff1a\\(\\lfloor \\frac{4096 - 4}{10 + 4} \\rfloor + 1 = 293\\)</li> <li>\u6700\u4f4e\u9ad8\u5ea6\uff1a\\(\\lfloor \\frac{4096 - 4}{(10 + 4) * 2} \\rfloor + 1 = 147\\)</li> </ul>"},{"location":"Computer_Science/DB/Chapter14/#b-tree-node-structure","title":"B+ Tree Node Structure","text":"<p>Typical node</p> <p></p> <ul> <li>\\(K_i\\) are the search-key values</li> <li>\\(P_i\\) are pointers to children (for non-leaf nodes) or pointers to records or buckets of records (for leaf nodes).</li> </ul> <p>The search-keys in a node are ordered \\(K_1 &lt; K_2 &lt; \\cdots &lt; K_{n-1}\\).</p>"},{"location":"Computer_Science/DB/Chapter14/#leaf-nodes-in-b-trees","title":"Leaf Nodes in B+ Trees","text":"<p>Properties of a leaf node:</p> <p>For i = 1, 2, ..., n-1, pointer \\(P_i\\) points to a file record with search-key value \\(K_i\\) , if \\(L_i\\) , \\(L_j\\) are leaf nodes and i &lt; j, \\(L_i\\) 's search-key values are less than or equal to \\(L_j\\) 's search-key values</p> <p>\\(P_n\\) points to next leaf node in search-key order</p> <p></p>"},{"location":"Computer_Science/DB/Chapter14/#non-leaf-nodes-in-b-trees","title":"Non-Leaf Nodes in B+-Trees","text":"<p>Non leaf nodes form a multi-level sparse index on the leaf nodes. </p> <p>For a non-leaf node with m pointers:</p> <p>\\(P_1\\) : all the search-keys in the subtree to which \\(P_1\\) points are  less than \\(K_1\\)</p> <p>\\(P_i\\) : (2 \\(\\le\\) i \\(\\le\\) n \u2013 1): all the search-keys in the subtree to which \\(P_i\\) points have values greater than or equal to \\(K_{i\u20131}\\) and less than \\(K_i\\)</p> <p>\\(P_n\\) : All the search-keys in the subtree to which \\(P_n\\) points have values greater than or equal to \\(K_{n\u20131}\\)</p> <p></p>"},{"location":"Computer_Science/DB/Chapter14/#observations-about-b-trees","title":"Observations about B+-trees","text":"<p>Since the inter-node connections are done by pointers, \"logically\"  close blocks need not be \"physically\" close.</p> <p>The non-leaf levels of the B+-tree form a hierarchy of sparse indices.</p> <p>The B+-tree contains a relatively small number of levels</p> <ul> <li>Level below root has at least \\(2 \\times \\lceil \\frac{n}{2} \\rceil\\) values</li> <li>Next level has at least \\(2 \\times \\lceil \\frac{n}{2} \\rceil \\times \\lceil \\frac{n}{2} \\rceil\\) values</li> <li>If there are K search-key values in the file, the tree height is no more than \\(\\lceil\\log_{\\lceil \\frac{n}{2} \\rceil} (K) \\rceil\\) ~ \\(\\lceil\\log_{\\lceil \\frac{n}{2} \\rceil} (\\frac{K}{2}) \\rceil + 1\\)</li> </ul> <p>thus searches can be conducted efficiently.</p> <p>Insertions and deletions to the main file can be handled efficiently, as the index can be restructured in logarithmic time.</p>"},{"location":"Computer_Science/DB/Chapter14/#query-on-b-tree","title":"Query on B+-Tree","text":"<pre><code>function find(v) // Find record with search-key value V \n1. C = root\n2. While C is not a leaf node {\n  1. Let i be least value s.t. $V \\le K_i$.\n  2. If no such exists, set C = last non-null pointer in C\n  3. Else { if (V = $K_i$ ) Set C = $P_{i+1}$ else set C = $P_i$}\n}\n3. Let i be least value s.t. $K_i$ = V\n4. If there is such a value i, follow pointer $P_i$ to the desired record.\n5. Else no record with search-key value k exists.\n</code></pre> <p>If there are K search-key values in the file, the height of the tree is no more than \\(\\lceil\\log_{\\lceil \\frac{n}{2} \\rceil} (K) \\rceil\\)</p> <p>A node is generally the same size as a disk block, typically 4 KB and n is typically around 100 (40 bytes per index entry).</p> <p>With 1 million search key values and n = 100, at most \\(log_{50}(1,000,000) = 4\\) nodes are accessed in a lookup.</p> <p>Contrast this with a balanced binary tree with 1 million search key values \u2014 around 20 nodes are accessed in a lookup.</p> <p>above difference is significant since every node access may need a disk I/O, costing around 20 milliseconds.</p>"},{"location":"Computer_Science/DB/Chapter14/#insert-on-b-trees","title":"Insert on B+-Trees","text":"<pre><code>function insert (pr, v)\n/* Assume record already added to the file. Let \n  pr be pointer to the record, and let \n  v be the search key value of the record */\n1.Find the leaf node in which the search-key value would appear\n  1. If there is room in the leaf node, insert (v, pr) pair in the leaf node\n  2. Otherwise, split the node (along with the new (v, pr) entry) as discussed in the next slide, and propagate updates to parent nodes.\n</code></pre> <p>Splitting a leaf node:</p> <pre><code>take the n (search-key value, pointer) pairs (including the one being inserted) in sorted order. Place the first $\\lceil \\frac{n}{2} \\rceil$ in the original node, and the rest in a new node.\n\nlet the new node be p, and let k be the least key value in p. Insert (k,p) in the parent of the node being split.\n\nIf the parent is full, split it and propagate the split further up.\n</code></pre> <p>Splitting of nodes proceeds upwards till a node that is not full is found.</p> <p>In the worst case the root node may be split increasing the height of the tree by 1.</p>"},{"location":"Computer_Science/DB/Chapter14/#delete-on-b-tree","title":"Delete on B+-Tree","text":"<pre><code>Function delete(pr, v)\n/*Assume record already deleted from file. Let v be the search key value of the record, and pr be the pointer to the record. */\n  Remove (pr, v) from the leaf node \n  If the node has too few entries due to the removal, and the entries in the node and a sibling fit into a single node, then merge siblings:\n    Insert all the search-key values in the two nodes into a single node (the one on the left), and delete the other node.\n    Delete the pair ($K_{i\u20131} , P_i$), where $P_i$ is the pointer to the deleted node, from its parent, recursively using the above procedure.\n</code></pre> <p>Otherwise, if the node has too few entries due to the removal, but the entries in the node and a sibling do not fit into a single node, then redistribute pointers:</p> <pre><code>Redistribute the pointers between the node and a sibling such that both have more than the minimum number of entries.\n\nUpdate the corresponding search-key value in the parent of the node.\n</code></pre> <p>The node deletions may cascade upwards till a node which has \\(\\lceil \\frac{N}{2} \\rceil\\) or more pointers is found.</p> <p>If the root node has only one pointer after deletion, it is deleted and the sole child becomes the root.</p>"},{"location":"Computer_Science/DB/Chapter14/#complexity-of-updates","title":"Complexity of Updates","text":"<p>Cost (in terms of number of I/O operations) of insertion and deletion of a single entry proportional to height of the tree</p> <p>With K entries and maximum fanout of n, worst case  complexity of insert/delete of an entry is \\(O(\\log_{\\lceil \\frac{n}{2} \\rceil}K)\\)</p> <p>In practice, number of I/O operations is less:</p> <ul> <li>Internal nodes tend to be in buffer</li> <li>Splits/merges are rare, most insert/delete operations only affect a leaf node</li> </ul> <p>Average node occupancy depends on insertion order</p> <p>\\(\\frac{2}{3}\\) with random, \\(\\frac{1}{2}\\) with insertion in sorted order</p> <p>\u867d\u7136 B+ \u6811\u4e0a\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u6bd4\u8f83\u590d\u6742\uff0c\u4f46\u5b83\u4eec\u9700\u8981\u7684 I/O \u64cd\u4f5c\u76f8\u5bf9\u8f83\u5c11\uff0c\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u4f18\u70b9\uff0c\u56e0\u4e3a I/O \u64cd\u4f5c\u5f88\u6602\u8d35\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4e00\u6b21\u63d2\u5165\u6240\u9700\u7684 I/O \u64cd\u4f5c\u6570\u4e0e \\(\\lceil\\log_{\\lceil \\frac{n}{2} \\rceil} (N) \\rceil\\) \u5176\u4e2d n \u662f\u8282\u70b9\u4e2d\u6307\u9488\u7684\u6700\u5927\u6570\u91cf\uff0c\u800c N \u662f\u88ab\u7d22\u5f15\u6587\u4ef6\u4e2d\u7684\u8bb0\u5f55\u6570\u91cf\u3002</p> <p>\u53ea\u8981\u641c\u7d22\u7801\u6ca1\u6709\u91cd\u590d\u503c\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u5220\u9664\u8fc7\u7a0b\u7684\u590d\u6742\u5ea6\u4e5f\u4e0e \\(\\lceil\\log_{\\lceil \\frac{n}{2} \\rceil} (N) \\rceil\\) \u6210\u6b63\u6bd4\u3002</p> <p>\u6362\u8a00\u4e4b\uff0c\u4ece I/O \u64cd\u4f5c\u8fd9\u65b9\u9762\u6765\u8bf4\uff0c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u4ee3\u4ef7\u4e0e B+ \u6811\u7684\u9ad8\u5ea6\u5448\u6b63\u6bd4\uff0c\u56e0\u6b64\u4ee3\u4ef7\u8f83\u4f4e\u3002\u6b63\u662f B+ \u6811\u4e0a\u7684\u64cd\u4f5c\u901f\u5ea6\u4f7f\u5b83\u6210\u4e3a\u6570\u636e\u5e93\u5b9e\u73b0\u4e2d\u5e38\u7528\u7684\u7d22\u5f15\u7ed3\u6784\u3002</p> <p>\u5c3d\u7ba1 B+ \u6811\u53ea\u4fdd\u8bc1\u8282\u70b9\u81f3\u5c11\u662f\u534a\u6ee1\u7684\uff0c\u4f46\u5982\u679c\u6309\u968f\u673a\u987a\u5e8f\u63d2\u5165\u9879\uff0c\u5219\u5e73\u5747\u6765\u8bf4\u8282\u70b9\u53ef\u80fd\u8d85\u8fc7\u4e09\u5206\u4e4b\u4e8c\u662f\u6ee1\u7684\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6709\u5e8f\u5730\u63d2\u5165\u9879\uff0c\u5219\u8282\u70b9\u5c06\u4ec5\u4e3a\u534a\u6ee1\u7684\u3002</p> <p>Prove</p> <ol> <li>\u6709\u5e8f\u63d2\u5165\u7684\u60c5\u51b5</li> </ol> <p>\u5f53\u6570\u636e\u6309\u6709\u5e8f\uff08\u5982\u9012\u589e\u6216\u9012\u51cf\uff09\u65b9\u5f0f\u63d2\u5165\u65f6\uff0c\u6240\u6709\u65b0\u5143\u7d20\u4f1a\u8fde\u7eed\u5730\u63d2\u5165\u5230\u540c\u4e00\u8282\u70b9\uff08\u5982\u6700\u53f3\u4fa7\u7684\u53f6\u5b50\u8282\u70b9\uff09\u3002\u6bcf\u5f53\u8be5\u8282\u70b9\u586b\u6ee1\uff08\u8fbe\u5230\u6700\u5927\u5bb9\u91cf \\(M\\) \uff09\u65f6\uff0c\u5fc5\u987b\u5206\u88c2\u4e3a\u4e24\u4e2a\u8282\u70b9\u3002\u5206\u88c2\u540e\uff0c\u6bcf\u4e2a\u65b0\u8282\u70b9\u5305\u542b\u7ea6 \\(M/2\\) \u4e2a\u5143\u7d20\u3002\u7531\u4e8e\u540e\u7eed\u63d2\u5165\u4ecd\u96c6\u4e2d\u5728\u5206\u88c2\u540e\u7684\u65b0\u8282\u70b9\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u53cd\u590d\u53d1\u751f\uff0c\u5bfc\u81f4\u6bcf\u4e2a\u8282\u70b9\u5728\u5206\u88c2\u524d\u4ec5\u88ab\u586b\u5145\u5230 \\(M\\)\uff0c\u5206\u88c2\u540e\u7acb\u5373\u56de\u5230\u534a\u6ee1\u72b6\u6001\uff08\\(M/2\\)\uff09\u3002\u56e0\u6b64\uff0c\u8282\u70b9\u7684\u5e73\u5747\u586b\u5145\u7387\u59cb\u7ec8\u4e3a\u534a\u6ee1\uff0850%\uff09\u3002</p> <ol> <li>\u968f\u673a\u63d2\u5165\u7684\u60c5\u51b5</li> </ol> <p>\u5f53\u6570\u636e\u4ee5\u968f\u673a\u987a\u5e8f\u63d2\u5165\u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u63d2\u5165\u6982\u7387\u5747\u7b49\u3002\u6b64\u65f6\uff0c\u8282\u70b9\u7684\u586b\u5145\u884c\u4e3a\u53ef\u901a\u8fc7\u6982\u7387\u6a21\u578b\u5206\u6790\uff1a</p> <ul> <li> <p>\u5206\u88c2\u65f6\u673a\u4e0e\u6982\u7387\uff1a\u8bbe\u8282\u70b9\u6700\u5927\u5bb9\u91cf\u4e3a \\(M\\)\u3002\u5f53\u8282\u70b9\u88ab\u968f\u673a\u63d2\u5165\u65f6\uff0c\u5176\u5143\u7d20\u6570\u4ece \\(M/2\\)\uff08\u5206\u88c2\u540e\u7684\u521d\u59cb\u72b6\u6001\uff09\u9010\u6e10\u589e\u52a0\u5230 \\(M\\)\u3002\u5047\u8bbe\u6bcf\u6b21\u63d2\u5165\u5230\u8be5\u8282\u70b9\u7684\u6982\u7387\u4e3a \\(p = 1/S\\)\uff08\\(S\\) \u4e3a\u5f53\u524d\u8282\u70b9\u603b\u6570\uff09\uff0c\u5219\u8282\u70b9\u9700\u8981\u7ea6 \\(M/2\\) \u6b21\u63d2\u5165\u624d\u80fd\u586b\u6ee1\u5e76\u5206\u88c2\u3002</p> </li> <li> <p>\u7a33\u6001\u5206\u6790\uff1a\u5728\u7a33\u6001\u4e0b\uff0c\u8282\u70b9\u6570\u76ee \\(S\\) \u8db3\u591f\u5927\uff0c\u63d2\u5165\u64cd\u4f5c\u5206\u6563\u5230\u591a\u4e2a\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u5728\u88ab\u5206\u88c2\u524d\u5e73\u5747\u79ef\u7d2f\u7684\u63d2\u5165\u6b21\u6570\u4e3a \\(M/2\\)\uff0c\u4f46\u586b\u5145\u6570\u7684\u671f\u671b\u503c\u66f4\u9ad8\u3002\u6839\u636e\u6982\u7387\u5206\u6790\uff08\u5982\u6cca\u677e\u8fc7\u7a0b\u6216\u9a6c\u5c14\u53ef\u592b\u94fe\u7a33\u6001\uff09\uff0c\u5e73\u5747\u586b\u5145\u7387\u7ea6\u4e3a \\(\\ln 2 \\approx 69\\%\\)\uff0c\u8d85\u8fc7\u4e09\u5206\u4e4b\u4e8c\u3002</p> </li> <li> <p>\u6570\u5b66\u63a8\u5bfc\uff1a  </p> </li> </ul> <p>\u5047\u8bbe\u8282\u70b9\u4ece\u534a\u6ee1\uff08\\(M/2\\)\uff09\u5f00\u59cb\uff0c\u6bcf\u6b21\u63d2\u5165\u5230\u8be5\u8282\u70b9\u7684\u6982\u7387\u4e3a \\(p\\)\u3002\u5f53\u8282\u70b9\u586b\u6ee1\u65f6\u5206\u88c2\u4e3a\u4e24\u4e2a\u534a\u6ee1\u8282\u70b9\u3002\u901a\u8fc7\u8ba1\u7b97\u7a33\u6001\u4e0b\u7684\u671f\u671b\u586b\u5145\u6570\uff0c\u53ef\u5f97\uff1a \\(\\(\\text{\u5e73\u5747\u586b\u5145\u7387} = \\frac{\\sum_{k=M/2}^{M-1} k \\cdot \\text{\u6982\u7387}(k)}{M}\\)\\) \u5176\u4e2d\uff0c\u6982\u7387\u5206\u5e03\u7531\u968f\u673a\u63d2\u5165\u7684\u5747\u5300\u6027\u51b3\u5b9a\uff0c\u6700\u7ec8\u7ed3\u679c\u8d8b\u8fd1\u4e8e \\(\\ln 2 \\cdot M\\)\u3002</p>"},{"location":"Computer_Science/DB/Chapter14/#non-unique-search-keys","title":"Non-Unique Search Keys","text":"<p>If a search key \\(a_i\\) is not unique, create instead an index on a  composite key (\\(a_i, A_p\\)) , which is unique</p> <p>\\(A_p\\) could be a primary key, record ID, or any other attribute that  guarantees uniqueness</p> <p>Search for \\(a_i = v\\) can be implemented by a range search on  composite key, with range \\((v, -\\infty)\\) to \\((v, +\\infty)\\)</p> <ul> <li>Extra storage overhead for keys</li> <li>Simpler code for insertion/deletion</li> <li>More I/O operations are needed to fetch the actual records</li> </ul> <ol> <li>If the index is clustering, all accesses are sequential</li> <li>If the index is non-clustering, each record access may need an I/O operation</li> <li>Widely used</li> </ol>"},{"location":"Computer_Science/DB/Chapter14/#b-tree-height-and-size-estimation","title":"B+- tree : height and size estimation","text":""},{"location":"Computer_Science/DB/Chapter14/#b-tree-file-organization","title":"B+-Tree File Organization","text":"<p>B+-Tree File Organization:</p> <p>Leaf nodes in a B+-tree file organization store records, instead of pointers</p> <p>Helps keep data records clustered even when there are insertions/deletions/updates</p> <p>Leaf nodes are still required to be half full</p> <p>Since records are larger than pointers, the maximum number of  records that can be stored in a leaf node is less than the number of pointers in a nonleaf node.</p> <p>Insertion and deletion are handled in the same way as insertion and  deletion of entries in a B+-tree index.</p> <p></p> \\[\\text{Example of B+-tree File Organization}\\] <p>Good space utilization important since records use more space than  pointers.</p> <p>To improve space utilization, involve more sibling nodes in redistribution during splits and merges</p> <p>Involving 2 siblings in redistribution (to avoid split / merge where possible) results in each node having at least \\(\\lfloor \\frac{2n}{3} \\rfloor\\) entries</p>"},{"location":"Computer_Science/DB/Chapter14/#other-issues-in-indexing","title":"Other Issues in Indexing","text":"<p>Record relocation and secondary indices</p> <p>If a record moves, all secondary indices that store record pointers  have to be updated</p> <p>Node splits in B+-tree file organizations become very expensive</p> <p>Solution: use primary-index search key instead of record pointer in  secondary index</p> <ul> <li>Extra traversal of primary index to locate record<ul> <li>Higher cost for queries, but node splits are cheap</li> </ul> </li> <li>Add record-id if primary-index search key is non-unique</li> </ul>"},{"location":"Computer_Science/DB/Chapter14/#indexing-strings","title":"Indexing Strings","text":"<p>Variable length strings as keys</p> <ul> <li>Variable fanout</li> <li>Use space utilization as criterion for splitting, not number of pointers</li> </ul> <p>Prefix compression</p> <ul> <li>Key values at internal nodes can be prefixes of full key</li> <li>Keep enough characters to distinguish entries in the subtrees separated by the key value</li> <li>Keys in leaf node can be compressed by sharing common prefixes</li> </ul>"},{"location":"Computer_Science/DB/Chapter14/#bulk-loading-and-bottom-up-build","title":"Bulk Loading and Bottom-Up Build","text":"<p>Inserting entries one-at-a-time into a B+-tree requires \\(\\ge  1\\) IO per entry</p> <ul> <li>assuming leaf level does not fit in memory</li> <li>can be very inefficient for loading a large number of entries at a time (bulk loading)</li> </ul> <p>Efficient alternative 1: Insert in sorted order</p> <ul> <li>sort entries first (using efficient external-memory sort algorithms)</li> <li>insert in sorted order</li> <li>insertion will go to existing page (or cause a split)</li> <li>much improved IO performance, but most leaf nodes half full</li> </ul> <p>Efficient alternative 2: Bottom-up B+-tree construction</p> <ul> <li>As before sort entries</li> <li>And then create tree layer-by-layer, starting with leaf level</li> <li>Implemented as part of bulk-load utility by most database systems</li> </ul>"},{"location":"Computer_Science/DB/Chapter14/#bottom-up-b-tree-build","title":"Bottom-Up B+-tree Build","text":"<p>\u5bf9\u4e8e\u8fd9\u4e00\u79cd\u751f\u6210\u7684\u5b58\u653e\u65b9\u5f0f:\u4e00\u5c42\u5c42\u653e\u7f6e\u3002</p> <p>\u53f6\u5b50\u653e\u5728\u4e00\u8d77\u3002</p> <p>\u5b58\u653e\u7684\u65f6\u5019\u53ea\u6709\u4e00\u6b21\u8bfb\u5199\u5b9a\u4f4d,\u7136\u540e\u53ef\u4ee5\u76f4\u63a5\u79fb\u52a8\u8fc7\u53bb,\u53ef\u4ee5\u4e00\u8fb9\u751f\u6210\u4e00\u904d\u5199\u5165\u78c1\u76d8,\u4e00\u6b21\u987a\u5e8f\u5199\u5373\u53ef\u3002</p> <p>\u8bfb\u548c\u67e5\u627e\u7684\u65f6\u5019,\u8303\u56f4\u67e5\u627e\u5341\u5206\u9ad8\u6548,scan\u7684\u65f6\u5019\u4e5f\u5f88\u9ad8\u6548\u3002</p> <p>Bottom-up B+-tree construction</p> <ol> <li>First sort index entries</li> <li>Then create B+-tree layer-by-layer, starting with leaf level</li> <li>The built B+-tree is written to disk using sequential I/O operations</li> </ol> <p></p> <p>Bulk insert index entries</p> <p>\u4e00\u6b21 seek \u662f\u628a\u8981\u63d2\u5165\u7684\u4e1c\u897f\u6392\u5e8f\u540e\u518d\u63d2\u5165\u3002\u8981\u662f\u63d2\u5165\u7684\u5f88\u591a\u8fd8\u80fd\u65b0\u5efa B+ \u6811\u518d\u5408\u5e76\u3002</p> <p>\u4e24\u884c\u6570\u7ec4\u8fdb\u884c merging \u5c31\u662f\u4e00\u884c\u65b0\u7684\u53f6\u5b50\u3002</p> <p>\u4e00\u6b21 seek \u662f\u8981\u628a\u8001\u7684\u8bfb\u8fdb\u53bb\u3002</p> <p>\u5408\u8d77\u6765\u7684\u670913\u4e2a\u5757\uff0c\u518d\u52a0\u4e0a\u628a\u516d\u4e2a\u8001\u7684\u53f6\u5b50\u5757\u9001\u5230\u65b0\u7684\u8fd9\u8fb9\uff0c\u4e00\u5171\u5341\u4e5d\u3002</p> <p>Build a new B+-tree using the Bottom-UP Build algorithm</p> <p></p>"},{"location":"Computer_Science/DB/Chapter14/#multiple-key-access","title":"Multiple-Key Access","text":"<p>Use multiple indices for certain types of queries.</p> <p>Example:  select ID from instructor where dept_name = \"Finance\" and salary = 80000</p> <p>Possible strategies for processing query using indices on single attributes:</p> <ol> <li>Use index on dept_name to find instructors with department name Finance; test salary = 80000 </li> <li>Use index on salary to find instructors with a salary of $80000; test dept_name = \"Finance\".</li> <li> <p>Use dept_name index to find pointers to all records pertaining to the \"Finance\" department. Similarly use index on salary. Take intersection of both sets of pointers obtained.</p> </li> <li> <p>\u53ef\u4ee5\u5efa\u7acb\u4e24\u4e2a\u7d22\u5f15\u3002</p> </li> <li>\u6216\u8005\u5efa\u7acb\u4e00\u4e2a\u7d22\u5f15,\u627e\u51fa\u6ee1\u8db3\u4e00\u4e2a\u6761\u4ef6\u7684\u3002</li> </ol> <p>\u53ea\u8981 search-key \u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\u5c31\u53ef\u4ee5\u5efa\u7acb B+ \u6811\u7d22\u5f15</p>"},{"location":"Computer_Science/DB/Chapter14/#indices-on-multiple-keys","title":"Indices on Multiple Keys","text":"<p>Composite search keys are search keys containing more than one attribute</p> <p>E.g. (dept_name, salary)</p> <p>Lexicographic ordering:</p> <p>\\((a_1, a_2) &lt; (b_1, b_2)\\) if \\(a_1 &lt; b_1\\) or \\(a_1 = b_1\\) and \\(a_2 &lt; b_2\\)</p> <ol> <li>\u53ef\u4ee5\u5728\u4e8c\u5143\u7ec4\u4e0a\u5efa\u7acb\u7d22\u5f15,\u53ea\u8981\u80fd\u6bd4\u8f83\u5927\u5c0f\u3002</li> <li>\u54ea\u4e2a\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u5c5e\u6027\u8fd8\u662f\u5f88\u91cd\u8981\u7684\uff0c\u5bf9\u4e8e range-search \u8fd8\u662f\u5f88\u6709\u7528\u7684\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter14/#indexing-in-main-memory","title":"Indexing in Main Memory","text":"<p>Random access in memory</p> <ul> <li>Much cheaper than on disk/flash, but still expensive compared to cache read</li> <li>Binary search for a key value within a large B+-tree node results in many cache misses</li> <li>Data structures that make best use of cache preferable \u2013 cache conscious</li> </ul> <p>4K \u5927\u5c0f\u7684\u8282\u70b9\u662f\u56e0\u4e3a\u78c1\u76d8\u5185\u5b58\u4ea4\u4e92\u5c31\u662f 4K ,\u4e3a\u4e86\u51cf\u5c0f I/O\u3002</p> <p>\u5728\u5185\u5b58\u4e2d\u5230 CPU \u4e2d\u8fd8\u662f\u5b58\u5728\u6570\u636e\u4f20\u8f93\u7684\u95ee\u9898\u7684\uff0c\u6240\u4ee5\u5176\u5b9e\u4e8c\u5206\u67e5\u627e\u627e\u4e86\u8981\u8bfb\u53d6\u53e6\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u662f\u6ca1\u6709\u5f88\u597d\u5730\u5229\u7528\u3002</p> <p>cache\u7684\u7ed3\u6784\u7684\u5bf9\u4e8e\u6709\u5e8f\u6570\u7ec4\u65e0\u8bba\u987a\u5e8f\u67e5\u627e\u6216\u8005\u4e8c\u5206\u67e5\u627e\u90fd\u4e0d\u9ad8\u6548\u3002</p> <p>B+- trees with small nodes that fit in cache line are preferable to reduce cache misses</p> <p>\u5c40\u90e8\u53ef\u4ee5\u6210\u6811\u5f62\u7ed3\u6784\uff0c\u628a\u8fd9\u4e2a\u7ed3\u6784\u8bfb\u5230CPU\u91cc\u9762\u3002</p> <p>Key idea:</p> <ul> <li>use large node size to optimize disk access</li> <li>but structure data within a node using a tree with small node size, instead of using an array, to optimize cache access.</li> </ul> <p>\u4f8b\u5982\u53ef\u4ee5\u5b66\u751f\u7684\u540d\u5b57\u3001\u5b66\u53f7\u5206\u522b\u6570\u7ec4\uff0c\u7136\u540e\u6309\u7167\u5b66\u751f\u987a\u5e8f\u8fd9\u6837\u653e\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter14/#indexing-on-flash","title":"Indexing on Flash","text":"<p>Random I/O cost much lower on flash \u2014\u2014 20 to 100 microseconds for read/write</p> <p>Writes are not in-place, and (eventually) require a more expensive erase. flash\u4e0a\u9762\u7684\u64e6\u4f1a\u5f71\u54cd\u5bff\u547d\u3002</p> <p>Optimum page size therefore much smaller</p> <p>Bulk-loading still useful since it minimizes page erases</p> <p>Write-optimized tree structures (i.e., LSM-tree) have been adapted to minimize page writes for flash-optimized search trees</p>"},{"location":"Computer_Science/DB/Chapter14/#write-optimized-indices","title":"Write Optimized Indices","text":"<p>Performance of B+-trees can be poor for write-intensive workloads</p> <ul> <li>One I/O per leaf, assuming all internal nodes are in memory</li> <li>With magnetic disks, &lt; 100 inserts per second per disk</li> <li>With flash memory, one page overwrite per insert</li> </ul> <p>Two approaches to reducing cost of writes</p> <ol> <li>Log-structured merge tree (LSM-tree)</li> <li>Buffer tree</li> </ol>"},{"location":"Computer_Science/DB/Chapter14/#log-structured-merge-lsm-tree","title":"Log Structured Merge (LSM) Tree","text":"<p>\u65e5\u5fd7\u5f52\u5e76\u6811\uff0c\u5148\u5728\u5185\u5b58\u6784\u5efa\u7ed3\u6784\uff0c\u5185\u5b58\u91cc\u5199\u6ee1\u4e86\u4e4b\u540e\u518d\u5199\u5165 Disk \u5c31\u884c\uff0c\u6ee1\u4e86\u4e4b\u540e\u518d merge \uff0c\u5e76\u518d\u5f80\u4e0b\u5199(\u78c1\u76d8\u66f4\u6df1\u5904)\u3002</p> <p>Consider only inserts/queries for now</p> <p>Records inserted first into inmemory tree(\\(L_0\\) tree)</p> <p>When in-memory tree is full, records moved to disk (\\(L_1\\) tree)</p> <ul> <li>B+-tree constructed using bottom-up build by merging existing \\(L_1\\) tree with records from \\(L_0\\) tree</li> </ul> <p>When \\(L_1\\) tree exceeds some threshold, merge into \\(L_2\\) tree</p> <p>And so on for more levels</p> <p>Size threshold for \\(L_{i+1}\\) tree is k times size threshold for \\(L_i\\) tree</p> <p></p> <p>Benefits of LSM approach</p> <ul> <li>Inserts are done using only sequential I/O operations</li> <li>Leaves are full, avoiding space wastage</li> <li>Reduced number of I/O operations per record inserted as compared to normal B+-tree (up to some size)</li> </ul> <p>Drawback of LSM approach</p> <ul> <li>Queries have to search multiple trees</li> <li>Entire content of each level copied multiple times</li> </ul> <p>Stepped-merge index</p> <ul> <li>Variant of LSM tree with multiple trees at each level</li> <li>Reduces write cost compared to LSM tree</li> <li>But queries are even more expensive, Bloom filters to avoid lookups in most trees</li> </ul>"},{"location":"Computer_Science/DB/Chapter14/#stepped-merge-index","title":"Stepped Merge Index","text":"<p>Stepped-merge index: variant of LSM tree with k trees at each level on disk</p> <ol> <li>When all k indices exist at a level, merge them into one index of next level.</li> <li>Reduces write cost compared to LSM tree</li> </ol> <p>But queries are even more expensive since many trees need to be queries</p> <p>Optimization for point lookups</p> <ol> <li>Compute Bloom filter for each tree and store in-memory</li> <li>Query a tree only if Bloom filter returns a positive result</li> </ol> <p></p> <p>Deletion handled by adding special \"delete\" entries</p> <ol> <li>Lookups will find both original entry and the delete entry, and must return only those entries that do not have matching delete entry</li> <li>When trees are merged, if we find a delete entry matching an  original entry, both are dropped.</li> </ol> <p>Update handled using insert+delete</p> <p>LSM trees were introduced for disk-based indices, but useful to minimize erases with flash-based indices</p> <p>The stepped-merge variant of LSM trees is used in many BigData  storage systems</p>"},{"location":"Computer_Science/DB/Chapter14/#lsm","title":"LSM\u6811\u548c\u9636\u68af\u5f0f\u5408\u5e76\u7d22\u5f15\u7684\u5173\u7cfb","text":"<p>\u5728LSM\u6811\u6216\u9636\u68af\u5f0f\u5408\u5e76\u7d22\u5f15\u7b49\u5199\u5165\u4f18\u5316\u7684\u7ed3\u6784\u4e2d\uff0c\u6570\u636e\u4ec5\u5728\u5c42\u6ee1\u65f6\u5408\u5e76\u5230\u4e0b\u4e00\u5c42\u3002\u8fd9\u79cd\u7b56\u7565\u867d\u7136\u964d\u4f4e\u4e86\u5199\u5165\u653e\u5927\uff0c\u4f46\u53ef\u80fd\u5bfc\u81f4\u8bfb\u53d6\u65f6\u9700\u8981\u67e5\u8be2\u591a\u4e2a\u5c42\u7ea7\u548c\u6587\u4ef6\uff0c\u5c24\u5176\u5728\u8bfb\u53d6\u5bc6\u96c6\u4f46\u65e0\u66f4\u65b0\u7684\u573a\u666f\u4e2d\uff0c\u6027\u80fd\u74f6\u9888\u4f1a\u663e\u73b0\u3002</p> <p>1. LSM\u6811\u7684\u6838\u5fc3\u8bbe\u8ba1</p> <p>LSM\u6811\u662f\u4e00\u79cd\u9488\u5bf9\u5199\u4f18\u5316\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u5206\u5c42\u5b58\u50a8\u548c\u5f02\u6b65\u5408\u5e76\u6765\u5e73\u8861\u8bfb\u5199\u6027\u80fd\u3002\u5176\u57fa\u672c\u7ed3\u6784\u5305\u62ec\uff1a</p> <ul> <li>\u5185\u5b58\u5c42\uff08MemTable\uff09\uff1a\u63a5\u6536\u5199\u5165\u64cd\u4f5c\uff0c\u6570\u636e\u9996\u5148\u5199\u5165\u5185\u5b58\u4e2d\u7684\u53ef\u53d8\u7ed3\u6784\uff08\u5982\u8df3\u8868\u6216B+\u6811\uff09\u3002</li> <li>\u78c1\u76d8\u5c42\uff08SSTable\u5c42\u7ea7\uff09\uff1a\u5185\u5b58\u6570\u636e\u5237\u5199\u5230\u78c1\u76d8\u540e\u5f62\u6210\u4e0d\u53ef\u53d8\u7684\u6709\u5e8f\u5b57\u7b26\u4e32\u8868\uff08SSTable\uff09\uff0c\u5e76\u6309\u5c42\u7ea7\u7ec4\u7ec7\uff08\u5982Level 0\u5230Level N\uff09\u3002</li> <li>\u5408\u5e76\u64cd\u4f5c\uff08Compaction\uff09\uff1a\u5f53\u67d0\u4e00\u5c42\u6570\u636e\u91cf\u8fbe\u5230\u9608\u503c\u65f6\uff0c\u5c06\u5176\u4e0e\u4e0b\u4e00\u5c42\u7684\u6570\u636e\u5408\u5e76\uff0c\u9010\u6b65\u4e0b\u6c89\u5230\u66f4\u6df1\u5c42\u7ea7\u3002</li> </ul> <p>2. \u9636\u68af\u5f0f\u5408\u5e76\u7d22\u5f15\u7684\u672c\u8d28</p> <p>\u9636\u68af\u5f0f\u5408\u5e76\u7d22\u5f15\uff08stepped-merge\uff09\u662f LSM \u6811\u4e2d\u5408\u5e76\u7b56\u7565\u7684\u4e00\u79cd\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\uff0c\u800c\u975e\u72ec\u7acb\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u7684\u6838\u5fc3\u76ee\u6807\u662f\uff1a</p> <ul> <li>\u51cf\u5c11\u5355\u6b21\u5408\u5e76\u7684\u6570\u636e\u91cf\uff1a\u901a\u8fc7\u5c06\u5408\u5e76\u5206\u89e3\u4e3a\u591a\u4e2a\u6b65\u9aa4\uff0c\u9010\u6b65\u8fc1\u79fb\u6570\u636e\uff0c\u907f\u514d\u5168\u91cf\u5408\u5e76\u7684\u5ef6\u8fdf\u548c\u8d44\u6e90\u5360\u7528\u3002</li> <li>\u4f18\u5316\u5199\u5165\u653e\u5927\u548c\u8bfb\u53d6\u6027\u80fd\uff1a\u901a\u8fc7\u66f4\u7ec6\u7c92\u5ea6\u7684\u5408\u5e76\u63a7\u5236\uff0c\u5e73\u8861\u5199\u5165\u5f00\u9500\u4e0e\u67e5\u8be2\u65f6\u9700\u8981\u8bbf\u95ee\u7684\u6587\u4ef6\u6570\u91cf\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter14/#buffer-tree","title":"Buffer Tree","text":"<p>Buffer Tree \u662f\u4e00\u79cd\u6539\u8fdb\u7684 B+ \u6811\u7ed3\u6784\uff0c\u901a\u8fc7\u5728\u5185\u90e8\u8282\u70b9\uff08\u975e\u53f6\u5b50\u8282\u70b9\uff09\u6dfb\u52a0\u7f13\u51b2\u533a\uff08buffer\uff09\u6765\u4f18\u5316\u63d2\u5165\u6027\u80fd\uff0c\u9002\u7528\u4e8e\u5199\u5165\u5bc6\u96c6\u578b\u573a\u666f\uff08\u5982\u6570\u636e\u5e93\u3001\u6587\u4ef6\u7cfb\u7edf\u7b49\uff09\u3002  </p> <p>Key idea: each internal node of B+-tree has a buffer to store inserts</p> <ol> <li>Inserts are moved to lower levels when buffer is full</li> <li>With a large buffer, many records are moved to lower level each  time</li> <li> <p>Per record I/O decreases correspondingly</p> </li> <li> <p>\u7f13\u51b2\u63d2\u5165\u64cd\u4f5c </p> </li> </ol> <ul> <li>\u4f20\u7edf B+ \u6811\uff1a\u6bcf\u6b21\u63d2\u5165\u5fc5\u987b\u7acb\u5373\u9012\u5f52\u5411\u4e0b\u627e\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u53ef\u80fd\u5bfc\u81f4\u9891\u7e41\u7684\u8282\u70b9\u5206\u88c2\u548c I/O \u64cd\u4f5c\u3002  </li> <li>Buffer Tree\uff1a\u63d2\u5165\u64cd\u4f5c\u5148\u6682\u5b58\u5728\u5185\u90e8\u8282\u70b9\u7684\u7f13\u51b2\u533a\uff0c\u76f4\u5230\u7f13\u51b2\u533a\u6ee1\u65f6\u624d\u6279\u91cf\u5411\u4e0b\u4f20\u9012\uff08flush\uff09\uff0c\u51cf\u5c11 I/O \u5f00\u9500\u3002  </li> </ul> <ol> <li>\u6279\u91cf\u4e0b\u63a8\uff08Flushing\uff09 </li> </ol> <ul> <li>\u5f53\u67d0\u4e2a\u5185\u90e8\u8282\u70b9\u7684\u7f13\u51b2\u533a\u6ee1\u65f6\uff0c\u5176\u4e2d\u7684\u6240\u6709\u63d2\u5165\u64cd\u4f5c\u4f1a\u4e00\u6b21\u6027\u4e0b\u63a8\u5230\u5b50\u8282\u70b9\uff08\u53ef\u80fd\u89e6\u53d1\u5b50\u8282\u70b9\u7f13\u51b2\u533a\u7684\u9012\u5f52\u4e0b\u63a8\uff09\u3002  </li> <li>\u6bcf\u6b21\u4e0b\u63a8\u7684 I/O \u6210\u672c\u5206\u644a\u5230\u591a\u6761\u8bb0\u5f55\uff0c\u964d\u4f4e\u5355\u6761\u8bb0\u5f55\u7684 I/O \u5f00\u9500\u3002  </li> </ul> <ol> <li>\u67e5\u8be2\u5904\u7406 </li> </ol> <ul> <li>\u67e5\u8be2\u65f6\u9700\u8981\u68c0\u67e5\u8def\u5f84\u4e0a\u6240\u6709\u7f13\u51b2\u533a\u7684\u672a\u4e0b\u63a8\u64cd\u4f5c\uff0c\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\uff08\u53ef\u80fd\u589e\u52a0\u5c11\u91cf\u67e5\u8be2\u5f00\u9500\uff09\u3002  </li> </ul> <p>Benefits</p> <ol> <li>Less overhead on queries</li> <li>Can be used with any tree index structure</li> <li>Used in PostgreSQL Generalized Search Tree (GiST) indices</li> </ol> <p>\u4f18\u70b9</p> <ol> <li>\u51cf\u5c11\u67e5\u8be2\u5e72\u6270    - \u63d2\u5165\u64cd\u4f5c\u88ab\u7f13\u51b2\uff0c\u907f\u514d\u9891\u7e41\u7684\u8282\u70b9\u5206\u88c2\u548c\u78c1\u76d8\u5199\u5165\uff0c\u4f7f\u5f97\u67e5\u8be2\u6027\u80fd\u66f4\u7a33\u5b9a\u3002  </li> <li>\u901a\u7528\u6027    - \u53ef\u9002\u914d\u591a\u79cd\u6811\u7ed3\u6784\uff08\u5982 B+ \u6811\u3001R \u6811\u7b49\uff09\uff0cPostgreSQL \u7684 GiST \u7d22\u5f15\u5c31\u4f7f\u7528\u4e86\u7c7b\u4f3c\u6280\u672f\u3002  </li> <li>\u9002\u5408\u5199\u5165\u5bc6\u96c6\u578b\u573a\u666f    - \u7f13\u51b2\u533a\u6ee1\u65f6\u6279\u91cf\u4e0b\u63a8\uff0c\u51cf\u5c11\u968f\u673a I/O \u6b21\u6570\uff08\u76f8\u6bd4\u4f20\u7edf B+ \u6811\uff09\u3002  </li> </ol> <p>Drawback: more random I/O than LSM tree</p> <p>\u7f3a\u70b9</p> <ol> <li> <p>\u968f\u673a I/O \u4ecd\u5b58\u5728    - \u867d\u7136\u6bd4\u4f20\u7edf B+ \u6811\u4f18\u5316\uff0c\u4f46\u4e0b\u63a8\u64cd\u4f5c\u4ecd\u6d89\u53ca\u968f\u673a\u78c1\u76d8\u8bbf\u95ee\uff0c\u4e0d\u5982 LSM \u6811\uff08Log-Structured Merge Tree\uff09\u7684\u987a\u5e8f\u5199\u5165\u9ad8\u6548\u3002    - LSM \u6811\u901a\u8fc7\u8ffd\u52a0\u5199\u5165\uff08\u987a\u5e8f I/O\uff09+ \u540e\u53f0\u5408\u5e76\uff08compaction\uff09\u8fdb\u4e00\u6b65\u4f18\u5316\u5199\u5165\u541e\u5410\u3002  </p> </li> <li> <p>\u67e5\u8be2\u5ef6\u8fdf    - \u67e5\u8be2\u65f6\u9700\u8981\u5408\u5e76\u7f13\u51b2\u533a\u4e2d\u7684\u672a\u4e0b\u63a8\u64cd\u4f5c\uff0c\u53ef\u80fd\u589e\u52a0\u5c11\u91cf CPU \u548c\u5185\u5b58\u5f00\u9500\u3002  </p> </li> <li> <p>\u4f18\u5316I/O</p> </li> <li>\u4ee3\u4ef7\u662f buffer \u4f1a\u5360\u636e fan-out \u7684\u4f4d\u7f6e</li> <li>buffer \u5927\u5c0f\u96be\u4ee5\u8ba1\u7b97</li> </ol> <p>\u9002\u7528\u573a\u666f</p> <ul> <li>\u4e2d\u7b49\u5199\u5165\u8d1f\u8f7d\uff1a\u9700\u8981\u5e73\u8861\u8bfb\u5199\u6027\u80fd\u7684\u573a\u666f\uff08\u5982\u4f20\u7edf\u6570\u636e\u5e93\u7d22\u5f15\uff09\u3002  </li> <li>\u65e0\u6cd5\u5b8c\u5168\u907f\u514d\u968f\u673a I/O\uff1a\u4f46\u76f8\u6bd4\u7eaf B+ \u6811\uff0c\u80fd\u663e\u8457\u964d\u4f4e\u5199\u5165\u653e\u5927\uff08write amplification\uff09\u3002  </li> </ul> <p></p>"},{"location":"Computer_Science/DB/Chapter14/#bitmap-indices","title":"Bitmap Indices","text":"<p>Bitmap indices are a special type of index designed for efficient querying on multiple keys</p> <p>\u4f4d\u56fe\u7d22\u5f15\u662f\u4e00\u79cd\u9488\u5bf9\u4f4e\u57fa\u6570\uff08low-cardinality\uff09\u5c5e\u6027\uff08\u5373\u5c5e\u6027\u53d6\u503c\u8f83\u5c11\uff0c\u5982\u6027\u522b\u3001\u56fd\u5bb6\u3001\u72b6\u6001\u7b49\uff09\u8bbe\u8ba1\u7684\u7279\u6b8a\u7d22\u5f15\u7ed3\u6784\uff0c\u901a\u8fc7\u4f4d\u8fd0\u7b97\u9ad8\u6548\u652f\u6301\u591a\u5c5e\u6027\u67e5\u8be2\uff08\u5982 <code>gender='M' AND income_level='L1'</code>\uff09\u3002</p> <p>Records in a relation are assumed to be numbered sequentially from, say, 0</p> <p>Given a number n it must be easy to retrieve record n. Particularly easy if records are of fixed size.</p> <p>Applicable on attributes that take on a relatively small number of distinct values</p> <p>E.g., gender, country, state, ...</p> <p>A bitmap is simply an array of bits</p> <p>In its simplest form a bitmap index on an attribute has a bitmap for each value of the attribute</p> <ul> <li>Bitmap has as many bits as records </li> <li>In a bitmap for value v, the bit for a record is 1 if the record has the value v for the attribute, and is 0 otherwise</li> </ul> <p>\u6bd4\u7279\u6570\u7ec4\u6bd4\u8d77\u539f\u6765\u7684\u8fd8\u662f\u5c0f\u5f88\u591a\uff0c\u5bf9\u4e8egender\u53ea\u6709\u4e24\u4e2a\u503c\u5efa\u7acb\u7d22\u5f15\u7528\u5e38\u89c4\u7ed3\u6784\u8fd8\u662f\u6709\u70b9\u96be\u5ea6\u7684\u4f46\u662f\u5bf9\u4e8e bitmap \u5c31\u5f88\u5bb9\u6613\u3002</p> <p></p> <p>\u7edf\u8ba1\u4e00\u4e07\u4e2a\u5b57\u6709\u591a\u5c11\u4e2a 1 : \u6bd4\u5982\u53d6 256 ,\u7136\u540e 256 \u5c31\u662f 256 \u4e2a 1 , 255 \u5c31\u662f 255 \u4e2a 1,\u7136\u540e\u52a0\u4e0a\u53bb\u3002\u5bf9\u5927\u6570\u636e\u5206\u6790\u5f88\u6709\u7528\u3002</p> <p>Bitmap indices are useful for queries on multiple attributes, not particularly useful for single attribute queries.</p> <p>Queries are answered using bitmap operations</p> <ul> <li>Intersection (and)</li> <li>Union (or)</li> </ul> <p>Each operation takes two bitmaps of the same size and applies the  operation on corresponding bits to get the result bitmap</p> <p>E.g., 100110 AND 110011 = 100010       100110 OR 110011 = 110111       NOT 100110 = 011001</p> <p>Males with income level L1: 10010 AND 10100 = 10000</p> <ul> <li>Can then retrieve required tuples.</li> <li>Counting number of matching tuples is even faster</li> </ul> <p>Bitmap indices generally very small compared with relation size</p> <p>E.g., if record is 100 bytes, space for a single bitmap is 1/800 of  space used by relation.</p> <ul> <li>If number of distinct attribute values is 8, bitmap is only 1% of relation size</li> </ul> <p>\u4f4d\u56fe\u7d22\u5f15\u7684\u4f18\u52bf</p> <p>(1) \u7a7a\u95f4\u6548\u7387\u9ad8</p> <ul> <li>\u4f4d\u56fe\u662f\u7d27\u51d1\u7684\u4e8c\u8fdb\u5236\u6570\u7ec4\uff0c\u6bcf\u6761\u8bb0\u5f55\u4ec5\u7528 1 bit \u8868\u793a\u3002</li> <li>\u5bf9\u6bd4\u4f20\u7edf\u7d22\u5f15\uff08\u5982 B+ \u6811\uff09\uff0c\u5b58\u50a8\u5f00\u9500\u6781\u4f4e\uff1a</li> <li>\u82e5\u8bb0\u5f55\u5927\u5c0f\u4e3a 100 \u5b57\u8282\uff0c\u5355\u4e2a\u4f4d\u56fe\u4ec5\u5360 <code>1/800</code> \u7684\u7a7a\u95f4\u3002</li> <li>\u82e5\u5c5e\u6027\u6709 8 \u4e2a\u4e0d\u540c\u503c\uff0c\u4f4d\u56fe\u603b\u5927\u5c0f\u4ec5\u4e3a\u8868\u7684 1%\u3002</li> </ul> <p>(2) \u591a\u5c5e\u6027\u67e5\u8be2\u9ad8\u6548</p> <p>\u901a\u8fc7\u4f4d\u8fd0\u7b97\uff08AND/OR/NOT\uff09\u5feb\u901f\u7ec4\u5408\u591a\u4e2a\u6761\u4ef6\u7684\u67e5\u8be2\uff1a</p> <ul> <li>AND\uff08\u4ea4\u96c6\uff09\uff1a<code>gender='M' AND income_level='L1'</code> <pre><code>'M'    : 1 0 1 1 0\n'L1'   : 1 0 0 1 0\n------------------- AND\nResult: 1 0 0 1 0\uff08\u5339\u914d\u884c 0 \u548c 3\uff09\n</code></pre></li> <li>OR\uff08\u5e76\u96c6\uff09\uff1a<code>gender='M' OR gender='F'</code> <pre><code>'M'    : 1 0 1 1 0\n'F'    : 0 1 0 0 1\n------------------- OR\nResult: 1 1 1 1 1\uff08\u5339\u914d\u6240\u6709\u884c\uff09\n</code></pre></li> </ul> <p>(3) \u7edf\u8ba1\u8ba1\u6570\u6781\u5feb</p> <ul> <li>\u76f4\u63a5\u8ba1\u7b97\u4f4d\u56fe\u4e2d <code>1</code> \u7684\u4e2a\u6570\u5373\u53ef\u5f97\u5230\u5339\u914d\u7684\u8bb0\u5f55\u6570\u3002</li> <li>\u4f18\u5316\u6280\u5de7\uff1a</li> <li>\u9884\u8ba1\u7b97\u6bcf\u4e2a\u5b57\u8282\uff088 bit\uff09\u7684 1 \u7684\u4e2a\u6570\uff0c\u67e5\u8868\u7d2f\u52a0\u3002     \uff08\u4f8b\u5982\uff0c<code>0xFF</code> \u5bf9\u5e94 8\uff0c<code>0x0F</code> \u5bf9\u5e94 4\uff09</li> <li>\u5bf9 1-million \u4f4d\u7684\u4f4d\u56fe\uff0c\u4ec5\u9700\u7ea6 31,250 \u6b21 CPU \u6307\u4ee4\u5373\u53ef\u5b8c\u6210 AND \u64cd\u4f5c\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter14/#efficient-implementation-of-bitmap-operations","title":"Efficient Implementation of Bitmap Operations","text":"<p>Bitmaps are packed into words; a single word and (a basic CPU  instruction) computes and of 32 or 64 bits at once</p> <p>E.g., 1-million-bit maps can be and-ed with just 31,250 instruction</p> <p>Counting number of 1s can be done fast by a trick:</p> <ul> <li>Use each byte to index into a precomputed array of 256 elements  each storing the count of 1s in the binary representation</li> </ul> <p></p> <p>Can use pairs of bytes to speed up further at a higher memory cost</p> <p>Add up the retrieved counts</p>"},{"location":"Computer_Science/DB/Chapter15/","title":"Chapter 15 | Query Processing","text":"<p> \u7ea6 5489 \u4e2a\u5b57  6 \u884c\u4ee3\u7801  31 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 28 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter15/#basic-steps-in-query-processing","title":"Basic Steps in Query Processing","text":"<p>The steps involved in processing a query appear in Figure 15.1. The basic steps are:</p> <ol> <li>Parsing and translation. \u8bed\u6cd5\u5206\u6790\u4e0e\u7ffb\u8bd1</li> </ol> <p>translate the query into its internal form. This is then translated into relational algebra.</p> <p>Parser checks syntax, verifies relations</p> <ol> <li>Optimization. \u4f18\u5316</li> </ol> <p>Amongst all equivalent evaluation plans choose the one with lowest cost.</p> <ol> <li>Evaluation. \u6267\u884c</li> </ol> <p>The query-execution engine takes a query-evaluation plan, executes that plan, and returns the answers to the query.</p> <p></p> <p>An evaluation plan defines exactly what algorithm is used for each operation, and how the execution of the operations is coordinated.</p> <p>\u4e3a\u4e86\u5168\u9762\u8bf4\u660e\u5982\u4f55\u6267\u884c\u4e00\u4e2a\u67e5\u8be2\uff0c\u6211\u4eec\u4e0d\u4ec5\u8981\u63d0\u4f9b\u5173\u7cfb\u4ee3\u6570\u8868\u8fbe\u5f0f\uff0c\u8fd8\u8981\u5bf9\u8868\u8fbe\u5f0f\u52a0\u4e0a\u5e26\u6307\u4ee4\u7684\u6ce8\u91ca\u6765\u8bf4\u660e\u5982\u4f55\u6267\u884c\u6bcf\u79cd\u8fd0\u7b97\u3002</p> <p>\u8fd9\u4e9b\u6ce8\u91ca\u53ef\u4ee5\u8bf4\u660e\u4e3a\u4e00\u79cd\u5177\u4f53\u8fd0\u7b97\u6240\u91c7\u7528\u7684\u7b97\u6cd5\u6216\u8981\u4f7f\u7528\u7684\u4e00\u4e2a\u5177\u4f53\u7d22\u5f15\u6216\u591a\u4e2a\u7d22\u5f15\u3002\u5e26\u6709\"\u5982\u4f55\u6267\u884c\"\u6ce8\u91ca\u7684\u5173\u7cfb\u4ee3\u6570\u8fd0\u7b97\u79f0\u4e3a\u6267\u884c\u539f\u8bed(evaluation primitive)\u3002\u7528\u4e8e\u6267\u884c\u4e00\u4e2a\u67e5\u8be2\u7684\u539f\u8bed\u64cd\u4f5c\u5e8f\u5217\u79f0\u4e3a\u67e5\u8be2\u6267\u884c\u8ba1\u5212(query-execution plan\u6216 query-evaluation plan)\u3002</p> <p>\u67e5\u8be2\u6267\u884c\u5f15\u64ce(query-execution engine)\u63a5\u53d7\u4e00\u4e2a\u67e5\u8be2\u6267\u884c\u8ba1\u5212\uff0c\u6267\u884c\u8be5\u8ba1\u5212\u5e76\u628a\u7ed3\u679c\u8fd4\u56de\u7ed9\u67e5\u8be2\u3002</p> <p></p> sjl's explanation <ol> <li> <p>\u9009\u62e9\u8fd0\u7b97\u5230\u53f6\u5b50\u4e0a\u9762\uff0c\u65e9\u70b9\u6267\u884c</p> </li> <li> <p>hash join \u628a\u54c8\u5e0c\u503c\u76f8\u540c\u7684\u653e\u5728\u4e00\u8d77</p> </li> <li> <p>\u8fd9\u4e2a\u7b97\u5b50\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u8868\uff0c\u4e24\u4e2a\u4e34\u65f6\u8868\u8fde\u63a5\u518d\u5b58\u50a8... \u56e0\u4e3a\u8981\u628a\u4e2d\u95f4\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\uff0c\u5199\u56de\u53bb\u518d\u8bfb\u51fa\u6765\uff0c\u4f1a\u6bd4\u8f83\u4f4e\u6548</p> </li> <li> <p>\u53ef\u4ee5\u91c7\u7528\u6d41\u6c34\u7ebf\u7684\u601d\u60f3\uff0c\u56e0\u4e3a\u78c1\u76d8\u7684\u8bfb\u5199\u662f\u65f6\u95f4\u7684\u5927\u5934</p> </li> </ol>"},{"location":"Computer_Science/DB/Chapter15/#measures-of-query-cost","title":"Measures of Query Cost","text":"about \u805a\u96c6\u7d22\u5f15\u548c\u8f85\u52a9\u7d22\u5f15 <p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a <code>students</code> \u8868\uff0c\u5b58\u50a8\u5b66\u751f\u7684\u4fe1\u606f\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>|**\u5b66\u53f7\uff08sid\uff09**|**\u59d3\u540d\uff08name\uff09**|**\u5e74\u9f84\uff08age\uff09**|**\u73ed\u7ea7\uff08class\uff09**|\n|:------------:|:------------:|:-----------:|:-------------:|\n| 101          | \u5f20\u4e09         | 18          | 1\u73ed           |\n| 102          | \u674e\u56db         | 19          | 2\u73ed           |\n| 103          | \u738b\u4e94         | 20          | 1\u73ed           |\n| 104          | \u8d75\u516d         | 18          | 3\u73ed           |\n\n1. \u805a\u96c6\u7d22\u5f15\uff08Clustered Index\uff09\n\n\u5728 MySQL InnoDB \u4e2d\uff0c**\u4e3b\u952e\u9ed8\u8ba4\u662f\u805a\u96c6\u7d22\u5f15**\u3002\u5047\u8bbe\u6211\u4eec\u4ee5 `\u5b66\u53f7\uff08sid\uff09` \u4f5c\u4e3a\u4e3b\u952e\uff0c\u90a3\u4e48\u6570\u636e\u884c\u5728\u78c1\u76d8\u4e0a**\u6309 `\u5b66\u53f7` \u987a\u5e8f\u5b58\u50a8**\u3002\n\n- **B+\u6811\u7ed3\u6784**\uff1a\n    - **\u53f6\u5b50\u8282\u70b9**\uff1a\u5b58\u50a8**\u5b8c\u6574\u7684\u6570\u636e\u884c**\uff08`sid, name, age, class`\uff09\u3002\n    - **\u975e\u53f6\u5b50\u8282\u70b9**\uff1a\u5b58\u50a8\u952e\u503c\uff08`sid`\uff09\u548c\u6307\u5411\u4e0b\u4e00\u5c42\u7684\u6307\u9488\u3002\n\n2. \u8f85\u52a9\u7d22\u5f15\uff08Secondary Index\uff09\n\n\u5047\u8bbe\u6211\u4eec\u5728 `\u59d3\u540d\uff08name\uff09` \u5b57\u6bb5\u4e0a\u521b\u5efa\u4e00\u4e2a\u8f85\u52a9\u7d22\u5f15\uff0c\u8f85\u52a9\u7d22\u5f15\u7684 B+\u6811**\u72ec\u7acb\u4e8e\u6570\u636e\u5b58\u50a8**\uff0c\u53f6\u5b50\u8282\u70b9\u4e0d\u5b58\u5b8c\u6574\u6570\u636e\uff0c\u800c\u662f\u5b58**\u4e3b\u952e\u503c\uff08sid\uff09**\u3002\n\n- **B+\u6811\u7ed3\u6784**\uff1a\n    - **\u53f6\u5b50\u8282\u70b9**\uff1a\u5b58\u50a8 `name` \u548c\u5bf9\u5e94\u7684 `sid`\uff08\u5982 `('\u5f20\u4e09', 101)`\uff09\u3002\n    - **\u975e\u53f6\u5b50\u8282\u70b9**\uff1a\u5b58\u50a8 `name` \u548c\u6307\u5411\u4e0b\u4e00\u5c42\u7684\u6307\u9488\u3002\n\n**\u5173\u952e\u533a\u522b\u5bf9\u6bd4**\n\n| **\u67e5\u8be2\u573a\u666f**| **\u805a\u96c6\u7d22\u5f15\uff08sid\uff09**| **\u8f85\u52a9\u7d22\u5f15\uff08name\uff09**|\n|:------:|:-----------:|:--------:|\n| **\u67e5\u8be2 `WHERE sid=102`**| \u76f4\u63a5\u5b9a\u4f4d\u6570\u636e\u884c\uff0c**\u65e0\u9700\u56de\u8868**\uff0c\u901f\u5ea6\u5feb\u3002| \u4e0d\u9002\u7528\uff08\u9664\u975e\u8986\u76d6\u7d22\u5f15\uff09\u3002|\n| **\u67e5\u8be2 `WHERE name='\u674e\u56db'`** | \u9700\u5168\u8868\u626b\u63cf\uff08\u9664\u975e\u4f18\u5316\u5668\u9009\u62e9\u7d22\u5f15\uff09\u3002| \u5148\u67e5 `name` \u7d22\u5f15\u5f97 `sid`\uff0c\u518d\u56de\u8868\uff0c**\u591a\u4e00\u6b65**\u3002 |\n| **\u63d2\u5165\u6570\u636e**| \u6570\u636e\u6309 `sid` \u6392\u5e8f\u63d2\u5165\uff0c\u53ef\u80fd\u5f15\u8d77\u9875\u5206\u88c2\u3002| \u53ea\u9700\u66f4\u65b0 `name` \u7d22\u5f15\u6811\uff0c\u4e0d\u5f71\u54cd\u6570\u636e\u7269\u7406\u987a\u5e8f\u3002  |\n</code></pre> <p>Cost is generally measured as total elapsed time for answering query</p> <p>Typically disk access is the predominant cost, and is also relatively easy to estimate.</p> <p>Measured by taking into account</p> <ul> <li>Number of seeks</li> <li>Number of blocks read</li> <li>Number of blocks written</li> </ul> <p>Info</p> <p>Cost to write a block is greater than cost to read a block.</p> <p>data is read back after being written to ensure that the write was successful</p> <p>For simplicity we just use the number of block transfers from disk and the number of seeks as the cost measures</p> <ul> <li>\\(t_T\\) \u2014\u2014time to transfer one block</li> <li>\\(t_S\\) \u2014\u2014time for one seek</li> <li>Cost for b block transfers plus S seeks is \\(b \\cdot t_T + S \\cdot t_S\\)</li> </ul> <p>Note</p> <p>\\(t_S\\) and \\(t_T\\) depend on where data is stored; with 4 KB blocks:</p> <p>High end magnetic disk: \\(t_S = 4\\) msec, \\(t_T = 0.1\\) msec, \\(t_S / t_T \\approx 40\\)</p> <p>SSD: \\(t_S\\) = 20-90 microsec and \\(t_T\\) = 2-10 microsec for 4KB, \\(t_S / t_T \\approx 10\\)</p> <p>We ignore CPU costs for simplicity, while real systems do take CPU cost into account.</p> <p>We ignore cost to writing output to disk in our cost formulae.</p> <p>Several algorithms can reduce disk IO by using extra buffer space </p> <p>Amount of real memory available to buffer depends on other concurrent queries and OS processes, known only during execution. We often use worst case estimates, assuming only the minimum amount of memory needed for the operation is available.</p> <p>Required data may be buffer resident already, avoiding disk I/O. But hard to take into account for cost estimation.</p>"},{"location":"Computer_Science/DB/Chapter15/#selection-operation","title":"Selection Operation","text":""},{"location":"Computer_Science/DB/Chapter15/#file-scan-algorithm-a1-linear-search","title":"File scan / Algorithm A1 (linear search).","text":"<p>Scan each file block and test all records to see whether they satisfy the selection condition.</p> <p>worst cost = \\(b_r \\times t_T + t_S\\)</p> <ul> <li>\\(b_r\\) denotes number of blocks containing records from relation r</li> </ul> <p>If selection is on a key attribute, can stop on finding record</p> <p>average cost = \\((\\frac{b_r}{2}) \\times t_T + t_S\\)</p> <p>Linear search can be applied regardless of</p> <ul> <li>selection condition or</li> <li>ordering of records in the file, or</li> <li>availability of indices</li> </ul> <p>Note: binary search generally does not make sense since data is not stored consecutively, except when there is an index available, and binary search requires more seeks than index search.</p>"},{"location":"Computer_Science/DB/Chapter15/#index-scan-a2-primary-b-tree-index-clustering-b-tree-index-equality-on-key","title":"Index scan / A2 (primary B+-tree index / clustering B+-tree index, equality on key)","text":"<p>Index scan \u2013 search algorithms that use an index selection condition must be on search-key of index.</p> <p>Retrieve a single record that satisfies the corresponding equality condition</p> <p>Cost = \\((h_i + 1) \\times (t_S + t_T)\\)</p> <p></p>"},{"location":"Computer_Science/DB/Chapter15/#a3-primary-b-tree-index-clustering-b-tree-index-equality-on-nonkey","title":"A3 (primary B+-tree index/ clustering B+-tree index, equality on nonkey)","text":"<p>Retrieve multiple records.</p> <p>Records will be on consecutive blocks.</p> <p>Let b = number of blocks containing matching records</p> <p>Cost = \\(h_i \\times (t_T + t_S) + t_S + t_T \\times b\\)</p> <p></p>"},{"location":"Computer_Science/DB/Chapter15/#a4-secondary-b-tree-index-equality-on-key","title":"A4 (secondary B+-tree index , equality on key)","text":"<p>Cost = \\((h_i + 1) \\times (t_S + t_T)\\)</p> <p></p>"},{"location":"Computer_Science/DB/Chapter15/#a4-secondary-b-index-on-nonkey-equality","title":"A4' (secondary B+-index on nonkey, equality)","text":"<p>Each of n matching records may be on a different block</p> <p>n pointers may be stored in m blocks</p> <p>Cost = \\((h_i + m + n) \\times (t_S + t_T)\\)</p> <p>Can be very expensive!</p> <p></p> <p>Can implement selections of the form \\(\\sigma_{A \\le V}(r)\\) or \\(\\sigma_{A \\ge V}(r)\\) by using</p> <p>a linear file scan or binary search, or by using indices in the following ways:</p>"},{"location":"Computer_Science/DB/Chapter15/#a5-primary-b-index-clustering-b-index-index-comparison","title":"A5 (primary B+-index / clustering B+-index index, comparison)","text":"<p>(Relation is sorted on A)</p> <ul> <li>For \\(\\sigma_{A \\ge V}(r)\\) use index to find first tuple \\(\\ge V\\) and scan relation sequentially from there.</li> <li>Cost is identical to the case of A3 \\(\\rightarrow \\ Cost \\ = \\ h_i \\times (t_T + t_S) + t_S + t_T \\times b\\)</li> <li>For \\(\\sigma_{A \\le V}(r)\\) just scan relation sequentially till first tuple &gt; V; do not use index</li> </ul> <p></p>"},{"location":"Computer_Science/DB/Chapter15/#a6-secondary-b-tree-index-comparison","title":"A6 (secondary B+-tree index, comparison)","text":"<ul> <li>For \\(\\sigma_{A \\ge V}(r)\\) use index to find first ndex entry \\(\\ge V\\) and scan index sequentially from there, to find pointers to records.</li> <li>For \\(\\sigma_{A \\le V}(r)\\) just scan eaf pages of index finding pointers to records, till first entry &gt; V.</li> <li>In either case, retrieve records that are pointed to<ul> <li>requires an I/O for each record</li> <li>Linear file scan may be cheaper</li> </ul> </li> </ul> <p>Conjunction: \\(\\sigma_{\\theta_1 \\land \\theta_2 \\land \\ldots \\land \\theta_n}(r)\\)</p>"},{"location":"Computer_Science/DB/Chapter15/#a7-conjunctive-selection-using-one-index","title":"A7 (conjunctive selection using one index)","text":"<p>Select a combination of \\(\\theta_i\\) and algorithms A1 through A6 that results in the least cost for \\(\\sigma_{\\theta_i}(r)\\)</p> <p>Test other conditions on tuple after fetching it into memory buffer.</p>"},{"location":"Computer_Science/DB/Chapter15/#a8-conjunctive-selection-using-composite-index","title":"A8 (conjunctive selection using composite index)","text":"<p>Use appropriate composite (multiple-key) index if available</p>"},{"location":"Computer_Science/DB/Chapter15/#a9-conjunctive-selection-by-intersection-of-identifiers","title":"A9 (conjunctive selection by intersection of identifiers)","text":"<p>Requires indices with record pointers.</p> <p>Use corresponding index for each condition, and take intersection  of all the obtained sets of record pointers. </p> <p>Then fetch records from file.</p> <p>If some conditions do not have appropriate indices, apply test in  memory.</p> <p>Disjunction: \\(\\sigma_{\\theta_1 \\lor \\theta_2 \\lor \\ldots \\lor \\theta_n}(r)\\)</p>"},{"location":"Computer_Science/DB/Chapter15/#a10-disjunctive-selection-by-union-of-identifiers","title":"A10 (disjunctive selection by union of identifiers)","text":"<p>Applicable if all conditions have available indices. Otherwise use linear scan.</p> <p>Use corresponding index for each condition, and take union of all the obtained sets of record pointers.</p> <p>Then fetch records from file</p> <p>Negation: \\(\\sigma_{\\neg \\theta}(r)\\)</p> <p>Use linear scan on file</p> <p>If very few records satisfy \\(\\neg \\theta\\) , and an index is applicable to \\(\\theta\\) , find satisfying records using index and fetch from file</p>"},{"location":"Computer_Science/DB/Chapter15/#sorting","title":"Sorting","text":"<p>We may build an index on the relation, and then use the index to read the relation in sorted order. May lead to one disk block access for each tuple.</p> <p>For relations that fit in memory, techniques like quicksort can be used. </p> <p>For relations that don\u2019t fit in memory, external sort-merge is a good choice.</p>"},{"location":"Computer_Science/DB/Chapter15/#external-sort-merge","title":"External Sort-Merge","text":"<p>Let M denote memory size (in pages).</p> <ol> <li>Create sorted runs (\u5f52\u5e76\u6bb5).</li> </ol> <p>Let i be 0 initially.</p> <p>Repeatedly do the following till the end of the relation:</p> <p>(a) Read M blocks of relation into memory (b) Sort the in-memory blocks (c) Write sorted data to run \\(R_i\\) ; increment i.</p> <p>Let the final value of i be N</p> <ol> <li>Merge the runs (N-way merge).</li> </ol> <p>If N &lt; M, single merge pass is required (\u5982\u679c\u5f52\u5e76\u6bb5\u5c11\u4e8e\u53ef\u7528\u5185\u5b58\u9875)</p> <p>a. Use N blocks of memory to buffer input runs, and 1 block to buffer output. Read the first block of each run into its buffer page b. repeat     (1) Select the first record (in sort order) among all buffer pages     (2) Write the record to the output buffer. If the output buffer is full write it to disk.     (3) Delete the record from its input buffer page. If the buffer page becomes empty then read the next block (if any) of the run into the buffer. c. until all input buffer pages are empty:</p> <p></p> <p>If N \\(\\ge\\) M, several merge passes are required.</p> <p>In each pass, contiguous groups of M - 1 runs are merged.</p> <p>A pass reduces the number of runs by a factor of M -1, and creates runs longer by the same factor.</p> <ul> <li>E.g. If M=11, and there are 90 runs, one pass reduces the number of runs to 9, each 10 times the size of the initial runs</li> </ul> <p>Repeated passes are performed till all runs have been merged into one.</p>"},{"location":"Computer_Science/DB/Chapter15/#cost-analysis-simple-version","title":"Cost analysis: (simple version)","text":"<p>Total number of runs : \\(\\lceil b_r / M \\rceil\\)</p> <p>Total number of merge passes required: \\(\\lceil \\log_{M-1} (b_r / M) \\rceil\\)</p> <p>Block transfers for initial run creation as well as in each pass is \\(2b_r\\)</p> <p>For final pass, we don\u2019t count write cost. We ignore final write cost for all operations since the output of an operation may be sent to the parent operation without being written to disk.</p> <p>Thus total number of block transfers for external sorting:</p> \\[2b_r \\lceil \\log_{M-1} (b_r / M) \\rceil + b_r = b_r(2 \\lceil \\log_{M-1} (b_r / M) \\rceil + 1)\\]"},{"location":"Computer_Science/DB/Chapter15/#cost-of-seeks-simple-version","title":"Cost of seeks: (simple version)","text":"<p>During run generation: one seek to read each run and one seek to write each run</p> <ul> <li>\\(2 \\lceil b_r / M \\rceil \\rightarrow 2 \\times [\\text{the number of runs}]\\)</li> </ul> <p>During the merge phase</p> <p>Need 2 \\(b_r\\) seeks for each merge pass, except the final one which does not require a write</p> <p>There are \\(\\lceil \\log_{M-1} (b_r / M) \\rceil\\) merge passes</p> <p>Total number of seeks:</p> \\[2 \\lceil b_r / M \\rceil + b_r(2 \\lceil \\log_{M-1} (b_r / M) \\rceil - 1)\\] prove <p></p>"},{"location":"Computer_Science/DB/Chapter15/#cost-analysis-advanced-version","title":"Cost analysis: (advanced version)","text":"<p>1 block per run leads to too many seeks during merge</p> <p>Instead use \\(b_b\\) buffer blocks per run \\(\\rightarrow\\) read/write \\(b_b\\) blocks at a time</p> <p>Can merge \\(\\lfloor M /b_b \\rfloor - 1\\) runs in one pass</p> <p>Total number of merge passes required:</p> \\[\\lceil \\log_{\\lfloor M / b_b \\rfloor - 1} (b_r / M) \\rceil\\] <p>Block transfers for initial run creation as well as in each pass is 2 \\(b_r\\)</p> <p>For final pass, we don\u2019t count write cost, we ignore final write cost for all operations since the output of an operation may be sent to the parent operation without being written to disk.</p> <p>Thus total number of block transfers for external sorting:</p> \\[b_r (2 \\lceil \\log_{\\lfloor M / b_b \\rfloor - 1} (b_r / M) \\rceil + 1)\\] <p></p>"},{"location":"Computer_Science/DB/Chapter15/#cost-of-seeks-advanced-version","title":"Cost of seeks: (advanced version)","text":"<p>During run generation: one seek to read each run and one seek to write each run</p> <ul> <li>2 \\(\\lceil b_r / M \\rceil \\rightarrow 2 \\times [\\text{the number of runs}]\\)</li> </ul> <p>During the merge phase</p> <p>Need 2 \\(\\lceil b_r / b_b \\rceil\\) seeks for each merge pass, except the final one which does not require a write</p> <p>There are \\(\\lceil \\log_{\\lfloor M / b_b \\rfloor - 1} (b_r / M) \\rceil\\) merge passes</p> <p>Total number of seeks:</p> \\[2 \\lceil b_r / M \\rceil + \\lceil b_r / b_b \\rceil (2 \\lceil \\log_{\\lfloor M / b_b \\rfloor - 1} (b_r / M) \\rceil - 1)\\]"},{"location":"Computer_Science/DB/Chapter15/#join-operation","title":"Join Operation","text":""},{"location":"Computer_Science/DB/Chapter15/#nested-loop-join","title":"Nested-Loop Join","text":"<p>In the worst case, if there is enough memory only to hold one block of each relation, the estimated cost is</p> <p>\\(n_r \\times b_s + b_r\\) block transfers, plus \\(n_r + b_r\\) seeks</p> <p>If the smaller relation fits entirely in memory, use that as the inner relation.</p> <p>Reduces cost to \\(b_r + b_s\\) block transfers and 2 seeks</p>"},{"location":"Computer_Science/DB/Chapter15/#block-nested-loop-join","title":"Block Nested-Loop Join","text":"<p>Variant of nested-loop join in which every block of inner relation is paired with every block of outer relation.</p> <p></p> <p>for each block \\(B_r\\) of r do begin     for each block \\(B_s\\) of s do begin         for each tuple \\(t_r\\) in \\(B_r\\) do begin             for each tuple \\(t_s\\) in \\(B_s\\) do begin                 Check if (\\(t_r\\) , \\(t_s\\)) satisfy the join condition                  if they do, add \\(t_r \\times t_s\\) to the result.             end         end     end end</p> <p>Worst case estimate: \\(b_r \\times b_s + b_r\\) block transfers + \\(2 \\times b_r\\) seeks</p> <p>Each block in the inner relation s is read once for each block in the outer relation</p> <p>Best case: \\(b_r + b_s\\) block transfers + 2 seeks</p> <p>Improvements to block nested loop algorithms:</p> <p>Use M-2 disk blocks as blocking unit for outer relations, where M = memory size in blocks; use remaining two blocks to buffer inner relation and output</p> <p>Cost = \\(\\lceil b_r / (M - 2) \\rceil \\times b_s + b_r\\) block transfers + \\(2 \\lceil b_r / (M - 2) \\rceil\\) seeks</p> <p>If r fits in memory ( \\(b_r \\le\\) M-2)</p> <p>Cost = \\(b_s + b_r\\) block transfers + 2 seeks</p> <p>If equi-join attribute forms a key on the inner relation, stop inner loop on first match</p> <p>Scan inner loop forward and backward alternately, to make use of the blocks remaining in buffer (with LRU replacement)</p> <p></p> improving and proving <p></p>"},{"location":"Computer_Science/DB/Chapter15/#indexed-nested-loop-join","title":"Indexed Nested-Loop Join","text":"<p>Index lookups can replace file scans if</p> <ul> <li>join is an equi-join or natural join and</li> <li>an index is available on the inner relation's join attribute(Can construct an index just to compute a join.)</li> </ul> <p>For each tuple \\(t_r\\) in the outer relation r, use the index to look up tuples in s that satisfy the join condition with tuple \\(t_r\\)</p> <p>Worst case: buffer has space for only one page of r, and, for each tuple in r, we perform an index lookup on s.</p> <p>Cost of the join: \\(b_r(t_T + t_S) + n_r \\times c\\)</p> prove <p></p> <p>Where c is the cost of traversing index and fetching all matching s tuples for one tuple or r</p> <p>c can be estimated as cost of a single selection on s using the join condition.</p> <p>If indices are available on join attributes of both r and s, use the relation with fewer tuples as the outer relation.</p>"},{"location":"Computer_Science/DB/Chapter15/#merge-join","title":"Merge-Join","text":"<ol> <li>Sort both relations on their join attribute (if not already sorted on the join attributes).</li> <li>Merge the sorted relations to join them</li> </ol> <ul> <li>Join step is similar to the merge stage of the sort-merge algorithm.</li> <li>Main difference is handling of duplicate values in join attribute \u2014 every pair with same value on join attribute must be matched</li> <li>Detailed algorithm in book</li> </ul> <p>Can be used only for equi-joins and natural joins</p> <p>Each block needs to be read only once (assuming all tuples for any given value of the join attributes fit in memory)</p> <p>Thus the cost of merge join is:</p> <p>\\(b_r + b_s\\) block transfers + \\(\\lceil b_r / b_b \\rceil + \\lceil b_s / b_b \\rceil\\) seeks + the cost of sorting if relations are unsorted.</p> <p></p> what about cost? <p></p> <p>If the buffer memory size is M pages, in order to minimize the cost of merge join, how to assign M blocks to r and s respectively?</p> <p>The estimated cost is</p> <p>\\(b_r + b_s\\) block transfers + \\(\\lceil b_r / x_r \\rceil + \\lceil b_s / x_s \\rceil\\) seeks</p> <p>with (\\(x_r + x_s = M\\))</p> <p>\\(x_r = \\sqrt{b_r} \\times M / (\\sqrt{b_r} + \\sqrt{b_s})\\) and \\(x_s = \\sqrt{b_s} \\times M / (\\sqrt{b_r} + \\sqrt{b_s})\\)</p> <p></p> <p>hybrid merge-join: If one relation is sorted, and the other has a secondary B+-tree index on the join attribute</p> <p>Merge the sorted relation with the leaf entries of the B+-tree</p> <p>Sort the result on the addresses of the unsorted relation's tuples</p> <p>Scan the unsorted relation in physical address order and merge with previous result, to replace addresses by the actual tuples</p> <p>Sequential scan more efficient than random lookup</p> <p>\u5f53\u4e24\u4e2a\u5173\u7cfb\u5728\u8fde\u63a5\u5c5e\u6027\u4e0a\u90fd\u5b58\u5728\u8f85\u52a9\u7d22\u5f15\u65f6\uff0c\u53ef\u4ee5\u5bf9\u672a\u6392\u5e8f\u7684\u5143\u7ec4\u6267\u884c\u5f52\u5e76\u2014\u2014\u8fde\u63a5\u8fd0\u7b97\u7684\u4e00\u4e2a\u53d8\u79cd\u3002\u8be5\u7b97\u6cd5\u901a\u8fc7\u7d22\u5f15\u6765\u626b\u63cf\u8bb0\u5f55\uff0c\u4ece\u800c\u6309\u987a\u5e8f\u68c0\u7d22\u8bb0\u5f55\u3002\u4f46\u8fd9\u79cd\u53d8\u79cd\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u7f3a\u9677\uff0c\u56e0\u4e3a\u8bb0\u5f55\u53ef\u80fd\u5206\u6563\u5728\u6587\u4ef6\u7684\u591a\u4e2a\u5757\u4e2d\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5143\u7ec4\u7684\u5b58\u53d6\u90fd\u53ef\u80fd\u5bfc\u81f4\u4e00\u4e2a\u78c1\u76d8\u5757\u7684\u8bbf\u95ee\uff0c\u8fd9\u6837\u7684\u4ee3\u4ef7\u662f\u5f88\u5927\u7684\u3002</p> <p>\u4e3a\u907f\u514d\u8fd9\u79cd\u4ee3\u4ef7\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u6df7\u5408\u7684\u5f52\u5e76\u2014\u2014\u8fde\u63a5\u6280\u672f\uff0c\u8be5\u6280\u672f\u628a\u7d22\u5f15\u4e0e\u5f52\u5e76\u2014\u2014\u8fde\u63a5\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u5173\u7cfb\u5df2\u6392\u5e8f\uff0c\u53e6\u4e00\u4e2a\u672a\u6392\u5e8f\uff0c\u4f46\u5728\u8fde\u63a5\u5c5e\u6027\u4e0a\u6709 B+ \u6811\u8f85\u52a9\u7d22\u5f15\u3002\u6df7\u5408\u5f52\u5e76\u2014\u2014\u8fde\u63a5\u7b97\u6cd5(hybrid merge-join algorithm)\u628a\u5df2\u6392\u5e8f\u5173\u7cfb\u4e0e B+ \u6811\u8f85\u52a9\u7d22\u5f15\u7684\u53f6\u5b50\u9879\u8fdb\u884c\u5f52\u5e76\u3002\u6240\u5f97\u5230\u7684\u7ed3\u679c\u6587\u4ef6\u5305\u542b\u5df2\u6392\u5e8f\u5173\u7cfb\u7684\u5143\u7ec4\u548c\u672a\u6392\u5e8f\u5173\u7cfb\u7684\u5143\u7ec4\u5730\u5740\u3002\u7136\u540e\uff0c\u5c06\u8be5\u7ed3\u679c\u6587\u4ef6\u6309\u672a\u6392\u5e8f\u5173\u7cfb\u7684\u5143\u7ec4\u5730\u5740\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u800c\u80fd\u591f\u5bf9\u76f8\u5173\u5143\u7ec4\u6309\u7167\u7269\u7406\u5b58\u50a8\u987a\u5e8f\u8fdb\u884c\u9ad8\u6548\u7684\u68c0\u7d22\uff0c\u4ee5\u6700\u7ec8\u5b8c\u6210\u8fde\u63a5\u3002\u5bf9\u6b64\u6280\u672f\u8fdb\u884c\u6269\u5c55\u4ee5\u5904\u7406\u4e24\u4e2a\u672a\u6392\u5e8f\u5173\u7cfb\u7684\u5de5\u4f5c\u7559\u7ed9\u8bfb\u8005\u4f5c\u4e3a\u7ec3\u4e60\u3002</p> \u4e3e\u4f8b\u8bf4\u660e\u6df7\u5408\u5f52\u5e76\u2014\u2014\u8fde\u63a5\u7b97\u6cd5 &amp; \u5904\u7406\u4e24\u4e2a\u672a\u6392\u5e8f\u5173\u7cfb\u7684\u5de5\u4f5c <p>\u5047\u8bbe\u6709\u4e24\u4e2a\u8868:</p> <ul> <li><code>students</code>\uff08\u5b66\u751f\u8868\uff09\uff1a\u672a\u6309\u4efb\u4f55\u987a\u5e8f\u5b58\u50a8\uff0c\u4f46\u5728 <code>class_id</code> \u4e0a\u6709 B+\u6811\u8f85\u52a9\u7d22\u5f15\u3002</li> <li><code>classes</code>\uff08\u73ed\u7ea7\u8868\uff09\uff1a\u5df2\u6309 <code>class_id</code> \u6392\u5e8f\uff08\u6bd4\u5982\u6309\u4e3b\u952e\u805a\u96c6\u7d22\u5f15\u5b58\u50a8\uff09\u3002</li> </ul> <p>\u73b0\u5728\u9700\u8981\u6267\u884c\u5982\u4e0b\u8fde\u63a5\u67e5\u8be2:</p> <pre><code>SELECT * FROM students JOIN classes ON students.class_id = classes.class_id;\n</code></pre> <p>\u6df7\u5408\u5f52\u5e76-\u8fde\u63a5\u6b65\u9aa4\uff08\u4e00\u8868\u5df2\u6392\u5e8f\uff0c\u4e00\u8868\u672a\u6392\u5e8f\uff09</p> <p>1. \u5df2\u6392\u5e8f\u8868\uff08classes\uff09\u4e0e\u672a\u6392\u5e8f\u8868\u7684\u7d22\u5f15\u53f6\u5b50\u9879\u5f52\u5e76</p> <ul> <li>classes\u8868\uff1a\u5df2\u6309 <code>class_id</code> \u6392\u5e8f\uff08\u5047\u8bbe\u5b58\u50a8\u987a\u5e8f\u4e3a <code>[1\u73ed, 2\u73ed, 3\u73ed]</code>\uff09\u3002</li> <li>students\u8868\u7684\u8f85\u52a9\u7d22\u5f15\uff1aB+\u6811\u7d22\u5f15\u7684\u53f6\u5b50\u8282\u70b9\u6309 <code>class_id</code> \u6392\u5e8f\uff0c\u5b58\u50a8\u7684\u662f <code>(class_id, \u5b66\u751f\u8bb0\u5f55\u7684\u7269\u7406\u5730\u5740)</code>\uff0c\u4f8b\u5982\uff1a</li> </ul> <pre><code>(1\u73ed, addr1) \u2192 (1\u73ed, addr3) \u2192 (2\u73ed, addr2) \u2192 (3\u73ed, addr4)\n</code></pre> <p>\u5f52\u5e76\u8fc7\u7a0b\uff1a 1. \u540c\u65f6\u626b\u63cf\u5df2\u6392\u5e8f\u7684 <code>classes</code> \u8868\u548c <code>students</code> \u7684\u8f85\u52a9\u7d22\u5f15\u53f6\u5b50\u8282\u70b9\uff08\u4e24\u8005\u5747\u6309 <code>class_id</code> \u6709\u5e8f\uff09\u3002 2. \u5bf9\u5339\u914d\u7684 <code>class_id</code>\uff0c\u751f\u6210\u4e2d\u95f4\u7ed3\u679c\uff1a<code>(classes\u8868\u7684\u73ed\u7ea7\u8bb0\u5f55, students\u8868\u8bb0\u5f55\u7684\u7269\u7406\u5730\u5740)</code> </p> <pre><code>(1\u73ed\u6570\u636e, addr1), (1\u73ed\u6570\u636e, addr3), (2\u73ed\u6570\u636e, addr2), (3\u73ed\u6570\u636e, addr4)\n</code></pre> <p>2. \u6309\u7269\u7406\u5730\u5740\u6392\u5e8f\u4e2d\u95f4\u7ed3\u679c</p> <p>\u5c06\u4e2d\u95f4\u7ed3\u679c\u6309 <code>students</code> \u8868\u8bb0\u5f55\u7684\u7269\u7406\u5730\u5740\uff08\u5982 <code>addr1, addr2, addr3, addr4</code>\uff09\u6392\u5e8f\uff0c\u76ee\u7684\u662f\u8ba9\u540e\u7eed\u5bf9 <code>students</code> \u8868\u7684\u8bfb\u53d6\u6309\u7269\u7406\u5b58\u50a8\u987a\u5e8f\u8fdb\u884c\uff08\u51cf\u5c11\u78c1\u76d8\u968f\u673aI/O\uff09\u3002</p> <p>3. \u6309\u7269\u7406\u987a\u5e8f\u8bfb\u53d6students\u8868\u5e76\u5b8c\u6210\u8fde\u63a5</p> <p>\u6309\u6392\u5e8f\u540e\u7684\u7269\u7406\u5730\u5740\u987a\u5e8f\uff0c\u9ad8\u6548\uff08\u8fde\u7eed\u8bfb\u53d6\uff09\u5730\u4ece <code>students</code> \u8868\u4e2d\u83b7\u53d6\u5b8c\u6574\u8bb0\u5f55\uff0c\u4e0e <code>classes</code> \u8868\u7684\u6570\u636e\u7ec4\u5408\u6210\u6700\u7ec8\u7ed3\u679c\u3002</p> <p>\u6269\u5c55\u5230\u4e24\u4e2a\u672a\u6392\u5e8f\u7684\u5173\u7cfb \u5982\u679c\u4e24\u4e2a\u8868\u5747\u672a\u6392\u5e8f\uff0c\u4f46\u5404\u81ea\u5728\u8fde\u63a5\u5c5e\u6027\u4e0a\u6709\u8f85\u52a9\u7d22\u5f15\uff0c\u53ef\u4ee5\u6309\u4ee5\u4e0b\u65b9\u5f0f\u5904\u7406\uff1a</p> <p>1. \u5229\u7528\u4e24\u4e2a\u8868\u7684\u8f85\u52a9\u7d22\u5f15\u53f6\u5b50\u9879\u5f52\u5e76</p> <ul> <li>\u5bf9 <code>students</code> \u548c <code>classes</code> \u8868\u7684 <code>class_id</code> \u8f85\u52a9\u7d22\u5f15\u53f6\u5b50\u8282\u70b9\uff08\u5747\u5df2\u6309 <code>class_id</code> \u6392\u5e8f\uff09\u6267\u884c\u5f52\u5e76\u3002</li> <li>\u751f\u6210\u4e2d\u95f4\u7ed3\u679c: <code>(students\u8868\u8bb0\u5f55\u7684\u7269\u7406\u5730\u5740, classes\u8868\u8bb0\u5f55\u7684\u7269\u7406\u5730\u5740)</code>,\u4f8b\u5982\uff1a</li> </ul> <pre><code>(addr1, addrA), (addr3, addrA), (addr2, addrB), (addr4, addrC)\n</code></pre> <p>2. \u6309\u7269\u7406\u5730\u5740\u6392\u5e8f</p> <ul> <li>\u65b9\u68481\uff1a\u5148\u6309 <code>students</code> \u8868\u5730\u5740\u6392\u5e8f\uff0c\u8bfb\u53d6 <code>students</code> \u8868\u6570\u636e\u540e\uff0c\u518d\u6309 <code>classes</code> \u8868\u5730\u5740\u6392\u5e8f\u8bfb\u53d6 <code>classes</code> \u8868\u6570\u636e\u3002</li> <li>\u65b9\u68482\uff08\u66f4\u9ad8\u6548\uff09\uff1a\u5c06\u4e2d\u95f4\u7ed3\u679c\u6309\u5176\u4e2d\u4e00\u4e2a\u8868\uff08\u5982students\uff09\u7684\u7269\u7406\u5730\u5740\u6392\u5e8f\uff0c\u7136\u540e\uff1a</li> </ul> <ol> <li>\u6309\u987a\u5e8f\u8bfb\u53d6 <code>students</code> \u8868\u8bb0\u5f55\uff0c\u7f13\u5b58\u5230\u5185\u5b58\u3002</li> <li>\u518d\u6309 <code>classes</code> \u8868\u5730\u5740\u6392\u5e8f\uff0c\u8bfb\u53d6 <code>classes</code> \u8868\u8bb0\u5f55\u5e76\u4e0e\u7f13\u5b58\u7684\u5b66\u751f\u8bb0\u5f55\u5339\u914d\u3002</li> </ol> <p>3. \u751f\u6210\u6700\u7ec8\u8fde\u63a5\u7ed3\u679c</p> <p>\u901a\u8fc7\u6392\u5e8f\u540e\u7684\u7269\u7406\u5730\u5740\u987a\u5e8f\uff0c\u6700\u5c0f\u5316\u78c1\u76d8\u968f\u673a\u8bbf\u95ee\uff0c\u5b8c\u6210\u8fde\u63a5\u3002</p>"},{"location":"Computer_Science/DB/Chapter15/#hash-join","title":"Hash-Join","text":"\u81ea\u7136\u8fde\u63a5 v.s. \u7b49\u503c\u8fde\u63a5 <p>\u5047\u8bbe\u6709\u4e24\u4e2a\u8868\uff1a</p> <ul> <li><code>students</code>\uff08\u5b66\u751f\u8868\uff09</li> </ul> sid name class_id 1 \u5f20\u4e09 101 2 \u674e\u56db 102 <ul> <li><code>classes</code>\uff08\u73ed\u7ea7\u8868\uff09</li> </ul> class_id class_name 101 1\u73ed 102 2\u73ed <p>1. \u81ea\u7136\u8fde\u63a5\uff08Natural Join\uff09</p> <pre><code>SELECT * FROM students NATURAL JOIN classes;\n</code></pre> <p>\u7ed3\u679c\uff08\u81ea\u52a8\u5339\u914d <code>class_id</code> \u5e76\u53bb\u91cd\uff09\uff1a  </p> sid name class_id class_name 1 \u5f20\u4e09 101 1\u73ed 2 \u674e\u56db 102 2\u73ed <p>2. \u7b49\u503c\u8fde\u63a5\uff08Equi-Join\uff09</p> <pre><code>SELECT * FROM students JOIN classes ON students.class_id = classes.class_id;\n</code></pre> <p>\u7ed3\u679c\uff08\u4fdd\u7559\u6240\u6709\u5217\uff09\uff1a</p> sid name students.class_id classes.class_id class_name 1 \u5f20\u4e09 101 101 1\u73ed 2 \u674e\u56db 102 102 2\u73ed <p>\u5173\u952e\u533a\u522b\u603b\u7ed3</p> <ol> <li> <p>\u9690\u5f0f vs \u663e\u5f0f - \u81ea\u7136\u8fde\u63a5\u9690\u5f0f\u5339\u914d\u540c\u540d\u5217\uff0c\u53ef\u80fd\u610f\u5916\u5173\u8054\u65e0\u5173\u5217\uff08\u5982\u4e24\u8868\u90fd\u6709 <code>created_at</code> \u5b57\u6bb5\uff09\u3002 - \u7b49\u503c\u8fde\u63a5\u663e\u5f0f\u6307\u5b9a\u6761\u4ef6\uff0c\u66f4\u5b89\u5168\u53ef\u63a7\u3002</p> </li> <li> <p>\u7ed3\u679c\u5217\u5904\u7406 - \u81ea\u7136\u8fde\u63a5\u81ea\u52a8\u53bb\u91cd\u540c\u540d\u5217\u3002 - \u7b49\u503c\u8fde\u63a5\u4fdd\u7559\u6240\u6709\u5217\uff0c\u9700\u624b\u52a8\u5904\u7406\u91cd\u590d\u5217\u540d\uff08\u5982 <code>SELECT students.*, classes.class_name</code>\uff09\u3002</p> </li> <li> <p>\u7075\u6d3b\u6027 - \u7b49\u503c\u8fde\u63a5\u53ef\u4ee5\u5173\u8054\u4e0d\u540c\u540d\u7684\u5217\uff08\u5982 <code>students.sid = scores.student_id</code>\uff09\uff0c\u81ea\u7136\u8fde\u63a5\u65e0\u6cd5\u505a\u5230\u3002</p> </li> </ol> <p>Applicable for equi-joins and natural joins.</p> <p>A hash function h is used to partition tuples of both relations with common JoinAttrs</p> <p>h maps JoinAttrs values to {0, 1, ..., n}</p> <p>\\(r_0, r_1, ..., r_{n}\\) denote partitions of r tuples</p> <ul> <li>Each tuple \\(t_r \\in r\\) is put in partition \\(r_i\\) where i = h(\\(t_r\\) [JoinAttrs])</li> </ul> <p>\\(s_0, s_1, ..., s_{n}\\) denote partitions of s tuples</p> <ul> <li>Each tuple \\(t_s \\in s\\) is put in partition \\(s_i\\) where i = h(\\(t_s\\) [JoinAttrs])</li> </ul> <p>\u800c\u6211\u4eec\u4e5f\u9700\u8981\u5728 \\(s_i\\) \u4e0a\u6784\u5efa\u7d22\u5f15\uff0c\u8fd9\u4e2a\u6563\u5217\u7d22\u5f15\u662f\u5728\u5185\u5b58\u4e2d\u6784\u9020\u7684\uff0c\u56e0\u6b64\u5e76\u4e0d\u9700\u8981\u8bbf\u95ee\u78c1\u76d8\u4ee5\u68c0\u7d22\u5143\u7ec4\u3002\u7528\u4e8e\u6784\u9020\u6b64\u6563\u5217\u7d22\u5f15\u7684\u6563\u5217\u51fd\u6570\u4e0e\u524d\u9762\u4f7f\u7528\u7684\u6563\u5217\u51fd\u6570 h \u5fc5\u987b\u662f\u4e0d\u540c\u7684\uff0c\u4f46\u4ecd\u7136\u53ea\u5e94\u7528\u4e8e\u8fde\u63a5\u5c5e\u6027\u4e0a\u3002\u5728\u7d22\u5f15\u5d4c\u5957\u2014\u2014\u5faa\u73af\u8fde\u63a5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u4f7f\u7528\u6b64\u7d22\u5f15\u6765\u68c0\u7d22\u4e0e\u63a2\u67e5\u7528\u8f93\u5165\u4e2d\u7684\u8bb0\u5f55\u76f8\u5339\u914d\u7684\u90a3\u4e9b\u8bb0\u5f55\u3002</p> <p></p> <p>Note: the value n and the hash function h is chosen such that each \\(s_i\\) should fit in memory.</p> \\[n \\ge \\lceil b_s / M \\rceil\\] <p>Note: In book, \\(r_i\\) is denoted as \\(H_{r_i}\\) and \\(s_i\\) is denoted as \\(H_{s_i}\\) and n is denoted as \\(n_h\\)</p> <p>r tuples in \\(r_i\\) need only to be compared with s tuples in \\(s_i\\)</p> <p>Need not be compared with s tuples in any other partition, since:</p> <ul> <li>an r tuple and an s tuple that satisfy the join condition will have the same value for the join attributes.</li> <li>If that value is hashed to some value i, the r tuple has to be in \\(r_i\\) and the s tuple in \\(s_i\\) .</li> </ul> <p>\u6563\u5217\u2014\u2014\u8fde\u63a5\u7b97\u6cd5\u80cc\u540e\u7684\u601d\u60f3\u662f\u8fd9\u6837\u7684:</p> <p>\u5047\u8bbe\u4e00\u4e2a r \u5143\u7ec4\u4e0e\u4e00\u4e2a s \u5143\u7ec4\u6ee1\u8db3\u8fde\u63a5\u6761\u4ef6\uff0c\u90a3\u4e48\u5b83\u4eec\u5bf9\u4e8e\u8fde\u63a5\u5c5e\u6027\u5c31\u4f1a\u53d6\u76f8\u540c\u7684\u503c\u3002\u82e5\u8be5\u503c\u88ab\u6563\u5217\u6210\u67d0\u4e2a\u503c i \uff0c\u5219 r \u5143\u7ec4\u5fc5\u5728 \\(r_i\\) \u4e2d\u4e14 s \u5143\u7ec4\u5fc5\u5728 \\(s_i\\) \u4e2d\u3002\u56e0\u6b64\uff0c \\(r_i\\) \u4e2d\u7684 r \u5143\u7ec4\u53ea\u9700\u4e0e \\(s_i\\) \u4e2d\u7684 s \u5143\u7ec4\u76f8\u6bd4\u8f83\uff0c \\(r_i\\) \u4e2d\u7684 r \u5143\u7ec4\u6ca1\u6709\u5fc5\u8981\u4e0e\u5176\u4ed6\u4efb\u4f55\u5206\u533a\u91cc\u7684 s \u5143\u7ec4\u76f8\u6bd4\u8f83\u3002</p>"},{"location":"Computer_Science/DB/Chapter15/#hash-join-algorithm","title":"Hash-Join Algorithm","text":"<p>The hash-join of r and s is computed as follows.</p> <ol> <li>Partition s using hashing function h. When partitioning a relation, one block of memory is reserved as the output buffer for each partition.</li> <li>Partition r similarly.</li> <li>For each i:</li> </ol> <p>(a) Load \\(s_i\\) into memory and build an in-memory hash index on it using the join attribute. This hash index uses a different hash function than the earlier one h. (b) Read the tuples in \\(r_i\\) from the disk one by one. For each  tuple \\(t_r\\) locate each matching tuple \\(t_s\\) in \\(s_i\\) using the inmemory hash index. Output the concatenation of their attributes.</p> <p>Relation s is called the build input</p> <p>Relation r is called the probe input</p> <p>\u5728\u5bf9\u5173\u7cfb\u8fdb\u884c\u5206\u533a\u540e\uff0c\u6563\u5217\u2014\u2014\u8fde\u63a5\u4ee3\u7801\u7684\u5176\u4f59\u90e8\u5206\u5728\u5404\u4e2a\u5206\u533a\u4e0a\u5bf9 i (i=0,1,...,\\(n_h\\)) \u6267\u884c\u5355\u72ec\u7684\u7d22\u5f15\u5d4c\u5957\u2014\u2014\u5faa\u73af\u8fde\u63a5\u3002\u4e3a\u6b64\uff0c\u7b97\u6cd5\u5148\u5728\u6bcf\u4e2a \\(s_i\\) \u4e0a\u6784\u9020(build)\u6563\u5217\u7d22\u5f15\uff0c\u7136\u540e\u7528 \\(r_i\\) \u7684\u5143\u7ec4\u8fdb\u884c\u63a2\u67e5(probe)(\u5373\u5728 \\(s_i\\) \u4e2d\u67e5\u627e)\u3002\u5173\u7cfb s \u5c31\u662f\u6784\u9020\u7528\u8f93\u5165(build input)\uff0c\u800c r \u662f\u63a2\u67e5\u7528\u8f93\u5165(probe input)\u3002</p> <p>The value n and the hash function h is chosen such that each build input relation partitions \\(s_i\\) should fit in memory.</p> <p>Typically n is chosen as \\(\\lceil b_s / M \\rceil \\times f\\) where f is a \"fudge factor(\u4fee\u6b63\u56e0\u5b50)\", typically around 1.2</p> <p>The probe input relation partitions \\(r_i\\) need not fit in memory</p> why need fudge factor <p>\u5fc5\u987b\u9009\u62e9\u8db3\u591f\u5927\u7684 \\(n_h\\) \u503c\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u4e2a i \uff0c\u5728\u5185\u5b58\u4e2d\u53ef\u4ee5\u5bb9\u7eb3\u6784\u9020\u5173\u7cfb\u7684 \\(s_i\\) \u5206\u533a\u4e2d\u7684\u5143\u7ec4\u4ee5\u53ca\u5206\u533a\u4e0a\u7684\u6563\u5217\u7d22\u5f15\u3002\u5185\u5b58\u4e2d\u53ef\u4ee5\u4e0d\u5fc5\u5bb9\u7eb3\u63a2\u67e5\u7528\u5173\u7cfb\u7684\u5206\u533a\u3002\u6700\u597d\u7528\u8f83\u5c0f\u7684\u8f93\u5165\u5173\u7cfb\u4f5c\u4e3a\u6784\u9020\u5173\u7cfb\u3002\u5982\u679c\u6784\u9020\u5173\u7cfb\u7684\u89c4\u6a21\u662f \\(b_s\\) \u4e2a\u5757\uff0c\u90a3\u4e48\u8981\u4f7f\u6bcf\u4e2a \\(n_h\\) \u5206\u533a\u7684\u89c4\u6a21\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e M \uff0c \\(n_h\\) \u5fc5\u987b\u81f3\u5c11\u662f \\(b_s / M\\)\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u6211\u4eec\u8fd8\u5fc5\u987b\u8003\u8651\u8be5\u5206\u533a\u4e0a\u6563\u5217\u7d22\u5f15\u5360\u7528\u7684\u989d\u5916\u7a7a\u95f4\uff0c\u56e0\u6b64 \\(n_h\\) \u5e94\u5f53\u76f8\u5e94\u5730\u53d6\u5f97\u66f4\u5927\u4e00\u70b9\u3002\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u5728\u5206\u6790\u4e2d\u6211\u4eec\u6709\u65f6\u5ffd\u7565\u4e86\u6563\u5217\u7d22\u5f15\u6240\u9700\u7684\u7a7a\u95f4\u3002</p>"},{"location":"Computer_Science/DB/Chapter15/#recursive-partitioning","title":"Recursive partitioning","text":"<p>Recursive partitioning required if number of partitions n is greater than number of pages M of memory.</p> <p>Instead of partitioning n ways, use M \u2013 1 partitions for s</p> <p>Further partition the M \u2013 1 partitions using a different hash function</p> <p>Use same partitioning method on r</p> <p>A relation does not need recursive partitioning if M &gt; \\(n_h\\) + 1, or equivalently M &gt; (\\(b_s\\) / M) + 1, which simplifies (approximately) to M &gt; \\(\\sqrt{b_s}\\)</p> <p>\u5982\u679c \\(n_h\\) \u7684\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u5185\u5b58\u5757\u6570\uff0c\u56e0\u4e3a\u6ca1\u6709\u8db3\u591f\u7684\u7f13\u51b2\u5757\uff0c\u5173\u7cfb\u7684\u5206\u533a\u5c31\u4e0d\u53ef\u80fd\u4e00\u8d9f\u5b8c\u6210\u3002\u8fd9\u65f6\uff0c\u5b8c\u6210\u5173\u7cfb\u7684\u5206\u533a\u9700\u8981\u91cd\u590d\u591a\u8d9f\u3002\u5728\u6bcf\u4e00\u8d9f\u4e2d\uff0c\u8f93\u5165\u80fd\u591f\u88ab\u5212\u5206\u7684\u6700\u591a\u5206\u533a\u6570\u4e0e\u53ef\u7528\u4e8e\u8f93\u51fa\u7684\u7f13\u51b2\u5757\u6570\u540c\u6837\u591a\u3002\u4e00\u8d9f\u4ea7\u751f\u7684\u6bcf\u4e2a\u6876\u5728\u4e0b\u4e00\u8d9f\u4e2d\u88ab\u5355\u72ec\u8bfb\u5165\u5e76\u518d\u6b21\u5206\u533a\u4ee5\u4ea7\u751f\u66f4\u5c0f\u7684\u5206\u533a\u3002\u4e00\u8d9f\u4e2d\u4f7f\u7528\u7684\u6563\u5217\u51fd\u6570\u4e0e\u4e0a\u4e00\u8d9f\u4e2d\u4f7f\u7528\u7684\u6563\u5217\u51fd\u6570\u4e0d\u540c\u3002\u7cfb\u7edf\u4e0d\u65ad\u91cd\u590d\u5bf9\u8f93\u5165\u7684\u8fd9\u79cd\u5206\u533a\u8fc7\u7a0b\u76f4\u5230\u6784\u9020\u7528\u8f93\u4eba\u7684\u6bcf\u4e2a\u5206\u533a\u90fd\u80fd\u88ab\u5185\u5b58\u5bb9\u7eb3\u4e3a\u6b62\u3002\u8fd9\u79cd\u5206\u533a\u88ab\u79f0\u4e3a\u9012\u5f52\u5206\u533a(recursive partitioning)\u3002</p> Example <p>consider a memory size of 12M bytes, divided into 4K bytes blocks; it would contain a total of 3K (3072) blocks. We can use a memory of this size to partition relations of size up to 3K \u2217 3K blocks, which is 36G (3K \u2217 3K \u2217 4K ) bytes.</p> <p>Similarly, a relation of size 1 gigabyte requires just over \\(\\sqrt{256}\\) blocks, or 2 megabytes, to avoid recursive partitioning</p>"},{"location":"Computer_Science/DB/Chapter15/#cost-of-hash-join","title":"Cost of Hash-Join","text":"<p>If recursive partitioning is not required:</p> <p>cost of hash join is: \\(3(b_s + b_r) + 4 \\times n_h\\) block transfers + \\(2(\\lceil b_r / b_b \\rceil + \\lceil b_s / b_b \\rceil) + 2 \\times n_h\\) seeks</p> <p>Block transfers : The partitioning of the two relations r and s calls for a complete reading of both relations, and a subsequent writing back of them. This operation requires \\(2(b_r + b_s)\\) block transfers. The build and probe phases read each of the partitions once, calling for further \\(b_s + b_r\\) block transfers. The number of blocks occupied by partitions could be slightly more than \\(b_s + b_r\\) , as a result of partially filled blocks. Accessing such partially filled blocks can add an overhead of at most 2\\(n_h\\) h for each of the relations, since each of the \\(n_h\\) partitions could have a partially filled block that has to be written and read back. Thus, a hash join is estimated to require: \\(3(b_r + b_s) + 4 n_h\\) block transfers.</p> <p>Seeks: Assuming \\(b_b\\) b blocks are allocated for the input buffer and each output buffer, partitioning requires a total of \\(w(b_r / b_b + b_s / b_b)\\) seeks. The build and probe phases require only one seek for each of the \\(n_h\\) partitions of each relation, since each partition can be read sequentially. The hash join thus requires \\(2(b_r / b_b + b_s / b_b) + 2 n_h\\) seeks.</p> <p>If recursive partitioning required:</p> <p>number of passes required for partitioning build relation s to less than M blocks per partition is \\(\\lceil \\log_{\\lfloor M / b_b \\rfloor - 1} (b_s / M) \\rceil\\)</p> <p>best to choose the smaller relation as the build relation.</p> <p>Total cost estimate is: \\(2(b_r + b_s) \\lceil \\log_{\\lfloor M / b_b \\rfloor - 1} (b_s / M) \\rceil + b_s + b_r\\) block transfers + \\(2(\\lceil b_r / b_b \\rceil + \\lceil b_s / b_b \\rceil) \\lceil \\log_{\\lfloor M / b_b \\rfloor - 1} (b_s / M) \\rceil\\) seeks</p> <p>If the entire build input can be kept in main memory no partitioning is required</p> <p>Cost estimate goes down to \\(b_r + b_s\\)</p> Chinese version <p></p>"},{"location":"Computer_Science/DB/Chapter15/#other-operations","title":"Other Operations","text":"<p>Duplicate elimination can be implemented via hashing or sorting.</p> <p>On sorting duplicates will come adjacent to each other, and all but one set of duplicates can be deleted.</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6392\u5e8f\u7684\u65b9\u6cd5\u6765\u5bb9\u6613\u5730\u5b9e\u73b0\u53bb\u91cd\u3002\u4f5c\u4e3a\u6392\u5e8f\u7684\u7ed3\u679c\uff0c\u76f8\u540c\u7684\u5143\u7ec4\u4f1a\u5f7c\u6b64\u90bb\u8fd1\u5730\u51fa\u73b0\uff0c\u90a3\u5c31\u5220\u9664\u6240\u6709\u76f8\u540c\u5143\u7ec4\u53ea\u4fdd\u7559\u4e00\u4e2a\u526f\u672c\u5373\u53ef\u3002\u5bf9\u4e8e\u5916\u6392\u5e8f\u2014\u2014\u5f52\u5e76\u800c\u8a00\uff0c\u5728\u521b\u5efa\u5f52\u5e76\u6bb5\u65f6\u5c31\u53ef\u4ee5\u53d1\u73b0\u91cd\u590d\u5143\u7ec4\uff0c\u5e76\u5728\u5c06\u5f52\u5e76\u6bb5\u5199\u5230\u78c1\u76d8\u4e4b\u524d\u53bb\u9664\u91cd\u590d\u5143\u7ec4\uff0c\u4ece\u800c\u51cf\u5c11\u5757\u4f20\u8f93\u7684\u6b21\u6570\u3002\u5269\u4f59\u7684\u91cd\u590d\u5143\u7ec4\u53ef\u5728\u5f52\u5e76\u8fc7\u7a0b\u4e2d\u53bb\u9664\uff0c\u5e76\u4e14\u6700\u540e\u7684\u6709\u5e8f\u5f52\u5e76\u6bb5\u662f\u6ca1\u6709\u91cd\u590d\u5143\u7ec4\u7684\u3002\u5728\u6700\u574f\u60c5\u5f62\u4e0b\uff0c\u53bb\u91cd\u7684\u4f30\u8ba1\u4ee3\u4ef7\u4e0e\u5bf9\u8be5\u5173\u7cfb\u8fdb\u884c\u6392\u5e8f\u7684\u6700\u574f\u60c5\u5f62\u4e0b\u7684\u4f30\u8ba1\u4ee3\u4ef7\u662f\u4e00\u6837\u7684\u3002</p> <p>Optimization: duplicates can be deleted during run generation as well as at intermediate merge steps in external sort-merge.</p> <p>Hashing is similar \u2013 duplicates will come into the same bucket.</p> <p>\u6211\u4eec\u4e5f\u53ef\u901a\u8fc7\u6563\u5217\u6765\u5b9e\u73b0\u53bb\u91cd\uff0c\u5c31\u50cf\u5728\u6563\u5217-\u8fde\u63a5\u7b97\u6cd5\u91cc\u4e00\u6837\u3002\u9996\u5148\uff0c\u57fa\u4e8e\u6574\u4e2a\u5143\u7ec4\u4e0a\u7684\u4e00\u4e2a\u6563\u5217\u51fd\u6570\u5bf9\u5173\u7cfb\u8fdb\u884c\u5206\u533a\u3002\u63a5\u4e0b\u6765\u8bfb\u5165\u6bcf\u4e2a\u5206\u533a\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u5185\u5b58\u6563\u5217\u7d22\u5f15\u3002\u5728\u521b\u5efa\u6563\u5217\u7d22\u5f15\u65f6\uff0c\u53ea\u6709\u4e0d\u5728\u7d22\u5f15\u4e2d\u7684\u5143\u7ec4\u624d\u88ab\u63d2\u5165:\u5426\u5219\uff0c\u8be5\u5143\u7ec4\u5c31\u88ab\u4e22\u5f03\u3002\u5728\u5206\u533a\u4e2d\u7684\u6240\u6709\u5143\u7ec4\u90fd\u88ab\u5904\u7406\u5b8c\u540e\uff0c\u5c06\u6563\u5217\u7d22\u5f15\u4e2d\u7684\u5143\u7ec4\u5199\u5230\u7ed3\u679c\u4e2d\u3002\u5176\u4f30\u8ba1\u4ee3\u4ef7\u4e0e\u5728\u6563\u5217-\u8fde\u63a5\u4e2d\u5904\u7406\u6784\u9020\u5173\u7cfb(\u5206\u533a\u5e76\u8bfb\u5165\u6bcf\u4e2a\u5206\u533a)\u7684\u4ee3\u4ef7\u662f\u4e00\u6837\u7684\u3002</p> <p>Projection:</p> <p>perform projection on each tuple followed by duplicate elimination.</p> <p>Aggregation can be implemented in a manner similar to duplicate elimination.</p> <p>\u805a\u96c6\u8fd0\u7b97\u53ef\u4ee5\u7528\u4e0e\u53bb\u91cd\u76f8\u540c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002\u6211\u4eec\u6216\u8005\u4f7f\u7528\u6392\u5e8f\u6216\u8005\u4f7f\u7528\u6563\u5217\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u53bb\u91cd\u4e2d\u6240\u505a\u7684\u90a3\u6837\uff0c\u53ea\u4e0d\u8fc7\u57fa\u4e8e\u5206\u7ec4\u5c5e\u6027\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u662f\u53bb\u9664\u5bf9\u4e8e\u5206\u7ec4\u5c5e\u6027\u53d6\u503c\u76f8\u540c\u7684\u5143\u7ec4\uff0c\u800c\u662f\u5c06\u5b83\u4eec\u805a\u96c6\u6210\u7ec4\uff0c\u5e76\u5bf9\u6bcf\u4e00\u7ec4\u5e94\u7528\u805a\u96c6\u8fd0\u7b97\u4ee5\u5f97\u5230\u7ed3\u679c\u3002</p> <p>Sorting or hashing can be used to bring tuples in the same group together, and then the aggregate functions can be applied on each group.</p> <p>Optimization: combine tuples in the same group during run generation and intermediate merges, by computing partial aggregate values</p> <p>\u5bf9\u4e8e\u8bf8\u5982 <code>min\u3001max\u3001sum\u3001count</code> \u548c <code>avg</code> \u90a3\u6837\u7684\u805a\u96c6\u51fd\u6570\u800c\u8a00\uff0c\u5b9e\u73b0\u805a\u96c6\u8fd0\u7b97\u7684\u4f30\u8ba1\u4ee3\u4ef7\u548c\u53bb\u91cd\u7684\u4ee3\u4ef7\u662f\u4e00\u6837\u7684\u3002</p> <p>For count, min, max, sum: keep aggregate values on tuples found so far in the group. When combining partial aggregate for count, add up the aggregates</p> <p>For avg, keep sum and count, and divide sum by count at the end</p> <p>Set operations (\\(\\cap, \\cup and \u2014\u2014\\)) can either use variant of merge-join after sorting, or variant of hash-join.</p> <p>\u5bf9\u4e8e\u6240\u6709\u8fd9\u4e9b\u8fd0\u7b97\uff0c\u4e24\u4e2a\u6392\u597d\u5e8f\u7684\u8f93\u5165\u5173\u7cfb\u4ec5\u9700\u626b\u63cf\u4e00\u6b21\uff0c\u56e0\u6b64\u5982\u679c\u4e24\u4e2a\u5173\u7cfb\u6309\u76f8\u540c\u7684\u6b21\u5e8f\u6392\u597d\u5e8f\uff0c\u5176\u4ee3\u4ef7\u4e3a \\(b_r + b_s\\) \u6b21\u5757\u4f20\u8f93\u3002\u5047\u8bbe\u6700\u574f\u60c5\u51b5\u4e0b\u6bcf\u4e2a\u5173\u7cfb\u53ea\u6709\u4e00\u4e2a\u7f13\u51b2\u5757\uff0c\u5219\u603b\u5171\u9700\u8981 \\(b_r + b_s\\) \u6b21\u78c1\u76d8\u5bfb\u9053\u518d\u52a0\u4e0a \\(b_r + b_s\\) \u6b21\u5757\u4f20\u8f93\u3002\u901a\u8fc7\u5206\u914d\u989d\u5916\u7684\u7f13\u51b2\u5757\u53ef\u4ee5\u51cf\u5c11\u5bfb\u9053\u7684\u6b21\u6570\u3002\u82e5\u5173\u7cfb\u4e00\u5f00\u59cb\u5e76\u672a\u6392\u5e8f\uff0c\u5219\u8fd8\u8981\u5305\u542b\u6392\u5e8f\u7684\u4ee3\u4ef7\u3002\u5728\u6267\u884c\u96c6\u5408\u8fd0\u7b97\u65f6\uff0c\u4efb\u4f55\u6392\u5e8f\u6b21\u5e8f\u5747\u53ef\u4f7f\u7528\uff0c\u53ea\u8981\u4e24\u4e2a\u8f93\u5165\u5177\u6709\u76f8\u540c\u7684\u6392\u5e8f\u6b21\u5e8f\u5373\u53ef\u3002</p> <p>E.g., Set operations using hashing:</p> <ol> <li>Partition both relations using the same hash function</li> <li>Process each partition i as follows.</li> </ol> <p>(a) Using a different hashing function, build an in-memory hash index on \\(r_i\\) (b) Process \\(s_i\\) as follows</p> <p>\u6563\u5217\u63d0\u4f9b\u4e86\u5b9e\u73b0\u8fd9\u4e9b\u96c6\u5408\u8fd0\u7b97\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002\u5bf9\u4e8e\u6bcf\u79cd\u8fd0\u7b97\u7684\u7b2c\u4e00\u6b65\u4f7f\u7528\u76f8\u540c\u7684\u6563\u5217\u51fd\u6570\u5bf9\u4e24\u4e2a\u5173\u7cfb\u8fdb\u884c\u5206\u533a\uff0c\u5e76\u7531\u6b64\u521b\u5efa\u51fa\u5206\u533a \\(r_0, r_1, \\cdots, r_{n_h}\\) \u4ee5\u53ca \\(s_0, s_1, \\cdots, s_{n_h}\\)\u3002\u7136\u540e\u6839\u636e\u8fd0\u7b97\u7684\u4e0d\u540c\uff0c\u7cfb\u7edf\u5bf9 i = 0, 1, ..., \\(n_h\\) \u4e2d\u7684\u6bcf\u4e2a\u5206\u533a\u6267\u884c\u4e0d\u540c\u8fd0\u7b97\u6b65\u9aa4\u3002</p> <p>\\(r \\cup s\\): </p> <p>a. Add tuples in \\(s_i\\) to the hash index if they are not already in it. b. At end of \\(s_i\\) add the tuples in the hash index to the result.</p> others <p></p> <p></p> <p></p> <p></p>"},{"location":"Computer_Science/DB/Chapter15/#evaluation-of-expressions","title":"Evaluation of Expressions","text":"<p>\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u5b66\u4e60\u4e86\u5982\u4f55\u6267\u884c\u5355\u4e2a\u5173\u7cfb\u8fd0\u7b97\u3002\u73b0\u5728\u6211\u4eec\u8003\u8651\u5982\u4f55\u6267\u884c\u5305\u542b\u591a\u79cd\u8fd0\u7b97\u7684\u8868\u8fbe\u5f0f\u3002\u4e00\u79cd\u663e\u800c\u6613\u89c1\u7684\u8868\u8fbe\u5f0f\u6267\u884c\u65b9\u5f0f\u662f\u4ee5\u4e00\u79cd\u6070\u5f53\u7684\u6b21\u5e8f\u6bcf\u6b21\u53ea\u6267\u884c\u4e00\u4e2a\u8fd0\u7b97;\u6bcf\u6b21\u6267\u884c\u7684\u7ed3\u679c\u88ab\u7269\u5316(materialized)\u5230\u4e00\u4e2a\u4e34\u65f6\u5173\u7cfb\u4e2d\u4ee5\u5907\u540e\u7528\u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u7f3a\u70b9\u662f\u9700\u8981\u6784\u9020\u4e34\u65f6\u5173\u7cfb\uff0c\u8fd9\u4e9b\u4e34\u65f6\u5173\u7cfb(\u9664\u975e\u5b83\u4eec\u975e\u5e38\u5c0f)\u5fc5\u987b\u5199\u5230\u78c1\u76d8\u4e0a\u3002\u53e6\u4e00\u79cd\u53ef\u66ff\u4ee3\u65b9\u5f0f\u662f\u5728\u6d41\u6c34\u7ebf(pipeline)\u4e2d\u540c\u65f6\u6267\u884c\u591a\u4e2a\u8fd0\u7b97\uff0c\u5c06\u4e00\u4e2a\u8fd0\u7b97\u7684\u7ed3\u679c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\uff0c\u800c\u4e0d\u5fc5\u4fdd\u5b58\u4e34\u65f6\u5173\u7cfb\u3002</p>"},{"location":"Computer_Science/DB/Chapter15/#materialization","title":"Materialization","text":"<p>\u4e3a\u4e86\u76f4\u89c2\u5730\u7406\u89e3\u5982\u4f55\u6267\u884c\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6700\u5bb9\u6613\u7684\u65b9\u5f0f\u662f\u770b\u4e00\u770b\u4ee5\u7b97\u5b50\u6811(operator tree)\u5bf9\u8868\u8fbe\u5f0f\u6240\u505a\u7684\u56fe\u5f62\u5316\u8868\u793a\u3002</p> <p></p> <p>\u5982\u679c\u5e94\u7528\u7269\u5316\u65b9\u6cd5\uff0c\u6211\u4eec\u4ece\u8868\u8fbe\u5f0f\u4e2d\u7684\u6700\u5e95\u5c42\u8fd0\u7b97(\u5728\u6811\u7684\u5e95\u90e8)\u5f00\u59cb\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u8fd0\u7b97: deparment \u4e0a\u7684\u9009\u62e9\u8fd0\u7b97\u3002\u6700\u5e95\u5c42\u8fd0\u7b97\u7684\u8f93\u5165\u662f\u6570\u636e\u5e93\u4e2d\u7684\u5173\u7cfb\u3002\u6211\u4eec\u4f7f\u7528\u524d\u9762\u5b66\u4e60\u8fc7\u7684\u7b97\u6cd5\u6765\u6267\u884c\u8fd9\u4e9b\u8fd0\u7b97\uff0c\u5e76\u4e14\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u4e34\u65f6\u5173\u7cfb\u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u4e34\u65f6\u5173\u7cfb\u6765\u6267\u884c\u6811\u4e2d\u66f4\u9ad8\u4e00\u5c42\u7684\u8fd0\u7b97:\u8fd9\u65f6\u7684\u8f93\u5165\u8981\u4e48\u662f\u4e34\u65f6\u5173\u7cfb\uff0c\u8981\u4e48\u662f\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u7684\u5173\u7cfb\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u8fde\u63a5\u7684\u8f93\u5165\u662f instructor \u5173\u7cfb\u4ee5\u53ca\u5728 deparment \u4e0a\u901a\u8fc7\u9009\u62e9\u5efa\u7acb\u7684\u4e34\u65f6\u5173\u7cfb\u3002\u73b0\u5728\u53ef\u4ee5\u6267\u884c\u8fde\u63a5\uff0c\u5e76\u521b\u5efa\u53e6\u4e00\u4e2a\u4e34\u65f6\u5173\u7cfb\u3002</p> <p>\u901a\u8fc7\u91cd\u590d\u8be5\u8fc7\u7a0b\uff0c\u6211\u4eec\u6700\u7ec8\u53ef\u4ee5\u6267\u884c\u4f4d\u4e8e\u6811\u7684\u6839\u8282\u70b9\u5904\u7684\u8fd0\u7b97\uff0c\u4ece\u800c\u5f97\u5230\u8868\u8fbe\u5f0f\u7684\u6700\u7ec8\u7ed3\u679c\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7\u4f7f\u7528\u7531\u8fde\u63a5\u521b\u5efa\u7684\u4e34\u65f6\u5173\u7cfb\u4f5c\u4e3a\u8f93\u4eba\u6765\u6267\u884c\u6839\u8282\u70b9\u5904\u7684\u6295\u5f71\u8fd0\u7b97\u6295\u5f71\uff0c\u5c31\u5f97\u5230\u4e86\u6700\u7ec8\u7684\u7ed3\u679c\u3002</p> <p>\u521a\u624d\u63cf\u8ff0\u7684\u6267\u884c\u65b9\u5f0f\u88ab\u79f0\u4e3a\u7269\u5316\u6267\u884c(materialized evaluation)\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4e2d\u95f4\u8fd0\u7b97\u7684\u7ed3\u679c\u90fd\u88ab\u521b\u5efa(\u7269\u5316)\uff0c\u7136\u540e\u7528\u4e8e\u4e0b\u4e00\u5c42\u8fd0\u7b97\u7684\u6267\u884c\u3002</p> <p>\u7269\u5316\u6267\u884c\u7684\u4ee3\u4ef7\u4e0d\u5355\u5355\u662f\u6240\u6d89\u53ca\u7684\u8fd0\u7b97\u4ee3\u4ef7\u7684\u603b\u548c\u3002\u5f53\u8ba1\u7b97\u7b97\u6cd5\u7684\u4f30\u8ba1\u4ee3\u4ef7\u65f6\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u5c06\u8fd0\u7b97\u7ed3\u679c\u5199\u5230\u78c1\u76d8\u7684\u4ee3\u4ef7\u3002\u4e3a\u4e86\u8ba1\u7b97\u6309\u8fd9\u79cd\u65b9\u5f0f\u6267\u884c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u4ee3\u4ef7\uff0c\u5fc5\u987b\u628a\u6240\u6709\u8fd0\u7b97\u7684\u4ee3\u4ef7\u76f8\u52a0\uff0c\u8fd8\u8981\u52a0\u4e0a\u628a\u4e2d\u95f4\u7ed3\u679c\u5199\u5230\u78c1\u76d8\u7684\u4ee3\u4ef7\u3002\u5047\u8bbe\u7ed3\u679c\u8bb0\u5f55\u5728\u7f13\u51b2\u533a\u4e2d\u79ef\u7d2f\uff0c\u5e76\u4e14\u5f53\u7f13\u51b2\u533a\u5df2\u6ee1\u65f6\uff0c\u518d\u628a\u5b83\u4eec\u5199\u5230\u78c1\u76d8\u4e0a\u3002\u5199\u51fa\u7684\u5757\u6570 \\(b_r\\) ,\u53ef\u6309 \\(n_r/f_r\\) \u6765\u4f30\u8ba1\uff0c\u5176\u4e2d \\(n_r\\) \u662f\u7ed3\u679c\u5173\u7cfb r \u4e2d\u5143\u7ec4\u7684\u4f30\u8ba1\u6570\uff0c\\(f_r\\) \u662f\u7ed3\u679c\u5173\u7cfb\u7684\u5757\u56e0\u5b50(blocking factor)\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u5757\u4e2d\u53ef\u5bb9\u7eb3\u7684 r \u7684\u8bb0\u5f55\u6570\u3002\u9664\u4e86\u4f20\u8f93\u65f6\u95f4\u4e4b\u5916\uff0c\u8fd8\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u78c1\u76d8\u5bfb\u9053\uff0c\u56e0\u4e3a\u78c1\u5934\u5728\u8fde\u7eed\u7684\u5199\u64cd\u4f5c\u4e4b\u95f4\u53ef\u80fd\u4f1a\u8fdb\u884c\u79fb\u52a8\u3002\u5bfb\u9053\u7684\u6b21\u6570\u53ef\u4ee5\u4f30\u8ba1\u4e3a \\(b_r/b_b\\) \uff0c\u5176\u4e2d \\(b_b\\) \u662f\u8f93\u51fa\u7f13\u51b2\u5757\u7684\u89c4\u6a21(\u4ee5\u5757\u6570\u8ba1\u7b97)\u3002</p> <p>\u53cc\u7f13\u51b2(double buffering)(\u4f7f\u7528\u4e24\u5757\u7f13\u51b2\u533a\uff0c\u5176\u4e2d\u4e00\u5757\u7528\u4e8e\u8fde\u7eed\u6267\u884c\u7b97\u6cd5\uff0c\u800c\u53e6\u4e00\u5757\u7528\u4e8e\u5199\u51fa\u7ed3\u679c)\u901a\u8fc7\u5e76\u884c\u6267\u884c CPU \u6d3b\u52a8\u4e0e I/O \u6d3b\u52a8\uff0c\u5141\u8bb8\u7b97\u6cd5\u6267\u884c\u5f97\u66f4\u5feb\u3002\u901a\u8fc7\u4e3a\u8f93\u51fa\u7f13\u51b2\u533a\u5206\u914d\u989d\u5916\u7684\u5757\u4ee5\u53ca\u4e00\u6b21\u5199\u51fa\u591a\u4e2a\u5757\uff0c\u53ef\u4ee5\u51cf\u5c11\u5bfb\u9053\u7684\u6b21\u6570\u3002</p>"},{"location":"Computer_Science/DB/Chapter15/#pipelining","title":"Pipelining","text":"<p>\u901a\u8fc7\u51cf\u5c11\u4ea7\u751f\u7684\u4e34\u65f6\u6587\u4ef6\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u9ad8\u67e5\u8be2\u6267\u884c\u7684\u6548\u7387\u3002\u51cf\u5c11\u4e34\u65f6\u6587\u4ef6\u6570\u662f\u901a\u8fc7\u5c06\u591a\u4e2a\u5173\u7cfb\u8fd0\u7b97\u7ec4\u5408\u6210\u4e00\u4e2a\u8fd0\u7b97\u7684\u6d41\u6c34\u7ebf\u6765\u5b9e\u73b0\u7684\uff0c\u5176\u4e2d\u4e00\u4e2a\u8fd0\u7b97\u7684\u7ed3\u679c\u5c06\u4f20\u9001\u5230\u6d41\u6c34\u7ebf\u4e2d\u7684\u4e0b\u4e00\u4e2a\u8fd0\u7b97\u3002\u521a\u521a\u63cf\u8ff0\u7684\u8fd9\u79cd\u6267\u884c\u65b9\u5f0f\u53eb\u4f5c\u6d41\u6c34\u7ebf\u6267\u884c(pipelined evaluation)\u3002</p> <p>\u5982\u679c\u91c7\u7528\u7269\u5316\u65b9\u5f0f\uff0c\u6267\u884c\u4e2d\u5c06\u6d89\u53ca\u521b\u5efa\u5b58\u653e\u8fde\u63a5\u7ed3\u679c\u7684\u4e34\u65f6\u5173\u7cfb\uff0c\u7136\u540e\u4e3a\u4e86\u6267\u884c\u6295\u5f71\u53c8\u5c06\u6b64\u8fde\u63a5\u7ed3\u679c\u8bfb\u56de\u3002\u8fd9\u4e9b\u8fd0\u7b97\u53ef\u6309\u5982\u4e0b\u65b9\u5f0f\u7ec4\u5408:\u5f53\u8fde\u63a5\u8fd0\u7b97\u4ea7\u751f\u4e00\u4e2a\u5b83\u7684\u7ed3\u679c\u5143\u7ec4\u65f6\uff0c\u9a6c\u4e0a\u5c06\u8be5\u5143\u7ec4\u4f20\u9001\u7ed9\u6295\u5f71\u8fd0\u7b97\u53bb\u5904\u7406\u3002\u901a\u8fc7\u5c06\u8fde\u63a5\u4e0e\u6295\u5f71\u7ec4\u5408\u8d77\u6765\uff0c\u6211\u4eec\u907f\u514d\u4e86\u4e2d\u95f4\u7ed3\u679c\u7684\u521b\u5efa\uff0c\u4ece\u800c\u76f4\u63a5\u4ea7\u751f\u6700\u7ec8\u7ed3\u679c\u3002</p> <p>\u521b\u5efa\u8fd0\u7b97\u7684\u6d41\u6c34\u7ebf\u53ef\u4ee5\u5e26\u6765\u4e24\u79cd\u597d\u5904:</p> <ol> <li>\u5b83\u6d88\u9664\u4e86\u8bfb\u548c\u5199\u4e34\u65f6\u5173\u7cfb\u7684\u4ee3\u4ef7\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u67e5\u8be2\u6267\u884c\u4ee3\u4ef7\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u524d\u9762\u770b\u5230\u8fc7\u7684\u7528\u4e8e\u6bcf\u4e2a\u8fd0\u7b97\u7684\u4ee3\u4ef7\u516c\u5f0f\u90fd\u5305\u62ec\u4ece\u78c1\u76d8\u8bfb\u53d6\u7ed3\u679c\u7684\u4ee3\u4ef7\u3002\u5982\u679c\u8fd0\u7b97 \\(o_i\\) \u7684\u8f93\u5165\u662f\u4ece\u524d\u9762\u7684\u8fd0\u7b97 \\(o_j\\) \u6d41\u6c34\u7ebf\u5316\u800c\u6765\u7684\uff0c\u5219 \\(o_i\\) \u7684\u4ee3\u4ef7\u5c31\u4e0d\u5e94\u5305\u62ec\u4ece\u78c1\u76d8\u8bfb\u53d6\u8f93\u5165\u7684\u4ee3\u4ef7;\u6211\u4eec\u524d\u9762\u770b\u5230\u8fc7\u7684\u4ee3\u4ef7\u516c\u5f0f\u53ef\u4ee5\u505a\u76f8\u5e94\u7684\u4fee\u6539\u3002</li> <li>\u5982\u679c\u4e00\u4e2a\u67e5\u8be2\u6267\u884c\u8ba1\u5212\u7684\u6839\u7b97\u5b50\u53ca\u5176\u8f93\u5165\u88ab\u5408\u5e76\u5728\u6d41\u6c34\u7ebf\u4e2d\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8fc5\u901f\u5f00\u59cb\u4ea7\u751f\u67e5\u8be2\u7ed3\u679c\u3002\u5982\u679c\u5728\u7ed3\u679c\u751f\u6210\u65f6\u5c31\u628a\u5b83\u4eec\u663e\u793a\u7ed9\u7528\u6237\uff0c\u8fd9\u53ef\u80fd\u76f8\u5f53\u6709\u7528\uff0c\u56e0\u4e3a\u5426\u5219\u5728\u7528\u6237\u770b\u5230\u4efb\u4f55\u67e5\u8be2\u7ed3\u679c\u4e4b\u524d\u53ef\u80fd\u4f1a\u5b58\u5728\u4e00\u4e2a\u957f\u65f6\u95f4\u7684\u5ef6\u8fdf\u3002</li> </ol> <p>Pipelines can be executed in either of two ways:</p> <ol> <li>demand-driven pipeline</li> </ol> <p>\u5728\u4e00\u6761\u9700\u6c42\u9a71\u52a8\u6d41\u6c34\u7ebf(demand-driven pipeline)\u4e2d\uff0c\u7cfb\u7edf\u4e0d\u505c\u5730\u5411\u4f4d\u4e8e\u6d41\u6c34\u7ebf\u9876\u7aef\u7684\u8fd0\u7b97\u53d1\u51fa\u9700\u8981\u5143\u7ec4\u7684\u8bf7\u6c42\u3002\u6bcf\u5f53\u4e00\u4e2a\u8fd0\u7b97\u6536\u5230\u9700\u8981\u5143\u7ec4\u7684\u8bf7\u6c42\u65f6\uff0c\u5b83\u5c31\u8ba1\u7b97\u5f85\u8fd4\u56de\u7684\u4e0b\u4e00\u4e2a(\u82e5\u5e72\u4e2a)\u5143\u7ec4\u5e76\u8fd4\u56de\u8fd9\u4e9b\u5143\u7ec4\u3002\u82e5\u8be5\u8fd0\u7b97\u7684\u8f93\u5165\u4e0d\u662f\u6d41\u6c34\u7ebf\u5316\u7684\uff0c\u5219\u5f85\u8fd4\u56de\u7684\u4e0b\u4e00\u4e2a(\u82e5\u5e72\u4e2a)\u5143\u7ec4\u53ef\u4ee5\u4ece\u8f93\u4eba\u5173\u7cfb\u8ba1\u7b97\u51fa\u6765\uff0c\u540c\u65f6\u7cfb\u7edf\u8ddf\u8e2a\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u7ecf\u8fd4\u56de\u4e86\u54ea\u4e9b\u5143\u7ec4\u3002\u82e5\u8be5\u8fd0\u7b97\u5177\u6709\u4e00\u4e9b\u6d41\u6c34\u7ebf\u5316\u7684\u8f93\u5165\uff0c\u90a3\u4e48\u5b83\u4e5f\u53d1\u51fa\u8bf7\u6c42\u4ee5\u83b7\u5f97\u6765\u81ea\u5176\u6d41\u6c34\u7ebf\u8f93\u4eba\u7684\u5143\u7ec4\u3002\u8be5\u8fd0\u7b97\u4f7f\u7528\u5b83\u4ece\u5176\u6d41\u6c34\u7ebf\u8f93\u5165\u63a5\u6536\u5230\u7684\u5143\u7ec4\uff0c\u5e76\u4e3a\u5176\u8f93\u51fa\u8ba1\u7b97\u8fd9\u4e9b\u5143\u7ec4\uff0c\u7136\u540e\u628a\u5b83\u4eec\u4e0a\u4f20\u5230\u5b83\u7684\u7236\u8282\u70b9\u3002</p> <ol> <li>producer-driven pipeline</li> </ol> <p>\u5728\u4e00\u6761\u751f\u4ea7\u8005\u9a71\u52a8\u6d41\u6c34\u7ebf(producer-drivenpipeline)\u4e2d\uff0c\u5404\u8fd0\u7b97\u5e76\u4e0d\u7b49\u5f85\u4ea7\u751f\u5143\u7ec4\u7684\u8bf7\u6c42\uff0c\u800c\u662f\u79ef\u6781\u5730(eagerly)\u751f\u4ea7\u5143\u7ec4\u3002\u751f\u4ea7\u8005\u9a71\u52a8\u6d41\u6c34\u7ebf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8fd0\u7b97\u90fd\u88ab\u5efa\u6a21\u6210\u7cfb\u7edf\u4e2d\u4e00\u4e2a\u5355\u72ec\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\uff0c\u5b83\u4ece\u5176\u6d41\u6c34\u7ebf\u5316\u7684\u8f93\u5165\u4e2d\u53d6\u51fa\u5143\u7ec4\u6d41\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u5143\u7ec4\u6d41\u4f5c\u4e3a\u5176\u8f93\u51fa</p> \u4e3a\u4ec0\u4e48\u987a\u5e8f\u626b\u63cf\u6bd4\u968f\u673a\u67e5\u627e\u66f4\u9ad8\u6548\uff1f <ul> <li>\u51cf\u5c11\u78c1\u76d8\u5bfb\u9053\u65f6\u95f4\uff1a \u78c1\u76d8\u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u78c1\u5934\u9700\u8981\u79fb\u52a8\u5230\u6b63\u786e\u7684\u78c1\u9053\uff08\u5bfb\u9053\uff09\u548c\u6247\u533a\uff08\u65cb\u8f6c\u5ef6\u8fdf\uff09\u3002\u968f\u673a\u67e5\u627e\u610f\u5473\u7740\u78c1\u5934\u9700\u8981\u5728\u78c1\u76d8\u4e0a\u9891\u7e41\u5730\u8df3\u8dc3\uff0c\u5bfc\u81f4\u5927\u91cf\u7684\u5bfb\u9053\u65f6\u95f4\u548c\u65cb\u8f6c\u5ef6\u8fdf\uff0c\u4ece\u800c\u964d\u4f4e\u4e86 I/O \u6027\u80fd\u3002</li> <li>\u5229\u7528\u78c1\u76d8\u9884\u8bfb\uff1a \u5f53\u6309\u7269\u7406\u5730\u5740\u987a\u5e8f\u626b\u63cf\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u548c\u78c1\u76d8\u63a7\u5236\u5668\u901a\u5e38\u4f1a\u8fdb\u884c\u9884\u8bfb\u64cd\u4f5c\uff0c\u5373\u9884\u6d4b\u5373\u5c06\u9700\u8981\u7684\u6570\u636e\u5e76\u63d0\u524d\u52a0\u8f7d\u5230\u7f13\u51b2\u533a\u4e2d\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u540e\u7eed\u7684\u8bfb\u53d6\u64cd\u4f5c\u5f88\u53ef\u80fd\u76f4\u63a5\u4ece\u7f13\u51b2\u533a\u4e2d\u83b7\u53d6\uff0c\u800c\u65e0\u9700\u518d\u6b21\u8bbf\u95ee\u78c1\u76d8\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u6570\u636e\u8bfb\u53d6\u901f\u5ea6\u3002</li> </ul> <p>\u603b\u7ed3\uff1a</p> <p>\u6df7\u5408\u5f52\u5e76\u8fde\u63a5\u7684\u7b56\u7565\u5145\u5206\u5229\u7528\u4e86\u4e00\u4e2a\u5173\u7cfb\u5df2\u7ecf\u6392\u5e8f\u7684\u4f18\u52bf\u4ee5\u53ca\u53e6\u4e00\u4e2a\u5173\u7cfb\u4e0a\u7684 B+ \u6811\u7d22\u5f15\u3002\u901a\u8fc7\u5148\u5c06\u6392\u5e8f\u5173\u7cfb\u4e0e\u7d22\u5f15\u53f6\u5b50\u8282\u70b9\u5f52\u5e76\uff0c\u7136\u540e\u5bf9\u672a\u6392\u5e8f\u5173\u7cfb\u7684\u5730\u5740\u8fdb\u884c\u6392\u5e8f\uff0c\u6700\u540e\u4ee5\u7269\u7406\u5730\u5740\u987a\u5e8f\u626b\u63cf\u672a\u6392\u5e8f\u5173\u7cfb\u5e76\u5b8c\u6210\u8fde\u63a5\uff0c\u8be5\u7b97\u6cd5\u65e8\u5728\u6700\u5c0f\u5316\u78c1\u76d8\u7684\u968f\u673a\u8bbf\u95ee\uff0c\u4ece\u800c\u63d0\u9ad8\u8fde\u63a5\u64cd\u4f5c\u7684\u6548\u7387\u3002\u4e0e\u5b8c\u5168\u968f\u673a\u5730\u6839\u636e\u5730\u5740\u67e5\u627e\u672a\u6392\u5e8f\u5173\u7cfb\u7684\u5143\u7ec4\u76f8\u6bd4\uff0c\u987a\u5e8f\u626b\u63cf\u80fd\u591f\u66f4\u6709\u6548\u5730\u5229\u7528\u78c1\u76d8 I/O\uff0c\u4ece\u800c\u63d0\u5347\u6574\u4f53\u6027\u80fd\u3002</p>"},{"location":"Computer_Science/DB/Chapter16/","title":"Chapter 16 | Query Optimization","text":"<p> \u7ea6 5286 \u4e2a\u5b57  23 \u884c\u4ee3\u7801  14 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 27 \u5206\u949f</p> <p>Alternative ways of evaluating a given query</p> <ul> <li>Equivalent expressions</li> <li>Different algorithms for each operation</li> </ul> <p></p> <p></p> <p>An evaluation plan defines exactly what algorithm is used for each operation, and how the execution of the operations is coordinated.</p> <p>Cost difference between evaluation plans for a query can be enormous.</p> <p>Steps in cost-based query optimization:</p> <ol> <li>Generate logically equivalent expressions using equivalence rules</li> <li>Annotate resultant expressions in alternative ways to get alternative query plans</li> <li>Choose the cheapest plan based on estimated cost</li> </ol> <p>\u4e3a\u4e86\u627e\u5230\u4ee3\u4ef7\u6700\u5c0f\u7684\u67e5\u8be2\u6267\u884c\u8ba1\u5212\uff0c\u67e5\u8be2\u4f18\u5316\u5668\u9700\u8981\u4ea7\u751f\u4e00\u4e9b\u80fd\u4e0e\u7ed9\u5b9a\u8868\u8fbe\u5f0f\u5f97\u5230\u76f8\u540c\u7ed3\u679c\u7684\u5907\u9009\u8ba1\u5212\uff0c\u5e76\u9009\u51fa\u4ee3\u4ef7\u6700\u5c0f\u7684\u4e00\u4e2a\u3002</p> <p>\u67e5\u8be2\u6267\u884c\u8ba1\u5212\u7684\u4ea7\u751f\u6d89\u53ca\u4e09\u4e2a\u6b65\u9aa4:</p> <p>(1)\u4ea7\u751f\u903b\u8f91\u4e0a\u4e0e\u7ed9\u5b9a\u8868\u8fbe\u5f0f\u7b49\u4ef7\u7684\u8868\u8fbe\u5f0f;</p> <p>(2)\u4ee5\u53ef\u66ff\u4ee3\u7684\u65b9\u5f0f\u5bf9\u6240\u4ea7\u751f\u7684\u8868\u8fbe\u5f0f\u505a\u6ce8\u91ca\uff0c\u4ee5\u4ea7\u751f\u5907\u9009\u7684\u67e5\u8be2\u8ba1\u5212;</p> <p>(3)\u4f30\u8ba1\u6bcf\u4e2a\u6267\u884c\u8ba1\u5212\u7684\u4ee3\u4ef7\uff0c\u5e76\u9009\u62e9\u4f30\u8ba1\u4ee3\u4ef7\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002</p> <p>Estimation of plan cost based on:</p> <ul> <li>Statistical information about relations. e.g. number of tuples, number of distinct values for an attribute</li> <li>Statistics estimation for intermediate results \u4e2d\u95f4\u7ed3\u679c\u7684\u89c4\u6a21\u4f30\u8ba1 (Cardinality Estimation \u57fa\u6570\u4f30\u8ba1) e.g. to compute cost of complex expressions</li> <li>Cost formulae for algorithms, computed using statistics</li> </ul>"},{"location":"Computer_Science/DB/Chapter16/#viewing-query-evaluation-plans","title":"Viewing Query Evaluation Plans","text":"<p>Most database support <code>explain</code> evaluation plan for a query</p> <p>Some syntax variations between databases:</p> <ul> <li>PostgreSQL : <code>explain &lt;query&gt;</code></li> <li>Oracle: <code>explain plan for &lt;query&gt; followed by select * from table (dbms_xplan.display)</code></li> <li>SQL Server: <code>set showplan_text on</code></li> </ul>"},{"location":"Computer_Science/DB/Chapter16/#generating-equivalent-expressions","title":"Generating Equivalent Expressions","text":"<p>Two relational algebra expressions are said to be equivalent if the two expressions generate the same set of tuples on every legal database instance</p> <p>An equivalence rule says that expressions of two forms are equivalent, can replace expression of first form by second, or vice versa</p>"},{"location":"Computer_Science/DB/Chapter16/#equivalence-rules","title":"Equivalence Rules","text":"<ol> <li>Conjunctive selection operations can be deconstructed\uff08\u5206\u89e3\uff09into a sequence of individual selections.</li> </ol> \\[\\sigma_{\\theta_1 \\land \\theta_2} (E) = \\sigma_{\\theta_1} (\\sigma_{\\theta_2} (E))\\] <ol> <li>Selection operations are commutative\uff08\u53ef\u4ea4\u6362\u7684\uff09.</li> </ol> \\[\\sigma_{\\theta_1} (\\sigma_{\\theta_2} (E)) = \\sigma_{\\theta_2} (\\sigma_{\\theta_1} (E))\\] <ol> <li>Only the last in a sequence of projection operations is needed, the others can be omitted\uff08\u53ef\u7701\u7565\u7684\uff09.</li> </ol> \\[\\Pi_{L_1}(\\Pi_{L_2}(\\ldots \\Pi_{L_n}(E))) = \\Pi_{L_n}(E)\\] <ol> <li>Selections can be combined with Cartesian products and theta joins.</li> </ol> <p>a. </p> \\[\\sigma_{\\theta}(E_1 \\times E_2) = E_1 \\bowtie_{\\theta} E_2\\] <p>b. </p> \\[\\sigma_{\\theta_1}(E_1 \\bowtie_{\\theta_2} E_2) = E_1 \\bowtie_{\\theta_1 \\land \\theta_2} E_2\\] <ol> <li>Theta-join operations (and natural joins) are commutative\uff08\u53ef\u4ea4\u6362\u7684\uff09.</li> </ol> \\[E_1 \\bowtie_{\\theta} E_2 = E_2 \\bowtie_{\\theta} E_1\\] <ol> <li></li> </ol> <p>a. Natural join operations are associative\uff08\u53ef\u7ed3\u5408\u7684\uff09:</p> \\[(E_1 \\bowtie E_2) \\bowtie E_3 = E_1 \\bowtie (E_2 \\bowtie E_3)\\] <p>b. Theta joins are associative in the following manner:</p> \\[(E_1 \\bowtie_{\\theta_1} E_2) \\bowtie_{\\theta_2 \\land \\theta_3} E_3 = E_1 \\bowtie_{\\theta_1 \\land \\theta_3} (E_2 \\bowtie_{\\theta_2} E_3)\\] <p>where \\(\\theta_2\\) involves attributes from only \\(E_2\\) and \\(E_3\\).</p> <ol> <li>The selection operation distributes\uff08\u5206\u914d\uff09 over the theta join operation under the following two conditions:</li> </ol> <p>a. When all the attributes in \\(\\theta_0\\) involve only the attributes of one of the expressions (\\(E_1\\)) being joined.</p> \\[\\sigma_{\\theta_0}(E_1 \\bowtie_{\\theta} E_2) = (\\sigma_{\\theta_0}(E_1)) \\bowtie_{\\theta} E_2\\] <p>b. When \\(\\theta_1\\) involves only the attributes of \\(E_1\\) and \\(\\theta_2\\) involves only the attributes of \\(E_2\\).</p> \\[\\sigma_{\\theta_1 \\land \\theta_2}(E_1 \\bowtie_{\\theta} E_2) = (\\sigma_{\\theta_1}(E_1)) \\bowtie_{\\theta} (\\sigma_{\\theta_2}(E_2))\\] <ol> <li>The projection operation distributes\uff08\u5206\u914d\uff09 over the theta join operation as follows:</li> </ol> <p>a. if \\(\\theta\\) involves only attributes from \\(L_1 \\cup L_2\\).</p> \\[\\Pi_{L_1 \\cup L_2}(E_1 \\bowtie_{\\theta} E_2) = (\\Pi_{L_1}(E_1)) \\bowtie_{\\theta} (\\Pi_{L_2}(E_2))\\] <p>b. Consider a join \\(E_1 \\bowtie_{\\theta} E_2\\)</p> <p>Let \\(L_1\\) and \\(L_2\\) be sets of attributes from \\(E_1\\) and \\(E_2\\) respectively</p> <p>Let \\(L_3\\) be attributes of \\(E_1\\) that are involved in join condition \\(\\theta\\), but are not in \\(L_1 \\cup L_2\\) and</p> <p>Let \\(L_4\\) be attributes of \\(E_2\\) that are involved in join condition \\(\\theta\\), but are not in \\(L_1 \\cup L_2\\)</p> \\[\\Pi_{L_1 \\cup L_2}(E_1 \\bowtie_{\\theta} E_2) = \\Pi_{L_1 \\cup L_2}((\\Pi_{L_1 \\cup L_3}(E_1)) \\bowtie_{\\theta} (\\Pi_{L_2 \\cup L_4}(E_2)))\\] <ol> <li>The set operations union and intersection are commutative</li> </ol> \\[E_1 \\cup E_2 = E_2 \\cup E_1\\] \\[E_1 \\cap E_2 = E_2 \\cap E_1\\] <p>(set difference is not commutative).</p> <ol> <li>Set union and intersection are associative.</li> </ol> \\[(E_1 \\cup E_2) \\cup E_3 = E_1 \\cup (E_2 \\cup E_3)\\] \\[(E_1 \\cap E_2) \\cap E_3 = E_1 \\cap (E_2 \\cap E_3)\\] <ol> <li>The selection operation distributes over \\(\\cup\\), \\(\\cap\\) and \\(-\\)</li> </ol> \\[\\sigma_{\\theta}(E_1 - E_2) = \\sigma_{\\theta}(E_1) - \\sigma_{\\theta}(E_2)\\] <p>and similarly for \\(\\cup\\) and \\(\\cap\\) in place of \\(-\\)</p> <p>Also:</p> \\[\\sigma_{\\theta}(E_1 - E_2) = \\sigma_{\\theta}(E_1) - E_2\\] <p>and similarly for \\(\\cap\\) in place of \\(-\\) but not for \\(\\cup\\)</p> <ol> <li>The projection operation distributes over union</li> </ol> \\[\\Pi_{L}(E_1 \\cup E_2) = \\Pi_{L}(E_1) \\cup \\Pi_{L}(E_2)\\] <ol> <li>Selection distributes over aggregation as below</li> </ol> \\[\\sigma_{\\theta}(_G\\gamma_{A}(E)) = _G\\gamma_{A}(\\sigma_{\\theta}(E))\\] <p>provided \\(\\theta\\) only involves attributes in G</p> <ol> <li></li> </ol> <p>a. Full outerjoin is commutative:</p> \\[E_1 \u27d7 E_2 = E_2 \u27d7 E_1\\] <p>b. Left and right outerjoin are not commutative, but:</p> \\[E_1 \u27d5 E_2 = E_2 \u27d6 E_1\\] <ol> <li>Selection distributes over left and right outer joins as below, provided \\(\\theta_1\\) only involves attributes of \\(E_1\\)</li> </ol> <p>a. </p> \\[\\sigma_{\\theta_1}(E_1 \u27d5_{\\theta} E_2) = (\\sigma_{\\theta_1}(E_1)) \u27d5_{\\theta} E_2\\] <p>b. </p> \\[\\sigma_{\\theta_1}(E_2 \u27d6_{\\theta} E_1) = E_2 \u27d6_{\\theta} (\\sigma_{\\theta_1}(E_1))\\] <ol> <li>Outerjoins can be replaced by inner joins under some conditions</li> </ol> <p>a. </p> \\[\\sigma_{\\theta_1}(E_1 \u27d5_{\\theta} E_2) = \\sigma_{\\theta_1}(E_1 \\bowtie_{\\theta} E_2)\\] <p>b. </p> \\[\\sigma_{\\theta_1}(E_2 \u27d6_{\\theta} E_1) = \\sigma_{\\theta_1}(E_2 \\bowtie_{\\theta} E_1)\\] <p>provided \\(\\theta_1\\) is null rejecting on \\(E_2\\)</p> <p>\u5373\uff0c\u5982\u679c \\(\\theta_1\\) \u6d89\u53ca \\(E_2\\) \u7684\u5217\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u8981\u6c42\u8fd9\u4e9b\u5217\u4e0d\u80fd\u4e3a NULL\uff08\u5426\u5219\u8be5\u884c\u4f1a\u88ab\u8fc7\u6ee4\u6389\uff09\u3002</p> <p>If \\(\\theta_1\\) has the property that it evaluates to false or unknown whenever the attributes of \\(E_2\\) are null</p> <p>\u5bf9\u4e8e \\(E_1\\) \u4e2d\u672a\u5339\u914d\u7684\u884c\uff0c \\(E_2\\) \u7684\u6240\u6709\u5c5e\u6027\u4f1a\u88ab\u586b\u5145\u4e3a NULL\u3002</p> <p>\u5982\u679c \\(\\theta_1\\) \u5bf9\u8fd9\u4e9b NULL \u503c\u8fd4\u56de false/unknown\uff0c\u5219\u8fd9\u4e9b\u884c\u4f1a\u88ab \\(\\sigma_{\\theta_1}\\) \u8fc7\u6ee4\u6389\u3002</p> <p>\u56e0\u6b64\uff0c\u6700\u7ec8\u7ed3\u679c\u4ec5\u4fdd\u7559 \\(E_1\\) \u548c \\(E_2\\) \u6210\u529f\u5339\u914d\u7684\u884c\uff0c\u7b49\u4ef7\u4e8e\u76f4\u63a5\u5185\u8fde\u63a5\u540e\u8fc7\u6ee4\u3002</p>"},{"location":"Computer_Science/DB/Chapter16/#statistics-for-cost-estimation","title":"Statistics for Cost Estimation","text":"<p>Cost of each operator: Need statistics of input relations</p> <p>Inputs can be results of sub-expressions</p>"},{"location":"Computer_Science/DB/Chapter16/#statistical-information-for-cost-estimation","title":"Statistical Information for Cost Estimation","text":"<p>\\(n_r\\) number of tuples in a relation r \u5173\u7cfb r \u4e2d\u7684\u5143\u7ec4\u7684\u6570\u91cf</p> <p>\\(b_r\\) number of blocks containing tuples of r \u5173\u7cfb r \u4e2d\u7684\u5143\u7ec4\u7684\u5757\u6570</p> <p>\\(l_r\\) size of a tuple of r \u5173\u7cfb r \u4e2d\u4e00\u4e2a\u5143\u7ec4\u7684\u5b57\u8282\u6570</p> <p>\\(f_r\\) blocking factor of r \u2014 i.e., the number of tuples of r that fit into one block. \u5173\u7cfb r \u7684\u5757\u56e0\u5b50\uff08\u4e00\u4e2a\u5757\u4e2d\u80fd\u5bb9\u7eb3\u7684\u5173\u7cfb r \u7684\u5143\u7ec4\u6570\uff09</p> <p>\\(V(A, r)\\) number of distinct values that appear in r for attribute A; same as the size of \\(\\Pi_{A}(r)\\) \u5173\u7cfb r \u4e2d\u51fa\u73b0\u7684\u5bf9\u4e8e\u5c5e\u6027 A \u7684\u975e\u91cd\u590d\u503c\u7684\u6570\u91cf\u3002\u8be5\u503c\u4e0e \\(\\Pi_{A}(r)\\) \u7684\u89c4\u6a21\u76f8\u540c\u3002</p> <p>\u5982\u679c A \u662f\u5173\u7cfb r \u7684\u7801\uff0c\u5219 V(A,r) \u7b49\u4e8e \\(n_r\\)\u3002</p> <p>V(A, R) \u975e\u5e38\u91cd\u8981\uff0c\u7528\u4e8e\u51b3\u5b9a\u53ef\u4ee5\u91c7\u53d6\u54ea\u79cd\u7b97\u6cd5</p> <p>If tuples of r are stored together physically in a file, then:</p> <p>\u5982\u679c\u6211\u4eec\u5047\u8bbe\u5173\u7cfb r \u7684\u5143\u7ec4\u5728\u7269\u7406\u4e0a\u88ab\u5171\u540c\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5219\u4e0b\u9762\u7684\u7b49\u5f0f\u6210\u7acb:</p> \\[b_r = \\lceil \\frac{n_r}{f_r} \\rceil\\]"},{"location":"Computer_Science/DB/Chapter16/#histograms","title":"Histograms","text":"<p>Histogram on attribute age of relation person</p> <p></p> <ul> <li>Equi-width histograms \u7b49\u5bbd\u76f4\u65b9\u56fe\uff0c\u5b83\u5c06\u503c\u7684\u8303\u56f4\u5212\u5206\u4e3a\u89c4\u6a21\u76f8\u7b49\u7684\u533a\u95f4\u3002</li> <li>Equi-depth histograms \u7b49\u6df1\u76f4\u65b9\u56fe\uff0c\u8c03\u6574\u4e86\u533a\u95f4\u7684\u8fb9\u754c\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u533a\u95f4\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u503c\u3002\u56e0\u6b64\uff0c\u7b49\u6df1\u76f4\u65b9\u56fe\u4ec5\u5b58\u50a8\u533a\u95f4\u5212\u5206\u7684\u8fb9\u754c\uff0c\u800c\u4e0d\u9700\u8981\u5b58\u50a8\u503c\u7684\u6570\u91cf\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter16/#selection-size-estimation","title":"Selection Size Estimation","text":"<p>\\(\\sigma_{A = V}(r)\\)</p> <ul> <li>\\(n_r / V(A, r)\\) number of records that will satisfy the selection</li> <li> <p>Equality condition on a key attribute: size estimate = 1</p> </li> <li> <p>\u5982\u679c a \u662f\u4e00\u4e2a\u51fa\u73b0\u6b21\u6570\u6709\u53ef\u7528\u7edf\u8ba1\u503c\u7684\u9891\u7e41\u51fa\u73b0\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8be5\u503c\u4f5c\u4e3a\u9009\u62e9\u7684\u89c4\u6a21\u4f30\u8ba1\u3002</p> </li> <li>\u5426\u5219\uff0c\u5982\u679c\u6ca1\u6709\u53ef\u7528\u7684\u76f4\u65b9\u56fe\uff0c\u6211\u4eec\u5047\u8bbe\u53d6\u503c\u662f\u5747\u5300\u5206\u5e03\u7684(\u5373\u6bcf\u4e2a\u503c\u4ee5\u540c\u6837\u7684\u6982\u7387\u51fa\u73b0)\uff0c\u5e76\u5047\u8bbe r \u7684\u4e00\u4e9b\u8bb0\u5f55\u5728\u5c5e\u6027 A \u4e0a\u7684\u53d6\u503c\u4e3a a \uff0c\u5219\u9009\u62e9\u7ed3\u679c\u4f30\u8ba1\u6709 \\(n_r / V(A, r)\\) \u4e2a\u5143\u7ec4\u3002</li> <li>\u5982\u679c\u5728\u5c5e\u6027 A \u4e0a\u6709\u4e00\u4e2a\u76f4\u65b9\u56fe\u53ef\u7528\uff0c\u5219\u53ef\u4ee5\u5b9a\u4f4d\u51fa\u5305\u542b\u503c a \u7684\u533a\u95f4\uff0c\u7136\u540e\u7528\u8be5\u533a\u95f4\u7684\u9891\u7387\u8ba1\u6570\u4ee3\u66ff \\(n_r\\) ,\u5e76\u7528\u8be5\u533a\u95f4\u4e2d\u51fa\u73b0\u7684\u4e0d\u540c\u503c\u7684\u6570\u91cf\u4ee3\u66ff V(A, r) \u6765\u4fee\u6539\u4e0a\u9762\u63d0\u5230\u7684\u4f30\u7b97\u516c\u5f0f \\(n_r\\)/V(A, r)\u3002</li> </ul> <p>\\(\\sigma_{A \\leq V}(r)\\) (case of \\(\\sigma_{A \\geq V}(r)\\) is symmetric)</p> <p>Let c denote the estimated number of tuples satisfying the condition.</p> <p>If min(A,r) and max(A,r) are available in catalog</p> <ul> <li>c = 0 if V &lt; min(A,r)</li> <li>else, c = \\(n_r \\times \\frac{V - min(A,r)}{max(A,r) - min(A,r)}\\)</li> </ul> <p>If histograms available, can refine above estimate</p> <p>In absence of statistical information c is assumed to be \\(n_r / 2\\)</p> <p>The selectivity\uff08\u4e2d\u9009\u7387\uff09 of a condition \\(\\theta_{i}\\) is the probability that a tuple in the relation r satisfies \\(\\theta_{i}\\)</p> <p>If \\(s_i\\) is the number of satisfying tuples in r, the selectivity of \\(\\theta_{i}\\) is given by \\(s_i / n_r\\)</p> <p>Conjunction: </p> \\[\\sigma_{\\theta_{1} \\land \\theta_{2} \\land \\cdots \\land \\theta_{n}}(r)\\] <p>Assuming indepdence, estimate of tuples in the result is:</p> \\[n_r \\times \\prod_{i = 1}^{n} \\frac{s_i}{n_r}\\] <p>Disjunction:</p> \\[\\sigma_{\\theta_{1} \\lor \\theta_{2} \\lor \\cdots \\lor \\theta_{n}}(r)\\] <p>Estimated number of tuples:</p> \\[n_r \\times (1 - \\prod_{i = 1}^{n} (1 - \\frac{s_i}{n_r}))\\] <p>Negation:</p> \\[\\sigma_{\\neg \\theta}(r)\\] <p>Estimated number of tuples:</p> \\[n_r - size(\\sigma_{\\theta}(r))\\]"},{"location":"Computer_Science/DB/Chapter16/#estimation-of-the-size-of-joins","title":"Estimation of the Size of Joins","text":"<p>The Cartesian product \\(r \\times s\\) contains \\(n_r \\times n_s\\) tuples; each tuple occupies \\(s_r + s_s\\) bytes</p> <ol> <li> <p>If \\(R \\cap S = \\emptyset\\) then \\(r \\bowtie s\\) is the same as \\(r \\times s\\)</p> </li> <li> <p>If \\(R \\cap S\\) is a key for R, then a tuple of s will join with at most one tuple from r</p> </li> </ol> <p>therefore, \\((\\text{the number of tuples in } r \\bowtie s ) \\leq n_s\\)</p> <ol> <li>If \\(R \\cap S\\) is a foreign key in S referencing R, then the number of tuples in \\(r \\bowtie s\\) = the number of tuples in s</li> </ol> <ul> <li>\u5982\u679c foreign key \u4e0d\u662f\u7a7a\u7684</li> <li>The case for \\(R \\cap S\\) S being a foreign key referencing S is symmetric.</li> </ul> <ol> <li>If \\(R \\cap S\\) = {A} is not a key for R or S.</li> </ol> <p>If we assume that every tuple t in R produces tuples in \\(R \\bowtie S\\) , the number of tuples in \\(R \\bowtie S\\) is estimated to be:</p> \\[\\frac{n_r \\times n_s}{V(A,s)}\\] <p>If the reverse is true, the estimate obtained will be:</p> \\[\\frac{n_r \\times n_s}{V(A,r)}\\] <p>The lower of these two estimates is probably the more accurate one.</p> <p>Can improve on above if histograms are available : Use formula similar to above, for each cell of histograms on the two relations</p> <p>A \u4e0d\u662f  \u6216 S \u7684\u952e\uff08key\uff09\uff0c\u8fd9\u610f\u5473\u7740\uff1a</p> <ul> <li>A \u5728 R \u4e2d\u53ef\u80fd\u6709\u91cd\u590d\u503c\uff08\u5373 V(A, R) &lt; \\(n_R\\)\uff09\u3002</li> <li>A \u5728 S \u4e2d\u4e5f\u53ef\u80fd\u6709\u91cd\u590d\u503c\uff08\u5373 V(A, S) &lt; \\(n_S\\)\uff09\u3002</li> </ul> <p>(1) \u5047\u8bbe R \u7684\u6bcf\u4e2a\u5143\u7ec4\u90fd\u80fd\u5339\u914d S \u7684\u5143\u7ec4 - \u5373\uff0cR \u7684\u6240\u6709 A \u503c\u90fd\u5b58\u5728\u4e8e S \u4e2d\uff08\\(\\Pi_A(R) \\subseteq \\Pi_A(S)\\)\uff09\u3002 - \u6b64\u65f6\uff0c\\(R \\bowtie S\\) \u7684\u5143\u7ec4\u6570\u91cf\u4f30\u7b97\u4e3a\uff1a</p> \\[\\text{Tuples} = \\frac{n_R \\times n_S}{V(A, S)}\\] <p>\u76f4\u89c2\u7406\u89e3\uff1aR \u7684\u6bcf\u4e2a\u5143\u7ec4 t \u5728 S \u4e2d\u5e73\u5747\u5339\u914d \\(\\frac{n_S}{V(A, S)}\\) \u4e2a\u5143\u7ec4\uff08\u56e0\u4e3a A \u5728 S \u4e2d\u6709 V(A, S) \u4e2a\u4e0d\u540c\u503c\uff0c\u6bcf\u4e2a\u503c\u5e73\u5747\u51fa\u73b0 \\(\\frac{n_S}{V(A, S)}\\) \u6b21\uff09\u3002</p> <p>\u540c\u7406:</p> <p>(2) \u5047\u8bbe S \u7684\u6bcf\u4e2a\u5143\u7ec4\u90fd\u80fd\u5339\u914d R \u7684\u5143\u7ec4</p> \\[\\text{Tuples} = \\frac{n_R \\times n_S}{V(A, R)}\\] <p>\u7531\u4e8e\u6211\u4eec\u4e0d\u77e5\u9053 \\(\\Pi_A(R)\\) \u548c \\(\\Pi_A(S)\\) \u7684\u5305\u542b\u5173\u7cfb\uff08\u5373\u54ea\u4e2a\u5173\u7cfb\u7684 \\(A\\) \u503c\u8303\u56f4\u66f4\u5e7f\uff09\uff0c\u901a\u5e38 \u53d6\u4e24\u4e2a\u4f30\u8ba1\u503c\u7684\u8f83\u5c0f\u8005\uff1a</p> \\[\\text{Tuples} = \\min \\left( \\frac{n_R \\times n_S}{V(A, R)}, \\frac{n_R \\times n_S}{V(A, S)} \\right)\\] <p>\u5982\u679c\u6570\u636e\u5e93\u5b58\u50a8\u4e86 \u5c5e\u6027 A \u5728 R \u548c S \u4e0a\u7684\u76f4\u65b9\u56fe\uff0c\u53ef\u4ee5 \u6309\u503c\u57df\u5206\u6876\u8ba1\u7b97\uff0c\u518d\u6c47\u603b\uff1a</p> <ol> <li>\u5c06 A \u7684\u503c\u57df\u5212\u5206\u4e3a\u591a\u4e2a\u533a\u95f4\uff08buckets\uff09\u3002</li> <li>\u5bf9\u6bcf\u4e2a bucket\uff0c\u8ba1\u7b97\uff1a</li> </ol> \\[\\text{Matches in bucket } i = \\frac{n_{R,i} \\times n_{S,i}}{\\max(V(A, R)_i, V(A, S)_i)}\\] <ol> <li>\u5bf9\u6240\u6709 bucket \u7684\u7ed3\u679c\u6c42\u548c\uff1a</li> </ol> \\[\\text{Total Tuples} = \\sum_i \\text{Matches in bucket } i\\] <p>\u66f4\u91cd\u8981\u7684\u662f\uff0c\u524d\u9762\u7684\u4f30\u8ba1\u53d6\u51b3\u4e8e\u8fd9\u6837\u7684\u5047\u8bbe:\u6bcf\u4e2a\u503c\u662f\u7b49\u6982\u7387\u51fa\u73b0\u7684\u3002</p>"},{"location":"Computer_Science/DB/Chapter16/#size-estimation-for-other-operations","title":"Size Estimation for Other Operations","text":"<p>Projection: estimated size of \\(\\Pi_A(r) = V(A, r)\\)</p> <p>Aggregation: estimated size of \\(_A g_F(r) = V(A, r)\\)</p> <p>Set operations:</p> <p>For unions/intersections of selections on the same relation: rewrite and use size estimate for selections</p> <p>E.g. \\(\\sigma_{\\theta_1}(r) \\cup \\sigma_{\\theta_2}(r)\\) can be rewritten as \\(\\sigma_{\\theta_1 \\lor \\theta_2}(r)\\)</p> <p>For operations on different relations:</p> <ul> <li>estimated size of \\(r \\cup s\\) = size of r + size of s</li> <li>estimated size of \\(r \\cap s\\) = minimum size of r and size of s</li> <li>estimated size of r \u2013 s = r</li> <li>All the three estimates may be quite inaccurate, but provide upper bounds on the sizes.</li> </ul> <p>Outer join:</p> <ul> <li>estimated size of \\(r \u27d5 s\\) = size of \\(r \\bowtie s\\) + size of r</li> <li>Case of right outer join is symmetric</li> <li>Estimated size of \\(r \u27d7 s\\) = size of \\(r \\bowtie s\\) + size of r + size of s</li> </ul> <p>The size estimates often depend on the number of distinct values for an attribute. Need to compute the distinct vales for intermediate results.</p> <p>Selections: \\(\\sigma_{\\theta}(r)\\) estimate \\(V(A, \\sigma_{\\theta}(r))\\)</p> <p>If \\(\\theta\\) forces A to take a specified value: \\(V(A, \\sigma_{\\theta}(r)) = 1\\)</p> <p>If \\(\\theta\\) forces A to take on one of a specified set of values: \\(V(A, \\sigma_{\\theta}(r)) = \\text{number of specified values}\\)</p> <p>If the selection \\(\\theta\\) is of the form \\(A \\ op \\ v\\) estimated \\(V(A, \\sigma_{\\theta}(r)) = V(A, r) \\times s\\) , where s is the selectivity of the selection.</p> <p>In all the other cases, use approximate estimate: \\(V(A, \\sigma_{\\theta}(r)) = min(V(A, r), n_{\\sigma_{\\theta}}(r))\\)</p> Chinese Version <p></p> <p>More accurate estimate can be got using probability theory, but this one works fine generally</p> <p>Joins: \\(r \\bowtie s\\) estimate \\(V(A, r \\bowtie s)\\)</p> <p>If all attributes in A are from r, the estimated</p> \\[V(A, r \\bowtie s) = min(V(A, r), n_{r \\bowtie s}(r))\\] <p>If A contains attributes \\(A_1\\) from r and \\(A_2\\) from s, then estimated</p> \\[V(A, r \\bowtie s) = min(V(A_1, r) \\times V(A_2 - A_1, s), V(A_1 - A_2, r) \\times V(A_2, s), n_{r \\bowtie s}(r))\\] Chinese Version <p></p> <p>More accurate estimate can be got using probability theory, but this one works fine generally</p> <p>Estimation of distinct values are straightforward for projections.</p> <p>\u5bf9\u4e8e\u6295\u5f71\u6765\u8bf4\u4e0d\u540c\u53d6\u503c\u7684\u4f30\u8ba1\u662f\u76f4\u622a\u4e86\u5f53\u7684:\u5b83\u4eec\u5728 \\(\\Pi_{A(r)}\\) \u4e2d\u662f\u548c\u5728 r \u4e2d\u4e00\u6837\u7684\u3002\u8fd9\u4e00\u70b9\u5bf9\u4e8e\u805a\u96c6\u7684\u5206\u7ec4\u5c5e\u6027\u4e5f\u540c\u6837\u6210\u7acb\u3002</p> <p>They are the same in \\(\\Pi_{A(r)}\\) as in \\(r\\).</p> <p>The same holds for grouping attributes of aggregation.</p> <p>For aggregated values</p> <ul> <li>For min(A) and max(A), the number of distinct values can be estimated as min(V(A,r), V(G,r)) where G denotes grouping attributes.</li> <li>For other aggregates, assume all values are distinct, and use V(G,r)</li> </ul>"},{"location":"Computer_Science/DB/Chapter16/#choice-of-evaluation-plans","title":"Choice of Evaluation Plans","text":"<p>Must consider the interaction of evaluation techniques when choosing evaluation plans</p> <p>choosing the cheapest algorithm for each operation independently may not yield best overall algorithm.</p> <ul> <li>merge-join may be costlier than hash-join, but may provide a sorted output which reduces the cost for an outer level aggregation.</li> <li>nested-loop join may provide opportunity for pipelining</li> </ul> <p>Practical query optimizers incorporate elements of the following two broad approaches:</p> <ol> <li>Search all the plans and choose the best plan in a cost-based fashion.</li> <li>Uses heuristics to choose a plan.</li> </ol>"},{"location":"Computer_Science/DB/Chapter16/#cost-based-join-order-selection","title":"Cost-Based Join-Order Selection","text":"<p>Consider finding the best join-order for \\(r_1 \\bowtie r_2 \\bowtie \\cdots \\bowtie r_n\\)</p> <p>There are \\(\\frac{2(n-1)!}{(n-1)!}\\) different join orders for above expression.</p> <p>No need to generate all the join orders. Using dynamic programming, the least-cost join order for any subset of {\\(r_1, r_2, \\cdots, r_n\\)} is computed only once and stored for future use.</p>"},{"location":"Computer_Science/DB/Chapter16/#join-order-optimization-algorithm","title":"Join Order Optimization Algorithm","text":"<p>To find best join tree for a set of n relations:</p> <ol> <li>To find best plan for a set S of n relations, consider all possible plans of the form: \\(S_1 \\bowtie (S - S_1)\\) where \\(S_1\\) is any non-empty subset of S.</li> <li>Recursively compute costs for joining subsets of S to find the cost of each plan. Choose the cheapest of the \\(2^n - 2\\) alternatives.</li> <li>Base case for recursion: single relation access plan</li> </ol> <ul> <li>Apply all selections on \\(R_i\\) using best choice of indices on \\(R_i\\)</li> </ul> <p>When plan for any subset is computed, store it and reuse it when it is required again, instead of recomputing it</p> <ul> <li>Dynamic programming</li> </ul> Dynamic programming <p></p>"},{"location":"Computer_Science/DB/Chapter16/#left-deep-join-trees","title":"Left Deep Join Trees","text":"<p>In left-deep join trees, the right-hand-side input for each join is a relation, not the result of an intermediate join.</p> <p></p>"},{"location":"Computer_Science/DB/Chapter16/#cost-of-optimization","title":"Cost of Optimization","text":"<p>With dynamic programming:</p> <ul> <li>time complexity of optimization with bushy trees is \\(O(3^n)\\)</li> <li>Space complexity is \\(O(2^n)\\)</li> </ul> <p>To find best left-deep join tree for a set of n relations:</p> <p>Consider n alternatives with one relation as right-hand side input and the other relations as left-hand side input.</p> <p>Modify optimization algorithm:</p> <ul> <li>Replace \"for each non-empty subset S1 of S such that S1 \\(\\neq\\) S\"</li> <li>By: for each relation r in S , let S1 = S \u2013 r .</li> </ul> <p>If only left-deep trees are considered,</p> <ul> <li>Time complexity of finding best join order is \\(O(n \\cdot 2^{n})\\)</li> <li>Space complexity remains at \\(O(2^n)\\)</li> </ul>"},{"location":"Computer_Science/DB/Chapter16/#heuristic-optimization","title":"Heuristic Optimization (\u542f\u53d1\u5f0f\u4f18\u5316)","text":"<p>\u57fa\u4e8e\u4ee3\u4ef7\u4f18\u5316\u7684\u4e00\u4e2a\u7f3a\u70b9\u662f\u4f18\u5316\u672c\u8eab\u7684\u4ee3\u4ef7\u3002\u867d\u7136\u67e5\u8be2\u4f18\u5316\u7684\u4ee3\u4ef7\u53ef\u4ee5\u901a\u8fc7\u5de7\u5999\u7684\u7b97\u6cd5\u6765\u964d\u4f4e\uff0c\u4f46\u4e00\u4e2a\u67e5\u8be2\u7684\u4e0d\u540c\u6267\u884c\u8ba1\u5212\u7684\u6570\u91cf\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u5e76\u4e14\u4ece\u8fd9\u4e2a\u96c6\u5408\u91cc\u627e\u5230\u6700\u4f18\u8ba1\u5212\u4ecd\u9700\u8981\u5f88\u591a\u8ba1\u7b97\u4ee3\u4ef7\u3002\u56e0\u6b64\uff0c\u67e5\u8be2\u4f18\u5316\u5668\u4f7f\u7528\u542f\u53d1\u5f0f\u65b9\u6cd5(heuristic)\u6765\u51cf\u5c11\u4f18\u5316\u7684\u4ee3\u4ef7\u3002</p> <p>Cost-based optimization is expensive, even with dynamic programming.</p> <p>Systems may use heuristics to reduce the number of choices that must be made in a cost-based fashion.</p> <p>Heuristic optimization transforms the query-tree by using a set of rules that typically (but not in all cases) improve execution performance:</p> <ul> <li>Perform selection early (reduces the number of tuples)</li> <li>Perform projection early (reduces the number of attributes)</li> <li>Perform most restrictive selection and join operations (i.e. with smallest result size) before other similar operations. \u9009\u51fa\u6765\u7684\u6bd4\u4f8b\u8d8a\u5c0f\u8d8a\u597d</li> <li>Perform left-deep join order</li> </ul> <p>\u4e0b\u8ff0\u89c4\u5219\u662f\u542f\u53d1\u5f0f\u89c4\u5219\u7684\u4e00\u4e2a\u793a\u4f8b\uff0c\u6b64\u89c4\u5219\u7528\u4e8e\u5bf9\u5173\u7cfb\u4ee3\u6570\u67e5\u8be2\u8fdb\u884c\u8f6c\u6362:</p> <ul> <li>\u5c3d\u65e9\u6267\u884c\u9009\u62e9\u3002</li> <li>\u5c3d\u65e9\u6267\u884c\u6295\u5f71\u3002</li> <li>\u91c7\u53d6\u5de6\u6df1\u8fde\u63a5\u6b21\u5e8f\u3002</li> </ul> <p>Some systems use only heuristics, others combine heuristics with partial cost-based optimization.</p>"},{"location":"Computer_Science/DB/Chapter16/#additional-optimization-techniques","title":"Additional Optimization Techniques","text":"<p>Nested query example:</p> <pre><code>select name \nfrom instructor\nwhere exists (select *\n            from teaches\n            where instructor.ID = teaches.ID and teaches.year = 2022)\n</code></pre> <p>SQL conceptually treats nested subqueries in the where clause as functions that take parameters and return a single value or set of values</p> <p>\u901a\u8fc7\u5c06\u5d4c\u5957\u5b50\u67e5\u8be2\u4f5c\u4e3a\u51fd\u6570\u6765\u8c03\u7528\u7684\u65b9\u5f0f\u6267\u884c\u5d4c\u5957\u5b50\u67e5\u8be2\u7684\u6280\u672f\u79f0\u4e3a\u76f8\u5173\u6267\u884c(correlated evaluation)\u3002\u76f8\u5173\u6267\u884c\u7684\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\uff0c\u56e0\u4e3a\u5b50\u67e5\u8be2\u5bf9\u4e8e\u5916\u5c42\u67e5\u8be2\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7ec4\u90fd\u8fdb\u884c\u5355\u72ec\u7684\u8fd0\u7b97\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5927\u91cf\u7684\u968f\u673a\u78c1\u76d8 I/O \u64cd\u4f5c\u3002</p> <p>\u56e0\u6b64\uff0cSQL\u4f18\u5316\u5668\u5c3d\u53ef\u80fd\u5730\u8bd5\u56fe\u5c06\u5d4c\u5957\u5b50\u67e5\u8be2\u8f6c\u6362\u6210\u8fde\u63a5\u7684\u5f62\u5f0f\u3002\u9ad8\u6548\u7684\u8fde\u63a5\u7b97\u6cd5\u6709\u52a9\u4e8e\u907f\u514d\u6602\u8d35\u7684\u968f\u673a I/O\u3002\u5728\u4e0d\u80fd\u8fdb\u884c\u8f6c\u6362\u7684\u60c5\u51b5\u4e0b\uff0c\u4f18\u5316\u5668\u5c06\u5b50\u67e5\u8be2\u5f53\u4f5c\u4e00\u4e2a\u5355\u72ec\u7684\u8868\u8fbe\u5f0f\uff0c\u5355\u72ec\u4f18\u5316\u5b83\u4eec\uff0c\u7136\u540e\u518d\u901a\u8fc7\u76f8\u5173\u6267\u884c\u6765\u6267\u884c\u5b83\u4eec\u3002</p> <p>Parameters are variables from outer level query that are used in the nested subquery; such variables are called correlation variables\uff08\u76f8\u5173\u53d8\u91cf\uff09(e.g. \u4e0a\u8ff0\u7684 instructor)</p> <p>Conceptually, nested subquery is executed once for each tuple in the cross-product generated by the outer level from clause</p> <p>Such evaluation is called correlated evaluation \uff08\u76f8\u5173\u6267\u884c\uff09</p> <p>Note: other conditions in where clause may be used to compute a join (instead of a cross-product) before executing the nested subquery</p> <p>Correlated evaluation may be quite inefficient since a large number of calls may be made to the nested query. There may be unnecessary random I/O as a result</p> <p>SQL optimizers attempt to transform nested subqueries to joins where possible, enabling use of efficient join techniques</p> <p>E.g.: earlier nested query can be rewritten as</p> <pre><code>select name\nfrom instructor, teaches\nwhere instructor.ID = teaches.ID and teaches.year = 2022\n</code></pre> \\[\\Pi_{name}(instructor \\bowtie_{instructor.ID = teaches.ID \\land teaches.year = 2022} teaches)\\] <p>Note: the two queries generate different numbers of duplicates</p> <ol> <li>teaches can have duplicate IDs</li> <li>Can be modified to handle duplicates correctly using semijoin operators.</li> </ol> <p>The semijoin\uff08\u534a\u8fde\u63a5\uff09 operator \u22c9 is defined as follows</p> <p>If a tuple \\(r_i\\) appears n times in r, it appears n times in the result of \\(r \u22c9_{\\theta} s\\) , if there is at least one tuple \\(s_i\\) in s matching with \\(r_i\\)</p> <p>E.g.: earlier nested query can be rewritten as</p> \\[\\Pi_{name}(instructor \u22c9_{instructor.ID = teaches.ID \\land teaches.year = 2022} teaches)\\] <p>Or even as:</p> \\[\\Pi_{name}(instructor \u22c9_{instructor.ID = teaches.ID} (\\sigma_{teaches.year = 2022} teaches))\\] <p>Now the duplicate count is correct!</p> <p>The above relational algebra query is also equivalent to</p> <pre><code>select name\nfrom instructor\nwhere ID in (select teaches.ID \n            from teaches\n            where teaches.year = 2022)\n</code></pre> <p>\u534a\u8fde\u63a5\u53ea\u9700\u8981 teaches.ID \u8bfb\u8fdb\u6765\uff0c\u800c\u4e0d\u9700\u8981\u6574\u4e2a teaches \u8868\u3002</p> Chinese Version <p></p> <p></p> <p>In general, SQL queries of the form below can be rewritten as shown</p> <p>Rewrite:</p> <p>select A from \\(r_1, r_2, \\cdots, r_n\\) where \\(P_1\\) and exists (select *                         from \\(s_1, s_2, \\cdots, s_m\\)                         where \\(P_2^1\\) and \\(P_2^2\\))</p> <p>To:</p> \\[\\Pi_{A}(\\sigma_{P_1} (r_1 \\times r_2 \\times \\cdots \\times r_n) \u22c9_{P_2^2} (\\sigma_{P_2^1} (s_1 \\times s_2 \\times \\cdots \\times s_m)))\\] <ul> <li>\\(P_2^1\\) contains predicates that do not involve any correlation variables</li> <li>\\(P_2^2\\) contains predicates involving correlation variables</li> </ul> <p>The process of replacing a nested query by a query with a join/semijoin (possibly with a temporary relation) is called decorrelation (\u53bb\u9664\u76f8\u5173)</p> <p>\u7528\u5e26\u6709\u8fde\u63a5\u3001\u534a\u8fde\u63a5\u6216\u53cd\u534a\u8fde\u63a5\u7684\u67e5\u8be2\u53bb\u66ff\u6362\u5d4c\u5957\u67e5\u8be2\u7684\u8fc7\u7a0b\u79f0\u4e3a\u53bb\u9664\u76f8\u5173\u3002</p> <p>\u628a\u5d4c\u5957\u67e5\u8be2\u76f8\u5173\u7684\u4e1c\u897f\u8f6c\u6362\u6210\u4e0d\u542b\u5d4c\u5957\u7684\u6267\u884c\u3002\u8fd9\u662f\u6570\u636e\u5e93\u5904\u7406\u5d4c\u5957\u67e5\u8be2\u76f8\u5173\u7684\u601d\u8def\u3002</p> <p>Decorrelation is more complicated in several cases</p> <ul> <li>The nested subquery uses aggregation, or</li> <li>The nested subquery is a scalar subquery</li> </ul> <p>Correlated evaluation used in these cases</p> <p>Decorrelation of scalar aggregate subqueries can be done using groupby/aggregation in some cases</p> <pre><code>select name\nfrom instructor\nwhere 1 &lt; (select count(*)\n            from teaches\n            where instructor.ID = teaches.ID \n            and teaches.year = 2022)\n</code></pre> \\[\\Pi_{name} (instructor \u22c9_{instructor.ID = TID \\land 1 &lt; cnt}(_{ID as TID} \\gamma_{count(*) as cnt} (\\sigma_{taches.year = 2022} (teaches))))\\]"},{"location":"Computer_Science/DB/Chapter16/#materialized-views","title":"Materialized Views","text":"<p>A materialized view is a view whose contents are computed and stored.</p> <p>\u7269\u5316\u89c6\u56fe(Materialized View)\u662f\u4e00\u79cd\u9884\u5148\u8ba1\u7b97\u5e76\u5b58\u50a8\u7ed3\u679c\u7684\u89c6\u56fe\uff0c\u4e0e\u666e\u901a\u89c6\u56fe\u4e0d\u540c\uff0c\u5b83\u5b9e\u9645\u4fdd\u5b58\u4e86\u67e5\u8be2\u7ed3\u679c\u6570\u636e\u3002</p> <p>\u666e\u901a\u89c6\u56fe\u53ea\u662f\u4fdd\u5b58\u67e5\u8be2\u5b9a\u4e49\uff0c\u6bcf\u6b21\u8bbf\u95ee\u65f6\u90fd\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u3002\u800c\u7269\u5316\u89c6\u56fe\u5219\u5c06\u67e5\u8be2\u7ed3\u679c\u5b9e\u9645\u5b58\u50a8\u8d77\u6765\uff0c\u4f8b\u5982\uff1a</p> <pre><code>create view department_total_salary(dept_name, total_salary) as\nselect dept_name, sum(salary)\nfrom instructor\ngroup by dept_name\n</code></pre> <p>Materializing the above view would be very useful if the total salary by department is required frequently. Saves the effort of finding multiple tuples and adding up their amounts.</p> <p>\u5982\u679c\u7ecf\u5e38\u9700\u8981\u67e5\u8be2\u5404\u90e8\u95e8\u7684\u85aa\u8d44\u603b\u989d\uff0c\u7269\u5316\u8fd9\u4e2a\u89c6\u56fe\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u907f\u514d\u4e86\u6bcf\u6b21\u67e5\u8be2\u65f6\u90fd\u8981\u4ece\u591a\u6761\u8bb0\u5f55\u4e2d\u67e5\u627e\u5e76\u6c42\u548c\u7684\u5f00\u9500\u3002</p>"},{"location":"Computer_Science/DB/Chapter16/#materialized-view-maintenance","title":"Materialized View Maintenance","text":"<p>The task of keeping a materialized view up-to-date with the underlying data is known as materialized view maintenance</p> <ul> <li>Materialized views can be maintained by recomputation on every update</li> <li>A better option is to use incremental view maintenance (\u589e\u91cf\u89c6\u56fe\u7ef4\u62a4)</li> </ul> <p>\u4fdd\u6301\u7269\u5316\u89c6\u56fe\u4e0e\u5e95\u5c42\u6570\u636e\u540c\u6b65\u7684\u8fc7\u7a0b\u79f0\u4e3a\u7269\u5316\u89c6\u56fe\u7ef4\u62a4\u3002\u7ef4\u62a4\u65b9\u5f0f\u4e3b\u8981\u6709\u4e24\u79cd\uff1a</p> <ol> <li>\u5b8c\u5168\u91cd\u65b0\u8ba1\u7b97\uff1a\u6bcf\u6b21\u6570\u636e\u66f4\u65b0\u65f6\u90fd\u91cd\u65b0\u8ba1\u7b97\u6574\u4e2a\u89c6\u56fe</li> <li>\u589e\u91cf\u89c6\u56fe\u7ef4\u62a4\uff1a\u53ea\u8ba1\u7b97\u53d7\u6570\u636e\u53d8\u5316\u5f71\u54cd\u7684\u90e8\u5206\u89c6\u56fe\u5185\u5bb9</li> </ol> <p>\u663e\u7136\uff0c\u589e\u91cf\u7ef4\u62a4\u6548\u7387\u66f4\u9ad8\u3002</p> <ul> <li>Changes to database relations are used to compute changes to the materialized view, which is then updated</li> </ul> <p>\u589e\u91cf\u7ef4\u62a4\u901a\u8fc7\u8ba1\u7b97\u5dee\u5206(differential)\u6765\u5b9e\u73b0\uff0c\u5373\u53ea\u5904\u7406\u6570\u636e\u53d8\u5316\u5e26\u6765\u7684\u5f71\u54cd\u3002</p> <p>The changes (inserts and deletes) to a relation or expressions are referred to as its differential\uff08\u5dee\u5206\uff09</p> <p>\u5bf9\u4e8e\u8fde\u63a5\u64cd\u4f5c\uff0c\u5f53\u6709\u63d2\u5165\u548c\u5220\u9664\u65f6\uff1a</p> <p>for inserts \\(V^{new} = V^{old} \\cup (i_r \\bowtie S)\\)</p> <p>Similarly for deletes \\(V^{new} = V^{old} - (d_r \\bowtie S)\\)</p> <p></p> <p>\u5bf9\u4e8e\u9009\u62e9\u64cd\u4f5c\uff0c\u5f53\u6709\u63d2\u5165\u548c\u5220\u9664\u65f6\uff1a</p> <p>Selection: Consider a view \\(v = \\sigma_{\\theta}(r)\\)</p> <p>\\(V^{new} = v^{old} \\cup \\sigma_{\\theta}(i_r)\\)</p> <p>\\(V^{new} = v^{old} - \\sigma_{\\theta}(d_r)\\)</p> <p>Aggregation Operations: \u5bf9\u7ec4\u5185\u6709\u5f71\u54cd\u7684\u6539\u53d8\u5373\u53ef\u3002</p> <p>\u805a\u5408\u64cd\u4f5c(\u5982<code>sum</code>, <code>count</code>, <code>avg</code>\u7b49)\u7684\u7ef4\u62a4\uff1a</p> <ul> <li>\u53ea\u9700\u8981\u66f4\u65b0\u53d7\u5f71\u54cd\u7684\u7ec4\u3002</li> <li>\u5bf9\u4e8e <code>avg</code> \u64cd\u4f5c\uff0c\u901a\u5e38\u5206\u522b\u7ef4\u62a4 <code>sum</code> \u548c <code>count</code> \uff0c\u6700\u540e\u518d\u76f8\u9664\u3002</li> <li><code>min</code> \u548c <code>max</code> \u64cd\u4f5c\u5728\u5220\u9664\u65f6\u53ef\u80fd\u4ee3\u4ef7\u8f83\u9ad8\uff0c\u56e0\u4e3a\u9700\u8981\u68c0\u67e5\u540c\u7ec4\u7684\u5176\u4ed6\u5143\u7ec4\u6765\u786e\u5b9a\u65b0\u7684\u6781\u503c\u3002</li> </ul> <p>To handle the case of avg, we maintain the sum and count aggregate values separately, and divide at the end.</p> <p>Maintaining the aggregate values min and max on deletions may be more expensive. We have to look at the other tuples of r that are in the same group to find the new minimum.</p> <p>\u7269\u5316\u89c6\u56fe\u7279\u522b\u9002\u7528\u4e8e\uff1a</p> <ul> <li>\u9891\u7e41\u6267\u884c\u7684\u590d\u6742\u67e5\u8be2</li> <li>\u5bf9\u5b9e\u65f6\u6027\u8981\u6c42\u4e0d\u9ad8\u7684\u7edf\u8ba1\u5206\u6790</li> <li>\u6570\u636e\u4ed3\u5e93\u548c\u51b3\u7b56\u652f\u6301\u7cfb\u7edf</li> </ul> <p>\u901a\u8fc7\u9884\u5148\u8ba1\u7b97\u548c\u5b58\u50a8\u7ed3\u679c\uff0c\u7269\u5316\u89c6\u56fe\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u67e5\u8be2\u6027\u80fd\uff0c\u7279\u522b\u662f\u5728\u6d89\u53ca\u5927\u91cf\u6570\u636e\u805a\u5408\u6216\u590d\u6742\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b\u3002</p>"},{"location":"Computer_Science/DB/Chapter17/","title":"Chapter 17 | Transactions","text":"<p> \u7ea6 6654 \u4e2a\u5b57  20 \u884c\u4ee3\u7801  21 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 34 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter17/#transaction-concept","title":"Transaction Concept","text":"<p>A transaction is a unit of program execution that accesses and possibly updates various data items.</p> <p>E.g. transaction to transfer $50 from account A to account B:</p> <p>In SQL:</p> <pre><code>update account set balance=balance-50 \n                where account_number=A;\nupdate account set balance=balance+50 \n                where account_number=B;\ncommit;\n</code></pre> <p>Two main issues to deal with:</p> <ol> <li>Failures of various kinds, such as hardware failures and system crashes</li> <li>Concurrent execution of multiple transactions</li> </ol>"},{"location":"Computer_Science/DB/Chapter17/#acid-properties","title":"ACID Properties","text":"<p>\u5b8c\u6574\u5730\u63cf\u8ff0\u4e8b\u52a1\u7684\u6267\u884c\uff0c\u9700\u8981\u6ee1\u8db3 ACID \u56db\u4e2a\u7279\u6027\uff1a</p> <ol> <li>Atomicity\uff08\u539f\u5b50\u6027\uff09. Either all operations of the transaction are properly reflected in the database or none are.</li> </ol> <p>\u4e8b\u52a1\u662f\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u64cd\u4f5c\u5355\u5143\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u56de\u6eda\u3002\u4e0d\u5141\u8bb8\u90e8\u5206\u6267\u884c\u7684\u60c5\u51b5\u3002</p> <ol> <li>Consistency\uff08\u4e00\u81f4\u6027\uff09. Execution of a transaction in isolation preserves the consistency of the database.</li> </ol> <p>\u4e8b\u52a1\u6267\u884c\u524d\u540e\uff0c\u6570\u636e\u5e93\u5fc5\u987b\u4fdd\u6301\u4e00\u81f4\u6027\u72b6\u6001\uff08\u5373\u6ee1\u8db3\u9884\u5b9a\u4e49\u7684\u89c4\u5219\u548c\u7ea6\u675f\uff09\u3002\u4f8b\u5982\uff0c\u8f6c\u8d26\u64cd\u4f5c\u524d\u540e\uff0c\u8d26\u6237\u603b\u91d1\u989d\u5e94\u4fdd\u6301\u4e0d\u53d8\u3002</p> <ol> <li>Isolation\uff08\u9694\u79bb\u6027\uff09. Although multiple transactions may execute concurrently, each transaction must be unaware of other concurrently executing transactions. Intermediate transaction results must be hidden from other  concurrently executed transactions. </li> </ol> <p>That is, for every pair of transactions \\(T_i\\) and \\(T_j\\) , it appears to \\(T_i\\) that either  \\(T_j\\) finished execution before \\(T_i\\) started, or \\(T_j\\) started execution after \\(T_i\\) finished.</p> <p>\u591a\u4e2a\u5e76\u53d1\u4e8b\u52a1\u6267\u884c\u65f6\uff0c\u5f7c\u6b64\u4e92\u4e0d\u5e72\u6270\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u611f\u89c9\u4e0d\u5230\u5176\u4ed6\u4e8b\u52a1\u540c\u65f6\u5728\u8fd0\u884c\u3002\u901a\u8fc7\u9694\u79bb\u7ea7\u522b\uff08\u5982\u8bfb\u672a\u63d0\u4ea4\u3001\u8bfb\u5df2\u63d0\u4ea4\u7b49\uff09\u63a7\u5236\u53ef\u89c1\u6027\u3002</p> <ol> <li>Durability\uff08\u6301\u4e45\u6027\uff09. After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures.</li> </ol> <p>\u4e8b\u52a1\u4e00\u65e6\u63d0\u4ea4\uff0c\u5176\u5bf9\u6570\u636e\u5e93\u7684\u4fee\u6539\u5c31\u662f\u6c38\u4e45\u6027\u7684\uff0c\u5373\u4f7f\u7cfb\u7edf\u6545\u969c\uff08\u5982\u65ad\u7535\uff09\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002</p> \u4e3a\u4ec0\u4e48\u65ad\u7535\u53ef\u80fd\u5f71\u54cd\u6301\u4e45\u6027\uff1f <p>WAL\uff08Write-Ahead Logging\uff09: \u5728\u4fee\u6539\u6570\u636e\u4e4b\u524d\uff0c\u6570\u636e\u5e93\u4f1a\u5148\u5c06\u53d8\u66f4\u8bb0\u5f55\u5199\u5165\u65e5\u5fd7\uff08\u987a\u5e8f\u5199\u5165\uff09\uff0c\u518d\u5199\u5165\u5b9e\u9645\u6570\u636e\u6587\u4ef6\uff08\u53ef\u80fd\u968f\u673a\u5199\u5165\uff09\u3002\u8fd9\u6837\u5373\u4f7f\u7cfb\u7edf\u5d29\u6e83\uff0c\u4e5f\u80fd\u901a\u8fc7\u65e5\u5fd7\u6062\u590d\u6570\u636e\uff0c\u786e\u4fdd\u6301\u4e45\u6027\uff08Durability\uff09\u3002</p> <p>LSM-Tree\uff08Log-Structured Merge-Tree\uff09: \u6570\u636e\u5199\u5165\u65f6 \u5148\u8ffd\u52a0\u5230\u5185\u5b58\uff08MemTable\uff09\uff0c\u518d\u987a\u5e8f\u5199\u5165\u78c1\u76d8\uff08SSTable\uff09\uff0c\u907f\u514d\u968f\u673a\u5199\u5165\u3002\u8bfb\u53d6\u65f6\u53ef\u80fd\u9700\u8981\u5408\u5e76\u591a\u4e2a SSTable\uff0c\u4f46\u5199\u5165\u6027\u80fd\u6781\u9ad8\u3002</p>"},{"location":"Computer_Science/DB/Chapter17/#a-simple-transaction-model","title":"A Simple Transaction Model","text":"<p>Transactions access data using two operations:</p> <ul> <li>read(X), which transfers the data item X from the database to a variable, also called X\uff0c in a work area in main memory belonging to the transaction that executed the read operation.</li> <li>write(X), which transfers the value in the variable X in the main memory work area of the transaction that executed the write operation to the datat item X in database.</li> </ul> <p></p>"},{"location":"Computer_Science/DB/Chapter17/#example-of-fund-transfer","title":"Example of Fund Transfer","text":"<p>Transaction to transfer $50 from account A to account B:</p> <ol> <li>read(A)</li> <li>A := A \u2013 50</li> <li>write(A)</li> </ol> <ol> <li>read(B)</li> <li>B := B + 50</li> <li>write(B)</li> </ol> <p></p> <p>Atomicity requirement \u2014\u2014 if the transaction fails after step 3 and before step 6, money will be \"lost\" leading to an inconsistent database state</p> <ul> <li>Failure could be due to software or hardware</li> </ul> <p>the system should ensure that updates of a partially executed transaction are not reflected in the database</p> <p>Durability requirement \u2014 once the user has been notified that the transaction has completed (i.e., the transfer of the $50 has taken place), the updates to the database by the transaction must persist even if there are software or hardware failures.</p> <p>Consistency requirement in above example: the sum of A and B is unchanged by the execution of the transaction</p> <p>In general, consistency requirements include:</p> <p>\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\u4e0d\u4ec5\u9650\u4e8e\u7b80\u5355\u7684\u6570\u503c\u5173\u7cfb\uff0c\u8fd8\u5305\u62ec\u4ee5\u4e0b\u4e24\u7c7b\u7ea6\u675f\uff1a</p> <ul> <li>Explicitly\uff08\u663e\u5f0f\uff09 specified integrity constraints : primary keys , foreign keys</li> </ul> <p>\u7531\u6570\u636e\u5e93 schema \u660e\u786e\u5b9a\u4e49\uff0c\u7cfb\u7edf\u81ea\u52a8\u5f3a\u5236\u6267\u884c\uff0c\u4f8b\u5982\uff1a</p> <ol> <li>\u4e3b\u952e\uff08Primary Key\uff09\uff1a\u503c\u5fc5\u987b\u552f\u4e00\u4e14\u975e\u7a7a\u3002</li> <li>\u5916\u952e\uff08Foreign Key\uff09\uff1a\u5f15\u7528\u7684\u503c\u5fc5\u987b\u5728\u53e6\u4e00\u8868\u4e2d\u5b58\u5728\u3002</li> <li><code>CHECK</code> \u7ea6\u675f\uff1a\u5982 \u4f59\u989d &gt;= 0\u3002</li> </ol> <ul> <li>Implicit \uff08\u9690\u5f0f\uff09 integrity constraints, e.g. : sum of balances of all accounts minus sum of loan amounts must equal value of cash-in-hand</li> </ul> <p>\u7531\u4e1a\u52a1\u903b\u8f91\u51b3\u5b9a\uff0c\u9700\u901a\u8fc7\u4e8b\u52a1\u4ee3\u7801\u4fdd\u8bc1\uff0c\u4f8b\u5982\uff1a</p> <ol> <li>\"\u73b0\u91d1-\u8d26\u6237-\u8d37\u6b3e\"\u5e73\u8861\uff1a\u6240\u6709\u8d26\u6237\u4f59\u989d\u603b\u548c - \u8d37\u6b3e\u603b\u989d = \u73b0\u91d1\u6301\u6709\u91cf\u3002</li> <li>\u5e93\u5b58\u4e0e\u8ba2\u5355\u5339\u914d\uff1a\u5df2\u552e\u5546\u54c1\u6570 \u2264 \u5e93\u5b58\u603b\u6570\u3002</li> </ol> <p>A transaction must see a consistent database.</p> <p>During transaction execution the database may be temporarily inconsistent.</p> <p>\u4e34\u65f6\u4e0d\u4e00\u81f4\u662f\u5141\u8bb8\u7684\uff1a\u4e8b\u52a1\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u77ed\u6682\u8fdd\u53cd\u7ea6\u675f\uff08\u5982\u8f6c\u8d26\u65f6 A \u5df2\u6263\u6b3e\u4f46 B \u672a\u5230\u8d26\uff09\u3002</p> <p>When the transaction completes successfully the database must be consistent. Erroneous transaction logic can lead to inconsistency</p> <p>\u4e8b\u52a1\u63d0\u4ea4\u65f6\uff0c\u6240\u6709\u7ea6\u675f\u5fc5\u987b\u88ab\u6ee1\u8db3\u3002\u9519\u8bef\u903b\u8f91\u5bfc\u81f4\u4e0d\u4e00\u81f4\uff0c\u5982\u679c\u4e8b\u52a1\u4ee3\u7801\u672c\u8eab\u6709 bug\uff08\u4f8b\u5982\u6f0f\u5199 write(B)\uff09\uff0c\u5373\u4f7f\u4e8b\u52a1\u6210\u529f\u63d0\u4ea4\uff0c\u4e5f\u4f1a\u7834\u574f\u4e00\u81f4\u6027\u3002\u6b64\u65f6\u9700\u901a\u8fc7\u5e94\u7528\u5c42\u6821\u9a8c\u6216\u89e6\u53d1\u5668\uff08Triggers\uff09\u989d\u5916\u4fdd\u969c\u3002</p> <p>Isolation requirement \u2014 if between steps 3 and 6, another transaction T2 is allowed to access the partially updated database, it will see an inconsistent database (the sum A + B will be less than it should be).</p> <p>\u5728\u94f6\u884c\u8f6c\u8d26\u7684\u4f8b\u5b50\u4e2d\uff1a  </p> <ol> <li>\u4e8b\u52a1 T1 \u6267\u884c\uff1a</li> </ol> <ul> <li><code>read(A)</code>, A=100 \u2192 <code>A := A - 50</code> \u2192 <code>write(A)</code>, A=50  </li> <li>\u6b64\u65f6\u4e8b\u52a1 T1 \u8fd8\u672a\u6267\u884c <code>write(B)</code>\uff08B \u4ecd\u4e3a 200\uff09\u3002</li> </ul> <ol> <li>\u82e5\u53e6\u4e00\u4e2a\u4e8b\u52a1 T2 \u5728\u6b64\u65f6\u8bfb\u53d6 A \u548c B\uff1a</li> </ol> <ul> <li>T2 \u770b\u5230 A=50, B=200 \u2192 A + B = 250 \u2260 \u521d\u59cb\u503c 300\uff08\u4e0d\u4e00\u81f4\u72b6\u6001\uff09\u3002  </li> </ul> <p>\u8fd9\u79cd\u95ee\u9898\u79f0\u4e3a \u810f\u8bfb\uff08Dirty Read\uff09\uff0c\u5373\u4e8b\u52a1\u8bfb\u5230\u4e86\u5176\u4ed6\u4e8b\u52a1\u672a\u63d0\u4ea4\u7684\u4e2d\u95f4\u7ed3\u679c\uff0c\u7834\u574f\u4e86\u6570\u636e\u4e00\u81f4\u6027\u3002  </p> <p>\u9694\u79bb\u6027\u8981\u6c42\uff1a</p> <ul> <li>\u5e76\u53d1\u6267\u884c\u7684\u4e8b\u52a1\u5fc5\u987b\u8868\u73b0\u5f97\u50cf\u4e32\u884c\u6267\u884c\uff08Serial Execution\uff09\u4e00\u6837\uff0c\u5373\u6bcf\u4e2a\u4e8b\u52a1\u5728\u6267\u884c\u671f\u95f4\u770b\u4e0d\u5230\u5176\u4ed6\u4e8b\u52a1\u7684\u4e2d\u95f4\u72b6\u6001\u3002  </li> <li> <p>\u89e3\u51b3\u65b9\u6848\uff1a</p> </li> <li> <p>\u5b8c\u5168\u4e32\u884c\u5316\uff1a\u4e8b\u52a1\u4e00\u4e2a\u63a5\u4e00\u4e2a\u6267\u884c\uff08\u7b80\u5355\u4f46\u6027\u80fd\u5dee\uff09\u3002  </p> </li> <li>\u5e76\u53d1\u63a7\u5236\u6280\u672f\uff08\u5982\u9501\u3001\u591a\u7248\u672c\u63a7\u5236\uff09\uff1a\u5728\u4fdd\u8bc1\u9694\u79bb\u6027\u7684\u540c\u65f6\u63d0\u5347\u6027\u80fd\u3002  </li> </ul> <p></p> <p>Isolation can be ensured trivially by running transactions serially\uff08\u4e32\u884c\uff09, that is, one after the other.</p> <p>However, executing multiple transactions concurrently has significant benefits, as we will see later.</p> <p>\u5c3d\u7ba1\u4e32\u884c\u6267\u884c\u80fd\u4fdd\u8bc1\u9694\u79bb\u6027\uff0c\u4f46\u5b9e\u9645\u573a\u666f\u4e2d \u5e76\u53d1\uff08Concurrency\uff09\u662f\u5fc5\u987b\u7684\uff0c\u539f\u56e0\u5305\u62ec\uff1a - \u63d0\u9ad8\u541e\u5410\u91cf\uff1a\u907f\u514d CPU \u548c\u78c1\u76d8 I/O \u7a7a\u95f2\u3002 - \u51cf\u5c11\u5ef6\u8fdf\uff1a\u77ed\u4e8b\u52a1\u65e0\u9700\u7b49\u5f85\u957f\u4e8b\u52a1\u5b8c\u6210\u3002 - \u7528\u6237\u4f53\u9a8c\uff1a\u652f\u6301\u591a\u7528\u6237\u540c\u65f6\u64cd\u4f5c\uff08\u5982\u94f6\u884c\u7cfb\u7edf\u3001\u7535\u5546\u79d2\u6740\uff09\u3002</p>"},{"location":"Computer_Science/DB/Chapter17/#transaction-state","title":"Transaction State","text":"<p>A transaction must be in one of the following states:</p> <ol> <li>Active \u2013 the initial state; the transaction stays in this state while it is executing</li> </ol> <p>\u521d\u59cb\u72b6\u6001\uff0c\u4e8b\u52a1\u5f00\u59cb\u6267\u884c <code>read/write</code> \u64cd\u4f5c\u3002</p> <ol> <li>Partially committed \u2013 after the final statement has been executed.</li> </ol> <p>\u6700\u7ec8\u8bed\u53e5\u6267\u884c\u5b8c\u6210\uff0c\u4f46\u5c1a\u672a\u786e\u8ba4\u662f\u5426\u6210\u529f\u63d0\u4ea4\u3002\u6b64\u65f6\u7cfb\u7edf\u4f1a\u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u4e00\u81f4\u6027\uff08\u5982 <code>A + B</code> \u603b\u548c\u662f\u5426\u6b63\u786e\uff09\u548c\u6301\u4e45\u6027\uff08\u65e5\u5fd7\u662f\u5426\u843d\u76d8\uff09\u3002</p> <ol> <li>Failed -- after the discovery that normal execution can no longer proceed.</li> </ol> <p>\u53d1\u73b0\u65e0\u6cd5\u7ee7\u7eed\u6b63\u5e38\u6267\u884c\uff08\u5982\u8fdd\u53cd\u7ea6\u675f\u3001\u7cfb\u7edf\u5d29\u6e83\u3001\u6b7b\u9501\uff09\u3002</p> <ol> <li>Aborted \u2013 after the transaction has been rolled back and the database restored to its state prior to the start of the transaction. </li> </ol> <p>\u4e8b\u52a1\u5df2\u56de\u6eda\uff0c\u6570\u636e\u5e93\u6062\u590d\u5230\u4e8b\u52a1\u5f00\u59cb\u524d\u7684\u72b6\u6001\u3002</p> <p>Two options after it has been aborted:</p> <ul> <li>restart the transaction \u91cd\u65b0\u6267\u884c\u4e8b\u52a1\uff08\u9002\u7528\u4e8e\u4e34\u65f6\u9519\u8bef\uff0c\u5982\u6b7b\u9501\uff09\u3002</li> <li>kill the transaction \u76f4\u63a5\u653e\u5f03\u4e8b\u52a1\uff08\u9002\u7528\u4e8e\u903b\u8f91\u9519\u8bef\uff0c\u5982\u4f59\u989d\u4e0d\u8db3\uff09\u3002</li> </ul> <ol> <li>Committed \u2013 after successful completion.</li> </ol> <p>\u6210\u529f\u5b8c\u6210\uff0c\u6240\u6709\u4fee\u6539\u6c38\u4e45\u751f\u6548\uff0c\u5176\u4ed6\u4e8b\u52a1\u53ef\u89c1\u3002</p> <p></p> <pre><code>Active \u2192 Partially Committed \u2192 Committed\n  \u2193\nFailed \u2192 Aborted\n  \u2193\nRestart (\u56de\u5230 Active) \u6216 Kill\n</code></pre>"},{"location":"Computer_Science/DB/Chapter17/#concurrent-executions","title":"Concurrent Executions","text":"<p>Multiple transactions are allowed to run concurrently in the system.</p> <p>Advantages are:</p> <p>increased processor and disk utilization, leading to better transaction throughput</p> <ul> <li>E.g. one transaction can be using the CPU while another is reading from or writing to the disk</li> </ul> <p>reduced average response time for transactions: short transactions need not wait behind long ones.</p> <p>\u5141\u8bb8\u591a\u4e2a\u4e8b\u52a1\u540c\u65f6\u8fd0\u884c\uff0c\u4e3b\u8981\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff1a</p> <ol> <li>\u63d0\u9ad8\u8d44\u6e90\u5229\u7528\u7387 CPU \u548c\u78c1\u76d8\u5e76\u884c\u5de5\u4f5c\uff1a\u5f53\u4e00\u4e2a\u4e8b\u52a1\u5728\u7b49\u5f85 I/O\uff08\u5982\u78c1\u76d8\u8bfb\u5199\uff09\u65f6\uff0c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u4f7f\u7528 CPU\u3002</li> <li>\u51cf\u5c11\u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u77ed\u4e8b\u52a1\u65e0\u9700\u7b49\u5f85\u957f\u4e8b\u52a1\u53ef\u4ee5\u907f\u514d\u77ed\u4e8b\u52a1\u88ab\u957f\u4e8b\u52a1\u963b\u585e\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter17/#anomalies-in-concurrent-executions","title":"Anomalies in Concurrent Executions","text":"<p>\u5e76\u53d1\u5f15\u53d1\u7684\u95ee\u9898\uff08Anomalies\uff09\u82e5\u4e0d\u52a0\u4ee5\u63a7\u5236\uff0c\u5e76\u53d1\u4f1a\u5bfc\u81f4\u4ee5\u4e0b\u5f02\u5e38\uff1a</p> <ul> <li>Lost Update\uff08\u4e22\u5931\u4fee\u6539\uff09</li> <li>Dirty Read\uff08\u8bfb\u810f\u6570\u636e\uff09</li> <li>Unrepeatable Read \uff08\u4e0d\u53ef\u91cd\u590d\u8bfb\uff09</li> <li>Phantom Problem\uff08\u5e7d\u7075\u95ee\u9898 \uff09</li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#lost-update","title":"Lost Update(\u4e22\u5931\u4fee\u6539)","text":"<ul> <li>\u4e22\u5931\u4fee\u6539\uff08Lost Update\uff09\u4e24\u4e2a\u4e8b\u52a1\u540c\u65f6\u4fee\u6539\u540c\u4e00\u6570\u636e\uff0c\u540e\u63d0\u4ea4\u7684\u4e8b\u52a1\u8986\u76d6\u524d\u4e00\u4e2a\u4e8b\u52a1\u7684\u4fee\u6539\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#dirty-read","title":"Dirty Read(\u8bfb\u810f\u6570\u636e)","text":"<ul> <li>\u810f\u8bfb\uff08Dirty Read\uff09\u4e8b\u52a1\u8bfb\u53d6\u4e86\u5176\u4ed6\u4e8b\u52a1\u672a\u63d0\u4ea4\u7684\u4e2d\u95f4\u6570\u636e\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#unrepeatable-read","title":"Unrepeatable Read(\u4e0d\u53ef\u91cd\u590d\u8bfb)","text":"<ul> <li>\u4e0d\u53ef\u91cd\u590d\u8bfb\uff08Unrepeatable Read\uff09\u540c\u4e00\u4e8b\u52a1\u5185\u591a\u6b21\u8bfb\u53d6\u540c\u4e00\u6570\u636e\uff0c\u7ed3\u679c\u4e0d\u540c\uff08\u56e0\u5176\u4ed6\u4e8b\u52a1\u4fee\u6539\u4e86\u6570\u636e\uff09\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#phantom-problem","title":"Phantom Problem(\u5e7d\u7075\u95ee\u9898)","text":"<ul> <li>\u5e7b\u8bfb\uff08Phantom Problem\uff09\u540c\u4e00\u4e8b\u52a1\u5185\u591a\u6b21\u6267\u884c\u76f8\u540c\u67e5\u8be2\uff0c\u8fd4\u56de\u7684\u884c\u6570\u4e0d\u540c\uff08\u56e0\u5176\u4ed6\u4e8b\u52a1\u63d2\u5165/\u5220\u9664\u4e86\u6570\u636e\uff09\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#schedules","title":"Schedules","text":"<p>Schedule \u2013 a sequences of instructions that specify the chronological order in which instructions of concurrent transactions are executed</p> <ul> <li>a schedule for a set of transactions must consist of all instructions of those transactions</li> <li>must preserve the order in which the instructions appear in each individual transaction.</li> </ul> <p>A transaction that successfully completes its execution will have a commit instructions as the last statement, by default transaction assumed to execute commit instruction as its last step</p> <p>A transaction that fails to successfully complete its execution will have an abort instruction as the last statement</p> <p>\u8c03\u5ea6\uff08Schedule\uff09\u662f\u591a\u4e2a\u5e76\u53d1\u4e8b\u52a1\u7684\u64cd\u4f5c\u6309\u65f6\u95f4\u987a\u5e8f\u6392\u5217\u7684\u6267\u884c\u5e8f\u5217\u3002\u5b83\u5fc5\u987b\u6ee1\u8db3\uff1a</p> <ol> <li>\u5305\u542b\u6027\uff1a\u5305\u542b\u6240\u6709\u76f8\u5173\u4e8b\u52a1\u7684\u5168\u90e8\u64cd\u4f5c\uff08\u5982 <code>read</code>, <code>write</code>, <code>commit</code>, <code>abort</code>\uff09\u3002</li> <li>\u987a\u5e8f\u4fdd\u6301\u6027\uff1a\u6bcf\u4e2a\u4e8b\u52a1\u5185\u90e8\u7684\u64cd\u4f5c\u987a\u5e8f\u5fc5\u987b\u4fdd\u6301\u4e0d\u53d8\u3002  </li> </ol> <p>\u793a\u4f8b\uff08\u4e24\u4e2a\u4e8b\u52a1 T1 \u548c T2 \u7684\u8c03\u5ea6\uff09\uff1a</p> <pre><code>T1: read(A), write(A), commit  \nT2: read(B), write(B), abort  \n</code></pre> <p>\u53ef\u80fd\u7684\u8c03\u5ea6\uff1a <code>read(A) \u2192 read(B) \u2192 write(A) \u2192 write(B) \u2192 commit \u2192 abort</code> </p> <p>\u8c03\u5ea6\u7684\u5173\u952e\u89c4\u5219</p> <ul> <li>\u6210\u529f\u4e8b\u52a1\uff1a\u5fc5\u987b\u4ee5 <code>commit</code> \u4f5c\u4e3a\u6700\u540e\u4e00\u6761\u6307\u4ee4\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e8b\u52a1\u7684\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u662f <code>commit</code>\uff08\u9664\u975e\u663e\u5f0f\u56de\u6eda\uff09\u3002  </li> <li>\u5931\u8d25\u4e8b\u52a1\uff1a\u5fc5\u987b\u4ee5 <code>abort</code> \u4f5c\u4e3a\u6700\u540e\u4e00\u6761\u6307\u4ee4\u3002\u7cfb\u7edf\u4f1a\u81ea\u52a8\u56de\u6eda\u672a\u63d0\u4ea4\u7684\u4fee\u6539\uff08\u4fdd\u8bc1\u539f\u5b50\u6027\uff09\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#schedule-1","title":"Schedule 1","text":"<p>Let \\(T_1\\) transfer $50 from A to B, and \\(T_2\\) transfer 10% of the balance from A to B. </p> <p>\u4e00\u4e2a\u4e32\u884c\u8c03\u5ea6\u3002</p> <p>A serial schedule in which \\(T_1\\) is followed by \\(T_2\\) :</p> <p></p>"},{"location":"Computer_Science/DB/Chapter17/#schedule-2","title":"Schedule 2","text":"<p>A serial schedule where \\(T_2\\) is followed by \\(T_1\\) :</p> <p></p>"},{"location":"Computer_Science/DB/Chapter17/#schedule-3","title":"Schedule 3","text":"<p>Let \\(T_1\\) and \\(T_2\\) be the transactions defined previously. The following schedule is not a serial schedule, but it is equivalent to Schedule 1.</p> <p></p> <p>In Schedules 1, 2 and 3, the sum A + B is preserved</p>"},{"location":"Computer_Science/DB/Chapter17/#schedule-4","title":"Schedule 4","text":"<p>The following concurrent schedule does not preserve the value of (A + B).</p> <p></p>"},{"location":"Computer_Science/DB/Chapter17/#serializability","title":"Serializability(\u53ef\u4e32\u884c\u5316)","text":"<p>Basic Assumption \u2013 Each transaction preserves database consistency.</p> <p>Thus serial execution of a set of transactions preserves database consistency.</p> <p>A (possibly concurrent) schedule is serializable if it is equivalent to a serial schedule.</p> <ul> <li>\u6838\u5fc3\u5047\u8bbe\uff1a\u6bcf\u4e2a\u4e8b\u52a1\u672c\u8eab\u80fd\u4fdd\u6301\u6570\u636e\u5e93\u4e00\u81f4\u6027\uff08\u5373\u5355\u72ec\u6267\u884c\u65f6\u662f\u6b63\u786e\u7684\uff09\u3002</li> <li>\u4e32\u884c\u8c03\u5ea6\uff08Serial Schedule\uff09\uff1a\u4e8b\u52a1\u4f9d\u6b21\u6267\u884c\uff08\u5982 T1 \u2192 T2 \u2192 T3\uff09\uff0c\u5929\u7136\u4fdd\u8bc1\u4e00\u81f4\u6027\uff0c\u4f46\u6027\u80fd\u4f4e\u3002</li> <li>\u53ef\u4e32\u884c\u5316\u8c03\u5ea6\uff1a\u5e76\u53d1\u8c03\u5ea6\u7684\u6267\u884c\u7ed3\u679c\u7b49\u4ef7\u4e8e\u67d0\u79cd\u4e32\u884c\u8c03\u5ea6\uff0c\u65e2\u4fdd\u6301\u5e76\u53d1\u6027\u80fd\uff0c\u53c8\u4fdd\u8bc1\u4e00\u81f4\u6027\u3002</li> </ul> <p>Different forms of schedule equivalence give rise to the notions of:</p> <ul> <li>conflict serializability(\u51b2\u7a81\u53ef\u4e32\u884c\u5316) \u901a\u8fc7\u4ea4\u6362\u65e0\u51b2\u7a81\u64cd\u4f5c\u7684\u987a\u5e8f\uff0c\u5c06\u5e76\u53d1\u8c03\u5ea6\u8f6c\u6362\u4e3a\u4e32\u884c\u8c03\u5ea6\u3002</li> <li>view serializability\uff08\u89c6\u56fe\u53ef\u4e32\u884c\u5316\uff09\u8c03\u5ea6\u5fc5\u987b\u4fdd\u8bc1\u6240\u6709\u4e8b\u52a1\u770b\u5230\u7684\"\u6570\u636e\u89c6\u56fe\"\u4e0e\u67d0\u79cd\u4e32\u884c\u8c03\u5ea6\u4e00\u81f4\u3002\u5305\u542b\u51b2\u7a81\u53ef\u4e32\u884c\u5316\uff0c\u4f46\u8fd8\u5141\u8bb8\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\uff08\u5982\u76f2\u5199\uff09\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#conflicting-instructions","title":"Conflicting Instructions","text":"<p>Instructions \\(l_i\\) and \\(l_j\\) of transactions \\(T_i\\) and \\(T_j\\) respectively, conflict if and only if there exists some item Q accessed by both \\(l_i\\) and \\(l_j\\) , and at least one of these instructions wrote Q.</p> <p>\u4e24\u6761\u6307\u4ee4 \\(l_i\\)\uff08\u6765\u81ea\u4e8b\u52a1 \\(T_i\\) \uff09\u548c \\(l_j\\)\uff08\u6765\u81ea\u4e8b\u52a1 \\(T_j\\) \uff09\u51b2\u7a81\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a</p> <ul> <li>\u5b83\u4eec\u8bbf\u95ee\u540c\u4e00\u4e2a\u6570\u636e\u9879 Q\uff1b</li> <li>\u4e14\u81f3\u5c11\u6709\u4e00\u6761\u6307\u4ee4\u662f <code>write(Q)</code>\uff08\u5199\u64cd\u4f5c\uff09\u3002</li> </ul> <ol> <li>\\(l_i\\) = read(Q), \\(l_j\\) = read(Q). \\(l_i\\) and \\(l_j\\) don't conflict.</li> <li>\\(l_i\\) = read(Q), \\(l_j\\) = write(Q). They conflict.</li> <li>\\(l_i\\) = write(Q), \\(l_j\\) = read(Q). They conflict.</li> <li>\\(l_i\\) = write(Q), \\(l_j\\) = write(Q). They conflict.</li> </ol> \u6307\u4ee4\u7ec4\u5408 \u662f\u5426\u51b2\u7a81 \u539f\u56e0 <code>read(Q)</code> \u548c <code>read(Q)</code> \u274c \u4e0d\u51b2\u7a81 \u4ec5\u8bfb\u53d6\u6570\u636e\uff0c\u4e0d\u4fee\u6539\uff0c\u987a\u5e8f\u4ea4\u6362\u4e0d\u5f71\u54cd\u7ed3\u679c\u3002 <code>read(Q)</code> \u548c <code>write(Q)</code> \u2705 \u51b2\u7a81 \u8bfb\u64cd\u4f5c\u53ef\u80fd\u8bfb\u5230\u5199\u64cd\u4f5c\u524d\u7684\u65e7\u503c\u6216\u65b0\u503c\uff0c\u987a\u5e8f\u4e0d\u540c\u4f1a\u5bfc\u81f4\u7ed3\u679c\u4e0d\u540c\u3002 <code>write(Q)</code> \u548c <code>read(Q)</code> \u2705 \u51b2\u7a81 \u8bfb\u64cd\u4f5c\u7684\u7ed3\u679c\u4f9d\u8d56\u5199\u64cd\u4f5c\u7684\u987a\u5e8f\uff08\u5148\u5199\u540e\u8bfb or \u5148\u8bfb\u540e\u5199\uff1f\uff09\u3002 <code>write(Q)</code> \u548c <code>write(Q)</code> \u2705 \u51b2\u7a81 \u540e\u4e00\u4e2a\u5199\u64cd\u4f5c\u4f1a\u8986\u76d6\u524d\u4e00\u4e2a\uff0c\u987a\u5e8f\u4e0d\u540c\u4f1a\u5bfc\u81f4\u6700\u7ec8\u6570\u636e\u4e0d\u540c\u3002 <p>Intuitively, a conflict between \\(l_i\\) and \\(l_j\\) forces a (logical) temporal order between them.</p> <p>If \\(l_i\\) and \\(l_j\\) are consecutive in a schedule and they do not conflict, their results would remain the same even if they had been interchanged in the schedule.</p> <p>\u5982\u679c\u4e24\u6761\u6307\u4ee4\u51b2\u7a81\uff0c\u5b83\u4eec\u5728\u8c03\u5ea6\u4e2d\u7684\u987a\u5e8f\u5fc5\u987b\u56fa\u5b9a\uff08\u4e0d\u53ef\u4ea4\u6362\uff09\u3002\u5982\u679c\u4e24\u6761\u6307\u4ee4\u4e0d\u51b2\u7a81\uff0c\u8c03\u6362\u987a\u5e8f\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\uff08\u4e3a\u5e76\u53d1\u4f18\u5316\u63d0\u4f9b\u53ef\u80fd\uff09\u3002</p>"},{"location":"Computer_Science/DB/Chapter17/#conflict-serializability","title":"Conflict Serializability\uff08\u51b2\u7a81\u53ef\u4e32\u884c\u5316\uff09","text":"<p>If a schedule S can be transformed into a schedule S' by a series of swaps of non-conflicting instructions, we say that S and S' are conflict equivalent.</p> <p>\u82e5\u8c03\u5ea6 S \u80fd\u901a\u8fc7\u4ea4\u6362\u975e\u51b2\u7a81\u6307\u4ee4\u7684\u987a\u5e8f\u8f6c\u6362\u4e3a\u8c03\u5ea6 S'\uff0c\u5219\u79f0 S \u548c S' \u662f\u51b2\u7a81\u7b49\u4ef7\u7684\u3002\u4ec5\u5f53\u4e24\u6761\u6307\u4ee4\u4e0d\u51b2\u7a81\uff08\u5982\u5747\u4e3a <code>read</code> \u6216\u8bbf\u95ee\u4e0d\u540c\u6570\u636e\uff09\u65f6\u624d\u80fd\u4ea4\u6362\u3002  </p> <p>We say that a schedule S is conflict serializable if it is conflict equivalent to a serial schedule.</p> <p>\u82e5\u4e00\u4e2a\u5e76\u53d1\u8c03\u5ea6 S \u51b2\u7a81\u7b49\u4ef7\u4e8e\u67d0\u4e2a\u4e32\u884c\u8c03\u5ea6\uff0c\u5219\u79f0 S \u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u3002</p> <p>Schedule 3 can be transformed into Schedule 6, a serial schedule where \\(T_2\\) follows \\(T_1\\)  by series of swaps of nonconflicting instructions. Therefore Schedule 3 is conflict serializable.</p> <p></p> <p>Example of a schedule that is not conflict serializable:</p> <p></p> <p>We are unable to swap instructions in the above schedule to obtain either the serial schedule &lt; \\(T_3\\) , \\(T_4\\) &gt;, or the serial schedule &lt; \\(T_4\\) , \\(T_3\\) &gt;.</p>"},{"location":"Computer_Science/DB/Chapter17/#testing-for-serializability","title":"Testing for Serializability","text":"<p>Consider some schedule of a set of transactions: \\(T_1\\) , \\(T_2\\) , \\(T_3\\) , . . . , \\(T_n\\) .</p> <p>Precedence graph\uff08\u524d\u9a71\u56fe\uff09\u2014 a directed graph where the vertices are the transactions (names). </p> <ul> <li>\u7406\u8bba\u4e0a\u4f7f\u7528\u7684\u3002</li> </ul> <p>\u524d\u9a71\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u7528\u4e8e\u8868\u793a\u5e76\u53d1\u8c03\u5ea6\u4e2d\u4e8b\u52a1\u95f4\u7684\u51b2\u7a81\u4f9d\u8d56\u5173\u7cfb\uff1a</p> <ul> <li>\u9876\u70b9\uff08Vertices\uff09\uff1a\u8868\u793a\u4e8b\u52a1\uff08\u5982 \\(T_1, T_2, \\dots, T_n\\) \uff09\u3002</li> <li>\u8fb9\uff08Arcs\uff09\uff1a\u82e5\u4e8b\u52a1 \\(T_i\\) \u548c \\(T_j\\) \u5b58\u5728\u51b2\u7a81\u64cd\u4f5c\uff0c\u4e14 \\(T_i\\) \u7684\u51b2\u7a81\u64cd\u4f5c\u5148\u4e8e \\(T_j\\) \uff0c\u5219\u753b\u4e00\u6761\u4ece \\(T_i\\) \u6307\u5411 \\(T_j\\) \u7684\u8fb9\u3002</li> <li>\u8fb9\u7684\u6807\u6ce8\uff1a\u53ef\u6ce8\u660e\u5f15\u53d1\u51b2\u7a81\u7684\u6570\u636e\u9879\uff08\u5982 \\(X\\) \uff09\u3002</li> </ul> <p>We draw an arc from \\(T_i\\) to \\(T_j\\) if the two transaction conflict, and \\(T_i\\) accessed the data item on which the conflict arose earlier.</p> <p>\u5bf9\u4e8e\u8c03\u5ea6\u4e2d\u7684\u6bcf\u4e00\u5bf9\u51b2\u7a81\u64cd\u4f5c\uff1a</p> <ol> <li>\u51b2\u7a81\u64cd\u4f5c\u7c7b\u578b\uff1a<code>read-write</code>\u3001<code>write-read</code> \u6216 <code>write-write</code>\uff08<code>read-read</code> \u4e0d\u51b2\u7a81\uff09\u3002</li> <li>\u65b9\u5411\u89c4\u5219\uff1a\u82e5 \\(T_i\\) \u7684\u51b2\u7a81\u64cd\u4f5c\u5728 \\(T_j\\) \u4e4b\u524d\u6267\u884c\uff0c\u5219\u8fb9\u4e3a \\(T_i \\rightarrow T_j\\) \u3002</li> </ol> <p>We may label the arc by the item that was accessed.</p> <p>Example 1</p> <p></p>"},{"location":"Computer_Science/DB/Chapter17/#test-for-conflict-serializability","title":"Test for Conflict Serializability","text":"<p>A schedule is conflict serializable if and only if its precedence graph is acyclic.</p> <p>Cycle-detection algorithms exist which take order \\(n^2\\) time, where n is the number of vertices in the graph. (Better algorithms take order n + e where e is the number of edges.)</p> <p>If precedence graph is acyclic, the serializability order can be obtained by a topological sorting of the graph.</p> <p>This is a linear order consistent with the partial order of the graph.</p> <p>\u82e5\u524d\u9a71\u56fe\u65e0\u73af\uff0c\u53ef\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u5f97\u5230\u7b49\u4ef7\u7684\u4e32\u884c\u8c03\u5ea6\u987a\u5e8f,\u5c06\u56fe\u7684\u9876\u70b9\u6392\u6210\u7ebf\u6027\u5e8f\u5217\uff0c\u4f7f\u5f97\u6240\u6709\u8fb9\u7684\u65b9\u5411\u4e00\u81f4\u3002 </p> <p></p>"},{"location":"Computer_Science/DB/Chapter17/#example-schedule-schedule-a-precedence-graph","title":"Example Schedule (Schedule A) + Precedence Graph","text":"<ul> <li>\u5165\u5ea6\u4e3a 0 \u7684\u62ff\u8fdb\u6765\uff0c\u518d\u51cf\u6389\u8fde\u51fa\u7684\u70b9\u7684\u5165\u5ea6\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#view-serializability","title":"View Serializability\uff08\u89c6\u56fe\u53ef\u4e32\u884c\u5316\uff09","text":"<p>Let S and S' be two schedules with the same set of transactions. </p> <p>S and S' are view equivalent if the following three conditions are met, for each data item Q,</p> <ol> <li>If in schedule S, transaction \\(T_i\\) reads the initial value of Q, then in schedule S' also transaction \\(T_i\\) must read the initial value of Q.</li> <li>If in schedule S transaction \\(T_i\\) executes read(Q), and that value was produced by transaction \\(T_j\\) (if any), then in  schedule S' also transaction \\(T_i\\) must read the value of Q that was produced by the same write(Q) operation of transaction  \\(T_j\\) .</li> <li>The transaction (if any) that performs the final write(Q) operation in schedule S must also perform the final write(Q)  operation in schedule S'.</li> </ol> <p>\u4e24\u4e2a\u8c03\u5ea6 S \u548c S' \u662f\u89c6\u56fe\u7b49\u4ef7\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff08\u5bf9\u6bcf\u4e2a\u6570\u636e\u9879 Q\uff09\uff1a</p> <ol> <li> <p>\u521d\u59cb\u8bfb\u4e00\u81f4\u6027 : \u82e5\u4e8b\u52a1 \\(T_i\\) \u5728 \\(S\\) \u4e2d\u8bfb\u53d6\u4e86 \\(Q\\) \u7684\u521d\u59cb\u503c\uff08\u5373\u5176\u4ed6\u4e8b\u52a1\u672a\u4fee\u6539\u8fc7\u7684\u503c\uff09\uff0c\u5219\u5728 \\(S'\\) \u4e2d \\(T_i\\) \u4e5f\u5fc5\u987b\u8bfb\u53d6 Q \u7684\u521d\u59cb\u503c\u3002\u4fdd\u8bc1\u4e8b\u52a1\u770b\u5230\u7684\u201c\u521d\u59cb\u72b6\u6001\u201d\u4e00\u81f4\u3002</p> </li> <li> <p>\u8bfb\u4f9d\u8d56\u4e00\u81f4\u6027 : \u82e5\u5728 S \u4e2d\uff0c\\(T_i\\) \u7684 <code>read(Q)</code> \u8bfb\u53d6\u7684\u662f \\(T_j\\) \u7684 <code>write(Q)</code> \u7ed3\u679c\uff0c\u5219\u5728 \\(S'\\) \u4e2d \\(T_i\\) \u4e5f\u5fc5\u987b\u4ece\u540c\u4e00\u4e2a \\(T_j\\) \u7684 <code>write(Q)</code> \u8bfb\u53d6\u3002\u4fdd\u8bc1\u4e8b\u52a1\u95f4\u7684\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u4e0d\u53d8\u3002</p> </li> <li> <p>\u6700\u7ec8\u5199\u4e00\u81f4\u6027 : \u82e5\u5728 S \u4e2d\uff0c \\(T_k\\) \u7684 <code>write(Q)</code> \u662f\u6700\u540e\u4e00\u4e2a\u5bf9 Q \u7684\u5199\u64cd\u4f5c\uff0c\u5219\u5728 S' \u4e2d \\(T_k\\) \u4e5f\u5fc5\u987b\u6267\u884c\u6700\u540e\u4e00\u4e2a <code>write(Q)</code>\u3002\u4fdd\u8bc1\u6570\u636e\u7684\u6700\u7ec8\u72b6\u6001\u4e00\u81f4\u3002</p> </li> </ol> <p>\u4e3a\u4ec0\u4e48\u9700\u8981\u89c6\u56fe\u7b49\u4ef7\uff1f</p> <ul> <li>\u6bd4\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u66f4\u5bbd\u677e\uff1a\u89c6\u56fe\u7b49\u4ef7\u5141\u8bb8\u67d0\u4e9b\u975e\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u8c03\u5ea6\uff08\u5982\"\u76f2\u5199\"\u573a\u666f\uff09\u3002  </li> <li> <p>\u66f4\u5f3a\u7684\u8bed\u4e49\u4e00\u81f4\u6027\uff1a\u4e0d\u4ec5\u5173\u6ce8\u64cd\u4f5c\u987a\u5e8f\uff0c\u8fd8\u4fdd\u8bc1\u4e8b\u52a1\u770b\u5230\u7684\u6570\u636e\u89c6\u56fe\u5b8c\u5168\u76f8\u540c\u3002</p> </li> <li> <p>\u82e5\u4e00\u4e2a\u8c03\u5ea6\u89c6\u56fe\u7b49\u4ef7\u4e8e\u67d0\u4e2a\u4e32\u884c\u8c03\u5ea6\uff0c\u5219\u79f0\u5176\u4e3a\u89c6\u56fe\u53ef\u4e32\u884c\u5316\u7684\u3002  </p> </li> <li>\u4e0e\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u5173\u7cfb\uff1a\u6240\u6709\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u8c03\u5ea6\u90fd\u662f\u89c6\u56fe\u53ef\u4e32\u884c\u5316\u7684\uff0c\u4f46\u53cd\u4e4b\u4e0d\u6210\u7acb\u3002</li> </ul> <p>A schedule S is view serializable if it is view equivalent to a serial schedule.</p> <p>Every conflict serializable schedule is also view serializable.</p> <p>Below is a schedule which is view-serializable but not conflict serializable. \u76f2\u5199</p> <p></p> <p>What serial schedule is above equivalent to?</p> <p>T27 \u2013 T28 \u2013 T29</p> <p>\u6b64\u65f6\u4e0d\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\uff08\u56e0\u65e0\u6cd5\u901a\u8fc7\u4ea4\u6362\u65e0\u51b2\u7a81\u6307\u4ee4\u5f97\u5230\u4e32\u884c\u8c03\u5ea6\uff09\u3002</p>"},{"location":"Computer_Science/DB/Chapter17/#other-notions-of-serializability","title":"Other Notions of Serializability","text":"<p>The schedule below produces same outcome as the serial schedule &lt; \\(T_1\\) , \\(T_5\\) &gt;, yet is not conflict equivalent or view equivalent to it.</p> <p>(B-10)+50 = (B+50)-10</p> <ul> <li>In our example, the final result is the same as that of the serial schedule \\(&lt;T_1, T_5&gt;\\) \uff0cbecause of the mathematical fact that the increment and decrement operations are commutative. </li> <li>The general case is not so easy since a transaction may be expressed as a complex SQL statement, a Java program with JDBC calls, etc.</li> </ul> <p></p> <p>Determining such equivalence requires analysis of operations other than read and write.</p>"},{"location":"Computer_Science/DB/Chapter17/#recoverable-schedules","title":"Recoverable Schedules","text":"<p>Recoverable schedule\uff08\u53ef\u6062\u590d\u8c03\u5ea6\uff09 \u2014 if a transaction \\(T_j\\) reads a data item previously written by a transaction \\(T_i\\) , then the commit operation of \\(T_i\\) appears before the commit operation of \\(T_j\\) .</p> <p>\u4e00\u4e2a\u8c03\u5ea6\u662f\u53ef\u6062\u590d\u7684\uff0c\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\u5982\u679c\u4e8b\u52a1 \\(T_j\\) \u8bfb\u53d6\u4e86\u4e8b\u52a1 \\(T_i\\) \u4fee\u6539\u8fc7\u7684\u6570\u636e\u9879\uff0c\u90a3\u4e48 \\(T_i\\) \u7684\u63d0\u4ea4\u64cd\u4f5c\u5fc5\u987b\u53d1\u751f\u5728 \\(T_j\\) \u7684\u63d0\u4ea4\u64cd\u4f5c\u4e4b\u524d\u3002\uff08\u5373\uff1a\u8bfb\u4f9d\u8d56\u7684\u4e8b\u52a1\u5fc5\u987b\u540e\u63d0\u4ea4\uff09</p> <ul> <li>\u907f\u514d\u7ea7\u8054\u56de\u6eda\uff08Cascading Rollback\uff09\uff1a   \u82e5 \\(T_j\\) \u8bfb\u53d6\u4e86\u672a\u63d0\u4ea4\u7684 \\(T_i\\) \u7684\u6570\u636e\uff0c\u4e14 \\(T_i\\) \u540e\u6765\u56de\u6eda\uff0c\u5219 \\(T_j\\) \u4e5f\u5fc5\u987b\u56de\u6eda\uff08\u56e0\u4e3a\u5b83\u8bfb\u5230\u4e86\u810f\u6570\u636e\uff09\u3002  </li> <li>\u4fdd\u8bc1\u6570\u636e\u4e00\u81f4\u6027\uff1a\u786e\u4fdd\u4e8b\u52a1\u53ea\u4f9d\u8d56\u5df2\u63d0\u4ea4\u7684\u6570\u636e\u3002</li> </ul> <p>The following schedule (Schedule 11) is not recoverable if \\(T_9\\) commits immediately after the read</p> <p></p> <p>If \\(T_8\\) should abort, \\(T_9\\) would have read (and possibly shown to the user) an inconsistent database state. Hence, database must ensure that schedules are recoverable.</p>"},{"location":"Computer_Science/DB/Chapter17/#cascading-rollbacks","title":"Cascading Rollbacks","text":"<p>Cascading rollback \u2013 a single transaction failure leads to a series of transaction rollbacks. Consider the following schedule where none of the transactions has yet committed (so the schedule is recoverable)</p> <p></p> <p>If \\(T_{10}\\) fails, \\(T_{11}\\) and \\(T_{12}\\) must also be rolled back.</p> <p>Can lead to the undoing of a significant amount of work</p> <p>\u4e00\u4e2a\u4e8b\u52a1\u7684\u56de\u6eda\u5bfc\u81f4\u5176\u4ed6\u4f9d\u8d56\u5b83\u7684\u4e8b\u52a1\u4e5f\u5fc5\u987b\u56de\u6eda\uff0c\u5f62\u6210\u8fde\u9501\u53cd\u5e94\u3002</p> <ul> <li>\u89e6\u53d1\u6761\u4ef6\uff1a\u4e8b\u52a1 \\(T_j\\) \u8bfb\u53d6\u4e86\u672a\u63d0\u4ea4\u4e8b\u52a1 \\(T_i\\) \u4fee\u6539\u7684\u6570\u636e\uff0c\u4e14 \\(T_i\\) \u6700\u7ec8\u56de\u6eda\u3002  </li> <li>\u95ee\u9898\uff1a  </li> <li>\u5927\u91cf\u5df2\u5b8c\u6210\u7684\u5de5\u4f5c\u88ab\u64a4\u9500\uff08\u6d6a\u8d39\u8d44\u6e90\uff09\u3002  </li> <li>\u7cfb\u7edf\u9700\u8981\u8ddf\u8e2a\u590d\u6742\u7684\u4f9d\u8d56\u94fe\uff0c\u589e\u52a0\u6062\u590d\u590d\u6742\u5ea6\u3002 </li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#cascadeless-schedules","title":"Cascadeless Schedules","text":"<p>Cascadeless schedules\uff08\u65e0\u7ea7\u8054\u8c03\u5ea6\uff09 \u2014 cascading rollbacks cannot occur; for each pair of transactions \\(T_i\\) and \\(T_j\\) such that \\(T_j\\) reads a data  item previously written by \\(T_i\\) , the commit operation of \\(T_i\\) appears before the read operation of \\(T_j\\).</p> <p>\u4e8b\u52a1\u53ea\u80fd\u8bfb\u53d6\u5df2\u63d0\u4ea4\u4e8b\u52a1\u4fee\u6539\u7684\u6570\u636e\uff08\u5373\u7981\u6b62\u8bfb\u53d6\u672a\u63d0\u4ea4\u7684\u6570\u636e\uff09\u3002</p> <ul> <li>\u4f18\u70b9\uff1a  </li> <li>\u5b8c\u5168\u907f\u514d\u7ea7\u8054\u56de\u6eda\u3002  </li> <li>\u6062\u590d\u66f4\u9ad8\u6548\uff08\u65e0\u9700\u68c0\u67e5\u4f9d\u8d56\u94fe\uff09\u3002 </li> <li>\u7f3a\u70b9\uff1a  </li> <li>\u4e8b\u52a1\u7684\u5e76\u53d1\u5ea6\u964d\u4f4e\u4e86\uff0c\u541e\u5410\u7387\u4e0b\u964d\u3002</li> </ul> <p>Every cascadeless schedule is also recoverable</p> <p>It is desirable to restrict the schedules to those that are cascadeless</p>"},{"location":"Computer_Science/DB/Chapter17/#concurrency-control-serializability","title":"Concurrency Control &amp; Serializability","text":"<p>A database must provide a mechanism that will ensure that all possible schedules are</p> <ul> <li>either conflict or view serializable, and </li> <li>are recoverable and preferably cascadeless</li> </ul> <p>Testing a schedule for serializability after it has executed is a little too late!</p> <p>Goal \u2013 to develop concurrency control protocols that will assure serializability.</p> <p>Concurrency-control protocols allow concurrent schedules, but ensure that the schedules are conflict/view serializable, and are recoverable and cascadeless.</p> <p>Concurrency control protocols generally do not examine the precedence graph as it is being created</p> <p>Instead a protocol imposes a discipline that avoids nonseralizable schedules.</p> <p>Different concurrency control protocols provide different tradeoffs between the amount of concurrency they allow and the amount of overhead that they incur.</p> <p>Tests for serializability help us understand why a concurrency control protocol is correct.</p> <p>1. \u6570\u636e\u5e93\u7684\u6838\u5fc3\u8981\u6c42 </p> <p>\u6570\u636e\u5e93\u5fc5\u987b\u786e\u4fdd\u6240\u6709\u53ef\u80fd\u7684\u8c03\u5ea6\uff08Schedule\uff09\u6ee1\u8db3\uff1a</p> <ol> <li>\u53ef\u4e32\u884c\u5316\uff08Conflict/View Serializable\uff09    - \u5e76\u53d1\u6267\u884c\u7684\u7ed3\u679c\u5fc5\u987b\u7b49\u4ef7\u4e8e\u67d0\u79cd\u4e32\u884c\u6267\u884c\u987a\u5e8f\u3002  </li> <li>\u53ef\u6062\u590d\u6027\uff08Recoverable\uff09    - \u4e8b\u52a1\u63d0\u4ea4\u987a\u5e8f\u5fc5\u987b\u4fdd\u8bc1\u4f9d\u8d56\u5173\u7cfb\u6b63\u786e\uff08\u8bfb\u5df2\u63d0\u4ea4\u6570\u636e\uff09\u3002  </li> <li>\u65e0\u7ea7\u8054\u6027\uff08Cascadeless\uff0c\u7406\u60f3\u60c5\u51b5\uff09    - \u7981\u6b62\u4e8b\u52a1\u8bfb\u53d6\u672a\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u907f\u514d\u7ea7\u8054\u56de\u6eda\u3002  </li> </ol> <p>2. \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u4e8b\u540e\u68c0\u6d4b\uff1f</p> <ul> <li>\u95ee\u9898\uff1a\u5982\u679c\u7b49\u8c03\u5ea6\u6267\u884c\u5b8c\u518d\u68c0\u6d4b\u53ef\u4e32\u884c\u5316\uff0c\u53d1\u73b0\u51b2\u7a81\u65f6\u4e3a\u65f6\u5df2\u665a\uff08\u6570\u636e\u53ef\u80fd\u5df2\u4e0d\u4e00\u81f4\uff09\u3002  </li> <li>\u89e3\u51b3\u65b9\u6848\uff1a\u901a\u8fc7\u5e76\u53d1\u63a7\u5236\u534f\u8bae\u63d0\u524d\u7ea6\u675f\u4e8b\u52a1\u884c\u4e3a\uff0c\u4ece\u6e90\u5934\u907f\u514d\u975e\u53ef\u4e32\u884c\u5316\u8c03\u5ea6\u3002  </li> </ul> <p>3. \u5e76\u53d1\u63a7\u5236\u534f\u8bae\u7684\u4f5c\u7528</p> <ul> <li>\u6838\u5fc3\u529f\u80fd\uff1a</li> <li> <p>\u5141\u8bb8\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\uff0c\u4f46\u5f3a\u5236\u9075\u5b88\u89c4\u5219\uff0c\u786e\u4fdd\u8c03\u5ea6\u6ee1\u8db3\uff1a  </p> <ul> <li>\u53ef\u4e32\u884c\u5316\uff08\u51b2\u7a81\u6216\u89c6\u56fe\u53ef\u4e32\u884c\u5316\uff09\u3002  </li> <li>\u53ef\u6062\u590d\u6027 + \u65e0\u7ea7\u8054\u6027\uff08\u907f\u514d\u7ea7\u8054\u56de\u6eda\uff09\u3002</li> </ul> </li> <li> <p>\u5b9e\u73b0\u65b9\u5f0f\uff1a</p> </li> <li>\u4e0d\u52a8\u6001\u68c0\u67e5\u4f18\u5148\u56fe\uff08Precedence Graph\uff09\uff0c\u800c\u662f\u901a\u8fc7\u534f\u8bae\u89c4\u5219\uff08\u5982\u9501\u3001\u65f6\u95f4\u6233\uff09\u9650\u5236\u4e8b\u52a1\u64cd\u4f5c\u987a\u5e8f\u3002  </li> </ul> <p>\u6743\u8861\uff1a</p> <ul> <li>\u5e76\u53d1\u6027\u8d8a\u9ad8\uff08\u5982MVCC\u3001OCC\uff09\uff0c\u7cfb\u7edf\u541e\u5410\u91cf\u8d8a\u5927\uff0c\u4f46\u53ef\u80fd\u589e\u52a0\u5185\u5b58\u6216CPU\u5f00\u9500\u3002  </li> <li>\u7ea6\u675f\u8d8a\u4e25\u683c\uff08\u5982\u4e25\u683c2PL\uff09\uff0c\u4e00\u81f4\u6027\u8d8a\u5f3a\uff0c\u4f46\u5e76\u53d1\u6027\u964d\u4f4e\uff08\u66f4\u591a\u963b\u585e\uff09\u3002  </li> </ul>"},{"location":"Computer_Science/DB/Chapter17/#weak-levels-of-consistency","title":"Weak Levels of Consistency","text":"<p>Some applications are willing to live with weak levels of consistency, allowing schedules that are not serializable</p> <p>\u67d0\u4e9b\u5e94\u7528\u53ef\u4ee5\u63a5\u53d7\u975e\u53ef\u4e32\u884c\u5316\uff08Non-serializable\uff09\u7684\u8c03\u5ea6\uff0c\u4ee5\u6362\u53d6\u66f4\u9ad8\u7684\u6027\u80fd\u6216\u66f4\u4f4e\u7684\u5ef6\u8fdf\u3002\u8fd9\u79cd\u5f31\u4e00\u81f4\u6027\uff08Weak Consistency\uff09\u9002\u7528\u4e8e\u5bf9\u6570\u636e\u51c6\u786e\u6027\u8981\u6c42\u4e0d\u4e25\u683c\u7684\u573a\u666f\u3002</p> <ul> <li>E.g. a read-only transaction that wants to get an approximate total balance of all accounts </li> <li>E.g. database statistics computed for query optimization can be approximate </li> <li>Such transactions need not be serializable with respect to other transactions</li> </ul> <ol> <li>\u8fd1\u4f3c\u67e5\u8be2\uff08Approximate Queries\uff09</li> </ol> <ul> <li>\u793a\u4f8b\uff1a\u7edf\u8ba1\u6240\u6709\u8d26\u6237\u7684\u603b\u4f59\u989d\uff08\u5141\u8bb8\u8bef\u5dee\uff09\u3002  </li> <li>\u539f\u56e0\uff1a<ul> <li>\u8bfb\u64cd\u4f5c\u4e0d\u9700\u8981\u7cbe\u786e\u540c\u6b65\u6700\u65b0\u5199\u5165\uff0c\u53ef\u4ee5\u5bb9\u5fcd\u810f\u8bfb\u6216\u8fc7\u671f\u6570\u636e\u3002</li> <li>\u907f\u514d\u9501\u7ade\u4e89\uff0c\u63d0\u5347\u541e\u5410\u91cf\u3002</li> </ul> </li> </ul> <ol> <li>\u6570\u636e\u5e93\u7edf\u8ba1\u4fe1\u606f\uff08Statistics for Query Optimization\uff09</li> </ol> <ul> <li>\u793a\u4f8b\uff1a\u8ba1\u7b97\u8868\u7684\u884c\u6570\u3001\u5217\u5206\u5e03\uff08\u7528\u4e8e\u67e5\u8be2\u4f18\u5316\u5668\uff09\u3002</li> <li>\u539f\u56e0\uff1a<ul> <li>\u7edf\u8ba1\u4fe1\u606f\u672c\u8eab\u662f\u8fd1\u4f3c\u503c\uff08\u5982\u901a\u8fc7\u91c7\u6837\u800c\u975e\u5168\u8868\u626b\u63cf\uff09\u3002</li> <li>\u5b9e\u65f6\u4e00\u81f4\u6027\u5bf9\u4f18\u5316\u5668\u5f71\u54cd\u6709\u9650\u3002</li> </ul> </li> </ul> <p>Tradeoff accuracy for performance</p>"},{"location":"Computer_Science/DB/Chapter17/#transaction-isolation-levels","title":"Transaction Isolation Levels","text":"<ul> <li>Serializable \u2014 default</li> <li>Repeatable read \u2014 only committed records to be read, repeated reads of same record must return same value. However, a transaction may not be serializable \u2013 it may find some records inserted by a transaction but not find others.</li> <li>Read committed \u2014 only committed records can be read, but successive reads of record may return different (but committed) values.</li> <li>Read uncommitted \u2014 even uncommitted records may be read.</li> </ul> <p>\u9694\u79bb\u7ea7\u522b\u5b9a\u4e49\u4e8b\u52a1\u95f4\u7684\u53ef\u89c1\u6027\u89c4\u5219\uff0c\u4ece\u5f3a\u5230\u5f31\u5206\u4e3a4\u79cd\u6807\u51c6\u7ea7\u522b\uff1a</p> \u9694\u79bb\u7ea7\u522b \u810f\u8bfb \u4e0d\u53ef\u91cd\u590d\u8bfb \u5e7b\u8bfb \u6027\u80fd \u9002\u7528\u573a\u666f Serializable\uff08\u53ef\u4e32\u884c\u5316\uff09 \u274c \u274c \u274c \u6700\u4f4e \u91d1\u878d\u4ea4\u6613\u3001\u5e93\u5b58\u7ba1\u7406 Repeatable Read\uff08\u53ef\u91cd\u590d\u8bfb\uff09 \u274c \u274c \u2705 \u4e2d \u5927\u591a\u6570OLTP\u7cfb\u7edf\uff08MySQL\u9ed8\u8ba4\uff09 Read Committed\uff08\u8bfb\u5df2\u63d0\u4ea4\uff09 \u274c \u2705 \u2705 \u8f83\u9ad8 \u62a5\u8868\u67e5\u8be2\uff08Oracle/PostgreSQL\u9ed8\u8ba4\uff09 Read Uncommitted\uff08\u8bfb\u672a\u63d0\u4ea4\uff09 \u2705 \u2705 \u2705 \u6700\u9ad8 \u8fd1\u4f3c\u7edf\u8ba1\uff08\u6781\u5c11\u4f7f\u7528\uff09 <ol> <li> <p>Serializable, \u6700\u4e25\u683c\uff1a\u5b8c\u5168\u7981\u6b62\u810f\u8bfb\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u548c\u5e7b\u8bfb</p> </li> <li> <p>Repeatable Read : \u4fdd\u8bc1\u540c\u4e00\u4e8b\u52a1\u5185\u591a\u6b21\u8bfb\u53d6\u76f8\u540c\u8bb0\u5f55\u7ed3\u679c\u4e00\u81f4\uff0c\u4f46\u53ef\u80fd\u770b\u5230\u5176\u4ed6\u4e8b\u52a1\u65b0\u589e\u7684\u8bb0\u5f55</p> </li> <li> <p>Read Committed : \u53ea\u8bfb\u53d6\u5df2\u63d0\u4ea4\u6570\u636e\uff0c\u5141\u8bb8\u4e0d\u53ef\u91cd\u590d\u8bfb(\u540c\u4e00\u4e8b\u52a1\u5185\u53ef\u80fd\u8bfb\u5230\u4e0d\u540c\u7248\u672c)</p> </li> <li> <p>Read Uncommitted : \u6700\u4f4e\u9694\u79bb\u7ea7\u522b\uff0c\u5141\u8bb8\u8bfb\u53d6\u672a\u63d0\u4ea4\u6570\u636e(\u810f\u8bfb)</p> </li> </ol> <p>Lower degrees of consistency useful for gathering approximate information about the database </p> <p>Warning: some database systems do not ensure serializable schedules by default</p> <p>E.g. Oracle and PostgreSQL by default support a level of consistency called snapshot isolation (not part of the SQL standard)</p>"},{"location":"Computer_Science/DB/Chapter17/#transaction-definition-in-sql","title":"Transaction Definition in SQL","text":"<p>In SQL, a transaction begins implicitly.</p> <p>\u5728SQL\u4e2d\uff0c\u5f53\u6267\u884c\u7b2c\u4e00\u6761DML\u8bed\u53e5\uff08\u5982<code>INSERT</code>/<code>UPDATE</code>/<code>DELETE</code>\uff09\u65f6\uff0c\u4e8b\u52a1\u81ea\u52a8\u5f00\u59cb\uff08\u65e0\u9700\u663e\u5f0f<code>BEGIN</code>\u547d\u4ee4\uff09\u3002</p> <p>A transaction in SQL ends by:</p> <ul> <li>Commit work commits current transaction and begins a new one.</li> <li>Rollback work causes current transaction to abort.</li> </ul> <p>\u663e\u5f0f\u7ed3\u675f\uff1a</p> <ul> <li><code>COMMIT WORK</code>\uff1a\u63d0\u4ea4\u5f53\u524d\u4e8b\u52a1\uff0c\u5e76\u81ea\u52a8\u5f00\u59cb\u65b0\u4e8b\u52a1\u3002  </li> <li><code>ROLLBACK WORK</code>\uff1a\u56de\u6eda\u5f53\u524d\u4e8b\u52a1\u7684\u6240\u6709\u64cd\u4f5c\u3002  </li> <li>\u6ce8\uff1a<code>WORK</code>\u5173\u952e\u5b57\u901a\u5e38\u53ef\u7701\u7565\uff08\u76f4\u63a5\u5199<code>COMMIT</code>\u6216<code>ROLLBACK</code>\uff09\u3002</li> </ul> <p>In almost all database systems, by default, every SQL statement also commits implicitly if it executes successfully</p> <pre><code>- Implicit commit can be turned off by a database directive\n</code></pre> <p>\u9ed8\u8ba4\u884c\u4e3a\uff1a\u5728\u591a\u6570\u6570\u636e\u5e93\uff08\u5982MySQL\u3001Oracle\uff09\u4e2d\uff0c\u6bcf\u6761SQL\u8bed\u53e5\u6210\u529f\u6267\u884c\u540e\u4f1a\u9690\u5f0f\u63d0\u4ea4\uff08\u5373\u4f7f\u6ca1\u6709\u663e\u5f0f<code>COMMIT</code>\uff09\u3002  </p> <ul> <li> <p>\u95ee\u9898\uff1a\u8fd9\u53ef\u80fd\u5bfc\u81f4\u610f\u5916\u7684\u539f\u5b50\u6027\u7834\u574f\uff08\u5982\u6279\u91cf\u64cd\u4f5c\u4e2d\u9014\u5931\u8d25\u65f6\u90e8\u5206\u63d0\u4ea4\uff09\u3002</p> </li> <li> <p>\u5173\u95ed\u9690\u5f0f\u63d0\u4ea4\uff1a</p> </li> </ul> <p>\u901a\u8fc7\u6570\u636e\u5e93\u7279\u5b9a\u6307\u4ee4\u7981\u7528\uff08\u4f8b\u5982\uff09\uff1a <pre><code>-- MySQL\nSET autocommit = 0;\n\n-- Oracle\nSET AUTOCOMMIT OFF;\n</code></pre></p> <p>Isolation level can be set at database level</p> <p>Isolation level can be changed at start of transaction</p> <ul> <li>\u6570\u636e\u5e93\u7ea7\u9ed8\u8ba4\u8bbe\u7f6e\uff1a\u53ef\u5728\u6570\u636e\u5e93\u914d\u7f6e\u4e2d\u5b9a\u4e49\u5168\u5c40\u9ed8\u8ba4\u9694\u79bb\u7ea7\u522b\uff08\u5982MySQL\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e<code>transaction-isolation=REPEATABLE-READ</code>\uff09\u3002  </li> <li>\u4e8b\u52a1\u7ea7\u52a8\u6001\u8bbe\u7f6e\uff1a</li> </ul> <p>\u5355\u4e2a\u4e8b\u52a1\u5f00\u59cb\u65f6\u53ef\u4ee5\u6307\u5b9a\u9694\u79bb\u7ea7\u522b\uff08\u8986\u76d6\u9ed8\u8ba4\u8bbe\u7f6e\uff09\uff1a <pre><code>-- \u8bbe\u7f6e\u5f53\u524d\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\nBEGIN;  -- \u663e\u5f0f\u5f00\u59cb\u4e8b\u52a1\uff08\u67d0\u4e9b\u6570\u636e\u5e93\u9700\u8981\uff09\n-- \u4e8b\u52a1\u64cd\u4f5c...\nCOMMIT;\n</code></pre></p>"},{"location":"Computer_Science/DB/Chapter17/#concurrency-control-protocols","title":"Concurrency Control Protocols","text":"<p>Lock-Based Protocols</p> <ul> <li>Lock on whole database vs lock on items</li> <li>How long to hold lock?</li> <li>Shared vs exclusive locks</li> </ul> <p>1. \u57fa\u4e8e\u9501\u7684\u534f\u8bae\uff08Lock-Based Protocols\uff09 \u6838\u5fc3\u673a\u5236\uff1a\u901a\u8fc7\u9501\u9650\u5236\u6570\u636e\u8bbf\u95ee\u6743\u9650</p> <ul> <li>\u9501\u7c92\u5ea6\uff1a</li> <li>\u6570\u636e\u5e93\u7ea7\u9501\uff1a\u7b80\u5355\u4f46\u5e76\u53d1\u6027\u6781\u4f4e\uff08\u5982SQLite\u7684\u5168\u5c40\u9501\uff09</li> <li>\u6570\u636e\u9879\u7ea7\u9501\uff08\u884c/\u9875\u9501\uff09\uff1a\u4e3b\u6d41\u5b9e\u73b0\uff08\u5982MySQL InnoDB\u7684\u884c\u9501\uff09</li> </ul> \u9501\u7c7b\u578b \u5171\u4eab\u9501\uff08S Lock\uff09 \u6392\u4ed6\u9501\uff08X Lock\uff09 \u8bfb\u64cd\u4f5c \u5141\u8bb8\u591a\u4e8b\u52a1\u5e76\u53d1\u8bfb \u7981\u6b62\u5176\u4ed6\u4e8b\u52a1\u8bfb\u5199 \u5199\u64cd\u4f5c \u7981\u6b62\u5176\u4ed6\u4e8b\u52a1\u5199 \u7981\u6b62\u5176\u4ed6\u4e8b\u52a1\u6301\u6709\u4efb\u4f55\u9501 \u517c\u5bb9\u6027 \u4e0e\u5171\u4eab\u9501\u517c\u5bb9\uff0c\u4e0e\u6392\u4ed6\u9501\u4e92\u65a5 \u4e0e\u6240\u6709\u9501\u4e92\u65a5 <ul> <li> <p>\u9501\u6301\u6709\u65f6\u95f4\uff1a</p> </li> <li> <p>\u4e25\u683c\u4e24\u9636\u6bb5\u9501\uff08Strict 2PL\uff09\uff1a\u5199\u9501\u6301\u6709\u5230\u4e8b\u52a1\u7ed3\u675f\uff08\u907f\u514d\u7ea7\u8054\u56de\u6eda\uff09</p> </li> <li>MySQL\u9ed8\u8ba4\uff1a\u8bfb\u9501\u53ef\u63d0\u524d\u91ca\u653e\uff0c\u5199\u9501\u4fdd\u6301\u5230\u4e8b\u52a1\u63d0\u4ea4</li> </ul> <p>\u5178\u578b\u95ee\u9898\uff1a\u6b7b\u9501\uff08\u9700\u8d85\u65f6\u6216\u7b49\u5f85\u56fe\u68c0\u6d4b\uff09</p> <p>Timestamp-Based Protocols</p> <ul> <li>Transaction timestamp assigned e.g. when a transaction begins</li> <li>Data items store two timestamps<ul> <li>Read timestamp</li> <li>Write timestamp</li> </ul> </li> <li>Timestamps are used to detect out of order accesses</li> </ul> <p>2. \u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u534f\u8bae\uff08Timestamp-Based Protocols\uff09 \u6838\u5fc3\u601d\u60f3\uff1a\u4e3a\u4e8b\u52a1\u548c\u6570\u636e\u9879\u6807\u8bb0\u65f6\u95f4\u6233\uff0c\u6309\u65f6\u95f4\u987a\u5e8f\u5904\u7406\u51b2\u7a81</p> <ul> <li>\u5173\u952e\u673a\u5236\uff1a   1. \u6bcf\u4e2a\u4e8b\u52a1\u5f00\u59cb\u65f6\u5206\u914d\u552f\u4e00\u65f6\u95f4\u6233\uff08\u5982\u7cfb\u7edf\u65f6\u949f\u6216\u903b\u8f91\u8ba1\u6570\u5668\uff09   2. \u6bcf\u4e2a\u6570\u636e\u9879\u7ef4\u62a4\u4e24\u4e2a\u65f6\u95f4\u6233\uff1a<ul> <li>Read-TS\uff1a\u6700\u540e\u6210\u529f\u8bfb\u53d6\u8be5\u6570\u636e\u7684\u4e8b\u52a1\u65f6\u95f4\u6233</li> <li>Write-TS\uff1a\u6700\u540e\u6210\u529f\u5199\u5165\u8be5\u6570\u636e\u7684\u4e8b\u52a1\u65f6\u95f4\u6233</li> </ul> </li> </ul> \u51b2\u7a81\u573a\u666f \u5904\u7406\u65b9\u5f0f \u4e8b\u52a1T\u8bfb\u6570\u636eQ \u82e5T\u7684\u65f6\u95f4\u6233 &lt; Q\u7684Write-TS \u2192 \u56de\u6edaT \u4e8b\u52a1T\u5199\u6570\u636eQ \u82e5T\u7684\u65f6\u95f4\u6233 &lt; Q\u7684Read/Write-TS \u2192 \u56de\u6edaT <p>\u4f18\u70b9\uff1a\u65e0\u9501\uff0c\u9ad8\u5e76\u53d1 \u7f3a\u70b9\uff1a\u957f\u4e8b\u52a1\u6613\u88ab\u77ed\u4e8b\u52a1\"\u997f\u6b7b\"\uff08\u9891\u7e41\u56de\u6eda\uff09</p> <p>Validation-Based Protocols</p> <ul> <li>Optimistic concurrency control</li> <li>Low rate of conflicts among transactions</li> <li>Each transaction must go through 3 phases:<ul> <li>Read phase \u2192 Validation phase \u2192 Write phase</li> </ul> </li> </ul> <p>3. \u57fa\u4e8e\u9a8c\u8bc1\u7684\u534f\u8bae\uff08Validation-Based Protocols\uff09</p> <p>\u4e50\u89c2\u5e76\u53d1\u63a7\u5236\uff08OCC\uff09\uff1a\u5047\u8bbe\u51b2\u7a81\u7387\u4f4e\uff0c\u5148\u6267\u884c\u540e\u9a8c\u8bc1</p> <ul> <li>\u4e09\u9636\u6bb5\u6267\u884c\uff1a</li> </ul> <ol> <li> <p>\u8bfb\u9636\u6bb5\uff1a</p> <ul> <li>\u4e8b\u52a1\u8bfb\u53d6\u6570\u636e\u5230\u79c1\u6709\u5de5\u4f5c\u533a  </li> <li>\u6240\u6709\u4fee\u6539\u6682\u4e0d\u5199\u5165\u6570\u636e\u5e93</li> </ul> </li> <li> <p>\u9a8c\u8bc1\u9636\u6bb5\uff1a</p> <ul> <li>\u68c0\u67e5\u8be5\u4e8b\u52a1\u7684\u8bfb\u5199\u96c6\u662f\u5426\u4e0e\u5176\u4ed6\u5df2\u63d0\u4ea4\u4e8b\u52a1\u51b2\u7a81  </li> <li>\u901a\u8fc7\u9a8c\u8bc1\u5219\u8fdb\u5165\u5199\u9636\u6bb5\uff0c\u5426\u5219\u56de\u6eda</li> </ul> </li> <li> <p>\u5199\u9636\u6bb5\uff1a</p> <ul> <li>\u5c06\u79c1\u6709\u5de5\u4f5c\u533a\u7684\u4fee\u6539\u63d0\u4ea4\u5230\u6570\u636e\u5e93  </li> </ul> </li> </ol> <ul> <li>\u9002\u7528\u573a\u666f\uff1a  </li> <li>\u4f4e\u51b2\u7a81\u73af\u5883\uff08\u5982\u8bfb\u591a\u5199\u5c11\uff09  </li> <li>\u5185\u5b58\u6570\u636e\u5e93\uff08\u5982Redis\u7684WATCH\u673a\u5236\uff09</li> </ul> <p>\u4f18\u52bf\uff1a\u65e0\u963b\u585e\uff0c\u9002\u5408\u957f\u8bfb\u4e8b\u52a1</p> <p>\u98ce\u9669\uff1a\u9ad8\u51b2\u7a81\u65f6\u56de\u6eda\u4ee3\u4ef7\u5927</p>"},{"location":"Computer_Science/DB/Chapter18/","title":"Chapter 18 | Concurrency Control","text":"<p> \u7ea6 2347 \u4e2a\u5b57  30 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 12 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter18/#lock-based-protocols","title":"Lock-Based Protocols","text":"<p>A lock is a mechanism to control concurrent access to a data item</p> <p>Data items can be locked in two modes :</p> <p>\u9501\u662f\u4e00\u79cd\u63a7\u5236\u5e76\u53d1\u8bbf\u95ee\u6570\u636e\u9879\u7684\u673a\u5236\uff0c\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u6a21\u5f0f\uff1a</p> <ol> <li>exclusive (X) mode. Data item can be both read as well as written. X-lock is requested using lock-X instruction.</li> <li> <p>shared (S) mode. Data item can only be read. S-lock is requested using lock-S instruction.</p> </li> <li> <p>\u6392\u4ed6\u9501(X\u9501)\uff1a\u4f7f\u7528lock-X\u6307\u4ee4\u8bf7\u6c42\u3002\u6301\u6709X\u9501\u7684\u4e8b\u52a1\u53ef\u4ee5\u5bf9\u6570\u636e\u9879\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u3002</p> </li> </ol> <ul> <li>\u7279\u70b9\uff1a\u4e00\u65e6\u4e00\u4e2a\u4e8b\u52a1\u6301\u6709X\u9501\uff0c\u5176\u4ed6\u4e8b\u52a1\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u7c7b\u578b\u7684\u9501\uff08\u65e2\u4e0d\u80fd\u8bfb\u4e5f\u4e0d\u80fd\u5199\uff09\u3002</li> </ul> <ol> <li>\u5171\u4eab\u9501(S\u9501)\uff1a\u4f7f\u7528lock-S\u6307\u4ee4\u8bf7\u6c42\u3002\u6301\u6709S\u9501\u7684\u4e8b\u52a1\u53ea\u80fd\u8bfb\u53d6\u6570\u636e\u9879\u3002</li> </ol> <ul> <li>\u7279\u70b9\uff1a\u591a\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u540c\u65f6\u6301\u6709S\u9501\uff08\u5141\u8bb8\u591a\u4e2a\u4e8b\u52a1\u540c\u65f6\u8bfb\u53d6\uff09\uff0c\u4f46\u53ea\u8981\u6709\u4e00\u4e2a\u4e8b\u52a1\u6301\u6709S\u9501\uff0c\u5176\u4ed6\u4e8b\u52a1\u5c31\u4e0d\u80fd\u83b7\u53d6X\u9501\u3002</li> </ul> <p>Lock requests are made to concurrency-control manager. Transaction can proceed only after request is granted.</p> <p>\u9501\u8bf7\u6c42\uff08Lock Request\uff09 \u662f\u4e8b\u52a1\uff08Transaction\uff09\u5411 \u5e76\u53d1\u63a7\u5236\u7ba1\u7406\u5668\uff08Concurrency-Control Manager\uff09 \u53d1\u51fa\u7684\u8bf7\u6c42\uff0c\u76ee\u7684\u662f\u83b7\u53d6\u5bf9\u67d0\u4e2a\u6570\u636e\u9879\u7684\u8bbf\u95ee\u6743\u9650\uff08\u8bfb\u6216\u5199\uff09\u3002</p> <p>Lock-compatibility matrix</p> <p></p> <p>A transaction may be granted a lock on an item if the requested lock is compatible with locks already held on the item by other transactions</p> <p>Any number of transactions can hold shared locks on an item, but if any transaction holds an exclusive on the item no other transaction may hold any lock on the item.</p> <p>If a lock cannot be granted, the requesting transaction is made to wait till all incompatible locks held by other transactions have been released. The lock is then granted.</p> <ol> <li>\u9501\u8bf7\u6c42\u5fc5\u987b\u88ab\u6279\u51c6\u540e\uff0c\u4e8b\u52a1\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u3002</li> </ol> <ul> <li>\u4e8b\u52a1\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u9700\u8981\u8bbf\u95ee\u67d0\u4e2a\u6570\u636e\u9879\uff08\u5982\u6570\u636e\u5e93\u8bb0\u5f55\uff09\uff0c\u5fc5\u987b\u5148\u5411\u5e76\u53d1\u63a7\u5236\u7ba1\u7406\u5668\u7533\u8bf7\u9501\uff08S\u9501\u6216X\u9501\uff09\u3002</li> <li>\u53ea\u6709\u5728\u8be5\u8bf7\u6c42\u88ab \u6279\u51c6\uff08Granted\uff09 \u540e\uff0c\u4e8b\u52a1\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u64cd\u4f5c\uff08\u5982\u8bfb\u53d6\u6216\u4fee\u6539\u6570\u636e\uff09\u3002</li> </ul> <ol> <li>\u5982\u679c\u9501\u8bf7\u6c42\u88ab\u62d2\u7edd\uff0c\u4e8b\u52a1\u5fc5\u987b\u7b49\u5f85\u3002</li> </ol> <ul> <li>\u5982\u679c\u8bf7\u6c42\u7684\u9501\u4e0e\u5f53\u524d\u5176\u4ed6\u4e8b\u52a1\u6301\u6709\u7684\u9501\u51b2\u7a81\uff08\u5982\u53e6\u4e00\u4e2a\u4e8b\u52a1\u5df2\u7ecf\u6301\u6709X\u9501\uff09\uff0c\u5e76\u53d1\u63a7\u5236\u7ba1\u7406\u5668\u4f1a\u62d2\u7edd\uff08Deny\uff09\u8be5\u8bf7\u6c42\uff0c\u5e76\u4f7f\u4e8b\u52a1\u8fdb\u5165\u7b49\u5f85\uff08Blocked\uff09 \u72b6\u6001\u3002</li> <li>\u4e8b\u52a1\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u76f4\u5230\u51b2\u7a81\u7684\u9501\u88ab\u91ca\u653e\uff08\u5982\u5176\u4ed6\u4e8b\u52a1\u63d0\u4ea4\u6216\u56de\u6eda\uff09\uff0c\u7136\u540e\u9501\u88ab\u6388\u4e88\uff0c\u4e8b\u52a1\u6062\u590d\u6267\u884c\u3002</li> </ul> <p>\u5de5\u4f5c\u6d41\u7a0b\uff1a 1. \u4e8b\u52a1\u5411\u5e76\u53d1\u63a7\u5236\u7ba1\u7406\u5668\u53d1\u51fa\u9501\u8bf7\u6c42 2. \u5982\u679c\u8bf7\u6c42\u7684\u9501\u4e0e\u73b0\u6709\u9501\u517c\u5bb9\uff0c\u7acb\u5373\u6388\u4e88 3. \u5982\u679c\u4e0d\u517c\u5bb9\uff0c\u4e8b\u52a1\u5fc5\u987b\u7b49\u5f85\uff0c\u76f4\u5230\u6240\u6709\u4e0d\u517c\u5bb9\u7684\u9501\u88ab\u91ca\u653e 4. \u9501\u88ab\u6388\u4e88\u540e\uff0c\u4e8b\u52a1\u624d\u80fd\u7ee7\u7eed\u6267\u884c</p> <p>\u8fd9\u79cd\u673a\u5236\u786e\u4fdd\u4e86\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u5e76\u53d1\u63a7\u5236\uff0c\u9632\u6b62\u4e86\u810f\u8bfb\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u7b49\u95ee\u9898\u3002</p>"},{"location":"Computer_Science/DB/Chapter18/#the-two-phase-locking-protocol","title":"The Two-Phase Locking Protocol","text":"<p>This is a protocol which ensures conflict-serializable schedules.</p> <p>Phase 1: Growing Phase</p> <ul> <li>transaction may obtain locks </li> <li>transaction may not release locks</li> </ul> <p>Phase 2: Shrinking Phase</p> <ul> <li>transaction may release locks</li> <li>transaction may not obtain locks</li> </ul> <p></p> <p>lock-S(A);</p> <p>read (A);</p> <p>lock-S(B); \\(\\leftarrow\\) lock point</p> <p>read (B);</p> <p>unlock(A);</p> <p>unlock(B);</p> <p>display(A+B)</p> <p>Two-Phase Locking Protocol assures serializability.</p> <p>It can be proved that the transactions can be serialized in the order of their lock points (i.e. the point where a transaction acquired its final lock).</p> <p>\u4e24\u9636\u6bb5\u9501\u534f\u8bae\uff08Two-Phase Locking, 2PL\uff09\u662f\u4e00\u79cd\u5e76\u53d1\u63a7\u5236\u65b9\u6cd5\uff0c\u5b83\u786e\u4fdd\u4e8b\u52a1\u8c03\u5ea6\u662f \u53ef\u4e32\u884c\u5316\uff08Serializable\uff09 \u7684\u3002</p> <p>2PL \u8981\u6c42\u6bcf\u4e2a\u4e8b\u52a1\u7684\u9501\u83b7\u53d6\u548c\u91ca\u653e\u5fc5\u987b\u5206\u6210\u4e24\u4e2a\u9636\u6bb5\uff1a</p> <ol> <li>\u589e\u957f\u9636\u6bb5\uff08Growing Phase\uff09\uff1a\u4e8b\u52a1\u53ef\u4ee5\u4e0d\u65ad\u83b7\u53d6\u65b0\u9501\uff0c\u4f46\u4e0d\u80fd\u91ca\u653e\u4efb\u4f55\u9501\u3002</li> <li>\u6536\u7f29\u9636\u6bb5\uff08Shrinking Phase\uff09\uff1a\u4e8b\u52a1\u53ef\u4ee5\u91ca\u653e\u9501\uff0c\u4f46\u4e0d\u80fd\u518d\u83b7\u53d6\u65b0\u9501\u3002</li> </ol> <ul> <li>\u4e00\u4e2a\u4e8b\u52a1\u7684 \u9501\u70b9\uff08Lock Point\uff09 \u662f\u8be5\u4e8b\u52a1\u83b7\u53d6 \u6700\u540e\u4e00\u4e2a\u9501 \u7684\u65f6\u523b\u3002  </li> <li>\u5728 2PL \u4e0b\uff0c\u6240\u6709\u4e8b\u52a1\u7684\u9501\u70b9\u51b3\u5b9a\u4e86\u5b83\u4eec\u7684 \u4e32\u884c\u987a\u5e8f\u3002  </li> </ul>"},{"location":"Computer_Science/DB/Chapter18/#2pl","title":"\u8bc1\u660e 2PL \u4fdd\u8bc1\u53ef\u4e32\u884c\u5316","text":"<p>\u5047\u8bbe\u6211\u4eec\u6709\u591a\u4e2a\u4e8b\u52a1 \\(T_1, T_2, \\dots, T_n\\) \uff0c\u5b83\u4eec\u7684\u9501\u70b9\u6309\u987a\u5e8f\u6392\u5217\u4e3a \\(T_1\\) \u7684\u9501\u70b9 &lt; \\(T_2\\) \u7684\u9501\u70b9 &lt; ... &lt; \\(T_n\\) \u7684\u9501\u70b9\u3002\u6211\u4eec\u9700\u8981\u8bc1\u660e\uff1a</p> <ol> <li>\u4efb\u4f55\u51b2\u7a81\u64cd\u4f5c\uff08\u8bfb/\u5199\uff09\u7684\u987a\u5e8f\u4e0e\u9501\u70b9\u987a\u5e8f\u4e00\u81f4\u3002</li> <li>\u56e0\u6b64\uff0c\u8c03\u5ea6\u7b49\u4ef7\u4e8e\u6309\u9501\u70b9\u987a\u5e8f\u7684\u4e32\u884c\u6267\u884c\u3002</li> </ol> <p>\u8bc1\u660e\u6b65\u9aa4</p> <ol> <li>\u5982\u679c \\(T_i\\) \u5728 \\(T_j\\) \u4e4b\u524d\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u9501\uff08\u5373 \\(T_i\\) \u7684\u9501\u70b9 &lt; \\(T_j\\) \u7684\u9501\u70b9\uff09\uff1a</li> </ol> <ul> <li>\u7531\u4e8e 2PL \u7684 \u589e\u957f\u9636\u6bb5\uff0c\\(T_i\\) \u5728 \\(T_j\\) \u83b7\u53d6\u9501\u4e4b\u524d\u5df2\u7ecf\u6301\u6709\u6240\u6709\u5b83\u9700\u8981\u7684\u9501\u3002</li> <li>\u56e0\u6b64\uff0c\\(T_i\\) \u4e0d\u4f1a\u5728 \\(T_j\\) \u5df2\u7ecf\u6301\u6709\u9501\u7684\u60c5\u51b5\u4e0b\u518d\u53bb\u83b7\u53d6\u9501\uff08\u5426\u5219\u4f1a\u5bfc\u81f4\u6b7b\u9501\u6216\u8fdd\u53cd 2PL\uff09\u3002</li> <li>\u8fd9\u610f\u5473\u7740 \\(T_i\\) \u7684\u6240\u6709\u64cd\u4f5c\uff08\u8bfb/\u5199\uff09\u90fd\u5728 \\(T_j\\) \u7684\u51b2\u7a81\u64cd\u4f5c\u4e4b\u524d\u5b8c\u6210\u3002</li> </ul> <ol> <li>\u51b2\u7a81\u64cd\u4f5c\uff08\u8bfb-\u5199\u3001\u5199-\u8bfb\u3001\u5199-\u5199\uff09\u5fc5\u987b\u9075\u5b88\u9501\u987a\u5e8f\uff1a</li> </ol> <ul> <li>\u5982\u679c \\(T_i\\) \u5199\u6570\u636e\u9879 \\(X\\) \uff0c\u5b83\u5fc5\u987b\u6301\u6709 \\(X\\) \u7684 X\u9501\uff0c\u5e76\u4e14\u5728 \\(T_j\\) \u8bbf\u95ee \\(X\\) \u4e4b\u524d\u4e0d\u4f1a\u91ca\u653e\u9501\uff08\u56e0\u4e3a 2PL \u5728\u589e\u957f\u9636\u6bb5\u4e0d\u5141\u8bb8\u91ca\u653e\u9501\uff09\u3002</li> <li>\u56e0\u6b64\uff0c\\(T_j\\) \u5fc5\u987b\u7b49\u5f85 \\(T_i\\) \u8fdb\u5165\u6536\u7f29\u9636\u6bb5\uff08\u91ca\u653e\u9501\uff09\u540e\u624d\u80fd\u83b7\u53d6 \\(X\\) \u7684\u9501\uff0c\u4ece\u800c\u4fdd\u8bc1 \\(T_i\\) \u7684\u64cd\u4f5c\u5148\u4e8e \\(T_j\\) \u3002</li> </ul> <ol> <li>\u6700\u7ec8\u8c03\u5ea6\u7b49\u4ef7\u4e8e\u6309\u9501\u70b9\u987a\u5e8f\u7684\u4e32\u884c\u6267\u884c \u7531\u4e8e\u6240\u6709\u51b2\u7a81\u64cd\u4f5c\u90fd\u6309\u7167\u9501\u70b9\u987a\u5e8f\u6267\u884c\uff0c\u6700\u7ec8\u7684\u8c03\u5ea6\u7b49\u4ef7\u4e8e \\(T_1 \\rightarrow T_2 \\rightarrow \\dots \\rightarrow T_n\\) \u7684\u4e32\u884c\u8c03\u5ea6\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter18/#2pl-proof-by-contradiction","title":"2PL - Proof by Contradiction","text":"<p>In the precedence graph corresponding to a schedule of a set of transactions \\(T_1, T_2, \\dots, T_n\\) , if there is an arc from \\(T_i\\) to \\(T_j\\) , then LP(\\(T_i\\)) &lt; LP(\\(T_j\\)) . </p> <p></p>"},{"location":"Computer_Science/DB/Chapter18/#2pl-proof-by-induction","title":"2PL - Proof by Induction","text":"<p>Let \\(T_i\\) is the transaction with minimum lock point\uff08LP\uff09.</p> <p>If there is an operation \\(OP_j\\) of another transaction \\(T_j\\) that blocks an operation \\(OP_i\\) of \\(T_i\\) ...</p> <p></p> <p>Extensions to basic two-phase locking\uff08\u57fa\u672c\u4e24\u9636\u6bb5\u5c01\u9501\uff09 needed to ensure recoverability of freedom from cascading roll-back</p> <ul> <li>\u6211\u4eec\u8bc1\u660e\u4e86\u8fd9\u662f\u53ef\u4e32\u884c\u5316\u7684\uff0c\u4f46\u662f\u8fd9\u662f\u53ef\u6062\u590d\u7684\u5417\uff1f\u8981\u53ef\u6062\u590d\u7684\u6761\u4ef6\u5c31\u662f\u4e0d\u8bfb\u810f\u6570\u636e\u3002</li> <li>\u57fa\u672c\u4e24\u9636\u6bb5\u5c01\u9501\uff0c\u662f\u53ef\u4e32\u884c\u5316\u7684\uff0c\u4f46\u662f\u4e0d\u662f\u53ef\u6062\u590d\u7684\u3002</li> </ul> <p>Strict two-phase locking\uff08\u4e25\u683c\u4e24\u9636\u6bb5\u5c01\u9501\uff09: a transaction must hold all its exclusive locks till it commits/aborts.</p> <ul> <li>\u5c06 <code>X</code> \u9501\u7684\u6301\u6709\u65f6\u95f4\u5ef6\u957f\u5230\u63d0\u4ea4/\u4e2d\u6b62\u4e3a\u6b62\uff0c\u4ece\u800c\u786e\u4fdd\u4e86\u53ef\u6062\u590d\u6027\u3002</li> <li>Ensures recoverability and avoids cascading roll-backs</li> </ul> <p>Rigorous two-phase locking\uff08\u5f3a\u4e24\u9636\u6bb5\u5c01\u9501\uff09: a transaction must hold all locks till commit/abort.</p> <ul> <li>\u6240\u6709\u7684\u9501\u90fd\u5fc5\u987b\u6301\u6709\u5230\u63d0\u4ea4/\u4e2d\u6b62\u4e3a\u6b62\uff0c\u4ece\u800c\u786e\u4fdd\u4e86\u53ef\u6062\u590d\u6027\u3002\u4f46\u662f\u4f1a\u5f71\u54cd\u5e76\u53d1\u6027\u4e0e\u4e8b\u52a1\u7684\u541e\u5410\u7387\u3002</li> <li>Transactions can be serialized in the order in which they commit.</li> </ul> <p>Most databases implement rigorous two-phase locking, but refer to it as simply two-phase locking</p> <p>Two-phase locking is not a necessary condition for serializability.</p> <p>There can be conflict serializable schedules that cannot be obtained if two-phase locking is used.</p> <p>However, in the absence of extra information (e.g., ordering of access to data), two-phase locking is needed for conflict serializability .</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684 Exercise \u7406\u89e3\u3002</p> Exercise <p></p> Answer <p>\u5148\u628a precedence graph \u753b\u51fa\u6765\u3002</p> <p></p> <p></p> <p>\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u7528\u4e00\u53e5\u8bdd\u603b\u7ed3\u5c31\u662f\uff0c\u653e\u9501\u4e4b\u540e\u4e0d\u80fd\u52a0\u9501\u3002</p> <p>\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u5bf9\u6570\u636e\u662f\u5982\u4f55\u7ec4\u7ec7\uff0c\u5bf9\u4e8b\u52a1\u5982\u4f55\u8bbf\u95ee\u6570\u636e\u7684\u7b49\u7b49\u6ca1\u6709\u4efb\u4f55\u8981\u6c42\u3002\u5982\u679c\u77e5\u9053\u4e86\u524d\u8005\uff0c\u90a3\u4e48\u53ef\u4ee5\u662f\u4e0d\u9075\u5faa\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff0c\u4f46\u662f\u4f9d\u65e7\u662f\u53ef\u4e32\u884c\u5316\u7684\u3002</p>"},{"location":"Computer_Science/DB/Chapter18/#lock-conversions","title":"Lock Conversions","text":"<p>Two-phase locking with lock conversions:</p> <ol> <li>First Phase:</li> </ol> <ul> <li>can acquire a lock-S or lock-X on a data item</li> <li>can convert a lock-S to a lock-X (lock-upgrade)</li> </ul> <ol> <li>Second Phase:</li> </ol> <ul> <li>can release a lock-S or lock-X</li> <li>can convert a lock-X to a lock-S (lock-downgrade)</li> </ul> <p>This protocol assures serializability.</p> <p></p>"},{"location":"Computer_Science/DB/Chapter18/#automatic-acquisition-of-locks","title":"Automatic Acquisition of Locks","text":"<p>A transaction \\(T_i\\) issues the standard read/write instruction, without explicit locking calls.</p> <p>The operation read(D) is processed as:</p> <p>if \\(T_i\\) has a lock on D</p> <p>then </p> <pre><code>  read(D);\n</code></pre> <p>else begin</p> <pre><code>  if necessary wait until no other transaction has a lock-X on D\n\n     grant $T_i$ a lock-S on D;\n\n     read(D);\n</code></pre> <p>end</p> <p>\u8fd9\u6bb5\u6587\u672c\u89e3\u91ca\u4e86\u5728\u4e00\u4e2a\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u52a1\uff08Transaction\uff09\u5982\u4f55\u5904\u7406\u8bfb\u53d6\uff08read\uff09\u6570\u636e\u9879 <code>D</code> \u7684\u64cd\u4f5c\u3002</p> <p>\u5b83\u63cf\u8ff0\u4e86\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u4e8b\u52a1 <code>Ti</code> \u53d1\u51fa\u8bfb\u53d6\u6570\u636e\u9879 <code>D</code> \u7684\u8bf7\u6c42\u3002</li> <li>\u7cfb\u7edf\u9996\u5148\u68c0\u67e5\u4e8b\u52a1 <code>Ti</code> \u662f\u5426\u5df2\u7ecf\u6301\u6709\u6570\u636e\u9879 <code>D</code> \u7684\u9501\u3002</li> <li>\u5982\u679c <code>Ti</code> \u5df2\u7ecf\u6301\u6709\u9501\uff0c\u90a3\u4e48 <code>Ti</code> \u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6570\u636e\u9879 <code>D</code>\u3002</li> <li> <p>\u5982\u679c <code>Ti</code> \u6ca1\u6709\u6301\u6709\u9501\uff1a</p> <ul> <li>\u7cfb\u7edf\u4f1a\u68c0\u67e5\u662f\u5426\u6709\u5176\u4ed6\u4e8b\u52a1\u6301\u6709\u6570\u636e\u9879 <code>D</code> \u7684\u6392\u4ed6\u9501\uff08lock-X\uff09\u3002\u6392\u4ed6\u9501\u963b\u6b62\u5176\u4ed6\u4efb\u4f55\u4e8b\u52a1\u8bfb\u5199\u6570\u636e\u9879\u3002</li> <li>\u5982\u679c\u5176\u4ed6\u4e8b\u52a1\u6301\u6709\u6392\u4ed6\u9501\uff0c<code>Ti</code> \u9700\u8981\u7b49\u5f85\u76f4\u5230\u90a3\u4e9b\u6392\u4ed6\u9501\u88ab\u91ca\u653e\u3002</li> <li>\u4e00\u65e6\u6ca1\u6709\u5176\u4ed6\u4e8b\u52a1\u6301\u6709\u6570\u636e\u9879 <code>D</code> \u7684\u6392\u4ed6\u9501\uff0c\u7cfb\u7edf\u4f1a\u6388\u4e88 <code>Ti</code> \u4e00\u4e2a\u5171\u4eab\u9501\uff08lock-S\uff09\u5728\u6570\u636e\u9879 <code>D</code> \u4e0a\u3002\u5171\u4eab\u9501\u5141\u8bb8\u591a\u4e2a\u4e8b\u52a1\u540c\u65f6\u8bfb\u53d6\u6570\u636e\u9879\uff0c\u4f46\u4e0d\u5141\u8bb8\u5199\u5165\u3002</li> <li>\u83b7\u5f97\u5171\u4eab\u9501\u540e\uff0c\u4e8b\u52a1 <code>Ti</code> \u8bfb\u53d6\u6570\u636e\u9879 <code>D</code>\u3002</li> </ul> </li> </ol> <p>write(D) is processed as:</p> <p>if \\(T_i\\) has a lock on D</p> <p>then write(D);</p> <p>else begin</p> <p>if necessary wait until no other trans. has any lock on D,</p> <p>if \\(T_i\\) has a lock-S on D</p> <pre><code>  then upgrade lock on D to lock-X\n</code></pre> <p>else</p> <pre><code>  grant $T_i$ a lock-X on D;\n</code></pre> <p>write(D)</p> <p>end</p> <ol> <li>\u4e8b\u52a1 <code>Ti</code> \u53d1\u51fa\u5199\u5165\u6570\u636e\u9879 <code>D</code> \u7684\u8bf7\u6c42\u3002</li> <li>\u7cfb\u7edf\u9996\u5148\u68c0\u67e5\u4e8b\u52a1 <code>Ti</code> \u662f\u5426\u5df2\u7ecf\u6301\u6709\u6570\u636e\u9879 <code>D</code> \u7684\u9501\u3002</li> <li>\u5982\u679c <code>Ti</code> \u5df2\u7ecf\u6301\u6709\u9501\uff0c\u90a3\u4e48 <code>Ti</code> \u53ef\u4ee5\u76f4\u63a5\u5199\u5165\u6570\u636e\u9879 <code>D</code>\u3002</li> <li> <p>\u5982\u679c <code>Ti</code> \u6ca1\u6709\u6301\u6709\u9501\uff1a</p> <ul> <li>\u7cfb\u7edf\u4f1a\u68c0\u67e5\u662f\u5426\u6709\u5176\u4ed6\u4e8b\u52a1\u6301\u6709\u6570\u636e\u9879 <code>D</code> \u7684\u4efb\u4f55\u9501\uff08\u5305\u62ec\u5171\u4eab\u9501\u548c\u6392\u4ed6\u9501\uff09\u3002\u4e3a\u4e86\u8fdb\u884c\u5199\u5165\u64cd\u4f5c\uff0c\u4e8b\u52a1\u9700\u8981\u83b7\u5f97\u6392\u4ed6\u9501\uff08lock-X\uff09\uff0c\u800c\u6392\u4ed6\u9501\u4e0d\u5141\u8bb8\u5176\u4ed6\u4efb\u4f55\u4e8b\u52a1\u6301\u6709\u8be5\u6570\u636e\u9879\u7684\u4efb\u4f55\u9501\u3002</li> <li>\u5982\u679c\u6709\u5176\u4ed6\u4e8b\u52a1\u6301\u6709\u9501\uff0c<code>Ti</code> \u9700\u8981\u7b49\u5f85\u76f4\u5230\u8fd9\u4e9b\u9501\u90fd\u88ab\u91ca\u653e\u3002</li> <li> <p>\u4e00\u65e6\u6ca1\u6709\u5176\u4ed6\u4e8b\u52a1\u6301\u6709\u6570\u636e\u9879 <code>D</code> \u7684\u4efb\u4f55\u9501\uff1a</p> <ul> <li>\u5982\u679c <code>Ti</code> \u5f53\u524d\u6301\u6709\u6570\u636e\u9879 <code>D</code> \u7684\u5171\u4eab\u9501\uff08lock-S\uff09\uff0c\u5b83\u9700\u8981\u5c06\u8be5\u5171\u4eab\u9501\u5347\u7ea7\u4e3a\u6392\u4ed6\u9501\uff08lock-X\uff09\u3002</li> <li>\u5982\u679c <code>Ti</code> \u6ca1\u6709\u6301\u6709\u6570\u636e\u9879 <code>D</code> \u7684\u4efb\u4f55\u9501\uff0c\u7cfb\u7edf\u4f1a\u6388\u4e88 <code>Ti</code> \u4e00\u4e2a\u6392\u4ed6\u9501\uff08lock-X\uff09\u5728\u6570\u636e\u9879 <code>D</code> \u4e0a\u3002</li> </ul> </li> <li> <p>\u83b7\u5f97\u6392\u4ed6\u9501\uff08\u65e0\u8bba\u662f\u76f4\u63a5\u6388\u4e88\u8fd8\u662f\u5347\u7ea7\u83b7\u5f97\uff09\u540e\uff0c\u4e8b\u52a1 <code>Ti</code> \u53ef\u4ee5\u5199\u5165\u6570\u636e\u9879 <code>D</code>\u3002</p> </li> </ul> </li> </ol> \u4e3a\u4ec0\u4e48\u9700\u8981\u5b58\u5728\u8981\u5347\u7ea7\u9501\u7684\u8fd9\u4e2a\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff1f <p>\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff082PL\uff09\u9700\u8981\u9501\u5347\u7ea7\uff08\u4ece\u5171\u4eab\u9501 S \u5347\u7ea7\u5230\u6392\u4ed6\u9501 X\uff09\u7684\u4e3b\u8981\u539f\u56e0\u662f\u4e3a\u4e86\u5728\u4fdd\u8bc1\u4e8b\u52a1\u9694\u79bb\u6027\u7684\u540c\u65f6\uff0c\u63d0\u9ad8\u5e76\u53d1\u6027\uff0c\u5e76\u6b63\u786e\u5904\u7406\u4e8b\u52a1\u4e2d\u5148\u8bfb\u540e\u5199\u7684\u5e38\u89c1\u60c5\u51b5\u3002</p> <ol> <li> <p>\u5e38\u89c1\u7684\u8bfb\u540e\u5199\u6a21\u5f0f\uff1a \u8bb8\u591a\u4e8b\u52a1\u7684\u64cd\u4f5c\u6a21\u5f0f\u662f\u5148\u8bfb\u53d6\u4e00\u4e2a\u6570\u636e\u9879\u7684\u503c\uff0c\u6839\u636e\u8fd9\u4e2a\u503c\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\u6216\u5224\u65ad\uff0c\u7136\u540e\u518d\u51b3\u5b9a\u662f\u5426\u4fee\u6539\uff08\u5199\u5165\uff09\u8fd9\u4e2a\u6570\u636e\u9879\u3002</p> </li> <li> <p>\u521d\u59cb\u8bfb\u53d6\u53ea\u9700\u8981\u5171\u4eab\u9501\uff1a \u5f53\u4e8b\u52a1\u53ea\u6253\u7b97\u8bfb\u53d6\u6570\u636e\u9879\u65f6\uff0c\u53ea\u9700\u8981\u83b7\u53d6\u5171\u4eab\u9501\uff08S \u9501\uff09\u3002\u5171\u4eab\u9501\u5141\u8bb8\u591a\u4e2a\u4e8b\u52a1\u540c\u65f6\u8bfb\u53d6\u540c\u4e00\u4e2a\u6570\u636e\u9879\uff0c\u8fd9\u5927\u5927\u63d0\u9ad8\u4e86\u5e76\u53d1\u5ea6\u3002</p> </li> <li> <p>\u5199\u5165\u64cd\u4f5c\u9700\u8981\u6392\u4ed6\u9501\uff1a \u7136\u800c\uff0c\u5f53\u4e8b\u52a1\u51b3\u5b9a\u8981\u4fee\u6539\u6570\u636e\u9879\u65f6\uff0c\u5b83\u5fc5\u987b\u6301\u6709\u6392\u4ed6\u9501\uff08X \u9501\uff09\u3002\u6392\u4ed6\u9501\u662f\u72ec\u5360\u7684\uff0c\u4e0d\u5141\u8bb8\u5176\u4ed6\u4efb\u4f55\u4e8b\u52a1\u6301\u6709\u8be5\u6570\u636e\u9879\u7684\u4efb\u4f55\u9501\uff08S \u9501\u6216 X \u9501\uff09\uff0c\u4ee5\u9632\u6b62\u810f\u5199\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u7b49\u9694\u79bb\u6027\u95ee\u9898\u3002</p> </li> <li> <p>2PL \u534f\u8bae\u7684\u9650\u5236\uff1a \u6839\u636e\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff0c\u4e8b\u52a1\u4e00\u65e6\u8fdb\u5165\u6536\u7f29\u9636\u6bb5\uff08\u91ca\u653e\u4e86\u7b2c\u4e00\u4e2a\u9501\uff09\uff0c\u5c31\u4e0d\u80fd\u518d\u83b7\u53d6\u4efb\u4f55\u65b0\u7684\u9501\u3002</p> </li> <li> <p>\u5982\u679c\u6ca1\u6709\u9501\u5347\u7ea7\u4f1a\u600e\u6837\uff1f</p> </li> </ol> <ul> <li>\u5982\u679c\u4e8b\u52a1\u5148\u83b7\u53d6 S \u9501\u8fdb\u884c\u8bfb\u53d6\uff0c\u7136\u540e\u8fdb\u5165\u6536\u7f29\u9636\u6bb5\uff08\u56e0\u4e3a\u91ca\u653e\u4e86\u5176\u4ed6\u9501\uff09\uff0c\u6b64\u65f6\u5b83\u51b3\u5b9a\u8981\u5199\u5165\uff0c\u4f46\u6839\u636e 2PL \u89c4\u5219\uff0c\u5b83\u5df2\u7ecf\u4e0d\u80fd\u518d\u83b7\u53d6\u65b0\u7684 X \u9501\u4e86\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u95ee\u9898\u3002</li> <li>\u5982\u679c\u4e8b\u52a1\u5728\u8fdb\u5165\u6536\u7f29\u9636\u6bb5\u524d\uff0c\u5148\u91ca\u653e S \u9501\uff0c\u518d\u5c1d\u8bd5\u83b7\u53d6 X \u9501\u3002\u8fd9\u4e0d\u4ec5\u53ef\u80fd\u5bfc\u81f4\u5176\u4ed6\u4e8b\u52a1\u8d81\u673a\u4fee\u6539\u6570\u636e\uff0c\u7834\u574f\u9694\u79bb\u6027\uff0c\u800c\u4e14\u5982\u679c\u5176\u4ed6\u4e8b\u52a1\u4e5f\u6301\u6709 S \u9501\uff0c\u53ef\u80fd\u4f1a\u9677\u5165\u66f4\u590d\u6742\u7684\u7b49\u5f85\u3002</li> <li>\u5982\u679c\u4e8b\u52a1\u4e3a\u4e86\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u5f00\u59cb\u5c31\u83b7\u53d6 X \u9501\uff08\u5373\u4f7f\u53ea\u662f\u4e3a\u4e86\u8bfb\u53d6\uff09\uff0c\u8fd9\u4f1a\u6781\u5927\u5730\u964d\u4f4e\u5e76\u53d1\u6027\uff0c\u56e0\u4e3a\u5176\u4ed6\u4efb\u4f55\u4e8b\u52a1\u90fd\u4e0d\u80fd\u540c\u65f6\u8bfb\u53d6\u6216\u5199\u5165\u8be5\u6570\u636e\u9879\u3002</li> </ul> <ol> <li>\u9501\u5347\u7ea7\u7684\u89e3\u51b3\u65b9\u6848\uff1a \u9501\u5347\u7ea7\u5141\u8bb8\u5728\u589e\u957f\u9636\u6bb5\uff08\u4e8b\u52a1\u8fd8\u6ca1\u6709\u91ca\u653e\u4efb\u4f55\u9501\u65f6\uff09\uff0c\u5c06\u5df2\u6301\u6709\u7684 S \u9501\u8f6c\u6362\u4e3a X \u9501\u3002\u8fd9\u4e2a\u64cd\u4f5c\u662f\"\u52a0\u5f3a\"\u800c\u4e0d\u662f\"\u83b7\u53d6\u65b0\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u9501\"\u3002\u5f53\u4e8b\u52a1\u9700\u8981\u4ece\u8bfb\u53d6\u72b6\u6001\uff08\u6301\u6709 S \u9501\uff09\u8f6c\u4e3a\u5199\u5165\u72b6\u6001\u65f6\uff0c\u5b83\u53ef\u4ee5\u5c1d\u8bd5\u5c06 S \u9501\u5347\u7ea7\u4e3a X \u9501\u3002\u5982\u679c\u5f53\u524d\u6ca1\u6709\u5176\u4ed6\u4e8b\u52a1\u6301\u6709\u8be5\u6570\u636e\u9879\u7684 S \u9501\uff0c\u5347\u7ea7\u5c31\u4f1a\u6210\u529f\u3002\u5982\u679c\u6709\u5176\u4ed6\u4e8b\u52a1\u6301\u6709 S \u9501\uff0c\u8be5\u4e8b\u52a1\u5c31\u9700\u8981\u7b49\u5f85\uff0c\u76f4\u5230\u90a3\u4e9b S \u9501\u88ab\u91ca\u653e\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter18/#implementation-of-locking","title":"Implementation of Locking","text":"<ol> <li>A lock manager can be implemented as a separate process to which transactions send lock and unlock requests</li> <li>The lock manager replies to a lock request by sending a lock grant messages (or a message asking the transaction to roll back, in case of a deadlock)</li> <li>The requesting transaction waits until its request is answered</li> <li>The lock manager maintains a data-structure called a lock table to record granted locks and pending requests</li> <li> <p>The lock table is usually implemented as an in-memory hash table indexed on the name of the data item being locked</p> </li> <li> <p>\u9501\u7ba1\u7406\u5668\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b: \u8fd9\u610f\u5473\u7740\u9501\u7ba1\u7406\u5668\u4e0d\u662f\u4e8b\u52a1\u672c\u8eab\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u800c\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7cfb\u7edf\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u96c6\u4e2d\u7ba1\u7406\u6240\u6709\u7684\u9501\u8bf7\u6c42\u3002</p> </li> <li>\u4e8b\u52a1\u53d1\u9001\u8bf7\u6c42\u7ed9\u9501\u7ba1\u7406\u5668: \u5f53\u4e00\u4e2a\u4e8b\u52a1\u9700\u8981\u9501\u5b9a\u6216\u89e3\u9501\u67d0\u4e2a\u6570\u636e\u9879\u65f6\uff0c\u5b83\u4e0d\u4f1a\u81ea\u5df1\u76f4\u63a5\u64cd\u4f5c\u9501\uff0c\u800c\u662f\u5411\u9501\u7ba1\u7406\u5668\u53d1\u9001\u8bf7\u6c42\u3002</li> <li> <p>\u9501\u7ba1\u7406\u5668\u7684\u56de\u590d: \u9501\u7ba1\u7406\u5668\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u4f1a\u6839\u636e\u5f53\u524d\u9501\u7684\u72b6\u6001\u548c\u89c4\u5219\u8fdb\u884c\u5904\u7406\u3002</p> <ul> <li>\u5982\u679c\u53ef\u4ee5\u6388\u4e88\u9501\uff0c\u5b83\u4f1a\u5411\u4e8b\u52a1\u53d1\u9001\u4e00\u4e2a\"\u9501\u6388\u4e88\u6d88\u606f (lock grant messages)\"\u3002</li> <li>\u5982\u679c\u8bf7\u6c42\u5bfc\u81f4\u6b7b\u9501\uff0c\u9501\u7ba1\u7406\u5668\u4f1a\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u8981\u6c42\u4e8b\u52a1\u56de\u6eda (roll back)\u3002</li> </ul> </li> <li> <p>\u4e8b\u52a1\u7b49\u5f85\u56de\u590d: \u53d1\u51fa\u9501\u8bf7\u6c42\u7684\u4e8b\u52a1\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u76f4\u5230\u6536\u5230\u9501\u7ba1\u7406\u5668\u7684\u56de\u590d\uff08\u6388\u4e88\u9501\u6216\u8981\u6c42\u56de\u6eda\uff09\u3002</p> </li> <li>\u9501\u8868 (lock table): \u9501\u7ba1\u7406\u5668\u7ef4\u62a4\u4e00\u4e2a\u540d\u4e3a\"\u9501\u8868\"\u7684\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u4e2a\u8868\u8bb0\u5f55\u4e86\u5f53\u524d\u5df2\u7ecf\u88ab\u6388\u4e88\u7684\u9501\u4ee5\u53ca\u6b63\u5728\u7b49\u5f85\u4e2d\u7684\u9501\u8bf7\u6c42\u3002</li> <li>\u9501\u8868\u7684\u5b9e\u73b0: \u9501\u8868\u901a\u5e38\u5728\u5185\u5b58\u4e2d\u5b9e\u73b0\uff0c\u5e76\u4e14\u4f7f\u7528\u6570\u636e\u9879\u7684\u540d\u79f0\u4f5c\u4e3a\u7d22\u5f15\uff0c\u4ee5\u4fbf\u5feb\u901f\u67e5\u627e\u67d0\u4e2a\u6570\u636e\u9879\u7684\u9501\u4fe1\u606f\u3002\u5e38\u89c1\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u54c8\u5e0c\u8868 (hash table)\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter18/#lock-table","title":"Lock Table","text":"<ol> <li>\u5de6\u8fb9\u7684\u5782\u76f4\u957f\u6761\u4ee3\u8868\u9501\u8868\u7684\u7d22\u5f15\u7ed3\u6784\u3002\u8fd9\u4e2a\u54c8\u5e0c\u8868\u7528\u4e8e\u6839\u636e\u6570\u636e\u9879\u7684\u6807\u8bc6\u5feb\u901f\u5b9a\u4f4d\u5230\u8be5\u6570\u636e\u9879\u7684\u9501\u4fe1\u606f\u3002\u56fe\u4e2d\u7684\u7bad\u5934\u4ece\u7d22\u5f15\u6307\u5411\u4e86\u5177\u4f53\u7684\u6570\u636e\u9879\u4fe1\u606f\u3002</li> <li>\u56fe\u4e2d\u663e\u793a\u4e86\u51e0\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u9879\uff0c\u901a\u8fc7\u5b83\u4eec\u552f\u4e00\u7684\u6807\u8bc6\u6765\u533a\u5206\uff0c\u8fd9\u4e9b\u6570\u5b57\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u67d0\u4e2a\u6570\u636e\u5757\u3001\u884c\u6216\u8868\u7b49\u3002</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u9879\uff0c\u9501\u8868\u90fd\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\u3002\u8fd9\u4e2a\u94fe\u8868\u5305\u542b\u4e86\u6240\u6709\u5bf9\u8be5\u6570\u636e\u9879\u7684\u9501\u8bf7\u6c42\uff0c\u65e0\u8bba\u662f\u5df2\u7ecf\u6388\u4e88\u7684\u8fd8\u662f\u6b63\u5728\u7b49\u5f85\u7684\u3002</li> <li> <p>\u94fe\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u4e8b\u52a1\u5bf9\u8be5\u6570\u636e\u9879\u7684\u9501\u8bf7\u6c42\u3002</p> <ul> <li>\u84dd\u8272\u65b9\u6846 (granted): \u4ee3\u8868\u8fd9\u4e2a\u4e8b\u52a1\u5bf9\u8be5\u6570\u636e\u9879\u7684\u9501\u8bf7\u6c42\u5df2\u7ecf\u88ab\u6388\u4e88\u3002</li> <li>\u767d\u8272\u65b9\u6846 (waiting): \u4ee3\u8868\u8fd9\u4e2a\u4e8b\u52a1\u5bf9\u8be5\u6570\u636e\u9879\u7684\u9501\u8bf7\u6c42\u6b63\u5728\u7b49\u5f85\u3002</li> </ul> </li> <li> <p>\u94fe\u8868\u4e2d\u8bf7\u6c42\u7684\u987a\u5e8f\u901a\u5e38\u8868\u793a\u5b83\u4eec\u5230\u8fbe\u9501\u7ba1\u7406\u5668\u7684\u987a\u5e8f\u3002\u65b0\u7684\u8bf7\u6c42\u4f1a\u88ab\u6dfb\u52a0\u5230\u961f\u5217\u7684\u672b\u5c3e\u3002\u9501\u7ba1\u7406\u5668\u4f1a\u6309\u7167\u961f\u5217\u7684\u987a\u5e8f\u68c0\u67e5\u7b49\u5f85\u4e2d\u7684\u8bf7\u6c42\u662f\u5426\u53ef\u4ee5\u88ab\u6388\u4e88\uff08\u5373\u662f\u5426\u4e0e\u5f53\u524d\u5df2\u6388\u4e88\u7684\u9501\u517c\u5bb9\uff09\u3002</p> </li> </ol> <p>Lock table records granted locks and waiting requests</p> <p>\u9501\u8868\u7684\u4e3b\u8981\u529f\u80fd\u5c31\u662f\u8bb0\u5f55\u6bcf\u4e2a\u6570\u636e\u9879\u4e0a\u5f53\u524d\u88ab\u54ea\u4e2a\u4e8b\u52a1\u6301\u6709\u4ec0\u4e48\u7c7b\u578b\u7684\u9501\uff08\u5df2\u6388\u4e88\u7684\u9501\uff09\uff0c\u4ee5\u53ca\u6709\u54ea\u4e9b\u4e8b\u52a1\u6b63\u5728\u7b49\u5f85\u83b7\u53d6\u67d0\u4e2a\u6570\u636e\u9879\u7684\u9501\uff08\u7b49\u5f85\u4e2d\u7684\u8bf7\u6c42\uff09\u3002</p> <p>Lock table also records the type of lock granted or requested</p> <p>\u9501\u8868\u4e0d\u4ec5\u4ec5\u8bb0\u5f55\u54ea\u4e2a\u4e8b\u52a1\u5728\u54ea\u9879\u6570\u636e\u4e0a\u8bf7\u6c42\u6216\u6301\u6709\u4e86\u9501\uff0c\u8fd8\u4f1a\u8bb0\u5f55\u9501\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\u662f\u5171\u4eab\u9501\uff08S \u9501\uff09\u8fd8\u662f\u6392\u4ed6\u9501\uff08X \u9501\uff09\u3002</p> <p>New request is added to the end of the queue of requests for the data item, and granted if it is compatible with all earlier locks</p> <p>\u5f53\u4e00\u4e2a\u65b0\u7684\u4e8b\u52a1\u8bf7\u6c42\u5bf9\u67d0\u4e2a\u6570\u636e\u9879\u52a0\u9501\u65f6\uff0c\u8fd9\u4e2a\u65b0\u7684\u8bf7\u6c42\u4f1a\u88ab\u6dfb\u52a0\u5230\u8be5\u6570\u636e\u9879\u5bf9\u5e94\u7684\u8bf7\u6c42\u961f\u5217\u7684\u672b\u5c3e\u3002\u53ea\u6709\u5f53\u8fd9\u4e2a\u65b0\u8bf7\u6c42\u4e0e\u961f\u5217\u4e2d\u6240\u6709\u5728\u5b83\u4e4b\u524d\u7684\uff08\u5373\u5df2\u7ecf\u6388\u4e88\u7684\u9501\u6216\u6b63\u5728\u7b49\u5f85\u4f46\u5728\u5b83\u4e4b\u524d\u7684\u8bf7\u6c42\uff09\u9501\u90fd\u517c\u5bb9\u65f6\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u624d\u4f1a\u88ab\u7acb\u5373\u6388\u4e88\u3002\u5426\u5219\uff0c\u5b83\u5c31\u4f1a\u7559\u5728\u961f\u5217\u4e2d\u7b49\u5f85\u3002</p> <p>Unlock requests result in the request being deleted, and later requests are checked to see if they can now be granted</p> <p>\u5f53\u4e00\u4e2a\u4e8b\u52a1\u5b8c\u6210\u5bf9\u67d0\u4e2a\u6570\u636e\u9879\u7684\u8bbf\u95ee\u5e76\u8bf7\u6c42\u89e3\u9501\u65f6\uff0c\u9501\u7ba1\u7406\u5668\u4f1a\u4ece\u9501\u8868\u4e2d\u5220\u9664\u8be5\u4e8b\u52a1\u5bf9\u8be5\u6570\u636e\u9879\u7684\u9501\u8bf7\u6c42\u8bb0\u5f55\u3002\u7136\u540e\uff0c\u9501\u7ba1\u7406\u5668\u4f1a\u68c0\u67e5\u961f\u5217\u4e2d\u6392\u5728\u88ab\u5220\u9664\u8bf7\u6c42\u4e4b\u540e\u7684\u7b49\u5f85\u4e2d\u7684\u8bf7\u6c42\u3002\u8fd9\u4e9b\u8bf7\u6c42\u73b0\u5728\u53ef\u80fd\u6709\u673a\u4f1a\u88ab\u6388\u4e88\uff0c\u56e0\u4e3a\u5b83\u524d\u9762\u7684\u4e00\u4e9b\u9501\u53ef\u80fd\u5df2\u7ecf\u88ab\u91ca\u653e\u4e86\u3002</p> <p>If transaction aborts, all waiting or granted requests of the transaction are deleted</p> <p>\u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u4e2d\u6b62\uff08\u56de\u6eda\uff09\uff0c\u9501\u7ba1\u7406\u5668\u9700\u8981\u5220\u9664\u8be5\u4e8b\u52a1\u5bf9\u6240\u6709\u6570\u636e\u9879\u7684\u6240\u6709\u7b49\u5f85\u4e2d\u6216\u5df2\u6388\u4e88\u7684\u9501\u8bf7\u6c42\u3002\u4e3a\u4e86\u9ad8\u6548\u5730\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u9501\u7ba1\u7406\u5668\u53ef\u80fd\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u5217\u8868\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u4e8b\u52a1\u5f53\u524d\u6301\u6709\u7684\u6240\u6709\u9501\u3002</p> <p>lock manager may keep a list of locks held by each transaction, to implement this efficiently</p> <p>\u9501\u8868\u901a\u5e38\u5728\u5185\u5b58\u4e2d\u5b9e\u73b0\uff0c\u4ee5\u63d0\u4f9b\u5feb\u901f\u8bbf\u95ee\u3002\u5b83\u901a\u5e38\u662f\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u4f7f\u7528\u6570\u636e\u9879\u7684\u540d\u79f0\uff08\u6216\u6807\u8bc6\u7b26\uff09\u4f5c\u4e3a\u952e\u6765\u67e5\u627e\u5bf9\u5e94\u7684\u6570\u636e\u9879\u7684\u9501\u4fe1\u606f\u548c\u8bf7\u6c42\u961f\u5217\u3002</p> <p>Info</p> <p>\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad\u662f\u5426 unlock \u540e\u53c8 lock \u4e86\u6765\u5224\u65ad\u662f\u5426\u662f\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u3002</p>"},{"location":"Computer_Science/DB/Chapter18/#deadlock","title":"Deadlock","text":""},{"location":"Computer_Science/DB/Chapter18/#deadlock-handling","title":"Deadlock Handling","text":"<p>\u53ea\u8981\u662f\u57fa\u4e8e\u9501\u7684\u5e76\u53d1\u63a7\u5236\u534f\u8bae\uff0c\u5c31\u65e0\u6cd5\u907f\u514d\u6b7b\u9501\u3002</p> <p>System is deadlocked if there is a set of transactions such that every transaction in the set is waiting for another transaction in the set.</p> <p>Two-phase locking does not ensure freedom from deadlocks</p> <p>Consider the following two transactions:</p> <p></p> <p>Schedule with deadlock</p> <p></p> <p>Deadlock prevention protocols ensure that the system will never enter into a deadlock state. Some prevention strategies :</p> <ul> <li>Require that each transaction locks all its data items before it begins execution (predeclaration).</li> <li>Impose partial ordering of all data items and require that a transaction can lock data items only in the order specified by the partial order (graph-based protocol).</li> </ul> <p>Timeout-Based Schemes:</p> <ul> <li>a transaction waits for a lock only for a specified amount of time. After that, the wait times out and the transaction is rolled back.</li> <li>thus deadlocks are not possible, </li> <li>simple to implement; but starvation is possible. Also difficult to determine good value of the timeout interval.</li> </ul> <ol> <li>\u9884\u58f0\u660e (Predeclaration):</li> </ol> <p>\u7b56\u7565: \u8981\u6c42\u6bcf\u4e2a\u4e8b\u52a1\u5728\u5f00\u59cb\u6267\u884c\u4e4b\u524d\u5c31\u58f0\u660e\u5e76\u83b7\u53d6\u5b83\u9700\u8981\u7684\u6240\u6709\u6570\u636e\u9879\u7684\u9501\u3002 \u4f18\u70b9: \u5982\u679c\u4e8b\u52a1\u80fd\u591f\u6210\u529f\u83b7\u53d6\u6240\u6709\u5fc5\u9700\u7684\u9501\uff0c\u5b83\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u56e0\u4e3a\u7b49\u5f85\u5176\u4ed6\u4e8b\u52a1\u6240\u6301\u6709\u7684\u9501\u800c\u53d1\u751f\u6b7b\u9501\u3002 \u7f3a\u70b9:</p> <pre><code>*   \u4e8b\u52a1\u53ef\u80fd\u4e0d\u77e5\u9053\u5b83\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u5230\u5e95\u9700\u8981\u54ea\u4e9b\u6570\u636e\u9879\u7684\u9501\uff0c\u8fd9\u4f7f\u5f97\u9884\u58f0\u660e\u53d8\u5f97\u56f0\u96be\u6216\u4e0d\u53ef\u80fd\u3002\n*   \u5373\u4f7f\u4e8b\u52a1\u77e5\u9053\u6240\u6709\u9700\u8981\u7684\u9501\uff0c\u63d0\u524d\u957f\u65f6\u95f4\u6301\u6709\u9501\u4f1a\u964d\u4f4e\u7cfb\u7edf\u7684\u5e76\u53d1\u6027\uff0c\u56e0\u4e3a\u5176\u4ed6\u4e8b\u52a1\u53ef\u80fd\u9700\u8981\u7b49\u5f85\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\u9879\uff0c\u5373\u4f7f\u4e8b\u52a1\u6682\u65f6\u8fd8\u4e0d\u9700\u8981\u4f7f\u7528\u5b83\u4eec\u3002\n*   \u83b7\u53d6\u6240\u6709\u9501\u7684\u8fc7\u7a0b\u672c\u8eab\u4e5f\u53ef\u80fd\u5bfc\u81f4\u4e8b\u52a1\u9700\u8981\u7b49\u5f85\uff0c\u867d\u7136\u8fd9\u907f\u514d\u4e86\u6b7b\u9501\u5faa\u73af\uff0c\u4f46\u53ef\u80fd\u4f1a\u589e\u52a0\u7b49\u5f85\u65f6\u95f4\u3002\n</code></pre> <ol> <li>\u57fa\u4e8e\u56fe\uff08Graph-Based Protocol\uff09:</li> </ol> <p>\u7b56\u7565: \u5c06\u6240\u6709\u4e8b\u52a1\u548c\u5b83\u4eec\u6240\u9700\u8981\u7684\u6570\u636e\u9879\u8868\u793a\u4e3a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5176\u4e2d\u8282\u70b9\u4ee3\u8868\u4e8b\u52a1\u548c\u6570\u636e\u9879\uff0c\u8fb9\u4ee3\u8868\u4e8b\u52a1\u5bf9\u6570\u636e\u9879\u7684\u9501\u8bf7\u6c42\u6216\u6301\u6709\u3002\u5f3a\u5236\u4e8b\u52a1\u6309\u4e00\u81f4\u987a\u5e8f\u52a0\u9501\uff0c\u907f\u514d\u5f62\u6210\u7b49\u5f85\u73af\u8def\u3002 \u4f18\u70b9: \u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u68c0\u6d4b\u5230\u6f5c\u5728\u7684\u6b7b\u9501\u5faa\u73af\uff0c\u5e76\u963b\u6b62\u4e8b\u52a1\u8fdb\u5165\u6b7b\u9501\u72b6\u6001\u3002\u76f8\u6bd4\u9884\u58f0\u660e\uff0c\u5141\u8bb8\u66f4\u7ec6\u7c92\u5ea6\u7684\u9501\u7ba1\u7406\uff0c\u63d0\u5347\u4e00\u5b9a\u5e76\u53d1\u6027\u3002 \u7f3a\u70b9:</p> <pre><code>* \u5b9e\u73b0\u8d77\u6765\u76f8\u5bf9\u590d\u6742\uff0c\u9700\u8981\u7ef4\u62a4\u548c\u66f4\u65b0\u4e00\u4e2a\u52a8\u6001\u7684\u56fe\u7ed3\u6784\u3002\n* \u4e8b\u52a1\u5fc5\u987b\u6309\u56fa\u5b9a\u987a\u5e8f\u8bbf\u95ee\u6570\u636e\uff0c\u53ef\u80fd\u4e0d\u7b26\u5408\u5b9e\u9645\u4e1a\u52a1\u903b\u8f91\u3002\n* \u9700\u8981\u8bbe\u8ba1\u5408\u7406\u7684\u6570\u636e\u9879\u504f\u5e8f\u5173\u7cfb\uff0c\u5e76\u786e\u4fdd\u6240\u6709\u4e8b\u52a1\u9075\u5b88\u3002\n</code></pre> <ol> <li>\u57fa\u4e8e\u8d85\u65f6\uff08Timeout-Based Schemes\uff09:</li> </ol> <p>\u7b56\u7565: \u4e8b\u52a1\u8bf7\u6c42\u9501\u65f6\uff0c\u4ec5\u5141\u8bb8\u7b49\u5f85\u4e00\u6bb5\u56fa\u5b9a\u65f6\u95f4\u3002\u82e5\u8d85\u65f6\u4ecd\u672a\u83b7\u5f97\u9501\uff0c\u4e8b\u52a1\u81ea\u52a8\u56de\u6eda\u5e76\u91ca\u653e\u5df2\u6301\u6709\u7684\u9501\u3002 \u4f18\u70b9: \u901a\u8fc7\u5f3a\u5236\u7ec8\u6b62\u6f5c\u5728\u7684\u6b7b\u9501\u53c2\u4e0e\u8005\uff0c\u907f\u514d\u7cfb\u7edf\u9677\u5165\u65e0\u9650\u7b49\u5f85\u3002 \u7f3a\u70b9:</p> <pre><code>* \u5b9e\u73b0\u7b80\u5355\uff0c\u65e0\u9700\u590d\u6742\u7684\u9501\u5e8f\u7ba1\u7406\u6216\u9884\u58f0\u660e\u3002\n* \u65e0\u6b7b\u9501\u98ce\u9669\uff0c\u7b49\u5f85\u65f6\u95f4\u6709\u9650\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u957f\u671f\u963b\u585e\u3002\n</code></pre> <p>\u7f3a\u70b9:</p> <pre><code>* \u9965\u997f\u95ee\u9898\uff1a\u957f\u65f6\u95f4\u7b49\u5f85\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u4e8b\u52a1\u65e0\u6cd5\u83b7\u5f97\u9501\uff0c\u4ece\u800c\u997f\u6b7b\uff08\u59cb\u7ec8\u65e0\u6cd5\u5b8c\u6210\uff09\u3002\n* \u8d85\u65f6\u65f6\u95f4\u7684\u9009\u62e9\u9700\u8981\u6743\u8861\uff0c\u8fc7\u77ed\u53ef\u80fd\u5bfc\u81f4\u9891\u7e41\u56de\u6eda\u548c\u91cd\u8bd5\uff0c\u8fc7\u957f\u5219\u53ef\u80fd\u589e\u52a0\u6b7b\u9501\u98ce\u9669\u3002\n* \u6027\u80fd\u5f00\u9500\uff1a\u9891\u7e41\u7684\u8d85\u65f6\u68c0\u6d4b\u548c\u4e8b\u52a1\u56de\u6eda\u53ef\u80fd\u4f1a\u5f71\u54cd\u7cfb\u7edf\u6027\u80fd\u3002\n</code></pre>"},{"location":"Computer_Science/DB/Chapter18/#deadlock-detection","title":"Deadlock Detection","text":"<p>Deadlocks can be described as a wait-for graph, which consists of a pair G = (V,E),</p> <ul> <li>V is a set of vertices (all the transactions in the system)</li> <li>E is a set of edges; each element is an ordered pair \\(T_i \\rightarrow T_j\\) </li> </ul> <p>if \\(T_i \\rightarrow T_j\\) is in E, then there is a directed edge from \\(T_i\\) to \\(T_j\\) , implying that \\(T_i\\) is waiting for \\(T_j\\) to release a data item.</p> <p>When \\(T_i\\) requests a data item currently being held by \\(T_j\\), then the edge \\(T_i\\) \\(T_j\\) is inserted in the wait-for graph. This edge is removed only when \\(T_j\\) is no longer holding a data item needed by \\(T_i\\).</p> <p>The system is in a deadlock state if and only if the wait-for graph has a cycle. Must invoke a deadlock-detection algorithm periodically to look for cycles.</p> <p></p>"},{"location":"Computer_Science/DB/Chapter18/#deadlock-recovery","title":"Deadlock Recovery","text":"<p>When deadlock is detected :</p> <ul> <li> <p>Some transaction will have to rolled back (made a victim) to break deadlock. Select that transaction as victim that will incur minimum cost. \u5f3a\u5236\u56de\u6eda\u4e00\u4e9b\u4e8b\u52a1\u3002</p> </li> <li> <p>Rollback -- determine how far to roll back transaction</p> <ul> <li>Total rollback: Abort the transaction and then restart it.</li> <li>More effective to roll back transaction only as far as necessary to break deadlock.</li> </ul> </li> <li> <p>Starvation happens if same transaction is always chosen as victim. Include the number of rollbacks in the cost factor to avoid starvation</p> </li> </ul> Question <p></p> Answer <p>a) \u54ea\u4e9b\u4e8b\u52a1\u6d89\u53ca\u6b7b\u9501\uff1f</p> <p>\u6b7b\u9501\u53d1\u751f\u5728\u4e00\u7ec4\u4e8b\u52a1\u76f8\u4e92\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u9501\uff0c\u5f62\u6210\u4e00\u4e2a\"\u73af\"\u3002T1\u3001T2\u3001T6 \u5f62\u6210\u4e86\u4e00\u4e2a\u6b7b\u9501\u73af\u3002</p> <p>b) \u4e3a\u4e86\u89e3\u9664\u6b7b\u9501\uff0c\u5e94\u8be5\u56de\u6eda\u54ea\u4e2a\u4e8b\u52a1\uff1f</p> <p>\u7406\u8bba\u4e0a\uff0c\u56de\u6eda\u73af\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u4e8b\u52a1\u90fd\u53ef\u4ee5\u6253\u7834\u6b7b\u9501\u3002\u5b9e\u9645\u4e2d\uff0c\u901a\u5e38\u9009\u62e9\"\u4ee3\u4ef7\u6700\u5c0f\"\u7684\u4e8b\u52a1\uff08\u5982\u7b49\u5f85\u65f6\u95f4\u6700\u77ed\u3001\u5df2\u6267\u884c\u64cd\u4f5c\u6700\u5c11\u7b49\uff09\u3002</p> <p>\u4efb\u9009 T1\u3001T2 \u6216 T6 \u4e2d\u7684\u4e00\u4e2a\u5373\u53ef\u3002</p> <p>c) \u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5e2e\u52a9\u4e8b\u52a1\u5728\u63d0\u4ea4\u65f6\u9ad8\u6548\u91ca\u653e\u5b83\u6301\u6709\u7684\u6240\u6709\u9501\uff1f</p> <p>\u9700\u8981\u4e00\u79cd\u80fd\u5feb\u901f\u627e\u5230\u67d0\u4e2a\u4e8b\u52a1\u6301\u6709\u7684\u6240\u6709\u9501\u7684\u6570\u636e\u7ed3\u6784\u3002\u6700\u5e38\u7528\u7684\u662f\uff1a</p> <ul> <li>\u94fe\u8868\uff08Linked List\uff09 \u6216 \u96c6\u5408\uff08Set\uff09\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u7ef4\u62a4\u4e00\u4e2a\u81ea\u5df1\u6301\u6709\u7684\u9501\u7684\u5217\u8868\u3002</li> <li>\u5f53\u4e8b\u52a1\u63d0\u4ea4\u65f6\uff0c\u53ea\u9700\u904d\u5386\u8fd9\u4e2a\u5217\u8868\uff0c\u4f9d\u6b21\u91ca\u653e\u6240\u6709\u9501\u5373\u53ef\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter18/#graph-based-protocols","title":"Graph-Based Protocols","text":"<p>Graph-based protocols are an alternative to two-phase locking</p> <p>Impose a partial ordering \\(\\rightarrow\\) on the set \\(D = \\{d_1, d_2, \\ldots, d_n\\}\\) of data items. </p> <ul> <li>If \\(d_i \\rightarrow d_j\\), then any transaction accessing both \\(d_i\\) and \\(d_j\\) must access \\(d_i\\) before accessing \\(d_j\\).</li> <li>Implies that the set D may now be viewed as a directed acyclic graph, called a database graph.</li> </ul> <p>\u56fe\u4e2d\u5e26\u6709\u7bad\u5934\u7684\u7ebf\u8868\u793a\u6570\u636e\u9879\u4e4b\u95f4\u7684\u504f\u5e8f\u5173\u7cfb\u3002\u5982\u679c\u4ece\u6570\u636e\u9879 \\(d_i\\) \u6709\u4e00\u6761\u7bad\u5934\u6307\u5411\u6570\u636e\u9879 \\(d_j\\) (\\(d_i \\rightarrow d_j\\))\uff0c\u8fd9\u610f\u5473\u7740\u4efb\u4f55\u9700\u8981\u540c\u65f6\u8bbf\u95ee \\(d_i\\) \u548c \\(d_j\\) \u7684\u4e8b\u52a1\uff0c\u90fd\u5fc5\u987b\u5148\u8bbf\u95ee\u5e76\u9501\u5b9a \\(d_i\\)\uff0c\u7136\u540e\u624d\u80fd\u8bbf\u95ee\u5e76\u9501\u5b9a \\(d_j\\)\u3002</p> <p>\u901a\u8fc7\u5f3a\u5236\u4e8b\u52a1\u6309\u7167\u56fa\u5b9a\u7684\u504f\u5e8f\u5173\u7cfb\u83b7\u53d6\u9501\uff0c\u57fa\u4e8e\u56fe\u7684\u534f\u8bae\u53ef\u4ee5\u9884\u9632\u6b7b\u9501\u3002\u56e0\u4e3a\u4e8b\u52a1\u603b\u662f\u6309\u987a\u5e8f\u83b7\u53d6\u9501\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u4e24\u4e2a\u4e8b\u52a1\u4e92\u76f8\u7b49\u5f85\u5bf9\u65b9\u6301\u6709\u9501\u7684\u60c5\u51b5\uff08\u5373\u4e0d\u4f1a\u5728\u7b49\u5f85\u56fe\u4e2d\u5f62\u6210\u73af\uff09\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter18/#tree-protocol","title":"Tree Protocol","text":"<p>The tree-protocol is a simple kind of graph protocol.</p> <ol> <li>Only exclusive locks are allowed.</li> <li>The first lock by \\(T_i\\) may be on any data item. Subsequently, a data Q can be locked by \\(T_i\\) only if the parent of Q is currently locked by \\(T_i\\).</li> <li>Data items may be unlocked at any time.</li> <li>A data item that has been locked and unlocked by \\(T_i\\) cannot subsequently be relocked by \\(T_i\\).</li> </ol> <p>\u6811\u534f\u8bae\u7684\u5173\u952e\u89c4\u5219\u662f\uff1a</p> <ol> <li>\u4e8b\u52a1\u7b2c\u4e00\u6b21\u9501\u4efb\u4f55\u6570\u636e\u9879\u90fd\u53ef\u4ee5\u3002</li> <li>\u4e4b\u540e\uff0c\u4e8b\u52a1\u53ea\u80fd\u9501\u5b9a\u5176\u5f53\u524d\u5df2\u7ecf\u9501\u5b9a\u7684\u6570\u636e\u9879\u7684\u5b50\u8282\u70b9\u3002</li> <li>\u4e8b\u52a1\u53ef\u4ee5\u968f\u65f6\u89e3\u9501\u6570\u636e\u9879\u3002</li> <li>\u4e8b\u52a1\u4e0d\u80fd\u91cd\u590d\u9501\u5b9a\u5df2\u7ecf\u89e3\u9501\u8fc7\u7684\u6570\u636e\u9879\u3002</li> </ol> <p></p> <p>The tree protocol ensures conflict serializability as well as freedom from deadlock.</p> <p>\u6811\u534f\u8bae\u80fd\u591f\u4fdd\u8bc1\u51b2\u7a81\u53ef\u4e32\u884c\u5316 (conflict serializability)\uff0c\u5e76\u4e14\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501 (freedom from deadlock)\u3002\u8fd9\u610f\u5473\u7740\u6309\u7167\u6811\u534f\u8bae\u6267\u884c\u7684\u4e8b\u52a1\u4ea7\u751f\u7684\u7ed3\u679c\u7b49\u4ef7\u4e8e\u67d0\u79cd\u4e32\u884c\u6267\u884c\u7684\u7ed3\u679c\uff0c\u540c\u65f6\u7cfb\u7edf\u4e0d\u4f1a\u56e0\u4e3a\u4e8b\u52a1\u76f8\u4e92\u7b49\u5f85\u9501\u800c\u9677\u5165\u505c\u987f\u3002</p> <p>Advantages:</p> <ol> <li>Unlocking may occur earlier in the tree-locking protocol than in the two-phase locking protocol.</li> </ol> <p>\u76f8\u6bd4\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae (Two-Phase Locking, 2PL)\uff0c\u6811\u534f\u8bae\u5141\u8bb8\u4e8b\u52a1\u66f4\u65e9\u5730\u91ca\u653e\u9501\u3002</p> <ul> <li>shorter waiting times, and increase in concurrency</li> <li>\u8fd9\u53ef\u4ee5\u51cf\u5c11\u4e8b\u52a1\u7684\u7b49\u5f85\u65f6\u95f4\uff0c\u56e0\u4e3a\u5176\u4ed6\u4e8b\u52a1\u53ef\u4ee5\u66f4\u5feb\u5730\u83b7\u53d6\u5230\u91ca\u653e\u7684\u6570\u636e\u9879\u7684\u9501\u3002\u4ece\u800c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u7684\u5e76\u53d1\u6027\uff0c\u5141\u8bb8\u66f4\u591a\u4e8b\u52a1\u540c\u65f6\u6267\u884c\u3002</li> </ul> <ol> <li>protocol is deadlock-free</li> </ol> <p>\u6811\u534f\u8bae\u4ece\u8bbe\u8ba1\u4e0a\u5c31\u907f\u514d\u4e86\u6b7b\u9501\u7684\u53d1\u751f\u3002</p> <ul> <li>no rollbacks are required</li> <li>\u7cfb\u7edf\u4e0d\u9700\u8981\u8fdb\u884c\u6b7b\u9501\u68c0\u6d4b\uff0c\u4e5f\u65e0\u9700\u56e0\u4e3a\u6b7b\u9501\u800c\u56de\u6eda\u4e8b\u52a1\uff0c\u51cf\u5c11\u4e86\u5f00\u9500\u548c\u590d\u6742\u6027\u3002</li> </ul> <p>Disadvantages:</p> <ol> <li>Protocol does not guarantee recoverability or cascade freedom</li> </ol> <p>\u6811\u534f\u8bae\u672c\u8eab\u4e0d\u80fd\u4fdd\u8bc1\u53ef\u6062\u590d\u6027 (recoverability) \u548c\u4e5f\u4e0d\u80fd\u4fdd\u8bc1\u65e0\u7ea7\u8054\u56de\u6eda (cascade freedom)\u3002</p> <ul> <li>Need to introduce commit dependencies to ensure recoverability</li> </ul> <p>\u4e3a\u4e86\u786e\u4fdd\u53ef\u6062\u590d\u6027\uff0c\u53ef\u80fd\u9700\u8981\u5f15\u5165\u63d0\u4ea4\u4f9d\u8d56 (commit dependencies) \u7b49\u989d\u5916\u7684\u673a\u5236\u3002</p> <ol> <li>Transactions may have to lock more data items than needed.</li> </ol> <p>\u4e3a\u4e86\u9075\u5faa\u4ece\u7236\u5230\u5b50\u7684\u9501\u5b9a\u89c4\u5219\uff0c\u4e8b\u52a1\u53ef\u80fd\u4e0d\u5f97\u4e0d\u9501\u5b9a\u4e00\u4e9b\u5b83\u5b9e\u9645\u4e0a\u5e76\u4e0d\u9700\u8981\u7684\u6570\u636e\u9879\u3002\u4f8b\u5982\uff0c\u8981\u8bbf\u95ee\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u5fc5\u987b\u5148\u9501\u5b9a\u5b83\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\uff0c\u5373\u4f7f\u4e8b\u52a1\u53ea\u9700\u8981\u5b50\u8282\u70b9\u7684\u6570\u636e\u3002</p> <ul> <li>increased locking overhead, and additional waiting time</li> <li>\u8fd9\u589e\u52a0\u4e86\u9501\u5b9a\u7684\u5f00\u9500 (locking overhead)\u3002</li> <li>potential decrease in concurrency</li> <li>\u4e5f\u53ef\u80fd\u5bfc\u81f4\u4e8b\u52a1\u9700\u8981\u7b49\u5f85\u66f4\u591a\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u9879\u4e0a\u7684\u9501\uff0c\u589e\u52a0\u4e86\u7b49\u5f85\u65f6\u95f4\u3002\u53ef\u80fd\u53cd\u800c\u964d\u4f4e\u4e86\u5e76\u53d1\u6027\u3002</li> </ul> <p>Schedules not possible under two-phase locking are possible under tree protocol, and vice versa.</p> <p>\u6709\u4e9b\u5e76\u53d1\u6267\u884c\u8ba1\u5212\u5728\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u4e0b\u662f\u53ef\u80fd\u5b9e\u73b0\u7684\uff0c\u4f46\u5728\u6811\u534f\u8bae\u4e0b\u4e0d\u53ef\u80fd\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002</p> call back <ul> <li> <p>\u57fa\u672c 2PL \u4e0d\u53ef\u6062\u590d\uff0c\u53ef\u80fd\u53d1\u751f\u7ea7\u8054\u56de\u6eda\u3002</p> </li> <li> <p>\u4e25\u683c 2PL \u662f\u53ef\u6062\u590d\u7684\uff0c\u4e0d\u4f1a\u53d1\u751f\u7ea7\u8054\u56de\u6eda\u3002\u56e0\u4e3a\u5199\u9501\u4e00\u76f4\u6301\u6709\u5230\u63d0\u4ea4/\u4e2d\u6b62\uff0c\u5176\u4ed6\u4e8b\u52a1\u4e0d\u53ef\u80fd\u5728\u6301\u6709\u5199\u9501\u7684\u4e8b\u52a1\u63d0\u4ea4\u4e4b\u524d\u8bfb\u53d6\u5230\u5b83\u4fee\u6539\u7684\u6570\u636e\uff08\u5373\u675c\u7edd\u4e86\"\u810f\u8bfb\"\uff09\u3002</p> </li> <li> <p>\u6811\u534f\u8bae\u662f\u4e0d\u53ef\u6062\u590d\u7684\uff0c\u53ef\u80fd\u53d1\u751f\u7ea7\u8054\u56de\u6eda\u3002</p> </li> </ul>"},{"location":"Computer_Science/DB/Chapter18/#multiple-granularity","title":"Multiple Granularity","text":"<p>Allow data items to be of various sizes and define a hierarchy of data granularities, where the small granularities are nested within larger ones</p> <p>Can be represented graphically as a tree (but don't confuse with tree-locking protocol)</p> <p>When a transaction locks a node in the tree explicitly, it implicitly locks all the node's descendents in the same mode.</p> <p>Granularity of locking (level in tree where locking is done):</p> <ul> <li>fine granularity\uff08\u7ec6\u7c92\u5ea6\uff09 (lower in tree): high concurrency, high locking overhead</li> <li>coarse granularity\uff08\u7c97\u7c92\u5ea6\uff09 (higher in tree): low locking overhead, low concurrency</li> </ul>"},{"location":"Computer_Science/DB/Chapter18/#example-of-granularity-hierarchy","title":"Example of Granularity Hierarchy","text":"<p>\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u9879\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u5927\u5c0f\u6216\"\u7c92\u5ea6\"\u3002\u4f8b\u5982\uff0c\u6574\u4e2a\u6570\u636e\u5e93\u662f\u4e00\u4e2a\u7c97\u7c92\u5ea6\u7684\u6570\u636e\u9879\uff0c\u800c\u5176\u4e2d\u7684\u67d0\u4e2a\u8bb0\u5f55\u662f\u4e00\u4e2a\u7ec6\u7c92\u5ea6\u7684\u6570\u636e\u9879\u3002</p> <p>\u8fd9\u4e9b\u4e0d\u540c\u7c92\u5ea6\u7684\u6570\u636e\u9879\u53ef\u4ee5\u7ec4\u7ec7\u6210\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\uff0c\u901a\u5e38\u7528\u4e00\u68f5\u6811\u6765\u8868\u793a\u3002</p> <ul> <li>\u6700\u9876\u5c42\u662f\u6574\u4e2a\u6570\u636e\u5e93 (database)\u3002</li> <li>\u4e0b\u4e00\u5c42\u53ef\u80fd\u662f\u533a\u57df (area)\uff08\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u903b\u8f91\u6216\u7269\u7406\u4e0a\u7684\u5206\u7ec4\uff09\u3002</li> <li>\u518d\u4e0b\u4e00\u5c42\u662f\u6587\u4ef6 (File)\uff0c\u5728\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u901a\u5e38\u5bf9\u5e94\u4e8e\u8868 (table)\u3002</li> <li>\u6700\u5e95\u5c42\u662f\u8bb0\u5f55 (record)\uff0c\u4e5f\u5c31\u662f\u8868\u4e2d\u7684\u4e00\u884c\u6570\u636e\u3002</li> </ul> <p>\u591a\u7c92\u5ea6\u9501\u5b9a\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5f53\u4e00\u4e2a\u4e8b\u52a1\u5728\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\u4e0a\u663e\u5f0f\u5730\u83b7\u53d6\u9501\u65f6\uff0c\u5b83\u4e5f\u9690\u5f0f\u5730\u4ee5\u76f8\u540c\u7684\u6a21\u5f0f\u9501\u5b9a\u4e86\u8be5\u8282\u70b9\u4e0b\u7684\u6240\u6709\u5b50\u8282\u70b9\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u5728\u6587\u4ef6 \\(F_a\\) \u4e0a\u83b7\u53d6\u4e86\u6392\u4ed6\u9501 (X)\uff0c\u90a3\u4e48\u5b83\u5c31\u9690\u5f0f\u5730\u5bf9 \\(F_a\\) \u6587\u4ef6\u4e2d\u7684\u6240\u6709\u8bb0\u5f55 (\\(r_{a_1}\\) \u5230 \\(r_{an}\\)) \u90fd\u83b7\u53d6\u4e86\u6392\u4ed6\u9501\uff0c\u5176\u4ed6\u4e8b\u52a1\u5c31\u4e0d\u80fd\u8bbf\u95ee\u8fd9\u4e9b\u8bb0\u5f55\u3002</p> <p>\u56fe\u4e2d\u5728\u4e0d\u540c\u7684\u5c42\u6b21\u65c1\u8fb9\u5217\u51fa\u4e86\u4e0d\u540c\u7684\u9501\u7c7b\u578b\uff1a</p> <ol> <li>S (Shared) \u5171\u4eab\u9501: \u7528\u4e8e\u8bfb\u53d6\u3002\u591a\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u540c\u65f6\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\u9879\u83b7\u53d6 S \u9501\u3002</li> <li>X (Exclusive) \u6392\u4ed6\u9501\u7528\u4e8e\u5199\u5165\u3002\u4e00\u4e2a\u4e8b\u52a1\u83b7\u53d6 X \u9501\u540e\uff0c\u5176\u4ed6\u4efb\u4f55\u4e8b\u52a1\u90fd\u4e0d\u80fd\u518d\u83b7\u53d6\u8be5\u6570\u636e\u9879\u7684\u4efb\u4f55\u9501\u3002</li> <li>\u610f\u5411\u9501 (Intention Locks):\u8fd9\u662f\u591a\u7c92\u5ea6\u9501\u5b9a\u4e2d\u7279\u6709\u7684\u9501\u7c7b\u578b\uff0c\u7528\u4e8e\u5728\u7c97\u7c92\u5ea6\u8282\u70b9\u4e0a\u8868\u793a\u4e8b\u52a1\u6253\u7b97\u5728\u66f4\u7ec6\u7c92\u5ea6\u7684\u5b50\u8282\u70b9\u4e0a\u83b7\u53d6\u4ec0\u4e48\u7c7b\u578b\u7684\u9501\u3002</li> </ol> <ul> <li>IS (Intention Shared) \u610f\u5411\u5171\u4eab\u9501: \u8868\u793a\u4e8b\u52a1\u6253\u7b97\u5728\u67d0\u4e2a\u540e\u4ee3\u8282\u70b9\u4e0a\u83b7\u53d6 S \u9501\u3002</li> <li>IX (Intention Exclusive) \u610f\u5411\u6392\u4ed6\u9501: \u8868\u793a\u4e8b\u52a1\u6253\u7b97\u5728\u67d0\u4e2a\u540e\u4ee3\u8282\u70b9\u4e0a\u83b7\u53d6 X \u9501\u3002</li> <li>SIX (Shared and Intention Exclusive) \u5171\u4eab\u610f\u5411\u6392\u4ed6\u9501: \u8868\u793a\u4e8b\u52a1\u5728\u8be5\u8282\u70b9\u4e0a\u83b7\u53d6 S \u9501\uff0c\u5e76\u4e14\u6253\u7b97\u5728\u540e\u4ee3\u8282\u70b9\u4e0a\u83b7\u53d6 X \u9501\u3002\u8fd9\u901a\u5e38\u7528\u4e8e\u4e8b\u52a1\u9700\u8981\u8bfb\u53d6\u6574\u4e2a\u7c97\u7c92\u5ea6\u6570\u636e\u9879\uff08\u4f8b\u5982\u4e00\u4e2a\u8868\uff09\uff0c\u5e76\u4e14\u53ef\u80fd\u66f4\u65b0\u5176\u4e2d\u7684\u90e8\u5206\u7ec6\u7c92\u5ea6\u6570\u636e\u9879\uff08\u4f8b\u5982\u4e00\u4e9b\u8bb0\u5f55\uff09\u7684\u60c5\u51b5\u3002</li> </ul> <p>\u5728\u6570\u636e\u5e93 (DB)\u3001\u533a\u57df (area) \u548c\u6587\u4ef6 (File/table) \u8fd9\u4e9b\u8f83\u7c97\u7684\u7c92\u5ea6\u5c42\u6b21\u4e0a\uff0c\u5141\u8bb8\u4f7f\u7528 S, X, IS, IX, SIX \u8fd9\u4e94\u79cd\u9501\u3002</p> <p>\u5728\u8bb0\u5f55 (record) \u8fd9\u4e2a\u6700\u7ec6\u7684\u7c92\u5ea6\u5c42\u6b21\u4e0a\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528 S \u548c X \u4e24\u79cd\u9501\uff0c\u56e0\u4e3a\u8bb0\u5f55\u662f\u6700\u5c0f\u7684\u9501\u5b9a\u5355\u4f4d\uff0c\u4e0d\u9700\u8981\u610f\u5411\u9501\u3002</p> <p>\u591a\u7c92\u5ea6\u9501\u5b9a\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5728\u5e76\u53d1\u6027\u548c\u9501\u5b9a\u5f00\u9500\u4e4b\u95f4\u53d6\u5f97\u5e73\u8861\uff1a</p> <ul> <li>\u7ec6\u7c92\u5ea6\u9501\u5b9a (lower in tree): \u9501\u5b9a\u5c42\u6b21\u8f83\u4f4e\u7684\u6570\u636e\u9879\uff08\u5982\u8bb0\u5f55\uff09\u63d0\u4f9b\u4e86\u8f83\u9ad8\u7684\u5e76\u53d1\u6027\uff0c\u56e0\u4e3a\u4e0d\u540c\u4e8b\u52a1\u53ef\u4ee5\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u4e2a\u8868\u4e2d\u7684\u4e0d\u540c\u8bb0\u5f55\u3002\u4f46\u5f00\u9500\u8f83\u9ad8\uff0c\u56e0\u4e3a\u9700\u8981\u7ba1\u7406\u66f4\u591a\u7684\u9501\u3002</li> <li>\u7c97\u7c92\u5ea6\u9501\u5b9a (higher in tree): \u9501\u5b9a\u5c42\u6b21\u8f83\u9ad8\u7684\u6570\u636e\u9879\uff08\u5982\u6574\u4e2a\u8868\u6216\u533a\u57df\uff09\u9501\u5b9a\u7684\u5f00\u9500\u8f83\u4f4e\uff0c\u56e0\u4e3a\u9700\u8981\u7684\u9501\u6570\u91cf\u5c11\u3002\u4f46\u5e76\u53d1\u6027\u8f83\u4f4e\uff0c\u56e0\u4e3a\u9501\u5b9a\u4e00\u4e2a\u7c97\u7c92\u5ea6\u6570\u636e\u9879\u4f1a\u963b\u585e\u5176\u4ed6\u4e8b\u52a1\u8bbf\u95ee\u5176\u4e0b\u7684\u6240\u6709\u7ec6\u7c92\u5ea6\u6570\u636e\u9879\u3002</li> </ul> <p>\u591a\u7c92\u5ea6\u9501\u5b9a\u5141\u8bb8\u4e8b\u52a1\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u9501\u5b9a\u7c92\u5ea6\u3002\u610f\u5411\u9501\u5219\u7528\u4e8e\u5728\u7c97\u7c92\u5ea6\u8282\u70b9\u4e0a\u5feb\u901f\u5224\u65ad\u5728\u66f4\u7ec6\u7c92\u5ea6\u8282\u70b9\u4e0a\u662f\u5426\u5b58\u5728\u51b2\u7a81\u7684\u9501\u8bf7\u6c42\uff0c\u63d0\u9ad8\u4e86\u9501\u7ba1\u7406\u5668\u68c0\u67e5\u9501\u517c\u5bb9\u6027\u7684\u6548\u7387\u3002</p>"},{"location":"Computer_Science/DB/Chapter18/#intention-lock-modes","title":"Intention Lock Modes","text":"<p>In addition to S and X lock modes, there are three additional lock modes with multiple granularity:</p> <ul> <li>intention-shared (IS): indicates explicit locking at a lower level of the tree but only with shared locks.</li> <li>intention-exclusive (IX): indicates explicit locking at a lower level with exclusive or shared locks</li> <li>shared and intention-exclusive (SIX): the subtree rooted by that node is locked explicitly in shared mode and explicit locking is being done at a lower level with exclusive-mode locks.</li> </ul> <p>intention locks allow a higher level node to be locked in S or X mode without having to check all descendent nodes.</p>"},{"location":"Computer_Science/DB/Chapter18/#compatibility-matrix-with-intention-lock-modes","title":"Compatibility Matrix with Intention Lock Modes","text":"<p>The compatibility matrix for all lock modes is:</p> <p></p> <ul> <li>\u884c (Rows): \u4ee3\u8868\u6570\u636e\u9879\u4e0a\u5f53\u524d\u5df2\u7ecf\u6301\u6709\u7684\u9501\u6a21\u5f0f\u3002</li> <li>\u5217 (Columns): \u4ee3\u8868\u53e6\u4e00\u4e2a\u4e8b\u52a1\u6b63\u5728\u8bf7\u6c42\u7684\u9501\u6a21\u5f0f\u3002</li> <li> <p>\u77e9\u9635\u4e2d\u7684\u503c (true/false):</p> <ul> <li>true: \u8868\u793a\u884c\u4ee3\u8868\u7684\u5df2\u6301\u6709\u9501\u4e0e\u5217\u4ee3\u8868\u7684\u8bf7\u6c42\u9501\u662f\u517c\u5bb9\u7684\uff0c\u8bf7\u6c42\u53ef\u4ee5\u88ab\u7acb\u5373\u6388\u4e88\u3002</li> <li>false: \u8868\u793a\u5df2\u6301\u6709\u9501\u4e0e\u8bf7\u6c42\u9501\u662f\u4e0d\u517c\u5bb9\u7684\uff0c\u8bf7\u6c42\u4e8b\u52a1\u5fc5\u987b\u7b49\u5f85\u3002</li> </ul> </li> </ul> <p>\u6211\u4eec\u9010\u884c\u6765\u770b\u517c\u5bb9\u6027\uff1a</p> <ol> <li>\u5df2\u6301\u6709 IS \u9501 (Row IS):</li> </ol> <ul> <li>\u4e0e IS, IX, S, SIX \u90fd\u517c\u5bb9 (true)\u3002\u56e0\u4e3a IS \u9501\u53ea\u8868\u793a\u6253\u7b97\u5728\u4e0b\u65b9\u83b7\u53d6 S \u9501\uff0c\u4e0e\u5176\u4ed6\u53ea\u662f\u6253\u7b97\u83b7\u53d6\u9501\u6216\u53ea\u83b7\u53d6 S \u9501\u7684\u60c5\u51b5\u4e0d\u51b2\u7a81\u3002</li> <li>\u4e0e X \u4e0d\u517c\u5bb9 (false)\u3002\u56e0\u4e3a X \u9501\u662f\u6392\u4ed6\u6027\u7684\uff0c\u4e0d\u5141\u8bb8\u5176\u4ed6\u4efb\u4f55\u9501\u5b58\u5728\u3002</li> </ul> <ol> <li>\u5df2\u6301\u6709 IX \u9501 (Row IX):</li> </ol> <ul> <li>\u4e0e IS, IX \u517c\u5bb9 (true)\u3002IX \u8868\u793a\u6253\u7b97\u5728\u4e0b\u65b9\u83b7\u53d6 S \u6216 X \u9501\uff0c\u4e0e\u5176\u4ed6\u610f\u5411\u9501\u517c\u5bb9\u3002</li> <li>\u4e0e S, SIX, X \u4e0d\u517c\u5bb9 (false)\u3002IX \u8868\u793a\u4e0b\u65b9\u53ef\u80fd\u6709 X \u9501\uff0cS \u548c SIX \u90fd\u5305\u542b\u5728\u8be5\u8282\u70b9\u4e0a\u7684 S \u9501\uff0c\u5982\u679c\u4e0b\u65b9\u6709 X \u9501\uff0c\u5219\u4e0e S \u548c SIX \u4e0d\u517c\u5bb9\uff1bX \u9501\u66f4\u662f\u6392\u4ed6\u6027\u7684\uff0c\u76f4\u63a5\u51b2\u7a81\u3002</li> </ul> <ol> <li>\u5df2\u6301\u6709 S \u9501 (Row S):</li> </ol> <ul> <li>\u4e0e IS, S \u517c\u5bb9 (true)\u3002S \u9501\u5141\u8bb8\u5176\u4ed6\u4e8b\u52a1\u540c\u65f6\u8bfb\u53d6 (S) \u6216\u6253\u7b97\u5728\u4e0b\u65b9\u8bfb\u53d6 (IS)\u3002</li> <li>\u4e0e IX, SIX, X \u4e0d\u517c\u5bb9 (false)\u3002S \u9501\u53ea\u5141\u8bb8\u8bfb\u53d6\uff0c\u800c IX, SIX \u8868\u793a\u4e0b\u65b9\u53ef\u80fd\u9700\u8981\u5199\u5165\uff08X\uff09\uff0cX \u8868\u793a\u9700\u8981\u5199\u5165\u5f53\u524d\u8282\u70b9\uff0c\u90fd\u4e0e S \u9501\u51b2\u7a81\u3002</li> </ul> <ol> <li>\u5df2\u6301\u6709 SIX \u9501 (Row SIX):</li> </ol> <ul> <li>\u4e0e IS \u517c\u5bb9 (true)\u3002SIX \u5728\u5f53\u524d\u8282\u70b9\u6709 S \u9501\uff0c\u5e76\u6253\u7b97\u5728\u4e0b\u65b9\u83b7\u53d6 X \u9501\u3002\u5176\u4ed6\u4e8b\u52a1\u6253\u7b97\u5728\u4e0b\u65b9\u83b7\u53d6 S \u9501 (IS) \u4e0e\u4e4b\u4e0d\u51b2\u7a81\u3002</li> <li>\u4e0e IX, S, SIX, X \u4e0d\u517c\u5bb9 (false)\u3002SIX \u5305\u542b\u5728\u8be5\u8282\u70b9\u4e0a\u7684 S \u9501\u4ee5\u53ca\u4e0b\u65b9\u53ef\u80fd\u6709\u7684 X \u9501\u610f\u5411\u3002\u4e0e IX (\u4e0b\u65b9\u53ef\u80fd X), S (\u5f53\u524d\u8282\u70b9 S \u4f46\u4e0b\u65b9\u53ef\u80fd X), SIX (\u5f53\u524d\u8282\u70b9 S \u4f46\u4e0b\u65b9\u53ef\u80fd X), X (\u5f53\u524d\u8282\u70b9 X) \u90fd\u5b58\u5728\u51b2\u7a81\u3002</li> </ul> <ol> <li>\u5df2\u6301\u6709 X \u9501 (Row X):</li> </ol> <ul> <li>\u4e0e\u4efb\u4f55\u9501\u90fd\u4e0d\u517c\u5bb9 (false)\u3002X \u9501\u662f\u5b8c\u5168\u6392\u4ed6\u6027\u7684\uff0c\u4e0d\u5141\u8bb8\u4efb\u4f55\u5176\u4ed6\u9501\u5b58\u5728\u3002</li> </ul> <p>Info</p> <p>IX \u548c IS \u662f\u76f8\u5bb9\u7684\u3002</p> <ol> <li> <p>\u5b83\u4eec\u53ea\u662f\"\u610f\u5411\"\uff1a IS \u548c IX \u9501\u672c\u8eab\u5e76\u4e0d\u76f4\u63a5\u8bbf\u95ee\u6216\u4fee\u6539\u5f53\u524d\u8282\u70b9\u7684\u6570\u636e\u3002\u5b83\u4eec\u53ea\u662f\u4e00\u4e2a\u6807\u8bb0\uff0c\u544a\u8bc9\u7cfb\u7edf\"\u6211\u8fd9\u4e2a\u4e8b\u52a1\u7a0d\u540e\u4f1a\u5728\u8fd9\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u5b50\u8282\u70b9\u4e0a\u52a0\u9501\"\u3002</p> </li> <li> <p>\u51b2\u7a81\u53d1\u751f\u5728\u66f4\u4f4e\u7684\u5c42\u6b21\uff1a \u771f\u6b63\u7684\u8bfb\u5199\u51b2\u7a81\uff08\u9700\u8981 S \u9501\u548c X \u9501\u4e92\u65a5\uff09\u53d1\u751f\u5728\u4e8b\u52a1\u5b9e\u9645\u9501\u5b9a\u5e76\u8bbf\u95ee\u5177\u4f53\u6570\u636e\u9879\u7684\u90a3\u4e2a\u66f4\u7ec6\u7c92\u5ea6\u7684\u5c42\u6b21\u4e0a\uff08\u4f8b\u5982\uff0c\u8bb0\u5f55\u6216\u6587\u4ef6\u7ea7\u522b\uff09\u3002</p> </li> <li> <p>\u610f\u5411\u9501\u4e0d\u963b\u6b62\u5176\u4ed6\u4e8b\u52a1\u7684\u610f\u5411\uff1a \u5982\u679c\u4e8b\u52a1 A \u5728\u8282\u70b9 P \u4e0a\u6301\u6709 IS \u9501\uff08\u6253\u7b97\u5728 P \u7684\u67d0\u4e2a\u5b50\u8282\u70b9\u4e0a\u52a0 S \u9501\uff09\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u963b\u6b62\u4e8b\u52a1 B \u5728\u540c\u4e00\u8282\u70b9 P \u4e0a\u6301\u6709 IX \u9501\uff08\u6253\u7b97\u5728 P \u7684\u67d0\u4e2a\u5b50\u8282\u70b9\u4e0a\u52a0 X \u9501\uff09\u3002\u5b83\u4eec\u5404\u81ea\u53ea\u662f\u58f0\u660e\u4e86\u4e00\u4e2a\u610f\u56fe\u3002</p> </li> </ol>"},{"location":"Computer_Science/DB/Chapter18/#multiple-granularity-locking-scheme","title":"Multiple Granularity Locking Scheme","text":"<p>Transaction \\(T_i\\) can lock a node Q, using the following rules:</p> <ol> <li>The lock compatibility matrix must be observed.</li> </ol> <p>\u5fc5\u987b\u9075\u5b88\u9501\u517c\u5bb9\u6027\u77e9\u9635\uff0c\u8fd9\u662f\u6700\u57fa\u672c\u7684\u89c4\u5219\u3002\u4efb\u4f55\u52a0\u9501\u8bf7\u6c42\u90fd\u5fc5\u987b\u68c0\u67e5\u8bf7\u6c42\u7684\u9501\u6a21\u5f0f\u662f\u5426\u4e0e\u6570\u636e\u9879\u4e0a\u5f53\u524d\u5df2\u6709\u7684\u9501\u6a21\u5f0f\u517c\u5bb9\u3002\u53ea\u6709\u517c\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u9501\u624d\u80fd\u88ab\u6388\u4e88\u3002</p> <ol> <li>The root of the tree must be locked first, and may be locked in any mode.</li> </ol> <p>\u5fc5\u987b\u5148\u9501\u5b9a\u6811\u7684\u6839\u8282\u70b9\uff0c\u4e8b\u52a1\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u5fc5\u987b\u9996\u5148\u9501\u5b9a\u6574\u4e2a\u5c42\u6b21\u7ed3\u6784\u7684\u6700\u9876\u5c42\u8282\u70b9\uff08\u5373\u6839\u8282\u70b9\uff0c\u901a\u5e38\u662f\u6574\u4e2a\u6570\u636e\u5e93\uff09\u3002\u6839\u8282\u70b9\u53ef\u4ee5\u88ab\u9501\u5b9a\u5728\u4efb\u4f55\u9501\u6a21\u5f0f\u4e0b\uff08S, X, IS, IX, SIX\uff09\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u4e8b\u52a1\u63a5\u4e0b\u6765\u6253\u7b97\u5728\u66f4\u7ec6\u7c92\u5ea6\u7684\u54ea\u4e9b\u6570\u636e\u9879\u4e0a\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\u3002</p> <ol> <li>A node Q can be locked by \\(T_i\\) in S or IS mode only if the parent of Q is currently locked by \\(T_i\\) in either IX or IS mode.</li> </ol> <p>\u4e8b\u52a1 \\(T_i\\) \u53ea\u6709\u5728\u5f53\u524d\u5df2\u7ecf\u6301\u6709\u4e86\u8282\u70b9 Q \u7684\u7236\u8282\u70b9\u7684 IX \u6216 IS \u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u5bf9\u8282\u70b9 Q \u52a0 S \u6216 IS \u9501\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4e8b\u52a1\u6253\u7b97\u5728\u67d0\u4e2a\u5b50\u8282\u70b9\u6216\u5176\u540e\u4ee3\u8282\u70b9\u4e0a\u8fdb\u884c\u8bfb\u53d6\u64cd\u4f5c\uff08\u9700\u8981 S \u6216 IS \u9501\uff09\uff0c\u5b83\u5fc5\u987b\u5148\u5728\u7236\u8282\u70b9\u4e0a\u58f0\u660e\u8fd9\u4e2a\u610f\u56fe\uff0c\u901a\u8fc7\u83b7\u53d6 IS \u6216 IX \u9501\uff08\u56e0\u4e3a IX \u9501\u4e5f\u5141\u8bb8\u5728\u540e\u4ee3\u8282\u70b9\u83b7\u53d6 S \u9501\uff09\u3002</p> <ol> <li>A node Q can be locked by \\(T_i\\) in X, SIX, or IX mode only if the parent of Q is currently locked by \\(T_i\\) in either IX or SIX mode.</li> </ol> <p>\u4e8b\u52a1 \\(T_i\\) \u53ea\u6709\u5728\u5f53\u524d\u5df2\u7ecf\u6301\u6709\u4e86\u8282\u70b9 Q \u7684\u7236\u8282\u70b9\u7684 IX \u6216 SIX \u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u5bf9\u8282\u70b9 Q \u52a0 X, SIX, \u6216 IX \u9501\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4e8b\u52a1\u6253\u7b97\u5728\u67d0\u4e2a\u5b50\u8282\u70b9\u6216\u5176\u540e\u4ee3\u8282\u70b9\u4e0a\u8fdb\u884c\u5199\u5165\u64cd\u4f5c\uff08\u9700\u8981 X \u6216 IX \u9501\uff0c\u6216\u8005\u5728\u5f53\u524d\u8282\u70b9\u8bfb\u53d6\u5e76\u5728\u540e\u4ee3\u8282\u70b9\u5199\u5165\u9700\u8981 SIX \u9501\uff09\uff0c\u5b83\u5fc5\u987b\u5148\u5728\u7236\u8282\u70b9\u4e0a\u58f0\u660e\u8fd9\u4e2a\u66f4\u5f3a\u7684\u610f\u56fe\uff0c\u901a\u8fc7\u83b7\u53d6 IX \u6216 SIX \u9501\uff08\u56e0\u4e3a\u8fd9\u4e24\u79cd\u9501\u90fd\u8868\u793a\u6253\u7b97\u5728\u4e0b\u65b9\u83b7\u53d6 X \u9501\uff09\u3002</p> <ol> <li>\\(T_i\\) can lock a node only if it has not previously unlocked any node (that is, \\(T_i\\) is two-phase).</li> </ol> <p>\u8fd9\u4e2a\u89c4\u5219\u8981\u6c42\u4e8b\u52a1 \\(T_i\\) \u5fc5\u987b\u9075\u5faa\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae (Two-Phase Locking, 2PL)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e8b\u52a1\u5728\u83b7\u53d6\u4e86\u7b2c\u4e00\u4e2a\u9501\u4e4b\u540e\uff0c\u5c31\u8fdb\u5165\u4e86\u589e\u957f\u9636\u6bb5\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\u53ea\u80fd\u83b7\u53d6\u65b0\u7684\u9501\uff0c\u4e0d\u80fd\u91ca\u653e\u4efb\u4f55\u5df2\u6709\u7684\u9501\u3002\u4e00\u65e6\u4e8b\u52a1\u91ca\u653e\u4e86\u4efb\u4f55\u4e00\u4e2a\u9501\uff0c\u5c31\u8fdb\u5165\u4e86\u6536\u7f29\u9636\u6bb5\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\u4e0d\u80fd\u518d\u83b7\u53d6\u4efb\u4f55\u65b0\u7684\u9501\u3002</p> Why? <p>\u591a\u7c92\u5ea6\u9501\u5b9a\u534f\u8bae\u4e4b\u6240\u4ee5\u5fc5\u987b\u9075\u5faa\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff082PL\uff09\uff0c\u662f\u56e0\u4e3a 2PL \u662f\u4fdd\u8bc1\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u53ef\u4e32\u884c\u5316\u7684\u57fa\u672c\u534f\u8bae\u3002</p> <p>\u7b80\u5355\u6765\u8bf4\uff1a</p> <ol> <li> <p>\u591a\u7c92\u5ea6\u9501\u5b9a\uff08MGL\uff09 \u4e3b\u8981\u89e3\u51b3\u7684\u662f\u5728\u5177\u6709\u5c42\u6b21\u7ed3\u6784\u7684\u6570\u636e\u9879\u4e0a\u5982\u4f55\u6709\u6548\u5730\u7ba1\u7406\u9501\uff08\u9009\u62e9\u5408\u9002\u7684\u7c92\u5ea6\u548c\u9501\u7c7b\u578b\uff0c\u5982 IS, IX, SIX\uff09\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u7684\u9501\u5b9a\u673a\u5236\u3002</p> </li> <li> <p>\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff082PL\uff09 \u4e3b\u8981\u89e3\u51b3\u7684\u662f\u4e8b\u52a1\u4f55\u65f6\u83b7\u53d6\u548c\u91ca\u653e\u9501\u7684\u95ee\u9898\uff08\u5728\u91ca\u653e\u7b2c\u4e00\u4e2a\u9501\u4e4b\u524d\u83b7\u53d6\u6240\u6709\u9501\uff09\u3002\u5b83\u662f\u4e00\u79cd\u4fdd\u8bc1\u5e76\u53d1\u63a7\u5236\u6b63\u786e\u6027\uff08\u5177\u4f53\u6765\u8bf4\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\uff09\u7684\u534f\u8bae\u3002</p> </li> </ol> <p>\u5982\u679c\u591a\u7c92\u5ea6\u9501\u5b9a\u4e0d\u9075\u5faa 2PL\uff0c\u5373\u4f7f\u4e8b\u52a1\u6309\u7167\u5c42\u6b21\u7ed3\u6784\u6b63\u786e\u83b7\u53d6\u4e86\u5404\u79cd\u610f\u5411\u9501\u548c\u57fa\u672c\u9501\uff0c\u5b83\u4ecd\u7136\u53ef\u4ee5\u5728\u5b8c\u6210\u64cd\u4f5c\u4e4b\u524d\u91ca\u653e\u67d0\u4e9b\u9501\uff0c\u7136\u540e\u53c8\u83b7\u53d6\u65b0\u7684\u9501\u3002\u8fd9\u79cd\u4e0d\"\u4e24\u9636\u6bb5\"\u7684\u884c\u4e3a\u53ef\u80fd\u5bfc\u81f4\u975e\u53ef\u4e32\u884c\u5316 (non-serializable) \u7684\u6267\u884c\u7ed3\u679c\uff0c\u7834\u574f\u4e8b\u52a1\u7684\u9694\u79bb\u6027\u3002</p> <p>\u5c06\u591a\u7c92\u5ea6\u9501\u5b9a\u673a\u5236\u4e0e\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u7ed3\u5408\u8d77\u6765\uff0c\u53ef\u4ee5\u540c\u65f6\u83b7\u5f97\u4e24\u8005\u7684\u4f18\u52bf\uff1a</p> <ul> <li>MGL \u63d0\u4f9b\u7075\u6d3b\u6027\u548c\u6548\u7387\uff1a \u5141\u8bb8\u4e8b\u52a1\u6839\u636e\u9700\u8981\u9009\u62e9\u5408\u9002\u7684\u7c92\u5ea6\u9501\u5b9a\uff0c\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u9501\u5f00\u9500\uff0c\u63d0\u9ad8\u5e76\u884c\u5ea6\u3002\u610f\u5411\u9501\u5e2e\u52a9\u5feb\u901f\u68c0\u67e5\u51b2\u7a81\u3002</li> <li>2PL \u63d0\u4f9b\u6b63\u786e\u6027\uff1a \u4fdd\u8bc1\u4e8b\u52a1\u7684\u5e76\u53d1\u6267\u884c\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\uff0c\u4ece\u800c\u7ef4\u62a4\u4e86\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\u548c\u9694\u79bb\u6027\u3002</li> </ul> <p>\u6240\u4ee5\uff0c\u5728\u591a\u7c92\u5ea6\u9501\u5b9a\u65b9\u6848\u4e2d\u5f3a\u5236\u9075\u5faa 2PL\uff0c\u662f\u4e3a\u4e86\u786e\u4fdd\u5728\u5229\u7528\u591a\u7c92\u5ea6\u673a\u5236\u7684\u540c\u65f6\uff0c\u4e0d\u727a\u7272\u5e76\u53d1\u63a7\u5236\u7684\u6b63\u786e\u6027\u4fdd\u8bc1\u3002\u4e8b\u52a1\u5fc5\u987b\u5728\u83b7\u53d6\u5b8c\u6240\u6709\u9700\u8981\u7684\u9501\uff08\u65e0\u8bba\u662f\u5728\u54ea\u4e2a\u7c92\u5ea6\u7ea7\u522b\u4e0a\uff09\u540e\uff0c\u624d\u80fd\u5f00\u59cb\u91ca\u653e\u4efb\u4f55\u9501\u3002</p> <p>Observe that locks are acquired in root-to-leaf order, whereas they are released in leaf-to-root order.</p> <p>\u9501\u7684\u83b7\u53d6\u662f\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9 (root-to-leaf order) \u7684\uff0c\u800c\u9501\u7684\u91ca\u653e\u662f\u4ece\u53f6\u5b50\u8282\u70b9\u5230\u6839\u8282\u70b9 (leaf-to-root order) \u7684\u3002\u8fd9\u79cd\u987a\u5e8f\u6709\u52a9\u4e8e\u7ef4\u62a4\u5c42\u6b21\u7ed3\u6784\u4e0a\u7684\u9501\u5b9a\u89c4\u5219\uff0c\u5e76\u5728\u91ca\u653e\u9501\u65f6\u9010\u6b65\u5411\u4e0a\u89e3\u9664\u5bf9\u7c97\u7c92\u5ea6\u6570\u636e\u9879\u7684\u9650\u5236\u3002</p> <p>Lock granularity escalation: in case there are too many locks at a particular level, switch to higher granularity S or X lock</p> <p>\u5982\u679c\u5728\u67d0\u4e2a\u7c92\u5ea6\u7ea7\u522b\uff08\u4f8b\u5982\uff0c\u5728\u8bb0\u5f55\u7ea7\u522b\uff09\u4e8b\u52a1\u9700\u8981\u83b7\u53d6\u592a\u591a\u9501\uff0c\u7cfb\u7edf\u53ef\u4ee5\u8003\u8651\u5c06\u9501\u5347\u7ea7\u5230\u66f4\u7c97\u7684\u7c92\u5ea6\u7ea7\u522b\uff08\u4f8b\u5982\uff0c\u76f4\u63a5\u9501\u5b9a\u6574\u4e2a\u6587\u4ef6\u6216\u8868\uff09\uff0c\u4f7f\u7528 S \u6216 X \u9501\u6765\u4ee3\u66ff\u5927\u91cf\u7684\u7ec6\u7c92\u5ea6\u9501\u3002\u8fd9\u6837\u505a\u53ef\u4ee5\u51cf\u5c11\u9501\u7ba1\u7406\u7684\u5f00\u9500\uff0c\u4f46\u53ef\u80fd\u4f1a\u964d\u4f4e\u5e76\u53d1\u6027\u3002</p>"},{"location":"Computer_Science/DB/Chapter18/#an-example-of-multiple-granularity-locking","title":"An Example of Multiple Granularity Locking","text":"<p>\u56fe\u4e2d\u5e95\u90e8\u7ea2\u8272\u7bad\u5934\u6307\u5411\u5177\u4f53\u7684\u8bb0\u5f55 (\\(r_{a_1}\\), \\(r_{a_2}\\), \\(r_{a_n}\\), \\(r_{b_k}\\))\uff0c\u5e76\u6807\u660e\u4e86\u4e8b\u52a1\u8981\u5bf9\u8fd9\u4e9b\u8bb0\u5f55\u6267\u884c\u7684\u64cd\u4f5c\uff1a</p> <p>\u4e3a\u4e86\u6267\u884c\u5e95\u5c42\u7684\u8bfb\u5199\u64cd\u4f5c\uff0c\u6839\u636e\u591a\u7c92\u5ea6\u9501\u5b9a\u534f\u8bae\u7684\u89c4\u5219\uff0c\u4e8b\u52a1\u9700\u8981\u5728\u8fd9\u4e9b\u8bb0\u5f55\u7684\u7956\u5148\u8282\u70b9\u4e0a\u83b7\u53d6\u76f8\u5e94\u7684\u610f\u5411\u9501\u6216\u5176\u4ed6\u9501\u3002</p> <ul> <li>\u4e8b\u52a1\u4e3a\u4e86\u8bbf\u95ee\u67d0\u4e2a\u7ec6\u7c92\u5ea6\u6570\u636e\u9879\uff0c\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u6cbf\u7740\u5c42\u6b21\u7ed3\u6784\u5411\u4e0b\u83b7\u53d6\u9501\u3002</li> <li>\u83b7\u53d6\u7684\u9501\u7c7b\u578b\u53d6\u51b3\u4e8e\u6700\u7ec6\u7c92\u5ea6\u64cd\u4f5c\u7684\u7c7b\u578b\u4ee5\u53ca\u5728\u8def\u5f84\u4e0a\u9700\u8981\u8bbf\u95ee\u7684\u8303\u56f4\u3002</li> <li>\u610f\u5411\u9501 (IS, IX, SIX) \u5728\u9ad8\u5c42\u8282\u70b9\u4e0a\u6807\u8bb0\u4e86\u4e8b\u52a1\u5728\u4f4e\u5c42\u8282\u70b9\u7684\u610f\u56fe\uff08\u53ea\u8bfb\u3001\u8bfb\u5199\uff09\uff0c\u4f7f\u5f97\u9501\u7ba1\u7406\u5668\u53ef\u4ee5\u5728\u9ad8\u5c42\u5feb\u901f\u5224\u65ad\u6f5c\u5728\u7684\u51b2\u7a81\u3002</li> <li>\u4e3a\u4e86\u5728\u67d0\u4e2a\u5b50\u8282\u70b9\u4e0a\u83b7\u53d6 X, SIX, \u6216 IX \u9501\uff0c\u7236\u8282\u70b9\u5fc5\u987b\u6301\u6709 IX \u6216 SIX \u9501\u3002</li> <li>\u4e3a\u4e86\u5728\u67d0\u4e2a\u5b50\u8282\u70b9\u4e0a\u83b7\u53d6 S \u6216 IS \u9501\uff0c\u7236\u8282\u70b9\u5fc5\u987b\u6301\u6709 IX \u6216 IS \u9501\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter18/#insert-and-delete-operations","title":"Insert and Delete Operations","text":"<p>If two-phase locking is used :</p> <ul> <li>A delete operation may be performed only if the transaction deleting the tuple has an X-mode lock on the tuple to be deleted.</li> <li>A transaction that inserts a new tuple into the database is given an X-mode lock on the tuple</li> </ul> <p>Ensures that</p> <ul> <li>reads/writes conflict with deletes</li> <li>Inserted tuple is not accessible by other transactions until the transaction that inserts the tuple commits</li> </ul> <p>Insertions and deletions can lead to the phantom phenomenon.</p> <p>If only tuple locks are used, non-serializable schedules can result</p> <ul> <li>E.g. the scan transaction does not see the new account, but reads some other tuple written by the update transaction</li> </ul> <ol> <li> <p>\u5982\u679c\u4f7f\u7528\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff0c\u4e00\u4e2a\u4e8b\u52a1\u53ea\u6709\u5728\u5bf9\u8981\u5220\u9664\u7684\u8bb0\u5f55\uff08tuple\uff09\u6301\u6709\u6392\u4ed6\u9501 (X-mode lock) \u65f6\uff0c\u624d\u80fd\u6267\u884c\u5220\u9664\u64cd\u4f5c\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u786e\u4fdd\u5220\u9664\u64cd\u4f5c\u4e0e\u4efb\u4f55\u5176\u4ed6\u4e8b\u52a1\u5bf9\u8be5\u8bb0\u5f55\u7684\u8bfb\u6216\u5199\u64cd\u4f5c\u53d1\u751f\u51b2\u7a81\uff0c\u9632\u6b62\u5728\u5220\u9664\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5e76\u53d1\u95ee\u9898\u3002</p> </li> <li> <p>\u5f53\u4e00\u4e2a\u4e8b\u52a1\u5411\u6570\u636e\u5e93\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8bb0\u5f55\u65f6\uff0c\u5b83\u4f1a\u5bf9\u8fd9\u4e2a\u65b0\u63d2\u5165\u7684\u8bb0\u5f55\u81ea\u52a8\u83b7\u53d6\u4e00\u4e2a\u6392\u4ed6\u9501 (X-mode lock)\u3002\u8fd9\u4e2a\u9501\u786e\u4fdd\u5728\u65b0\u8bb0\u5f55\u88ab\u63d2\u5165\u540e\uff0c\u5728\u63d2\u5165\u4e8b\u52a1\u63d0\u4ea4\u4e4b\u524d\uff0c\u5176\u4ed6\u4e8b\u52a1\u65e0\u6cd5\u8bbf\u95ee\uff08\u8bfb\u53d6\u6216\u4fee\u6539\uff09\u8fd9\u4e2a\u65b0\u8bb0\u5f55\u3002\u8fd9\u4fdd\u8bc1\u4e86\u5176\u4ed6\u4e8b\u52a1\u4e0d\u4f1a\u770b\u5230\u5c1a\u672a\u63d0\u4ea4\u7684\u6570\u636e\u3002</p> </li> <li> <p>\u4e0a\u8ff0\u9501\u5b9a\u7b56\u7565\u786e\u4fdd\u4e86\u8bfb/\u5199\u64cd\u4f5c\u4f1a\u4e0e\u5220\u9664\u64cd\u4f5c\u4f1a\u53d1\u751f\u51b2\u7a81\uff08\u56e0\u4e3a\u5220\u9664\u9700\u8981 X \u9501\uff09\u3002\u786e\u4fdd\u4e86\u65b0\u63d2\u5165\u7684\u8bb0\u5f55\u5728\u63d2\u5165\u4e8b\u52a1\u63d0\u4ea4\u4e4b\u524d\u5bf9\u5176\u4ed6\u4e8b\u52a1\u662f\u4e0d\u53ef\u89c1\u7684\u3002</p> </li> <li> <p>\u5c3d\u7ba1\u4f7f\u7528\u4e86\u8bb0\u5f55\u7ea7\u522b\u7684\u9501\u6765\u5904\u7406\u63d2\u5165\u548c\u5220\u9664\uff0c\u4f46\u8fd9\u4e9b\u64cd\u4f5c\u4ecd\u7136\u53ef\u80fd\u5bfc\u81f4\u5e7b\u5f71\u73b0\u8c61\u3002\u5e7b\u5f71\u73b0\u8c61\u662f\u4e00\u79cd\u5e76\u53d1\u6267\u884c\u5f02\u5e38\uff0c\u53d1\u751f\u5728\u4e00\u4e2a\u4e8b\u52a1\u57fa\u4e8e\u67d0\u4e2a\u6761\u4ef6\uff08\u8c13\u8bcd\uff09\u8bfb\u53d6\u4e86\u4e00\u7ec4\u6570\u636e\u540e\uff0c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u63d2\u5165\u6216\u5220\u9664\u4e86\u6ee1\u8db3\u8be5\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u5bfc\u81f4\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u5982\u679c\u91cd\u65b0\u6267\u884c\u76f8\u540c\u7684\u8bfb\u53d6\u64cd\u4f5c\uff0c\u4f1a\u770b\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u96c6\u3002\u8fd9\u8fdd\u53cd\u4e86\u53ef\u4e32\u884c\u5316\u6027\u3002</p> </li> </ol> <p>\u4f8b\u5b50\uff1a\u5047\u8bbe\u4e00\u4e2a\u626b\u63cf\u4e8b\u52a1\uff08scan transaction\uff09\u6b63\u5728\u7edf\u8ba1\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\u7684\u6240\u6709\u8d26\u6237\u6570\u91cf\u3002=\u540c\u65f6\uff0c\u53e6\u4e00\u4e2a\u66f4\u65b0\u4e8b\u52a1\u63d2\u5165\u4e86\u4e00\u4e2a\u6ee1\u8db3\u8fd9\u4e2a\u626b\u63cf\u6761\u4ef6\u7684\u65b0\u8d26\u6237\u8bb0\u5f55\u3002\u5982\u679c\u626b\u63cf\u4e8b\u52a1\u53ea\u5bf9\u5b83\u5df2\u7ecf\u8bfb\u53d6\u8fc7\u7684\u8bb0\u5f55\u52a0\u9501\uff08\u8bb0\u5f55\u9501\uff09\uff0c\u5e76\u4e14\u6ca1\u6709\u9501\u5b9a\"\u53ef\u80fd\u63d2\u5165\u65b0\u8bb0\u5f55\u7684\u7a7a\u95f4\"\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u5728\u63d2\u5165\u53d1\u751f\u540e\uff0c\u6ca1\u6709\u770b\u5230\u8fd9\u4e2a\u65b0\u63d2\u5165\u7684\u8d26\u6237\u3002\u5982\u679c\u626b\u63cf\u4e8b\u52a1\u540e\u6765\u91cd\u65b0\u6267\u884c\u76f8\u540c\u7684\u7edf\u8ba1\u64cd\u4f5c\uff0c\u5b83\u5c31\u4f1a\u5305\u542b\u8fd9\u4e2a\u65b0\u8d26\u6237\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ec5\u4ec5\u4f7f\u7528\u8bb0\u5f55\u9501\u662f\u4e0d\u8db3\u4ee5\u4fdd\u8bc1\u53ef\u4e32\u884c\u5316\u7684\uff0c\u56e0\u4e3a\u63d2\u5165\u64cd\u4f5c\u5f15\u5165\u4e86\u96c6\u5408\u4e2d\u7684\u65b0\u6210\u5458\uff0c\u800c\u8fd9\u4e9b\u65b0\u6210\u5458\u5e76\u6ca1\u6709\u88ab\u539f\u59cb\u626b\u63cf\u4e8b\u52a1\u7684\u8bb0\u5f55\u9501\u6240\u8986\u76d6\u3002</p>"},{"location":"Computer_Science/DB/Chapter18/#handling-phantoms","title":"Handling Phantoms","text":"<p>The transaction performing predicate read or scanning the relation is reading information that indicates what tuples the relation contains, while a transaction inserting a tuple updates the same information.</p> <p>The conflict should be detected, e.g. by locking the information.</p> <p>One solution:</p> <ul> <li>Associate a data item with the relation, to represent the information about what tuples the relation contains.</li> <li>Transactions predicate read or scanning the relation acquire a shared lock in the data item,</li> <li>Transactions inserting or deleting a tuple acquire an exclusive lock on the data item. (Note: locks on the data item do not conflict with locks on individual tuples.)</li> </ul> <ol> <li>\u4e3a\u6bcf\u4e00\u4e2a\u5173\u7cfb\uff08\u4f8b\u5982\uff0c\u4e00\u5f20\u8868\uff09\u5f15\u5165\u4e00\u4e2a\u7279\u6b8a\u7684\u6570\u636e\u9879\u3002\u8fd9\u4e2a\u6570\u636e\u9879\u5e76\u4e0d\u5b58\u50a8\u5b9e\u9645\u7684\u4e1a\u52a1\u6570\u636e\uff0c\u800c\u662f\u7528\u6765\u4ee3\u8868\"\u8be5\u5173\u7cfb\uff08\u8868\uff09\u5f53\u524d\u5305\u542b\u7684\u8bb0\u5f55\u96c6\u5408\"\u8fd9\u4e00\u4fe1\u606f\u3002</li> <li>\u4efb\u4f55\u6267\u884c\u8c13\u8bcd\u8bfb\u53d6\uff08\u5373\u57fa\u4e8e\u67d0\u4e2a\u6761\u4ef6\u67e5\u8be2\uff09\u6216\u626b\u63cf\u6574\u4e2a\u5173\u7cfb\u7684\u4e8b\u52a1\uff0c\u90fd\u9700\u8981\u5bf9\u8fd9\u4e2a\u4ee3\u8868\u5173\u7cfb\u96c6\u5408\u4fe1\u606f\u7684\u6570\u636e\u9879\u83b7\u53d6\u4e00\u4e2a\u5171\u4eab\u9501 (shared lock)\u3002</li> <li>\u4efb\u4f55\u63d2\u5165\u6216\u5220\u9664\u8bb0\u5f55\u7684\u4e8b\u52a1\uff0c\u90fd\u9700\u8981\u5bf9\u8fd9\u4e2a\u4ee3\u8868\u5173\u7cfb\u96c6\u5408\u4fe1\u606f\u7684\u6570\u636e\u9879\u83b7\u53d6\u4e00\u4e2a\u6392\u4ed6\u9501 (exclusive lock)\u3002</li> <li>\u5bf9\u8fd9\u4e2a\u7279\u6b8a\u6570\u636e\u9879\u7684\u5171\u4eab\u9501\u548c\u6392\u4ed6\u9501\u662f\u4e0d\u517c\u5bb9\u7684\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5f53\u4e00\u4e2a\u4e8b\u52a1\u6b63\u5728\u5bf9\u5173\u7cfb\u8fdb\u884c\u8c13\u8bcd\u8bfb\u53d6\u6216\u626b\u63cf\uff08\u6301\u6709\u5171\u4eab\u9501\uff09\u65f6\uff0c\u5176\u4ed6\u4e8b\u52a1\u4e0d\u80fd\u5bf9\u540c\u4e00\u5173\u7cfb\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\uff08\u9700\u8981\u6392\u4ed6\u9501\uff0c\u4f1a\u88ab\u963b\u585e\uff09\u3002\u53cd\u4e4b\u4ea6\u7136\u3002</li> <li>\u5bf9\u8fd9\u4e2a\u7279\u6b8a\u6570\u636e\u9879\u7684\u9501\u4e0e\u5bf9\u5173\u7cfb\u4e2d\u5355\u4e2a\u8bb0\u5f55\u7684\u9501\u662f\u4e0d\u51b2\u7a81\u7684\u3002\u8fd9\u610f\u5473\u7740\u4e8b\u52a1\u4ecd\u7136\u53ef\u4ee5\u5bf9\u8bb0\u5f55\u672c\u8eab\u52a0\u9501\uff08\u7528\u4e8e\u8bfb\u5199\u5177\u4f53\u6570\u636e\uff09\uff0c\u8fd9\u4e0e\u9501\u5b9a\u6574\u4e2a\u5173\u7cfb\u96c6\u5408\u4fe1\u606f\u662f\u5206\u5f00\u7ba1\u7406\u7684\u3002</li> </ol> <p>\u4e3a\u4ec0\u4e48\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u5e7b\u5f71\u73b0\u8c61\uff1f</p> <p>\u901a\u8fc7\u9501\u5b9a\u4ee3\u8868\u5173\u7cfb\u96c6\u5408\u4fe1\u606f\u7684\u7279\u6b8a\u6570\u636e\u9879\uff0c\u7cfb\u7edf\u53ef\u4ee5\u68c0\u6d4b\u5e76\u963b\u6b62\u53ef\u80fd\u5bfc\u81f4\u5e7b\u5f71\u73b0\u8c61\u7684\u5e76\u53d1\u64cd\u4f5c\uff1a</p> <ul> <li>\u5f53\u4e00\u4e2a\u626b\u63cf\u4e8b\u52a1\u5bf9\u5173\u7cfb\u83b7\u53d6\u4e86\u5171\u4eab\u9501\u540e\uff0c\u5b83\u4fdd\u8bc1\u4e86\u5728\u5b83\u6301\u6709\u9501\u671f\u95f4\uff0c\u6ca1\u6709\u5176\u4ed6\u4e8b\u52a1\u53ef\u4ee5\u63d2\u5165\u6216\u5220\u9664\u6ee1\u8db3\u8be5\u6761\u4ef6\u7684\u8bb0\u5f55\uff08\u56e0\u4e3a\u63d2\u5165/\u5220\u9664\u9700\u8981\u5bf9\u540c\u4e00\u6570\u636e\u9879\u83b7\u53d6\u6392\u4ed6\u9501\uff0c\u800c\u5171\u4eab\u9501\u548c\u6392\u4ed6\u9501\u4e0d\u517c\u5bb9\uff09\u3002\u56e0\u6b64\uff0c\u626b\u63cf\u4e8b\u52a1\u5728\u6301\u6709\u9501\u671f\u95f4\uff0c\u5173\u7cfb\u4e2d\u7684\u8bb0\u5f55\u96c6\u5408\u662f\u7a33\u5b9a\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5e7b\u5f71\u3002</li> <li>\u5f53\u4e00\u4e2a\u63d2\u5165\u6216\u5220\u9664\u4e8b\u52a1\u5bf9\u5173\u7cfb\u83b7\u53d6\u4e86\u6392\u4ed6\u9501\u540e\uff0c\u5b83\u4fdd\u8bc1\u4e86\u5728\u5b83\u6301\u6709\u9501\u671f\u95f4\uff0c\u6ca1\u6709\u5176\u4ed6\u4e8b\u52a1\u53ef\u4ee5\u5bf9\u540c\u4e00\u5173\u7cfb\u8fdb\u884c\u8c13\u8bcd\u8bfb\u53d6\u6216\u626b\u63cf\uff08\u56e0\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u9700\u8981\u5bf9\u540c\u4e00\u6570\u636e\u9879\u83b7\u53d6\u5171\u4eab\u9501\uff0c\u800c\u6392\u4ed6\u9501\u548c\u5171\u4eab\u9501\u4e0d\u517c\u5bb9\uff09\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter18/#index-locking-protocol-to-prevent-phantoms","title":"Index Locking Protocol To Prevent Phantoms","text":"<p>Index locking protocol:</p> <p>Every relation must have at least one index.</p> <p>A transaction can access tuples only after finding them through one or more indices on the relation</p> <p>A transaction \\(T_i\\) that performs a lookup must lock all the index leaf nodes that it accesses, in S-mode</p> <ul> <li>Even if the leaf node does not contain any tuple satisfying the index lookup (e.g. for a range query, no tuple in a leaf is in the range)</li> </ul> <p>A transaction \\(T_i\\) that inserts, updates or deletes a tuple \\(t_i\\) in a relation r</p> <ul> <li>must update all indices to r</li> <li>must obtain exclusive locks on all index leaf nodes affected by the insert/update/delete</li> </ul> <p>The rules of the two-phase locking protocol must be observed</p> <p>Guarantees that phantom phenomenon won\u2019t occur</p> <p>\u4e8b\u52a1\u53ea\u80fd\u901a\u8fc7\u4f7f\u7528\u5173\u7cfb\u4e0a\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7d22\u5f15\u6765\u67e5\u627e\u5e76\u8bbf\u95ee\u8bb0\u5f55\u3002</p> <p>\u4e00\u4e2a\u6267\u884c\u67e5\u627e\u64cd\u4f5c\uff08\u4f8b\u5982\uff0c<code>SELECT ... WHERE condition</code>\uff09\u7684\u4e8b\u52a1\uff0c\u5fc5\u987b\u5bf9\u5b83\u8bbf\u95ee\u7684\u6240\u6709\u76f8\u5173\u7684\u7d22\u5f15\u53f6\u5b50\u8282\u70b9 (index leaf nodes) \u52a0\u5171\u4eab\u9501 (S-mode)\u3002\u5373\u4f7f\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u6839\u636e\u67e5\u8be2\u6761\u4ef6\uff08\u4f8b\u5982\uff0c\u8303\u56f4\u67e5\u8be2\uff09\u4e0d\u5305\u542b\u4efb\u4f55\u6ee1\u8db3\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u4e8b\u52a1\u4e5f\u5fc5\u987b\u5bf9\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\u52a0 S \u9501\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\"\u6807\u8bb0\"\u4e8b\u52a1\u5df2\u7ecf\u68c0\u67e5\u4e86\u7d22\u5f15\u7684\u8fd9\u4e2a\u8303\u56f4/\u4f4d\u7f6e\u3002</p> <p>\u4e00\u4e2a\u63d2\u5165\u3001\u66f4\u65b0\u6216\u5220\u9664\u5173\u7cfb\u4e2d\u8bb0\u5f55\u7684\u4e8b\u52a1\uff0c\u5fc5\u987b\u66f4\u65b0\u8be5\u5173\u7cfb\u7684\u6240\u6709\u7d22\u5f15\u3002\u5b83\u5fc5\u987b\u5bf9\u6240\u6709\u53d7\u63d2\u5165/\u66f4\u65b0/\u5220\u9664\u64cd\u4f5c\u5f71\u54cd\u7684\u7d22\u5f15\u53f6\u5b50\u8282\u70b9\u83b7\u53d6\u6392\u4ed6\u9501 (exclusive locks, X-mode)\u3002\u5f71\u54cd\u610f\u5473\u7740\u63d2\u5165\u4f1a\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u6dfb\u52a0\u6761\u76ee\uff0c\u5220\u9664\u4f1a\u79fb\u9664\u6761\u76ee\uff0c\u66f4\u65b0\u53ef\u80fd\u6539\u53d8\u7d22\u5f15\u952e\u503c\u4ece\u800c\u5f71\u54cd\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u3002</p> <p>\u9664\u4e86\u4e0a\u8ff0\u7d22\u5f15\u9501\u5b9a\u89c4\u5219\uff0c\u4e8b\u52a1\u4e5f\u5fc5\u987b\u9075\u5faa\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff08\u5728\u91ca\u653e\u7b2c\u4e00\u4e2a\u9501\u4e4b\u524d\u83b7\u53d6\u6240\u6709\u9501\uff09\u3002</p> <p>\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u534f\u8bae\u53ef\u4ee5\u9884\u9632\u5e7b\u5f71\u73b0\u8c61\uff1f</p> <p>\u5e7b\u5f71\u73b0\u8c61\u7684\u6839\u672c\u539f\u56e0\u662f\uff0c\u4e00\u4e2a\u4e8b\u52a1\u57fa\u4e8e\u67d0\u4e2a\u6761\u4ef6\uff08\u8c13\u8bcd\uff09\u8bfb\u53d6\u4e86\u4e00\u4e2a\"\u8303\u56f4\"\u7684\u6570\u636e\uff0c\u800c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u5728\u540c\u4e00\u4e2a\"\u8303\u56f4\"\u5185\u63d2\u5165\u6216\u5220\u9664\u4e86\u8bb0\u5f55\uff0c\u4e14\u524d\u4e00\u4e2a\u4e8b\u52a1\u6ca1\u6709\u9501\u5b9a\u8fd9\u4e2a\"\u8303\u56f4\"\u3002</p>"},{"location":"Computer_Science/DB/Chapter18/#example-index-locking-on-a-b-tree","title":"Example: Index Locking on a B+ -Tree","text":""},{"location":"Computer_Science/DB/Chapter18/#next-key-locking-to-prevent-phantoms","title":"Next-Key Locking To Prevent Phantoms","text":"<p>Index-locking protocol to prevent phantoms required locking entire leaf</p> <ul> <li>Can result in poor concurrency if there are many inserts</li> </ul> <p>\u4e4b\u524d\u7684\u7d22\u5f15\u9501\u5b9a\u534f\u8bae\u4e3a\u4e86\u9884\u9632\u5e7b\u5f71\u73b0\u8c61\uff0c\u9700\u8981\u9501\u5b9a\u6574\u4e2a\u7d22\u5f15\u53f6\u5b50\u8282\u70b9\u3002\u5982\u679c\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u5305\u542b\u5f88\u591a\u8bb0\u5f55\uff0c\u800c\u4e8b\u52a1\u53ea\u9700\u8981\u8bbf\u95ee\u5176\u4e2d\u5c11\u91cf\u8bb0\u5f55\u6216\u8005\u53ea\u662f\u68c0\u67e5\u67d0\u4e2a\u8303\u56f4\u5185\u662f\u5426\u5b58\u5728\u8bb0\u5f55\uff0c\u9501\u5b9a\u6574\u4e2a\u53f6\u5b50\u8282\u70b9\u4f1a\u5bfc\u81f4\u8f83\u4f4e\u7684\u5e76\u53d1\u6027\uff0c\u5c24\u5176\u662f\u5728\u6709\u5f88\u591a\u63d2\u5165\u64cd\u4f5c\u65f6\u3002</p> <p>Next-key locking protocol: provides higher concurrency</p> <ul> <li>Lock all values that satisfy index lookup (match lookup value, or fall in lookup range)</li> </ul> <p>\u4e8b\u52a1\u4e0d\u4ec5\u9501\u5b9a\u5b83\u901a\u8fc7\u7d22\u5f15\u67e5\u627e\u5230\u7684\u6240\u6709\u6ee1\u8db3\u67e5\u8be2\u6761\u4ef6\u7684\u952e\u503c\uff08\u65e0\u8bba\u662f\u5355\u4e2a\u503c\u8fd8\u662f\u4e00\u4e2a\u8303\u56f4\u5185\u7684\u6240\u6709\u503c\uff09\u3002</p> <ul> <li>Also lock next key value in index</li> </ul> <p>\u5b83\u8fd8\u4f1a\u989d\u5916\u9501\u5b9a\u7d22\u5f15\u4e2d\u7d27\u8ddf\u5728\u67e5\u8be2\u8303\u56f4\u6216\u67e5\u627e\u503c\u4e4b\u540e\u7684\u90a3\u4e2a\"\u4e0b\u4e00\u952e\u503c\"\u3002</p> <pre><code>- even for inserts/deletes \u8fd9\u79cd\"\u4e0b\u4e00\u952e\"\u7684\u9501\u5b9a\u5bf9\u4e8e\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u540c\u6837\u91cd\u8981\u3002\n</code></pre> <ul> <li>Lock mode: S for lookups, X for insert/delete/update</li> </ul> <p>\u5bf9\u4e8e\u67e5\u627e\u64cd\u4f5c (lookups)\uff0c\u4f7f\u7528\u5171\u4eab\u9501 (S mode)\u3002\u5bf9\u4e8e\u63d2\u5165\u3001\u5220\u9664\u3001\u66f4\u65b0\u64cd\u4f5c (insert/delete/update)\uff0c\u4f7f\u7528\u6392\u4ed6\u9501 (X mode)\u3002</p> <p>Ensures that range queries will conflict with inserts/deletes/updates</p> <p>\u8fd9\u79cd\u673a\u5236\u53ef\u4ee5\u786e\u4fdd\u8303\u56f4\u67e5\u8be2 (range queries) \u4f1a\u4e0e\u540c\u65f6\u53d1\u751f\u7684\u63d2\u5165\u3001\u5220\u9664\u3001\u66f4\u65b0\u64cd\u4f5c\u53d1\u751f\u51b2\u7a81\uff0c\u65e0\u8bba\u54ea\u4e2a\u64cd\u4f5c\u5148\u53d1\u751f\u3002</p> <ul> <li>Regardless of which happens first, as long as both are concurrent</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <p>\u9884\u9632\u5e7b\u5f71\u73b0\u8c61\u7684\u539f\u7406:</p> <ul> <li>\u901a\u8fc7\u9501\u5b9a\u6ee1\u8db3\u67e5\u8be2\u6761\u4ef6\u7684\u952e\u503c\uff0c\u53ef\u4ee5\u9632\u6b62\u5176\u4ed6\u4e8b\u52a1\u5bf9\u8fd9\u4e9b\u5177\u4f53\u503c\u8fdb\u884c\u4fee\u6539\uff08\u5220\u9664\u6216\u66f4\u65b0\uff09\u3002</li> <li>\u800c\u901a\u8fc7\u9501\u5b9a\"\u4e0b\u4e00\u952e\u503c\"\uff0c\u5b9e\u9645\u4e0a\u662f\u9501\u5b9a\u4e86\u4e00\u4e2a\u533a\u95f4\u6216\"\u95f4\u9699\"\uff08gap\uff09\u7684\u8fb9\u754c\u3002\u5982\u679c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u8bd5\u56fe\u5728\u8fd9\u4e2a\u88ab\u9501\u5b9a\u7684\"\u4e0b\u4e00\u952e\u503c\"\u4e4b\u524d\u63d2\u5165\u4e00\u4e2a\u65b0\u8bb0\u5f55\uff08\u5373\u63d2\u5165\u5230\u88ab\u9501\u5b9a\u8303\u56f4\u6216\u95f4\u9699\u4e2d\uff09\uff0c\u5b83\u5c31\u9700\u8981\u4fee\u6539\u7d22\u5f15\u7ed3\u6784\u4e2d\u4e0e\"\u4e0b\u4e00\u952e\u503c\"\u76f8\u5173\u7684\u90e8\u5206\uff0c\u800c\u8fd9\u90e8\u5206\u5df2\u7ecf\u88ab\u9501\u5b9a\u4e8b\u52a1\u7684 S \u9501\u6240\u4fdd\u62a4\uff08\u56e0\u4e3a\"\u4e0b\u4e00\u952e\u503c\"\u88ab\u9501\u5b9a\uff09\u3002\u7531\u4e8e S \u9501\u548c X \u9501\uff08\u63d2\u5165/\u5220\u9664/\u66f4\u65b0\u9700\u8981 X \u9501\u6765\u4fee\u6539\u7d22\u5f15\uff09\u4e0d\u517c\u5bb9\uff0c\u63d2\u5165\u4e8b\u52a1\u5c31\u4f1a\u88ab\u963b\u585e\uff0c\u76f4\u5230\u6301\u6709 S \u9501\u7684\u67e5\u627e\u4e8b\u52a1\u91ca\u653e\u9501\u3002</li> <li>\u8fd9\u6837\u5c31\u9632\u6b62\u4e86\u5728\u4e8b\u52a1\u5173\u6ce8\u7684\u8303\u56f4\u5185\u51fa\u73b0\"\u5e7b\u5f71\"\u8bb0\u5f55\uff0c\u56e0\u4e3a\u4efb\u4f55\u8bd5\u56fe\u5728\u8be5\u8303\u56f4\u63d2\u5165\u65b0\u8bb0\u5f55\u7684\u64cd\u4f5c\u90fd\u4f1a\u88ab\u68c0\u6d4b\u5230\u5e76\u963b\u585e\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter18/#multiversion-concurrency-control-schemes","title":"Multiversion Concurrency Control Schemes","text":"<p>Multiversion schemes keep old versions of data item to increase concurrency.</p> <p>Each successful write results in the creation of a new version of the data item written.</p> <p>Use timestamps to label versions.</p> <p>When a read(Q) operation is issued, select an appropriate version of Q based on the timestamp of the transaction, and return the value of the selected version.</p> <p>Read only transactions never have to wait as an appropriate version is returned immediately for every read operation.</p> <p></p> <p>\u5f53\u4e00\u4e2a\u4e8b\u52a1\u9700\u8981\u8bfb\u53d6\u6570\u636e\u9879 Q \u65f6\uff0c\u7cfb\u7edf\u4f1a\u6839\u636e\u8be5\u4e8b\u52a1\u81ea\u8eab\u7684\u65f6\u95f4\u6233\uff0c\u9009\u62e9\u4e00\u4e2a\u5408\u9002\uff08\u901a\u5e38\u662f\u6700\u65b0\u7684\u3001\u5728\u4e8b\u52a1\u65f6\u95f4\u6233\u4e4b\u524d\u7684\uff09\u7248\u672c\u63d0\u4f9b\u7ed9\u5b83\u8bfb\u53d6\uff0c\u800c\u4e0d\u662f\u8ba9\u4e8b\u52a1\u7b49\u5f85\u5176\u4ed6\u4e8b\u52a1\u91ca\u653e\u9501\u3002\u8fd9\u5c31\u662f\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\u63d0\u9ad8\u5e76\u53d1\u6027\u7684\u4e3b\u8981\u65b9\u5f0f\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u53ea\u8bfb\u4e8b\u52a1\uff0c\u5b83\u4eec\u901a\u5e38\u4e0d\u9700\u8981\u7b49\u5f85\u9501\u5c31\u53ef\u4ee5\u7acb\u5373\u8bfb\u53d6\u5230\u67d0\u4e2a\u7248\u672c\u7684\u5408\u9002\u6570\u636e\u3002</p>"},{"location":"Computer_Science/DB/Chapter18/#multiversion-two-phase-locking","title":"Multiversion Two-Phase Locking","text":"<p>\u8fd9\u79cd\u534f\u8bae\u662f\u4e00\u79cd\u5e76\u53d1\u63a7\u5236\u65b9\u6cd5\uff0c\u5b83\u7ed3\u5408\u4e86\u591a\u7248\u672c\u6280\u672f\u548c\u4e24\u9636\u6bb5\u5c01\u9501\uff0c\u65e8\u5728\u63d0\u9ad8\u5e76\u53d1\u6027\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u53ea\u8bfb\u4e8b\u52a1\uff0c\u540c\u65f6\u4fdd\u8bc1\u53ef\u4e32\u884c\u5316\u3002</p> <p>Differentiates between read-only transactions and update transactions</p> <p>\u6bcf\u4e00\u6b21\u4fee\u6539\u90fd\u8981\u76d6\u8c03\u539f\u6765\u7684\u90a3\u4e00\u4efd\uff0c\u800c\u591a\u7248\u672c\u7684\u4fee\u6539\u662f\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u7248\u672c\u3002\u5bf9\u4e8e\u53ea\u8bfb\uff0c\u4e00\u5b9a\u4f1a\u8bfb\u5230\u6700\u8fd1\u7684\u4e00\u4e2a\u5bf9\u7684\u7248\u672c\uff0c\u90a3\u4e48\u53ea\u8bfb\u7684\u4e8b\u52a1\u4e0d\u9700\u8981\u7b49\u5f85\u3002\u800c\u53ea\u8bfb\u7684\u4e8b\u52a1\u5f88\u591a\uff0c\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8\u5e76\u53d1\u3002</p> <p>SET TRANSACTIOIN READ ONLY;</p> <p>SET TRANSACTION READ WRITE;</p> <p>Update transactions</p> <p>\u4f1a\u8bfb\u53d6\u6570\u636e\uff0c\u4e5f\u53ef\u80fd\u4f1a\u4fee\u6539\u6570\u636e\u3002</p> <ul> <li>Acquire read and write locks</li> <li>Hold all locks up to the end of the transaction. That is , follow rigorous two-phase locking.</li> <li>\u8fd9\u610f\u5473\u7740\u66f4\u65b0\u4e8b\u52a1\u83b7\u53d6\u7684\u6240\u6709\u9501\uff08S \u9501\u548c X \u9501\uff09\u90fd\u5fc5\u987b\u4fdd\u6301\u5230\u4e8b\u52a1\u63d0\u4ea4\u6216\u4e2d\u6b62\u3002\u8fd9\u662f\u4e3a\u4e86\u4fdd\u8bc1\u53ef\u4e32\u884c\u5316\u6027\u3002</li> <li>Each successful write results in the creation of a new version of the data item written.</li> <li> <p>Each version of a data item has a single timestamp whose value is obtained from a counter ts-counter that is incremented during commit processing.</p> </li> <li> <p>\u4e25\u5389\u7684\u4e24\u9636\u6bb5\u9501\u534f\u8bae\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u53ef\u4e32\u884c\u6027</p> </li> </ul> <p>Read-only transactions</p> <p>\u53ea\u8bfb\u53d6\u6570\u636e\uff0c\u4e0d\u4fee\u6539\u6570\u636e\u3002</p> <ul> <li>Assigned a timestamp by reading the current value of ts-counter before they start execution.</li> <li>When a read-only transaction \\(T_i\\) issues a read(Q), the value returned is the contents of the version whose timestamp is the largest timestamp less than or equal to TS(\\(T_i\\)). </li> </ul> <p>When an update transaction wants to read a data item:</p> <ul> <li>it obtains a S lock on it, and reads the latest version.</li> <li>\u5f53\u4e00\u4e2a\u53ea\u8bfb\u4e8b\u52a1 \\(T_i\\) \u5f00\u59cb\u6267\u884c\u524d\uff0c\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u65f6\u95f4\u6233 TS(\\(T_i\\))\u3002\u8fd9\u4e2a\u65f6\u95f4\u6233\u901a\u5e38\u5c31\u662f\u4e8b\u52a1\u5f00\u59cb\u65f6 ts-counter \u7684\u5f53\u524d\u503c\u3002</li> <li>\u5f53\u53ea\u8bfb\u4e8b\u52a1 \\(T_i\\) \u8bfb\u53d6\u6570\u636e\u9879 Q \u65f6\uff0c\u5b83\u6c38\u8fdc\u4e0d\u9700\u8981\u7b49\u5f85\u4efb\u4f55\u9501\u3002</li> <li>\u7cfb\u7edf\u4f1a\u67e5\u627e\u5e76\u8fd4\u56de\u6570\u636e\u9879 Q \u7684\u6240\u6709\u7248\u672c\u4e2d\uff0c\u65f6\u95f4\u6233\u6700\u5927\u4e14\u5c0f\u4e8e\u6216\u7b49\u4e8e TS(\\(T_i\\)) \u7684\u90a3\u4e2a\u7248\u672c\u7684\u503c\u3002</li> </ul> <p>\u5f53\u4e00\u4e2a\u66f4\u65b0\u4e8b\u52a1\u60f3\u8981\u8bfb\u53d6\u6570\u636e\u9879 Q \u65f6\uff1a</p> <ol> <li>\u5b83\u4f1a\u83b7\u53d6\u6570\u636e\u9879 Q \u7684\u5171\u4eab\u9501 (S lock)\u3002</li> <li>\u5b83\u8bfb\u53d6\u6570\u636e\u9879 Q \u7684\u6700\u65b0\u7248\u672c (latest version)\u3002\u4f8b\u5982\u56fe\u4e2d\u83b7\u53d6 S \u9501\u540e\u8bfb\u53d6 <code>&lt;Q3, 3&gt;</code>\uff0c\u8fd9\u662f\u5f53\u524d\u6700\u65b0\u7684\u5df2\u63d0\u4ea4\u7248\u672c\u3002</li> </ol> <p></p> <p>When an update transaction wants to write an item</p> <p>it obtains X lock on; it then creates a new version of the item and sets this version's timestamp to \\(\\infty\\)</p> <p>\u5f53\u4e00\u4e2a\u66f4\u65b0\u4e8b\u52a1\u60f3\u8981\u5199\u5165\u6570\u636e\u9879 Q \u65f6\uff1a</p> <ol> <li>\u5b83\u4f1a\u83b7\u53d6\u6570\u636e\u9879 Q \u7684\u6392\u4ed6\u9501 (X lock)\u3002</li> <li>\u5b83\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u9879 Q \u7684\u7248\u672c\uff0c\u5e76\u6682\u65f6\u5c06\u8fd9\u4e2a\u65b0\u7248\u672c\u7684\u65f6\u95f4\u6233\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927 (\\(\\infty\\))\u3002\u4f8b\u5982\u56fe\u4e2d\u83b7\u53d6 X \u9501\u540e\u521b\u5efa\u65b0\u7248\u672c <code>&lt;Q4, \u221e&gt;</code>\u3002\u8fd9\u4e2a \\(\\infty\\) \u65f6\u95f4\u6233\u8868\u793a\u8fd9\u4e2a\u7248\u672c\u5c1a\u672a\u63d0\u4ea4\uff0c\u5176\u4ed6\u4e8b\u52a1\u4e0d\u80fd\u8bfb\u53d6\u5b83\u3002</li> </ol> <p></p> <p>When update transaction \\(T_i\\) completes, commit processing occurs:</p> <p>\\(T_i\\) sets timestamp on the versions it has created to ts-counter + 1</p> <p>\\(T_i\\) increments ts-counter by 1</p> <p>Unlock all locks it holds</p> <p>\u5f53\u4e00\u4e2a\u66f4\u65b0\u4e8b\u52a1 \\(T_i\\) \u6210\u529f\u5b8c\u6210\u5e76\u51c6\u5907\u63d0\u4ea4\u65f6\uff1a</p> <ol> <li>\u5b83\u4f1a\u5c06\u5176\u521b\u5efa\u7684\u6240\u6709\u65b0\u7248\u672c\u7684\u4e34\u65f6\u65f6\u95f4\u6233 (\\(\\infty\\)) \u66f4\u6539\u4e3a <code>ts-counter + 1</code>\u3002 \u8fd9\u4e2a\u503c\u6210\u4e3a\u8be5\u7248\u672c\u7684\u6700\u7ec8\u65f6\u95f4\u6233\u3002\u4f8b\u5982\u56fe\u4e2d <code>&lt;Q4, \u221e&gt;</code> \u7684\u65f6\u95f4\u6233\u88ab\u8bbe\u7f6e\u4e3a 4\uff0c\u5047\u5b9a ts-counter \u5f53\u524d\u662f 3\u3002</li> <li>\u5b83\u5c06 <code>ts-counter</code> \u7684\u503c\u589e\u52a0 1\u3002 \u4f8b\u5982\u56fe\u4e2d <code>ts-counter</code> \u4ece 3 \u53d8\u6210 4\u3002</li> <li>\u6700\u540e\uff0c\u5b83\u91ca\u653e\u6240\u6709\u6301\u6709\u7684\u9501\u3002</li> </ol> <p></p> <p>When a read-only transaction \\(T_i\\) issues a read(Q), the value returned is the contents of the version whose timestamp is the largest timestamp less than or equal to TS(\\(T_i\\)).</p> <ul> <li>T3 \u6307\u5411\u7248\u672c <code>&lt;Q3, 3&gt;</code> \u548c <code>&lt;D3, 3&gt;</code>\uff0c\u8fd9\u610f\u5473\u7740 T3 \u521b\u5efa\u5e76\u63d0\u4ea4\u4e86 Q \u7684\u7248\u672c 3 \u548c D \u7684\u7248\u672c 3\u3002</li> <li>T4 \u6307\u5411\u7248\u672c <code>&lt;Q4, 4&gt;</code>\uff0c\u8fd9\u610f\u5473\u7740 T4 \u521b\u5efa\u5e76\u63d0\u4ea4\u4e86 Q \u7684\u7248\u672c 4\u3002</li> </ul> <p></p> <p>Only serializable schedules are produced.</p> <p>\u4f18\u70b9\u548c\u7ed3\u679c\uff1a</p> <ol> <li>\u5927\u5927\u63d0\u9ad8\u5e76\u53d1\u6027: \u7531\u4e8e\u53ea\u8bfb\u4e8b\u52a1\u6c38\u8fdc\u4e0d\u9700\u8981\u7b49\u5f85\u9501\uff0c\u53ef\u4ee5\u7acb\u5373\u8bfb\u53d6\u5386\u53f2\u7248\u672c\uff0c\u8fd9\u5728\u9ad8\u8bfb\u8d1f\u8f7d\u7684\u7cfb\u7edf\u4e2d\u80fd\u663e\u8457\u63d0\u9ad8\u5e76\u53d1\u6027\u3002</li> <li>\u53ef\u4e32\u884c\u5316: \u901a\u8fc7\u8ba9\u66f4\u65b0\u4e8b\u52a1\u9075\u5faa\u4e25\u5389\u4e24\u9636\u6bb5\u5c01\u9501\uff0c\u5e76\u4f7f\u7528\u65f6\u95f4\u6233\u6765\u786e\u5b9a\u53ea\u8bfb\u4e8b\u52a1\u53ef\u4ee5\u770b\u5230\u54ea\u4e2a\u7248\u672c\uff0c\u8fd9\u79cd\u534f\u8bae\u80fd\u591f\u4fdd\u8bc1\u4ea7\u751f\u7684\u8c03\u5ea6\u662f\u53ef\u4e32\u884c\u5316\u7684 (serializable schedules)\u3002\u8fd9\u610f\u5473\u7740\u5e76\u53d1\u6267\u884c\u7684\u7ed3\u679c\u7b49\u4ef7\u4e8e\u67d0\u79cd\u4e32\u884c\u6267\u884c\u7684\u7ed3\u679c\u3002</li> </ol> \u6211\u7684\u4e00\u4e9b\u7591\u95ee <p>\u5982\u679c\u53ea\u8bfb\u4e8b\u52a1\u8bfb\u53d6\u7684\u662f\u5386\u53f2\u7248\u672c\u800c\u4e0d\u662f\u6700\u65b0\u7684\u6570\u636e\uff0c\u8fd9\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u53ef\u80fd\u4f1a\u8ba9\u4eba\u89c9\u5f97\"\u4e0d\u662f\u6700\u65b0\u7684\"\u800c\u4ea7\u751f\u7591\u8651\u3002</p> <p>\u4f46\u662f\uff0c\u4ece\u6570\u636e\u5e93\u5e76\u53d1\u63a7\u5236\u548c\u4e8b\u52a1\u9694\u79bb\u6027\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\uff08MVCC\uff09\u8ba9\u53ea\u8bfb\u4e8b\u52a1\u8bfb\u53d6\u5386\u53f2\u7248\u672c\u7684\u8bbe\u8ba1\u4e0d\u4f1a\u5bfc\u81f4\u95ee\u9898\uff0c\u5e76\u4e14\u662f\u5176\u6838\u5fc3\u4f18\u52bf\u4e4b\u4e00\u3002</p> <p>\u539f\u56e0\u5982\u4e0b\uff1a</p> <ol> <li>\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b\u7684\u76ee\u6807\uff1a \u6570\u636e\u5e93\u5e76\u53d1\u63a7\u5236\u7684\u4e3b\u8981\u76ee\u6807\u4e0d\u662f\u8ba9\u6240\u6709\u4e8b\u52a1\u90fd\u80fd\u5b9e\u65f6\u770b\u5230\u7edd\u5bf9\u6700\u65b0\u7684\u3001\u6b63\u5728\u88ab\u5176\u4ed6\u4e8b\u52a1\u4fee\u6539\u7684\u6570\u636e\uff0c\u800c\u662f\u8981\u4fdd\u8bc1\u4e8b\u52a1\u4e4b\u95f4\u7684\u9694\u79bb\u6027\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u4e8b\u52a1\u611f\u89c9\u81ea\u5df1\u662f\u72ec\u7acb\u8fd0\u884c\u7684\uff0c\u4ece\u800c\u4fdd\u8bc1\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\u3002\u4e0d\u540c\u7684\u9694\u79bb\u7ea7\u522b\u5141\u8bb8\u4e0d\u540c\u7a0b\u5ea6\u7684\"\u975e\u6700\u65b0\"\u6216\"\u4e0d\u4e00\u81f4\"\u7684\u8bfb\u53d6\uff0c\u4ee5\u6362\u53d6\u5e76\u53d1\u6027\u3002</li> <li>MV2PL \u4fdd\u8bc1\u53ef\u4e32\u884c\u5316\uff1a \u591a\u7248\u672c\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff08MV2PL\uff09\u8bbe\u8ba1\u7684\u76ee\u6807\u662f\u5b9e\u73b0\u53ef\u4e32\u884c\u5316 (Serializability) \u9694\u79bb\u7ea7\u522b\u3002\u53ef\u4e32\u884c\u5316\u662f\u6700\u9ad8\u7684\u9694\u79bb\u7ea7\u522b\uff0c\u5b83\u4fdd\u8bc1\u4e86\u5e76\u53d1\u6267\u884c\u7684\u7ed3\u679c\u7b49\u4ef7\u4e8e\u67d0\u79cd\u4e32\u884c\u6267\u884c\u7684\u7ed3\u679c\u3002</li> <li>\u53ea\u8bfb\u4e8b\u52a1\u7684\u201c\u5feb\u7167\u201d\uff1a \u5728 MV2PL \u4e2d\uff0c\u53ea\u8bfb\u4e8b\u52a1\u8bfb\u53d6\u7684\u662f\u4e00\u4e2a\u4e00\u81f4\u6027\u5feb\u7167 (Consistent Snapshot) \u7684\u6570\u636e\u3002\u8fd9\u4e2a\u5feb\u7167\u53cd\u6620\u7684\u662f\u6570\u636e\u5e93\u5728\u53ea\u8bfb\u4e8b\u52a1\u5f00\u59cb\u65f6\uff08\u6216\u8005\u66f4\u7cbe\u786e\u5730\u8bf4\uff0c\u662f\u5bf9\u5e94\u4e8e\u8be5\u53ea\u8bfb\u4e8b\u52a1\u65f6\u95f4\u6233\u7684\u90a3\u4e2a\u65f6\u523b\uff09\u7684\u4e00\u4e2a\u72b6\u6001\u3002</li> <li>\u4e0e\u4e32\u884c\u6267\u884c\u7684\u7b49\u4ef7\u6027\uff1a \u8ba9\u53ea\u8bfb\u4e8b\u52a1\u8bfb\u53d6\u5386\u53f2\u7248\u672c\uff0c\u7b49\u4ef7\u4e8e\u5c06\u8fd9\u4e2a\u53ea\u8bfb\u4e8b\u52a1\u5728\u4e32\u884c\u6267\u884c\u987a\u5e8f\u4e2d\u5b89\u6392\u5728\u6240\u6709\u6bd4\u5b83\u65f6\u95f4\u6233\u665a\u7684\u66f4\u65b0\u4e8b\u52a1\u4e4b\u524d\u3002\u5728\u8fd9\u4e2a\u201c\u7b49\u4ef7\u7684\u4e32\u884c\u6267\u884c\u987a\u5e8f\u201d\u4e2d\uff0c\u8be5\u53ea\u8bfb\u4e8b\u52a1\u770b\u5230\u7684\u6570\u636e\u5c31\u662f\u90a3\u4e2a\u65f6\u523b\u7684\u6570\u636e\uff0c\u8fd9\u5b8c\u5168\u7b26\u5408\u903b\u8f91\u3002</li> <li>\u907f\u514d\u51b2\u7a81\uff0c\u63d0\u9ad8\u5e76\u53d1\uff1a \u5173\u952e\u5728\u4e8e\uff0c\u53ea\u8bfb\u4e8b\u52a1\u8bfb\u53d6\u5386\u53f2\u7248\u672c\u7684\u8bbe\u8ba1\uff0c\u4f7f\u5f97\u5b83\u4e0d\u4f1a\u4e0e\u6b63\u5728\u4fee\u6539\u5f53\u524d\u7248\u672c\u7684\u66f4\u65b0\u4e8b\u52a1\u53d1\u751f\u8bfb\u5199\u51b2\u7a81\uff08Write-Read Conflict\uff09\u3002\u56e0\u4e3a\u5b83\u4eec\u64cd\u4f5c\u7684\u662f\u6570\u636e\u7684\u4e0d\u540c\u7248\u672c\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u53ea\u8bfb\u4e8b\u52a1\u5c31\u4e0d\u4f1a\u88ab\u66f4\u65b0\u4e8b\u52a1\u6240\u6301\u6709\u7684\u5199\u9501\u963b\u585e\uff0c\u53ef\u4ee5\u7acb\u5373\u6267\u884c\uff0c\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u53ea\u8bfb\u4e8b\u52a1\u7684\u5e76\u53d1\u6027\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter18/#mvcc-implementation-issues","title":"MVCC: Implementation Issues","text":"<p>Creation of multiple versions increases storage overhead</p> <ul> <li>Extra tuples </li> <li>Extra space in each tuple for storing version information </li> </ul> <p>\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4e00\u4e2a\u6570\u636e\u9879\u53ef\u80fd\u4f1a\u79ef\u7d2f\u5927\u91cf\u7684\u5386\u53f2\u7248\u672c\uff0c\u8fd9\u4f1a\u5e26\u6765\u4e24\u4e2a\u4e3b\u8981\u95ee\u9898\uff1a</p> <ol> <li>\u5b58\u50a8\u5f00\u9500\u589e\u52a0: \u4fdd\u5b58\u591a\u4e2a\u7248\u672c\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\u3002</li> <li>\u67e5\u627e\u6548\u7387\u4e0b\u964d: \u67e5\u627e\u7279\u5b9a\u7248\u672c\u9700\u8981\u904d\u5386\u66f4\u591a\u7684\u6570\u636e\u3002</li> </ol> <p>Obsolete versions should be garbage collected</p> <p>Keep the youngest version \\(Q_k\\) among all versions whose timestamp is less than or equal to the timestamp of the oldest read-only transaction in the system, all other versions older than the \\(Q_k\\) can be deleted.</p> <p>\u5783\u573e\u56de\u6536\u7684\u4e00\u4e2a\u5e38\u89c1\u7b56\u7565\u662f\uff1a\u4fdd\u7559\u6240\u6709\u65f6\u95f4\u6233\u5c0f\u4e8e\u6216\u7b49\u4e8e\u7cfb\u7edf\u4e2d\"\u6700\u8001\u7684\u6d3b\u8dc3\u7684\u53ea\u8bfb\u4e8b\u52a1\"\u7684\u65f6\u95f4\u6233\u7684\u90a3\u4e2a\u7248\u672c \\(Q_k\\) \u7684\u6700\u65b0\u7684\u7248\u672c\uff0c\u6240\u6709\u6bd4 \\(Q_k\\) \u66f4\u8001\u7684\u7248\u672c\u90fd\u53ef\u4ee5\u5220\u9664\u3002</p> <p>\u8fd9\u662f\u56e0\u4e3a\uff0c\u5982\u679c\u6700\u8001\u7684\u6d3b\u8dc3\u53ea\u8bfb\u4e8b\u52a1\u7684\u65f6\u95f4\u6233\u51b3\u5b9a\u4e86\u5b83\u6700\u591a\u53ea\u9700\u8981\u8bfb\u53d6\u5230 <code>&lt;Q3, 3&gt;</code> \u7248\u672c\uff08\u4f8b\u5982\uff0c\u5b83\u7684\u65f6\u95f4\u6233\u5728 Q3 \u548c Q4 \u7684\u65f6\u95f4\u6233\u4e4b\u95f4\uff09\uff0c\u90a3\u4e48\u6bd4 <code>&lt;Q3, 3&gt;</code> \u66f4\u8001\u7684\u7248\u672c\uff08<code>&lt;Q1, 1&gt;</code> \u548c <code>&lt;Q2, 2&gt;</code>\uff09\u5bf9\u4e8e\u5f53\u524d\u4ee5\u53ca\u672a\u6765\u6240\u6709\u65f6\u95f4\u6233\u66f4\u665a\u7684\u4e8b\u52a1\u6765\u8bf4\uff0c\u90fd\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b89\u5168\u5730\u5220\u9664\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter19/","title":"Chapter 19 | Recovery System","text":"<p> \u7ea6 13900 \u4e2a\u5b57  18 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 70 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter19/#failure-classification","title":"Failure Classification","text":"<p>Transaction failure :</p> <ul> <li>Logical errors: transaction cannot complete due to some internal error condition \u6307\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u672c\u8eab\u7684\u7f3a\u9677\uff0c\u6bd4\u5982\u7b97\u6cd5\u9519\u8bef\u3001\u4e1a\u52a1\u903b\u8f91\u5904\u7406\u4e0d\u5f53\u7b49\uff0c\u5bfc\u81f4\u5bf9\u6570\u636e\u5e93\u7684\u9519\u8bef\u64cd\u4f5c\u8bf7\u6c42\u3002</li> <li>System errors: the database system must terminate an active transaction due to an error condition (e.g., deadlock) \u8fd9\u91cc\u53ef\u80fd\u6307\u5e94\u7528\u7a0b\u5e8f\u5c42\u9762\u7684\u7cfb\u7edf\u7ea7\u9519\u8bef\uff0c\u6bd4\u5982\u5e94\u7528\u8d44\u6e90\u8017\u5c3d\u3001\u914d\u7f6e\u9519\u8bef\u3001\u6216\u8005\u4e0e\u5176\u4ed6\u7cfb\u7edf\u4ea4\u4e92\u65f6\u53d1\u751f\u7684\u9519\u8bef\u3002</li> </ul> <p>System crash: a power failure or other hardware or software failure causes the system to crash.</p> <ul> <li> <p>Fail-stop assumption: non-volatile storage contents are assumed to not be corrupted by system crash</p> <ul> <li>Database systems have numerous integrity checks to prevent corruption of disk data </li> </ul> </li> </ul> <p>Disk failure: a head crash or similar disk failure destroys all or part of disk storage</p> <ul> <li>Destruction is assumed to be detectable: disk drives use checksums to detect failures</li> </ul>"},{"location":"Computer_Science/DB/Chapter19/#storage-structure","title":"Storage Structure","text":"<p>Volatile storage:</p> <ul> <li>does not survive system crashes</li> <li>examples: main memory, cache memory</li> </ul> <p>Nonvolatile storage:</p> <ul> <li>survives system crashes</li> <li>examples: disk, tape, flash memory, non-volatile (battery backed up) RAM </li> <li>but may still fail, losing data</li> </ul> <p>Stable storage:</p> <ul> <li>a mythical form of storage that survives all failures</li> <li>approximated by maintaining multiple copies on distinct nonvolatile media</li> </ul>"},{"location":"Computer_Science/DB/Chapter19/#database-recovery","title":"Database Recovery","text":"<p>Recovery algorithms are techniques to ensure database consistency and transaction atomicity and durability despite failures</p> <p>Recovery algorithms have two parts</p> <ol> <li>Actions taken during normal transaction processing to ensure enough information exists to recover from failures</li> <li> <p>Actions taken after a failure to recover the database contents to a state that ensures atomicity, consistency and durability</p> <ul> <li>We assume that strict two-phase locking ensures no dirty read.</li> <li>Idempotent(\u5e42\u7b49\u6027) : An recovery algorithm is said to be idempotent if executing it several times gives the same result as executing it once. </li> </ul> </li> </ol> <p>We study log-based recovery mechanisms in detail</p> <ul> <li>We first present key concepts</li> <li>And then present the actual recovery algorithm</li> </ul>"},{"location":"Computer_Science/DB/Chapter19/#log-based-recovery","title":"Log-Based Recovery","text":""},{"location":"Computer_Science/DB/Chapter19/#log-records","title":"Log Records","text":"<p>To ensure atomicity despite failures, we first output information describing the modifications(log) to stable storage without modifying the database itself.</p> <p>A log is kept on stable storage(\u7a33\u5b9a\u5b58\u50a8\u5668).</p> <ul> <li>The log is a sequence of log records, and maintains a record of update activities on the database.</li> </ul> <p>When transaction \\(T_i\\) starts, it registers itself by writing a \"start\" log record: <code>&lt;$T_i$  start&gt;</code></p> <p>Before \\(T_i\\) executes write(X), writing \"update\" log record <code>&lt;$T_i$, X,  $V_1$, $V_2$ &gt;</code> where \\(V_1\\) is the value of X before the write (the old value), \\(V_2\\) is the value to be written to X (the new value). </p> <p>When \\(T_i\\) finishes it last statement, writing \"commit\" log record: <code>&lt;$T_i$ commit&gt;</code></p> <p>When \\(T_i\\) complete rollback, writing \"abort\" log record: <code>&lt;$T_i$ abort&gt;</code></p>"},{"location":"Computer_Science/DB/Chapter19/#log-file-example","title":"Log File Example","text":""},{"location":"Computer_Science/DB/Chapter19/#write-ahead-logging","title":"Write-Ahead Logging (\u5148\u5199\u65e5\u5fd7\u539f\u5219)","text":"<p>Write-Ahead Logging or WAL(\u5148\u5199\u65e5\u5fd7\u539f\u5219): </p> <p>Before a data in main memory is output to the database, the log records pertaining to data must have been output to stable storage. </p>"},{"location":"Computer_Science/DB/Chapter19/#concurrency-control-and-recovery","title":"Concurrency Control and Recovery","text":"<p>With concurrent transactions, all transactions share a single disk buffer and a single log file.</p> <ul> <li>A buffer block can have data items updated by one or more transactions</li> </ul> <p>We assume that if a transaction \\(T_i\\) has modified an item, no other transaction can modify the same item until \\(T_i\\) has committed or aborted</p> <ul> <li>i.e. the updates of uncommitted transactions should not be visible to other transactions. Otherwise how to perform undo if T1 updates A, then T2 updates A and commits, and finally T1 has to abort?</li> <li>Can be ensured by obtaining exclusive locks on updated items and holding the locks till end of transaction (strict two-phase locking)</li> </ul> <p>Recovery with logical undo logging supports early lock release.</p>"},{"location":"Computer_Science/DB/Chapter19/#transaction-commit","title":"Transaction Commit","text":"<p>A transaction is said to have committed when its commit log record is output to stable storage</p> <ul> <li>all previous log records of the transaction must have been output already</li> </ul> <p>Writes performed by a transaction may still be in the buffer when the transaction commits, and may be output later</p>"},{"location":"Computer_Science/DB/Chapter19/#undo-and-redooperations","title":"Undo(\u64a4\u9500) and Redo\uff08\u91cd\u505a\uff09Operations","text":"<p>Undo of a log record <code>&lt;$T_i$, X, $V_1$, $V_2$&gt;</code> writes the old value \\(V_1\\) to X</p> <p>Redo of a log record <code>&lt;$T_i$, X, $V_1$, $V_2$&gt;</code> writes the new value \\(V_2\\) to X</p> <p>Undo and Redo of Transactions</p> <ul> <li>undo(\\(T_i\\)) restores the value of all data items updated by \\(T_i\\) to their old values, going backwards from the last log record for \\(T_i\\)</li> </ul> <ol> <li>each time a data item X is restored to its old value V a special log record <code>&lt;$T_i$ , X, V&gt;</code> is written out \u2013 compensation log(\u8865\u507f\u65e5\u5fd7)</li> <li>when undo of a transaction is complete, a log record <code>&lt;$T_i$ abort&gt;</code> is written out.</li> </ol> <ul> <li>redo(\\(T_i\\)) sets the value of all data items updated by \\(T_i\\) to the new values, going forward from the first log record for \\(T_i\\)</li> </ul> <ol> <li>No logging is done in this case</li> </ol>"},{"location":"Computer_Science/DB/Chapter19/#recovering-from-failure","title":"Recovering from Failure","text":"<p>When recovering after failure:</p> <ul> <li>Transaction \\(T_i\\) needs to be undone if the log </li> </ul> <ol> <li>contains the record <code>&lt;$T_i$ start&gt;</code>,</li> <li>but does not contain either the record <code>&lt;$T_i$ commit&gt;</code> or <code>&lt;$T_i$ abort&gt;</code>.</li> </ol> <ul> <li>Transaction \\(T_i\\) needs to be redone if the log </li> </ul> <ol> <li>contains the records <code>&lt;$T_i$ start&gt;</code></li> <li>and contains the record <code>&lt;$T_i$ commit&gt;</code> or <code>&lt;$T_i$ abort&gt;</code></li> </ol>"},{"location":"Computer_Science/DB/Chapter19/#recovering-from-failure-repeating-history","title":"Recovering from Failure - Repeating History","text":"<p>Note that If transaction \\(T_i\\) was undone earlier and the <code>&lt;$T_i$ abort&gt;</code> record written to the log, and then a failure occurs, on recovery from failure \\(T_i\\) is redone</p> <ul> <li>such a redo redoes all the original actions including the steps that restored old values</li> </ul> <ol> <li>Known as repeating history\uff08\u91cd\u590d\u5386\u53f2\uff09</li> <li>Seems wasteful, but simplifies recovery greatly</li> </ol> <p></p>"},{"location":"Computer_Science/DB/Chapter19/#checkpoints","title":"Checkpoints","text":"<p>Redoing/undoing all transactions recorded in the log can be very slow</p> <ol> <li>processing the entire log is time-consuming if the system has run for a long time</li> <li>we might unnecessarily redo transactions which have already output their updates to the database.</li> </ol> <p>Streamline recovery procedure by periodically performing checkpointing</p> <ol> <li>Output all log records currently residing in main memory onto stable storage.</li> <li>Output all modified buffer blocks to the disk.</li> <li>Write a log record <code>&lt;checkpoint L&gt;</code> onto stable storage where L is a list of all transactions active at the time of checkpoint.</li> <li>All updates are stopped while doing checkpointing!</li> </ol> <p>During recovery we need to consider only the most recent transaction \\(T_i\\) that started before the checkpoint, and transactions that started after \\(T_i\\). </p> <ol> <li>Scan backwards from end of log to find the most recent <code>&lt;checkpoint L&gt;</code> record </li> <li>Only transactions that are in L or started after the checkpoint need to be redone or undone</li> <li>Transactions that committed or aborted before the checkpoint already have all their updates output to stable storage.</li> </ol> <p>Some earlier part of the log may be needed for undo operations</p> <ol> <li>Continue scanning backwards till a record <code>&lt;$T_i$ start&gt;</code> is found for every transaction \\(T_i\\) in L.</li> <li>Parts of log prior to earliest <code>&lt;$T_i$ start&gt;</code> record above are not needed for recovery, and can be erased whenever desired.</li> </ol> <p></p>"},{"location":"Computer_Science/DB/Chapter19/#recovery-algorithm","title":"Recovery Algorithm","text":"<p>Logging (during normal operation):</p> <pre><code>- `&lt;$T_i$ start&gt;` at transaction start\n- `&lt;$T_i$, $X_j$,  $V_1$,  $V_2$&gt;` for each update, and\n- `&lt;$T_i$ commit&gt;` at transaction end\n</code></pre> <p>Transaction rollback (during normal operation)</p> <ul> <li>Let \\(T_i\\) be the transaction to be rolled back</li> <li>Scan log backwards from the end, and for each log record of \\(T_i\\) of the form <code>&lt;$T_i$, $X_j$,  $V_1$,  $V_2$&gt;</code> </li> </ul> <ol> <li>perform the undo by writing \\(V_1\\) to \\(X_j\\),</li> <li> <p>write a log record <code>&lt;$T_i$ , $X_j$,  $V_1$&gt;</code> </p> <ul> <li>such log records are called compensation log records(\u8865\u507f\u8bb0\u5f55)</li> </ul> </li> </ol> <ul> <li>Once the record <code>&lt;$T_i$ start&gt;</code> is found stop the scan and write the log record <code>&lt;$T_i$ abort&gt;</code></li> </ul> <p>Recovery from failure: Two phases</p> <ul> <li>Redo phase:  replay updates of all transactions, whether they committed, aborted, or are incomplete \u2013repeating history !</li> <li>Undo phase: undo all incomplete transactions</li> </ul> <p>Redo phase:</p> <ol> <li>Find last <code>&lt;checkpoint L&gt;</code> record, and set undo-list to L.</li> <li>Scan forward from above <code>&lt;checkpoint L&gt;</code> record</li> </ol> <ul> <li>Whenever a  record <code>&lt;$T_i$, $X_j$, $V_1$, $V_2$&gt;</code> is found, redo it by writing \\(V_2\\) to \\(X_j\\) </li> <li>Whenever a  (compensation) log record <code>&lt;$T_i$, $X_j$, $V_2$&gt;</code> is found, redo it by writing \\(V_2\\) to \\(X_j\\) </li> <li>Whenever a log record <code>&lt;$T_i$ start&gt;</code> is found, add \\(T_i\\) to undo-list</li> <li>Whenever a log record <code>&lt;$T_i$ commit&gt;</code> or <code>&lt;$T_i$ abort&gt;</code> is found, remove \\(T_i\\) from undo-list</li> </ul> <p>Undo phase: </p> <ol> <li>Scan log backwards from end </li> </ol> <ul> <li> <p>Whenever a log record <code>&lt;$T_i$, $X_j$,  $V_1$,  $V_2$&gt;</code> is found where \\(T_i\\) is in undo-list perform same actions as for transaction rollback:</p> <ul> <li>perform undo by writing \\(V_1\\) to \\(X_j\\).</li> <li>write a log record <code>&lt;$T_i$ , $X_j$,  $V_1$&gt;</code></li> </ul> </li> </ul> <ol> <li> <p>Whenever a log record <code>&lt;$T_i$ start&gt;</code> is found where \\(T_i\\) is in undo-list, </p> <ul> <li>Write a log record <code>&lt;$T_i$ abort&gt;</code> </li> <li>Remove \\(T_i\\) from undo-list</li> </ul> </li> <li> <p>Stop when undo-list is empty</p> <ul> <li>i.e. <code>&lt;$T_i$ start&gt;</code> has been found for every transaction in undo-list</li> </ul> </li> </ol> <p>After undo phase completes, normal transaction processing can commence</p>"},{"location":"Computer_Science/DB/Chapter19/#example-of-recovery","title":"Example of Recovery","text":""},{"location":"Computer_Science/DB/Chapter19/#log-buffer-database-buffer","title":"Log Buffer &amp; Database Buffer","text":"<p>Transactions (\u4e8b\u52a1): \u4ee3\u8868\u7528\u6237\u6216\u5e94\u7528\u7a0b\u5e8f\u53d1\u8d77\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u5e8f\u5217\uff08\u5982\u8bfb\u53d6\u3001\u5199\u5165\u3001\u66f4\u65b0\u6570\u636e\uff09\u3002\u5b83\u4eec\u662f\u6570\u636e\u5e93\u5de5\u4f5c\u7684\u9a71\u52a8\u529b\u3002</p> <p>database buffer (\u6570\u636e\u5e93\u7f13\u51b2\u533a):</p> <ul> <li>\u8fd9\u662f\u4e3b\u5185\u5b58\u4e2d\u7684\u4e00\u5757\u533a\u57df\uff0c\u7528\u4e8e\u7f13\u5b58\u4ece\u78c1\u76d8\u8bfb\u53d6\u7684\u6570\u636e\u9875\uff08data pages\uff09\u4ee5\u53ca\u5c06\u8981\u5199\u56de\u78c1\u76d8\u7684\u6570\u636e\u9875\u3002</li> <li>\u5f53\u4e8b\u52a1\u9700\u8981\u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u7cfb\u7edf\u9996\u5148\u68c0\u67e5\u6570\u636e\u662f\u5426\u5df2\u5728\u6570\u636e\u5e93\u7f13\u51b2\u533a\u4e2d\u3002\u5982\u679c\u5728\uff0c\u5219\u76f4\u63a5\u4ece\u5185\u5b58\u8bfb\u53d6\uff0c\u907f\u514d\u4e86\u6162\u901f\u7684\u78c1\u76d8 I/O\u3002</li> <li>\u5f53\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u65f6\uff0c\u5b83\u9996\u5148\u4fee\u6539\u6570\u636e\u5e93\u7f13\u51b2\u533a\u4e2d\u76f8\u5e94\u7684\u6570\u636e\u9875\u3002\u8fd9\u4e9b\u88ab\u4fee\u6539\u4f46\u5c1a\u672a\u5199\u5165\u78c1\u76d8\u7684\u9875\u901a\u5e38\u88ab\u79f0\u4e3a\"\u810f\u9875\"\uff08dirty pages\uff09\u3002\u56fe\u4e2d\u6df1\u8272\u586b\u5145\u7684\u5757\u53ef\u4ee5\u7406\u89e3\u4e3a\u6b63\u5728\u88ab\u4e8b\u52a1\u8bbf\u95ee\u6216\u5df2\u4fee\u6539\u7684\u6570\u636e\u5757\u3002</li> </ul> <p>log buffer (\u65e5\u5fd7\u7f13\u51b2\u533a):</p> <ul> <li>\u8fd9\u4e5f\u662f\u4e3b\u5185\u5b58\u4e2d\u7684\u4e00\u5757\u533a\u57df\uff0c\u7528\u4e8e\u4e34\u65f6\u5b58\u653e\u63cf\u8ff0\u4e8b\u52a1\u5bf9\u6570\u636e\u5e93\u6240\u505a\u66f4\u6539\u7684\u65e5\u5fd7\u8bb0\u5f55\uff08log records\uff09\u3002</li> <li>\u6bcf\u5f53\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u65f6\uff0c\u76f8\u5e94\u7684\u65e5\u5fd7\u8bb0\u5f55\uff08\u4f8b\u5982\uff0c\u54ea\u4e2a\u4e8b\u52a1\u3001\u4fee\u6539\u4e86\u4ec0\u4e48\u6570\u636e\u3001\u65e7\u503c\u662f\u4ec0\u4e48\u3001\u65b0\u503c\u662f\u4ec0\u4e48\uff09\u4f1a\u9996\u5148\u88ab\u5199\u5165\u5230\u65e5\u5fd7\u7f13\u51b2\u533a\u3002</li> </ul> <p>Log Writer (\u65e5\u5fd7\u5199\u5165\u5668):</p> <p>\u8fd9\u662f\u4e00\u4e2a\u540e\u53f0\u8fdb\u7a0b\u6216\u673a\u5236\uff0c\u8d1f\u8d23\u5c06\u65e5\u5fd7\u7f13\u51b2\u533a\u4e2d\u7684\u5185\u5bb9\u5237\u65b0\uff08\u5199\u5165\uff09\u5230\u78c1\u76d8\u4e0a\u7684\u6301\u4e45\u5316\u5b58\u50a8\u7684\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002</p> <p>\u4e3a\u4e86\u4fdd\u8bc1\u5df2\u63d0\u4ea4\u4e8b\u52a1\u7684\u6301\u4e45\u6027\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u901a\u5e38\u4f1a\u9075\u5faa\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u539f\u5219\uff1a\"\u63d0\u4ea4\u65f6\u5f3a\u5236\u5199\u65e5\u5fd7\" (Force-log-at-commit)\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5f53\u4e00\u4e2a\u4e8b\u52a1\u6267\u884c <code>COMMIT</code> \u64cd\u4f5c\u65f6\uff1a</p> <p>\u8be5\u4e8b\u52a1\u6240\u6709\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u5305\u62ec\u4e00\u4e2a\u6807\u8bb0\u5176\u63d0\u4ea4\u72b6\u6001\u7684\u7279\u6b8a\u65e5\u5fd7\u8bb0\u5f55\uff08\u4f8b\u5982 <code>&lt;T_i commit&gt;</code>\uff09\uff0c\u90fd\u5fc5\u987b\u88ab\u653e\u5165 log buffer\u3002</p> <p>\u5728\u5411\u5e94\u7528\u7a0b\u5e8f\u8fd4\u56de\"\u63d0\u4ea4\u6210\u529f\"\u7684\u6d88\u606f\u4e4b\u524d\uff0cDBMS \u5fc5\u987b\u786e\u4fdd log buffer \u4e2d\u4e0e\u8be5\u4e8b\u52a1\u76f8\u5173\u7684\u6240\u6709\u65e5\u5fd7\u8bb0\u5f55\uff08\u81f3\u5c11\u5230\u5176 commit \u8bb0\u5f55\u4e3a\u6b62\uff09\u90fd\u5df2\u7ecf\u88ab\u5f3a\u5236\u5237\u65b0 (flush) \u5e76\u6210\u529f\u5199\u5165\u5230\u78c1\u76d8\u4e0a\u7684 log file \u4e2d\u3002 </p> <p>Log record buffering: log records are buffered in main memory, instead of of being output directly to stable storage.</p> <ul> <li>Log records are output to stable storage when a block of log records in the buffer is full, or a log force operation is executed.</li> </ul> <p>Log force is performed to commit a transaction by forcing all its log records (including the commit record) to stable storage.</p> <p>Group commit : several log records can be output using a single output operation, reducing the I/O cost. </p> <p>The rules below must be followed if log records are buffered:</p> <ul> <li>Log records are output to stable storage in the order in which they are created. </li> <li>Transaction \\(T_i\\) enters the commit state only when the log record <code>&lt;$T_i$ commit&gt;</code> has been output to stable storage.</li> <li>Before a block of data in main memory is output to the database, all log records pertaining to data in that block must have been output to stable storage. </li> </ul> <p>This rule is called the write-ahead logging or WAL rule</p> <p>Strictly speaking WAL only requires undo information to be output</p> <p>Database maintains an in-memory buffer of data blocks</p> <ul> <li>When a new block is needed, if buffer is full an existing block needs to be removed from buffer</li> <li>If the block chosen for removal has been updated, it must be output to disk</li> </ul> <p>The recovery algorithm supports the no-force policy(\u975e\u5f3a\u5236): i.e., updated blocks need not be written to disk when transaction commits</p> <ul> <li> <p>\u91c7\u7528 <code>No-Force</code> \u7b56\u7565\u65f6\uff0c\u5f53\u4e00\u4e2a\u4e8b\u52a1\u63d0\u4ea4 (<code>commits</code>) \u65f6\uff0c\u4e0d\u9700\u8981\u7acb\u5373\u5c06\u8be5\u4e8b\u52a1\u4fee\u6539\u8fc7\u7684\u6240\u6709\u6570\u636e\u5757\uff08\u810f\u5757\uff09\u4ece\u5185\u5b58\u7f13\u51b2\u533a\u5199\u56de\u5230\u78c1\u76d8\u3002\u8fd9\u4e9b\u810f\u5757\u53ef\u4ee5\u7ee7\u7eed\u4fdd\u7559\u5728\u5185\u5b58\u4e2d\uff0c\u76f4\u5230\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u56e0\u4e3a\u5176\u4ed6\u539f\u56e0\uff08\u6bd4\u5982\u7f13\u51b2\u533a\u6ee1\uff0c\u9700\u8981\u66ff\u6362\u5757\uff09\u51b3\u5b9a\u5c06\u5b83\u4eec\u5199\u56de\u78c1\u76d8\uff0c\u6216\u8005\u76f4\u5230\u53d1\u751f\u68c0\u67e5\u70b9 (checkpoint) \u64cd\u4f5c\u65f6\u624d\u5199\u56de\u3002</p> </li> <li> <p>force policy\uff08\u5f3a\u5236\uff09: requires updated blocks to be written at commit \u4e8b\u52a1\u7684\u63d0\u4ea4\u64cd\u4f5c\u4f1a\u89e6\u53d1\u4e00\u4e2a\u540c\u6b65\u7684\u78c1\u76d8\u5199\u64cd\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u76f8\u5173\u7684\u810f\u5757\u90fd\u5b89\u5168\u5730\u5199\u5165\u78c1\u76d8\u540e\uff0c\u4e8b\u52a1\u624d\u7b97\u771f\u6b63\u5b8c\u6210\u63d0\u4ea4\u3002\u7531\u4e8e\u5df2\u63d0\u4ea4\u4e8b\u52a1\u7684\u6240\u6709\u4fee\u6539\u90fd\u5df2\u5728\u78c1\u76d8\u4e0a\uff0c\u5982\u679c\u7cfb\u7edf\u5d29\u6e83\uff0c\u6062\u590d\u65f6\u901a\u5e38\u4e0d\u9700\u8981\u5bf9\u8fd9\u4e9b\u5df2\u63d0\u4ea4\u4e8b\u52a1\u8fdb\u884c\u91cd\u505a (REDO) \u64cd\u4f5c\uff08\u56e0\u4e3a\u5b83\u4eec\u7684\u6570\u636e\u5df2\u7ecf\"\u5f3a\u5236\"\u5199\u5165\u4e86\uff09\u3002</p> <ul> <li>More expensive commit</li> </ul> </li> </ul> <p>The recovery algorithm supports the steal policy\uff08\u7a83\u53d6\u7b56\u7565\uff09:i.e., blocks containing updates of uncommitted transactions can be written to disk, even before the transaction commits</p> <p>\u91c7\u7528Steal\u7b56\u7565\uff08\u6216\u8005\u53eb STEAL \u5141\u8bb8\uff09\u610f\u5473\u7740\uff0c\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u5757\uff0c\u5373\u4f7f\u5b83\u5305\u542b\u4e86\u5c1a\u672a\u63d0\u4ea4 (uncommitted) \u4e8b\u52a1\u7684\u4fee\u6539\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e8b\u52a1\u63d0\u4ea4\u4e4b\u524d\u88ab\u9009\u62e9\u5e76\u5199\u56de\u5230\u78c1\u76d8\u3002\u5f53\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u9700\u8981\u7a7a\u95f4\u65f6\uff0c\u5b83\u53ef\u4ee5\"\u7a83\u53d6\"\u4e00\u4e2a\u810f\u5757\uff08\u5373\u4f7f\u8fd9\u4e2a\u810f\u5757\u4e0a\u7684\u4fee\u6539\u6765\u81ea\u4e00\u4e2a\u8fd8\u6ca1\u63d0\u4ea4\u7684\u4e8b\u52a1\uff09\uff0c\u5c06\u5176\u5199\u56de\u78c1\u76d8\uff0c\u7136\u540e\u91cd\u7528\u8fd9\u4e2a\u7f13\u51b2\u69fd\u3002\u7f13\u51b2\u533a\u7ba1\u7406\u5668\u6709\u66f4\u5927\u7684\u7075\u6d3b\u6027\u6765\u9009\u62e9\u54ea\u4e9b\u5757\u88ab\u66ff\u6362\u51fa\u53bb\uff0c\u4e0d\u9700\u8981\u7b49\u5f85\u4e8b\u52a1\u63d0\u4ea4\u3002\u8fd9\u53ef\u4ee5\u907f\u514d\u7f13\u51b2\u533a\u56e0\u4e3a\u7b49\u5f85\u4e8b\u52a1\u63d0\u4ea4\u800c\u88ab\u5c11\u6570\u6d3b\u52a8\u4e8b\u52a1\u7684\u810f\u5757\u5360\u6ee1\u3002\u5982\u679c\u4e00\u4e2a\u5305\u542b\u672a\u63d0\u4ea4\u4e8b\u52a1\u4fee\u6539\u7684\u6570\u636e\u5757\u88ab\u5199\u56de\u78c1\u76d8\uff0c\u800c\u8be5\u4e8b\u52a1\u540e\u6765\u4e2d\u6b62 (aborts) \u4e86\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5df2\u7ecf\u88ab\u5199\u5230\u78c1\u76d8\u4e0a\u7684\u4fee\u6539\u5fc5\u987b\u88ab\u64a4\u9500\u3002\u8fd9\u5c31\u8981\u6c42\u65e5\u5fd7\u7cfb\u7edf\u5fc5\u987b\u80fd\u591f\u652f\u6301\u64a4\u9500 (UNDO) \u64cd\u4f5c\u3002\u5728\u7cfb\u7edf\u6062\u590d\u65f6\uff0c\u5982\u679c\u53d1\u73b0\u78c1\u76d8\u4e0a\u6709\u8fd9\u7c7b\u4e8b\u52a1\u7684\u4fee\u6539\uff0c\u4e5f\u9700\u8981\u901a\u8fc7\u65e5\u5fd7\u8fdb\u884cUNDO\u3002</p>"},{"location":"Computer_Science/DB/Chapter19/#fuzzy-checkpointing","title":"Fuzzy Checkpointing","text":"<p>To avoid long interruption of normal processing during checkpointing, allow updates to happen during checkpointing</p> <p>Fuzzy checkpointing is done as follows:</p> <ol> <li>Temporarily stop all updates by transactions</li> <li>Write a <code>&lt;checkpoint L&gt;</code> log record and force log to stable storage</li> <li>Note list M of modified buffer blocks</li> <li>Now permit transactions to proceed with their actions</li> <li>Output to disk all modified buffer blocks in list M</li> </ol> <ul> <li>blocks should not be updated while being output</li> <li>Follow WAL: all log records pertaining to a block must be output before the block is output</li> </ul> <ol> <li>Store a pointer to the checkpoint record in a fixed position last_checkpoint on disk</li> </ol> <p>When recovering using a fuzzy checkpoint, start scan from the checkpoint record pointed to by last_checkpoint</p> <ul> <li>Log records before last_checkpoint have their updates reflected in database on disk, and need not be redone.</li> <li>Incomplete checkpoints, where system had crashed while performing checkpoint, are handled safely</li> </ul> <p>\u8fd9\u6837\u505a\u7684\u4e3b\u8981\u597d\u5904\u662f\u7f29\u77ed\u7cfb\u7edf\u5d29\u6e83\u540e\u7684\u6062\u590d\u65f6\u95f4\u3002\u5982\u679c\u6ca1\u6709\u68c0\u67e5\u70b9\uff0c\u6062\u590d\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u4ece\u65e5\u5fd7\u6587\u4ef6\u7684\u6700\u5f00\u59cb\u8fdb\u884c\u626b\u63cf\uff0c\u8fd9\u4f1a\u975e\u5e38\u8017\u65f6\u3002\u6709\u4e86\u68c0\u67e5\u70b9\uff0c\u6062\u590d\u8fc7\u7a0b\u53ea\u9700\u8981\u4ece\u6700\u8fd1\u7684\u68c0\u67e5\u70b9\u5f00\u59cb\u5904\u7406\u65e5\u5fd7\u5373\u53ef\u3002</p> <p>\u6a21\u7cca\u68c0\u67e5\u70b9\u7684\u6267\u884c\u6b65\u9aa4\uff1a</p> <ol> <li>\u6682\u65f6\u505c\u6b62\u6240\u6709\u4e8b\u52a1\u7684\u66f4\u65b0\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u77ed\u6682\u7684\u6682\u505c\u3002\u76ee\u7684\u662f\u4e3a\u4e86\u83b7\u53d6\u4e00\u4e2a\u4e00\u81f4\u7684\u68c0\u67e5\u70b9\u5f00\u59cb\u65f6\u523b\u7684\u72b6\u6001\u3002</li> <li>\u5199\u5165 <code>&lt;checkpoint L&gt;</code> \u65e5\u5fd7\u8bb0\u5f55\u5e76\u5f3a\u5236\u5237\u76d8\u3002</li> <li>\u8bb0\u5f55\u5df2\u4fee\u6539\u7f13\u51b2\u5757\u5217\u8868 M\u3002</li> <li>\u5141\u8bb8\u4e8b\u52a1\u7ee7\u7eed\u6267\u884c\u5176\u64cd\u4f5c\u3002</li> <li>\u5c06\u5217\u8868 M \u4e2d\u7684\u6240\u6709\u5df2\u4fee\u6539\u7f13\u51b2\u5757\u8f93\u51fa\u5230\u78c1\u76d8\u3002\u5757\u5728\u8f93\u51fa\u65f6\u4e0d\u5e94\u88ab\u66f4\u65b0\u3002\u9075\u5faa\u9884\u5199\u65e5\u5fd7\u3002</li> <li>\u5728\u78c1\u76d8\u56fa\u5b9a\u4f4d\u7f6e <code>last_checkpoint</code> \u5b58\u50a8\u6307\u5411\u68c0\u67e5\u70b9\u8bb0\u5f55\u7684\u6307\u9488\u3002</li> </ol> <p>\u4f7f\u7528\u6a21\u7cca\u68c0\u67e5\u70b9\u8fdb\u884c\u6062\u590d\uff1a</p> <ol> <li>\u5b9a\u4f4d\u68c0\u67e5\u70b9\uff1a \u6062\u590d\u7ba1\u7406\u5668\u9996\u5148\u8bfb\u53d6\u78c1\u76d8\u4e0a\u56fa\u5b9a\u4f4d\u7f6e <code>last_checkpoint</code> \u7684\u6307\u9488\uff0c\u627e\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\u6700\u8fd1\u4e00\u6b21\u6210\u529f\u5b8c\u6210\u7684\u6a21\u7cca\u68c0\u67e5\u70b9\u8bb0\u5f55 <code>&lt;checkpoint L&gt;</code>\u3002</li> <li>\u5f00\u59cb\u626b\u63cf\u65e5\u5fd7\uff1a \u4ece\u8fd9\u4e2a <code>&lt;checkpoint L&gt;</code> \u8bb0\u5f55\u7684\u4f4d\u7f6e\u5f00\u59cb\u5411\u524d\u626b\u63cf\u65e5\u5fd7\u6587\u4ef6\u3002<code>&lt;checkpoint L&gt;</code> \u4e4b\u524d\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u68c0\u67e5\u70b9\u8bb0\u5f55\u4e4b\u524d\u7684\u65e5\u5fd7\uff0c\u7406\u8bba\u4e0a\u5b83\u4eec\u6240\u63cf\u8ff0\u7684\u66f4\u65b0\u5df2\u7ecf\u901a\u8fc7\u68c0\u67e5\u70b9\u8fc7\u7a0b\u53cd\u6620\u5230\u78c1\u76d8\u4e0a\u7684\u6570\u636e\u5e93\u4e2d\u4e86\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u65e5\u5fd7\u8bb0\u5f55\u901a\u5e38\u4e0d\u9700\u8981\u88ab\u91cd\u505a\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u5fae\u4e4b\u5904\uff0c\u56e0\u4e3a\u662f\"\u6a21\u7cca\"\u68c0\u67e5\u70b9\uff0c\u5728 <code>&lt;checkpoint L&gt;</code> \u4e4b\u540e\u3001\u4f46\u5728\u5217\u8868 M \u4e2d\u7684\u5757\u88ab\u5b8c\u5168\u5199\u76d8\u4e4b\u524d\uff0c\u4ecd\u53ef\u80fd\u6709\u4e8b\u52a1\u63d0\u4ea4\u3002\u4e25\u683c\u6765\u8bf4\uff0cREDO \u8fc7\u7a0b\u662f\u4ece\u68c0\u67e5\u70b9\u8bb0\u5f55\u4e2d\u5305\u542b\u7684\u6700\u65e9\u7684\u672a\u5b8c\u6210\u4e8b\u52a1\u7684\u7b2c\u4e00\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u6216\u6700\u65e9\u7684\u810f\u9875\u7684LSN\u5f00\u59cb\uff0c\u4f46\u68c0\u67e5\u70b9\u786e\u5b9e\u5927\u5927\u51cf\u5c11\u4e86\u9700\u8981 REDO \u7684\u65e5\u5fd7\u8303\u56f4\uff09\u3002<code>&lt;checkpoint L&gt;</code> \u4e4b\u540e\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u9700\u8981\u5bf9\u8fd9\u4e9b\u65e5\u5fd7\u8bb0\u5f55\u8fdb\u884c\u5206\u6790\uff0c\u4ee5\u786e\u5b9a\u54ea\u4e9b\u4e8b\u52a1\u9700\u8981\u91cd\u505a (REDO)\uff08\u5df2\u63d0\u4ea4\u4f46\u5176\u4fee\u6539\u53ef\u80fd\u672a\u5b8c\u5168\u5199\u5165\u6570\u636e\u6587\u4ef6\uff09\uff0c\u54ea\u4e9b\u4e8b\u52a1\u9700\u8981\u64a4\u9500 (UNDO)\uff08\u672a\u63d0\u4ea4\uff09\u3002</li> <li>\u5904\u7406\u4e0d\u5b8c\u6574\u7684\u68c0\u67e5\u70b9\uff1a \u5982\u679c\u7cfb\u7edf\u5728\u6267\u884c\u68c0\u67e5\u70b9\u8fc7\u7a0b\u7684\u9014\u4e2d\u5d29\u6e83\u4e86\u3002\u8fd9\u79cd\u4e0d\u5b8c\u6574\u7684\u68c0\u67e5\u70b9\u662f\"\u65e0\u6548\"\u7684\uff0c\u56e0\u4e3a <code>last_checkpoint</code> \u6307\u9488\u8fd8\u6ca1\u6709\u66f4\u65b0\u5230\u6307\u5411\u8fd9\u4e2a\u6b63\u5728\u8fdb\u884c\u7684\u68c0\u67e5\u70b9\u8bb0\u5f55\u3002\u6062\u590d\u8fc7\u7a0b\u4f1a\u4f7f\u7528\u4e0a\u4e00\u4e2a\u6210\u529f\u5b8c\u6210\u7684\u68c0\u67e5\u70b9\u8bb0\u5f55\u8fdb\u884c\u6062\u590d\u3002\u5373\u4f7f\u65b0\u7684 <code>&lt;checkpoint L&gt;</code> \u8bb0\u5f55\u5df2\u7ecf\u5199\u5165\u65e5\u5fd7\uff0c\u4f46\u53ea\u8981 <code>last_checkpoint</code> \u6307\u9488\u6ca1\u66f4\u65b0\uff0c\u6216\u8005\u5728\u6062\u590d\u65f6\u53d1\u73b0\u5217\u8868 M \u4e2d\u7684\u5757\u6ca1\u6709\u5b8c\u5168\u5199\u5b8c\uff0c\u7cfb\u7edf\u4e5f\u80fd\u5b89\u5168\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u901a\u5e38\u4f1a\u5ffd\u7565\u8fd9\u4e2a\u4e0d\u5b8c\u6574\u7684\u68c0\u67e5\u70b9\uff0c\u4ece\u66f4\u65e9\u7684\u68c0\u67e5\u70b9\u5f00\u59cb\u6062\u590d\uff0c\u6216\u8005\u4f9d\u8d56\u66f4\u590d\u6742\u7684\u6062\u590d\u903b\u8f91\u6765\u786e\u5b9a\u54ea\u4e9b\u5757\u786e\u5b9e\u88ab\u5199\u4e86\u3002ARIES \u7b49\u7b97\u6cd5\u5bf9\u6b64\u6709\u8be6\u7ec6\u7684\u5904\u7406\u673a\u5236\uff0c\u786e\u4fdd\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u53ef\u6062\u590d\u6027\u3002</li> </ol> <p></p>"},{"location":"Computer_Science/DB/Chapter19/#failure-with-loss-of-nonvolatile-storage","title":"Failure with Loss of Nonvolatile Storage","text":"<p>So far we assumed no loss of non-volatile storage</p> <p>Technique similar to checkpointing used to deal with loss of non-volatile storage</p> <p>\u8fd9\u662f\u4e00\u79cd\u5468\u671f\u6027\u5730\u5c06\u6570\u636e\u5e93\u7684\u5168\u90e8\u5185\u5bb9\u590d\u5236\u5230\u7a33\u5b9a\u5b58\u50a8 (stable storage) \u7684\u8fc7\u7a0b\u3002\u8fd9\u91cc\u7684\"\u7a33\u5b9a\u5b58\u50a8\"\u901a\u5e38\u6307\u72ec\u7acb\u4e8e\u4e3b\u6570\u636e\u5e93\u5b58\u50a8\u7684\u3001\u66f4\u53ef\u9760\u7684\u5b58\u50a8\u4ecb\u8d28\uff0c\u4f8b\u5982\u78c1\u5e26\u3001\u53e6\u4e00\u7ec4\u78c1\u76d8\u9635\u5217\uff08RAID\u914d\u7f6e\uff09\u3001\u6216\u4e91\u5b58\u50a8\u7b49\uff0c\u76ee\u7684\u662f\u9632\u6b62\u5355\u70b9\u7269\u7406\u6545\u969c\u3002</p> <ul> <li>Periodically dump the entire content of the database to stable storage</li> <li>No transaction may be active during the dump procedure; a procedure similar to checkpointing must take place \u5728\u8f6c\u50a8\u671f\u95f4\u4e0d\u5141\u8bb8\u6709\u6d3b\u52a8\u7684\u4e8b\u52a1\u3002</li> </ul> <ol> <li>Output all log records currently residing in main memory onto stable storage. \u5c06\u4e3b\u5185\u5b58\u4e2d\u6240\u6709\u65e5\u5fd7\u8bb0\u5f55\u8f93\u51fa\u5230\u7a33\u5b9a\u5b58\u50a8\u3002\u786e\u4fdd\u6240\u6709\u5728\u5185\u5b58\u65e5\u5fd7\u7f13\u51b2\u533a\u4e2d\u7684\u65e5\u5fd7\u90fd\u5df2\u5199\u5165\u78c1\u76d8\u4e0a\u7684\u65e5\u5fd7\u6587\u4ef6\u3002</li> <li>Output all buffer blocks onto the disk. \u5c06\u6240\u6709\u7f13\u51b2\u5757\u8f93\u51fa\u5230\u78c1\u76d8\u3002\u786e\u4fdd\u6240\u6709\u5728\u5185\u5b58\u6570\u636e\u5e93\u7f13\u51b2\u533a\u4e2d\u7684\u810f\u9875\uff08\u5df2\u4fee\u6539\u7684\u6570\u636e\u5757\uff09\u90fd\u5df2\u5199\u56de\u78c1\u76d8\u4e0a\u7684\u6570\u636e\u5e93\u4e3b\u6587\u4ef6\u3002\u8fd9\u4e00\u6b65\u5b8c\u6210\u540e\uff0c\u78c1\u76d8\u4e0a\u7684\u6570\u636e\u5e93\u6587\u4ef6\u53cd\u6620\u4e86\u5728\u8f6c\u50a8\u5f00\u59cb\u524d\u6240\u6709\u5df2\u63d0\u4ea4\u4e8b\u52a1\u7684\u7ed3\u679c\u3002</li> <li>Copy the contents of the database to stable storage. \u5c06\u6570\u636e\u5e93\u5185\u5bb9\u590d\u5236\u5230\u7a33\u5b9a\u5b58\u50a8\u3002\u73b0\u5728\uff0c\u5c06\u78c1\u76d8\u4e0a\u6574\u4e2a\u6570\u636e\u5e93\u6587\u4ef6\u7684\u5185\u5bb9\u5b8c\u6574\u5730\u590d\u5236\u5230\u4e00\u4e2a\u72ec\u7acb\u7684\u3001\u5b89\u5168\u7684\u7a33\u5b9a\u5b58\u50a8\u4f4d\u7f6e\u3002\u8fd9\u5c31\u662f\"\u8f6c\u50a8\"\u6216\"\u5907\u4efd\"\u7684\u6838\u5fc3\u6b65\u9aa4\u3002</li> <li>Output a record <code>&lt;dump&gt;</code> to log on stable storage. \u5728\u7a33\u5b9a\u5b58\u50a8\u7684\u65e5\u5fd7\u4e2d\u8f93\u51fa <code>&lt;dump&gt;</code> \u8bb0\u5f55\u3002\u8fd9\u4e2a\u6807\u8bb0\u6307\u660e\u4e86\u5230\u6b64\u4e3a\u6b62\uff0c\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u5b8c\u6574\u5feb\u7167\u5df2\u7ecf\u6210\u529f\u521b\u5efa\u5e76\u4fdd\u5b58\u5728\u7a33\u5b9a\u5b58\u50a8\u4e2d\u3002\u8fd9\u4e2a\u65e5\u5fd7\u672c\u8eab\u4e5f\u5e94\u8be5\u5728\u7a33\u5b9a\u5b58\u50a8\u4e0a\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter19/#recovering-from-failure-of-non-volatile-storage","title":"Recovering from Failure of Non-Volatile Storage","text":"<p>To recover from disk failure </p> <ol> <li>restore database from  most recent dump.  \u4ece\u6700\u8fd1\u7684\u8f6c\u50a8\u6062\u590d\u6570\u636e\u5e93\u3002</li> <li>Consult the log and redo all transactions that committed after the dump \u67e5\u9605\u65e5\u5fd7\u5e76\u91cd\u505a\u8f6c\u50a8\u4e4b\u540e\u63d0\u4ea4\u7684\u6240\u6709\u4e8b\u52a1\u3002</li> </ol> <p>Can be extended to allow transactions to be active during dump; known as fuzzy dump or online dump</p> <ul> <li>Similar to fuzzy checkpointing</li> </ul>"},{"location":"Computer_Science/DB/Chapter19/#recovery-with-early-lock-release-and-logical-undo-operations","title":"Recovery with Early Lock Release and Logical Undo Operations","text":"<p>Support for high-concurrency locking techniques, such as those used for B+-tree concurrency control, which release locks early</p> <p>\u5728\u9ad8\u5e76\u53d1\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\uff0c\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5e38\u5e38\u4f1a\u91c7\u7528\u4e00\u4e9b\u9ad8\u7ea7\u7684\u5e76\u53d1\u63a7\u5236\u6280\u672f\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u50cf B+ \u6811\u8fd9\u6837\u7684\u7d22\u5f15\u7ed3\u6784\u65f6\u3002\u8fd9\u4e9b\u6280\u672f\u7684\u4e00\u4e2a\u7279\u70b9\u662f\u63d0\u524d\u91ca\u653e\u9501\u3002\u8fd9\u79cd\u63d0\u524d\u91ca\u653e\u9501\u7684\u7b56\u7565\u867d\u7136\u80fd\u663e\u8457\u63d0\u9ad8\u5e76\u53d1\u5ea6\uff0c\u4f46\u4e5f\u7ed9\u4e8b\u52a1\u7684\u56de\u6eda\uff08\u64a4\u9500 undo\uff09\u548c\u7cfb\u7edf\u6062\u590d\u5e26\u6765\u4e86\u6311\u6218\u3002\u4f20\u7edf\u7684\u57fa\u4e8e\"\u91cd\u590d\u5386\u53f2\"\uff08repeating history\uff0c\u5373\u6062\u590d\u65f6\u7cbe\u786e\u91cd\u6f14\u4e8b\u52a1\u7684\u539f\u59cb\u64cd\u4f5c\u548c\u64a4\u9500\u64cd\u4f5c\uff09\u7684\u6062\u590d\u673a\u5236\u9700\u8981\u8c03\u6574\u3002</p> <ul> <li>Supports \"logical undo\"</li> </ul> <p>Recovery based on \"repeating history\", whereby recovery executes exactly the same actions as normal processing</p> <p>\u903b\u8f91\u64a4\u9500 (Logical Undo): \u6307\u7684\u662f\u6267\u884c\u4e00\u4e2a\u4e0e\u539f\u64cd\u4f5c\u8bed\u4e49\u76f8\u53cd\u7684\u64cd\u4f5c\u6765\u8fbe\u5230\u64a4\u9500\u7684\u6548\u679c\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u5730\u6062\u590d\u65e7\u503c\u3002\u5b83\u5173\u6ce8\u7684\u662f\u64cd\u4f5c\u7684\u903b\u8f91\u6548\u679c\u3002</p>"},{"location":"Computer_Science/DB/Chapter19/#logical-undo-logging","title":"Logical Undo Logging","text":"<p>Operations like B+-tree insertions and deletions release locks early. </p> <ul> <li>They cannot be undone by restoring old values (physical undo), since once a lock is released, other transactions may have updated  the B+-tree.</li> <li>Instead, insertions (resp. deletions) are undone  by executing a deletion (resp. insertion) operation (known as logical undo).  </li> </ul> <p>\u5f53\u64cd\u4f5c\uff08\u5982 B+ \u6811\u7684\u63d2\u5165\u548c\u5220\u9664\uff09\u63d0\u524d\u91ca\u653e\u9501\u65f6\uff1a</p> <ul> <li>\u4e00\u65e6\u9501\u88ab\u91ca\u653e\uff0c\u5176\u4ed6\u4e8b\u52a1\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5e76\u53ef\u80fd\u4fee\u6539\u8fd9\u4e2a\u7ed3\u6784\uff08\u4f8b\u5982 B+ \u6811\u8282\u70b9\uff09\u3002</li> <li>\u5982\u679c\u539f\u4e8b\u52a1\u540e\u6765\u9700\u8981\u4e2d\u6b62 (abort) \u5e76\u64a4\u9500\u5176\u64cd\u4f5c\uff0c\u90a3\u4e48\u7b80\u5355\u5730\u5c06 B+ \u6811\u8282\u70b9\u6062\u590d\u5230\u5176\u65e7\u7684\u7269\u7406\u72b6\u6001\uff08\u7269\u7406\u64a4\u9500\uff09\u662f\u884c\u4e0d\u901a\u7684\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u8986\u76d6\u6389\u5176\u4ed6\uff08\u53ef\u80fd\u5df2\u63d0\u4ea4\u7684\uff09\u4e8b\u52a1\u5bf9\u8be5\u8282\u70b9\u6240\u505a\u7684\u5408\u6cd5\u4fee\u6539\uff0c\u7834\u574f\u6570\u636e\u4e00\u81f4\u6027\u3002</li> </ul> <p>For such operations, undo log records should contain the undo operation to be executed</p> <ul> <li>Such logging is called logical undo logging, in contrast to physical undo logging</li> </ul> <p>Operations are called logical operations</p> <ul> <li>Other examples:</li> </ul> <ol> <li>delete of tuple, to undo insert of tuple, allows early lock release on space allocation information</li> <li>subtract amount deposited, to undo deposit, allows early lock release on bank balance</li> </ol> <p>\u5bf9\u4e8e\u8fd9\u7c7b\u63d0\u524d\u91ca\u653e\u9501\u7684\u64cd\u4f5c\uff0c\u5b83\u4eec\u7684\u64a4\u9500\u4e0d\u80fd\u901a\u8fc7\u6062\u590d\u65e7\u503c\u6765\u8fdb\u884c\u3002</p> <p>\u76f8\u53cd\uff0c\u63d2\u5165 (insertions) \u64cd\u4f5c\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u5220\u9664 (deletion) \u64cd\u4f5c\u6765\u64a4\u9500\u3002\u5220\u9664 (deletions) \u64cd\u4f5c\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u63d2\u5165 (insertion) \u64cd\u4f5c\u6765\u64a4\u9500\u3002 \u8fd9\u79cd\u8bed\u4e49\u4e0a\u76f8\u53cd\u7684\u64cd\u4f5c\u5c31\u662f\u903b\u8f91\u64a4\u9500\u3002</p> <p>\u5bf9\u4e8e\u8fd9\u7c7b\u9700\u8981\u903b\u8f91\u64a4\u9500\u7684\u64cd\u4f5c\uff0c\u5176\u5bf9\u5e94\u7684\u64a4\u9500\u65e5\u5fd7\u8bb0\u5f55 (undo log records) \u4e0d\u5e94\u8be5\u5305\u542b\u65e7\u7684\u7269\u7406\u503c\u3002</p> <p>\u76f8\u53cd\uff0c\u8fd9\u4e9b\u65e5\u5fd7\u8bb0\u5f55\u5e94\u8be5\u5305\u542b\u5c06\u8981\u88ab\u6267\u884c\u7684\u903b\u8f91\u64a4\u9500\u64cd\u4f5c\u672c\u8eab\u7684\u4fe1\u606f\uff08\u4f8b\u5982\uff0c\u8981\u5220\u9664\u54ea\u4e2a\u952e\uff0c\u6216\u8005\u8981\u63d2\u5165\u54ea\u4e2a\u952e\u503c\u5bf9\uff09\u3002</p> <p>\u8fd9\u79cd\u8bb0\u5f55\u65e5\u5fd7\u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a\u903b\u8f91\u64a4\u9500\u65e5\u5fd7 (logical undo logging)\uff0c\u4ee5\u533a\u522b\u4e8e\u8bb0\u5f55\u65e7\u7269\u7406\u503c\u7684\u7269\u7406\u64a4\u9500\u65e5\u5fd7 (physical undo logging)\u3002</p>"},{"location":"Computer_Science/DB/Chapter19/#physical-redo","title":"Physical Redo","text":"<p>Redo information is logged physically (that is, new value for each write) even for operations with logical undo</p> <ul> <li>Logical redo is very complicated since database state on disk may not be \"operation consistent\" when recovery starts</li> <li>Physical redo logging does not conflict with early lock release</li> </ul> <p>\u5373\u4f7f\u5bf9\u4e8e\u90a3\u4e9b\u652f\u6301\"\u903b\u8f91\u64a4\u9500\"\u7684\u64cd\u4f5c\uff08\u6bd4\u5982 B+ \u6811\u64cd\u4f5c\uff09\uff0c\u5176\u91cd\u505a (redo) \u4fe1\u606f\u901a\u5e38\u8fd8\u662f\u4ee5\u7269\u7406\u65b9\u5f0f\u8bb0\u5f55\u7684\u3002</p> <p>\u7269\u7406\u8bb0\u5f55\u65b9\u5f0f\uff1a\u6307\u7684\u662f\u65e5\u5fd7\u4e2d\u8bb0\u5f55\u7684\u662f\u6570\u636e\u5199\u5165\u7684\"\u65b0\u503c\"\uff08new value for each write\uff09\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u64cd\u4f5c\u5c06\u9875\u9762 P \u7684\u67d0\u4e2a\u4f4d\u7f6e\u4ece\u65e7\u503c A \u4fee\u6539\u4e3a\u65b0\u503c B\uff0c\u90a3\u4e48\u7269\u7406\u91cd\u505a\u65e5\u5fd7\u5c31\u4f1a\u8bb0\u5f55\"\u5c06\u9875\u9762 P \u7684\u8fd9\u4e2a\u4f4d\u7f6e\u8bbe\u7f6e\u4e3a B\"\u3002</p> <p>\u4e3a\u4ec0\u4e48\u4e0d\u7528\u903b\u8f91\u91cd\u505a\uff1f</p> <p>\u903b\u8f91\u91cd\u505a\u975e\u5e38\u590d\u6742\uff0c\u56e0\u4e3a\u5f53\u7cfb\u7edf\u4ece\u5d29\u6e83\u4e2d\u6062\u590d\u5f00\u59cb\u65f6\uff0c\u78c1\u76d8\u4e0a\u7684\u6570\u636e\u5e93\u72b6\u6001\u53ef\u80fd\u4e0d\u662f\"\u64cd\u4f5c\u4e00\u81f4\u7684\"(operation consistent)\u3002\u8fd9\u610f\u5473\u7740\u78c1\u76d8\u4e0a\u7684\u6570\u636e\u53ef\u80fd\u5904\u4e8e\u4e00\u4e2a\u4e2d\u95f4\u72b6\u6001\uff0c\u76f4\u63a5\u5728\u5176\u4e0a\u6267\u884c\u4e00\u4e2a\u903b\u8f91\u91cd\u505a\u64cd\u4f5c\uff08\u6bd4\u5982\"\u5728 B+ \u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u952e\"\uff09\u53ef\u80fd\u4f1a\u56e0\u4e3a\u524d\u63d0\u6761\u4ef6\u4e0d\u6ee1\u8db3\u800c\u5931\u8d25\u6216\u4ea7\u751f\u9519\u8bef\u7ed3\u679c\u3002</p> <p>\u91cd\u505a\u9636\u6bb5\u7684\u76ee\u6807\u662f\u5feb\u901f\u5c06\u6570\u636e\u5e93\u6062\u590d\u5230\u5d29\u6e83\u524d\u7684\u72b6\u6001\uff08\u6216\u8005\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u540e\u7eed\u64a4\u9500\u64cd\u4f5c\u7684\u4e00\u81f4\u72b6\u6001\uff09\uff0c\u7269\u7406\u91cd\u505a\u6700\u7b80\u5355\u76f4\u63a5\uff0c\u80fd\u6709\u6548\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002</p>"},{"location":"Computer_Science/DB/Chapter19/#operation-logging","title":"Operation Logging","text":"<p>Operation logging is done as follows:</p> <ol> <li>When operation starts, log <code>&lt;$T_i$, $O_j$,  operation-begin&gt;</code>. Here Oj is a unique identifier of the operation instance.</li> <li>While operation is executing, normal log records with physical redo and physical undo information are logged. </li> <li>When operation completes, <code>&lt;$T_i$, $O_j$,  operation-end, U&gt;</code> is logged, where U contains information  needed to perform a logical undo information.</li> </ol> <p>Example: insert of (key, record-id) pair (K5, RID7) into index I9</p> <p></p> <p>If crash/rollback occurs before operation completes:</p> <ul> <li>the operation-end log record is not found, and </li> <li>the physical undo information is used to undo operation.</li> </ul> <p>If crash/rollback occurs after the operation completes:</p> <ul> <li>the operation-end log record is found, and in this case</li> <li>logical undo is performed using U;  the physical undo information for the operation is ignored.</li> </ul> <p>Redo of operation (after crash) still uses physical redo information.</p> <p>\u64cd\u4f5c\u65e5\u5fd7\u7684\u8bb0\u5f55\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <p>\u64cd\u4f5c\u5f00\u59cb\u65f6\uff1a\u5f53\u4e00\u4e2a\u8fd9\u7c7b\u7279\u6b8a\u64cd\u4f5c\uff08\u6bd4\u5982 B+ \u6811\u63d2\u5165 \\(O_j\\)\uff0c\u7531\u4e8b\u52a1 \\(T_i\\) \u6267\u884c\uff09\u5f00\u59cb\u65f6\uff0c\u8bb0\u5f55\u4e00\u6761\u65e5\u5fd7\uff1a<code>&lt;$T_i$, $O_j$, operation-begin&gt;</code>\u3002\u8fd9\u91cc\u7684 \\(O_j\\) \u662f\u8fd9\u4e2a\u64cd\u4f5c\u5b9e\u4f8b\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002</p> <p>\u64cd\u4f5c\u6267\u884c\u671f\u95f4\uff1a\u5728\u64cd\u4f5c \\(O_j\\) \u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u4ecd\u7136\u50cf\u5f80\u5e38\u4e00\u6837\u8bb0\u5f55\u5305\u542b\u7269\u7406\u91cd\u505a\u548c\u7269\u7406\u64a4\u9500\u4fe1\u606f\u7684\u666e\u901a\u65e5\u5fd7\u8bb0\u5f55\u3002\u4f8b\u5982\uff0c\u5982\u679c\u64cd\u4f5c \\(O_j\\) \u4fee\u6539\u4e86\u9875\u9762 X \u7684\u503c\u4ece \\(V_1\\) \u5230 \\(V_2\\)\uff0c\u4f1a\u8bb0\u5f55 <code>&lt;$T_i$, X, $V_1$, $V_2$&gt;</code>\u3002\u8fd9\u4e9b\u7269\u7406\u64a4\u9500\u4fe1\u606f\u662f\"\u5907\u7528\"\u7684\u3002</p> <p>\u64cd\u4f5c\u5b8c\u6210\u65f6\uff1a\u5f53\u64cd\u4f5c \\(O_j\\) \u6210\u529f\u5b8c\u6210\u65f6\uff0c\u8bb0\u5f55\u4e00\u6761\u65e5\u5fd7\uff1a<code>&lt;$T_i$, $O_j$, operation-end, U&gt;</code>\u3002\u8fd9\u91cc\u7684 U \u5305\u542b\u4e86\u6267\u884c\u8be5\u64cd\u4f5c\u7684\u903b\u8f91\u64a4\u9500\u6240\u9700\u7684\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u5982\u679c \\(O_j\\) \u662f\u4e00\u4e2a B+ \u6811\u63d2\u5165\u64cd\u4f5c\uff0cU \u53ef\u80fd\u5305\u542b\u8981\u5220\u9664\u7684\u952e\u3002</p> <p>\u5982\u679c\u5d29\u6e83/\u56de\u6eda\u53d1\u751f\u5728\u64cd\u4f5c\u5b8c\u6210\u4e4b\u524d\uff1a</p> <ol> <li>\u8fd9\u610f\u5473\u7740\u5728\u65e5\u5fd7\u4e2d\u627e\u4e0d\u5230\u5bf9\u5e94\u7684 <code>&lt;$T_i$, $O_j$, operation-end, U&gt;</code> \u8bb0\u5f55\u3002</li> <li>\u6b64\u65f6\uff0c\u7cfb\u7edf\u4f1a\u4f7f\u7528\u5728\u64cd\u4f5c\u6267\u884c\u671f\u95f4\u8bb0\u5f55\u7684\u7269\u7406\u64a4\u9500\u4fe1\u606f\u6765\u64a4\u9500\u8be5\u64cd\u4f5c\uff08\u4f8b\u5982\uff0c\u4f7f\u7528 \\(V_1\\) \u6062\u590d\u9875\u9762 X\uff09\u3002</li> </ol> <p>\u5982\u679c\u5d29\u6e83/\u56de\u6eda\u53d1\u751f\u5728\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\uff1a</p> <ol> <li>\u8fd9\u610f\u5473\u7740\u5728\u65e5\u5fd7\u4e2d\u627e\u5230\u4e86\u5bf9\u5e94\u7684 <code>&lt;$T_i$, $O_j$, operation-end, U&gt;</code> \u8bb0\u5f55\u3002</li> <li>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u4f1a\u6267\u884c\u903b\u8f91\u64a4\u9500\uff0c\u4f7f\u7528 U \u4e2d\u63d0\u4f9b\u7684\u4fe1\u606f\u3002\u6b64\u65f6\uff0c\u8be5\u64cd\u4f5c\u5bf9\u5e94\u7684\u7269\u7406\u64a4\u9500\u4fe1\u606f\u5c06\u88ab\u5ffd\u7565\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter19/#transaction-rollback-with-logical-undo","title":"Transaction Rollback with Logical Undo","text":"<p>Rollback of transaction \\(T_i\\) is done as follows: </p> <p>Scan the log backwards </p> <ol> <li>If a log record <code>&lt;$T_i$, X, $V_1$, $V_2$&gt;</code> is found, perform the undo and log <code>&lt;$T_i$, X, V1&gt;</code>.</li> </ol> <p>\u9047\u5230\u666e\u901a\u7269\u7406\u64a4\u9500\u65e5\u5fd7\u8bb0\u5f55\uff1a\u5982\u679c\u627e\u5230\u4e00\u6761\u5f62\u5982 <code>&lt;$T_i$, X, $V_1$, $V_2$&gt;</code> \u7684\u65e5\u5fd7\u8bb0\u5f55\uff08\u8868\u793a \\(T_i\\) \u5c06 X \u4ece \\(V_1\\) \u4fee\u6539\u4e3a \\(V_2\\)\uff09\uff0c\u5219\u6267\u884c\u7269\u7406\u64a4\u9500\uff08\u5c06 X \u7684\u503c\u6062\u590d\u4e3a \\(V_1\\)\uff09\uff0c\u5e76\u8bb0\u5f55\u4e00\u6761\u8865\u507f\u65e5\u5fd7\uff08Compensation Log Record, CLR\uff09\uff0c\u901a\u5e38\u5f62\u5f0f\u4e3a <code>&lt;$T_i$, X, V1&gt;</code> (\u8868\u793a\u5c06 X \u7684\u503c\u6539\u4e3a \\(V_1\\)\uff0c\u5e76\u4e14\u8fd9\u4e2a CLR \u672c\u8eab\u662f\u53ea\u91cd\u505a redo-only \u7684)\u3002</p> <ol> <li>If a <code>&lt;$T_i$, $O_j$,  operation-end, U&gt;</code> record is found</li> </ol> <ul> <li>Rollback the operation logically using the undo information U.  \u6b64\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528 U \u4e2d\u5305\u542b\u7684\u4fe1\u606f\u6765\u903b\u8f91\u5730\u56de\u6eda\u64cd\u4f5c \\(O_j\\) \u3002\u4f8b\u5982\uff0c\u5982\u679c \\(O_j\\) \u662f\u63d2\u5165\uff0c\u5219\u6267\u884c\u5220\u9664\u3002</li> </ul> <p>Updates performed during roll back are logged just like during normal operation execution. \u5728\u6267\u884c\u8fd9\u4e2a\u903b\u8f91\u64a4\u9500\u64cd\u4f5c\u671f\u95f4\u6240\u505a\u7684\u66f4\u65b0\uff08\u6bd4\u5982\u903b\u8f91\u5220\u9664\u5bfc\u81f4\u5bf9 B+ \u6811\u8282\u70b9\u7684\u4fee\u6539\uff09\u4f1a\u50cf\u6b63\u5e38\u64cd\u4f5c\u6267\u884c\u65f6\u4e00\u6837\u88ab\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\uff08\u5305\u62ec\u5b83\u4eec\u81ea\u5df1\u7684\u7269\u7406\u91cd\u505a\u548c\u7269\u7406\u64a4\u9500\u4fe1\u606f\uff09\u3002</p> <p>At the end of the operation rollback, instead of logging an  operation-end record, generate a record  <code>&lt;$T_i$, $O_j$, operation-abort&gt;</code>. \u5f53\u8fd9\u4e2a\u903b\u8f91\u64a4\u9500\u64cd\u4f5c\u5b8c\u6210\u540e\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u8bb0\u5f55\u4e00\u4e2a operation-end \u8bb0\u5f55\uff0c\u800c\u662f\u751f\u6210\u4e00\u6761\u7279\u6b8a\u7684\u8bb0\u5f55\uff1a<code>&lt;$T_i$, $O_j$, operation-abort&gt;</code>\u3002</p> <ul> <li>skip all preceding log records for \\(T_i\\) until the record <code>&lt;$T_i$, $O_j$ operation-begin&gt;</code> is found. \u5728\u8bb0\u5f55\u4e86 <code>operation-abort</code> \u4e4b\u540e\uff0c\u8df3\u8fc7\u65e5\u5fd7\u4e2d\u6240\u6709\u5c5e\u4e8e\u4e8b\u52a1 \\(T_i\\) \u7684\u3001\u65e9\u4e8e\u6b64 <code>operation-abort</code> \u8bb0\u5f55\u7684\u3001\u4e14\u4e0e\u64cd\u4f5c \\(O_j\\) \u76f8\u5173\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u76f4\u5230\u627e\u5230\u8be5\u64cd\u4f5c\u5bf9\u5e94\u7684 <code>&lt;$T_i$, $O_j$ operation-begin&gt;</code> \u8bb0\u5f55\u3002\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u5bf9 \\(O_j\\) \u5185\u90e8\u7684\u7ec6\u7c92\u5ea6\u7269\u7406\u4fee\u6539\u8fdb\u884c\u4e0d\u5fc5\u8981\u7684\u7269\u7406\u64a4\u9500\u3002</li> </ul> <p>Transaction rollback, scanning the log backwards (cont.):</p> <ol> <li>If a redo-only record is found ignore it  \u9047\u5230\u53ea\u91cd\u505a (redo-only) \u8bb0\u5f55\u5ffd\u7565\u5b83\u4eec\uff0c\u56e0\u4e3a\u56de\u6eda\u9636\u6bb5\u53ea\u5173\u5fc3\u64a4\u9500\u64cd\u4f5c\u3002</li> <li>If a <code>&lt;$T_i$, $O_j$, operation-abort&gt;</code> record is found: \u9047\u5230 <code>&lt;$T_i$, $O_j$ operation-begin&gt;</code> \u8bb0\u5f55</li> </ol> <ul> <li>skip all preceding log records for \\(T_i\\) until the record <code>&lt;$T_i$, $O_j$, operation-begin&gt;</code> is found. \u8fd9\u8868\u793a\u64cd\u4f5c \\(O_j\\) \u4e4b\u524d\u5df2\u7ecf\u88ab\uff08\u53ef\u80fd\u662f\u90e8\u5206\u5730\uff09\u56de\u6eda\u4e86\uff08\u4f8b\u5982\uff0c\u5728\u4e00\u6b21\u5d29\u6e83\u524d\u7684\u56de\u6eda\u5c1d\u8bd5\u4e2d\uff09\u3002 \u4e3a\u4e86\u907f\u514d\u91cd\u590d\u56de\u6eda\uff0c\u6b64\u65f6\u9700\u8981\u8df3\u8fc7\u6240\u6709\u5c5e\u4e8e\u4e8b\u52a1 \\(T_i\\) \u7684\u3001\u65e9\u4e8e\u6b64 operation-abort \u8bb0\u5f55\u7684\u3001\u4e14\u4e0e\u64cd\u4f5c \\(O_j\\) \u76f8\u5173\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u76f4\u5230\u627e\u5230\u8be5\u64cd\u4f5c\u5bf9\u5e94\u7684 <code>&lt;$T_i$, $O_j$, operation-begin&gt;</code> \u8bb0\u5f55\u3002</li> </ul> <ol> <li>Stop the scan when the record <code>&lt;$T_i$, start&gt;</code> is found. \u5f53\u627e\u5230\u8be5\u4e8b\u52a1\u7684\u5f00\u59cb\u8bb0\u5f55 <code>&lt;$T_i$, start&gt;</code> \u65f6\uff0c\u56de\u6eda\u8fc7\u7a0b\uff08\u5bf9\u4e8e\u8fd9\u4e2a\u4e8b\u52a1\u800c\u8a00\uff09\u7ed3\u675f\u3002</li> <li>Add a <code>&lt;$T_i$,  abort&gt;</code> record to the log. \u6700\u540e\uff0c\u5728\u65e5\u5fd7\u4e2d\u6dfb\u52a0\u4e00\u6761 <code>&lt;T$T_i$, abort&gt;</code> \u8bb0\u5f55\uff0c\u6b63\u5f0f\u6807\u8bb0\u8be5\u4e8b\u52a1\u5df2\u4e2d\u6b62\u3002</li> </ol> <p>Some points to note:</p> <p>Cases 3 and 4 above can occur only if the database crashes while a transaction is being rolled back.</p> <p>\u4e0a\u8ff0\u7684\u5373\u5728\u56de\u6eda\u626b\u63cf\u4e2d\u9047\u5230 <code>operation-abort</code> \u8bb0\u5f55\uff0c\u4ee5\u53ca\u626b\u63cf\u5230 <code>transaction-start</code> \u8bb0\u5f55\u540e\u505c\u6b62\uff0c\u4e3b\u8981\u53d1\u751f\u5728\u6570\u636e\u5e93\u5728\u4e00\u4e2a\u4e8b\u52a1\u6b63\u5728\u56de\u6eda\u7684\u8fc7\u7a0b\u4e2d\u53c8\u53d1\u751f\u4e86\u5d29\u6e83\u7684\u573a\u666f\u3002</p> <p>Skipping of log records as in case 4 is important to prevent multiple rollback of the same operation.</p> <p></p> <p></p>"},{"location":"Computer_Science/DB/Chapter19/#recovery-algorithm-with-logical-undo","title":"Recovery Algorithm with Logical Undo","text":"<p>Basically same as earlier algorithm, except for changes described earlier for transaction rollback</p> <ol> <li>(Redo phase): Scan log forward from last &lt; checkpoint L&gt; record till end of log</li> </ol> <ul> <li>Repeat history by physically redoing all updates of  all transactions, </li> <li>Create an undo-list during the scan as follows</li> </ul> <p>undo-list is set to L initially</p> <p>Whenever <code>&lt;$T_i$ start&gt;</code> is found \\(T_i\\) is added to undo-list</p> <p>Whenever <code>&lt;$T_i$ commit&gt;</code> or <code>&lt;$T_i$ abort&gt;</code> is found, \\(T_i\\) is deleted from undo-list</p> <p>This brings database to state as of crash, with committed as well as uncommitted transactions having been redone.</p> <p>Now undo-list contains transactions that are incomplete, that is, have neither committed nor been fully rolled back.</p> <p>Recovery from system crash (cont.)</p> <p>(Undo phase): Scan log backwards, performing undo on log records of transactions found in undo-list. </p> <ul> <li>Log records of transactions being rolled back are processed as described earlier, as they are found</li> </ul> <p>Single shared scan for all transactions being undone</p> <ul> <li>When <code>&lt;$T_i$ start&gt;</code> is found for a transaction \\(T_i\\) in  undo-list, write a <code>&lt;$T_i$ abort&gt;</code> log record.</li> <li>Stop scan when <code>&lt;$T_i$ start&gt;</code> records have been found for all \\(T_i\\) in undo-list</li> </ul> <p>This undoes the effects of incomplete transactions (those with neither commit nor abort log records). Recovery is now complete.</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u57fa\u672c\u4e0a\u4e0e\u65e9\u671f\u7684\u6062\u590d\u7b97\u6cd5\u76f8\u540c\uff0c\u53ea\u662f\u9488\u5bf9\u4e8b\u52a1\u56de\u6eda\u90e8\u5206\u505a\u4e86\u5148\u524d\u63cf\u8ff0\u7684\uff08\u5173\u4e8e\u903b\u8f91\u64a4\u9500\u548c\u64cd\u4f5c\u65e5\u5fd7\u7684\uff09\u4fee\u6539\u3002</p> <ol> <li>\u91cd\u505a\u9636\u6bb5 (Redo Phase) \u27a1\ufe0f</li> </ol> <p>\u6b64\u9636\u6bb5\u7684\u76ee\u6807\u662f\u5c06\u6570\u636e\u5e93\u6062\u590d\u5230\u5d29\u6e83\u53d1\u751f\u65f6\u7684\u786e\u5207\u72b6\u6001\uff0c\u786e\u4fdd\u6240\u6709\u5df2\u5199\u5165\u65e5\u5fd7\u7684\u4fee\u6539\u90fd\u53cd\u6620\u5728\u6570\u636e\u9875\u4e0a\u3002</p> <ul> <li>\u626b\u63cf\u65b9\u5411\uff1a\u4ece\u6700\u540e\u4e00\u4e2a\u68c0\u67e5\u70b9\u8bb0\u5f55 <code>&lt;checkpoint L&gt;</code> \u5f00\u59cb\uff0c\u5411\u524d\u626b\u63cf\u65e5\u5fd7\uff0c\u76f4\u5230\u65e5\u5fd7\u7684\u672b\u5c3e\uff08\u5373\u5d29\u6e83\u70b9\uff09\u3002</li> <li>\u6838\u5fc3\u64cd\u4f5c\uff1a<ul> <li>\u91cd\u590d\u5386\u53f2 (Repeat history)\uff1a\u901a\u8fc7\u7269\u7406\u91cd\u505a (physically redoing) \u6240\u6709\u4e8b\u52a1\u7684\u6240\u6709\u66f4\u65b0\u64cd\u4f5c\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u65e5\u5fd7\u4e2d\u7684\u6bcf\u4e00\u6761\u7269\u7406\u4fee\u6539\u8bb0\u5f55\uff08\u4f8b\u5982 <code>&lt;Ti, X, OldVal, NewVal&gt;</code>\uff09\uff0c\u90fd\u4f1a\u5c06\u5176\u65b0\u503c <code>NewVal</code> \u5e94\u7528\u5230\u6570\u636e\u9879 <code>X</code> \u4e0a\u3002</li> <li>\u6784\u5efa\u64a4\u9500\u5217\u8868 (undo-list)\uff1a\u5728\u5411\u524d\u626b\u63cf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u52a8\u6001\u5730\u6784\u5efa\u4e00\u4e2a <code>undo-list</code>\u3002\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u4e86\u5728\u5d29\u6e83\u65f6\u5c1a\u672a\u5b8c\u6210\uff08\u65e2\u672a\u63d0\u4ea4\u4e5f\u672a\u4e2d\u6b62\uff09\u7684\u4e8b\u52a1\u3002<ul> <li>\u521d\u59cb\u65f6\uff0c<code>undo-list</code> \u88ab\u8bbe\u7f6e\u4e3a\u68c0\u67e5\u70b9\u8bb0\u5f55 <code>L</code> \u4e2d\u5305\u542b\u7684\u6d3b\u52a8\u4e8b\u52a1\u5217\u8868\u3002</li> <li>\u5f53\u626b\u63cf\u5230 <code>&lt;$T_i$ start&gt;</code> \u65e5\u5fd7\u8bb0\u5f55\u65f6\uff0c\u5c06\u4e8b\u52a1 \\(T_i\\) \u6dfb\u52a0\u5230 <code>undo-list</code> \u4e2d\u3002</li> <li>\u5f53\u626b\u63cf\u5230 <code>&lt;$T_i$ commit&gt;</code> \u6216 <code>&lt;$T_i$ abort&gt;</code> \u65e5\u5fd7\u8bb0\u5f55\u65f6\uff0c\u5c06\u4e8b\u52a1 \\(T_i\\) \u4ece <code>undo-list</code> \u4e2d\u5220\u9664\u3002</li> </ul> </li> </ul> </li> <li>\u9636\u6bb5\u7ed3\u679c\uff1a<ul> <li>\u6b64\u9636\u6bb5\u5b8c\u6210\u540e\uff0c\u6570\u636e\u5e93\u7684\u72b6\u6001\u4e0e\u5d29\u6e83\u53d1\u751f\u65f6\u7684\u72b6\u6001\u5b8c\u5168\u4e00\u81f4\u3002\u6240\u6709\u4e8b\u52a1\uff08\u65e0\u8bba\u662f\u6700\u7ec8\u63d0\u4ea4\u7684\u8fd8\u662f\u672a\u63d0\u4ea4\u7684\uff09\u7684\u3001\u4e14\u5df2\u8bb0\u5f55\u5728\u65e5\u5fd7\u4e2d\u7684\u4fee\u6539\u90fd\u5df2\u7ecf\u88ab\u91cd\u505a\u5230\u4e86\u6570\u636e\u5e93\u4e2d\u3002</li> <li>\u6b64\u65f6\uff0c<code>undo-list</code> \u4e2d\u5305\u542b\u7684\u662f\u6240\u6709\u4e0d\u5b8c\u6574\u7684\u4e8b\u52a1\uff0c\u5373\u90a3\u4e9b\u65e2\u6ca1\u6709\u63d0\u4ea4\u8bb0\u5f55\u4e5f\u6ca1\u6709\u5b8c\u5168\u56de\u6eda\u4e2d\u6b62\u8bb0\u5f55\u7684\u4e8b\u52a1\u3002\u8fd9\u4e9b\u4e8b\u52a1\u7684\u5f71\u54cd\u9700\u8981\u5728\u4e0b\u4e00\u9636\u6bb5\u88ab\u64a4\u9500\u3002</li> </ul> </li> </ul> <ol> <li>\u64a4\u9500\u9636\u6bb5 (Undo Phase) \u2b05\ufe0f</li> </ol> <p>\u6b64\u9636\u6bb5\u7684\u76ee\u6807\u662f\u64a4\u9500\u6240\u6709\u5728 <code>undo-list</code> \u4e2d\u7684\u4e0d\u5b8c\u6574\u4e8b\u52a1\u9020\u6210\u7684\u5f71\u54cd\uff0c\u786e\u4fdd\u6570\u636e\u5e93\u7684\u539f\u5b50\u6027\u3002</p> <ul> <li>\u626b\u63cf\u65b9\u5411\uff1a\u4ece\u65e5\u5fd7\u7684\u672b\u5c3e\u5f00\u59cb\uff0c\u5411\u540e\u626b\u63cf\u65e5\u5fd7\u3002</li> <li>\u6838\u5fc3\u64cd\u4f5c\uff1a<ul> <li>\u5bf9 <code>undo-list</code> \u4e2d\u4e8b\u52a1\u7684\u65e5\u5fd7\u8bb0\u5f55\u6267\u884c\u64a4\u9500\u64cd\u4f5c\u3002</li> <li>\u5173\u952e\uff1a\u5f53\u9047\u5230\u9700\u8981\u56de\u6eda\u7684\u4e8b\u52a1\u7684\u65e5\u5fd7\u8bb0\u5f55\u65f6\uff0c\u8fd9\u4e9b\u8bb0\u5f55\u4f1a\u6309\u7167\u5148\u524d\u63cf\u8ff0\u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\u3002\u8fd9\u5c31\u662f\u903b\u8f91\u64a4\u9500\u53d1\u6325\u4f5c\u7528\u7684\u5730\u65b9\uff1a<ul> <li>\u5982\u679c\u9047\u5230\u666e\u901a\u7684\u7269\u7406\u4fee\u6539\u8bb0\u5f55\uff08\u5982 <code>&lt;$T_i$, X, $V_1$, $V_2$&gt;</code>\uff09\uff0c\u5219\u6267\u884c\u7269\u7406\u64a4\u9500\uff0c\u5e76\u8bb0\u5f55\u8865\u507f\u65e5\u5fd7\u8bb0\u5f55 (CLR)\u3002</li> <li>\u5982\u679c\u9047\u5230 <code>&lt;$T_i$, $O_j$, operation-end, U&gt;</code> \u8bb0\u5f55\uff0c\u5219\u4f7f\u7528 <code>U</code> \u4e2d\u7684\u4fe1\u606f\u6267\u884c\u903b\u8f91\u64a4\u9500\uff0c\u8bb0\u5f55\u76f8\u5e94\u7684 CLR\uff08\u53ef\u80fd\u63cf\u8ff0\u903b\u8f91\u64cd\u4f5c\u7684\u6548\u679c\uff09\uff0c\u5e76\u8bb0\u5f55 <code>&lt;$T_i$, $O_j$, operation-abort&gt;</code>\uff0c\u7136\u540e\u8df3\u8fc7\u6b64\u64cd\u4f5c \\(O_j\\) \u5185\u90e8\u7684\u5176\u4f59\u7269\u7406\u65e5\u5fd7\u8bb0\u5f55\uff0c\u76f4\u5230\u5176 <code>&lt;operation-begin&gt;</code>\u3002</li> <li>\u5982\u679c\u9047\u5230 <code>&lt;$T_i$, $O_j$, operation-abort&gt;</code> \u8bb0\u5f55\uff08\u8bf4\u660e\u6b64\u64cd\u4f5c\u5728\u4e4b\u524d\u7684\u56de\u6eda\u5c1d\u8bd5\u4e2d\u5df2\u88ab\u5904\u7406\uff09\uff0c\u5219\u8df3\u8fc7\u4e0e\u6b64\u64cd\u4f5c\u76f8\u5173\u7684\u65e5\u5fd7\uff0c\u76f4\u5230\u5176 <code>&lt;operation-begin&gt;</code>\u3002</li> </ul> </li> <li>\u5171\u4eab\u626b\u63cf\uff1a\u6240\u6709\u9700\u8981\u64a4\u9500\u7684\u4e8b\u52a1\u5171\u4eab\u540c\u4e00\u6b21\u7684\u65e5\u5fd7\u53cd\u5411\u626b\u63cf\u8fc7\u7a0b\uff0c\u63d0\u9ad8\u4e86\u6548\u7387\u3002</li> </ul> </li> <li>\u4e8b\u52a1\u5904\u7406\u5b8c\u6210\uff1a<ul> <li>\u5f53\u53cd\u5411\u626b\u63cf\u9047\u5230 <code>undo-list</code> \u4e2d\u67d0\u4e2a\u4e8b\u52a1 \\(T_i\\) \u7684\u5f00\u59cb\u8bb0\u5f55 <code>&lt;$T_i$ start&gt;</code> \u65f6\uff0c\u610f\u5473\u7740\u8be5\u4e8b\u52a1\u7684\u6240\u6709\u5f71\u54cd\u90fd\u5df2\u88ab\u64a4\u9500\u3002\u6b64\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5411\u65e5\u5fd7\u4e2d\u5199\u5165\u4e00\u6761 <code>&lt;$T_i$ abort&gt;</code> \u8bb0\u5f55\uff0c\u5e76\u5c06 \\(T_i\\) \u4ece <code>undo-list</code> \u4e2d\uff08\u6982\u5ff5\u4e0a\uff09\u79fb\u9664\u3002</li> </ul> </li> <li>\u626b\u63cf\u505c\u6b62\uff1a\u5f53 <code>undo-list</code> \u4e2d\u6240\u6709\u4e8b\u52a1\u7684 <code>&lt;start&gt;</code> \u8bb0\u5f55\u90fd\u5df2\u627e\u5230\uff08\u5e76\u5904\u7406\u5b8c\u6bd5\uff09\u540e\uff0c\u64a4\u9500\u9636\u6bb5\u7684\u626b\u63cf\u5c31\u53ef\u4ee5\u505c\u6b62\u4e86\u3002</li> <li>\u9636\u6bb5\u7ed3\u679c\uff1a<ul> <li>\u6240\u6709\u4e0d\u5b8c\u6574\u4e8b\u52a1\uff08\u90a3\u4e9b\u5728\u65e5\u5fd7\u4e2d\u65e2\u6ca1\u6709 commit \u8bb0\u5f55\u4e5f\u6ca1\u6709 abort \u8bb0\u5f55\u7684\u4e8b\u52a1\uff09\u7684\u5f71\u54cd\u90fd\u88ab\u6210\u529f\u64a4\u9500\u3002</li> <li>\u81f3\u6b64\uff0c\u6570\u636e\u5e93\u6062\u590d\u8fc7\u7a0b\u5b8c\u6210\u3002</li> </ul> </li> </ul>"},{"location":"Computer_Science/DB/Chapter19/#aries-recovery-algorithm","title":"ARIES Recovery Algorithm","text":"<p>ARIES is a state of the art recovery method </p> <ul> <li>Incorporates numerous optimizations to reduce overheads during normal processing and to speed up recovery</li> <li>The recovery algorithm we studied earlier is modeled after ARIES, but greatly simplified by removing optimizations</li> </ul> <p>Unlike the recovery algorithm described earlier, ARIES </p> <ol> <li>Uses log sequence number (LSN) to identify log records \u4f7f\u7528\u65e5\u5fd7\u5e8f\u5217\u53f7 (LSN) \u6807\u8bc6\u65e5\u5fd7\u8bb0\u5f55\u3002\u6bcf\u6761\u65e5\u5fd7\u8bb0\u5f55\u90fd\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u552f\u4e00\u7684\u3001\u5355\u8c03\u9012\u589e\u7684\u65e5\u5fd7\u5e8f\u5217\u53f7 (LSN)\u3002LSN \u901a\u5e38\u4e0e\u65e5\u5fd7\u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u7684\u7269\u7406\u4f4d\u7f6e\uff08\u4f8b\u5982\u5b57\u8282\u504f\u79fb\u91cf\uff09\u76f8\u5173\u3002</li> </ol> <p>Stores LSNs in pages to identify what updates have already been applied to a database page \u66f4\u91cd\u8981\u7684\u662f\uff0cARIES \u4f1a\u5728\u6bcf\u4e2a\u6570\u636e\u9875\u7684\u5934\u90e8\u5b58\u50a8\u8be5\u9875\u9762\u6700\u8fd1\u4e00\u6b21\u88ab\u66f4\u65b0\u65f6\u5bf9\u5e94\u7684\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN (\u79f0\u4e3a PageLSN)\u3002</p> <ol> <li>Physiological redo \u751f\u7406\u6027\u64cd\u4f5c\u901a\u5e38\u6307\u7684\u662f\u5bf9\u5355\u4e2a\u9875\u9762\u7684\u4fee\u6539\u662f\u7269\u7406\u7684\uff08\u6bd4\u5982\u4fee\u6539\u9875\u9762\u5185\u7684\u51e0\u4e2a\u5b57\u8282\uff09\uff0c\u4f46\u662f\u8fd9\u4e9b\u64cd\u4f5c\u7684\u8fb9\u754c\u662f\u7531\u903b\u8f91\u5b9a\u4e49\u7684\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u8bb0\u5f55\u7684\u63d2\u5165\u6216\u5220\u9664\u53ef\u80fd\u53ea\u5f71\u54cd\u4e00\u4e2a\u9875\u9762\u5185\u7684\u4e00\u5c0f\u90e8\u5206\uff09\u3002\u5728\u91cd\u505a\u65f6\uff0c\u4f1a\u91cd\u505a\u5bf9\u9875\u9762\u7684\u8fd9\u4e9b\"\u751f\u7406\u6027\"\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u65e5\u5fd7\u8bb0\u5f55\u4f1a\u6307\u660e\u5728\u54ea\u4e2a\u9875\u9762\u7684\u54ea\u4e2a\u504f\u79fb\u91cf\u5199\u5165\u4e86\u54ea\u4e9b\u5b57\u8282\u3002\u867d\u7136\u91cd\u505a\u662f\u751f\u7406\u6027\u7684\uff0c\u4f46\u64a4\u9500\uff08\u5c24\u5176\u5bf9\u4e8e\u590d\u6742\u64cd\u4f5c\u5982 B+ \u6811\u7d22\u5f15\u7ef4\u62a4\uff09\u53ef\u4ee5\u662f\u903b\u8f91\u7684\uff0c\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u8ba8\u8bba\u7684\u90a3\u6837\u3002</li> <li>Dirty page table to avoid unnecessary redos during recovery ARIES. ARIES \u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u810f\u9875\u8868\uff0c\u8bb0\u5f55\u4e86\u54ea\u4e9b\u6570\u636e\u9875\u5728\u7f13\u51b2\u533a\u4e2d\u88ab\u4fee\u6539\u8fc7\u4f46\u5c1a\u672a\u5199\u56de\u78c1\u76d8\uff08\u5373\u810f\u9875\uff09\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u810f\u9875\uff0cDPT \u8fd8\u4f1a\u8bb0\u5f55\u8be5\u810f\u9875\u7b2c\u4e00\u6b21\u53d8\u810f\u65f6\u5bf9\u5e94\u7684\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN (\u79f0\u4e3a <code>RecoveryLSN</code> \u6216 <code>RecLSN</code>)\u3002\u5728\u6062\u590d\u7684\u5206\u6790\u9636\u6bb5 (Analysis Pass)\uff0c\u4f1a\u6839\u636e\u68c0\u67e5\u70b9\u4fe1\u606f\u548c\u540e\u7eed\u65e5\u5fd7\u91cd\u5efa DPT\u3002\u5728\u91cd\u505a\u9636\u6bb5 (Redo Pass) \u5f00\u59cb\u65f6\uff0c\u7cfb\u7edf\u53ea\u9700\u8981\u4ece\u6240\u6709\u810f\u9875\u4e2d\u6700\u5c0f\u7684 <code>RecLSN</code> \u5f00\u59cb\u626b\u63cf\u65e5\u5fd7\u3002\u5bf9\u4e8e\u4e0d\u5728 DPT \u4e2d\u7684\u9875\u9762\u76f8\u5173\u7684\u65e5\u5fd7\u66f4\u65b0\uff0c\u53ef\u4ee5\u8df3\u8fc7\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u9875\u9762\u5728\u68c0\u67e5\u70b9\u65f6\u80af\u5b9a\u662f\u5e72\u51c0\u7684\uff0c\u5e76\u4e14\u4e4b\u540e\u6ca1\u6709\u53d8\u810f\u3002\u8fd9\u8fdb\u4e00\u6b65\u51cf\u5c11\u4e86\u9700\u8981\u626b\u63cf\u548c\u5904\u7406\u7684\u65e5\u5fd7\u91cf\u3002</li> <li>Fuzzy checkpointing that only records information about dirty pages, and does not require dirty pages to be written out at checkpoint time. \u4e0e\u6211\u4eec\u4e4b\u524d\u8ba8\u8bba\u7684\u6a21\u7cca\u68c0\u67e5\u70b9\u7c7b\u4f3c\uff0c\u5b83\u4ec5\u4ec5\u8bb0\u5f55\u6709\u5173\u810f\u9875\u7684\u4fe1\u606f\uff08\u4f8b\u5982\uff0c\u810f\u9875\u5217\u8868\u53ca\u5176 RecLSN\uff09\u4ee5\u53ca\u6d3b\u52a8\u4e8b\u52a1\u5217\u8868\u5230\u65e5\u5fd7\u4e2d\u3002ARIES \u7684\u6a21\u7cca\u68c0\u67e5\u70b9\u4e0d\u8981\u6c42\u5728\u68c0\u67e5\u70b9\u5b8c\u6210\u65f6\u5c06\u810f\u9875\u5199\u51fa\u5230\u78c1\u76d8\u3002\u810f\u9875\u7684\u5199\u51fa\u662f\u7531\u7f13\u51b2\u533a\u7684\u66ff\u6362\u7b56\u7565\u6216\u5176\u4ed6\u540e\u53f0\u8fdb\u7a0b\u72ec\u7acb\u7ba1\u7406\u7684\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u68c0\u67e5\u70b9\u7684\u5f00\u9500\u975e\u5e38\u5c0f\uff0c\u5bf9\u6b63\u5e38\u4e8b\u52a1\u5904\u7406\u7684\u5e72\u6270\u964d\u5230\u6700\u4f4e\uff0c\u56e0\u4e3a\u68c0\u67e5\u70b9\u64cd\u4f5c\u4e3b\u8981\u53ea\u662f\u5199\u4e00\u4e9b\u5143\u6570\u636e\u5230\u65e5\u5fd7\uff0c\u800c\u4e0d\u6d89\u53ca\u5927\u91cf\u7684\u6570\u636e\u9875 I/O\u3002</li> </ol> <p>More coming up on each of the above ...</p>"},{"location":"Computer_Science/DB/Chapter19/#aries-data-structures","title":"ARIES Data Structures","text":"<p>ARIES uses several data structures</p> <ul> <li>Log sequence number (LSN) identifies each log record</li> </ul> <ol> <li>Must be sequentially increasing</li> <li> <p>Typically an offset from beginning of log file to allow fast access</p> <ul> <li>Easily extended to handle multiple log files</li> </ul> </li> </ol> <ul> <li>Page LSN</li> <li>Log records of several different types</li> <li>Dirty page table</li> </ul>"},{"location":"Computer_Science/DB/Chapter19/#aries-data-structures-page-lsn","title":"ARIES Data Structures: Page LSN","text":"<p>Each page contains a PageLSN which is the LSN of the last log record whose effects are reflected on the page</p> <p>To update a page:</p> <ul> <li>X-latch the page, and write the log record. \u5bf9\u9875\u9762\u4e0a X\u9501 (\u6392\u4ed6\u9501) (X-latch the page\uff0c\u8fd9\u662f\u4e00\u79cd\u77ed\u671f\u7684\u7269\u7406\u9501\uff0c\u7528\u4e8e\u4fdd\u8bc1\u9875\u9762\u5728\u5185\u5b58\u4e2d\u7684\u7269\u7406\u4e00\u81f4\u6027\uff0c\u4e0d\u540c\u4e8e\u4e8b\u52a1\u7528\u7684\u903b\u8f91\u9501)\u3002</li> <li>Update the page</li> <li>Record the LSN of the log record in PageLSN</li> <li>Unlock page</li> </ul> <p>To flush page to disk, must first S-latch page. \u5728\u5c06\u9875\u9762\u5185\u5bb9\u5199\u5165\u78c1\u76d8\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u83b7\u53d6\u8be5\u9875\u7684 S\u9501 (\u5171\u4eab\u9501) (S-latch page)\u3002</p> <ul> <li>Thus page state on disk is operation consistent. \u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u5199\u5165\u78c1\u76d8\u7684\u9875\u9762\u72b6\u6001\u662f\u64cd\u4f5c\u4e00\u81f4\u7684 (operation consistent)\uff0c\u5373\u9875\u9762\u5185\u5bb9\u662f\u67d0\u4e2a\u5b8c\u6574\u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u662f\u6b63\u5728\u88ab\u4fee\u6539\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u72b6\u6001\u3002</li> </ul> <p>Required to support physiological redo. \u751f\u7406\u6027\u91cd\u505a\u610f\u5473\u7740\u91cd\u505a\u64cd\u4f5c\u662f\u57fa\u4e8e\u9875\u9762\u7684\u7269\u7406\u4fee\u6539\uff0c\u4f46\u8fd9\u4e9b\u4fee\u6539\u662f\u7531\u903b\u8f91\u64cd\u4f5c\uff08\u5982\u8bb0\u5f55\u63d2\u5165\uff09\u5f15\u8d77\u7684\u3002</p> <ul> <li>PageLSN is used during recovery to prevent repeated redo. \u5728\u6062\u590d\u7684\u91cd\u505a\u9636\u6bb5\uff0c\u901a\u8fc7\u6bd4\u8f83\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN \u548c\u9875\u9762\u7684 PageLSN\uff0c\u53ef\u4ee5\u5224\u65ad\u8be5\u65e5\u5fd7\u8bb0\u5f55\u63cf\u8ff0\u7684\u66f4\u65b0\u662f\u5426\u5df2\u7ecf\u5e94\u7528\u5230\u4e86\u8fd9\u4e2a\u9875\u9762\u4e0a\u3002\u5982\u679c\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN \u2264 PageLSN\uff0c\u5219\u8868\u793a\u8be5\u66f4\u65b0\u5df2\u5305\u542b\u5728\u5185\uff0c\u65e0\u9700\u518d\u6b21\u91cd\u505a\u3002</li> </ul> <p>Thus ensuring idempotence. \u7531\u4e8e\u4e0a\u8ff0\u673a\u5236\uff0c\u5373\u4f7f\u91cd\u505a\u64cd\u4f5c\u88ab\u591a\u6b21\u6267\u884c\uff08\u4f8b\u5982\uff0c\u5728\u6062\u590d\u8fc7\u7a0b\u4e2d\u53d1\u751f\u591a\u6b21\u5c1d\u8bd5\uff09\uff0c\u9875\u9762\u7684\u6700\u7ec8\u72b6\u6001\u4e5f\u662f\u6b63\u786e\u7684\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u91cd\u590d\u5e94\u7528\u540c\u4e00\u4e2a\u66f4\u65b0\u800c\u51fa\u9519\u3002</p>"},{"location":"Computer_Science/DB/Chapter19/#aries-data-structures-log-record","title":"ARIES Data Structures: Log Record","text":"<ol> <li>\u901a\u7528\u65e5\u5fd7\u8bb0\u5f55\u7ed3\u6784:</li> </ol> <p>\u6bcf\u4e2a\uff08\u6216\u5927\u591a\u6570\uff09\u65e5\u5fd7\u8bb0\u5f55\u90fd\u5305\u542b\u6307\u5411\u540c\u4e00\u4e8b\u52a1\u7684\u524d\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN (PrevLSN)\u3002\u8fd9\u5f62\u6210\u4e86\u4e00\u4e2a\u4e8b\u52a1\u5185\u65e5\u5fd7\u8bb0\u5f55\u7684\u53cd\u5411\u94fe\u8868\uff0c\u4fbf\u4e8e\u56de\u6eda\u3002</p> <p>\u6807\u51c6\u7ed3\u6784\u901a\u5e38\u662f\uff1a<code>[LSN | TransID | PrevLSN | RedoInfo | UndoInfo]</code></p> <ol> <li>\u8865\u507f\u65e5\u5fd7\u8bb0\u5f55 (Compensation Log Record - CLR):</li> </ol> <p>\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u53ea\u91cd\u505a (redo-only) \u65e5\u5fd7\u8bb0\u5f55\uff0c\u7528\u4e8e\u8bb0\u5f55\u5728\u6062\u590d\u671f\u95f4\u6267\u884c\u7684\u64a4\u9500 (undo) \u64cd\u4f5c\u3002</p> <p>CLR \u63cf\u8ff0\u7684\u52a8\u4f5c\u6c38\u8fdc\u4e0d\u9700\u8981\u88ab\u518d\u6b21\u64a4\u9500\u3002\u5982\u679c\u7cfb\u7edf\u5728\u56de\u6eda\u4e00\u4e2a\u4e8b\u52a1\u7684\u8fc7\u7a0b\u4e2d\u5d29\u6e83\uff0c\u5f53\u6062\u590d\u65f6\uff0c\u4f1a\u91cd\u505a\u8fd9\u4e9b CLR\uff0c\u4ece\u800c\u7ee7\u7eed\u5b8c\u6210\u4e4b\u524d\u7684\u56de\u6eda\uff0c\u800c\u4e0d\u662f\u64a4\u9500\u4e4b\u524d\u7684\u56de\u6eda\u52a8\u4f5c\u3002</p> <p>CLR \u7684\u4e00\u4e2a\u5173\u952e\u5b57\u6bb5\u662f<code>UndoNextLSN</code>\u3002\u8fd9\u4e2a\u5b57\u6bb5\u6307\u5411\u8be5\u4e8b\u52a1\u9700\u8981\u88ab\u64a4\u9500\u7684\u4e0b\u4e00\u6761\uff08\u5373\u66f4\u65e9\u7684\uff09\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN\u3002<code>UndoNextLSN</code> \u6307\u5411\u7684\u662f\u4e8b\u52a1\u6309 <code>PrevLSN</code> \u94fe\u56de\u6eaf\u65f6\uff0c\u5728\u751f\u6210\u6b64 CLR \u4e4b\u524d\u7684\u90a3\u6761\u9700\u8981\u88ab\u64a4\u9500\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e8b\u52a1\u7684\u65e5\u5fd7\u94fe\u662f 1 \u2190 2 \u2190 3 \u2190 4 (\u6309 PrevLSN \u65b9\u5411)\uff0c\u5f53\u64a4\u9500 LSN=4 \u7684\u64cd\u4f5c\u65f6\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a CLR (\u5047\u8bbe\u4e3a 4')\uff0c\u8fd9\u4e2a CLR \u7684 UndoNextLSN \u4f1a\u6307\u5411 LSN = 3\u3002\u7136\u540e\u5f53\u64a4\u9500 LSN = 3 \u7684\u64cd\u4f5c\u65f6\uff0c\u4f1a\u751f\u6210 CLR (\u5047\u8bbe\u4e3a 3')\uff0c\u5176 UndoNextLSN \u6307\u5411 LSN = 2\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4f4d\u4e8e\u5f53\u524d\u88ab\u64a4\u9500\u8bb0\u5f55\u548c <code>UndoNextLSN</code> \u6307\u5411\u8bb0\u5f55\u4e4b\u95f4\u7684\uff08\u5c5e\u4e8e\u540c\u4e00\u4e8b\u52a1\u7684\uff09\u8bb0\u5f55\u5e94\u8be5\u5df2\u7ecf\u88ab\u64a4\u9500\u4e86\uff08\u6216\u8005\u5728\u903b\u8f91\u64cd\u4f5c\u4e2d\u88ab\u8df3\u8fc7\uff09\u3002</p> <p>CLR \u7684\u7ed3\u6784\u901a\u5e38\u662f\uff1a<code>[LSN | TransID | UndoNextLSN | RedoInfo]</code> (\u6ce8\u610f\uff0cCLR \u901a\u5e38\u6ca1\u6709 <code>UndoInfo</code>\uff0c\u56e0\u4e3a\u5b83\u672c\u8eab\u4e0d\u4f1a\u88ab\u64a4\u9500\uff0c\u5176 <code>RedoInfo</code> \u63cf\u8ff0\u4e86\u5b83\u6240\u6267\u884c\u7684\u64a4\u9500\u52a8\u4f5c)\u3002</p>"},{"location":"Computer_Science/DB/Chapter19/#aries-data-structures-dirtypage-table","title":"ARIES Data Structures: DirtyPage Table","text":"<p>DirtyPageTable</p> <ul> <li>List of pages in the buffer that have been updated</li> <li>Contains, for each such page</li> </ul> <p>PageLSN of the page </p> <p><code>PageLSN</code>: \u5373\u6700\u540e\u4e00\u6b21\u4fee\u6539\u8be5\u9875\u7684\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN\uff08\u8fd9\u4e2a\u4fe1\u606f\u4e5f\u5b58\u5728\u4e8e\u9875\u9762\u81ea\u8eab\u5934\u90e8\uff09\u3002</p> <p>RecLSN is an LSN such that log records before this LSN have already been applied to the page version on disk</p> <p><code>RecLSN</code> \u662f\u8be5\u9875\u7b2c\u4e00\u6b21\u6210\u4e3a\u810f\u9875\u65f6\uff08\u5373\u9996\u6b21\u88ab\u4fee\u6539\u524d\uff09\uff0c\u5bf9\u5e94\u7684\u7b2c\u4e00\u6761\u4fee\u6539\u8be5\u9875\u7684\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN\u3002</p> <ol> <li>Set to current end of log when a page is inserted into dirty page table (just before being updated)</li> <li>Recorded in checkpoints, helps to minimize redo work</li> </ol> <p></p>"},{"location":"Computer_Science/DB/Chapter19/#aries-data-structures-checkpoint-log","title":"ARIES Data Structures: Checkpoint Log","text":"<p>Checkpoint log record</p> <p>Contains: </p> <ul> <li>DirtyPageTable and list of active transactions \u5f53\u524d\u7684\u810f\u9875\u8868 (DirtyPageTable)\u3002\u5f53\u524d\u7684\u6d3b\u52a8\u4e8b\u52a1\u5217\u8868 (list of active transactions)\u3002</li> <li>For each active transaction, LastLSN, the LSN of the last log record written by the transaction. \u5bf9\u4e8e\u6bcf\u4e2a\u6d3b\u52a8\u4e8b\u52a1\uff0c\u8fd8\u4f1a\u8bb0\u5f55\u5176 LastLSN\uff0c\u5373\u8be5\u4e8b\u52a1\u5199\u5165\u7684\u6700\u540e\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN\u3002</li> </ul> <p>Fixed position on disk notes LSN of last completed checkpoint log record</p> <p>\u78c1\u76d8\u4e0a\u7684\u4e00\u4e2a\u56fa\u5b9a\u4f4d\u7f6e\u4f1a\u8bb0\u5f55\u6700\u540e\u4e00\u4e2a\u6210\u529f\u5b8c\u6210\u7684\u68c0\u67e5\u70b9\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN\u3002\u8fd9\u4f7f\u5f97\u6062\u590d\u65f6\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u6700\u65b0\u7684\u68c0\u67e5\u70b9\u3002</p> <p>Dirty pages are not written out at checkpoint time.</p> <p>ARIES \u7684\u68c0\u67e5\u70b9\u662f\u6a21\u7cca\u7684 (fuzzy)\uff0c\u610f\u5473\u7740\u5728\u6267\u884c\u68c0\u67e5\u70b9\u65f6\uff0c\u810f\u9875\u4e0d\u9700\u8981\u88ab\u5f3a\u5236\u5199\u51fa\u5230\u78c1\u76d8\u3002</p> <p>Instead, they are flushed out continuously, in the background.</p> <p>\u810f\u9875\u7684\u5199\u51fa\u662f\u7531\u7f13\u51b2\u533a\u7684\u66ff\u6362\u7b56\u7565\u6216\u540e\u53f0\u8fdb\u7a0b\u6301\u7eed\u5730\u3001\u5728\u540e\u53f0\u8fdb\u884c\u7684\u3002</p> <p>Checkpoint is thus very low overhead, can be done frequently.</p> <p>\u56e0\u6b64\uff0cARIES \u68c0\u67e5\u70b9\u7684\u5f00\u9500\u975e\u5e38\u4f4e\uff08\u4e3b\u8981\u53ea\u662f\u5c06 DPT \u548c\u6d3b\u52a8\u4e8b\u52a1\u5217\u8868\u5199\u5165\u65e5\u5fd7\uff09\uff0c\u53ef\u4ee5\u9891\u7e41\u5730\u6267\u884c\u3002</p>"},{"location":"Computer_Science/DB/Chapter19/#aries-recovery-algorithm_1","title":"ARIES Recovery Algorithm","text":"<p>ARIES recovery involves three passes</p> <p>Analysis pass: Determines \u5206\u6790\u9636\u6bb5</p> <ul> <li>Which transactions to undo  (undo-list). \u786e\u5b9a\u54ea\u4e9b\u4e8b\u52a1\u9700\u8981\u88ab\u64a4\u9500 (undo-list)\u3002\u5373\u90a3\u4e9b\u5728\u5d29\u6e83\u65f6\u4ecd\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff08\u6ca1\u6709 commit \u6216 abort \u8bb0\u5f55\uff09\u7684\u4e8b\u52a1\u3002</li> <li>Which pages were dirty (disk version not up to date) at time of crash. \u786e\u5b9a\u54ea\u4e9b\u9875\u9762\u5728\u5d29\u6e83\u65f6\u662f\u810f\u7684\uff08\u5373\u78c1\u76d8\u4e0a\u7684\u7248\u672c\u4e0d\u662f\u6700\u65b0\u7684\uff09\u3002\u8fd9\u4f1a\u66f4\u65b0\u5185\u5b58\u4e2d\u7684\u810f\u9875\u8868 (DPT)\u3002</li> <li>RedoLSN: LSN from which redo should start. \u786e\u5b9a\u91cd\u505a\u8d77\u59cb\u70b9 (RedoLSN): \u8fd9\u662f\u91cd\u505a\u9636\u6bb5\u9700\u8981\u5f00\u59cb\u626b\u63cf\u65e5\u5fd7\u7684\u6700\u5c0f LSN\u3002\u901a\u5e38\u662f\u6240\u6709\u5728\u68c0\u67e5\u70b9\u65f6\u523b\u7684\u810f\u9875\u7684 RecLSN \u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4ee5\u53ca\u68c0\u67e5\u70b9\u540e\u65b0\u53d8\u810f\u7684\u9875\u7684\u7b2c\u4e00\u4e2a\u4fee\u6539\u7684 LSN \u4e2d\u7684\u6700\u5c0f\u503c\u3002</li> </ul> <p>Redo pass:</p> <p>Repeats history, redoing all actions from RedoLSN. \u91cd\u590d\u5386\u53f2\uff0c\u5c06\u6570\u636e\u5e93\u6062\u590d\u5230\u5d29\u6e83\u53d1\u751f\u65f6\u7684\u786e\u5207\u72b6\u6001\u3002\u4ece\u5206\u6790\u9636\u6bb5\u786e\u5b9a\u7684 RedoLSN \u5f00\u59cb\uff0c\u5411\u524d\u626b\u63cf\u65e5\u5fd7\u5230\u672b\u5c3e\u3002\u5bf9\u65e5\u5fd7\u4e2d\u8bb0\u5f55\u7684\u6bcf\u4e00\u4e2a\u66f4\u65b0\u64cd\u4f5c\u6267\u884c\u91cd\u505a\u3002</p> <p>RecLSN and PageLSNs are used to avoid redoing actions already reflected on page. \u5229\u7528\u9875\u9762\u7684 PageLSN \u548c\u810f\u9875\u8868\u4e2d\u7684 RecLSN \u6765\u907f\u514d\u5bf9\u90a3\u4e9b\u5df2\u7ecf\u53cd\u6620\u5728\u78c1\u76d8\u9875\u9762\u4e0a\u7684\u64cd\u4f5c\u8fdb\u884c\u4e0d\u5fc5\u8981\u7684\u91cd\u505a\u3002</p> <p>Undo pass:</p> <p>Rolls back all incomplete transactions. \u56de\u6eda\u6240\u6709\u5728\u5d29\u6e83\u65f6\u5c1a\u672a\u5b8c\u6210\u7684\u4e8b\u52a1\u3002\u4ece\u65e5\u5fd7\u7684\u672b\u5c3e\u5f00\u59cb\uff0c\u5411\u540e\u626b\u63cf\u65e5\u5fd7\u3002\u5bf9 undo-list \u4e2d\u4e8b\u52a1\u7684\u65e5\u5fd7\u8bb0\u5f55\u6267\u884c\u64a4\u9500\u64cd\u4f5c\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u64a4\u9500\u64cd\u4f5c\u8bb0\u5f55\u4e00\u4e2a\u8865\u507f\u65e5\u5fd7\u8bb0\u5f55 (CLR)\u3002</p> <p>Transactions whose abort was complete earlier are not undone</p> <p>Key idea: no need to undo these transactions: earlier undo actions were logged, and are redone as required</p> <p>\u90a3\u4e9b\u5728\u5d29\u6e83\u524d\u5df2\u7ecf\u5b8c\u6210\u4e2d\u6b62\u8fc7\u7a0b\u7684\u4e8b\u52a1\u4e0d\u9700\u8981\u518d\u6b21\u88ab\u64a4\u9500\u3002\u56e0\u4e3a\u5b83\u4eec\u4e4b\u524d\u7684\u64a4\u9500\u64cd\u4f5c\uff08\u5df2\u901a\u8fc7 CLR \u8bb0\u5f55\uff09\u5728\u91cd\u505a\u9636\u6bb5\u5df2\u7ecf\u88ab\u91cd\u505a\u4e86\u3002CLR \u7684 UndoNextLSN \u94fe\u786e\u4fdd\u4e86\u64a4\u9500\u7684\u6b63\u786e\u8fdb\u5c55\u548c\u5e42\u7b49\u6027\u3002\u5f53\u9047\u5230\u4e00\u4e2a\u4e8b\u52a1\u7684 <code>&lt;start&gt;</code> \u8bb0\u5f55\u65f6\uff0c\u8868\u660e\u8be5\u4e8b\u52a1\u7684\u56de\u6eda\u5df2\u5b8c\u6210\uff0c\u4f1a\u4e3a\u5176\u5199\u5165\u4e00\u4e2a <code>&lt;abort&gt;</code> \u65e5\u5fd7\u8bb0\u5f55\u3002</p> <p></p> <p>\u56fe\u4e2d\u7684\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u89e3\u91ca\uff1a</p> <ol> <li>\u65e5\u5fd7 (Log):</li> </ol> <ul> <li>\u4f4d\u4e8e\u56fe\u7684\u53f3\u4e0b\u65b9\uff0c\u662f\u6309\u65f6\u95f4\u987a\u5e8f\u8bb0\u5f55\u6240\u6709\u6570\u636e\u5e93\u66f4\u6539\u548c\u91cd\u8981\u4e8b\u4ef6\u7684\u6d41\u6c34\u8d26\u3002</li> <li>\u6bcf\u6761\u65e5\u5fd7\u8bb0\u5f55\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u3001\u5355\u8c03\u9012\u589e\u7684LSN (Log Sequence Number)\u3002</li> <li>PrevLSN: \u6307\u5411\u540c\u4e00\u4e8b\u52a1\u7684\u524d\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u7684LSN\uff0c\u5f62\u6210\u53cd\u5411\u94fe\u8868\uff0c\u4fbf\u4e8e\u56de\u6eda\u3002</li> <li>TNO (Transaction Number): \u4e8b\u52a1\u6807\u8bc6\u7b26\u3002</li> <li>TYPE: \u65e5\u5fd7\u8bb0\u5f55\u7c7b\u578b\u3002\u8fd9\u91cc <code>U</code> \u4ee3\u8868 Update\uff08\u66f4\u65b0\uff09\u65e5\u5fd7\u3002\u5176\u4ed6\u7c7b\u578b\u53ef\u80fd\u5305\u62ec Commit, Abort, CLR (\u8865\u507f\u65e5\u5fd7\u8bb0\u5f55), Checkpoint \u7b49\u3002</li> <li>PID (Page ID): \u88ab\u4fee\u6539\u7684\u6570\u636e\u9875\u7684\u6807\u8bc6\u7b26\u3002</li> <li>len, offset: \u4fee\u6539\u6570\u636e\u7684\u957f\u5ea6\u548c\u5728\u9875\u9762\u5185\u7684\u504f\u79fb\u91cf\u3002</li> <li>before, after: \u4fee\u6539\u524d\u7684\u6570\u636e\u5f71\u50cf\u548c\u4fee\u6539\u540e\u7684\u6570\u636e\u5f71\u50cf\u3002</li> <li>\u7279\u6b8a\u65e5\u5fd7\u8bb0\u5f55:<ul> <li>LSN 23: <code>BEGIN_CKP</code> - \u6807\u5fd7\u7740\u4e00\u4e2a\u68c0\u67e5\u70b9\u8fc7\u7a0b\u7684\u5f00\u59cb\u3002</li> <li>LSN 24: <code>END_CKP{P1:20,P2:21,P3:19}{T1:22,T2:20,T3:21}</code> - \u6807\u5fd7\u68c0\u67e5\u70b9\u7ed3\u675f\u3002\u5927\u62ec\u53f7\u5185\u662f\u68c0\u67e5\u70b9\u5f00\u59cb\u65f6\uff08\u5373LSN 23\u65f6\uff09\u7684\u4e24\u4e2a\u5173\u952e\u4fe1\u606f\u5feb\u7167\uff1a<ul> <li>\u7b2c\u4e00\u4e2a\u5927\u62ec\u53f7 <code>{P1:20,P2:21,P3:19}</code> \u662f\u5f53\u65f6\u7684\u810f\u9875\u8868 (Dirty Page Table - DPT)\uff0c\u8bb0\u5f55\u4e86\u810f\u9875ID\u53ca\u5176\u5bf9\u5e94\u7684 RecLSN (Recovery LSN\uff0c\u5373\u8be5\u9875\u9996\u6b21\u53d8\u810f\u65f6\u7684LSN)\u3002</li> <li>\u7b2c\u4e8c\u4e2a\u5927\u62ec\u53f7 <code>{T1:22,T2:20,T3:21}</code> \u662f\u5f53\u65f6\u7684\u6d3b\u52a8\u4e8b\u52a1\u8868 (Active Transaction Table - ATT)\uff0c\u8bb0\u5f55\u4e86\u6d3b\u52a8\u4e8b\u52a1ID\u53ca\u5176\u5bf9\u5e94\u7684 LastLSN (\u8be5\u4e8b\u52a1\u5199\u5165\u7684\u6700\u540e\u4e00\u6761\u65e5\u5fd7\u7684LSN)\u3002</li> </ul> </li> </ul> </li> </ul> <ol> <li>\u810f\u9875\u8868 (Dirty Page Table - DPT):</li> </ol> <ul> <li>\u4f4d\u4e8e\u56fe\u7684\u5de6\u4e0a\u65b9\u3002\u5b83\u662f\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u7684\uff0c\u8bb0\u5f55\u4e86\u5f53\u524d\u5728\u7f13\u51b2\u6c60 (Buffer Pool) \u4e2d\uff0c\u5e76\u4e14\u5df2\u7ecf\u88ab\u4fee\u6539\u8fc7\uff08\u4f46\u53ef\u80fd\u5c1a\u672a\u5199\u56de\u78c1\u76d8\uff09\u7684\u9875\u9762\u3002</li> <li>PageID: \u810f\u9875\u7684\u6807\u8bc6\u7b26\u3002</li> <li>PageLSN: \u8be5\u9875\u5728\u5185\u5b58\u7f13\u51b2\u6c60\u4e2d\u7684\u5f53\u524d\u7248\u672c\u5bf9\u5e94\u7684\u6700\u540e\u4e00\u6b21\u4fee\u6539\u7684LSN\u3002</li> <li>RecLSN: \u8be5\u9875\u9996\u6b21\u6210\u4e3a\u810f\u9875\uff08\u5373\u4ece\u78c1\u76d8\u8bfb\u5165\u540e\u7b2c\u4e00\u6b21\u88ab\u4fee\u6539\uff0c\u6216\u8005\u4e0a\u4e00\u6b21\u68c0\u67e5\u70b9\u540e\u7b2c\u4e00\u6b21\u88ab\u4fee\u6539\uff09\u65f6\uff0c\u5bf9\u5e94\u7684\u7b2c\u4e00\u6761\u4fee\u6539\u5b83\u7684\u65e5\u5fd7\u8bb0\u5f55\u7684LSN\u3002\u8fd9\u4e2a\u503c\u5f88\u91cd\u8981\uff0c\u7528\u4e8e\u786e\u5b9aRedo\u9636\u6bb5\u7684\u8d77\u59cb\u70b9\u3002</li> <li>\u793a\u4f8b\uff1aP1\u5728\u7f13\u51b2\u6c60\u4e2d\u7684PageLSN\u662f22\uff0c\u5b83\u9996\u6b21\u53d8\u810f\uff08\u6216\u4e0a\u6b21\u68c0\u67e5\u70b9\u540e\u9996\u6b21\u53d8\u810f\uff09\u7684RecLSN\u662f20\u3002</li> </ul> <ol> <li>\u6d3b\u52a8\u4e8b\u52a1\u8868 (Active TXN Table - ATT):</li> </ol> <ul> <li>\u4f4d\u4e8eDPT\u4e0b\u65b9\u3002\u5b83\u4e5f\u662f\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u7684\uff0c\u8bb0\u5f55\u4e86\u5f53\u524d\u6240\u6709\u6d3b\u52a8\uff08\u5373\u5df2\u5f00\u59cb\u4f46\u5c1a\u672a\u63d0\u4ea4\u6216\u4e2d\u6b62\uff09\u7684\u4e8b\u52a1\u3002</li> <li>Tno: \u6d3b\u52a8\u4e8b\u52a1\u7684\u6807\u8bc6\u7b26\u3002</li> <li>LastLSN: \u8be5\u4e8b\u52a1\u5199\u5165\u7684\u6700\u540e\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u7684LSN\u3002</li> <li>\u793a\u4f8b\uff1a\u4e8b\u52a1T1\u662f\u6d3b\u52a8\u7684\uff0c\u5b83\u5199\u5165\u7684\u6700\u540e\u4e00\u6761\u65e5\u5fd7\u662fLSN 22\u3002</li> </ul> <ol> <li>\u7f13\u51b2\u6c60 (Buffer Pool) \u4e2d\u7684\u9875\u53ca\u5176 PageLSN:</li> </ol> <ul> <li>\u4f4d\u4e8e\u56fe\u7684\u53f3\u4e0a\u65b9\u3002\u8fd9\u662f\u5185\u5b58\u4e2d\u7684\u4e00\u5757\u533a\u57df\uff0c\u7528\u4e8e\u7f13\u5b58\u4ece\u78c1\u76d8\u8bfb\u5165\u7684\u6570\u636e\u9875\u3002</li> <li>\u56fe\u4e2d\u663e\u793a\u4e86P1, P2, P3\u4e09\u4e2a\u9875\u5728\u7f13\u51b2\u6c60\u4e2d\uff0c\u5e76\u4e14\u5b83\u4eec\u5934\u90e8\u7684PageLSN\u5b57\u6bb5\u5206\u522b\u88ab\u66f4\u65b0\u4e3a22, 21, 19\u3002\u8fd9\u4e9b\u503c\u4e0eDPT\u4e2d\u5bf9\u5e94\u9875\u7684PageLSN\u4e00\u81f4\u3002</li> </ul> <ol> <li>\u78c1\u76d8\u4e0a\u7684\u9875LSN (Page LSNs on disk):</li> </ol> <ul> <li>\u4f4d\u4e8e\u56fe\u7684\u5de6\u4e0b\u65b9\u3002\u8fd9\u8868\u793a\u5f53\u524d\u6301\u4e45\u5316\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684\u6570\u636e\u9875\u5934\u90e8\u8bb0\u5f55\u7684PageLSN\u503c\u3002</li> <li>\u793a\u4f8b\uff1a\u78c1\u76d8\u4e0aP1\u9875\u7684PageLSN\u662f17\uff0c\u800c\u5185\u5b58\u7f13\u51b2\u6c60\u4e2dP1\u7684PageLSN\u662f22\u3002\u8fd9\u8bf4\u660e\u5185\u5b58\u4e2d\u7684P1\u6bd4\u78c1\u76d8\u4e0a\u7684P1\u8981\u65b0\uff0cP1\u662f\u810f\u9875\u3002</li> </ul> <p>\u6574\u4e2a\u6d41\u7a0b\u548c\u72b6\u6001\u7684\u89e3\u8bfb (\u5047\u8bbe\u5f53\u524d\u65f6\u95f4\u70b9\u5728LSN 24\u4e4b\u540e\uff0c\u68c0\u67e5\u70b9\u5df2\u5b8c\u6210):</p> <ol> <li>\u4e8b\u52a1\u6267\u884c\u4e0e\u65e5\u5fd7\u8bb0\u5f55 (LSN 15 - 22):</li> </ol> <ul> <li>\u4e8b\u52a1T1, T2, T3\u76f8\u7ee7\u6267\u884c\uff0c\u5bf9\u6570\u636e\u9875P1, P2, P3\u8fdb\u884c\u4e86\u4fee\u6539\u3002</li> <li>\u6bcf\u6b21\u4fee\u6539\u90fd\u4f1a\u5148\u8bb0\u5f55\u4e00\u6761\u8be6\u7ec6\u7684Update\u65e5\u5fd7\uff08\u5305\u542b\u4fee\u6539\u524d\u540e\u7684\u503c\uff09\uff0c\u7136\u540e\u4fee\u6539\u5185\u5b58\u7f13\u51b2\u6c60\u4e2d\u7684\u6570\u636e\u9875\uff0c\u5e76\u66f4\u65b0\u8be5\u6570\u636e\u9875\u5934\u90e8\u7684PageLSN\u4e3a\u5f53\u524d\u65e5\u5fd7\u7684LSN\u3002</li> <li>\u540c\u65f6\uff0c\u5982\u679c\u4e00\u4e2a\u9875\u56e0\u4e3a\u4fee\u6539\u800c\u53d8\u810f\uff0c\u5b83\u4f1a\u88ab\u52a0\u5165\u5230DPT\u4e2d\uff0c\u5e76\u8bb0\u5f55\u5176PageLSN\u548cRecLSN\u3002\u6d3b\u52a8\u4e8b\u52a1\u7684\u4fe1\u606f\u4f1a\u66f4\u65b0\u5230ATT\u4e2d\u3002</li> <li>\u4f8b\u5982\uff0cLSN 22\u8bb0\u5f55\u4e86T1\u5bf9P1\u7684\u4fee\u6539\uff0c\u5c06P1\u7684PageLSN\u66f4\u65b0\u4e3a22\u3002\u6b64\u65f6ATT\u4e2dT1\u7684LastLSN\u4e5f\u66f4\u65b0\u4e3a22\u3002DPT\u4e2dP1\u7684PageLSN\u66f4\u65b0\u4e3a22 (RecLSN\u4fdd\u6301\u4e3a20\uff0c\u56e0\u4e3aP1\u5728LSN 20\u65f6\u5df2\u7ecf\u53d8\u810f)\u3002</li> </ul> <ol> <li>\u68c0\u67e5\u70b9\u8fc7\u7a0b (LSN 23 - 24):</li> </ol> <ul> <li>\u5f53\u7cfb\u7edf\u51b3\u5b9a\u6267\u884c\u68c0\u67e5\u70b9\u65f6\uff0c\u9996\u5148\u8bb0\u5f55\u4e00\u6761 <code>BEGIN_CKP</code> \u65e5\u5fd7 (LSN 23)\u3002</li> <li>\u7136\u540e\uff0c\u5c06\u6b64\u523b\u5185\u5b58\u4e2d\u7684ATT\u548cDPT\u7684\u5185\u5bb9\u8bb0\u5f55\u5230\u4e00\u6761 <code>END_CKP</code> \u65e5\u5fd7\u4e2d (LSN 24)\uff0c\u5e76\u5c06\u8fd9\u6761\u65e5\u5fd7\u5f3a\u5236\u5237\u5165\u78c1\u76d8\u3002</li> <li>\u91cd\u8981\u7684\u662f\uff0cARIES\u7684\u6a21\u7cca\u68c0\u67e5\u70b9\u4e0d\u8981\u6c42\u5728\u6b64\u65f6\u5c06DPT\u4e2d\u7684\u810f\u9875\u5237\u56de\u78c1\u76d8\u3002 \u810f\u9875\u7684\u5237\u76d8\u662f\u540e\u53f0\u5f02\u6b65\u8fdb\u884c\u7684\u3002</li> <li><code>END_CKP</code> \u65e5\u5fd7\u4e2d\u8bb0\u5f55\u7684DPT\u662f <code>{P1:20, P2:21, P3:19}</code>\uff0c\u8fd9\u91cc\u768420, 21, 19\u662f\u76f8\u5e94\u9875\u9762\u7684RecLSN\u3002\u8bb0\u5f55\u7684ATT\u662f <code>{T1:22, T2:20, T3:21}</code>\uff0c\u8fd9\u91cc\u768422, 20, 21\u662f\u76f8\u5e94\u4e8b\u52a1\u7684LastLSN\u3002</li> </ul> <p>\u5982\u679c\u6b64\u65f6\u7cfb\u7edf\u53d1\u751f\u5d29\u6e83\u5e76\u9700\u8981\u6062\u590d\uff1a</p> <p>ARIES\u6062\u590d\u8fc7\u7a0b\u4f1a\u7ecf\u5386\u4e09\u4e2a\u9636\u6bb5\uff1a</p> <ol> <li>\u5206\u6790\u9636\u6bb5 (Analysis Pass):</li> </ol> <ul> <li>\u9996\u5148\u627e\u5230\u78c1\u76d8\u4e0a\u6700\u540e\u4e00\u4e2a\u5b8c\u6574\u7684 <code>END_CKP</code> \u65e5\u5fd7\u8bb0\u5f55\uff08\u672c\u4f8b\u4e2d\u4e3aLSN 24\uff09\u3002</li> <li>\u4f7f\u7528\u8be5\u8bb0\u5f55\u4e2d\u7684ATT\u548cDPT\u4fe1\u606f\u6765\u521d\u59cb\u5316\u5185\u5b58\u4e2d\u7684ATT (\u4f5c\u4e3a\u521d\u59cb\u7684<code>undo_list</code>) \u548cDPT\u3002\u6240\u4ee5\uff0c\u521d\u59cb <code>undo_list</code> = {T1, T2, T3}\uff0c\u521d\u59cbDPT\u5305\u542bP1(RecLSN 20), P2(RecLSN 21), P3(RecLSN 19)\u3002</li> <li>\u7136\u540e\u4ece\u8be5\u68c0\u67e5\u70b9\u8bb0\u5f55\u7684BEGIN_CKP (LSN 23) \u5f00\u59cb\u5411\u524d\u626b\u63cf\u65e5\u5fd7\u5230\u672b\u5c3e\uff08\u5047\u8bbe\u5d29\u6e83\u70b9\u5728LSN 24\u4e4b\u540e\uff0c\u4e14\u6ca1\u6709\u66f4\u591a\u65e5\u5fd7\uff09\u3002<ul> <li>\u5982\u679c\u626b\u63cf\u8fc7\u7a0b\u4e2d\u9047\u5230\u65b0\u7684\u4e8b\u52a1\u5f00\u59cb\uff0c\u5219\u52a0\u5165ATT\u3002</li> <li>\u5982\u679c\u9047\u5230\u4e8b\u52a1\u63d0\u4ea4/\u4e2d\u6b62\uff0c\u5219\u4eceATT\u79fb\u9664\u3002</li> <li>\u5982\u679c\u9047\u5230\u9875\u9762\u4fee\u6539\uff0c\u5e76\u4e14\u8be5\u9875\u4e0d\u5728DPT\u4e2d\uff0c\u5219\u5c06\u5176\u52a0\u5165DPT\uff0cRecLSN\u8bbe\u4e3a\u6b64\u65e5\u5fd7\u7684LSN\u3002\u5982\u679c\u5df2\u5728DPT\u4e2d\uff0c\u5219\u4e0d\u6539\u53d8\u5176RecLSN\u3002</li> </ul> </li> <li>\u5206\u6790\u9636\u6bb5\u7ed3\u675f\u65f6\uff0c\u786e\u5b9a\u4e86\u6700\u7ec8\u7684 <code>undo_list</code> (\u54ea\u4e9b\u4e8b\u52a1\u9700\u8981\u56de\u6eda) \u548cDPT (\u54ea\u4e9b\u9875\u5728\u5d29\u6e83\u65f6\u662f\u810f\u7684)\uff0c\u4ee5\u53caRedoLSN\u3002RedoLSN\u662f\u6240\u6709DPT\u4e2dRecLSN\u7684\u6700\u5c0f\u503c\uff08\u5728\u672c\u4f8b\u4e2d\u662f min(20, 21, 19) = 19\uff09\u3002\u8fd9\u610f\u5473\u7740\u91cd\u505a\u9636\u6bb5\u81f3\u5c11\u8981\u4eceLSN 19\u5f00\u59cb\u3002</li> </ul> <ol> <li>\u91cd\u505a\u9636\u6bb5 (Redo Pass):</li> </ol> <ul> <li>\u4ece\u5206\u6790\u9636\u6bb5\u786e\u5b9a\u7684RedoLSN (\u8fd9\u91cc\u662f19) \u5f00\u59cb\u5411\u524d\u626b\u63cf\u65e5\u5fd7\u5230\u672b\u5c3e\u3002</li> <li> <p>\u5bf9\u4e8e\u6bcf\u4e00\u6761\u7269\u7406\u4fee\u6539\u65e5\u5fd7\u8bb0\u5f55\uff08\u5982Update\u65e5\u5fd7\uff09\uff1a</p> <ul> <li>\u83b7\u53d6\u65e5\u5fd7\u4e2d\u7684PID\u548cLSN\u3002</li> <li>\u68c0\u67e5\u8be5PID\u5bf9\u5e94\u7684\u9875\u9762\u662f\u5426\u5728DPT\u4e2d\uff0c\u4ee5\u53ca\u8be5\u9875\u7684RecLSN\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u65e5\u5fd7\u7684LSN\u3002</li> <li>\u5e76\u4e14\uff0c\u8bfb\u53d6\u8be5\u9875\u5728\u78c1\u76d8\u4e0a\uff08\u6216\u5df2\u5728\u5185\u5b58\u4e2d\uff09\u7684PageLSN\u3002</li> <li>\u6761\u4ef6\u5224\u65ad\uff1a\u53ea\u6709\u5f53\u65e5\u5fd7\u8bb0\u5f55\u7684LSN &gt; \u9875\u9762\u5f53\u524d\u7684PageLSN\u65f6\uff0c\u624d\u9700\u8981\u91cd\u505a\u6b64\u65e5\u5fd7\u8bb0\u5f55\u63cf\u8ff0\u7684\u4fee\u6539\u3002\uff08\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u4fee\u6539\u5c1a\u672a\u53cd\u6620\u5728\u8be5\u9875\u9762\u4e0a\uff09\u3002</li> <li>\u6267\u884c\u91cd\u505a\uff1a\u5e94\u7528\u65e5\u5fd7\u8bb0\u5f55\u4e2d\u7684<code>after</code>\u503c\u5230\u9875\u9762\uff0c\u5e76\u66f4\u65b0\u5185\u5b58\u4e2d\u8be5\u9875\u7684PageLSN\u4e3a\u5f53\u524d\u65e5\u5fd7\u8bb0\u5f55\u7684LSN\u3002</li> </ul> </li> <li> <p>\u4f8b\u5982\uff0c\u5904\u7406LSN 19 (T3, U, P3...): \u78c1\u76d8P3.PageLSN=16\u3002\u56e0\u4e3a19 &gt; 16\uff0c\u6240\u4ee5\u91cd\u505a\u5bf9P3\u7684\u4fee\u6539\uff0cP3\u5185\u5b58PageLSN\u66f4\u65b0\u4e3a19\u3002</p> </li> <li>\u5904\u7406LSN 20 (T2, U, P1...): \u78c1\u76d8P1.PageLSN=17\u3002\u56e0\u4e3a20 &gt; 17\uff0c\u6240\u4ee5\u91cd\u505a\u5bf9P1\u7684\u4fee\u6539\uff0cP1\u5185\u5b58PageLSN\u66f4\u65b0\u4e3a20\u3002</li> <li>\u5904\u7406LSN 21 (T3, U, P2...): \u78c1\u76d8P2.PageLSN=18\u3002\u56e0\u4e3a21 &gt; 18\uff0c\u6240\u4ee5\u91cd\u505a\u5bf9P2\u7684\u4fee\u6539\uff0cP2\u5185\u5b58PageLSN\u66f4\u65b0\u4e3a21\u3002</li> <li>\u5904\u7406LSN 22 (T1, U, P1...): \u6b64\u65f6P1\u5185\u5b58PageLSN\u4e3a20\u3002\u56e0\u4e3a22 &gt; 20\uff0c\u6240\u4ee5\u91cd\u505a\u5bf9P1\u7684\u4fee\u6539\uff0cP1\u5185\u5b58PageLSN\u66f4\u65b0\u4e3a22\u3002</li> <li>Redo\u9636\u6bb5\u5b8c\u6210\u540e\uff0c\u6240\u6709\u5728\u5d29\u6e83\u524d\u5df2\u5199\u5165\u65e5\u5fd7\u7684\u4fee\u6539\u90fd\u5df2\u53cd\u6620\u5230\u5185\u5b58\u7f13\u51b2\u6c60\u4e2d\uff0c\u6570\u636e\u5e93\u72b6\u6001\u4e0e\u5d29\u6e83\u77ac\u95f4\u4e00\u81f4\u3002</li> </ul> <ol> <li>\u64a4\u9500\u9636\u6bb5 (Undo Pass):</li> </ol> <ul> <li>\u5bf9\u5206\u6790\u9636\u6bb5\u786e\u5b9a\u7684 <code>undo_list</code> \u4e2d\u7684\u6240\u6709\u4e8b\u52a1\uff08T1, T2, T3\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6ca1\u6709commit/abort\u8bb0\u5f55\uff09\u8fdb\u884c\u56de\u6eda\u3002</li> <li>\u4ece\u6bcf\u4e2a\u9700\u8981\u64a4\u9500\u7684\u4e8b\u52a1\u7684LastLSN\u5f00\u59cb\uff08\u4f8b\u5982T1\u4eceLSN 22\uff0cT2\u4eceLSN 20\uff0cT3\u4eceLSN 21\uff09\uff0c\u5229\u7528\u65e5\u5fd7\u4e2d\u7684PrevLSN\u94fe\u53cd\u5411\u626b\u63cf\u8be5\u4e8b\u52a1\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002</li> <li>\u5bf9\u4e8e\u9047\u5230\u7684\u6bcf\u4e2aUpdate\u65e5\u5fd7\u8bb0\u5f55\uff0c\u6267\u884c\u5176\u7269\u7406\u64a4\u9500\uff08\u5e94\u7528<code>before</code>\u503c\uff09\uff0c\u5e76\u4e3a\u8be5\u64a4\u9500\u64cd\u4f5c\u5199\u5165\u4e00\u6761\u8865\u507f\u65e5\u5fd7\u8bb0\u5f55 (CLR)\u3002CLR\u672c\u8eab\u662f\u53ea\u91cd\u505a\u7684\uff0c\u5e76\u5305\u542b\u4e00\u4e2a<code>UndoNextLSN</code>\u6307\u5411\u4e0b\u4e00\u4e2a\u9700\u8981\u64a4\u9500\u7684\u65e5\u5fd7\uff08\u5373\u5f53\u524d\u8bb0\u5f55\u7684PrevLSN\uff09\u3002</li> <li>\u5982\u679c\u9047\u5230\u7684\u662f\u903b\u8f91\u64cd\u4f5c\u7684<code>operation-end</code>\u8bb0\u5f55\uff0c\u5219\u6267\u884c\u903b\u8f91\u64a4\u9500\u3002</li> <li>\u5f53\u4e00\u4e2a\u4e8b\u52a1\u7684\u6240\u6709\u4fee\u6539\u90fd\u88ab\u64a4\u9500\uff08\u5373\u53cd\u5411\u626b\u63cf\u5230\u5176<code>start</code>\u8bb0\u5f55\uff09\uff0c\u5219\u4e3a\u8be5\u4e8b\u52a1\u5199\u5165\u4e00\u6761<code>abort</code>\u65e5\u5fd7\u8bb0\u5f55\u3002</li> <li> <p>\u4f8b\u5982\uff0c\u5bf9T1\u56de\u6eda\uff1a</p> <ul> <li>\u627e\u5230LSN 22\uff0c\u64a4\u9500\u5bf9P1\u7684\u4fee\u6539\uff0c\u5199CLR\u3002</li> <li>\u901a\u8fc7PrevLSN 18\u627e\u5230LSN 18\uff0c\u64a4\u9500\u5bf9P2\u7684\u4fee\u6539\uff0c\u5199CLR\u3002</li> <li>\u901a\u8fc7PrevLSN 15\u627e\u5230LSN 15\uff0c\u64a4\u9500\u5bf9P1\u7684\u4fee\u6539\uff0c\u5199CLR\u3002</li> <li>T1\u56de\u6eda\u5b8c\u6210\uff0c\u5199 <code>&lt;T1 abort&gt;</code> \u65e5\u5fd7\u3002</li> <li>\u5bf9T2\u548cT3\u4e5f\u6267\u884c\u7c7b\u4f3c\u64cd\u4f5c\u3002</li> </ul> </li> </ul> <p></p>"},{"location":"Computer_Science/DB/Chapter19/#aries-recovery-analysis","title":"ARIES Recovery: Analysis","text":""},{"location":"Computer_Science/DB/Chapter19/#aries-redo-pass","title":"ARIES Redo Pass","text":"<p>Redo Pass:</p> <p>Repeats history by replaying every action not already reflected in the page on disk, as follows:</p> <p>Scans forward from RedoLSN.  Whenever an update log record is found:</p> <ol> <li>If the page is not in DirtyPageTable or the LSN of the log record is less than the RecLSN of the page in DirtyPageTable, then skip the log record</li> <li>Otherwise fetch the page from disk.  If the PageLSN of the page fetched from disk is less than the LSN of the log record, redo the log record</li> </ol> <p>NOTE: if either test is negative the effects of the log record have already appeared on the page.  First test avoids even fetching the page from disk!</p>"},{"location":"Computer_Science/DB/Chapter19/#aries-undo-actions","title":"ARIES Undo Actions","text":""},{"location":"Computer_Science/DB/Chapter19/#aries-undo-pass","title":"ARIES Undo Pass","text":"<p>Undo pass:</p> <p>Performs backward scan on log undoing all transaction in undo-list</p> <p>Backward scan optimized by skipping unneeded log records as follows:</p> <ul> <li>Next LSN to be undone for each transaction set to LSN of last log record for transaction found by analysis pass.</li> <li>At each step pick largest of these LSNs to undo, skip back to it and undo it </li> <li>After undoing a log record</li> </ul> <p>For ordinary log records, set next LSN to be undone for transaction to PrevLSN noted in the log record</p> <p>For compensation log records (CLRs) set next LSN to be undo to UndoNextLSN noted in the log record</p> <p>All intervening records are skipped since they would have been undone already</p> <p>Undos performed as described earlier</p>"},{"location":"Computer_Science/DB/Chapter19/#recovery-actions-in-aries","title":"Recovery Actions in ARIES","text":"<p>\u8fd9\u5f20\u56fe\u975e\u5e38\u6e05\u6670\u5730\u5c55\u793a\u4e86 ARIES \u6062\u590d\u7b97\u6cd5\u5728\u53d1\u751f\u5d29\u6e83\u540e\u7684\u4e09\u4e2a\u6838\u5fc3\u9636\u6bb5\uff1a\u5206\u6790 (Analysis)\u3001\u91cd\u505a (Redo) \u548c\u64a4\u9500 (Undo)\u3002\u65e5\u5fd7\u8bb0\u5f55\u4ece\u4e0b\u5f80\u4e0a\u8868\u793a\u65f6\u95f4\u4e0a\u4ece\u65e7\u5230\u65b0\u3002</p> <p>\u6211\u4eec\u6765\u9010\u6b65\u89e3\u91ca\u6574\u4e2a\u6d41\u7a0b\uff1a</p> <p>1. \u5d29\u6e83\u524d\u7684\u65e5\u5fd7\u8bb0\u5f55 (Log Records Before Crash - \u4ece\u4e0b\u5f80\u4e0a\u770b)</p> <ul> <li>LSN 7562: \u4e8b\u52a1 \\(T_{143}\\) \u4fee\u6539\u4e86\u9875\u9762 7200 \u7684\u504f\u79fb\u91cf\u4e3a 2 \u7684\u4f4d\u7f6e\uff0c\u5c06\u503c\u4ece 60 \u6539\u4e3a 80\u3002</li> <li>LSN 7563: \u4e8b\u52a1 \\(T_{145}\\) \u5f00\u59cb\u3002</li> <li>LSN 7564: \\(T_{145}\\) \u4fee\u6539\u4e86\u9875\u9762 4894 \u7684\u504f\u79fb\u91cf\u4e3a 1 \u7684\u4f4d\u7f6e\uff0c\u5c06\u503c\u4ece 20 \u6539\u4e3a 40\u3002\u5b83\u7684 <code>PrevLSN</code> \u6307\u5411 LSN 7563\u3002</li> <li>LSN 7565: \\(T_{143}\\) \u4fee\u6539\u4e86\u9875\u9762 7200 \u7684\u504f\u79fb\u91cf\u4e3a 2 \u7684\u4f4d\u7f6e\uff0c\u5199\u5165\u4e86\u65b0\u503c 60 (\u5047\u8bbe\u4e4b\u524d\u7684\u503c\u662f80\uff0c\u8fd9\u91cc\u6539\u56de60\uff0c\u6216\u8005\u662f\u6307\u9875\u9762\u7684\u53e6\u4e00\u4e2a\u8bb0\u5f55)\u3002</li> <li>LSN 7566: \u4e8b\u52a1 \\(T_{143}\\) \u63d0\u4ea4\u3002</li> <li>LSN 7567: \\(T_{145}\\) \u4fee\u6539\u4e86\u9875\u9762 4894 \u7684\u504f\u79fb\u91cf\u4e3a 1 \u7684\u4f4d\u7f6e\uff0c\u5c06\u503c\u4ece 40 \u6539\u4e3a 60\u3002\u5b83\u7684 <code>PrevLSN</code> \u6307\u5411 LSN 7564\u3002</li> <li> <p>LSN 7568: \u68c0\u67e5\u70b9 (checkpoint) \u88ab\u6267\u884c\u3002</p> <ul> <li>\u6d3b\u52a8\u4e8b\u52a1\u8868 (Txn table / ATT): \u6b64\u65f6\u53ea\u6709\u4e8b\u52a1 \\(T_{145}\\) \u662f\u6d3b\u52a8\u7684\uff0c\u5176\u6700\u540e\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN (lastLSN) \u662f 7567\u3002</li> <li> <p>\u810f\u9875\u8868 (Dirty Page Table / DPT):</p> <ul> <li>\u9875\u9762 4894\uff1a\u5176\u5728\u5185\u5b58\u4e2d\u7684 PageLSN \u662f 7567\uff0c\u5176 RecLSN (\u9996\u6b21\u53d8\u810f\u7684 LSN) \u662f 7564\u3002</li> <li>\u9875\u9762 7200\uff1a\u5176\u5728\u5185\u5b58\u4e2d\u7684 PageLSN \u662f 7565\uff0c\u5176 RecLSN \u662f 7565\u3002</li> </ul> </li> </ul> </li> <li> <p>LSN 7569: \u4e8b\u52a1 \\(T_{146}\\) \u5f00\u59cb\u3002</p> </li> <li>LSN 7570: \\(T_{146}\\) \u4fee\u6539\u4e86\u9875\u9762 2390 \u7684\u504f\u79fb\u91cf\u4e3a 4 \u7684\u4f4d\u7f6e\uff0c\u5c06\u503c\u4ece 50 \u6539\u4e3a 90\u3002\u5b83\u7684 <code>PrevLSN</code> \u6307\u5411 LSN 7569\u3002</li> <li>LSN 7571: \u4e8b\u52a1 \\(T_{146}\\) \u63d0\u4ea4\u3002\u5b83\u7684 <code>PrevLSN</code> \u6307\u5411 LSN 7570\u3002</li> <li>\u7cfb\u7edf\u5d29\u6e83 (End of log at crash): \u53d1\u751f\u5728 LSN 7571 \u8bb0\u5f55\u4e4b\u540e\u3002</li> </ul> <p>2. \u6062\u590d\u8fc7\u7a0b (Recovery Process)</p> <p>\u5f53\u7cfb\u7edf\u91cd\u542f\u540e\uff0cARIES \u6062\u590d\u8fc7\u7a0b\u542f\u52a8\uff1a</p> <p>A. \u5206\u6790\u9636\u6bb5 (Analysis Pass)</p> <ul> <li>\u65b9\u5411\uff1a\u4ece\u6700\u540e\u4e00\u4e2a\u68c0\u67e5\u70b9 (LSN 7568) \u5411\u524d\u626b\u63cf\u65e5\u5fd7\uff0c\u76f4\u5230\u65e5\u5fd7\u7684\u672b\u5c3e (\u5d29\u6e83\u70b9\uff0cLSN 7571)\u3002</li> <li> <p>\u76ee\u7684\uff1a</p> <ol> <li>\u786e\u5b9a\u54ea\u4e9b\u4e8b\u52a1\u5728\u5d29\u6e83\u65f6\u662f\u6d3b\u52a8\u7684\uff08\u9700\u8981\u88ab\u64a4\u9500\uff09\u3002</li> <li>\u786e\u5b9a\u54ea\u4e9b\u6570\u636e\u9875\u5728\u5d29\u6e83\u65f6\u662f\u810f\u7684\uff0c\u5e76\u627e\u51fa\u91cd\u505a\u9636\u6bb5\u9700\u8981\u4ece\u54ea\u4e2a LSN \u5f00\u59cb (RedoLSN)\u3002</li> </ol> </li> <li> <p>\u8fc7\u7a0b\uff1a</p> <ol> <li>\u4ece\u68c0\u67e5\u70b9\u8bb0\u5f55 (LSN 7568) \u52a0\u8f7d\u5f53\u65f6\u7684\u6d3b\u52a8\u4e8b\u52a1\u8868 (ATT) \u548c\u810f\u9875\u8868 (DPT)\u3002<ul> <li>\u521d\u59cb ATT = {\\(T_{145}\\) (lastLSN 7567)}</li> <li>\u521d\u59cb DPT = {PageID 4894 (PageLSN 7567, RecLSN 7564), PageID 7200 (PageLSN 7565, RecLSN 7565)}</li> </ul> </li> <li>\u7ee7\u7eed\u5411\u524d\u626b\u63cf\u65e5\u5fd7\uff1a<ul> <li>LSN 7569 (<code>&lt;$T_{146}$ begin&gt;</code>): \u5c06 \\(T_{146}\\) \u52a0\u5165 ATT\u3002ATT = {\\(T_{145}\\), \\(T_{146}\\)}.</li> <li>LSN 7570 (<code>&lt;$T_{146}$, 2390.4, 50, 90&gt;</code>): \u9875\u9762 2390 \u88ab\u4fee\u6539\u3002\u5982\u679c 2390 \u4e0d\u5728 DPT \u4e2d\uff0c\u5219\u52a0\u5165\uff0c\u5176 RecLSN \u4e3a 7570\u3002\\(T_{146}\\) \u7684 lastLSN \u66f4\u65b0\u4e3a 7570\u3002</li> <li>LSN 7571 (<code>&lt;$T_{146}$ commit&gt;</code>): \u5c06 \\(T_{146}\\) \u4ece ATT \u4e2d\u79fb\u9664\u3002ATT = {\\(T_{145}\\)}.</li> </ul> </li> </ol> </li> <li> <p>\u5206\u6790\u9636\u6bb5\u7ed3\u675f\u65f6\uff1a</p> <ul> <li>\u6700\u7ec8\u7684\u6d3b\u52a8\u4e8b\u52a1\u5217\u8868\uff08\u5373\u64a4\u9500\u5217\u8868 undo_list\uff09\u4e3a {\\(T_{145}\\)}\u3002</li> <li>\u6700\u7ec8\u7684\u810f\u9875\u8868 DPT \u4e3a {Page4894(RecLSN 7564), Page7200(RecLSN 7565), Page2390(RecLSN 7570)}\u3002</li> <li>RedoLSN (\u91cd\u505a\u8d77\u59cb\u70b9) \u662f DPT \u4e2d\u6240\u6709 RecLSN \u7684\u6700\u5c0f\u503c\uff0c\u5373 min(7564, 7565, 7570) = 7564\u3002</li> </ul> </li> </ul> <p>B. \u91cd\u505a\u9636\u6bb5 (Redo Pass)</p> <ul> <li>\u65b9\u5411\uff1a\u4ece\u5206\u6790\u9636\u6bb5\u786e\u5b9a\u7684 RedoLSN (7564) \u5f00\u59cb\u5411\u524d\u626b\u63cf\u65e5\u5fd7\uff0c\u76f4\u5230\u65e5\u5fd7\u7684\u672b\u5c3e (\u5d29\u6e83\u70b9 LSN 7571)\u3002</li> <li>\u76ee\u7684\uff1a\u786e\u4fdd\u6240\u6709\u5df2\u5199\u5165\u65e5\u5fd7\u4f46\u53ef\u80fd\u672a\u5199\u5165\u78c1\u76d8\u6570\u636e\u6587\u4ef6\u7684\u4fee\u6539\u90fd\u88ab\u5e94\u7528\uff0c\u5c06\u6570\u636e\u5e93\u6062\u590d\u5230\u5d29\u6e83\u53d1\u751f\u77ac\u95f4\u7684\u72b6\u6001\u3002</li> <li> <p>\u8fc7\u7a0b\uff1a\u5bf9\u4e8e\u8303\u56f4\u5185\u7684\u6bcf\u4e00\u6761\u7269\u7406\u66f4\u65b0\u65e5\u5fd7\u8bb0\u5f55\uff1a</p> <ol> <li>\u83b7\u53d6\u8be5\u65e5\u5fd7\u8bb0\u5f55\u5bf9\u5e94\u7684 PageID\u3002</li> <li>\u68c0\u67e5\u8be5 PageID \u662f\u5426\u5728\u5206\u6790\u9636\u6bb5\u786e\u5b9a\u7684 DPT \u4e2d\u3002</li> <li>\u5982\u679c\u8be5 PageID \u5728 DPT \u4e2d\uff0c\u5e76\u4e14\u8be5\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN \u2265 \u8be5\u9875\u5728 DPT \u4e2d\u7684 RecLSN\u3002</li> <li>\u5e76\u4e14\uff0c\u8bfb\u53d6\u8be5\u9875\u5f53\u524d\u5728\u78c1\u76d8\u4e0a\uff08\u6216\u5df2\u5728\u5185\u5b58\u4e2d\u88ab\u5148\u524d\u91cd\u505a\u64cd\u4f5c\u4fee\u6539\u8fc7\uff09\u7684 PageLSN\u3002</li> <li>\u53ea\u6709\u5f53\u8be5\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN &gt; \u8be5\u9875\u5f53\u524d\u7684 PageLSN \u65f6\uff0c\u624d\u6267\u884c\u91cd\u505a\u64cd\u4f5c\uff08\u5373\u5c06\u65e5\u5fd7\u4e2d\u7684\u201c\u65b0\u503c\u201d\u5199\u5165\u9875\u9762\uff09\uff0c\u5e76\u66f4\u65b0\u8be5\u9875\u7684 PageLSN \u4e3a\u5f53\u524d\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN\u3002\u8fd9\u907f\u514d\u4e86\u5bf9\u5df2\u5e94\u7528\u66f4\u65b0\u7684\u91cd\u590d\u91cd\u505a\u3002</li> </ol> </li> <li> <p>\u5177\u4f53\u64cd\u4f5c\uff1a</p> <ul> <li>LSN 7564 (\\(T_{145}\\) \u66f4\u65b0 Page 4894): \u5047\u8bbe\u78c1\u76d8\u4e0a Page 4894 \u7684 PageLSN &lt; 7564\uff0c\u91cd\u505a\u6b64\u66f4\u65b0\uff0c\u5c06\u5185\u5b58\u4e2d Page 4894 \u7684 PageLSN \u66f4\u65b0\u4e3a 7564\u3002</li> <li>LSN 7565 (\\(T_{143}\\) \u66f4\u65b0 Page 7200): \u5047\u8bbe\u78c1\u76d8\u4e0a Page 7200 \u7684 PageLSN &lt; 7565\uff0c\u91cd\u505a\u6b64\u66f4\u65b0\uff0c\u5c06\u5185\u5b58\u4e2d Page 7200 \u7684 PageLSN \u66f4\u65b0\u4e3a 7565\u3002</li> <li>LSN 7566 (\\(T_{143}\\) commit): \u65e0\u6570\u636e\u64cd\u4f5c\u3002</li> <li>LSN 7567 (\\(T_{145}\\) \u66f4\u65b0 Page 4894): \u6b64\u65f6\u5185\u5b58\u4e2d Page 4894 \u7684 PageLSN \u4e3a 7564\u3002\u56e0\u4e3a 7567 &gt; 7564\uff0c\u91cd\u505a\u6b64\u66f4\u65b0\uff0c\u5c06\u5185\u5b58\u4e2d Page 4894 \u7684 PageLSN \u66f4\u65b0\u4e3a 7567\u3002</li> <li>LSN 7568 (checkpoint): \u65e0\u6570\u636e\u64cd\u4f5c\u3002</li> <li>LSN 7569 (\\(T_{146}\\) begin): \u65e0\u6570\u636e\u64cd\u4f5c\u3002</li> <li>LSN 7570 (\\(T_{146}\\) \u66f4\u65b0 Page 2390): \u5047\u8bbe\u78c1\u76d8\u4e0a Page 2390 \u7684 PageLSN &lt; 7570\uff0c\u91cd\u505a\u6b64\u66f4\u65b0\uff0c\u5c06\u5185\u5b58\u4e2d Page 2390 \u7684 PageLSN \u66f4\u65b0\u4e3a 7570\u3002</li> <li>LSN 7571 (\\(T_{146}\\) commit): \u65e0\u6570\u636e\u64cd\u4f5c\u3002</li> </ul> </li> <li> <p>\u91cd\u505a\u9636\u6bb5\u5b8c\u6210\u540e\uff1a\u6240\u6709\u5728\u5d29\u6e83\u524d\u5df2\u6210\u529f\u5199\u5165\u65e5\u5fd7\u7684\u4fee\u6539\u90fd\u5df2\u53cd\u6620\u5728\u5185\u5b58\u4e2d\u7684\u6570\u636e\u9875\u4e0a\u3002\u6570\u636e\u5e93\u72b6\u6001\u4e0e\u5d29\u6e83\u77ac\u95f4\u5b8c\u5168\u4e00\u81f4\u3002</p> </li> </ul> <p>C. \u64a4\u9500\u9636\u6bb5 (Undo Pass)</p> <ul> <li>\u65b9\u5411\uff1a\u5bf9\u5728\u5206\u6790\u9636\u6bb5\u786e\u5b9a\u7684 <code>undo_list</code> \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u52a1\uff08\u8fd9\u91cc\u53ea\u6709 \\(T_{145}\\)\uff09\uff0c\u4ece\u5176\u6700\u540e\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN (lastLSN\uff0c\u5bf9\u4e8e \\(T_{145}\\) \u662f 7567) \u5f00\u59cb\uff0c\u6cbf\u7740\u5176 <code>PrevLSN</code> \u6307\u9488\u94fe\u5411\u540e\u626b\u63cf\u65e5\u5fd7\u3002</li> <li>\u76ee\u7684\uff1a\u64a4\u9500\u6240\u6709\u672a\u63d0\u4ea4\u4e8b\u52a1\uff08\u5373 <code>undo_list</code> \u4e2d\u7684\u4e8b\u52a1\uff09\u9020\u6210\u7684\u5f71\u54cd\u3002</li> <li> <p>\u8fc7\u7a0b (\u9488\u5bf9 \\(T_{145}\\))\uff1a</p> <ol> <li> <p>\u4ece LSN 7567 (<code>&lt;$T_{145}$, 4894.1, 40, 60&gt;</code>) \u5f00\u59cb\uff1a</p> <ul> <li>\u6267\u884c\u64a4\u9500\u64cd\u4f5c\uff1a\u5c06\u9875\u9762 4894 \u504f\u79fb\u91cf 1 \u7684\u4f4d\u7f6e\u7684\u503c\u4ece 60 \u6062\u590d\u4e3a 40\u3002</li> <li>\u5199\u5165\u4e00\u6761\u8865\u507f\u65e5\u5fd7\u8bb0\u5f55 (CLR) \u5230\u65e5\u5fd7\u7684\u672b\u5c3e\u3002\u8fd9\u6761 CLR \u63cf\u8ff0\u4e86\u6240\u505a\u7684\u64a4\u9500\u64cd\u4f5c\uff0c\u5e76\u4e14\u5b83\u672c\u8eab\u662f\u201c\u53ea\u91cd\u505a\u201d\u7684\u3002CLR \u4e2d\u4f1a\u5305\u542b\u4e00\u4e2a <code>UndoNextLSN</code> \u5b57\u6bb5\uff0c\u5176\u503c\u662f\u5f53\u524d\u88ab\u64a4\u9500\u8bb0\u5f55 (LSN 7567) \u7684 <code>PrevLSN</code>\uff0c\u5373 7564\u3002\u56fe\u4e2d\u7684\u5f27\u7ebf\u548c \"UndoNextLSN\" \u6807\u7b7e\u793a\u610f\u4e86\u8fd9\u4e00\u70b9\u3002</li> </ul> </li> <li> <p>\u6839\u636e CLR \u7684 <code>UndoNextLSN</code> (\u6216\u539f\u59cb\u8bb0\u5f55\u7684 <code>PrevLSN</code>)\uff0c\u627e\u5230 LSN 7564 (<code>&lt;$T_{145}$, 4894.1, 20, 40&gt;</code>):</p> <ul> <li>\u6267\u884c\u64a4\u9500\u64cd\u4f5c\uff1a\u5c06\u9875\u9762 4894 \u504f\u79fb\u91cf 1 \u7684\u4f4d\u7f6e\u7684\u503c\u4ece 40 \u6062\u590d\u4e3a 20\u3002</li> <li>\u518d\u5199\u5165\u4e00\u6761 CLR\uff0c\u5176 <code>UndoNextLSN</code> \u6307\u5411 LSN 7564 \u7684 <code>PrevLSN</code>\uff0c\u5373 7563\u3002</li> </ul> </li> <li> <p>\u6839\u636e CLR \u7684 <code>UndoNextLSN</code>\uff0c\u627e\u5230 LSN 7563 (<code>&lt;$T_{145}$ begin&gt;</code>):</p> <ul> <li>\u8fd9\u8868\u793a\u4e8b\u52a1 \\(T_{145}\\) \u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5df2\u88ab\u64a4\u9500\u3002</li> <li>\u5728\u65e5\u5fd7\u672b\u5c3e\u5199\u5165\u4e00\u6761 <code>&lt;$T_{145}$ abort&gt;</code> \u8bb0\u5f55\u3002</li> </ul> </li> </ol> </li> <li> <p>\u64a4\u9500\u9636\u6bb5\u5b8c\u6210\u540e\uff1a\u6240\u6709\u672a\u63d0\u4ea4\u4e8b\u52a1\u7684\u5f71\u54cd\u90fd\u88ab\u6e05\u9664\u4e86\u3002\u6570\u636e\u5e93\u8fbe\u5230\u4e00\u81f4\u72b6\u6001\u3002</p> </li> </ul> <p>\u603b\u7ed3\u56fe\u4e2d\u5173\u952e\u6982\u5ff5\u7684\u56fe\u793a\uff1a</p> <ul> <li>PrevLSN pointers: \u6e05\u6670\u5730\u5c55\u793a\u4e86\u6bcf\u4e2a\u4e8b\u52a1\u7684\u65e5\u5fd7\u8bb0\u5f55\u662f\u5982\u4f55\u94fe\u63a5\u8d77\u6765\u7684\uff0c\u65b9\u4fbf\u5728\u64a4\u9500\u9636\u6bb5\u53cd\u5411\u8ffd\u8e2a\u3002</li> <li>CLR (Compensation Log Record): \u5f53\u6267\u884c\u64a4\u9500\u64cd\u4f5c\u65f6\u4f1a\u751f\u6210CLR\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u64a4\u9500\u52a8\u4f5c\u3002\u56fe\u4e2d\u7528\u4e00\u4e2a\u4ece\u88ab\u64a4\u9500\u8bb0\u5f55\u6307\u5411\u65e5\u5fd7\u672b\u5c3e\uff08CLR\u88ab\u5199\u5165\u7684\u5730\u65b9\uff09\u7684\u5f27\u7ebf\u8868\u793a\u3002</li> <li>UndoNextLSN: CLR\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\uff0c\u6307\u5411\u8be5\u4e8b\u52a1\u4e0b\u4e00\u4e2a\u9700\u8981\u88ab\u64a4\u9500\u7684\u65e5\u5fd7\u8bb0\u5f55\u7684LSN\uff0c\u786e\u4fdd\u4e86\u5373\u4f7f\u5728\u56de\u6eda\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5d29\u6e83\uff0c\u4e5f\u80fd\u6b63\u786e\u5730\u7ee7\u7eed\u56de\u6eda\uff0c\u907f\u514d\u91cd\u590d\u64a4\u9500\u3002</li> </ul> <p>\u901a\u8fc7\u8fd9\u4e09\u4e2a\u9636\u6bb5\u7684\u7d27\u5bc6\u914d\u5408\uff0cARIES\u7b97\u6cd5\u80fd\u591f\u786e\u4fdd\u5728\u53d1\u751f\u4efb\u4f55\u7c7b\u578b\u7684\u7cfb\u7edf\u6545\u969c\u540e\uff0c\u6570\u636e\u5e93\u90fd\u80fd\u6062\u590d\u5230\u4e00\u4e2a\u4e00\u81f4\u4e14\u6301\u4e45\u7684\u72b6\u6001\u3002</p>"},{"location":"Computer_Science/DB/Chapter2/","title":"Chapter 2 | Introduction to the Relational Model","text":"<p> \u7ea6 4136 \u4e2a\u5b57  11 \u884c\u4ee3\u7801  17 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 21 \u5206\u949f</p> <p>The relational model\u2019s independence from any specific underlying low-level data structures has allowed it to persist despite the advent of new approaches to data storage.</p> <p>The major advantages of the relational model are its straightforward data representation and the ease with which even complex queries can be expressed. </p>"},{"location":"Computer_Science/DB/Chapter2/#structure-of-relational-databases","title":"Structure of Relational Databases","text":"<p>\u5173\u7cfb\u6570\u636e\u5e93\u7531\u8868(table)\u7ec4\u6210\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u8868\u4e2d\u7684\u4e00\u884c\u4ee3\u8868\u4e86\u4e00\u7ec4\u503c\u4e4b\u95f4\u7684\u67d0\u79cd\u8054\u7cfb\u3002\u4e00\u5f20\u8868\u5c31\u662f\u8fd9\u79cd\u8054\u7cfb\u7684\u4e00\u4e2a\u96c6\u5408\u3002</p> <p>\u672f\u8bed</p> <ol> <li>relation \\(\\leftarrow\\) table</li> </ol> <p>\u5173\u7cfb\u88ab\u7528\u6765\u6307\u4ee3\u8868\uff0c\u7531\u4e8e\u5173\u7cfb\u662f\u5143\u7ec4\u7684\u96c6\u5408(set)\uff0c\u6240\u4ee5\u5143\u7ec4\u5728\u5173\u7cfb\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u662f\u65e0\u5173\u7d27\u8981\u7684\u3002</p> <ol> <li>tuple \\(\\leftarrow\\) row  </li> </ol> <p>\u5143\u7ec4\u88ab\u7528\u6765\u6307\u4ee3\u884c</p> <ol> <li>attribute \\(\\leftarrow\\) column  </li> </ol> <p>\u5c5e\u6027\u88ab\u7528\u6765\u6307\u4ee3\u5217</p> <ol> <li>domain \\(\\leftarrow\\) set of allowed values for each attribute  </li> </ol> <p>\u5bf9\u4e8e\u5173\u7cfb\u7684\u6bcf\u4e2a\u5c5e\u6027\u90fd\u5b58\u5728\u4e00\u4e2a\u5141\u8bb8\u53d6\u503c\u7684\u96c6\u5408</p> <ol> <li>relation schema \\(\\leftarrow\\) the logical structure of the database  </li> </ol> <p>\u5173\u7cfb\u6a21\u5f0f\u88ab\u7528\u6765\u6307\u4ee3\u8868\u7ed3\u6784\uff0c\u7c7b\u4f3c\u4e8e\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u4e2d\u7c7b\u578b\u5b9a\u4e49\u7684\u6982\u5ff5</p> <ol> <li>relation instance \\(\\leftarrow\\) a snapshot of the data in the database at a given instant in time.</li> </ol> <p>\u5173\u7cfb\u5b9e\u4f8b\u88ab\u7528\u6765\u6307\u4ee3\u4e00\u4e2a\u5173\u7cfb\u7684\u7279\u5b9a\u5b9e\u4f8b\uff08\u4e5f\u5373\u5173\u7cfb\u793a\u4f8b\u5305\u542b\u4e00\u7ec4\u7279\u5b9a\u7684\u884c\uff09\uff0c\u5bf9\u5e94\u4e8e\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u4e2d\u53d8\u91cf\u7684\u503c\u7684\u6982\u5ff5</p> about the difference between relation schema and relation instance <p></p> <ul> <li>\u65e0\u5e8f\u6027</li> </ul> <p>A relation is a set of tuples, thus the order in which tuples appear in a relation is irrelevant.</p> <ul> <li>\u539f\u5b50\u7684</li> </ul> <p>We require that, for all relations r, the domains of all attributes of r be atomic.</p> <p>null value \u2014\u2014 a special value that signifies that the value is unknown or does not exist.</p> <p>about null value</p> <p>The special value null is a member of every domain. </p> <p>The null value causes complications in the definition of many operations. </p>"},{"location":"Computer_Science/DB/Chapter2/#english-terms","title":"English Terms","text":"<p>Formally, given sets \\(D_1, D_2, \\ldots, D_n\\), a relation r is a subset of \\(D_1 \\times D_2 \\times \\ldots \\times D_n\\).</p> <p>Thus, a relation is a set of n-tuples(\\(a_1, a_2, \\ldots, a_n\\)), where \\(a_i \\in D_i\\) for \\(i = 1, 2, \\ldots, n\\).</p> <p>\\(A_1, A_2, \\ldots , A_n\\) are attributes.</p> <p>\\(R = (A_1, A_2, \\ldots, A_n)\\) is a relation schema.</p> <p>A relation instance r defined over schema R is denoted by r(R).</p> <p>The current values a relation are specified by a table.</p>"},{"location":"Computer_Science/DB/Chapter2/#keys","title":"Keys","text":"<p>Let \\(K \\subseteq R\\)</p> <p>K is a superkey(\u8d85\u952e) of R if values for K are sufficient to identify a unique tuple of each possible relation r(R)</p> <p>superkey</p> <p>superkey \u662f\u4e00\u4e2a\u6216\u591a\u4e2a attribute \u7684\u96c6\u5408\uff0c\u8fd9\u4e9b attribute \u7684\u503c\u53ef\u4ee5\u552f\u4e00\u5730\u6807\u8bc6\u4e00\u4e2a\u5173\u7cfb\u4e2d\u7684\u6bcf\u4e2a\u5143\u7ec4\u3002</p> <p>A superkey may contain extraneous attributes. If K is a superkey, then so is any superset of K.</p> <p>Thus, minimal superkey is called a candidate key(\u5019\u9009\u952e).</p> <p>One of the candidate keys is selected to be the primary key(\u4e3b\u952e), which is also reffered to as primary key constraints.</p> <p>It is customary to list the primary key attributes of a relation schema before the other attributes, like this: \\(classroom(\\underline{building}, \\underline{room\\_number}, capacity)\\)</p>"},{"location":"Computer_Science/DB/Chapter2/#foreign-key","title":"foreign key","text":"<p>A foreign-key constraint from attribute(s) A of relation \\(r_1\\) to the primary-key B of relation \\(r_2\\) states that on any database instance, the value of A for each tuple in \\(r_1\\) must also be the value of B for some tuple in \\(r_2\\) . Attribute set A is called a foreign key from \\(r_1\\) , referencing \\(r_2\\) . The relation \\(r_1\\) is also called the referencing relation of the foreign-key constraint, and \\(r_2\\) is called the referenced relation.</p> <p>\u4ece \\(r_1\\) \u5173\u7cfb\u7684 A \u5c5e\u6027(\u96c6)\u5230\u5173\u7cfb\u7684\u4e3b\u7801 B \u7684\u5916\u7801\u7ea6\u675f\u8868\u660e:\u5728\u4efb\u4f55\u6570\u636e\u5e93\u5b9e\u4f8b\u4e2d\uff0c\\(r_1\\) \u4e2d\u6bcf\u4e2a\u5143\u7ec4\u5bf9 A \u7684\u53d6\u503c\u4e5f\u5fc5\u987b\u662f \\(r_2\\) \u4e2d\u67d0\u4e2a\u5143\u7ec4\u5bf9 B \u7684\u53d6\u503c\u3002A \u5c5e\u6027\u96c6\u88ab\u79f0\u4e3a\u4ece \\(r_1\\) \u5f15\u7528 \\(r_2\\) \u7684\u5916\u7801\u3002\\(r_1\\) \u5173\u7cfb\u4e5f\u88ab\u79f0\u4e3a\u6b64\u5916\u7801\u7ea6\u675f\u7684\u5f15\u7528\u5173\u7cfb\uff0c\u4e14 \\(r_2\\) \u88ab\u79f0\u4e3a\u88ab\u5f15\u7528\u5173\u7cfb\u3002</p> <p>Info</p> <ol> <li> <p>The referenced attribute(s) must be the primary key of the referenced relation.</p> </li> <li> <p>\u53c2\u7167\u5173\u7cfb\u4e2d\u5916\u7801\u7684\u503c\u5fc5\u987b\u5728\u88ab\u53c2\u7167\u5173\u7cfb\u4e2d\u5b9e\u9645\u5b58\u5728, \u6216\u4e3a null \u3002 </p> </li> </ol> my thoughts <p>\u8fd9\u91cc\u6709\u4e00\u70b9\u7ed5\u3002</p> <p>\u4f8b\u5982\uff0cinstructor \u4e2d\u7684 dept_name \u5c5e\u6027\u662f\u4ece instructor \u5f15\u7528 department \u7684\u5916\u7801\uff0c\u800c department \u7684\u4e3b\u7801\u662f dept_name\u3002</p> <p>\u6240\u4ee5\u5e94\u8be5\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5148\u6784\u9020 department \u8868\uff0c\u6709\u4e86\u5404\u79cd dept_name\uff0c\u7136\u540e instructor \u8868\u4e2d\u5f15\u7528 department \u8868\u4e2d\u7684 dept_name\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c \\(r_1\\) \u5173\u7cfb\u662f instructor\uff0cA \u5c5e\u6027\u662f dept_name \u3002\u800c \\(r_2\\) \u5173\u7cfb\u662f department, \u4e3b\u7801\u662f dept_name\u3002</p> <p>\u8fd9\u6837\u4e5f\u5c31\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48 \\(r_1\\) \u662f the foreign-key constraint\uff0c\u800c \\(r_2\\) \u662f the referenced relation \u4e86\u3002\u4e5f\u80fd\u591f\u89e3\u91ca\u901a \\(r_1\\) \u5173\u7cfb\u4e2d\u5916\u7801\u7684\u503c\u5fc5\u987b\u5728 \\(r_2\\) \u5173\u7cfb\u4e2d\u5b9e\u9645\u5b58\u5728, \u6216\u4e3a null \u3002</p> <p>Referential integrity (\u53c2\u7167\u5b8c\u6574\u6027) constraint requires that the values appearing in specified attribute(s) A of any tuples in the referencing relation \\(r_1\\) also appear in specified attribute(s) B of at least one tuple in the referenced relation \\(r_2\\).</p> <p>\u53c2\u7167\u5b8c\u6574\u6027\u7ea6\u675f\u8981\u6c42\u5f15\u7528\u5173\u7cfb\u4e2d\u7684\u4efb\u610f\u5143\u7ec4\u5728\u6307\u5b9a\u5c5e\u6027\u4e0a\u51fa\u73b0\u7684\u53d6\u503c\u4e5f\u5fc5\u7136\u51fa\u73b0\u5728\u88ab\u5f15\u7528\u5173\u7cfb\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5143\u7ec4\u7684\u6307\u5b9a\u5c5e\u6027\u4e0a\u3002</p> my thoughts <p>\u6211\u7684\u7406\u89e3\u662f\u6b64\u65f6 \\(r_2\\) \u4e2d\u7684\u591a\u4e2a attribute \u6784\u6210 primary key\uff0c\u90a3\u4e48 \\(r_1\\) \u4e2d\u7684\u4efb\u610f tuple \u5728\u6307\u5b9a schema \u4e0a\u51fa\u73b0\u7684\u53d6\u503c\u5728 \\(r_2\\) \u4e2d\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u3002</p> <p>\u53ef\u4ee5\u60f3\u89c1 \\(r_2\\) \u7684\u8fd9\u4e00\u4e2a attribute \u4e4b\u6240\u4ee5\u6b64\u65f6\u4e0d\u662f \\(r_2\\) \u7684 primary key \u5c31\u662f\u56e0\u4e3a\u8fd9\u4e00\u4e2a attribute \u4e0d\u80fd\u552f\u4e00\u6807\u8bc6 \\(r_2\\) \u4e2d\u7684\u5143\u7ec4\u3002</p> <p>\u56e0\u6b64\uff0c\u53ef\u4ee5\u5f97\u5230 foreign-key constraints are a special case of referential integrity constraints\u3002</p> <p>Info</p> <p>Database systems today typically support foreign-key constraints, but they do not support referential integrity constraints where the referenced attribute is not a primary key.</p> \u4e3a\u4ec0\u4e48\u8981\u6709 foreign-key <p>From deepSeek.</p> <p>\u5916\u952e\uff08Foreign Key\uff09\u662f\u5173\u7cfb\u6570\u636e\u5e93\u8bbe\u8ba1\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u5b83\u7528\u4e8e\u5efa\u7acb\u548c\u5f3a\u5236\u4e24\u4e2a\u8868\u4e4b\u95f4\u7684\u94fe\u63a5\u3002\u5916\u952e\u7684\u5b58\u5728\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5173\u952e\u539f\u56e0\uff1a</p> <ol> <li> <p>\u4fdd\u6301\u6570\u636e\u5b8c\u6574\u6027\uff1a \u5916\u952e\u786e\u4fdd\u4e86\u4e00\u4e2a\u8868\u4e2d\u7684\u6570\u636e\u4e0e\u53e6\u4e00\u4e2a\u8868\u4e2d\u7684\u6570\u636e\u4fdd\u6301\u4e00\u81f4\u3002\u5b83\u9632\u6b62\u4e86\u4f1a\u5bfc\u81f4\u8868\u4e4b\u95f4\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u65e0\u6548\u6570\u636e\u7684\u63d2\u5165\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u8ba2\u5355\u8868\uff0c\u6bcf\u4e2a\u8ba2\u5355\u90fd\u9700\u8981\u5173\u8054\u5230\u4e00\u4e2a\u5b58\u5728\u7684\u5ba2\u6237\uff0c\u5916\u952e\u53ef\u4ee5\u786e\u4fdd\u4f60\u4e0d\u80fd\u6dfb\u52a0\u4e00\u4e2a\u6ca1\u6709\u5bf9\u5e94\u5ba2\u6237ID\u7684\u8ba2\u5355\u3002</p> </li> <li> <p>\u5b9e\u73b0\u8868\u4e0e\u8868\u4e4b\u95f4\u7684\u5173\u8054\uff1a \u5916\u952e\u5141\u8bb8\u6570\u636e\u5e93\u8bbe\u8ba1\u8005\u5c06\u6570\u636e\u5206\u6563\u5230\u4e0d\u540c\u7684\u8868\u4e2d\uff0c\u540c\u65f6\u4fdd\u6301\u8fd9\u4e9b\u6570\u636e\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u8054\u3002\u8fd9\u6837\uff0c\u6570\u636e\u53ef\u4ee5\u88ab\u7ec4\u7ec7\u6210\u903b\u8f91\u4e0a\u4e00\u81f4\u4e14\u6613\u4e8e\u7ba1\u7406\u7684\u5355\u5143\uff0c\u800c\u4e0d\u662f\u5c06\u6240\u6709\u6570\u636e\u90fd\u5b58\u50a8\u5728\u4e00\u4e2a\u5927\u8868\u4e2d\u3002</p> </li> <li> <p>\u7ea7\u8054\u64cd\u4f5c\uff1a \u5916\u952e\u53ef\u4ee5\u5b9a\u4e49\u7ea7\u8054\u66f4\u65b0\u548c\u5220\u9664\u89c4\u5219\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u4e3b\u952e\u8868\u4e2d\u7684\u6570\u636e\u66f4\u65b0\u6216\u5220\u9664\u65f6\uff0c\u6240\u6709\u76f8\u5173\u8054\u7684\u5916\u952e\u8868\u4e2d\u7684\u6570\u636e\u4e5f\u4f1a\u81ea\u52a8\u66f4\u65b0\u6216\u5220\u9664\u3002\u8fd9\u6709\u52a9\u4e8e\u7ef4\u62a4\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u51cf\u5c11\u9519\u8bef\u3002</p> </li> <li> <p>\u67e5\u8be2\u548c\u6570\u636e\u68c0\u7d22\uff1a \u5916\u952e\u4f7f\u5f97\u8de8\u8868\u67e5\u8be2\u6210\u4e3a\u53ef\u80fd\u3002\u901a\u8fc7\u8fde\u63a5\uff08JOIN\uff09\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4ece\u591a\u4e2a\u76f8\u5173\u8868\u4e2d\u68c0\u7d22\u51fa\u590d\u6742\u7684\u6570\u636e\u96c6\u3002\u8fd9\u5bf9\u4e8e\u6570\u636e\u5206\u6790\u548c\u62a5\u544a\u751f\u6210\u975e\u5e38\u6709\u7528\u3002</p> </li> <li> <p>\u89c4\u8303\u5316\u6570\u636e\u5e93\u8bbe\u8ba1\uff1a \u5916\u952e\u662f\u6570\u636e\u5e93\u89c4\u8303\u5316\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e2a\u5173\u952e\u8981\u7d20\u3002\u89c4\u8303\u5316\u662f\u4e00\u7ec4\u6307\u5bfc\u539f\u5219\uff0c\u65e8\u5728\u51cf\u5c11\u6570\u636e\u5197\u4f59\uff0c\u63d0\u9ad8\u6570\u636e\u5b8c\u6574\u6027\u3002\u901a\u8fc7\u4f7f\u7528\u5916\u952e\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u5206\u89e3\u6210\u591a\u4e2a\u76f8\u5173\u7684\u8868\uff0c\u4ece\u800c\u51cf\u5c11\u91cd\u590d\u6570\u636e\u5e76\u7b80\u5316\u6570\u636e\u7ed3\u6784\u3002</p> </li> <li> <p>\u7ea6\u675f\u548c\u9a8c\u8bc1\uff1a \u5916\u952e\u7ea6\u675f\u786e\u4fdd\u4e86\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u9075\u5faa\u9884\u5b9a\u4e49\u7684\u89c4\u5219\u3002\u8fd9\u4e3a\u6570\u636e\u8f93\u5165\u63d0\u4f9b\u4e86\u4e00\u79cd\u9a8c\u8bc1\u673a\u5236\uff0c\u786e\u4fdd\u4e86\u6570\u636e\u7684\u51c6\u786e\u6027\u548c\u53ef\u9760\u6027\u3002</p> </li> </ol>"},{"location":"Computer_Science/DB/Chapter2/#schema-diagram","title":"schema diagram","text":"<p>Primary-key attributes are shown underlined. </p> <p>\u4e3b\u7801\u5c5e\u6027\u7528\u4e0b\u5212\u7ebf\u6807\u6ce8\u3002</p> <p>Foreign-key constraints appear as arrows from the foreign-key attributes of the referencing relation to the primary key of the referenced relation.</p> <ul> <li>\u5916\u7801\u7ea6\u675f\u7528\u4ece\u5f15\u7528\u5173\u7cfb\u7684\u5916\u7801\u5c5e\u6027\u6307\u5411\u88ab\u5f15\u7528\u5173\u7cfb\u7684\u4e3b\u7801\u5c5e\u6027\u7684\u7bad\u5934\u6765\u8868\u793a\u3002</li> <li>\u6211\u4eec\u4f7f\u7528\u53cc\u5934\u7bad\u5934\u6765\u8868\u793a\u4e0d\u662f\u5916\u7801\u7ea6\u675f\u7684\u5f15\u7528\u5b8c\u6574\u6027\u7ea6\u675f\u3002</li> </ul> my thoughts <p>\u7406\u89e3\u4e3a\u7bad\u5934\u6307\u5411\"\u6765\u6e90\"~ \u548c\u4e00\u822c\u7684\u7bad\u5934\u76f8\u53cd ~</p>"},{"location":"Computer_Science/DB/Chapter2/#relational-query-languages","title":"Relational Query Languages","text":"<p>A query language is a language in which a user requests information from the database.</p> <ul> <li>imperative query language</li> <li>functional query language</li> <li>declarative query language</li> </ul>"},{"location":"Computer_Science/DB/Chapter2/#the-relational-algebra","title":"The Relational Algebra","text":"<p>A procedural language consisting of a set of operations that take one or two relations as input and produce a new relation as their result.</p> <p>Six basic operators\uff1a</p> <ol> <li>select \\(\\sigma\\)</li> <li>project \\(\\Pi\\)</li> <li>union \\(\\cup\\)</li> <li>set difference \\(-\\)</li> <li>Cartesian product \\(\\times\\)</li> <li>rename \\(\\rho\\)</li> </ol> <p>Note</p> <p>unary operation: select, project, rename</p> <p>binary operation: union, set difference, Cartesian product</p> <p>anttenion</p> <p>It is worth recalling at this point that since a relation is a set of tuples, relations cannot contain duplicate tuples. </p> <p>\u5728\u8fd9\u4e00\u70b9\u4e0a\u503c\u5f97\u56de\u987e\u7684\u662f\uff0c\u7531\u4e8e\u5173\u7cfb\u662f\u4e00\u7ec4\u5143\u7ec4\uff0c\u56e0\u6b64\u5173\u7cfb\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5143\u7ec4\u3002</p> <p>In practice, however, tables in database systems are permitted to contain duplicates unless a specific constraint prohibits it. </p> <p>\u4f46\u662f\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\u7684\u8868\u5141\u8bb8\u5305\u542b\u91cd\u590d\u9879\uff0c\u9664\u975e\u6709\u7279\u5b9a\u7684\u7ea6\u675f\u7981\u6b62\u5b83\u3002</p> <p>But, in discussing the formal relational algebra, we require that duplicates be eliminated, as is required by the mathematical definition of a set.</p> <p>\u4f46\u662f\uff0c\u5728\u8ba8\u8bba\u5f62\u5f0f\u5316\u7684\u5173\u7cfb\u4ee3\u6570\u65f6\uff0c\u6211\u4eec\u8981\u6c42\u6d88\u9664\u91cd\u590d\uff0c\u800c\u8fd9\u662f\u4e00\u4e2a\u96c6\u5408\u7684\u6570\u5b66\u5b9a\u4e49\u6240\u8981\u6c42\u7684\u3002\u5728\u7b2c\u4e09\u7ae0\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u5982\u4f55\u5c06\u5173\u7cfb\u4ee3\u6570\u6269\u5c55\u5230\u591a\u96c6\uff0c\u8fd9\u662f\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u96c6\u5408\u3002</p>"},{"location":"Computer_Science/DB/Chapter2/#the-select-operation","title":"The Select Operation","text":"<p>Notation: \\(\\sigma_{p}(r)\\)</p> <p>Defined as: \\(\\sigma_{p}(r) = \\{t \\in r \\ and \\ p(t)\\}\\)</p> <p>In general, we allow comparisons using \\(= , \\neq , &lt; , &gt; , \\leq , \\geq , and (\\wedge) , or (\\vee) , and \\ not (\\neg)\\).</p> <p>Example</p> <p>\\(\\sigma_{\\text{dept_name} = \"Physics\" \\wedge \\text{salary} &gt; 90000}(\\text{instructor})\\)</p> \u56fe\u793a <p>select \u4e5f\u5373\u4ece\u8868\u4e2d\u9009\u62e9\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u7684\u884c\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter2/#the-project-operation","title":"The Project Operation","text":"<p>Notation: \\(\\Pi_{A_1,A_2,\\ldots,A_n}(r)\\)</p> <p>The basic version of the project operator \\(\\Pi_{L}(E)\\) allows only attribute names to be present in the list L. A generalized version of the operator allows expressions involving attributes to appear in the list L.</p> <p>Example</p> <p>\\(\\Pi_{\\text{ID,name,salary}}(\\text{instructor})\\)</p> <p>\\(\\Pi_{\\text{ID,name,salary / 12}}(\\text{instructor})\\)</p> <p>attention</p> <p>Duplicate rows removed from result, since relations are sets.</p> \u56fe\u793a <p>\u4ece\u8868\u4e2d\u9009\u62e9\u7279\u5b9a\u7684\u5217\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter2/#the-union-operation","title":"The Union Operation","text":"<p>Notation: \\(r \\cup s\\)</p> <p>Defined as: \\(r \\cup s = \\{t| t \\in r \\ or \\ t \\in s\\}\\)</p> <p>attention</p> <ol> <li> <p>\\(r\\) , \\(s\\) must have the same arity (\u5143\u6570)(same number of attributes)</p> </li> <li> <p>The attribute domains must be compatible</p> </li> </ol> \u56fe\u793a <p></p>"},{"location":"Computer_Science/DB/Chapter2/#the-set-difference-operation","title":"The Set Difference Operation","text":"<p>Notation: \\(r - s\\)</p> <p>Defined as: \\(r - s = \\{t| t \\in r \\ and \\ t \\notin s\\}\\)</p> <p>attention</p> <p>Set differences must be taken between compatible relations.</p> <ol> <li> <p>\\(r\\) , \\(s\\) must have the same arity.</p> </li> <li> <p>The attribute domains must be compatible.</p> </li> </ol> \u56fe\u793a <p></p> <ul> <li>\u4e00\u4e2a\u5f88\u5e38\u7528\u7684\u601d\u60f3: \u8981\u627e\u5230\u6700\u5927\u7684\uff0c\u5c31\u5148\u627e\u5230\u6240\u6709\u5c0f\u7684\uff0c\u7136\u540e\u4ece\u5168\u96c6\u91cc\u51cf\u53bb\u3002\u8981\u627e\u6700\u5c0f\u7684\u540c\u7406\u3002</li> </ul> Example <p>Find the largest account balance (i.e., self-comparison). </p> <p>\\(\\Pi_{\\text{balance}}(account) - \\Pi_{\\text{account.balance}}(\\sigma_{\\text{account.balance} \\le \\text{d.balance}}(account \\times \\rho_{d}(account)))\\)</p>"},{"location":"Computer_Science/DB/Chapter2/#the-cartesian-product-operation","title":"The Cartesian-Product Operation","text":"<p>Notation: \\(r \\times s\\)</p> <p>Defined as: \\(r \\times s = \\{t \\ q | t \\in r \\ and \\ q \\in s\\}\\)</p> <p>attention</p> <p>Assume that attributes of r(R) and s(S) are disjoint. (That is , \\(R \\cap S = \\emptyset\\))</p> <p>If attributes of r(R) and s(S) are not disjoint, then  renaming must be used.</p> \u56fe\u793a <p></p> Example <ol> <li>Find the names of all customers who have a loan at the Perryridge branch. </li> </ol> <p>\\(\\Pi_{customer\\_name}(\\sigma_{borrower.loan-number = loan.loan-number}(borrower \\times (\\sigma_{branch-name = 'Perryridge'}(loan))))\\)</p> <ol> <li>Find the names of all customers who have loans at the Perryridge branch but do not have an account at any branch of the bank. </li> </ol> <p>\\(\\Pi_{customer-name}(\\sigma_{borrower.loan-number = loan.loan-number}(borrower \\times (\\sigma_{branch-name = 'Perryridge'}(loan)))) - \\Pi_{customer-name}(depositor)\\)</p>"},{"location":"Computer_Science/DB/Chapter2/#the-composition-of-operations","title":"The Composition of Operations","text":"<p>Can build expressions using multiple operations.</p> \u56fe\u793a <p></p>"},{"location":"Computer_Science/DB/Chapter2/#the-rename-operation","title":"The Rename Operation","text":"<p>Notation: \\(\\rho_{x}(E)\\)</p> <p>If a relational-algebra expression E has arity n, then</p> \\[\\rho_{x(A_1, A_2, \\cdots, A_n)}(E)\\] <p>returns the result of expression E under the name X, and with the attributes renamed to \\(A_1, A_2, \\cdots, A_n\\).</p> <p>conclusion</p> <p>\u4e0d\u662f\u6240\u6709\u67e5\u8be2\u7ed3\u679c\u90fd\u80fd\u7528\u5173\u7cfb\u4ee3\u6570\u8868\u793a\u51fa\u6765\u3002</p>"},{"location":"Computer_Science/DB/Chapter2/#formal-definition","title":"Formal Definition","text":"<p>A basic expression in the relational algebra consists of either one of the following:</p> <ul> <li>A relation in the database</li> <li>A constant relation</li> </ul> <p>We define additional operations that do not add any power to the relational algebra, but that simplify common queries.</p> <ul> <li>Set intersection: \\(\\cap\\)</li> <li>Natural join: \\(\\bowtie\\)</li> <li>Semijoin:  \\(\u22c9_{\\theta}\\), \\(\u22ca_{\\theta}\\)</li> <li>Assignment: \\(\\leftarrow\\)</li> <li>Outer join : \u27d5 , \u27d6 , \u27d7</li> <li>Division Operator: \\(\\div\\)</li> </ul>"},{"location":"Computer_Science/DB/Chapter2/#set-intersection-operation","title":"Set Intersection Operation","text":"<p>The set-intersection operation allows us to find tuples that are in both the input relations.</p> <p>Notation: \\(r \\cap s\\)</p> <p>Defined as: \\(r \\cap s = \\{t | t \\in r \\land t \\in s\\}\\)</p> <p>Note: \\(r \\cap s = r - (r - s)\\)</p> \u56fe\u4f8b <p></p>"},{"location":"Computer_Science/DB/Chapter2/#natural-join-operation","title":"Natural Join Operation","text":"<p>\u628a\u516c\u5171\u5c5e\u6027\u76f8\u540c\u7684\u884c\u8fde\u5728\u4e00\u8d77\u3002</p> <p>Consider each pair of tuples \\(t_r\\) from \\(r\\) and \\(t_s\\) from \\(s\\).</p> <p>If \\(t_r\\) and \\(t_s\\) have the same value on each of the attributes in \\(R \\cap S\\), add a tuple t to the result, where</p> <ul> <li>\\(t\\) has the same values as \\(t_r\\) on r</li> <li>\\(t\\) has the same values as \\(t_s\\) on s</li> </ul> \\[r \\bowtie s = \\Pi_{r.A, r.B, r.C, r.D, s.E}(\\sigma_{r.B = s.B ^ r.D = s.D(r \\times s)})\\] <ul> <li>associative</li> </ul> \\[(instructor \\bowtie  teaches) \\bowtie  course\\] <p>is equivalent to </p> \\[instructor \\bowtie (teaches \\bowtie course)\\] <ul> <li>commutative</li> </ul> \\[instructor \\bowtie  teaches\\] <p>is equivalent to </p> \\[teaches \\bowtie instructor\\] <p>The theta join operation \\(r \\bowtie_{\\theta} s\\) is defined as:</p> \\[r \\bowtie_{\\theta} s = \\sigma_{\\theta}(r \\times s)\\] \u56fe\u4f8b <p></p>"},{"location":"Computer_Science/DB/Chapter2/#outer-join-operation","title":"Outer Join Operation","text":"<p>An extension of the join operation that avoids loss of information.</p> <p>Computes the join and then adds tuples form one relation that does not match tuples in the other relation to the result of the join.</p> <p>Outer join can be expressed using basic operations</p> <ul> <li>\\(r\\) \u27d5 \\(s\\) = \\((r \\bowtie s) \\cup (r - \\Pi_{R}(r \\bowtie s) \\times \\{(null, \\dots, null)\\})\\)</li> <li>\\(r\\) \u27d6 \\(s\\) = \\((r \\bowtie s) \\cup (\\{(null, \\dots, null)\\} \\times s - \\Pi_{S}(r \\bowtie s))\\)</li> <li> <p>\\(r\\) \u27d7 \\(s\\) = \\((r \\bowtie s) \\cup (r - \\Pi_{R}(r \\bowtie s) \\times \\{(null, \\dots, null)\\}) \\cup (\\{(null, \\dots, null)\\} \\times s - \\Pi_{S}(r \\bowtie s))\\)</p> </li> <li> <p>\\(\\{ \\}\\) \u8868\u793a\u6784\u9020\u4e00\u5bf9\u4e34\u65f6\u7684\u5173\u7cfb\uff0c \u6240\u4ee5 \\(\\{(null, \\dots, null)\\}\\) \u8868\u793a\u6784\u9020\u4e00\u5bf9\u4e34\u65f6\u7684\u5173\u7cfb\uff0c\u5176\u4e2d\u53ea\u6709\u4e00\u5bf9\u5143\u7ec4\uff0c\u4e14\u6240\u6709\u5c5e\u6027\u90fd\u662f null</p> </li> </ul> <p>Note</p> <p>Uses null values:</p> <ul> <li> <p>null signifies that the value is unknown or does not exist</p> </li> <li> <p>All comparisons involving null are (roughly speaking) false by definition.</p> </li> </ul> \u56fe\u4f8b <p></p> <p></p>"},{"location":"Computer_Science/DB/Chapter2/#semijoin-operation","title":"Semijoin Operation","text":"<p>Notation: \\(r \u22c9_{\\theta} s\\)</p> <p>Is a subset of r, in which every tuple \\(r_i\\) matches at least one truple \\(s_i\\) in s under the condition \\(\\theta\\).</p> <p>\\(r \u22c9_{\\theta} s = \\Pi_{R}(r \\bowtie_{\\theta} s)\\)</p> \u56fe\u4f8b <p></p> Example <p>Find all customers who have an account from at least the \u201cDowntown\u201d and the \u201cUptown\u201d branches. </p> <ol> <li> <p>\\(\\Pi_{customer-name}(\\sigma_{branch-name = 'Downtown'}(depositor \\bowtie account)) \\cap \\Pi_{customer-name}(\\sigma_{branch-name = 'Uptown'}(depositor \\bowtie account))\\)</p> </li> <li> <p>\\(\\Pi_{customer-name, branch-name}(depositor \\bowtie account) \\div \\rho_{temp(branch-name)}(\\{('Downtown', 'Uptown')\\})\\)</p> </li> </ol>"},{"location":"Computer_Science/DB/Chapter2/#assignment-operation","title":"Assignment Operation","text":"<p>The assignment operation (\\(\\leftarrow\\)) provides a convenient way to express complex queries.</p>"},{"location":"Computer_Science/DB/Chapter2/#division-operation","title":"Division Operation","text":"<p>Given relations r(R) and s(S), such that \\(S \\subset R\\) , \\(r \\div s\\) is the largest relation t(R-S) such that \\(t \\times s \\subseteq r\\).</p> <p>\\(r \\div s\\) can be written as:</p> <ul> <li>temp1 \\(\\leftarrow \\Pi_{R-S}(r)\\)</li> <li>temp2 \\(\\leftarrow \\Pi_{R-S}((temp1 \\times s) - \\Pi_{R-S,S}(r))\\)</li> <li>result = temp1 - temp2</li> </ul> <p>Example</p> <p>Suited to queries that include the phrase \"for all\".</p> <p>let \\(r(ID, course\\_id) = \\Pi_{ID, course\\_id}(takes)\\) and \\(s(course\\_id) = \\Pi_{course\\_id}(\\sigma_{dept\\_name = \"Biology\"}(course))\\)</p> \u56fe\u4f8b <p></p> <p></p>"},{"location":"Computer_Science/DB/Chapter2/#generalized-projection","title":"Generalized Projection","text":"<p>Note</p> <p>\u589e\u52a0\u8868\u8fbe\u80fd\u529b</p> <p>Extends the projection operation by allowing arithmetic functions to be used in the projection list.</p> <p>Example</p> <p>Given relation instructor(ID, name, dept_name, salary) where salary is annual salary, get the same information but with monthly salary.</p> <p>\\(\\Pi_{ID, name, dept_name, salary/12}(instructor)\\)</p>"},{"location":"Computer_Science/DB/Chapter2/#aggregate-functions-and-operations","title":"Aggregate Functions and Operations","text":"<p>Note</p> <p>\u589e\u52a0\u8868\u8fbe\u80fd\u529b</p> <p>Aggregation function \uff08\u805a\u5408\u51fd\u6570\uff09takes a collection of values and  returns a single value as a result.</p> <p>\u5e38\u89c1\u7684\u805a\u5408\u51fd\u6570</p> <ul> <li>avg : average</li> <li>min : minimum</li> <li>max : maximum</li> <li>sum : sum</li> <li>count : count</li> </ul> <p>\\(_{G_1, G_2, \\cdots, G_n} G_{F_1(A_1), F_2(A_2), \\cdots, F_n(A_n)}(E)\\)</p> <p>E is any relational-algebra expression. \\(G_1, G_2, \\cdots, G_n\\) is a list of attributes on which to group (can be empty). </p> <p>Each \\(F_i\\) is an aggregation function. </p> <p>Each \\(A_i\\) is an attribute name.</p> \u56fe\u4f8b <p></p> <p></p> <p>Result of aggregation does not have a name, so we can use rename operation to give it a name.</p> <p>For convenience, we permit renaming as part of aggregate operation.</p> <p>\\(_{dept \\_ name} \\ G_{avg(salary)} \\ as \\ avg \\_ sal(instructor)\\)</p>"},{"location":"Computer_Science/DB/Chapter2/#multiset-relational-algebra","title":"Multiset Relational Algebra","text":"<p>Note</p> <p>\u53bb\u91cd\u64cd\u4f5c\u5341\u5206 consuming.</p> <p>\u56e0\u6b64\u7279\u522b\u662f\u4e2d\u95f4\u6b65\u9aa4\uff0c\u6ca1\u6709\u5fc5\u8981\u53bb\u91cd\u3002</p> <p>Pure relational algebra removes all duplicates. Multiset relational algebra retains duplicates, to match SQL semantics.</p> <p>SQL duplicate retention was initially for efficiency, but is now a feature. </p> <p>Multiset relational algebra defined as follows:</p> <ul> <li>selection: has as many duplicates of a tuple as in the input, if the tuple satisfies the selection</li> <li>projection: one tuple per input tuple, even if it is a duplicate</li> <li>cross product: If there are m copies of t1 in r, and n copies of t2 in s, there are m x n copies of t1.t2 in \\(r \\times s\\)</li> </ul> <p>set operators :</p> <ul> <li>union: m + n copies</li> <li>intersection: min(m, n) copies</li> <li>difference: min(0,m-n) copies</li> </ul>"},{"location":"Computer_Science/DB/Chapter2/#sql-and-relational-algebra","title":"SQL and Relational Algebra","text":"<pre><code>select A1, A2, .. An\nfrom r1, r2, ... , rm\nwhere P\n</code></pre> <p>is equivalent to the following expression in multiset relational algebra</p> \\[\\pi_{A1, A2, .. An}(\\sigma_P(r1 \\times r2 \\times ... \\times rm))\\] <pre><code>select A1, A2, sum(A3)\nfrom r1, r2, ... , rm\nwhere P\ngroup by A1, A2\n</code></pre> <p>is equivalent to the following expression in multiset relational algebra</p> \\[A1, A2, G_{sum(A3)}(\\sigma_P(r1 \\times r2 \\times ... \\times rm))\\] anlysis <p>\u4e58\u8d77\u6765\u7684\u7ed3\u679c\u7b5b\u9009\u4e00\u4e0b\uff0c\u5206\u7ec4\u518d\u7edf\u8ba1\u3002</p> <pre><code>select A1, sum(A3)\nfrom r1, r2, \u2026, rm\nwhere P\ngroup by A1, A2\n</code></pre> <p>is equivalent to the following expression in multiset relational algebra</p> \\[\\Pi_{A1, sumA3}(_{A1, A2}G_{sum(A3) \\ as \\ sumA3}(\\sigma_P(r1 \\times r2 \\times ... \\times rm)))\\] anlysis <p>\u662f\u4ece <code>r1, r2, \u2026, rm</code> \u8fd9\u4e9b\u8868\u4e2d\u9009\u53d6\u6570\u636e\uff0c\u6839\u636e <code>A1</code> \u548c <code>A2</code> \u5217\u7684\u503c\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u5206\u7ec4\u4e2d\u7684 <code>A3</code> \u5217\u7684\u503c\u6c42\u548c\u3002\u6700\u7ec8\u7684\u7ed3\u679c\u96c6\u5c06\u5305\u542b <code>A1</code> \u5217\u548c <code>sum(A3)</code> \u5217\u3002</p>"},{"location":"Computer_Science/DB/Chapter2/#modification-of-the-database","title":"Modification of the Database","text":"<p>The content of the database may be modified using the following  operations:</p> <ul> <li>Deletion</li> <li>Insertion</li> <li>Updating</li> </ul> <p>All these operations can be expressed using the assignment operator.</p>"},{"location":"Computer_Science/DB/Chapter2/#deletion","title":"Deletion","text":"<p>A delete request is expressed similarly to a query, except instead of displaying tuples to the user, the selected tuples are removed from the database. </p> <p>It can delete only whole tuples; cannot delete values on some  particular attributes.  </p> <p>A deletion is expressed in relational algebra by: </p> \\[r \\leftarrow r - E\\] <p>where r is a relation and E is a relational algebra query. </p> Example <ol> <li>Delete all account records in the Perryridge branch. </li> </ol> <p>\\(account \\leftarrow account - \\sigma_{branch-name = 'Perryridge'}(account)\\)</p> <ol> <li>Delete all loan records with amount in the range of 0 to 50. </li> </ol> <p>\\(loan \\leftarrow loan - \\sigma_{amount \\ge 0 \\ and \\ amount \\le 50}(loan)\\)</p>"},{"location":"Computer_Science/DB/Chapter2/#insertion","title":"Insertion","text":"<p>To insert data into a relation, we either: </p> <ul> <li>Specify a tuple to be inserted. </li> <li>Write a query whose result is a set of tuples to be inserted. </li> </ul> <p>In relational algebra, an insertion is expressed by: </p> \\[r \\leftarrow r \\cup E\\] <p>where r is a relation and E is a relational algebra expression. </p> <p>The insertion of a single tuple is expressed by letting E be a constant relation containing one tuple. </p> Example <p>Insert information in the database specifying that Smith has $1200 in account A-973 at the Perryridge branch. </p> \\[account \\leftarrow account \\cup \\{('Perryridge', A-973, 1200)\\}\\] \\[depositor \\leftarrow depositor \\cup \\{('Smith', A-973)\\}\\]"},{"location":"Computer_Science/DB/Chapter2/#update","title":"Update","text":"<p>A mechanism to change a value in a tuple without charging all  values in the tuple. </p> <p>Use the generalized projection operator to do this task</p> \\[r \\leftarrow \\Pi_{F1, F2, \\cdots, Fl}(r)\\] <p>where each \\(F_i\\) is either the ith attribute of r, if the ith attribute is not updated, or, if the attribute is to be updated \\(F_i\\) is an expression, involving only constants and the attributes of r, which gives the new value for the attribute. </p> Example <p>Make interest payments by increasing all balances by 5 percent. </p> \\[account \\leftarrow \\Pi_{account\\_number,branch\\_name, balance * 1.05}(account)\\]"},{"location":"Computer_Science/DB/Chapter3/","title":"Chapter 3 | Introduction to SQL","text":"<p> \u7ea6 5357 \u4e2a\u5b57  294 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 30 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter3/#data-definition-language","title":"Data Definition Language","text":"<p>The SQL data-definition language (DDL) allows the specification of information about relations, including:</p> <ul> <li>The schema for each relation.</li> <li>The domain of values associated with each attribute.</li> <li>Integrity constraints</li> <li>The set of indices to be maintained for each relations.</li> <li>Security and authorization information for each relation.</li> <li>The physical storage structure of each relation on disk.</li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#domain-types-in-sql","title":"Domain Types in SQL","text":"<ul> <li> <p><code>char(n)</code> : Fixed length character string, with user-specified length n.</p> <ul> <li>\u5177\u6709\u7528\u6237\u6307\u5b9a\u957f\u5ea6n\u7684\u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5168\u79f0\u5f62\u5f0fcharacter</li> </ul> </li> <li> <p><code>varchar(n)</code> : Variable length character strings, with user-specified maximum length n.</p> <ul> <li>\u5177\u6709\u7528\u6237\u6307\u5b9a\u7684\u6700\u5927\u957f\u5ea6n\u7684\u53ef\u53d8\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u3002\u7b49\u4ef7\u7684\u5168\u79f0\u5f62\u5f0f\u662fcharacter varying</li> </ul> </li> <li> <p><code>int</code> : Integer (a finite subset of the integers that is machinedependent).</p> </li> <li><code>smallint</code> : Small integer (a machine-dependent subset of the integer domain type).</li> <li> <p><code>numeric(p,d)</code> : Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point.</p> <ul> <li>\u5177\u6709\u7528\u6237\u6307\u5b9a\u7cbe\u5ea6\u7684\u5b9a\u70b9\u6570\u3002\u8fd9\u4e2a\u6570\u6709 p \u4f4d\u6570\u5b57(\u52a0\u4e0a\u4e00\u4e2a\u7b26\u53f7\u4f4d).\u5e76\u4e14\u5c0f\u6570\u70b9\u53f3\u8fb9\u6709 p \u4f4d\u4e2d\u7684 d \u4f4d\u6570\u5b57\u3002</li> </ul> </li> <li> <p><code>real, double precision</code> : Floating point and double-precision floating point numbers, with machine-dependent precision.</p> </li> <li><code>float(n)</code> : Floating point number, with user-specified precision of at least n digits.<ul> <li>\u7cbe\u5ea6\u81f3\u5c11\u4e3an\u4f4d\u6570\u5b57\u7684\u6d6e\u70b9\u6570\u3002</li> </ul> </li> </ul> <p>Note</p> <p>\u5b9a\u957f\u5b57\u7b26\u4e32\uff0c\u5728 c \u8bed\u8a00\u4e2d\u5b57\u7b26\u4e32\u7ed3\u5c3e\u6709 <code>\\0</code>\uff0c\u4f46\u5728 SQL \u4e2d\u4e0d\u662f\uff0c\u4f60\u8bf4\u662f\u591a\u957f\u5c31\u8bfb\u5230\u591a\u957f\u3002</p> <p>\u6574\u6570\u957f\u5ea6\u4e0e\u673a\u5668\u6709\u5173\u3002</p> <p>p \u662f\u6709\u6548\u6570\u5b57\u662f\u51e0\u4f4d\uff0cd \u662f\u5c0f\u6570\u70b9\u540e\u51e0\u4f4d\u3002number(3,1) allows 44.5 to be store exactly, but neither 444.5 or 0.32 </p> <p>Built-in Data Types in SQL</p> <ul> <li><code>date</code> : Dates, containing a (4 digit) year, month and date. \u65e5\u5386\u65e5\u671f\uff0c\u5305\u62ec\u5e74(\u56db\u4f4d)\u3001\u6708\u548c\u6708\u4e2d\u7684\u65e5\u3002</li> <li><code>time</code> : Time of day, in hours, minutes and seconds. \u4e00\u5929\u4e2d\u7684\u65f6\u95f4\uff0c\u7528\u65f6\u3001\u5206\u548c\u79d2\u6765\u8868\u793a\u3002\u53ef\u4ee5\u7528\u53d8\u91cf <code>time(p)</code> \u6765\u6307\u5b9a\u79d2\u7684\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u4f4d\u6570(\u7f3a\u7701\u503c\u4e3a0)\u3002\u901a\u8fc7\u6307\u5b9a <code>time with timezone</code>\uff0c\u8fd8\u53ef\u4ee5\u628a\u65f6\u533a\u4fe1\u606f\u8fde\u540c\u65f6\u95f4\u4e00\u8d77\u5b58\u50a8\u3002</li> <li><code>timestamp</code> : date plus time of day. <code>date</code> \u548c <code>time</code> \u7684\u7ed3\u5408\u3002\u53ef\u4ee5\u7528\u53d8\u91cf <code>timestamp(p)</code> \u6765\u6307\u5b9a\u79d2\u7684\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u4f4d\u6570(\u7f3a\u7701\u503c\u4e3a6)\u3002\u5982\u679c\u6307\u5b9a <code>with timezone</code>\uff0c\u5219\u65f6\u533a\u4fe1\u606f\u4e5f\u4f1a\u88ab\u5b58\u50a8\u3002</li> <li><code>interval</code> : period of time</li> </ul> <p>Interval values can be added to date/time/timestamp values date, time functions: </p> <p><code>current_date()</code>, <code>current_time()</code></p> <p><code>year(x)</code>, <code>month(x)</code>, <code>day(x)</code>, <code>hour(x)</code>, <code>minute(x)</code>, <code>second(x)</code></p> <p>\u53ef\u4ee5\u4ece date/time/timestamp \u4e2d\u63d0\u53d6\u51fa\u5e74\u6708\u65e5\u65f6\u5206\u79d2</p> Example <p>date '2005-7-27'</p> <p>time '09:00:30'</p> <p>timestamp '2005-7-27 09:00:30.75'</p> <p>interval '1' day</p> <p>Subtracting a date/time/timestamp value from another gives an interval value.</p> <p>\u6211\u4eec\u53ef\u4ee5\u5229\u7528 <code>extract(field from d)</code> \u6765\u4ece <code>date</code> \u6216 <code>time</code> \u503c <code>d</code> \u4e2d\u63d0\u53d6\u51fa\u5355\u72ec\u7684\u57df\uff0c\u8fd9\u91cc\u7684\u57df(<code>field</code>)\u53ef\u4ee5\u662f <code>year</code> \u3001 <code>month</code> \u3001 <code>day</code> \u3001<code>hour</code>\u3001<code>minute</code> \u6216 <code>second</code> \u4e2d\u7684\u4e00\u79cd\u3002\u65f6\u533a\u4fe1\u606f\u53ef\u4ee5\u7528 <code>timezone hour</code> \u548c <code>timezone minute</code> \u6765\u63d0\u53d6\u3002</p> <p>SQL \u5b9a\u4e49\u4e86\u4e00\u4e9b\u51fd\u6570\u6765\u83b7\u53d6\u5f53\u524d\u7684\u65e5\u671f\u548c\u65f6\u95f4\u3002\u4f8b\u5982:</p> <ul> <li><code>current date</code> \u8fd4\u56de\u5f53\u524d\u65e5\u671f </li> <li><code>current time</code> \u8fd4\u56de\u5f53\u524d\u65f6\u95f4(\u5e26\u6709\u65f6\u533a)\uff0c</li> <li><code>localtime</code> \u8fd4\u56de\u5f53\u524d\u7684\u672c\u5730\u65f6\u95f4(\u4e0d\u5e26\u65f6\u533a)</li> <li><code>current timestamp</code> (\u5e26\u6709\u65f6\u533a)\u4ee5\u53ca <code>localtimestamp</code> (\u672c\u5730\u65e5\u671f\u52a0\u65f6\u95f4\uff0c\u4e0d\u5e26\u65f6\u533a)\u8fd4\u56de\u65f6\u95f4\u6233\uff08\u65e5\u671f\u52a0\u4e0a\u65f6\u95f4\uff09\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#type-conversion-and-formatting-functions","title":"Type Conversion and Formatting Functions","text":"<p>\u867d\u7136\u7cfb\u7edf\u4f1a\u81ea\u52a8\u6267\u884c\u67d0\u4e9b\u6570\u636e\u7c7b\u578b\u7684\u8f6c\u6362( <code>conversion</code> )\uff0c\u4f46\u5176\u4ed6\u7684\u8f6c\u6362\u9700\u8981\u663e\u5f0f\u8bf7\u6c42\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f62\u5982 <code>cast(e as t)</code> \u7684\u8868\u8fbe\u5f0f\u6765\u5c06\u8868\u8fbe\u5f0f <code>e</code> \u8f6c\u6362\u4e3a\u7c7b\u578b <code>t</code> \u3002\u53ef\u80fd\u9700\u8981\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u6765\u6267\u884c\u7279\u5b9a\u7684\u64cd\u4f5c\u6216\u5f3a\u5236\u4fdd\u8bc1\u7279\u5b9a\u7684\u6392\u5e8f\u6b21\u5e8f\u3002</p> <p>\u4f8b\u5982\uff0c\u8bf7\u8003\u8651 <code>instructor</code> \u7684 <code>ID</code> \u5c5e\u6027\uff0c\u6211\u4eec\u5df2\u5c06\u5176\u6307\u5b9a\u4e3a\u5b57\u7b26\u4e32(<code>varchar(5)</code>)\u3002\u5982\u679c\u6211\u4eec\u6309\u6b64\u5c5e\u6027\u6392\u5e8f\u8f93\u51fa\uff0c\u5219 <code>ID</code> '11111' \u4f4d\u4e8e <code>ID</code> '9' \u4e4b\u524d\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5b57\u7b26 '1' \u5728 '9' \u4e4b\u524d\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5199:</p> <pre><code>select cast(ID as numeric(5))as inst_id\nfrom instructor\norder by inst_id\n</code></pre> <p>\u5176\u7ed3\u679c\u5c06\u4f1a\u662f\u6211\u4eec\u60f3\u8981\u7684\u6392\u5e8f\u6b21\u5e8f\u3002</p> <p>\u4e3a\u67e5\u8be2\u7ed3\u679c\u663e\u793a\u7684\u6570\u636e\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7c7b\u578b\u7684\u8f6c\u6362\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6570\u503c\u4ee5\u7279\u5b9a\u4f4d\u6570\u7684\u6570\u5b57\u6765\u663e\u793a\uff0c\u6216\u8005\u6570\u636e\u4ee5\u7279\u5b9a\u683c\u5f0f(\u4f8b\u5982\u6708-\u65e5-\u5e74\u6216\u65e5-\u6708-\u5e74)\u6765\u663e\u793a\u3002</p> <p>\u663e\u793a\u683c\u5f0f\u7684\u8fd9\u4e9b\u53d8\u5316\u5e76\u4e0d\u662f\u6570\u636e\u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u800c\u662f\u683c\u5f0f\u7684\u8f6c\u6362\u3002</p> <p>\u6570\u636e\u5e93\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5404\u79cd\u683c\u5f0f\u5316\u51fd\u6570\u4e14\u76f8\u5173\u7ec6\u8282\u56e0\u4e3b\u6d41\u7cfb\u7edf\u800c\u5f02\u3002</p> <ul> <li>MySQL\u63d0\u4f9b\u4e86 <code>format</code> \u51fd\u6570\u3002</li> <li>Oracle\u548cPostgreSQL\u63d0\u4f9b\u4e86\u7ec4\u51fd\u6570: <code>to char</code>\u3001<code>to number</code> \u548c <code>to date</code>\u3002</li> <li>SQL Server \u63d0\u4f9b\u4e86 <code>convert</code> \u51fd\u6570\u3002</li> </ul> <p>\u7ed3\u679c\u663e\u793a\u4e2d\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\u5904\u7406\u7a7a\u503c\u3002\u5728\u672c\u4e66\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 null \u6765\u4f7f\u9605\u8bfb\u66f4\u6e05\u6670\uff0c\u4f46\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e2d\u7f3a\u7701\u8bbe\u7f6e\u53ea\u662f\u5c06\u5b57\u6bb5\u7559\u7a7a\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>coalesce</code> \u51fd\u6570\u6765\u9009\u62e9\u5728\u67e5\u8be2\u7ed3\u679c\u4e2d\u8f93\u51fa\u7a7a\u503c\u7684\u65b9\u5f0f\u3002</p> <p>\u8be5\u51fd\u6570\u63a5\u6536\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570(\u6240\u6709\u53c2\u6570\u5fc5\u987b\u662f\u76f8\u540c\u7684\u7c7b\u578b)\uff0c\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u975e\u7a7a\u53c2\u6570\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u663e\u793a\u6559\u5e08\u7684 <code>ID</code> \u548c\u5de5\u8d44\uff0c\u4f46\u662f\u5c06\u7a7a\u5de5\u8d44\u663e\u793a\u4e3a0\uff0c\u6211\u4eec\u4f1a\u5199:</p> <pre><code>select ID,coalesce(salary,0)as salary \nfrom instructor\n</code></pre> <p><code>coalesce</code> \u7684\u4e00\u4e2a\u9650\u5236\u662f\u8981\u6c42\u6240\u6709\u53c2\u6570\u5fc5\u987b\u662f\u76f8\u540c\u7684\u7c7b\u578b\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5c06\u7a7a\u5de5\u8d44\u663e\u793a\u4e3a 'N/A' \u4ee5\u8868\u793a\"\u4e0d\u53ef\u7528\"\uff0c\u6211\u4eec\u5c06\u65e0\u6cd5\u4f7f\u7528 <code>coalesce</code>\u3002</p>"},{"location":"Computer_Science/DB/Chapter3/#default-values","title":"Default Values","text":"<p>SQL \u5141\u8bb8\u4e3a\u5c5e\u6027\u6307\u5b9a\u7f3a\u7701(<code>default</code>)\u503c\uff0c\u5982\u4e0b\u9762\u7684 <code>create table</code> \u8bed\u53e5\u6240\u793a:</p> <pre><code>create table student\n(ID       varchar (5),\nname      varchar (20) not null,\ndept_name varchar(20),\ntot_cred  numeric (3,0) default 0,\nprimary key (ID));\n</code></pre> <p><code>tot_cred</code> \u5c5e\u6027\u7684\u7f3a\u7701\u503c\u88ab\u58f0\u660e\u4e3a0\u3002\u5176\u7ed3\u679c\u662f\uff0c\u5f53\u4e00\u4e2a\u5143\u7ec4\u88ab\u63d2\u5165 <code>student</code> \u5173\u7cfb\u4e2d\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u51fa <code>tot_cred</code> \u5c5e\u6027\u7684\u503c\uff0c\u90a3\u4e48\u8be5\u5143\u7ec4\u5728\u6b64\u5c5e\u6027\u4e0a\u7684\u53d6\u503c\u5c31\u88ab\u7f6e\u4e3a0\u3002</p>"},{"location":"Computer_Science/DB/Chapter3/#create-table-construct","title":"Create Table Construct","text":"<p>An SQL relation is defined using the create table command : </p> <p>create table \\(r(A_1 \\ D_1, A_2 \\ D_2, \\cdots , A_n \\ D_n,(integrity_constraint_1),\\cdots,(integrity_constraint_k))\\)</p> <ul> <li><code>r</code> is the name of the relation</li> <li>each \\(A_i\\) is an attribute name in the schema of relation r</li> <li>\\(D_i\\) is the data type of values in the domain of attribute \\(A_i\\)</li> </ul> Example <pre><code>create table instructor(\n    ID char(5),\n    name varchar(20) not null,\n    dept_name varchar(20),\n    salary numeric(8,2))\ninsert into instructor values('10211', 'Smith', 'Biology', 66000); /* legal */\ninsert into instructor values ('10211', null, 'Biology', 66000); /* illegal */\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#integrity-constraints-in-create-table","title":"Integrity Constraints in Create Table","text":"<ul> <li>not null</li> <li>primary key \\((A_1, \\cdots, A_n)\\)</li> <li>foreign key \\((A_m, \\cdots, A_n) \\ references \\ r\\)</li> </ul> Declare ID as the primary key for instructor <pre><code>create table instructor (\n    ID char(5),\n    name varchar(20) not null,\n    dept_name varchar(20),\n    salary numeric(8,2),\n    primary key (ID),\n    foreign key (dept_name) references department)\n</code></pre> <ul> <li>primary key declaration on an attribute automatically ensures not null</li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#and-a-few-more-relation-definitions","title":"And a Few More Relation Definitions","text":"<pre><code>create table student (\n    ID varchar(5),\n    name varchar(20) not null,\n    dept_name varchar(20),\n    tot_cred numeric(3,0) default 0\uff0c\n    primary key (ID),\n    foreign key (dept_name) references department);\n</code></pre> <pre><code>create table takes (\n    ID varchar(5),\n    course_id varchar(8),\n    sec_id varchar(8),\n    semester varchar(6),\n    year numeric(4,0),\n    grade varchar(2),\n    primary key (ID, course_id, sec_id, semester, year),\n    foreign key (ID) references student,\n    foreign key (course_id, sec_id, semester, year) references section );\n</code></pre> <p>Note</p> <ol> <li> <p><code>DEFAULT</code> \u5173\u952e\u5b57\u7528\u4e8e\u6307\u5b9a\u5217\u7684\u9ed8\u8ba4\u503c\u3002\u5f53\u63d2\u5165\u65b0\u8bb0\u5f55\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4e3a\u8be5\u5217\u63d0\u4f9b\u503c\uff0c\u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002</p> </li> <li> <p>sec_id can be dropped from primary key above, to ensure a student cannot be registered for two sections of the same course in the same semester.</p> </li> </ol>"},{"location":"Computer_Science/DB/Chapter3/#and-more-still","title":"And more still","text":"<pre><code>create table course (\n    course_id varchar(8) primary key,\n    title varchar(50),\n    dept_name varchar(20),\n    credits numeric(2,0),\n    foreign key (dept_name) references department (dept_name));\n    foreign key (dept_name) references department\n    on delete cascade |set null |restrict |set default\n    on update cascade |set null |restrict |set default\n</code></pre> <p>\u88ab\u5f15\u7528\u6389\u7684\u5143\u7ec4\uff0c\u5982\u679c\u5220\u6389\u4e86\uff0c\u7ea7\u8054\uff08\u591a\u7c73\u8bfa\u8fde\u9501\u53cd\u5e94\uff09\u5220\u9664\uff0c\u6216\u8005\u8bbe\u7f6e\u4e3anull\uff0c\u6216\u8005\u62d2\u7edd\u5220\u9664\uff0c\u6216\u8005\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u503c\u3002</p>"},{"location":"Computer_Science/DB/Chapter3/#drop-and-alter-table-constructs","title":"Drop and Alter Table Constructs","text":"<ul> <li><code>drop table student</code> : Deletes the table and its contents.</li> <li><code>delete from student</code> : Deletes all contents of table, but retains table.</li> <li><code>alter table</code> : <ul> <li><code>alter table r add A D</code> :<ul> <li>where A is the name of the attribute to be added to relation r and D is the domain of A.</li> <li>All tuples in the relation are assigned null as the value for the new attribute. </li> <li>e.g. <code>alter table student add resume varchar(256);</code></li> </ul> </li> <li><code>alter table r drop A</code> :<ul> <li>where A is the name of an attribute of relation r.</li> <li>Dropping of attributes not supported by many databases.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#sql-and-relational-algebra","title":"SQL and Relational Algebra","text":"<p>e.g. </p> <pre><code>select A1, A2, ... An\nfrom r1, r2, ..., rm\nwhere P\n</code></pre> <p>is equivalent to the following expression in multiset relational algebra</p> \\[\\Pi_{A1, A2, ..., An}(r1 \\times r2 \\times ... \\times rm)\\] <pre><code>select A1, A2, sum(A3)\nfrom r1, r2, ..., rm\nwhere P\ngroup by A1, A2\n</code></pre> <p>is equivalent to the following expression in multiset relational algebra</p> \\[_{A1,A2} \\ G_{sum(A3)}(\\sigma_P(r1 \\times r2 \\times ... \\times rm))\\]"},{"location":"Computer_Science/DB/Chapter3/#basic-query-structure","title":"Basic Query Structure","text":"<p>The SQL data-manipulation language (DML) provides the ability to query information, and insert, delete and update tuples.</p> <p>A typical SQL query has the form:</p> <pre><code>select A1, A2, ..., An\nfrom r1, r2, ..., rm\nwhere P\n</code></pre> <ul> <li><code>A1</code> represents an attribute</li> <li><code>r1</code> represents a relation</li> <li><code>P</code> is a predicate</li> </ul> <p>Info</p> <p>\u5728 <code>sql</code> \u4e2d\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u8fd9\u662f\u5386\u53f2\u9057\u7559\u95ee\u9898\u3002</p> <p>The result of an SQL query is a relation.</p>"},{"location":"Computer_Science/DB/Chapter3/#the-select-clause","title":"The <code>select</code> Clause","text":"<p>The <code>select</code> clause list the attributes desired in the result of a query, corresponds to the projection operation of the relational algebra.</p> <p>Example: find the names of all instructors:</p> answer <pre><code>select name\nfrom instructor\n</code></pre> <p>SQL allows duplicates in relations as well as in query results. </p> <ul> <li>To force the elimination of duplicates, insert the keyword  <code>distinct</code> after select.</li> </ul> <p>Example: Find the names of all departments with instructor, and remove duplicates</p> answer <pre><code>select distinct dept_name\nfrom instructor\n</code></pre> <ul> <li>The keyword <code>all</code> specifies that duplicates not be removed.</li> </ul> answer <pre><code>select all dept_name\nfrom instructor\n</code></pre> <ul> <li>An asterisk(<code>*</code>) in the select clause denotes \"all attributes\".</li> </ul> answer <pre><code>select *\nfrom instructor\n</code></pre> <p>The select clause can contain arithmetic expressions involving the operation, +, \u2013, *, and /, and operating on constants or attributes of tuples.</p> <p>Example: Find  a relation that is the same as the instructor relation, except that the value of the attribute salary is divided by 12.</p> answer <pre><code>select ID, name, dept_name, salary/12\nfrom instructor\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#the-where-clause","title":"The <code>where</code> Clause","text":"<p>The <code>where</code> clause specifies conditions that the result must satisfy.</p> <p>Corresponds to the selection predicate of the relational  algebra.</p> <p>Example: To find all instructors in Comp. Sci. dept with salary &gt; 80000</p> answer <pre><code>select name\nfrom instructor\nwhere dept_name = 'Comp. Sci.' and salary &gt; 80000\n</code></pre> <p>Comparison results can be combined using the logical connectives and, or, and not. Comparisons can be applied to results of arithmetic expressions.</p> <p>SQL includes a between comparison operator.</p> <p>Example: Find the names of all instructors with salary between \\(\\$90,000 \\ and \\ \\$100,000 \\ (that \\ is, \\ge \\$90,000 \\ and \\ \\le \\ \\$100,000)\\)</p> answer <pre><code>select name\nfrom instructor\nwhere salary between 90000 and 100000\n</code></pre> <p>Example: Tuple comparison</p> <p>SQL \u5141\u8bb8\u6211\u4eec\u7528\u7b26\u53f7 (\\(v_1, \\ldots, v_n\\)) \u6765\u8868\u793a\u4e00\u4e2a\u5305\u542b\u503c \\(v_1, \\ldots, v_n\\) \u7684 n \u7ef4\u5143\u7ec4\u3002\u8be5\u7b26\u53f7\u88ab\u79f0\u4e3a\u884c\u6784\u9020\u5668(row constructor)\u3002\u5728\u5143\u7ec4\u4e0a\u53ef\u4ee5\u4f7f\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff0c\u5e76\u6309\u5b57\u5178\u987a\u5e8f\u8fdb\u884c\u6bd4\u8f83\u8fd0\u7b97\u3002</p> answer <pre><code>select name, course_id\nfrom instructor, teaches\nwhere (instructor.ID, dept_name) = (teaches.ID, 'Biology');\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#the-from-clause","title":"The <code>from</code> Clause","text":"<p>The <code>from</code> clause lists the relations involved in the query.</p> <p>Corresponds to the Cartesian product operation of the relational algebra.</p> <p>Example: Find the Cartesian product instructor \\(\\times\\) teaches.</p> answer <pre><code>select *\nfrom instructor, teaches\n</code></pre> <p>Cartesian product not very useful directly, but useful combined with where-clause condition (selection operation in relational algebra).</p>"},{"location":"Computer_Science/DB/Chapter3/#joins","title":"<code>Joins</code>","text":"<p>Example: For all instructors who have taught some course, find their names and the course ID of the courses they taught.</p> answer <pre><code>select name, course_id\nfrom instructor, teaches\nwhere instructor.ID = teaches.ID\n</code></pre> <p>Example: Find the course ID, semester, year and title of each course offered by the Comp. Sci. department.</p> answer <pre><code>select section.course_id, semester, year, title\nfrom section, course\nwhere section.course_id = course.course_id and dept_name = 'Comp. Sci.'\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#natural-join","title":"<code>Natural Join</code>","text":"<p>Natural join matches tuples with the same values for all common attributes, and retains only one copy of each common column.</p> <p>Example: </p> <pre><code>select name, course_id\nfrom instructor, teaches\nwhere instructor.ID = teaches.ID;\n\nselect name, course_id\nfrom instructor natural join teaches;\n</code></pre> <p>Attention</p> <p>Beware of unrelated attributes with same name which get equated incorrectly</p> <p>Example: List the names of instructors along with the titles of courses that they teach.</p> <p>course(course_id, title, dept_name, credits) teaches(ID, course_id, sec_id,semester, year) instructor(ID,name, dept_name, salary)</p> Incorrect version <pre><code>select name, title\nfrom instructor natural join teaches natural join course;\n</code></pre> Correct version <pre><code>select name, title\nfrom instructor natural join teaches, course\nwhere teaches.course_id = course.course_id;\n</code></pre> <pre><code>select name, title\nfrom (instructor natural join teacher) join course using(course_id);\n</code></pre> <pre><code>select name, title\nfrom instructor\uff0cteaches, course\nwhere instructor.ID = teaches .ID and teaches.course_id  = course.course_id;\n</code></pre> <p>Example: Find students who takes courses across his/her department.</p> <p>student( ID, name, dept_name, tot_cred) takes ( ID, course_id, sec_id, semester, year.grade) course( course_id, title, dept_name, credits)</p> answer <pre><code>select distinct student.id\nfrom (student natural join takes) join course using (course_id)\nwhere student.dept_name &lt;&gt; course.dept_name\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#the-rename-operation","title":"The <code>Rename</code> Operation","text":"<p>The SQL allows renaming relations and attributes using the <code>as</code> clause:</p> <p>old-name as new-name</p> <pre><code>select ID, name, salary/12 as monthly_salary\nfrom instructor\n</code></pre> <p>Find the names of all instructors who have a higher salary than some instructor in 'Comp. Sci'.</p> answer <pre><code>select distinct T. name\nfrom instructor as T, instructor as S\nwhere T.salary &gt; S.salary and S.dept_name = 'Comp. Sci.'\n</code></pre> <p>\u5728\u4e0a\u8ff0\u67e5\u8be2\u4e2d\uff0cT \u548c S \u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f instructor \u5173\u7cfb\u7684\u4e24\u4efd\u62f7\u8d1d\uff0c\u4f46\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5b83\u4eec\u88ab\u58f0\u660e\u4e3a instructor \u5173\u7cfb\u7684\u522b\u540d\uff0c\u4e5f\u5c31\u662f\u53e6\u5916\u7684\u540d\u79f0\u3002\u50cfT\u548cS\u90a3\u6837\u88ab\u7528\u6765\u91cd\u547d\u540d\u5173\u7cfb\u7684\u6807\u8bc6\u5728 SQL\u6807\u51c6\u4e2d\u88ab\u79f0\u4f5c\u76f8\u5173\u540d\u79f0 (correlation name) \uff0c\u4f46\u901a\u5e38\u4e5f\u88ab\u79f0\u4f5c\u8868\u522b\u540d (table alias)\u3002\u6216\u76f8\u5173\u53d8\u91cf (correlation variable) \uff0c\u6216\u5143\u7ec4\u53d8\u91cf(tuple variable)\u3002</p>"},{"location":"Computer_Science/DB/Chapter3/#string-operations","title":"<code>String</code> Operations","text":"<p>SQL includes a string-matching operator for comparisons on character strings. The operator <code>like</code> uses patterns that are described using two special characters:</p> <ul> <li>percent (<code>%</code>). The <code>%</code> character matches any substring.</li> <li>underscore (<code>_</code>). The <code>_</code> character matches any character.</li> </ul> <p>Example: Find the names of all instructors whose name includes the substring \"dar\".</p> answer <pre><code>select name\nfrom instructor\nwhere name like '%dar%'\n</code></pre> <p>Example: Match the string \"100 %\"</p> answer <pre><code>like '100 \\%' escape '\\' \nlike '100 \\%' \nlike '100 #%' escape '#'\n</code></pre> <p>\u6211\u4eec\u5728 <code>LIKE</code> \u6bd4\u8f83\u8fd0\u7b97\u4e2d\u4f7f\u7528 <code>ESCAPE</code> \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u8f6c\u4e49\u5b57\u7b26\u3002</p> <p>Patters are case sensitive.</p> <p>Pattern matching examples:</p> <ul> <li>'Intro%' matches any string beginning with \"Intro\".</li> <li>'%Comp%' matches any string containing \"Comp\" as a substring.</li> <li>' _ ' matches any string of exactly three characters.</li> <li>'_ _ _ %' matches any string of at least three characters.</li> </ul> <p>SQL supports a variety of string operations (\u4e0d\u540c\u6570\u636e\u5e93\u7cfb\u7edf\u6240\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u51fd\u6570\u96c6\u662f\u4e0d\u540c\u7684) such as</p> <ul> <li>concatenation \uff08using <code>||</code>\uff09 \u7528\u4e8e\u8fde\u63a5\u5b57\u7b26\u4e32</li> <li>converting from upper to lower case (and vice versa)  \u5927\u5c0f\u5199\u8f6c\u6362(<code>upper(s)</code>, <code>lower(s)</code>)</li> <li>\u53bb\u6389\u5b57\u7b26\u540e\u9762\u7684\u7a7a\u683c (<code>trim(s)</code>)</li> <li>finding string length, extracting substrings, etc.</li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#ordering-the-display-of-tuples","title":"Ordering the Display of Tuples","text":"<p>List in alphabetic order the names of all instructors</p> answer <pre><code>select distinct name\nfrom instructor\norder by name\n</code></pre> <p>We may specify desc for descending(\u964d) order or asc forascending\uff08\u5347\uff09 order, for each attribute; ascending order is the default.</p> <p>Example: <code>order by name desc</code></p> <p>Can sort on multiple attributes</p> <p>Example: <code>order by dept_name, name</code></p> <p>\u67e5\u8be2\u7ed3\u679c\u4f1a\u6309\u7167\u4ee5\u4e0b\u89c4\u5219\u6392\u5e8f\uff1a\u9996\u5148\u6309 dept_name \u6392\u5e8f\uff1a\u7ed3\u679c\u96c6\u4f1a\u6839\u636e dept_name \u5217\u7684\u503c\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff08\u9ed8\u8ba4\u662f\u5347\u5e8f\uff0c\u5373\u4ece A \u5230 Z\uff09\u3002\u5982\u679c dept_name \u76f8\u540c\uff0c\u518d\u6309 name \u6392\u5e8f\uff1a\u5728 dept_name \u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u96c6\u4f1a\u6839\u636e name \u5217\u7684\u503c\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\u3002</p>"},{"location":"Computer_Science/DB/Chapter3/#the-limit-clause","title":"The limit Clause","text":"<p>The <code>limit</code> clause can be used to constrain the number of rows returned by the select statement.</p> <p><code>limit</code> clause takes one or two numeric arguments, which must both be nonnegative integer constants: </p> <ul> <li><code>limit offset, row_count</code></li> <li><code>limit row_count == limit 0, row_count</code></li> </ul> <p>Example: List names of instructors whose salary is among top 3. </p> answer <pre><code>select name\nfrom instructor\norder by salary desc\nlimit 3\uff1b // limit 0,3\n</code></pre> <ul> <li><code>row_count</code> : \u9650\u5236\u67e5\u8be2\u7ed3\u679c\u8fd4\u56de\u7684\u884c\u6570\u3002</li> <li><code>offset</code> : \u6307\u5b9a\u4ece\u67e5\u8be2\u7ed3\u679c\u7684\u7b2c\u51e0\u884c\u5f00\u59cb\u8fd4\u56de\u6570\u636e\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#duplicates","title":"Duplicates","text":"<p>In relations with duplicates, SQL can define how many copies of tuples appear in the result.</p> <p>Multiset (\u591a\u91cd\u96c6) versions of some of the relational algebra operators \u2013 given multiset relations \\(r_1\\) and \\(r_2\\) .</p>"},{"location":"Computer_Science/DB/Chapter3/#set-operations","title":"Set Operations","text":"<p>\u8fd9\u4e9b\u662f\u771f\u6b63\u7684\u96c6\u5408\u64cd\u4f5c\uff0c\u662f\u9700\u8981\u53bb\u91cd\u7684\u3002</p> <pre><code>(select course_id from section where sem = 'Fall' and year = 2009)\nunion\n(select course_id from section where sem = 'Spring' and year = 2010)\n\n(select course_id from section where sem = 'Fall' and year = 2009)\nintersect\n(select course_id from section where sem = 'Spring' and year = 2010)\n\n(select course_id from section where sem = 'Fall' and year = 2009)\nexcept\n(select course_id from section where sem = 'Spring' and year = 2010)\n</code></pre> <p>\u5982\u679c\u60f3\u8981\u4e0d\u53bb\u91cd\uff0c\u5219\u9700\u8981\u4f7f\u7528 <code>all</code> \u3002</p> <p>Suppose a tuple occurs m times in r and n times in s, then, it occurs:</p> <ul> <li><code>m + n</code> times in r union all s</li> <li><code>min(m,n)</code> times in r intersect all s</li> <li><code>max(0, m \u2013 n)</code> times in r except all s</li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#null-values","title":"Null Values","text":"<p><code>null</code> signifies an unknown value or that a value does not exist.</p> <p>The result of any arithmetic expression involving null is null</p> <p>Example: 5 + null returns null</p> <p>The predicate is null can be used to check for null values.</p> <p>Example: Find all instructors whose salary is null.</p> answer <pre><code>select name\nfrom instructor\nwhere salary is null\n</code></pre> <pre><code>select sum (salary)\nfrom instructor\n</code></pre> <ul> <li>Above statement ignores null amounts</li> <li>Result is null if there is no non-null amount</li> <li>All aggregate operations except count(*) ignore tuples with null values on the aggregated attributes</li> <li>Comparisons with null values return the special truth value: unknown.</li> </ul> <p>Three-valued logic using the truth value unknown:</p> <ol> <li><code>OR</code></li> </ol> <ul> <li>(unknown or true) = true</li> <li>(unknown or false) = unknown</li> <li>(unknown or unknown) = unknown</li> </ul> <ol> <li><code>AND</code></li> </ol> <ul> <li>(true and unknown) = unknown</li> <li>(false and unknown) = false</li> <li>(unknown and unknown) = unknown</li> </ul> <ol> <li><code>NOT</code></li> </ol> <ul> <li>(not unknown) = unknown</li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#aggregate-functions","title":"Aggregate Functions","text":"<p>Find the names and average salaries of all departments whose average salary is greater than 42000</p> answer <pre><code>select dept_name, avg(salary)\nfrom instructor\ngroup by dept_name\nhaving avg(salary) &gt; 42000\n</code></pre> <ul> <li><code>having</code> \u4e5f\u662f\u7b5b\u9009\u6761\u4ef6\uff0c\u4f46\u662f\u662f\u5bf9\u7ec4\u8fdb\u884c\u7b5b\u9009</li> </ul> about distinct <p><code>SQL</code> \u4e0d\u5141\u8bb8\u5728\u7528 <code>count(*)</code> \u65f6\u4f7f\u7528 <code>distinct</code> \u3002\u5728\u7528 <code>max</code> \u548c <code>min</code> \u65f6\u4f7f\u7528 <code>distinct</code> \u662f\u5408\u6cd5\u7684,\u5c3d\u7ba1\u7ed3\u679c\u5e76\u65e0\u5dee\u522b\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57 <code>all</code> \u66ff\u4ee3 <code>distinct</code> \u6765\u8868\u660e\u8981\u4fdd\u7559\u91cd\u590d\u9879\uff0c\u4f46\u65e2\u7136 <code>all</code> \u662f\u7f3a\u7701\u7684\uff0c\u5c31\u6ca1\u5fc5\u8981\u8fd9\u4e48\u505a\u4e86\u3002</p> <p>\u7efc\u5408\u7248\u672c:</p> <pre><code>select dept_name, count (*) as cnt\nfrom instructor\nwhere salary &gt;=100000\ngroup by dept_name\nhaving count (*) &gt; 10\norder by cnt;\n</code></pre> <p>\u8fd9\u6761 SQL \u67e5\u8be2\u8bed\u53e5\u7684\u4f5c\u7528\u662f\u4ece instructor \u8868\u4e2d\u7b5b\u9009\u51fa\u5de5\u8d44 (salary) \u5927\u4e8e\u7b49\u4e8e 100,000 \u7684\u6559\u5e08\uff0c\u6309\u90e8\u95e8 (dept_name) \u5206\u7ec4\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u90e8\u95e8\u7684\u6559\u5e08\u4eba\u6570\uff0c\u5e76\u7b5b\u9009\u51fa\u6559\u5e08\u4eba\u6570\u5927\u4e8e 10 \u7684\u90e8\u95e8\uff0c\u6700\u540e\u6309\u6559\u5e08\u4eba\u6570\u5347\u5e8f\u6392\u5e8f\u3002</p> <p>\u4e0e <code>select</code> \u5b50\u53e5\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u4efb\u4f55\u51fa\u73b0\u5728 <code>having</code> \u5b50\u53e5\u4e2d\uff0c\u4f46\u6ca1\u6709\u88ab\u805a\u96c6\u7684\u5c5e\u6027\u5fc5\u987b\u51fa\u73b0\u5728 <code>groupby</code> \u5b50\u53e5\u4e2d\uff0c\u5426\u5219\u67e5\u8be2\u5c31\u662f\u9519\u8bef\u7684\u3002</p> <p>\u5305\u542b\u805a\u96c6\u3001<code>group by</code> \u6216 <code>having</code> \u5b50\u53e5\u7684\u67e5\u8be2\u7684\u542b\u4e49\u53ef\u901a\u8fc7\u4e0b\u8ff0\u8fd0\u7b97\u5e8f\u5217\u6765\u5b9a\u4e49:</p> <ol> <li>\u4e0e\u4e0d\u5e26\u805a\u96c6\u7684\u67e5\u8be2\u60c5\u51b5\u7c7b\u4f3c\uff0c\u9996\u5148\u6839\u636e <code>from</code> \u5b50\u53e5\u6765\u8ba1\u7b97\u51fa\u4e00\u4e2a\u5173\u7cfb\u3002</li> <li>\u5982\u679c\u51fa\u73b0\u4e86 <code>where</code> \u5b50\u53e5\uff0c<code>where</code> \u5b50\u53e5\u4e2d\u7684\u8c13\u8bcd\u5c06\u5e94\u7528\u5230 <code>from</code> \u5b50\u53e5\u7684\u7ed3\u679c\u5173\u7cfb\u4e0a</li> <li>\u5982\u679c\u51fa\u73b0\u4e86 <code>group by</code> \u5b50\u53e5\uff0c\u6ee1\u8db3 <code>where</code> \u8c13\u8bcd\u7684\u5143\u7ec4\u901a\u8fc7 <code>group by</code> \u5b50\u53e5\u88ab\u653e\u5165\u5206\u7ec4\u4e2d\u3002\u5982\u679c\u6ca1\u6709 <code>group by</code> \u5b50\u53e5\uff0c\u6ee1\u8db3 <code>where</code> \u8c13\u8bcd\u7684\u6574\u4e2a\u5143\u7ec4\u96c6\u88ab\u5f53\u6210\u4e00\u4e2a\u5206\u7ec4\u3002</li> <li>\u5982\u679c\u51fa\u73b0\u4e86 <code>having</code> \u5b50\u53e5\uff0c\u5b83\u5c06\u5e94\u7528\u5230\u6bcf\u4e2a\u5206\u7ec4\u4e0a;\u4e0d\u6ee1\u8db3 <code>having</code> \u5b50\u53e5\u8c13\u8bcd\u7684\u5206\u7ec4\u5c06\u88ab\u53bb\u6389\u3002</li> <li><code>select</code> \u5b50\u53e5\u5229\u7528\u5269\u4e0b\u7684\u5206\u7ec4\u4ea7\u751f\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u5143\u7ec4\uff0c\u5373\u5728\u6bcf\u4e2a\u5206\u7ec4\u4e0a\u5e94\u7528\u805a\u96c6\u51fd\u6570\u6765\u5f97\u5230\u5355\u4e2a\u7ed3\u679c\u5143\u7ec4\u3002</li> </ol> \u6613\u9519 <pre><code>SELECT dept_name,ID, avg(salary)\nFROM instructor\nGROUP BY dept_name;\n</code></pre> <p>\u8bed\u53e5\u5728 <code>SELECT</code> \u4e2d\u5305\u542b\u4e86 <code>ID</code> \u5217\uff0c\u4f46 <code>GROUP BY</code> \u4ec5\u6309 <code>dept_name</code> \u5206\u7ec4\u3002<code>ID</code> \u65e2\u672a\u5305\u542b\u5728 <code>GROUP BY</code> \u5b50\u53e5\u4e2d\uff0c\u4e5f\u672a\u4f7f\u7528\u805a\u5408\u51fd\u6570\uff08\u5982 <code>MAX</code>\u3001<code>MIN</code>\uff09\uff0c\u5bfc\u81f4\u6570\u636e\u5e93\u65e0\u6cd5\u786e\u5b9a\u6bcf\u4e2a\u5206\u7ec4\u5e94\u8fd4\u56de\u54ea\u4e2a <code>ID</code>\u3002</p> <p>\u4fee\u6b63\u601d\u8def\uff1a</p> <ol> <li>\u79fb\u9664 ID \u5217\uff1a\u5982\u679c\u76ee\u6807\u53ea\u662f\u67e5\u8be2\u6bcf\u4e2a\u90e8\u95e8\u7684\u5e73\u5747\u5de5\u8d44\uff0c\u76f4\u63a5\u79fb\u9664 ID \u5217\u5373\u53ef\u3002</li> </ol> <pre><code>SELECT dept_name, AVG(salary)\nFROM instructor\nGROUP BY dept_name;\n</code></pre> <ol> <li>\u4fdd\u7559 ID \u7684\u66ff\u4ee3\u65b9\u6848\uff1a\u82e5\u9700\u8981\u663e\u793a\u90e8\u95e8\u4e2d\u7684\u67d0\u4e2a ID\uff08\u5982\u6700\u5927\u6216\u6700\u5c0f\u7684 ID\uff09\uff0c\u9700\u4f7f\u7528\u805a\u5408\u51fd\u6570\u3002</li> </ol> <pre><code>SELECT dept_name, MAX(ID) AS sample_id, AVG(salary)\nFROM instructor\nGROUP BY dept_name;\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#nested-subqueries","title":"Nested Subqueries","text":"<p>SQL provides a mechanism for the nesting of subqueries.</p> <p>SQL \u63d0\u4f9b\u4e86\u4e00\u79cd\u5d4c\u5957\u5b50\u67e5\u8be2\u7684\u673a\u5236\u3002</p> <p>A subquery is a select-from-where expression that is nested within another query.</p> <p>A common use of subqueries is to perform tests for :</p> <ul> <li>set membership</li> <li>set comparisons</li> <li>set cardinality</li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#set-membership","title":"Set Membership","text":"<p>Find courses offered in Fall 2009 and in Spring 2010</p> answer <pre><code>select distinct course_id\nfrom section\nwhere semester = 'Fall' and year= 2009 and \ncourse_id in (select course_id\n            from section\n            where semester = 'Spring' and year= 2010);\n</code></pre> <p>\u771f\u6b63\u6267\u884c\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u88ab\u4f18\u5316\u6389\u3002</p> <p>Find the total number of (distinct) students who have taken course sections taught by the instructor with ID 10101</p> answer <pre><code>select count (distinct ID)\nfrom takes\nwhere (course_id, sec_id, semester, year) in\n                (select course_id, sec_id, semester, year\n                from teaches\n                where teaches.ID= '10101');\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#set-comparison","title":"Set Comparison","text":"<p>Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.</p> answer <pre><code>select distinct T.name\nfrom instructor as T, instructor as S\nwhere T.salary &gt; S.salary and S.dept_name = 'Biology';\n</code></pre> <p>Same query using <code>&gt; some</code> clause</p> answer <pre><code>select name\nfrom instructor\nwhere salary &gt; some (select salary\n                    from instructor\n                    where dept_name = 'Biology');\n</code></pre> <p>Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.</p> answer <pre><code>select name\nfrom instructor\nwhere salary &gt; all (select salary\n                    from instructor\n                    where dept_name = 'Biology');\n</code></pre> <p>\"\u81f3\u5c11\u5fc5\u67d0\u4e00\u4e2a\u8981\u5927\"\u5728 SQL \u4e2d\u7528 <code>&gt; some</code> \u6765\u8868\u793a\u3002SQL \u4e5f\u5141\u8bb8\u4f7f\u7528 <code>&lt; some</code>\u3001<code>&lt;= some</code>\u3001<code>&gt;= some</code>\u3001<code>= some</code> \u548c <code>&lt;&gt; some</code> \u7684\u6bd4\u8f83\u3002</p> <p>&lt;&gt; some \u5e76\u4e0d\u7b49\u4ef7\u4e8e not in</p> <ol> <li>\u5bf9 NULL \u503c\u7684\u5904\u7406\u4e0d\u540c</li> </ol> <ul> <li><code>NOT IN</code> \u9047\u5230 <code>NULL</code> \u4f1a\u5931\u6548\u3002\u5982\u679c\u5b50\u67e5\u8be2\u7684\u7ed3\u679c\u4e2d\u5305\u542b <code>NULL</code>\uff0c\u5219 <code>NOT IN</code> \u7684\u903b\u8f91\u4f1a\u76f4\u63a5\u5931\u6548\u3002</li> </ul> <p>\u4f8b\u5982:</p> <pre><code>SELECT * FROM table \nWHERE col NOT IN (SELECT nullable_col FROM subquery);\n</code></pre> <p>\u5982\u679c\u5b50\u67e5\u8be2\u7684 <code>nullable_col</code> \u5b58\u5728 <code>NULL</code>\uff0c\u5219\u6574\u4e2a\u8868\u8fbe\u5f0f\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>col != val1 AND col != val2 AND ... AND col != NULL;\n</code></pre> <p>\u7531\u4e8e <code>col != NULL</code> \u7684\u7ed3\u679c\u662f <code>UNKNOWN</code>\uff08\u800c\u4e0d\u662f <code>TRUE</code>/<code>FALSE</code>\uff09\uff0c\u6700\u7ec8\u6574\u4e2a\u6761\u4ef6\u4f1a\u88ab\u5224\u5b9a\u4e3a <code>UNKNOWN</code>\uff0c\u5bfc\u81f4\u7ed3\u679c\u4e3a\u7a7a\u3002</p> <ul> <li><code>&lt;&gt; SOME</code> \u4f1a\u5ffd\u7565 <code>NULL</code></li> </ul> <p><code>&lt;&gt; SOME</code> \u7684\u8bed\u4e49\u662f\u201c\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u76ee\u6807\u503c\u201d\uff0c\u800c <code>NULL</code> \u7684\u6bd4\u8f83\uff08\u5982 <code>col &lt;&gt; NULL</code>\uff09\u4f1a\u88ab\u89c6\u4e3a <code>UNKNOWN</code>\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u6709\u6548\u503c\u7684\u5224\u65ad\u3002</p> <p>\u5373\u4f7f\u5b50\u67e5\u8be2\u5305\u542b <code>NULL</code>\uff0c\u53ea\u8981\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u975e <code>NULL</code> \u503c\u4e0d\u7b49\u4e8e <code>col</code>\uff0c\u6761\u4ef6\u5c31\u4f1a\u6210\u7acb\u3002</p> <ol> <li>\u5bf9\u7a7a\u5b50\u67e5\u8be2\u7684\u5904\u7406\u4e0d\u540c</li> </ol> <ul> <li><code>NOT IN</code> \u7684\u7a7a\u5b50\u67e5\u8be2\u4f1a\u8fd4\u56de\u6240\u6709\u884c</li> </ul> <p>\u5982\u679c\u5b50\u67e5\u8be2\u7ed3\u679c\u4e3a\u7a7a\uff0c<code>NOT IN</code> \u7684\u903b\u8f91\u7b49\u4ef7\u4e8e <code>col NOT IN</code> (\u7a7a\u96c6\u5408)\uff0c\u6b64\u65f6 <code>NOT IN</code> \u7684\u6761\u4ef6\u6052\u4e3a <code>TRUE</code>\uff0c\u56e0\u6b64\u4f1a\u8fd4\u56de\u6240\u6709\u884c\u3002</p> <ul> <li><code>&lt;&gt; SOME</code> \u7684\u7a7a\u5b50\u67e5\u8be2\u4f1a\u8fd4\u56de\u7a7a\u7ed3\u679c</li> </ul> <p>\u5982\u679c\u5b50\u67e5\u8be2\u4e3a\u7a7a\uff0c<code>&lt;&gt; SOME</code> \u7b49\u4ef7\u4e8e\u201c\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u7a7a\u96c6\u5408\u4e2d\u7684\u503c\u4e0d\u7b49\u4e8e col\u201d\uff0c\u7531\u4e8e\u6ca1\u6709\u503c\u53ef\u4ee5\u6bd4\u8f83\uff0c\u6761\u4ef6\u6052\u4e3a <code>FALSE</code>\uff0c\u56e0\u6b64\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u884c\u3002</p>"},{"location":"Computer_Science/DB/Chapter3/#scalar-subquery","title":"Scalar Subquery","text":"<p>Scalar (\u6807\u91cf) subquery is one which is used where a single value is expected.</p> <p>\u786e\u8ba4\u8fd4\u56de\u53ea\u6709\u4e00\u4e2a\u503c\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u3002\u5426\u5219\u3002 Runtime error if subquery returns more than one result tuple.</p> <pre><code>select name\nfrom instructor\nwhere salary * 10 &gt; \n    (select budget from department \n    where department.dept_name = instructor.dept_name)\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#test-for-empty-relations","title":"Test for Empty Relations","text":"<p>The exists construct returns the value true if the argument subquery is nonempty.</p> <ul> <li>exists \\(r \\leftrightarrow r \\neq \\emptyset\\)</li> <li>not exists \\(r \\leftrightarrow r = \\emptyset\\)</li> </ul> <p>Info</p> <p>\u6211\u4eec\u4e00\u822c\u901a\u8fc7\u4f7f\u7528 <code>not exists</code> \u7ed3\u6784\u6765\u6d4b\u8bd5\u5b50\u67e5\u8be2\u7ed3\u679c\u96c6\u4e2d\u662f\u5426\u4e0d\u5b58\u5728\u5143\u7ec4\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>not exists</code> \u7ed3\u6784\u6765\u6a21\u62df\u96c6\u5408\u5305\u542b(\u5373\u8d85\u96c6)\u8fd0\u7b97:\u53ef\u5c06\"\u5173\u7cfbA\u5305\u542b\u5173\u7cfbB\"\u5199\u6210<code>not exists(B except A)</code>\u3002</p>"},{"location":"Computer_Science/DB/Chapter3/#correlation-variables","title":"Correlation Variables","text":"<p>Yet another way of specifying the query \"Find all courses taught in both the Fall 2009 semester and in the Spring 2010 semester\"</p> answer <pre><code>select course_id\nfrom section as S\nwhere semester = 'Fall' and year = 2009 and \n    exists (select *\n        from section as T\n        where semester = 'Spring' and year= 2010 \n                and S.course_id= T.course_id);\n</code></pre> <p>Find all students who have taken all courses offered in the Biology department.</p> answer <pre><code>select distinct S.ID, S.name\nfrom student as S\nwhere not exists ((select course_id\n                from course\n                where dept_name = 'Biology')\n                except\n                (select T.course_id\n                from takes as T\n                where S.ID = T.ID));\n</code></pre> <p>Note that \\(X - Y = \\emptyset \\leftrightarrow X \\subseteq Y\\)</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>not exists</code> \u7ed3\u6784\u6765\u6d4b\u8bd5\u5b50\u67e5\u8be2\u7ed3\u679c\u96c6\u4e2d\u662f\u5426\u4e0d\u5b58\u5728\u5143\u7ec4\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>not exists</code> \u7ed3\u6784\u6765\u6a21\u62df\u96c6\u5408\u5305\u542b(\u5373\u8d85\u96c6)\u8fd0\u7b97:\u53ef\u5c06\"\u5173\u7cfbA\u5305\u542b\u5173\u7cfbB\"\u5199\u6210 <code>not exists(B except A)</code> \u3002</p> <p>Note : Cannot write this query using = all and its variants.</p>"},{"location":"Computer_Science/DB/Chapter3/#test-for-absence-of-duplicate-tuples","title":"Test for Absence of Duplicate Tuples","text":"<p>The <code>unique</code> construct tests whether a subquery has any duplicate tuples in its result.</p> <ul> <li>Evaluates to \u201ctrue\u201d on an empty set</li> </ul> <p>Example: Find all courses that were offered at most once in 2009.</p> answer <pre><code>select T.course_id\nfrom course as T\nwhere unique (select R.course_id\n            from section as R\n            where T.course_id= R.course_id \n                and R.year = 2009) ;\n</code></pre> <p>Info</p> <p>\u5b50\u67e5\u8be2\u91cc\u9762\u4e0d\u80fd\u52a0 <code>distinct</code> \uff0c\u53ea\u80fd\u52a0\u5728\u6700\u5916\u9762\u3002</p> <p>Example: Find all courses that were offered once in 2009.</p> answer <pre><code>select T.course_id\nfrom course as T\nwhere unique (select R.course_id\n            from section as R\n            where T.course_id= R.course_id \n                and R.year = 2009) \n        and exists (select R.course_id\n            from section as R\n            where T.course_id= R.course_id \n                and R.year = 2009) ;\n</code></pre> <p>another version</p> <pre><code>       and course_id in (select course_id\n            from section\n            where year = 2009) ;\n</code></pre> <p>Example: \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>not unique</code> \u7ed3\u6784\u6d4b\u8bd5\u4e00\u4e2a\u5b50\u67e5\u8be2\u7ed3\u679c\u4e2d\u662f\u5426\u5b58\u5728\u91cd\u590d\u5143\u7ec4\u3002</p> answer <pre><code>select T.course_id\nfrom course as T\nwhere not unique (select R.course_id\n            from section as R\n            where T.course_id= R.course_id \n                and R.year = 2007) ;\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#with-clause","title":"With Clause","text":"<p>The with clause provides a way of defining a temporary view whose definition is available only to the query in which the with clause occurs.</p> <p>Example: Find all departments with the maximum budget</p> answer <pre><code>with max_budget (value) as \n    (select max(budget)\n    from department)\nselect dept_name\nfrom department, max_budget\nwhere department.budget = max_budget.value;\n\nselect dept_name\nfrom department\nwhere budget = (select (max(budget) from department));\n</code></pre> <ul> <li><code>with</code> \u8bed\u53e5\u6253\u5934\u5148\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u8868\u3002</li> </ul> <p><code>With</code> clause is very useful for writing complex queries.</p> <p>Example: Find all departments where the total salary is greater than the average of the total salary at all departments.</p> answer <pre><code>with dept _total (dept_name, value) as\n    (select dept_name, sum(salary)\n    from instructor\n    group by dept_name),\n    dept_total_avg(value) as\n    (select avg(value)\n    from dept_total)\nselect dept_name\nfrom dept_total, dept_total_avg\nwhere dept_total.value &gt;= dept_total_avg.value;\n</code></pre>"},{"location":"Computer_Science/DB/Chapter3/#modification-of-the-database","title":"Modification of the Database","text":"<ul> <li>Deletion of tuples from a given relation</li> <li>Insertion of new tuples into a given relation</li> <li>Updating values in some tuples in a given relation</li> </ul>"},{"location":"Computer_Science/DB/Chapter3/#deletion","title":"Deletion","text":"<ul> <li>Delete all instructors. </li> </ul> <p><code>delete from instructor</code></p> <p>\u5c06\u5220\u9664 <code>instructor</code> \u5173\u7cfb\u4e2d\u7684\u6240\u6709\u5143\u7ec4\u3002<code>instructor</code> \u5173\u7cfb\u672c\u8eab\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u5b83\u53d8\u6210\u7a7a\u7684\u4e86\u3002</p> <ul> <li>Delete all tuples in the instructor relation for those instructors associated with a department located in the Watson building.</li> </ul> <pre><code>delete from instructor\nwhere dept_name in (select dept_name\n                    from department\n                    where building = 'Watson');\n</code></pre> <p>Example: Delete all instructors whose salary is less than the average salary of instructors.</p> answer <pre><code>delete from instructor\nwhere salary&lt; (select avg (salary) from instructor);\n</code></pre> <p>\u5148\u7b97 <code>avg</code> \u518d\u5220\u9664\uff0c\u5426\u5219\u5220\u9664\u540e <code>avg</code> \u5c31\u53d8\u4e86\u3002</p>"},{"location":"Computer_Science/DB/Chapter3/#insertion","title":"Insertion","text":"<ul> <li>Add a new tuple to course.</li> </ul> <pre><code>insert into course\n    values ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\n</code></pre> <ul> <li>or equivalently. \u8fd9\u6761\u53ef\u4ee5\u7528\u4e8e\u5fd8\u8bb0\u4e86\u5217\u7684\u987a\u5e8f\u7684\u65f6\u5019\uff0c\u53ea\u8981\u5217\u540d\u548c\u503c\u5bf9\u5e94\u5373\u53ef\u3002</li> </ul> <pre><code>insert into course (course_id, title, dept_name, credits)\n    values ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\n</code></pre> <p>\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u6211\u4eec\u53ef\u80fd\u60f3\u5728\u67e5\u8be2\u7ed3\u679c\u7684\u57fa\u7840\u4e0a\u63d2\u5165\u5143\u7ec4\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u60f3\u8ba9 Music \u7cfb\u6bcf\u4e2a\u4fee\u6ee1 144 \u5b66\u65f6\u7684\u5b66\u751f\u6210\u4e3a Music \u7cfb\u7684\u6559\u5e08\uff0c\u5176\u5de5\u8d44\u4e3a 18000 \u7f8e\u5143\u3002\u6211\u4eec\u53ef\u5199\u4e3a:</p> <pre><code>insert into instructor\nselect ID, name,dept_name,18000\nfrom student\nwhere dept_name ='Music' and tot_cred &gt; 144;\n</code></pre> <p>\u548c\u672c\u5c0f\u8282\u524d\u9762\u7684\u793a\u4f8b\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u7528 <code>select</code> \u6307\u5b9a\u4e86\u4e00\u4e2a\u5143\u7ec4\u7684\u96c6\u5408\uff0c\u800c\u4e0d\u662f\u6307\u5b9a\u4e00\u4e2a\u5143\u7ec4\u3002SQL\u9996\u5148\u6267\u884c\u8fd9\u6761 <code>select</code> \u8bed\u53e5\uff0c\u6c42\u51fa\u5c06\u8981\u63d2\u5165 <code>instructor</code> \u5173\u7cfb\u4e2d\u7684\u5143\u7ec4\u96c6\u5408\u3002\u6bcf\u4e2a\u5143\u7ec4\u90fd\u6709 <code>ID\u3001name\u3001dept_name(Music)</code> \u548c 18000 \u7f8e\u5143\u7684\u5de5\u8d44\u3002</p> <p>\u7cfb\u7edf\u5728\u6267\u884c\u4efb\u4f55\u63d2\u5165\u4e4b\u524d\u5148\u6267\u884c\u5b8c <code>select</code> \u8bed\u53e5\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u5982\u679c\u5728\u6267\u884c <code>select</code> \u8bed\u53e5\u7684\u540c\u65f6\u6267\u884c\u67d0\u4e9b\u63d2\u5165\u52a8\u4f5c\uff0c\u50cf</p> <pre><code>insert into student\nselect *\nfrom student;\n</code></pre> <p>\u53ea\u8981\u5728 <code>student</code> \u4e0a\u6ca1\u6709\u4e3b\u7801\u7ea6\u675f\uff0c\u8fd9\u6837\u7684\u8bf7\u6c42\u5c31\u53ef\u80fd\u4f1a\u63d2\u5165\u65e0\u6570\u5143\u7ec4\u3002\u5982\u679c\u6ca1\u6709\u4e3b\u7801\u7ea6\u675f\u4e0a\u8ff0\u8bf7\u6c42\u4f1a\u91cd\u65b0\u63d2\u5165 <code>student</code> \u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7ec4\uff0c\u4ea7\u751f\u8be5\u5143\u7ec4\u7684\u7b2c\u4e8c\u4efd\u62f7\u8d1d\u3002\u7531\u4e8e\u8fd9\u7b2c\u4e8c\u4efd\u62f7\u8d1d\u73b0\u5728\u6210\u4e3a <code>student</code> \u7684\u4e00\u90e8\u5206\uff0c<code>select</code> \u8bed\u53e5\u53ef\u80fd\u627e\u5230\u5b83\uff0c\u4e8e\u662f\u7b2c\u4e09\u4efd\u62f7\u8d1d\u88ab\u63d2\u5165 <code>student</code> \u4e2d\u3002\u8fd9\u7b2c\u4e09\u4efd\u62f7\u8d1d\u53c8\u53ef\u80fd\u88ab <code>select</code> \u8bed\u53e5\u53d1\u73b0\uff0c\u4e8e\u662f\u53c8\u63d2\u5165\u7b2c\u56db\u4efd\u62f7\u8d1d\uff0c\u5982\u6b64\u7b49\u7b49\uff0c\u65e0\u9650\u5faa\u73af\u3002\u5728\u6267\u884c\u63d2\u5165\u4e4b\u524d\u5148\u5b8c\u6210 <code>select</code> \u8bed\u53e5\u7684\u6267\u884c\u53ef\u4ee5\u907f\u514d\u8fd9\u6837\u7684\u95ee\u9898\u3002\u8fd9\u6837\uff0c\u5982\u679c\u5728 <code>student</code> \u5173\u7cfb\u4e0a\u6ca1\u6709\u4e3b\u7801\u7ea6\u675f\uff0c\u90a3\u4e48\u4e0a\u8ff0 <code>insert</code> \u8bed\u53e5\u5c31\u53ea\u662f\u628a <code>student</code> \u5173\u7cfb\u4e2d\u7684\u6bcf\u4e2a\u5143\u7ec4\u90fd\u590d\u5236\u4e00\u904d\u3002</p>"},{"location":"Computer_Science/DB/Chapter3/#update","title":"Update","text":"<ul> <li>Increase salaries of instructors whose salary is over $100,000 by 3%, and all others receive a 5% raise</li> </ul> <pre><code>update instructor\n    set salary = salary * 1.03\n    where salary &gt; 100000;\nupdate instructor\n    set salary = salary * 1.05\n    where salary &lt;= 100000;\n</code></pre> <ul> <li>Same query as before but with case statement</li> </ul> <pre><code>update instructor\n    set salary = case\n                when salary &lt;= 100000 then salary * 1.05\n                else salary * 1.03\n                end\n</code></pre> <p>\u6807\u91cf\u5b50\u67e5\u8be2\u5728 SQL \u66f4\u65b0\u8bed\u53e5\u4e2d\u975e\u5e38\u6709\u7528\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u5728 <code>set</code> \u5b50\u53e5\u4e2d\u3002\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u66f4\u65b0:\u6211\u4eec\u628a\u6bcf\u4e2astudent \u5143\u7ec4\u7684 <code>totcred</code> \u5c5e\u6027\u503c\u8bbe\u4e3a\u8be5\u751f\u6210\u529f\u5b66\u5b8c\u7684\u8bfe\u7a0b\u5b66\u5206\u7684\u603b\u548c\u3002\u6211\u4eec\u5047\u8bbe\u5982\u679c\u4e00\u540d\u5b66\u751f\u5728\u67d0\u95e8\u8bfe\u7a0b\u4e0a\u7684\u6210\u7ee9\u65e2\u4e0d\u662f\"F'\u4e5f\u4e0d\u662f\u7a7a\uff0c\u90a3\u4e48\u4ed6\u5c31\u6210\u529f\u5b66\u5b8c\u4e86\u8fd9\u95e8\u8bfe\u7a0b\u3002\u6211\u4eec\u9700\u8981\u4f7f\u7528 <code>set</code> \u5b50\u53e5\u4e2d\u7684\u5b50\u67e5\u8be2\u6765\u5199\u51fa\u8fd9\u79cd\u66f4\u65b0\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>UPDATE student\nSET tot_cred =(\n    SELECT sum(credits)\n    FROM takes, course\n    WHERE student.ID = takes.ID\n        AND takes.course_id= course.course_id\n        AND takes.grade &lt;&gt; 'F'\n        AND takes.grade is not null);\n</code></pre> <p>\u5982\u679c\u4e00\u540d\u5b66\u751f\u6ca1\u6709\u6210\u529f\u5b66\u5b8c\u4efb\u4f55\u8bfe\u7a0b\uff0c\u4e0a\u8ff0\u8bed\u53e5\u5c06\u628a\u5176 <code>tot_cred</code> \u5c5e\u6027\u503c\u7f6e\u4e3a\u7a7a\u3002\u5982\u679c\u60f3\u628a\u8fd9\u6837\u7684\u5c5e\u6027\u503c\u7f6e\u4e3a0\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u6761 <code>update</code> \u8bed\u53e5\u6765\u628a\u7a7a\u503c\u66ff\u6362\u4e3a0\u3002</p> <p>\u66f4\u597d\u7684\u66ff\u4ee3\u65b9\u6848\u662f\u628a\u4e0a\u8ff0\u5b50\u67e5\u8be2\u4e2d\u7684 <code>select sum(credits)</code> \u5b50\u53e5\u66ff\u6362\u4e3a\u5982\u4e0b\u4f7f\u7528 <code>case</code> \u8868\u8fbe\u5f0f\u7684 <code>select</code> \u5b50\u53e5:</p> <pre><code>SELECT case\n    WHEN sum(credits) is not null then sum(credits)\n    else 0\n    end\n</code></pre>"},{"location":"Computer_Science/DB/Chapter4/","title":"Chapter 4 | Intermediate SQL","text":"<p> \u7ea6 5607 \u4e2a\u5b57  128 \u884c\u4ee3\u7801  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 30 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter4/#joined-relations","title":"Joined Relations","text":"<p>Join operations take two relations and return as a result another relation.</p> <p>Join operations are typically used as subquery expressions in the from clause.</p> about natural join and inner join <p>\u81ea\u7136\u8fde\u63a5\u662f\u5185\u8fde\u63a5\u7684\u7b80\u5316\u7248\uff0c\u4f46\u4f9d\u8d56\u8868\u7ed3\u6784\u7684\u5217\u540d\u4e00\u81f4\u6027\u3002</p> <p>\u5185\u8fde\u63a5\u66f4\u7075\u6d3b\u3001\u5b89\u5168\uff0c\u662f\u5927\u591a\u6570\u573a\u666f\u7684\u9996\u9009\u3002</p> <p>\u5efa\u8bae from deep seek\uff1a\u9664\u975e\u660e\u786e\u9700\u8981\u7b80\u5316\u4ee3\u7801\uff0c\u5426\u5219\u4f18\u5148\u4f7f\u7528\u663e\u5f0f\u7684 <code>INNER JOIN + ON</code> \u5b50\u53e5\u3002</p> \u7279\u6027 \u81ea\u7136\u8fde\u63a5(Natural Join) \u5185\u8fde\u63a5(Inner Join) \u8fde\u63a5\u6761\u4ef6 \u81ea\u52a8\u57fa\u4e8e\u540c\u540d\u4e14\u540c\u6570\u636e\u7c7b\u578b\u7684\u5217\u8fdb\u884c\u7b49\u503c\u5339\u914d \u9700\u663e\u5f0f\u6307\u5b9a\u8fde\u63a5\u6761\u4ef6(\u5982 <code>ON</code> \u6216 <code>USING</code>) \u5217\u53bb\u91cd \u81ea\u52a8\u5408\u5e76\u540c\u540d\u5217\uff0c\u7ed3\u679c\u4e2d\u4e0d\u91cd\u590d\u663e\u793a\u540c\u540d\u5217 \u4fdd\u7559\u6240\u6709\u53c2\u4e0e\u8fde\u63a5\u7684\u5217(\u5305\u62ec\u91cd\u590d\u7684\u540c\u540d\u5217) \u7075\u6d3b\u6027 \u5b8c\u5168\u4f9d\u8d56\u8868\u7ed3\u6784\uff0c\u5217\u540d\u5fc5\u987b\u4e00\u81f4 \u53ef\u81ea\u7531\u6307\u5b9a\u4efb\u610f\u8fde\u63a5\u6761\u4ef6\uff0c\u7075\u6d3b\u6027\u66f4\u9ad8 \u5b89\u5168\u6027 \u53ef\u80fd\u56e0\u610f\u5916\u7684\u540c\u540d\u975e\u5173\u8054\u5217\u5bfc\u81f4\u9519\u8bef\u5339\u914d \u66f4\u5b89\u5168\uff0c\u9700\u660e\u786e\u6307\u5b9a\u5173\u8054\u5b57\u6bb5 <p>\u81ea\u7136\u8fde\u63a5\u7684\u6f5c\u5728\u98ce\u9669:</p> <ol> <li>\u540c\u540d\u4f46\u65e0\u5173\u7684\u5217\u4f1a\u5bfc\u81f4\u9519\u8bef\u5339\u914d</li> </ol> <p>\u4f8b\u5982\uff0c\u82e5\u4e24\u4e2a\u8868\u90fd\u6709 <code>created_at</code> \u5217(\u4f46\u975e\u5173\u8054\u5b57\u6bb5)\uff0c\u81ea\u7136\u8fde\u63a5\u4f1a\u9519\u8bef\u5730\u5c06\u5b83\u4eec\u4f5c\u4e3a\u8fde\u63a5\u6761\u4ef6\u3002</p> <ol> <li>\u4f9d\u8d56\u8868\u7ed3\u6784</li> </ol> <p>\u82e5\u8868\u7ed3\u6784\u53d8\u5316(\u5982\u91cd\u547d\u540d\u5217)\uff0c\u81ea\u7136\u8fde\u63a5\u53ef\u80fd\u610f\u5916\u5931\u6548\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#natural-join","title":"Natural Join","text":"<p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u56de\u7b54\u67e5\u8be2\"\u51fa\u5b66\u751f\u7684\u59d3\u540d\u4ee5\u53ca\u4ed6\u4eec\u6240\u9009\u8bfe\u7a0b\u7684\u540d\u79f0\"\u3002</p> <p>\u6b64\u67e5\u8be2\u53ef\u4ee5\u7528SQL\u5199\u4e3a\u5982\u4e0b\u5f62\u5f0f:</p> <pre><code>select name, title\nfrom student natural join takes, course\nwhere takes.course_id=course.course_id;\n</code></pre> <p>\u9996\u5148\u8ba1\u7b97 <code>student</code> \u548c <code>takes</code> \u7684\u81ea\u7136\u8fde\u63a5\uff0c\u6b63\u5982\u6211\u4eec\u6b64\u524d\u6240\u89c1\u7684\uff0c\u518d\u8ba1\u7b97\u8be5\u7ed3\u679c\u4e0e <code>course</code> \u7684\u7b1b\u5361\u513f\u79ef\uff0c<code>where</code> \u5b50\u53e5\u4ece\u8fd9\u4e2a\u7ed3\u679c\u4e2d\u4ec5\u63d0\u53d6\u51fa\u8fd9\u6837\u7684\u5143\u7ec4:\u6765\u81ea\u8fde\u63a5\u7ed3\u679c\u7684\u8bfe\u7a0b\u6807\u8bc6\u4e0e\u6765\u81ea <code>course</code> \u5173\u7cfb\u7684\u8bfe\u7a0b\u6807\u8bc6\u76f8\u5339\u914d\u3002\u8bf7\u6ce8\u610f <code>where</code> \u5b50\u53e5\u4e2d\u7684 <code>takes.course_id</code> \u8868\u793a\u81ea\u7136\u8fde\u63a5\u7ed3\u679c\u7684 <code>course_id</code> \u57df\uff0c\u56e0\u4e3a\u8be5\u57df\u6700\u7ec8\u6765\u81ea <code>takes</code> \u5173\u7cfb\u3002</p> <p>\u4f46\u4e0b\u9762\u7684SOL\u67e5\u8be2\u5e76\u4e0d\u4f1a\u8ba1\u7b97\u51fa\u76f8\u540c\u7684\u7ed3\u679c:</p> <pre><code>select name, title\nfrom student natural join takes natural join course\n</code></pre> <p>\u4e3a\u4e86\u8bf4\u660e\u539f\u56e0\uff0c\u8bf7\u6ce8\u610f <code>student</code> \u548c <code>takes</code> \u7684\u81ea\u7136\u8fde\u63a5\u5305\u542b\u7684\u5c5e\u6027\u662f <code>(ID,name,dept name,totcred,course id,sec id)</code> \uff0c\u800c <code>course</code> \u5173\u7cfb\u5305\u542b\u7684\u5c5e\u6027\u662f <code>(course id,title,dept name,credits)</code> \u4f5c\u4e3a\u4e8c\u8005\u81ea\u7136\u8fde\u63a5\u7684\u7ed3\u679c\uff0c\u9700\u8981\u6765\u81ea\u8fd9\u4e24\u4e2a\u5173\u7cfb\u7684 <code>deptname</code> \u5c5e\u6027\u53d6\u503c\u76f8\u540c\uff0c\u8fd8\u8981\u5728 <code>course_id</code> \u4e0a\u53d6\u503c\u76f8\u540c\u3002\u4ece\u800c\u8be5\u67e5\u8be2\u5c06\u5ffd\u7565\u6240\u6709\u8fd9\u6837\u7684(\u5b66\u751f\u59d3\u540d,\u8bfe\u7a0b\u540d\u79f0)\u5bf9:\u5176\u4e2d\u5b66\u751f\u6240\u9009\u4fee\u7684\u4e00\u95e8\u8bfe\u7a0b\u4e0d\u662f\u4ed6\u6240\u5728\u7cfb\u7684\u8bfe\u7a0b\u3002\u800c\u524d\u4e00\u4e2a\u67e5\u8be2\u4f1a\u6b63\u786e\u8f93\u51fa\u8fd9\u6837\u7684\u5bf9\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#using","title":"using","text":"<p>\u4e3a\u4e86\u53d1\u626c\u81ea\u7136\u8fde\u63a5\u7684\u4f18\u70b9\uff0c\u540c\u65f6\u907f\u514d\u4e0d\u6b63\u786e\u7684\u76f8\u7b49\u5c5e\u6027\u6240\u5e26\u6765\u7684\u5371\u9669\uff0cSQL \u63d0\u4f9b\u4e86\u4e00\u79cd\u81ea\u7136\u8fde\u63a5\u7684\u6784\u9020\u5f62\u5f0f\uff0c\u5b83\u5141\u8bb8\u4f60\u6765\u6307\u5b9a\u7a76\u7adf\u9700\u8981\u54ea\u4e9b\u5217\u76f8\u7b49\u3002\u4e0b\u9762\u7684\u67e5\u8be2\u8bf4\u660e\u4e86\u8fd9\u4e2a\u7279\u5f81:</p> <pre><code>select name, title\nfrom (student natural join takes)join course using (course_id);\n</code></pre>"},{"location":"Computer_Science/DB/Chapter4/#on","title":"on","text":"<p>SQL\u8fd8\u652f\u6301\u53e6\u5916\u4e00\u79cd\u5f62\u5f0f\u7684\u8fde\u63a5\uff0c\u5176\u4e2d\u53ef\u4ee5\u6307\u5b9a\u4efb\u610f\u7684\u8fde\u63a5\u6761\u4ef6\u3002</p> <pre><code>select *\nfrom student join takes on student.ID= takes.ID\n</code></pre>"},{"location":"Computer_Science/DB/Chapter4/#outer-join","title":"Outer Join","text":"<pre><code>select *\nfrom student natural left outer join takes:\n</code></pre> <pre><code>select *\nfrom takes natural right outer join student;\n</code></pre> <pre><code>select *\n    from (select *\n    from student\n        where dept_name = 'Comp. Sci.') natural full outer join\n        (select *\n        from takes\n        where semester ='Spring' and year= 2017);\n</code></pre>"},{"location":"Computer_Science/DB/Chapter4/#natural-join-vs-on","title":"natural join v.s. on","text":"<p>\u81ea\u7136\u8fde\u63a5\uff1a</p> <pre><code>SELECT *\nFROM student NATURAL LEFT OUTER JOIN takes;\n</code></pre> <p>\u663e\u5f0f <code>ON</code> \u6761\u4ef6\u8fde\u63a5\uff1a</p> <pre><code>SELECT *\nFROM student LEFT OUTER JOIN takes ON student.ID = takes.ID;\n</code></pre> <p>\u867d\u7136\u4e24\u8005\u7684\u903b\u8f91\u7ed3\u679c\uff08\u5339\u914d\u7684\u6570\u636e\u884c\uff09\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5217\u7684\u663e\u793a\u65b9\u5f0f\u4e0d\u540c\u3002</p> <ol> <li> <p><code>NATURAL JOIN</code> \u7684\u5217\u5408\u5e76\u89c4\u5219\uff1a</p> <ul> <li>\u81ea\u52a8\u5339\u914d\u4e24\u4e2a\u8868\u4e2d\u540c\u540d\u4e14\u540c\u7c7b\u578b\u7684\u5217\uff08\u4f8b\u5982 <code>ID</code>\uff09\u3002</li> <li>\u5728\u7ed3\u679c\u4e2d\uff0c\u540c\u540d\u5217\u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u5217\uff08\u4ec5\u4fdd\u7559\u4e00\u4e2a <code>ID</code>\uff09\u3002</li> </ul> </li> <li> <p><code>ON</code> \u6761\u4ef6\u8fde\u63a5\u7684\u5217\u4fdd\u7559\u89c4\u5219\uff1a</p> <ul> <li>\u663e\u5f0f\u6307\u5b9a\u8fde\u63a5\u6761\u4ef6\uff08\u4f8b\u5982 <code>student.ID = takes.ID</code>\uff09\uff0c\u4f46\u4e0d\u4f1a\u5408\u5e76\u540c\u540d\u5217\u3002</li> <li>\u5728\u7ed3\u679c\u4e2d\uff0c\u4e24\u4e2a\u8868\u7684 <code>ID</code> \u5217\u90fd\u4f1a\u88ab\u4fdd\u7559\uff0c\u5bfc\u81f4 <code>ID</code> \u51fa\u73b0\u4e24\u6b21\uff08<code>student.ID</code> \u548c <code>takes.ID</code>\uff09\u3002</li> </ul> </li> </ol> <ol> <li>\u5de6\u5916\u8fde\u63a5 + <code>ON</code> \u6761\u4ef6</li> </ol> <pre><code>SELECT *\nFROM student LEFT JOIN takes ON student.ID = takes.ID;\n</code></pre> <ul> <li>\u5148\u8fde\u63a5\uff1a\u628a\u6bcf\u4e2a\u5b66\u751f\uff08<code>student</code> \u8868\uff09\u548c\u4ed6\u4eec\u7684\u9009\u8bfe\u8bb0\u5f55\uff08<code>takes</code> \u8868\uff09\u6309 <code>ID</code> \u5339\u914d\u3002</li> <li>\u4fdd\u7559\u6240\u6709\u5b66\u751f\uff1a\u5982\u679c\u4e00\u4e2a\u5b66\u751f\uff08\u6bd4\u5982 ID=70557 \u7684 Snow\uff09\u6ca1\u6709\u9009\u8bfe\u8bb0\u5f55\uff08\u5373 <code>takes</code> \u8868\u4e2d\u6ca1\u6709\u4ed6\u7684 <code>ID</code>\uff09\uff0c\u6570\u636e\u5e93\u4f1a\u5f3a\u884c\u4fdd\u7559\u8fd9\u4e2a\u5b66\u751f\uff0c\u5e76\u5728 <code>takes</code> \u7684\u5217\u4e2d\u586b\u5145 <code>NULL</code>\u3002</li> </ul> <ol> <li>\u5de6\u5916\u8fde\u63a5 + <code>ON true</code> + <code>WHERE</code> \u6761\u4ef6</li> </ol> <pre><code>SELECT *\nFROM student LEFT JOIN takes ON true\nWHERE student.ID = takes.ID;\n</code></pre> <ul> <li>\u5148\u505a\u7b1b\u5361\u5c14\u79ef\uff1a<code>ON true</code> \u8868\u793a\u628a\u6bcf\u4e2a\u5b66\u751f\u548c\u6240\u6709\u9009\u8bfe\u8bb0\u5f55\u5f3a\u884c\u914d\u5bf9\uff08\u4e0d\u7ba1 <code>ID</code> \u662f\u5426\u5339\u914d\uff09\u3002\u6bd4\u5982 Snow \u6ca1\u6709\u9009\u8bfe\uff0c\u4f46\u4f1a\u548c <code>takes</code> \u8868\u4e2d\u6240\u6709\u9009\u8bfe\u8bb0\u5f55\u914d\u5bf9\uff08\u5305\u62ec\u522b\u4eba\u7684\u9009\u8bfe\u8bb0\u5f55\uff09\u3002</li> <li>\u518d\u7528 <code>WHERE</code> \u8fc7\u6ee4\uff1a\u53ea\u4fdd\u7559 <code>student.ID = takes.ID</code> \u7684\u884c\u3002\u7531\u4e8e Snow \u6ca1\u6709\u9009\u8bfe\u8bb0\u5f55\uff0c\u4ed6\u7684 <code>takes.ID</code> \u662f <code>NULL</code>\uff0c\u800c <code>NULL</code> \u65e0\u6cd5\u7b49\u4e8e\u4efb\u4f55\u503c\uff08\u5305\u62ec\u4ed6\u81ea\u5df1\u7684 <code>ID</code>\uff09\uff0c\u6240\u4ee5 Snow \u4f1a\u88ab\u8fc7\u6ee4\u6389\u3002</li> </ul> <p>Info</p> <p>\u4e3a\u4e86\u628a\u5e38\u89c4\u8fde\u63a5\u548c\u5916\u8fde\u63a5\u533a\u5206\u5f00\u6765\uff0c\u5728 SQL \u4e2d\u628a\u5e38\u89c4\u8fde\u63a5\u79f0\u4f5c\u5185\u8fde\u63a5\u3002\u8fd9\u6837\u8fde\u63a5\u5b50\u53e5\u5c31\u53ef\u4ee5\u6307\u5b9a\u7528\u5185\u8fde\u63a5\u800c\u4e0d\u662f\u5916\u8fde\u63a5\uff0c\u6765\u8bf4\u660e\u4f7f\u7528\u7684\u662f\u5e38\u89c4\u8fde\u63a5\u3002</p> <p>\u7136\u800c\u5173\u952e\u8bcd <code>inner</code> \u662f\u53ef\u9009\u7684\u3002\u5f53 <code>join</code> \u5b50\u53e5\u4e2d\u6ca1\u6709\u4f7f\u7528 <code>outer</code> \u524d\u7f00\u65f6\uff0c\u7f3a\u7701\u7684\u8fde\u63a5\u7c7b\u578b\u662f\u5185\u8fde\u63a5\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#sql-data-types-and-schemas","title":"SQL Data Types and Schemas","text":""},{"location":"Computer_Science/DB/Chapter4/#user-defined-types","title":"User-Defined Types","text":"<p>create type construct in SQL creates user-defined type</p> <pre><code>create type Dollars as numeric (12,2) final\n</code></pre> <ul> <li><code>final</code> means that this type cannot be further extended. \u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u4e86\uff0c\u4e0d\u80fd\u518d\u7ee7\u627f\u3002</li> <li>\u66f4\u52a0\u65b9\u4fbf\u76f4\u89c2\uff0c\u4e0d\u7528\u518d\u53bb\u5199\u4e86\u3002</li> <li>\u8fd9\u662f\u4e3a\u4e86\u5f3a\u7c7b\u578b\u5316\uff0c\u9632\u6b62\u7c7b\u578b\u9519\u8bef\uff0c\u53ef\u4ee5\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u53d1\u73b0\u9519\u8bef\u3002</li> <li>SQL \u63d0\u4f9b\u4e86 <code>drop type</code> \u548c <code>alter type</code> \u5b50\u53e5\u6765\u5220\u9664\u6216\u4fee\u6539\u4ee5\u524d\u521b\u5efa\u8fc7\u7684\u7c7b\u578b\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter4/#domains","title":"Domains","text":"<p>create domain construct in SQL-92 creates user-defined domain types.</p> <pre><code>create domain person_name char(20) not null\n</code></pre> <p>Types and domains are similar. </p> <p>Domains can have constraints, such as <code>not null</code>, specified on them. \u7136\u800c <code>type</code> \u5c31\u6ca1\u6709\u7ea6\u675f\u4e86\u3002</p> <p>However, they also have differences.</p> <ol> <li>\u5728\u57df\u4e0a\u53ef\u4ee5\u58f0\u660e\u8bf8\u5982\u975e\u7a7a\u90a3\u6837\u7684\u7ea6\u675f\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u57df\u7c7b\u578b\u7684\u53d8\u91cf\u5b9a\u4e49\u7f3a\u7701\u503c\uff0c\u7136\u800c\u5728\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e0a\u4e0d\u80fd\u58f0\u660e\u7ea6\u675f\u6216\u7f3a\u7701\u503c\u3002\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e0d\u4ec5\u88ab\u8bbe\u8ba1\u7528\u6765\u6307\u5b9a\u5c5e\u6027\u7c7b\u578b\uff0c\u800c\u4e14\u8fd8\u88ab\u7528\u5728\u4e0d\u80fd\u65bd\u52a0\u7ea6\u675f\u7684\u5730\u65b9\u4ee5\u5bf9 SQL \u8fdb\u884c\u8fc7\u7a0b\u6269\u5c55\u3002</li> <li>\u57df\u5e76\u4e0d\u662f\u5f3a\u7c7b\u578b\u7684\u3002\u5176\u7ed3\u679c\u662f\uff0c\u4e00\u4e2a\u57df\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u57df\u7c7b\u578b\uff0c\u53ea\u8981\u5b83\u4eec\u7684\u57fa\u672c\u7c7b\u578b\u662f\u76f8\u5bb9\u7684\u3002</li> </ol> <pre><code>create domain degree_level varchar(10)\nconstraint degree_level_test\ncheck (value in ('Bachelors', 'Masters', 'Doctorate')); // \u53ea\u80fd\u53d6\u8fd9\u51e0\u4e2a\u503c\n</code></pre>"},{"location":"Computer_Science/DB/Chapter4/#large-object-types","title":"Large-Object Types","text":"<p>Large objects (photos, videos, CAD files, etc.) are stored as a large object:</p> <p><code>blob</code> (\u4e8c\u8fdb\u5236\u5927\u5bf9\u8c61): binary large object -- object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system)</p> <p>MySQL BLOB datatypes:</p> <ul> <li><code>TinyBlob</code> \uff1a 0 ~ 255 bytes.</li> <li><code>Blob</code>\uff1a 0 ~ 64K bytes.</li> <li><code>MediumBlob</code> \uff1a 0 ~ 16M bytes.</li> <li><code>LargeBlob</code> : 0 ~ 4G bytes.</li> </ul> <p><code>clob</code> (\u5b57\u7b26\u5927\u5bf9\u8c61): character large object -- object is a large collection of character data. </p> <p>When a query returns a large object, a pointer is returned rather than the large object itself.</p>"},{"location":"Computer_Science/DB/Chapter4/#integrity-constraints","title":"Integrity Constraints","text":"<p>\u5b8c\u6574\u6027\u7ea6\u675f(integrity constraint)\u4fdd\u8bc1\u6388\u6743\u7528\u6237\u5bf9\u6570\u636e\u5e93\u6240\u505a\u7684\u4fee\u6539\u4e0d\u4f1a\u5bfc\u81f4\u6570\u636e\u81f4\u6027\u7684\u4e22\u5931\u3002\u56e0\u6b64\uff0c\u5b8c\u6574\u6027\u7ea6\u675f\u9632\u6b62\u7684\u662f\u5bf9\u6570\u636e\u7684\u610f\u5916\u7834\u574f\u3002\u8fd9\u4e0e\u5b89\u5168\u6027\u7ea6\u675f(security constraint)\u4e0d\u540c\uff0c\u5b89\u5168\u6027\u7ea6\u675f\u9632\u6b62\u672a\u7ecf\u6388\u6743\u7684\u7528\u6237\u8bbf\u95ee\u6570\u636e\u5e93\u3002</p> <p>\u5b8c\u6574\u6027\u7ea6\u675f\u901a\u5e38\u88ab\u89c6\u4e3a\u6570\u636e\u5e93\u6a21\u5f0f\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4f5c\u4e3a\u7528\u4e8e\u521b\u5efa\u5173\u7cfb\u7684 <code>create table</code> \u547d\u4ee4\u7684\u4e00\u90e8\u5206\u88ab\u58f0\u660e\u3002\u7136\u800c\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>alter table table-name add constraint</code> \u547d\u4ee4\u5c06\u5b8c\u6574\u6027\u7ea6\u675f\u65bd\u52a0\u5230\u5df2\u6709\u5173\u7cfb\u4e0a\uff0c\u5176\u4e2d <code>constraint</code> \u53ef\u4ee5\u662f\u8be5\u5173\u7cfb\u4e0a\u7684\u4efb\u610f\u7ea6\u675f\u3002\u5f53\u8fd9\u6837\u6761\u547d\u4ee4\u88ab\u6267\u884c\u65f6\uff0c\u7cfb\u7edf\u9996\u5148\u4fdd\u8bc1\u8be5\u5173\u7cfb\u6ee1\u8db3\u6307\u5b9a\u7684\u7ea6\u675f\u3002\u5982\u679c\u6ee1\u8db3\uff0c\u90a3\u4e48\u7ea6\u675f\u88ab\u65bd\u52a0\u5230\u5173\u7cfb\u4e0a;\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5219\u4e0a\u8ff0\u547d\u4ee4\u88ab\u62d2\u7edd\u6267\u884c\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#integrity-constraints-on-a-single-relation","title":"Integrity Constraints on a Single Relation.","text":"<ul> <li><code>not null</code> : Declare name and budget to be not null:</li> </ul> <pre><code>name varchar(20) not null\nbudget numeric(12,2) not null\n</code></pre> <ul> <li><code>primary key</code></li> <li><code>unique</code> : The unique specification states that the attributes \\(A_1, A_2, \\cdots, A_m\\) form a super key. Candidate keys are permitted to be null (in contrast to primary keys).</li> <li><code>check (P)</code>, where P is a predicate. \u68c0\u9a8c\u6bcf\u4e00\u884c\u662f\u5426\u6ee1\u8db3P\u3002</li> <li><code>foreign key</code></li> </ul>"},{"location":"Computer_Science/DB/Chapter4/#integrity-constraint-violation-during-transactions","title":"Integrity Constraint Violation During Transactions","text":"<pre><code>create table person (\nID char(10),\nname char(40),\nmother char(10),\nfather char(10),\nprimary key (ID),\nforeign key (father) references person,\nforeign key (mother) references person);\n</code></pre> <p>How to insert a tuple without causing constraint violation?</p> <ul> <li>insert father and mother of a person before inserting person.</li> <li>OR, set father and mother to null initially, update after inserting all persons (not possible if father and mother attributes declared to be not null) .</li> <li>OR defer constraint checking to transaction end.</li> </ul>"},{"location":"Computer_Science/DB/Chapter4/#check","title":"Check","text":"<p>\u4e0d\u80fd\u7528 <code>foreign key</code> \u7684\u6761\u4ef6\u6765\uff0c\u56e0\u4e3a <code>foreign key</code> \u8981\u6c42\u88ab\u5f15\u7528\u7684\u4e00\u5b9a\u662f <code>primary key</code>\u3002</p> <pre><code>check (time_slot_id in (select time_slot_id from time_slot))\n</code></pre> <p>Unfortunately: subquery in check clause not supported by pretty much any database.</p> <p>\u800c <code>check</code> \u8bed\u53e5\u4e0d\u4f1a\u5355\u72ec\u7528\uff0c\u800c\u662f\u5728 <code>create table</code> \u8bed\u53e5\u4e2d\u4f7f\u7528\u3002</p> <p>\u5728\u5bf9 <code>check</code> \u5b50\u53e5\u7684\u6c42\u503c\u4e2d\u7a7a\u503c\u5448\u73b0\u4e86\u4e00\u79cd\u6709\u8da3\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u5982\u679c <code>check</code> \u5b50\u53e5\u4e0d\u4e3a\u5047\uff0c\u5219\u5b83\u662f\u6ee1\u8db3\u7684\uff0c\u56e0\u6b64\u8ba1\u7b97\u7ed3\u679c\u4e3a\u672a\u77e5\u7684\u5b50\u53e5\u4e5f\u662f\u6ee1\u8db3\u7684\u3002\u5982\u679c\u4e0d\u9700\u8981\u7a7a\u503c\uff0c\u5219\u5fc5\u987b\u6307\u5b9a\u5355\u72ec\u7684\u975e\u7a7a\u7ea6\u675f\u3002</p> <p><code>check</code> \u5b50\u53e5\u53ef\u4ee5\u5355\u72ec\u51fa\u73b0\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5c5e\u6027\u58f0\u660e\u7684\u4e00\u90e8\u5206\u51fa\u73b0\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u5bf9\u5355\u4e2a\u5c5e\u6027\u503c\u7684\u7ea6\u675f\u4e0e\u8be5\u5c5e\u6027\u4e00\u8d77\u5217\u51fa\uff0c\u800c\u66f4\u590d\u6742\u7684 <code>check</code> \u5b50\u53e5\u5219\u5728 <code>create table</code> \u8bed\u53e5\u7684\u672b\u5c3e\u5355\u72ec\u5217\u51fa\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#reference","title":"reference","text":"<pre><code>foreign key (dept_name) references department(dept_name);\n</code></pre> <p>\u7136\u800c\uff0c\u8fd9\u4e2a\u88ab\u6307\u5b9a\u7684\u5c5e\u6027\u5217\u8868\u5fc5\u987b\u58f0\u660e\u4e3a\u88ab\u5f15\u7528\u5173\u7cfb\u7684\u8d85\u7801\uff0c\u8981\u4e48\u4f7f\u7528\u4e3b\u7801\u7ea6\u675f\uff0c\u8981\u4e48\u4f7f\u7528\u552f\u4e00\u6027\u7ea6\u675f\u6765\u8fdb\u884c\u8fd9\u79cd\u58f0\u660e\u3002</p> <p>\u5728\u66f4\u4e3a\u666e\u904d\u7684\u5f15\u7528\u5b8c\u6574\u6027\u7ea6\u675f\u5f62\u5f0f\u4e2d\uff0c\u88ab\u5f15\u7528\u7684\u5c5e\u6027\u4e0d\u5fc5\u662f\u5019\u9009\u7801\uff0c\u4f46\u8fd9\u6837\u7684\u5f62\u5f0f\u4e0d\u80fd\u5728 SQL \u4e2d\u76f4\u63a5\u58f0\u660e\u3002\u4efb\u4f55\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u90fd\u4e0d\u652f\u6301\u8fd9\u4e9b\u66ff\u4ee3\u7ed3\u6784\u3002</p> <pre><code>create table course(\n    ...\n    foreign key (dept_name) references department\n    on delete cascade\n    on update cascade,\n    ...\n);\n</code></pre> <p>\u7531\u4e8e\u6709\u4e86 <code>on delete cascade</code> \u5b50\u53e5\uff0c\u5982\u679c\u5220\u9664 <code>department</code> \u4e2d\u7684\u4e00\u4e2a\u5143\u7ec4\u5bfc\u81f4\u8fdd\u53cd\u4e86\u8fd9\u79cd\u5f15\u7528\u5b8c\u6574\u6027\u7ea6\u675f\uff0c\u5219\u7cfb\u7edf\u5e76\u4e0d\u62d2\u7edd\u8be5\u5220\u9664\uff0c\u800c\u662f\u5bf9 <code>course</code> \u5173\u7cfb\u505a \"\u7ea7\u8054(cascade)\" \u5220\u9664\uff0c\u5373\u5220\u9664\u5f15\u7528\u4e86\u88ab\u5220\u9664\u7cfb\u7684\u5143\u7ec4\u3002\u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u66f4\u65b0\u88ab\u7ea6\u675f\u5f15\u7528\u7684\u5b57\u6bb5\u65f6\u8fdd\u53cd\u4e86\u7ea6\u675f\uff0c\u5219\u7cfb\u7edf\u5e76\u4e0d\u62d2\u7edd\u66f4\u65b0\u64cd\u4f5c\uff0c\u800c\u662f\u5c06 <code>course</code> \u4e2d\u5f15\u7528\u5143\u7ec4\u7684 <code>deptname</code> \u5b57\u6bb5\u4e5f\u6539\u4e3a\u65b0\u503c\u3002</p> <p>SQL\u8fd8\u5141\u8bb8\u5916\u7801(<code>foreign key</code>)\u5b50\u53e5\u6307\u5b9a\u9664\u7ea7\u8054\u4ee5\u5916\u7684\u5176\u4ed6\u52a8\u4f5c\uff0c\u5982\u679c\u7ea6\u675f\u88ab\u8fdd\u53cd\uff0c\u53ef\u5c06\u5f15\u7528\u57df(\u8fd9\u91cc\u662f <code>dept_name</code> )\u7f6e\u4e3a <code>null</code> (\u901a\u8fc7\u7528 <code>set null</code> \u4ee3\u66ff <code>cascade</code> )\uff0c\u6216\u7f6e\u4e3a\u8be5\u57df\u7684\u7f3a\u7701\u503c(\u901a\u8fc7\u4f7f\u7528 <code>set default</code> )\u3002</p> <p>\u7a7a\u503c\u4f7f\u5f97 SQL \u4e2d\u5f15\u7528\u5b8c\u6574\u6027\u7ea6\u675f\u7684\u8bed\u4e49\u590d\u6742\u5316\u4e86\u3002\u5916\u7801\u4e2d\u7684\u5c5e\u6027\u5141\u8bb8\u4e3a <code>null</code>\uff0c\u53ea\u8981\u5b83\u4eec\u6ca1\u6709\u53e6\u5916\u88ab\u58f0\u660e\u4e3a\u975e\u7a7a\u3002\u5982\u679c\u5728\u7ed9\u5b9a\u5143\u7ec4\u7684\u5916\u7801\u7684\u6240\u6709\u5217\u4e0a\u5747\u53d6\u975e\u7a7a\u503c\uff0c\u5219\u5bf9\u8be5\u5143\u7ec4\u91c7\u7528\u5916\u7801\u7ea6\u675f\u7684\u901a\u5e38\u5b9a\u4e49\u3002\u5982\u679c\u4efb\u4e00\u5916\u7801\u5217\u4e3a <code>null</code>\uff0c\u5219\u8be5\u5143\u7ec4\u88ab\u81ea\u52a8\u5b9a\u4e49\u4e3a\u662f\u6ee1\u8db3\u7ea6\u675f\u7684\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#assigning-names-to-constraints","title":"Assigning Names to Constraints","text":"<p>\u4e3a\u4e86\u547d\u540d\u7ea6\u675f\uff0c\u6211\u4eec\u5728\u7ea6\u675f\u7684\u524d\u9762\u4f7f\u7528\u5173\u952e\u5b57 <code>constraint</code> \u548c\u6211\u4eec\u5e0c\u671b\u4e3a\u5176\u8d4b\u4e88\u7684\u540d\u79f0\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5c06\u540d\u79f0 <code>minsalary</code> \u8d4b\u7ed9 <code>insiructor</code> \u7684 <code>salary</code> \u5c5e\u6027\u4e0a\u7684 <code>check</code> \u7ea6\u675f\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u5bf9 <code>salary</code> \u7684\u58f0\u660e\u4fee\u6539\u4e3a:</p> <pre><code>salary numeric(8,2), constraint minsalary check (salary &gt; 29000);\n</code></pre> <p>\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u51b3\u5b9a\u4e0d\u518d\u9700\u8981\u8fd9\u4e2a\u7ea6\u675f\uff0c\u90a3\u4e48\u53ef\u4ee5\u5199\u4e3a:</p> <pre><code>alter table instructor drop constraint minsalary;\n</code></pre> <p>\u5982\u679c\u540d\u79f0\u7f3a\u5931\uff0c\u9700\u8981\u4f7f\u7528\u7279\u5b9a\u4e8e\u7cfb\u7edf\u7684\u529f\u80fd\u6765\u8bc6\u522b\u51fa\u7ea6\u675f\u7684\u7cfb\u7edf\u5206\u914d\u540d\u79f0\u3002\u5e76\u975e\u6240\u6709\u7684\u7cfb\u7edf\u90fd\u652f\u6301\u8fd9\u6837\u7684\u529f\u80fd\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#assertion","title":"assertion","text":"<p>\u67e5\u8be2\u6574\u4e2a\u8868\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002</p> <p>\u65ad\u8a00\u7684\u6a21\u677f</p> <pre><code>create assertion &lt;assertion-name&gt; check &lt;predicate&gt;;\n</code></pre> <p>\u5bf9\u4e8e <code>student</code> \u5173\u7cfb\u4e2d\u7684\u6bcf\u4e2a\u5143\u7ec4\uff0c\u5b83\u5728 <code>tot_cred</code> \u5c5e\u6027\u4e0a\u7684\u53d6\u503c\u5fc5\u987b\u7b49\u4e8e\u8be5\u751f\u5df2\u6210\u529f\u4fee\u5b8c\u7684\u8bfe\u7a0b\u7684\u5b66\u5206\u603b\u548c\u3002</p> <pre><code>create assertion credits_earned_constraint check\n(not exists \n    (select ID\n    from student\n    where tot_cred &lt;&gt; (\n        select sum(credits)\n        from takes natural join course\n        where student.ID=takes.ID\n            and grade is not null \n            and grade&lt;&gt;'F')))\n ```\n\n\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u4ee3\u4ef7\u5f88\u5927\u3002\n\n\u5f53\u521b\u5efa\u65ad\u8a00\u65f6\uff0c\u7cfb\u7edf\u8981\u68c0\u6d4b\u5176\u6709\u6548\u6027\u3002\n\n- \u5982\u679c\u65ad\u8a00\u6709\u6548\uff0c\u5219\u4eca\u540e\u5bf9\u6570\u636e\u5e93\u7684\u4efb\u4f55\u4fee\u6539\u53ea\u6709\u5728\u4e0d\u7834\u574f\u8be5\u65ad\u8a00\u7684\u60c5\u51b5\u4e0b\u624d\u88ab\u5141\u8bb8\u3002\n- \u5982\u679c\u65ad\u8a00\u8f83\u590d\u6742\uff0c\u5219\u8fd9\u6837\u7684\u68c0\u6d4b\u4f1a\u5e26\u6765\u76f8\u5f53\u5927\u7684\u5f00\u9500\u3002\u7531\u4e8e\u68c0\u6d4b\u548c\u7ef4\u62a4\u65ad\u8a00\u7684\u5f00\u9500\u8f83\u9ad8\uff0c\u8fd9\u4f7f\u5f97\u4e00\u4e9b\u7cfb\u7edf\u5f00\u53d1\u8005\u7701\u53bb\u4e86\u5bf9\u901a\u7528\u65ad\u8a00\u7684\u652f\u6301\uff0c\u6216\u53ea\u63d0\u4f9b\u6613\u4e8e\u68c0\u6d4b\u7684\u7279\u6b8a\u5f62\u5f0f\u7684\u65ad\u8a00\u3002\n\n---\n\n## Views (\u89c6\u56fe)\n\n\u8ba9\u6240\u6709\u7528\u6237\u770b\u5230\u6570\u636e\u5e93\u4e2d\u5173\u7cfb\u7684\u5b8c\u6574\u96c6\u5408\u5e76\u975e\u603b\u662f\u5408\u9002\u7684\u3002\u51fa\u4e8e\u5b89\u5168\u6027\u8003\u8651\uff0c\u53ef\u80fd\u9700\u8981\u5411\u7528\u6237\u4ec5\u9690\u85cf\u4e00\u4e2a\u5173\u7cfb\u4e2d\u7684\u7279\u5b9a\u6570\u636e\u3002\u9664\u4e86\u5b89\u5168\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u521b\u5efa\u4e00\u4e2a\"\u865a\u62df\"\u5173\u7cfb\u7684\u4e2a\u6027\u5316\u96c6\u5408\uff0c\u8be5\u96c6\u5408\u80fd\u66f4\u597d\u5730\u5339\u914d\u7279\u5b9a\u7528\u6237\u76f4\u89c2\u610f\u4e49\u4e0a\u7684\u4f01\u4e1a\u7ed3\u6784\u3002\n\nA view provides a mechanism to hide certain data from the view of certain users. \n\nConsider a person who needs to know an instructors name and department, but not the salary. This person should see a relation described, in SQL, by \n\n```sql\nselect ID, name, dept_name\nfrom instructor\n</code></pre> <p>Any relation that is not of the conceptual model but is made visible to a user as a \"virtual relation\" is called a view.</p> <p>\u5728\u5927\u5b66\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6709\u4e00\u4e2a\u5173\u4e8e\u7269\u7406\u7cfb\u5728 2017 \u5e74\u79cb\u5b63\u5b66\u671f\u6240\u5f00\u8bbe\u7684\u6240\u6709\u8bfe\u7a0b\u6bb5\u7684\u5217\u8868\uff0c\u5176\u4e2d\u5305\u62ec\u6bcf\u4e2a\u8bfe\u7a0b\u6bb5\u5728\u54ea\u680b\u5efa\u7b51\u7684\u54ea\u4e2a\u623f\u95f4\u6388\u8bfe\u7684\u4fe1\u606f\u3002\u4e3a\u4e86\u5f97\u5230\u8fd9\u6837\u7684\u5217\u8868\uff0c\u6211\u4eec\u5e94\u8be5\u521b\u5efa\u7684\u5173\u7cfb\u662f:</p> <pre><code>select course.course id, sec_id,building, room_number\nfrom course, section\nwhere course.course_id = section.course_id\n    and course.dept_name ='Physics'\n    and section.semester = 'Fall'\n    and section.year = 2017;\n</code></pre> <p>\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u4e9b\u67e5\u8be2\u7684\u7ed3\u679c\u5e76\u5b58\u50a8\u4e0b\u6765\uff0c\u7136\u540e\u628a\u5b58\u50a8\u7684\u5173\u7cfb\u63d0\u4f9b\u7ed9\u7528\u6237\u3002\u4f46\u5982\u679c\u6211\u4eec\u8fd9\u6837\u505a\uff0c\u4e00\u65e6 <code>instructor</code>\u3001<code>course</code> \u6216 <code>section</code> \u5173\u7cfb\u4e2d\u7684\u5e95\u5c42\u6570\u636e\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u6240\u5b58\u50a8\u7684\u67e5\u8be2\u7ed3\u679c\u5c31\u4e0d\u518d\u4e0e\u5728\u8fd9\u4e9b\u5173\u7cfb\u4e0a\u91cd\u65b0\u6267\u884c\u67e5\u8be2\u7684\u7ed3\u679c\u76f8\u5339\u914d\u3002</p> <p>A view is defined using the create view statement which has the form</p> <pre><code>create view v as &lt; query expression &gt;\n</code></pre> <p>where <code>&lt;query expression&gt;</code> is any legal SQL expression. The view name is represented by v.</p> <p>Once a view is defined, the view name can be used to refer to the virtual relation that the view generates.</p> <p>\u89c6\u56fe\u4e0e <code>with</code> \u8bed\u53e5\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e: \u89c6\u56fe\u4e00\u65e6\u521b\u5efa\uff0c\u5728\u88ab\u663e\u5f0f\u5220\u9664\u4e4b\u524d\u5c31\u4e00\u76f4\u662f\u53ef\u7528\u7684\u3002\u7531 <code>with</code> \u5b9a\u4e49\u7684\u547d\u540d\u5b50\u67e5\u8be2\u5bf9\u4e8e\u5b9a\u4e49\u5b83\u7684\u67e5\u8be2\u6765\u8bf4\u53ea\u662f\u672c\u5730\u53ef\u7528\u7684\u3002</p> <p>View definition is not the same as creating a new relation by evaluating the query expression.</p> <p>Rather, a view definition causes the saving of an expression; the expression is substituted into queries using the view.</p> <p>Note</p> <p>\u53ef\u4ee5\u7406\u89e3\u4e3a view \u662f\u4e00\u4e2a\u865a\u7684\u8868\uff0c\u6709\u8868\u7684\u540d\u5b57\u4e0e\u5c5e\u6027\uff0c\u4f46\u662f\u6ca1\u6709\u8868\u7684\u5185\u5bb9\u3002</p> <p>view \u7684\u597d\u5904\u4e00\u4e2a\u5728\u4e8e\u7b80\u5316\u7528\u6237\u89c6\u91ce\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8d77\u5230\u4fe1\u606f\u9690\u85cf\u7684\u4f5c\u7528\u3002</p> <p><code>as</code> \u662f\u8fd9\u4e2a\u89c6\u56fe\u662f\u600e\u4e48\u548c\u6570\u636e\u8868\u5173\u8054\u8d77\u6765\u7684\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a mapping \u5173\u7cfb\u3002</p> <p>\u76f4\u89c2\u5730\u8bf4\uff0c\u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u523b\uff0c\u89c6\u56fe\u5173\u7cfb\u4e2d\u7684\u5143\u7ec4\u96c6\u90fd\u662f\u5bf9\u5b9a\u4e49\u89c6\u56fe\u7684\u67e5\u8be2\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u7ed3\u679c\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8ba1\u7b97\u5e76\u5b58\u50a8\u89c6\u56fe\u5173\u7cfb\uff0c\u4e00\u65e6\u7528\u4e8e\u5b9a\u4e49\u8be5\u89c6\u56fe\u7684\u5173\u7cfb\u88ab\u4fee\u6539\uff0c\u90a3\u4e48\u89c6\u56fe\u5c31\u4f1a\u8fc7\u671f\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u8fd9\u4e00\u70b9\uff0c\u89c6\u56fe\u901a\u5e38\u8fd9\u6837\u6765\u5b9e\u73b0: \u5f53\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u89c6\u56fe\u65f6\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u5b58\u50a8\u89c6\u56fe\u672c\u8eab\u7684\u5b9a\u4e49\uff0c\u800c\u4e0d\u5b58\u50a8\u5b9a\u4e49\u8be5\u89c6\u56fe\u7684\u67e5\u8be2\u8868\u8fbe\u5f0f\u7684\u6c42\u503c\u7ed3\u679c\u3002\u4e00\u65e6\u89c6\u56fe\u5173\u7cfb\u51fa\u73b0\u5728\u67e5\u8be2\u4e2d\uff0c\u5b83\u5c31\u88ab\u5df2\u5b58\u50a8\u7684\u67e5\u8be2\u8868\u8fbe\u5f0f\u4ee3\u66ff\u3002\u56e0\u6b64\uff0c\u6bcf\u5f53\u6211\u4eec\u8ba1\u7b97\u8fd9\u4e2a\u67e5\u8be2\u65f6\uff0c\u89c6\u56fe\u5173\u7cfb\u90fd\u88ab\u91cd\u65b0\u8ba1\u7b97\u3002</p> <ol> <li>A view of instructors without their salary</li> </ol> <pre><code>create view faculty as\n    select ID, name, dept_name\n    from instructor\n</code></pre> <ol> <li>Find the names of all instructors in the Biology department</li> </ol> <pre><code>    select name\n    from faculty\n    where dept_name = 'Biology'\n</code></pre>"},{"location":"Computer_Science/DB/Chapter4/#update-of-a-view","title":"Update of a View","text":"<p>Add a new tuple to faculty view which we defined earlier</p> <pre><code>create view faculty as\n    select ID, name, dept_name\n    from instructor\n\ninsert into faculty values ('30765', 'Green', 'Music');\n</code></pre> <p>This insertion must be represented by the insertion of the tuple <code>('30765', 'Green', 'Music', null)</code> into the instructor relation</p> <p><code>insert into instructor values ('30765', 'Green', 'Music', null);</code></p> <p>\u4e00\u822c\u8bf4\u6765\uff0c\u5982\u679c\u5b9a\u4e49\u89c6\u56fe\u7684\u67e5\u8be2\u5bf9\u4e0b\u5217\u6761\u4ef6\u90fd\u80fd\u6ee1\u8db3\uff0c\u90a3\u4e48\u5c31\u79f0 SQL \u89c6\u56fe\u662f\u53ef\u66f4\u65b0\u7684(\u5373\u89c6\u56fe\u4e0a\u53ef\u4ee5\u6267\u884c\u63d2\u5165\u3001\u66f4\u65b0\u6216\u5220\u9664) :</p> <ul> <li><code>from</code> \u5b50\u53e5\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u5e93\u5173\u7cfb</li> <li><code>select</code> \u5b50\u53e5\u4e2d\u53ea\u5305\u542b\u5173\u7cfb\u7684\u5c5e\u6027\u540d\uff0c\u5e76\u4e0d\u5305\u542b\u4efb\u4f55\u8868\u8fbe\u5f0f\u3001\u805a\u96c6\u6216  <code>distinct</code> \u58f0\u660e\u6ca1\u6709\u51fa\u73b0\u5728 <code>select</code> \u3002</li> <li>\u5b50\u53e5\u4e2d\u7684\u4efb\u4f55\u5c5e\u6027\u90fd\u53ef\u4ee5\u53d6 <code>null</code> \u503c;\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e9b\u5c5e\u6027\u6ca1\u6709\u975e\u7a7a\u7ea6\u675f\uff0c\u4e5f\u4e0d\u6784\u6210\u4e3b\u7801\u7684\u4e00\u90e8\u5206\u3002</li> <li>\u67e5\u8be2\u4e2d\u4e0d\u542b\u6709 <code>group by</code> \u6216 <code>having</code> \u5b50\u53e5\u5728\u8fd9\u4e9b\u9650\u5236\u4e0b\uff0c\u5141\u8bb8\u5728\u4e0b\u9762\u7684\u89c6\u56fe\u4e0a\u6267\u884c <code>update</code>\u3001<code>insert</code> \u548c <code>delete</code> \u64cd\u4f5c\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter4/#materialized-views","title":"Materialized Views","text":"<p>Materializing a view: create a physical table containing all the tuples in the result of the query defining the view.</p> <p>\u662f\u4e00\u4e2a\u89c6\u56fe\uff0c\u4f46\u662f\u4f1a\u5b9a\u4e49\u4e00\u4e2a\u4e34\u65f6\u8868\uff0c\u4e0e view \u4e2d\u7684\u6570\u636e\u4e00\u81f4\u3002</p> <p>\u597d\u5904\u662f\uff0c\u5982\u679c\u67e5\u8be2\u6570\u636e\u91cf\u5f88\u5927\uff0c\u90a3\u4e48\u6bcf\u6b21\u67e5\u8be2 view \u90fd\u4f1a\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5c06 view \u7684\u7ed3\u679c\u5b58\u50a8\u5728\u4e34\u65f6\u8868\u4e2d\uff0c\u8fd9\u6837\u6bcf\u6b21\u67e5\u8be2\u4e34\u65f6\u8868\u7684\u65f6\u95f4\u5c31\u4f1a\u5927\u5927\u51cf\u5c11\u3002\u4f46\u574f\u5904\u662f\uff0c\u5982\u679c\u539f\u59cb\u8868\u7684\u6570\u636e\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u90a3\u4e48\u4e34\u65f6\u8868\u4e2d\u7684\u6570\u636e\u5c31\u4e0d\u4f1a\u66f4\u65b0\uff0c\u56e0\u6b64\u9700\u8981\u5b9a\u671f\u624b\u52a8\u66f4\u65b0\u4e34\u65f6\u8868\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#view-and-logical-data-indepencence","title":"View and Logical Data Indepencence","text":"Question <p>If relation S(a, b, c) is split into two sub relations S1(a,b) and S2(a,c). How to realize the logical data independence?</p> answer <ol> <li> <p>create table S1 ...; create table S2 ...;</p> </li> <li> <p>insert into S1 select a, b from S; insert into S2 select a, c from S;</p> </li> <li> <p>drop table S;</p> </li> <li> <p>create view S(a,b,c) as select a,b,c from S1 natural join S2;</p> </li> </ol>"},{"location":"Computer_Science/DB/Chapter4/#indexes","title":"Indexes","text":"<p>\u5728\u8868\u91cc\u9762\u63d2\u5165\u6570\u636e\u540e\u662f\u6ca1\u6709\u987a\u5e8f\u7684\uff0c\u5982\u679c\u8981\u67e5\u627e\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u904d\u5386\u6574\u4e2a\u8868\uff0c\u8fd9\u6837\u6548\u7387\u5f88\u4f4e\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u63d0\u9ad8\u67e5\u627e\u6548\u7387\u3002</p> <p>Indices are data structures used to speed up access to records with specified values for index attributes.</p> <pre><code>create table student\n( ID varchar (5),\nname varchar (20) not null,\ndept_name varchar (20),\ntot_cred numeric (3,0) default 0,\nprimary key (ID) )\ncreate index studentID_index on student(ID)\n</code></pre> <p>\u5728\u6570\u636e\u5e93\u4e2d\u7528\u4e8c\u5206\u67e5\u627e\u662f\u5f88\u4f4e\u6548\u7684\uff0c\u5185\u5b58\u5916\u5b58\u8bbf\u95ee\u901f\u5ea6\u4e0d\u540c\uff0c\u4e14\u5916\u5b58\u662f\u4e00\u5757\u4e00\u5757\u7684\u6570\u636e\uff0c\u8981\u4ece\u78c1\u76d8\u4e2d\u642c\u8fdb\u6765\u8981\u5f88\u4e45\u3002\u4e8c\u53c9\u6811\u6709\u5f88\u591a\u5c42\uff0c\u6240\u4ee5\u8bbf\u95ee\u901f\u5ea6\u5f88\u6162\u3002\u6240\u4ee5\u7528 B+ \u6811\u3002\u6241\u6241\u7684\u4e00\u5c42\uff0c\u53ef\u4ee5\u5f88\u5feb\u5730\u627e\u5230\u6570\u636e\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#transactions","title":"Transactions","text":"<p>\u4e8b\u52a1(<code>transaction</code>)\u7531\u67e5\u8be2\u548c(\u6216)\u66f4\u65b0\u8bed\u53e5\u7684\u5e8f\u5217\u7ec4\u6210\u3002</p> <p>SQL \u6807\u51c6\u89c4\u5b9a\u5f53\u4e00\u6761 SQL \u8bed\u53e5\u88ab\u6267\u884c\u65f6\uff0c\u5c31\u9690\u5f0f\u5730\u5f00\u59cb\u4e86\u4e00\u4e2a\u4e8b\u52a1\u3002</p> <p>\u4e0b\u5217SOL\u8bed\u53e5\u4e4b\u4e00\u4f1a\u7ed3\u675f\u8be5\u4e8b\u52a1:</p> <ol> <li> <p><code>commit work</code> \u63d0\u4ea4\u5f53\u524d\u4e8b\u52a1;\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4f7f\u4e8b\u52a1\u6267\u884c\u7684\u66f4\u65b0\u5728\u6570\u636e\u5e93\u4e2d\u6210\u4e3a\u6c38\u4e45\u6027\u7684\u3002\u5728\u4e8b\u52a1\u88ab\u63d0\u4ea4\u540e\uff0c\u4e00\u4e2a\u65b0\u7684\u4e8b\u52a1\u4f1a\u81ea\u52a8\u5f00\u59cb\u3002</p> </li> <li> <p><code>rollback work</code> \u56de\u6eda\u5f53\u524d\u4e8b\u52a1;\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4f1a\u64a4\u9500\u4e8b\u52a1\u4e2d SQL \u8bed\u53e5\u6267\u884c\u7684\u6240\u6709\u66f4\u65b0\u3002\u56e0\u6b64\uff0c\u6570\u636e\u5e93\u72b6\u6001\u88ab\u6062\u590d\u5230\u5b83\u6267\u884c\u8be5\u4e8b\u52a1\u7684\u7b2c\u4e00\u6761\u8bed\u53e5\u4e4b\u524d\u7684\u72b6\u6001\u3002</p> </li> </ol> <p>\u5173\u952e\u5b57 <code>work</code> \u5728\u4e24\u6761\u8bed\u53e5\u4e2d\u90fd\u662f\u53ef\u9009\u7684\u3002</p> <p>\u5982\u679c\u5728\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u671f\u95f4\u68c0\u6d4b\u5230\u67d0\u79cd\u9519\u8bef\u72b6\u6001\uff0c\u4e8b\u52a1\u56de\u6eda\u662f\u6709\u7528\u7684\u3002\u4e00\u65e6\u4e00\u4e2a\u4e8b\u52a1\u6267\u884c\u4e86 <code>commit work</code> \uff0c\u5b83\u7684\u5f71\u54cd\u5c31\u4e0d\u80fd\u518d\u7528 <code>rollback work</code> \u6765\u6492\u9500\u4e86\u3002</p> <p>\u6570\u636e\u5e93\u7cfb\u7edf\u4fdd\u8bc1\u5728\u53d1\u751f\u8bf8\u5982\u67d0\u6761 SQL \u8bed\u53e5\u9519\u8bef\u3001\u65ad\u7535\u6216\u7cfb\u7edf\u5d29\u6e83\u8fd9\u4e9b\u6545\u969c\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8fd8\u6ca1\u6709\u6267\u884c <code>commit work</code>\uff0c\u90a3\u4e48\u5176\u5f71\u54cd\u5c06\u88ab\u56de\u6eda\u3002\u5728\u65ad\u7535\u6216\u5176\u4ed6\u7cfb\u7edf\u5d29\u6e83\u7684\u60c5\u51b5\u4e0b\uff0c\u56de\u6eda\u4f1a\u5728\u7cfb\u7edf\u91cd\u542f\u65f6\u6267\u884c\u3002</p> <ul> <li>Unit of work (NONE or ALL) </li> <li>Atomic transaction(\u539f\u5b50\u6027) : either fully executed or rolled back as if it never occurred</li> <li>Isolation from concurrent transactions(\u5e76\u53d1\u4f46\u4e0d\u76f8\u4e92\u5f71\u54cd)</li> <li>Transactions begin implicitly : Ended by commit work or rollback work</li> <li>But default on most databases: each SQL statement commits automatically</li> </ul> <p>\u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u7531\u9700\u8981\u6267\u884c\u7684\u591a\u6761 SQL \u8bed\u53e5\u7ec4\u6210\uff0c\u5c31\u5fc5\u987b\u5173\u95ed\u5355\u6761 SQL \u8bed\u53e5\u7684\u8fd9\u79cd\u81ea\u52a8\u63d0\u4ea4\u3002</p> <p>In MySQL: <code>SET AUTOCOMMIT=0;</code></p> <p>\u4f5c\u4e3a SQL:1999 \u6807\u51c6\u7684\u4e00\u90e8\u5206\uff0c\u5141\u8bb8\u591a\u6761 SQL \u8bed\u53e5\u88ab\u5305\u542b\u5728\u5173\u952e\u5b57 <code>begin atomic ... end</code> \u4e4b\u95f4\u3002</p> <p>Transaction example :</p> <pre><code>SET AUTOCOMMIT=0; -- turn off auto-commit\nUPDATE account SET balance=balance -100 WHERE ano='1001;\nUPDATE account SET balance=balance+100 WHERE ano='1002';\nCOMMIT;\n</code></pre>"},{"location":"Computer_Science/DB/Chapter4/#acid-properties","title":"ACID Properties","text":"<ol> <li>Atomicity. Either all operations of the transaction are properly reflected in the database or none are.</li> <li>Consistency. Execution of a transaction in isolation preserves the consistency of the database.<ul> <li>\u4e8b\u52a1\u662f\u4fdd\u6301\u6570\u636e\u5e93\u4e00\u81f4\u6027\u7684\u5355\u5143</li> </ul> </li> <li>Isolation. Although multiple transactions may execute concurrently, each transaction must be unaware of other concurrently executing transactions. Intermediate transaction results must be hidden from other concurrently executed transactions.      That is, for every pair of transactions \\(T_i\\) and \\(T_j\\), it appears to \\(T_i\\) that either \\(T_j\\), finished execution before \\(T_i\\) started, or \\(T_j\\) started execution after \\(T_i\\) finished.</li> <li>Durability. After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures.<ul> <li>\u4e8b\u52a1\u4e00\u65e6\u63d0\u4ea4\u540e\u5c31\u4e0d\u80fd\u6539\uff0c\u8981\u5728\u6570\u636e\u5e93\u5185\u957f\u4e45\u5730\u4fdd\u5b58\uff0c\u4f8b\u5982\u78c1\u76d8\u574f\u4e86\u3001\u4fee\u6539\u540e\u7684\u5185\u5bb9\u8fd8\u6ca1\u5199\u5165\u78c1\u76d8\u5374\u65ad\u7535\u4e86\u7b49\u7b49\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5e93\u90fd\u8981\u4fdd\u8bc1\u6570\u636e\u4e0d\u4e22\u5931</li> </ul> </li> </ol>"},{"location":"Computer_Science/DB/Chapter4/#authorization","title":"Authorization","text":"<p>Forms of authorization on parts of the database: (\u8868\u4e0a\u7684\u6743\u9650)</p> <ul> <li>Select - allows reading, but not modification of data.</li> <li>Insert - allows insertion of new data, but not modification of existing data.</li> <li>Update - allows modification, but not deletion of data.</li> <li>Delete - allows deletion of data.</li> </ul> <p>Forms of authorization to modify the database schema: (\u6570\u636e\u5e93\u4e0a\u7684\u6743\u9650)</p> <ul> <li>Resources\uff08MySQL\uff1aCreate\uff09 - allows creation of new relations.</li> <li>Alteration - allows addition or deletion of attributes in a relation.</li> <li>Drop - allows deletion of relations.</li> <li>Index - allows creation and deletion of indices.</li> <li>Create view\uff08MySQL\uff09 \u2013 allows creation of views.</li> </ul>"},{"location":"Computer_Science/DB/Chapter4/#authorization-specification-in-sql","title":"Authorization Specification in SQL","text":"<p>The <code>grant</code> statement is used to confer authorization:</p> <pre><code>grant &lt;privilege list&gt; -- privilege\uff1a\u6743\u9650\non &lt;relation name or view name&gt; to &lt;user list&gt;\n</code></pre> <p>Example:</p> <pre><code>grant select on department to Amit, Satoshi;\ngrant update (budget) on department to Amit, Satoshi;\n</code></pre> <p><code>&lt;user list&gt;</code> is: a user-id</p> <p><code>public</code>, which allows all valid users the privilege granted a role (more on this later).</p> <ul> <li>Granting a privilege on a view does not imply granting any privileges on the underlying relations.</li> <li>The grantor of the privilege must already hold the privilege on the specified item (or be the database administrator).</li> </ul> <pre><code>grant select on instructor to U1, U2, U3\ngrant select on department to public\ngrant update (budget) on department to U1,U2\ngrant all privileges on department to U1\n</code></pre>"},{"location":"Computer_Science/DB/Chapter4/#revoking-authorization-in-sql","title":"Revoking Authorization in SQL","text":"<p>The revoke statement is used to revoke authorization.</p> <pre><code>revoke &lt;privilege list&gt;\non &lt;relation name or view name&gt; \nfrom &lt;user list&gt;\n</code></pre> <p>Example:</p> <pre><code>revoke select on branch from U1, U2, U3;\nrevoke select on department from Amit, Satoshi;\nrevoke update (budget)on department from Amit, Satoshi;\n</code></pre> <p><code>&lt;privilege-list&gt;</code> may be all to revoke all privileges the revokee may hold.</p> <ul> <li>If <code>&lt;revokee-list&gt;</code> includes <code>public</code>, all users lose the privilege except those granted it explicitly.</li> <li>If the same privilege was granted twice to the same user by different grantees, the user may retain the privilege after the revocation.</li> <li>All privileges that depend on the privilege being revoked are also revoked.</li> </ul>"},{"location":"Computer_Science/DB/Chapter4/#role","title":"role","text":"<pre><code>create role instructor;  -- \u89d2\u8272\u7684\u540d\u5b57\ngrant instructor to Amit;  -- Privileges can be granted to roles; \u628a\u6743\u9650\u7ed9 Amit\ngrant select on takes to instructor; -- Roles can be granted to users, as well as to other roles\ncreate role teaching_assistant\ngrant teaching_assistant to instructor;  -- Instructor inherits all privileges of teaching_assistant\n</code></pre> <p>Chain of roles :</p> <pre><code>create role dean;\ngrant instructor to dean;\ngrant dean to Satoshi;\n</code></pre>"},{"location":"Computer_Science/DB/Chapter4/#authorization-on-views","title":"Authorization on Views","text":"<pre><code>create view geo_instructor as\n(select *\nfrom instructor\nwhere dept_name = 'Geology');\ngrant select on geo_instructor to geo_staff\n</code></pre> <p>\u521b\u5efa\u89c6\u56fe\u7684\u7528\u6237\u6ca1\u5fc5\u8981\u83b7\u5f97\u8be5\u89c6\u56fe\u4e0a\u7684\u6240\u6709\u6743\u9650\u3002\u4ed6\u4ec5\u5f97\u5230\u7684\u90a3\u4e9b\u6743\u9650\u4e0d\u4f1a\u4e3a\u4ed6\u63d0\u4f9b\u8d85\u8d8a\u4ed6\u5df2\u6709\u6743\u9650\u7684\u989d\u5916\u6743\u9650\u3002</p> <p>\u4f8b\u5982\uff0c\u4e00\u4e2a\u521b\u5efa\u89c6\u56fe\u7684\u7528\u6237\u4e0d\u80fd\u5f97\u5230\u89c6\u56fe\u4e0a\u7684\u66f4\u65b0\u6743\u9650\uff0c\u5982\u679c\u8be5\u7528\u6237\u5728\u7528\u6765\u5b9a\u4e49\u89c6\u56fe\u7684\u5173\u7cfb\u4e0a\u6ca1\u6709\u66f4\u65b0\u6743\u9650\u7684\u8bdd\u3002\u5982\u679c\u7528\u6237\u8981\u521b\u5efa\u4e00\u4e2a\u89c6\u56fe\uff0c\u800c\u6b64\u7528\u6237\u5728\u8be5\u89c6\u56fe\u4e0a\u4e0d\u80fd\u83b7\u5f97\u4efb\u4f55\u6743\u9650\uff0c\u5219\u7cfb\u7edf\u4f1a\u62d2\u7edd\u8fd9\u6837\u7684\u89c6\u56fe\u521b\u5efa\u8bf7\u6c42\u3002</p> <p>\u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u89c6\u56fe\u7684\u521b\u5efa\u8005\u5fc5\u987b\u5728 instructor \u5173\u7cfb\u4e0a\u62e5\u6709 select \u6743\u9650\uff0c\u624d\u80fd\u521b\u5efa geo_instructor \u89c6\u56fe\u3002</p>"},{"location":"Computer_Science/DB/Chapter4/#other-authorization-features","title":"Other Authorization Features","text":"<ul> <li>references privilege to create foreign key</li> </ul> <pre><code>grant reference (dept_name) on department to Mariano;\n</code></pre> <p>\u521d\u770b\u8d77\u6765\uff0c\u4f3c\u4e4e\u6ca1\u6709\u7406\u7531\u4e0d\u5141\u8bb8\u7528\u6237\u521b\u5efa\u5f15\u7528\u4e86\u5176\u4ed6\u5173\u7cfb\u7684\u5916\u7801\u3002\u4f46\u662f\uff0c\u8bf7\u56de\u60f3\u4e00\u4e0b:\u5916\u7801\u7ea6\u675f\u9650\u5236\u4e86\u88ab\u5f15\u7528\u5173\u7cfb\u4e0a\u7684\u5220\u9664\u548c\u66f4\u65b0\u64cd\u4f5c\u3002</p> <p>\u5047\u5b9a Mariano \u5728\u5173\u7cfb r \u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5916\u7801\uff0c\u5b83\u5f15\u7528 <code>department</code> \u5173\u7cfb\u7684 <code>dept_name</code> \u5c5e\u6027\uff0c\u7136\u540e\u5728 r \u4e2d\u63d2\u5165\u4e00\u6761\u5c5e\u4e8e\u5730\u8d28\u7cfb\u7684\u5143\u7ec4\u3002\u90a3\u4e48\u5c31\u518d\u4e5f\u4e0d\u53ef\u80fd\u4ece <code>department</code> \u5173\u7cfb\u4e2d\u5c06\u5730\u8d28\u7cfb\u5220\u9664\uff0c\u9664\u975e\u540c\u65f6\u4e5f\u4fee\u6539\u5173\u7cfbr\u3002\u8fd9\u6837\uff0c\u7531 Mariano \u5b9a\u4e49\u7684\u5916\u7801\u5c31\u9650\u5236\u4e86\u5176\u4ed6\u7528\u6237\u5c06\u6765\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u6709\u5f15\u7528\u6743\u9650\u3002</p> <p>\u5982\u679c\u8981\u521b\u5efa\u5173\u7cfb r \u4e0a\u7684 <code>check</code> \u7ea6\u675f\uff0c\u5e76\u4e14\u8be5\u7ea6\u675f\u6709\u5f15\u7528 <code>department</code> \u7684\u5b50\u67e5\u8be2\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u6709 <code>department</code> \u4e0a\u7684\u5f15\u7528\u6743\u9650\u3002\u5176\u539f\u56e0\u4e0e\u6211\u4eec\u5df2\u7ed9\u51fa\u7684\u5916\u7801\u7ea6\u675f\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u56e0\u4e3a\u5f15\u7528\u4e86\u4e00\u4e2a\u5173\u7cfb\u7684 <code>check</code> \u7ea6\u675f\u4f1a\u9650\u5236\u5bf9\u8be5\u5173\u7cfb\u53ef\u80fd\u7684\u66f4\u65b0\u3002</p> <ul> <li>transfer of privileges</li> </ul> <p>\u4ece\u4e00\u4e2a\u7528\u6237/\u89d2\u8272\u90a3\u91cc\u6536\u56de\u6743\u9650\u53ef\u80fd\u5bfc\u81f4\u5176\u4ed6\u7528\u6237/\u89d2\u8272\u4e5f\u5931\u53bb\u8be5\u6743\u9650\u3002\u8fd9\u4e00\u65b9\u5f0f\u79f0\u4f5c\u7ea7\u8054\u6536\u6743\u3002\u5728\u5927\u591a\u6570\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\uff0ccascade \u662f\u7f3a\u7701\u65b9\u5f0f\u3002\u7136\u800c\uff0c\u6536\u6743\u8bed\u53e5\u53ef\u4ee5\u58f0\u660e restrict \u6765\u9632\u6b62\u7ea7\u8054\u6536\u6743\u3002</p> <pre><code>grant select on department to Amit with grant option;  -- \u6709 grant option \u7684\u6743\u9650\u53ef\u4ee5\u4f20\u9012\nrevoke select on department from Amit, Satoshi cascade;\nrevoke select on department from Amit, Satoshi restrict;\nrevoke grant option for select on department from Amit; -- \u6536\u6743\u8bed\u53e5\u4ec5\u4ec5\u6536\u56de\u6388\u6743\u9009\u9879\uff0c\u800c\u5e76\u4e0d\u662f\u771f\u6b63\u6536\u56de\u9009\u62e9\u6743\u9650\n</code></pre> <p></p>"},{"location":"Computer_Science/DB/Chapter5/","title":"Chapter 5 | Advanced SQL","text":"<p> \u7ea6 3566 \u4e2a\u5b57  372 \u884c\u4ee3\u7801  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 22 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter5/#accessing-sql-from-a-programming-language","title":"Accessing SQL from a Programming Language","text":"<p>There are two approaches to accessing database from a general-purpose programming language.</p> <ol> <li>API (Application Program Interface) -- A general-purpose program can connect to and communicate with a database server using a collection of functions.</li> <li>Embedded SQL -- provides a means by which a program can interact with a database server. </li> </ol> <p>The SQL statements are translated at compile time into function calls. </p> <p>At runtime, these function calls connect to the database using an API that provides dynamic SQL facilities.</p>"},{"location":"Computer_Science/DB/Chapter5/#jdbc-and-odbc","title":"JDBC and ODBC","text":"<ul> <li> <p>API (application-program interface) for a program to interact with a database server     Application makes calls to</p> <pre><code>- Connect with the database server\n- Send SQL commands to the database server\n- Fetch tuples of result one-by-one into program variables\n</code></pre> </li> <li> <p>ODBC (Open Database Connectivity) works with C, C++, C#</p> </li> <li>JDBC (Java Database Connectivity) works with Java</li> <li>Embedded SQL in C</li> <li>SQLJ - embedded SQL in Java</li> <li>JPA (Java Persistence API) - OR mapping of Java</li> </ul>"},{"location":"Computer_Science/DB/Chapter5/#jdbc","title":"JDBC","text":"<p>JDBC is a Java API for communicating with database systems supporting SQL.</p> <p>JDBC \u6807\u51c6\u5b9a\u4e49\u4e86\u7528\u4e8e\u5c06 Java \u7a0b\u5e8f\u8fde\u63a5\u5230\u6570\u636e\u5e93\u670d\u52a1\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3(ApplicationProgram Interface\uff0cAPI).</p> <p>Model for communicating with the database:</p> <ol> <li>Open a connection \u4eceJava\u7a0b\u5e8f\u8bbf\u95ee\u6570\u636e\u5e93\u7684\u7b2c\u4e00\u6b65\u662f\u6253\u5f00\u4e00\u4e2a\u4e0e\u6570\u636e\u5e93\u7684\u8fde\u63a5\u3002</li> <li>Create a \"statement\" object \u4e00\u65e6\u6253\u5f00\u4e00\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u5229\u7528\u8be5\u8fde\u63a5\u6765\u5411\u6570\u636e\u5e93\u53d1\u9001 SQL \u8bed\u53e5\u7528\u4e8e\u6267\u884c\u3002\u8fd9\u662f\u901a\u8fc7\u4e00\u4e2a \"Statement\" \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u6765\u5b8c\u6210\u7684\u3002</li> <li>Execute queries using the Statement object to send queries and fetch results \u6211\u4eec\u65e2\u53ef\u4ee5\u8c03\u7528 <code>executeQuery()</code> \u65b9\u6cd5\u53c8\u53ef\u4ee5\u8c03\u7528 <code>executeUpdate()</code> \u65b9\u6cd5\u6765\u6267\u884c\u4e00\u6761\u8bed\u53e5\u3002</li> <li>Exception mechanism to handle errors</li> </ol>"},{"location":"Computer_Science/DB/Chapter5/#jdbc-code","title":"JDBC Code","text":"<pre><code>public static void JDBCexample(String dbid, String userid, String passwd) { \n    try{ \n        // \u8fde\u63a5\u5230\u6570\u636e\u5e93\n        Connection conn = DriverManager.getConnection(\"jdbc:oracle:thin:@db.yale.edu:2000:univdb\", userid, passwd); \n\n        // \u521b\u5efaStatement\u5bf9\u8c61\n        Statement stmt = conn.createStatement(); \n\n        // \u6267\u884c\u5b9e\u9645\u5de5\u4f5c\n        ... Do Actual Work ...\n\n        // \u5173\u95edStatement\u5bf9\u8c61\n        stmt.close();\n\n        // \u5173\u95edConnection\u5bf9\u8c61\n        conn.close();\n    }catch (SQLException sqle){ \n\n        // \u6355\u83b7\u5e76\u6253\u5370SQLException\n        System.out.println(\"SQLException : \" + sqle);\n    }\n}\n</code></pre> <ol> <li>\u8c03\u7528 <code>getConnection()</code> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u6307\u5b9a\u4e86 URL \u6216\u670d\u52a1\u5668\u6240\u8fd0\u884c\u7684\u4e3b\u673a\u540d\u79f0(\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u662f <code>db.yale.edu</code> )\uff0c\u4ee5\u53ca\u67d0\u4e9b\u53ef\u80fd\u7684\u5176\u4ed6\u4fe1\u606f\uff0c\u4f8b\u5982\uff0c\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u6240\u7528\u7684\u534f\u8bae(\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u662f <code>jdbc:oracle:thin:</code> \uff0c\u6211\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u770b\u5230\u4e3a\u4ec0\u4e48\u9700\u8981\u5b83)\u3001\u6570\u636e\u5e93\u7cfb\u7edf\u7528\u6765\u901a\u4fe1\u7684\u7aef\u53e3\u53f7(\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u662f 2000 )\uff0c\u8fd8\u6709\u670d\u52a1\u5668\u7aef\u4f7f\u7528\u7684\u7279\u5b9a\u6570\u636e\u5e93(\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u662f <code>univdb</code> )\u3002\u8bf7\u6ce8\u610f JDBC \u53ea\u6307\u5b9a API \u800c\u4e0d\u6307\u5b9a\u901a\u4fe1\u534f\u8bae\u3002\u4e00\u4e2a JDBC \u9a71\u52a8\u5668\u53ef\u80fd\u652f\u6301\u591a\u79cd\u534f\u8bae\uff0c\u6211\u4eec\u5fc5\u987b\u6307\u5b9a\u4e00\u79cd\u6570\u636e\u5e93\u548c\u9a71\u52a8\u5668\u90fd\u652f\u6301\u7684\u534f\u8bae\u3002\u534f\u8bae\u7684\u8be6\u7ec6\u5185\u5bb9\u662f\u7531\u5382\u5546\u8bbe\u5b9a\u7684\u3002</li> <li><code>getConnection()</code> \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u636e\u5e93\u7528\u6237\u7684\u6807\u8bc6\uff0c\u5b83\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</li> <li>\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u5bc6\u7801\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002(\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u672a\u7ecf\u6388\u6743\u7684\u4eba\u8bbf\u95ee\u4f60\u7684 Java \u4ee3\u7801\uff0c\u5728 JDBC \u4ee3\u7801\u4e2d\u6307\u5b9a\u5bc6\u7801\u4f1a\u5e26\u6765\u5b89\u5168\u6027\u98ce\u9669\u3002)</li> </ol> <ul> <li>MySQL \u7684\u7b49\u4ef7\u8868\u793a\u662f <code>jdbc:mysql:</code> .</li> <li>\u6267\u884c\u4efb\u4f55 SQL \u65b9\u6cd5\u90fd\u53ef\u80fd\u5bfc\u81f4\u5f15\u53d1\u5f02\u5e38\u3002<code>try{}catch{}</code> \u7ed3\u6784\u5141\u8bb8\u6211\u4eec\u6355\u83b7\u5728\u8fdb\u884c JDBC \u8c03\u7528\u65f6\u51fa\u73b0\u7684\u4efb\u4f55\u5f02\u5e38(\u9519\u8bef\u60c5\u51b5)\uff0c\u5e76\u91c7\u53d6\u9002\u5f53\u7684\u64cd\u4f5c\u3002\u5728 JDBC \u7f16\u7a0b\u4e2d\uff0c\u5b83\u53ef\u80fd\u6709\u52a9\u4e8e\u533a\u5206 SQLException (\u8fd9\u662f\u9762\u5411 SQL \u7684\u5f02\u5e38)\u548c Exception \u7684\u4e00\u822c\u60c5\u51b5(\u5b83\u53ef\u4ee5\u662f\u4efb\u4f55 Java \u5f02\u5e38\u6bd4\u5982\u7a7a\u6307\u9488\u5f02\u5e38\u6216\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u5f02\u5e38)\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter5/#update-to-database","title":"Update to database","text":"<pre><code>try{\n\n    // \u6267\u884cSQL\u8bed\u53e5\uff0c\u5411instructor\u8868\u4e2d\u63d2\u5165\u4e00\u6761\u6570\u636e\n    stmt.executeUpdate(\"insert into instructor values('77987', 'Kim', 'Physics', 98000)\");\n}catch (SQLException sqle){\n\n    // \u6355\u83b7SQL\u5f02\u5e38\uff0c\u5e76\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\n    System.out.println(\"Could not insert tuple. \" + sqle);\n}\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#execute-query-and-fetch-and-print-results","title":"Execute query and fetch and print results","text":"<pre><code>// \u6267\u884c\u67e5\u8be2\u8bed\u53e5\uff0c\u67e5\u8be2\u6559\u5e08\u8868\u4e2d\u6bcf\u4e2a\u90e8\u95e8\u7684\u5e73\u5747\u5de5\u8d44\nResultSet rset = stmt.executeQuery(\"select dept_name, avg (salary) \n                                    from instructor\n                                    group by dept_name\");\n\n// \u904d\u5386\u67e5\u8be2\u7ed3\u679c\uff0crset.next()\uff1a\u5c06\u7ed3\u679c\u96c6\u7684\u6e38\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u3002\nwhile (rset.next()){\n\n    // \u83b7\u53d6\u5f53\u524d\u884c\u7684dept_name\u5217\u7684\u503c\u3002\u83b7\u53d6\u5f53\u524d\u884c\u7684\u7b2c\u4e8c\u5217\u7684\u503c\uff08\u5373\u5e73\u5747\u5de5\u8d44\uff09\u3002\n    System.out.println(rset.getString(\"dept_name\") + \" \" + rset.getFloat(2));\n}\n</code></pre> <ul> <li>\u4f7f\u7528 <code>stmt.executeQuery()</code> \u6765\u6267\u884c\u4e00\u6b21\u67e5\u8be2\u3002\u5b83\u628a\u7ed3\u679c\u4e2d\u7684\u5143\u7ec4\u96c6\u63d0\u53d6\u5230 <code>ResultSet</code> \u5bf9\u8c61 <code>rset</code> \u4e2d\uff0c\u5e76\u6bcf\u6b21\u53d6\u51fa\u4e00\u4e2a\u5143\u7ec4\u8fdb\u884c\u5904\u7406\u3002</li> <li>\u7ed3\u679c\u96c6\u4e0a\u7684 <code>next()</code> \u65b9\u6cd5\u7528\u6765\u6d4b\u8bd5\u5728\u7ed3\u679c\u96c6\u4e2d\u662f\u5426\u8fd8\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u5c1a\u672a\u63d0\u53d6\u7684\u5143\u7ec4\uff0c\u5982\u679c\u5b58\u5728\u5c31\u53d6\u51fa\u8be5\u5143\u7ec4\u3002 <code>next()</code> \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5e03\u5c14\u53d8\u91cf\uff0c\u5b83\u8868\u793a\u8be5\u65b9\u6cd5\u662f\u5426\u63d0\u53d6\u4e86\u4e00\u4e2a\u5143\u7ec4\u3002</li> <li>\u901a\u8fc7\u4f7f\u7528\u540d\u79f0\u4ee5 <code>get</code> \u6253\u5934\u7684\u5404\u79cd\u65b9\u6cd5\u53ef\u4ee5\u68c0\u7d22\u6765\u81ea\u6240\u63d0\u53d6\u5143\u7ec4\u7684\u5404\u4e2a\u5c5e\u6027\u3002<code>getString()</code> \u65b9\u6cd5\u53ef\u4ee5\u68c0\u7d22\u4efb\u4f55\u57fa\u672c\u7684 SQL \u6570\u636e\u7c7b\u578b(\u5e76\u5c06\u503c\u8f6c\u6362\u6210JavaString \u5bf9\u8c61)\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u50cf <code>getFloat()</code> \u90a3\u6837\u7684\u7ea6\u675f\u6027\u66f4\u5f3a\u7684\u65b9\u6cd5\u3002\u5404\u79cdget\u65b9\u6cd5\u7684\u53c2\u6570\u65e2\u53ef\u4ee5\u662f\u88ab\u6307\u5b9a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5c5e\u6027\u540d\u53c8\u53ef\u4ee5\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5b83\u8868\u660e\u6240\u9700\u5c5e\u6027\u5728\u5143\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002</li> <li><code>rset.getString(\"dept_name\")</code> and <code>rset.getString(1)</code> are equivalent if <code>dept_name</code> is the first argument of select result.</li> <li>Dealing with Null values:</li> </ul> <pre><code>int a = rset.getInt(\"a\");\nif (rset.wasNull()) Systems.out.println(\"Got null value\");\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#prepared-statement","title":"Prepared Statement","text":"<pre><code>PreparedStatement pStmt = conn.prepareStatement(\"insert into instructor values(?,?,?,?)\");\npStmt.setString(1, \"88877\");\npStmt.setString(2, \"Perry\");\npStmt.setString(3, \"Finance\");\npStmt.setInt(4, 125000);\npStmt.executeUpdate();\n\npStmt.setString(1, \"88878\");\npStmt.executeUpdate();\n</code></pre> <ul> <li>\u7b2c\u4e00\u4e2a\u53d8\u91cf\u6307\u660e\u6211\u4eec\u4e3a\u54ea\u4e2a\"?\"\u53c2\u6570\u8d4b\u503c(\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f1, \u533a\u522b\u4e8e\u5927\u591a\u6570\u5176\u4ed6\u7684 Java \u7ed3\u6784\uff0c\u8fd9\u4e9b\u7ed3\u6784\u662f\u4ece 0 \u5f00\u59cb\u7684)\u3002\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u6307\u5b9a\u8981\u8d4b\u4e88\u7684\u503c\u3002</li> </ul> <p>\u6bcf\u6761 SQL \u8bed\u53e5\u90fd\u8981\u7ecf\u8fc7\u4ee5\u4e0b\u8fc7\u7a0b\uff1a</p> <ol> <li>\u8bed\u6cd5\u68c0\u67e5</li> <li>\u8bed\u4e49\u68c0\u67e5</li> <li>\u67e5\u8be2\u4f18\u5316</li> <li>\u6267\u884c</li> </ol> <p>\u8fd9\u4e9b\u8fc7\u7a0b\u5982\u679c\u6bcf\u6761 SQL \u90fd\u6267\u884c\uff0c\u4ee3\u4ef7\u5f88\u5927\uff0c\u56e0\u6b64\u53ef\u4ee5\u5148\u8fdb\u884c\u4e00\u6b21\u6027\u7684\u8bed\u6cd5\u3001\u8bed\u4e49\u3001\u67e5\u8be2\u4f18\u5316\uff0c\u53ea\u7559\u4e0b\u51e0\u4e2a\u53c2\u6570\u3002</p>"},{"location":"Computer_Science/DB/Chapter5/#sql-injection","title":"SQL Injection","text":"<p>WARNING: always use prepared statements when taking an input from the user and adding it to a query</p> <p>NEVER create a query by concatenating strings which you get as inputs</p> <p>Suppose query is constructed using <code>\"select * from instructor where name = '\" + name + \" ' \"</code></p> <p>Suppose the user, instead of entering a name, enters: <code>X' or 'Y' = 'Y</code></p> <p>then the resulting string of the statement becomes: <code>\"select * from instructor where name = '\" + \"X' or 'Y' = 'Y\" + \"'\"</code></p> <p>which is: <code>select * from instructor where name = 'X' or 'Y'  = 'Y'</code></p> <p>User could have even used <code>X'; update instructor set salary = salary + 10000;</code></p> <p>then <code>select * from instructor where name = 'X'; update instructor set salary = salary + 10000;</code></p> <p>Always use prepared statements, with user inputs as parameters.</p> <p>\u4f7f\u7528\u9884\u5907\u8bed\u53e5\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u7c7b\u95ee\u9898\uff0c\u56e0\u4e3a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5c06\u88ab\u63d2\u5165\u8f6c\u4e49\u5b57\u7b26\uff0c\u56e0\u6b64\u6240\u4ea7\u751f\u7684\u67e5\u8be2\u53d8\u4e3a:</p> <pre><code>\"select * from instructor where name = 'X\\'or \\'Y\\'=\\'Y'\n</code></pre> <p>\u8fd9\u662f\u65e0\u5bb3\u7684\u8bed\u53e5\uff0c\u5e76\u8fd4\u56de\u7a7a\u7684\u5173\u7cfb\u3002</p> <p>\u5148 prepare\uff0c\u5148\u8bed\u6cd5\u68c0\u67e5\u3001\u8bed\u4e49\u5206\u6790\uff0c\u518d\u4f18\u5316\u6267\u884c\u3002\u8fd9\u6837\u6709\u5229\u4e8e\u9632\u6b62 SQL \u6ce8\u5165\u7684\u653b\u51fb\u3002</p>"},{"location":"Computer_Science/DB/Chapter5/#metadata-features","title":"Metadata Features","text":"<p>ResultSet metadata</p> <p>E.g., after executing query to get a ResultSet rs:</p> <pre><code>ResultSetMetaData rsmd = rs.getMetaData();\nfor(int i = 1; i &lt;= rsmd.getColumnCount(); i++){\n    System.out.println(rsmd.getColumnName(i));\n    System.out.println(rsmd.getColumnTypeName(i));\n}\n</code></pre> <p>Database metadata</p> <pre><code>DatabaseMetaData dbmd = conn.getMetaData();\nResultSet rs = dbmd.getColumns(null, \"univdb\", \"department\", \"%\");\n\n// Arguments to getColumns: Catalog, Schema-pattern, Table-pattern, and Column-Pattern\n// Returns: One row for each column; row has a number of attributes, such as COLUMN_NAME, TYPE_NAME\n\nwhile( rs.next()){\n    System.out.println(rs.getString(\"COLUMN_NAME\"), rs.getString(\"TYPE_NAME\"));\n}\n</code></pre> <ul> <li><code>getTables()</code> \u65b9\u6cd5\u5141\u8bb8\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u6240\u6709\u8868\u7684\u5217\u8868\u3002 <code>getTables()</code> \u7684\u524d\u4e09\u4e2a\u53c2\u6570\u4e0e <code>getColumns()</code> \u662f\u76f8\u540c\u7684\u3002\u7b2c\u56db\u4e2a\u53c2\u6570\u53ef\u7528\u4e8e\u9650\u5236\u6240\u8fd4\u56de\u7684\u8868\u7684\u7c7b\u578b;\u5982\u679c\u88ab\u8bbe\u7f6e\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u6240\u6709\u8868\uff0c\u5305\u62ec\u7cfb\u7edf\u5185\u90e8\u8868\uff0c\u4f46\u8be5\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u4ec5\u8fd4\u56de\u7531\u7528\u6237\u521b\u5efa\u7684\u8868\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter5/#transaction-control-in-jdbc","title":"Transaction Control in JDBC","text":"<p>By default, each SQL statement is treated as a separate transaction that is committed automatically bad idea for transactions with multiple updates</p> <p>Can turn off automatic commit on a connection <code>conn.setAutoCommit(false);</code></p> <p>Transactions must then be committed or rolled back explicitly <code>conn.commit();</code> or <code>conn.rollback();</code></p> <p>Turns on automatic commit <code>conn.setAutoCommit(true)</code>.</p> <p>JDBC Basics Tutorial(https://docs.oracle.com/javase/tutorial/jdbc/index.html)</p>"},{"location":"Computer_Science/DB/Chapter5/#sqlj","title":"SQLJ","text":"<p>JDBC is overly dynamic, errors cannot be caught by compiler</p> <p>SQLJ: embedded SQL in Java</p> <pre><code>#sql iterator deptInfoIter ( String dept name, int avgSal);\ndeptInfoIter iter = null;\n#sql iter = { select dept_name, avg(salary) as avgSal from instructor group by dept_name};\nwhile (iter.next()){\n    String deptName = iter.dept_name();\n    int avgSal = iter.avgSal();\n    System.out.println(deptName + \" \" + avgSal);\n}\niter.close();\n</code></pre> <p>SQLJ Developer's Guide(https://docs.oracle.com/en/database/oracle/oracle-database/20/jsqlj/toc.htm)</p>"},{"location":"Computer_Science/DB/Chapter5/#odbc","title":"ODBC","text":"<p>Open DataBase Connectivity(ODBC) standard</p> <p>standard for application program to communicate with a database server</p> <p>application program interface (API) to</p> <pre><code>- open a connection with a database,\n- send queries and updates,\n- get back results.\n</code></pre> <p>Applications such as GUI, spreadsheets, etc. can use ODBC</p> <p>Was defined originally for Basic and C, versions available for many languages.</p> <p>Each database system supporting ODBC provides a \"driver\" library that must be linked with the client program.</p> <p></p> <p>When client program makes an ODBC API call, the code in the library communicates with the server to carry out the requested action, and fetch results.</p> <p>ODBC program first allocates an SQL environment, then a database connection handle.</p> <p>Opens database connection using <code>SQLConnect()</code>. Parameters for SQLConnect:</p> <pre><code>- connection handle,\n- the server to which to connect\n- the user identifier, \n- password\n</code></pre> <p>Must also specify types of arguments:</p> <pre><code>SQL_NTS denotes previous argument is a null-terminated string.\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#odbc-code","title":"ODBC Code","text":"<pre><code>int ODBCexample(){\n    RETCODE error;\n    HENV env; /* environment */ \n    HDBC conn; /* database connection */ \n\n    // \u5206\u914d\u4e00\u4e2a\u73af\u5883\n    SQLAllocEnv(&amp;env);\n\n    // \u5728\u8fd9\u4e2a\u73af\u5883\u91cc\u9762\u751f\u6210\u4e00\u4e2a\u4ee3\u8868\u8fde\u63a5\u7684\u53d8\u91cf\n    SQLAllocConnect(env, &amp;conn);\n\n    // \u771f\u6b63\u7684\u8fde\u63a5\uff0cSQL_NTS\u8868\u793a\u53c2\u6570\u662fnull-terminated string\uff0c\u4e5f\u5373 C \u8bed\u8a00\u4e2d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u662f '\\0'\n    SQLConnect(conn, \"db.yale.edu\", SQL_NTS, \"avi\", SQL_NTS, \"avipasswd\", SQL_NTS);\n\n    { ... Do actual work ... }\n    SQLDisconnect(conn); \n    SQLFreeConnect(conn); \n    SQLFreeEnv(env); \n}\n</code></pre> <ul> <li>\u5927\u5199\u7684\u4e1c\u897f\u90fd\u662f ODBC \u5b9a\u4e49\u7684\u7c7b\u578b\u3001\u8fd4\u56de\u503c\u3002</li> <li>\u7b2c\u4e00\u6b65\u662f\u5efa\u7acb\u4e0e\u670d\u52a1\u5668\u7684\u8fde\u63a5\u3002\u4e3a\u6b64\uff0c\u7a0b\u5e8f\u5148\u5206\u914d\u4e00\u4e2a SQL \u73af\u5883\u53d8\u91cf\uff0c\u7136\u540e\u5206\u914d\u4e00\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u53e5\u67c4\u3002ODBC \u5b9a\u4e49\u4e86 HENV\u3001HDBC \u548c RETCODE \u7c7b\u578b\u3002\u7a0b\u5e8f\u968f\u540e\u901a\u8fc7\u4f7f\u7528 SQLConnect \u6253\u5f00\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff0c\u6b64\u8c03\u7528\u9700\u8981\u51e0\u4e2a\u53c2\u6570\uff0c\u5305\u62ec\u8fde\u63a5\u53e5\u67c4\u3001\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7528\u6237\u6807\u8bc6\u548c\u7528\u4e8e\u6570\u636e\u5e93\u7684\u5bc6\u7801\u3002</li> </ul> <p>Program sends SQL commands to database by using <code>SQLExecDirect</code></p> <p>Result tuples are fetched using <code>SQLFetch()</code></p> <p><code>SQLBindCol()</code> binds C language variables to attributes of the query result</p> <pre><code>char deptname[80];\nfloat salary;\nint lenOut1, lenOut2;\nHSTMT stmt;\n\n// \u6309\u7cfb\u7edf\u8ba1\u6bcf\u4e2a\u7cfb\u7684\u5de5\u8d44\u603b\u989d\uff0c\u6ca1\u6267\u884c\u4e4b\u524d\u5728C\u8bed\u8a00\u91cc\u9762\u5c31\u662f\u5b57\u7b26\u4e32\nchar * sqlquery = \"select dept_name, sum (salary)\n                    from instructor\n                    group by dept_name\";\n\n// \u751f\u6210\u4e00\u4e2a\u4ee3\u8868SQL\u8bed\u53e5\u7684\u53d8\u91cf\nSQLAllocStmt(conn, &amp;stmt);\n\n// \u6ca1\u6709 prepare \u76f4\u63a5\u6267\u884c\nerror = SQLExecDirect(stmt, sqlquery, SQL_NTS);\n\n// \u5982\u679c\u6267\u884c\u6210\u529f\uff0c\u5c31\u7ed1\u5b9a\u53d8\u91cf\nif (error == SQL_SUCCESS){\n\n    // \u628a\u67e5\u8be2\u7ed3\u679c\u7684\u7b2c\u4e00\u5217\u7ed1\u5b9a\u5230deptname\uff0c\u7b2c\u4e8c\u5217\u7ed1\u5b9a\u5230salary\n    SQLBindCol(stmt, 1, SQL_C_CHAR, deptname , 80, &amp;lenOut1);\n    SQLBindCol(stmt, 2, SQL_C_FLOAT, &amp;salary, 0 , &amp;lenOut2);\n\n    // \u4e0d\u65ad\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\uff0c\u76f4\u5230\u6ca1\u6709\u7ed3\u679c\u4e3a\u6b62\n    while (SQLFetch(stmt) == SQL_SUCCESS){\n        printf (\" %s %g\\n\", deptname, salary);\n    }\n}\nSQLFreeStmt(stmt, SQL_DROP);\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#odbc-prepared-statements","title":"ODBC Prepared Statements","text":"<p>SQL statement prepared: compiled at the database</p> <p>Can have placeholders: E.g. <code>insert into account values(?,?,?)</code></p> <p>Repeatedly executed with actual values for the placeholders</p> <p>To prepare a statement <code>SQLPrepare(stmt, &lt;SQL String&gt;);</code></p> <p>To bind parameters <code>SQLBindParameter(stmt, &lt;parameter#&gt;, ... type information and value omitted for simplicity...)</code></p> <p>To execute the statement <code>retcode = SQLExecute(stmt);</code></p>"},{"location":"Computer_Science/DB/Chapter5/#more-odbc-features","title":"More ODBC Features","text":"<p>Metadata features</p> <p>finding all the relations in the database and finding the names and types of columns of a query result or a  relation in the database.</p> <p>By default, each SQL statement is treated as a separate transaction that is committed automatically.</p> <p>Can turn off automatic commit on a connection <code>SQLSetConnectOption(conn, SQL_AUTOCOMMIT, 0)</code></p> <p>Transactions must then be committed or rolled back explicitly by <code>SQLTransact(conn, SQL_COMMIT)</code> or <code>SQLTransact(conn, SQL_ROLLBACK)</code></p> <p>\u5728\u7f3a\u7701\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6761SQL\u8bed\u53e5\u90fd\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u81ea\u52a8\u63d0\u4ea4\u7684\u5355\u72ec\u4e8b\u52a1\u3002</p> <p><code>SQLSetConnectOption(conn,SQL AUTOCOMMIT,0)</code> : \u5173\u95ed <code>conn</code> \u8fde\u63a5\u4e0a\u7684\u81ea\u52a8\u63d0\u4ea4\uff0c\u7136\u540e\u4e8b\u52a1\u5fc5\u987b\u901a\u8fc7 <code>SQLTransact(conn,SQL COMMIT)</code> \u6765\u663e\u5f0f\u63d0\u4ea4\u6216\u901a\u8fc7 <code>SQLTransact (conn,SQL ROLLBACK)</code> \u6765\u663e\u5f0f\u56de\u6eda\u3002</p> <p>ODBC Resources : MySQL Connector/ODBC Developer Guide(https://docs.oracle.com/cd/E17952_01/connector-odbcen/index.html)</p>"},{"location":"Computer_Science/DB/Chapter5/#embedded-sql","title":"Embedded SQL","text":"<ul> <li>The SQL standard defines embeddings of SQL in a variety ofprogramming languages such as C, Java, and Cobol.</li> <li>A language to which SQL queries are embedded is referred to as a hostlanguage(\u5bbf\u4e3b\u8bed\u8a00), and the SQL structures permitted in the hostlanguage comprise embedded SaL.</li> <li>EXEC SaL statement is used to identify embedded SQL request to the preprocessol <code>EXEC SQL &lt;embedded SQL statement&gt;END EXEC</code><ul> <li>the Java embedding uses: <code># SQL{...};</code></li> <li>the C embedding uses: <code>EXEC SQL&lt;embedded SQL statement &gt;;</code></li> </ul> </li> </ul>"},{"location":"Computer_Science/DB/Chapter5/#embedded-sol-without-cursor","title":"Embedded SOL without cursor","text":"<pre><code>main(){\n\n    //\u58f0\u660e\u6bb5\u5f00\u59cb\n    EXEC SQL INCLUDE SQLCA; \n    EXEC SQL BEGIN DECLARE SECTION;\n\n    //host variables(\u5bbf\u4e3b\u53d8\u91cf)\u58f0\u660e\uff0c\u7528\u4e8e\u4e0e\u6570\u636e\u5e93\u5185\u7684\u6570\u636e\u7ed1\u5b9a\n    char account_no[l1]; \n    char branch_name[16];\n    int balance;\n\n    //\u58f0\u660e\u6bb5\u7ed3\u675f\n    EXEC SQL END DECLARE SECTION;\n    EXEC SQL CONNECT TO bank_db USER Adam Using Eve;\n\n    scanf(\"%s %s %d\",account_no, branch_name, balance);\n    EXEC SQL insert into account values (:account_no, :branch_name, :balance);\n\n    If(SQLCA.sqlcode !=0){\n        printf (\"Error!\\n\");\n    }else{\n        printf (\"Success!\\n\");\n    }\n}\n</code></pre> <ul> <li>\u5728\u6267\u884c\u4efb\u4f55 SQL \u8bed\u53e5\u4e4b\u524d\uff0c\u7a0b\u5e8f\u5fc5\u987b\u9996\u5148\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002</li> <li>\u5728\u5d4c\u5165\u5f0f SQL \u8bed\u53e5\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5bbf\u4e3b\u8bed\u8a00\u7684\u53d8\u91cf\uff0c\u4e0d\u8fc7\u5b83\u4eec\u7684\u524d\u9762\u5fc5\u987b\u52a0\u4e0a\u5192\u53f7(:)\u4ee5\u5c06\u5b83\u4eec\u4e0e SQL \u53d8\u91cf\u533a\u5206\u5f00\u6765\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter5/#embedded-sol-without-cursorupdate","title":"Embedded SOL without cursor(update)","text":"<pre><code>main(){\n    EXEC SQL INCLUDE SQLCA; //\u58f0\u660e\u6bb5\u5f00\u59cb\n    EXEC SQL BEGIN DECLARE SECTION;\n    char account_no[11];//host variables(\u5bbf\u4e3b\u53d8\u91cf)\u58f0\u660e\n    int balance;\n    EXEC SQL END DECLARE SECTION://\u58f0\u660e\u6bb5\u7ed3\u675f\n    EXEC SQL CONNECT TO bank_db USER Adam Using Eve;\n\n    scanf(\"%s %d\", account_no, balance);\n\n    EXEC SOL update account\n            set balance= balance+:balance\n            where account number=:account_no;\n\n    If(SQLCA sqlcode ! =0) printf(\"Error!\\n\");\n    else printf(\"Success!\\n\");\n}\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#embedded-sol-without-cursorselect-single-record","title":"Embedded SOL without cursor(select single record)","text":"<pre><code>main(){\n    EXEC SQL INCLUDE SOLCA: //\u58f0\u660e\u6bb5\u5f00\u59cb\n    EXEC SQL BEGIN DECLARE SECTION;\n    char account_no[11];//host variables(\u5bbf\u4e3b\u53d8\u91cf)\u58f0\u660e\n    int balance;\n    EXEC SQL END DECLARE SECTION;//\u58f0\u660e\u6bb5\u7ed3\u675f\n    EXEC SQL CONNECT TO bank_db USER Adam Using Eve;\n    scanf(\"%s\", account_no);\n\n    // select into \u5373\u53ef\u5b9e\u73b0\u67e5\u8be2\n    EXEC SQL select balance into :balance\n                from account \n                where account_number = :account_no;\n\n    If(SQLCA sqlcode !=0) printf(\"Error!\\n\");\n    else printf (\u201cbalance= %d \\n\u201d, balance);\n}\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#embedded-sq-l-with-cursorselect-multiple-recordsdelete-and-update","title":"Embedded SQ L with cursor(select multiple records\u3001Delete and Update)","text":"<pre><code>main(){\n    EXEC SQL INCLUDE SOLCA;\n    EXEC SOL BEGIN DECLARE SECTION;\n    char customer_name[2l];\n    char account_no[l1];\n    int balance;\n    EXEC SQL END DECLARE SECTION;\n    EXEC SQL CONNECT TO bank_db USER Adam Using Eve;\n\n    // \u58f0\u660e\u6e38\u6807\uff0c\u6307\u5411\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\n    EXEC SQL DECLARE account cursor CURSOR for\n        select account_number, balance\n        from depositor natural join account\n        where depositor.customer_name=:customer_name;\n        scanf(\"%s\",customer_name);\n\n    // open \u6e38\u6807\u76f8\u5f53\u4e8e\u662f\u8fd0\u884c\n    EXEC SQL open account_cursor;\n    for (; ;){\n        EXEC SQL fetch account_cursor into :account_no, :balance;\n\n        if(SQLCA.sqlcode!=0)\n            break;\n\n        if(balance &lt;1000)\n            EXEC SQL update account set balance = balance * 1.05\n                    where current ofaccount_cursor;\n        else\n            EXEC SQL update account set balance = balance * 1.06\n                    where current of account_cursor;\n\n        printf(\"%s %d \\n\", account_no, balance);\n    }\n    EXEC SQL close account_cursor;\n}\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#basic-steps-in-query-processing","title":"Basic Steps in Query Processing","text":"<ol> <li>Parse the Query: The query is parsed to determine its structure and to check for syntax errors.<ul> <li>\u89e3\u6790\u67e5\u8be2\u4ee5\u786e\u5b9a\u5176\u7ed3\u6784\u5e76\u68c0\u67e5\u8bed\u6cd5\u9519\u8bef\u3002</li> </ul> </li> <li>Generate an Execution Plan: The query is translated into a sequence of steps that will be executed by the DBMS.<ul> <li>\u67e5\u8be2\u88ab\u8f6c\u6362\u4e3a\u5c06\u7531 DBMS \u6267\u884c\u7684\u4e00\u7cfb\u5217\u6b65\u9aa4\u3002(like \u4f18\u5316)</li> </ul> </li> <li>Execute the Query: The execution plan is executed to retrieve the data that satisfies the query. This may involve reading data from disk, performing calculations, and joining tables.<ul> <li>\u6267\u884c\u6267\u884c\u8ba1\u5212\uff0c\u83b7\u53d6\u6ee1\u8db3\u67e5\u8be2\u7684\u6570\u636e\u3002\u8fd9\u53ef\u80fd\u6d89\u53ca\u4ece\u78c1\u76d8\u8bfb\u53d6\u6570\u636e\u3001\u6267\u884c\u8ba1\u7b97\u548c\u8054\u63a5\u8868\u3002</li> </ul> </li> <li>Return the Result: The result of the query is returned to the user.<ul> <li>\u5c06\u67e5\u8be2\u7ed3\u679c\u8fd4\u56de\u7ed9\u7528\u6237\u3002</li> </ul> </li> </ol> <p>Embedded SQL Resources Oracle Database Programmer's Guide - Embedded SQL(https://docs.oracle.com/en/database/oracle/oracle-database/20/lnpcc/embedded-SQL.html#GUID-C671CABF-202A-4503-A16B-DC78D3F1AB13)</p>"},{"location":"Computer_Science/DB/Chapter5/#procedural-constructs-in-sql","title":"Procedural Constructs in SQL","text":"<p>SQL provides a module language : Permits definition of procedures in SQL, with <code>if-then-else</code> statements, <code>for</code>and <code>while loops</code>, etc.</p> <p>Stored Procedures</p> <p>Can store procedures in the database, then execute them using the call statement. Permit external applications to operate on the database without knowing about internal details.</p>"},{"location":"Computer_Science/DB/Chapter5/#sql-functions","title":"SQL Functions","text":"<p>Define a function that, given the name of a department, returns the count of the number of instructors in that department.</p> <ul> <li>SQL\u6807\u51c6\u652f\u6301\u4ee5\u8fd4\u56de\u8868\u4f5c\u4e3a\u7ed3\u679c\u7684\u51fd\u6570;\u8fd9\u79cd\u51fd\u6570\u79f0\u4e3a\u8868\u51fd\u6570\u3002</li> </ul> <pre><code>-- \u51fd\u6570\u7684\u540d\u5b57\u3001\u53c2\u6570\u3001\u8fd4\u56de\u503c\u7c7b\u578b\ncreate function dept_count(dept_name varchar(20))\nreturns integer\n\n-- \u51fd\u6570\u7684\u4e3b\u4f53\nbegin\n    declare d_count integer;\n    select count (*) into d_count\n    from instructor\n    where instructor.dept_name = dept_name\n    return d_count;\nend\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#table-functions","title":"Table Functions","text":"<p>SQL:2003 added functions that return a relation as a result</p> <p>SQL \u4e5f\u652f\u6301\u8fc7\u7a0b\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u8fc7\u7a0b\u3002</p> <p>Example: Return all accounts owned by a given customer</p> <pre><code>create function instructors_of (dept_name char(20))\nreturns table ( ID varchar(5), name varchar(20), dept_name varchar(20), salary numeric(8,2))\n\n-- \u53ea\u6709\u4e00\u6761\u8bed\u53e5\uff0c\u6240\u4ee5\u4e0d\u9700\u8981begin\u548cend\nreturn table\n    (select ID, name, dept_name, salary\n    from instructor\n    where instructor.dept_name = instructors_of.dept_name)\n\nUsage\n    select *\n    from table (instructors_of ('Music'))\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#sql-procedures","title":"SQL Procedures","text":"<p>\u5728 SQL \u4e2d Procedure \u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u503c\u662f\u7531\u53c2\u6570\u4f20\u9012\u7684\u3002</p> <p>The dept_count function could instead be written as procedure:</p> <pre><code>create procedure dept_count_proc (in dept_name varchar(20), \n                                    out d_count integer)\nbegin\n    select count(*) into d_count\n    from instructor\n    where instructor.dept_name = dept_count_proc.dept_name\nend\n</code></pre> <ul> <li>\u5173\u952e\u5b57 <code>in</code> \u548c <code>out</code> \u5206\u522b\u8868\u793a\u5f85\u8d4b\u503c\u7684\u53c2\u6570\u548c\u4e3a\u4e86\u8fd4\u56de\u7ed3\u679c\u800c\u5728\u8fc7\u7a0b\u4e2d\u8bbe\u7f6e\u503c\u7684\u53c2\u6570\u3002</li> </ul> <p>Procedures can be invoked either from an SQL procedure or from embedded SQL, using the call statement.</p> <p>\u53ef\u4ee5\u4ece\u4e00\u4e2a SQL \u8fc7\u7a0b\u4e2d\u6216\u8005\u4ece\u5d4c\u5165\u5f0f SQL \u4e2d\u901a\u8fc7\u4f7f\u7528 <code>call</code> \u8bed\u53e5\u6765\u8c03\u7528\u8fc7\u7a0b:</p> <pre><code>declare d_count integer;\ncall dept_count_proc('Physics', d_count);\n</code></pre> <p>Procedures and functions can be invoked also from dynamic SQL.</p> <p>while \u8bed\u53e5\u548c repeat \u8bed\u53e5\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>while \u5e03\u5c14\u8868\u8fbe\u5f0f do\n        \u8bed\u53e5\u5e8f\u5217;\nend while\n\nrepeat\n        \u8bed\u53e5\u5e8f\u5217;\nuntil \u5e03\u5c14\u8868\u8fbe\u5f0f\nend repeat\n</code></pre> <p>\u8fd8\u6709 for \u5faa\u73af\uff0c\u5b83\u5141\u8bb8\u5728\u67e5\u8be2\u7684\u6240\u6709\u7ed3\u679c\u4e0a\u8fdb\u884c\u5faa\u73af\u3002</p> <pre><code>for \u5faa\u73af\u53d8\u91cf in \u8bed\u53e5\u5e8f\u5217 do\n        \u8bed\u53e5\u5e8f\u5217;\nend for\n\ndeclare n integer default O;\nfor r as\n    select budget from department\n    where dept_name = 'Music'\ndo\n    set n = n- r.budget\nend for\n</code></pre> <p>SQL \u4e5f\u652f\u6301 if-then-else \u8bed\u53e5\u3002</p> <pre><code>if \u5e03\u5c14\u8868\u8fbe\u5f0f then\n    \u8bed\u53e5\u5e8f\u5217;\nelse if \u5e03\u5c14\u8868\u8fbe\u5f0f then\n    \u8bed\u53e5\u5e8f\u5217;\nelse\n    \u8bed\u53e5\u5e8f\u5217;\nend if\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#triggers","title":"Triggers","text":"<p>A trigger is a statement that is executed automatically by the system as a side effect of a modification to the database.</p> <p>\u89e6\u53d1\u5668\u662f\u5728\u8868\u4e0a\u5b9a\u4e49\u7684\u4e00\u4e9b\u7a0b\u5e8f\u3001\u4e00\u4e2a\u51fd\u6570\u3001\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u8fd9\u4e9b\u8fc7\u7a0b\u662f\u88ab\u67d0\u4e9b\u4e8b\u4ef6\u6fc0\u6d3b\u7684\u3002</p> <p>Trigger - ECA rule     - E: Event \uff08<code>insert</code>,<code>delete</code>,<code>update</code>\uff09     - C: Condition      - A: Action</p> <p>To design a trigger mechanism, we must:     - Specify the conditions under which the trigger is to be executed.     - Specify the actions to be taken when the trigger executes.</p> <p>Triggers introduced to SQL standard in SQL:1999, but supported even earlier using non-standard syntax by most databases.</p> <p>Example:</p> <pre><code>-- \u989d\u5916\u5b9a\u4e49\u4e00\u4e2a\u8868\naccount_log(account, amount, datetime)\n\n-- \u5b9a\u4e49\u4e00\u4e2a\u89e6\u53d1\u5668\ncreate trigger account_trigger after update of account on balance\nreferencing new row as nrow \nreferencing old row as orow\n\n-- \u884c\u7ea7\u89e6\u53d1\u5668\nfor each row\nwhen nrow.balance - orow.balance &gt;= 200000 or orow.balance - nrow.balance &gt;= 50000\nbegin \n    insert into account_log values (nrow.account-number, nrow.balance - orow.balance , current_time())\nend\n</code></pre> <p>E.g. time_slot_id is not a primary key of timeslot, so we cannot create a foreign key constraint from section to timeslot.</p> <p>Alternative: use triggers on section and timeslot to enforce integrity constraints</p> <pre><code>create trigger timeslot_check1 after insert on section\nreferencing new row as nrow\n\nfor each row\n\n/* time_slot_id not present in time_slot */\nwhen (nrow.time_slot_id not in (\n                                select time_slot_id\n                                from time_slot)) \nbegin\n    rollback\nend;\n</code></pre> <pre><code>create trigger timeslot_check2 after delete on timeslot\nreferencing old row as orow\n\nfor each row\n\n/* last tuple for time slot id deleted from time slot */\nwhen (orow.time_slot_id not in (\n                                select time_slot_id\n                                from time_slot)\n\n/* and time_slot_id still referenced from section*/\n                        and orow.time_slot_id in (\n                                select time_slot_id\n                                from section))\n\nbegin\n    rollback\nend;\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#trigger-to-maintain-credits_earned-value","title":"Trigger to Maintain credits_earned value","text":"<pre><code>create trigger credits_earned after update of takes on grade\nreferencing new row as nrow\nreferencing old row as orow\n\nfor each row\nwhen nrow.grade &lt;&gt; 'F' and nrow.grade is not null\n    and (orow.grade = 'F' or orow.grade is null)\nbegin atomic\n    update student\n    set tot_cred = tot_cred + (\n        select credits\n        from course\n        where course.course_id= nrow.course_id)\n    where student.id = nrow.id;\nend;\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#trigger-used-before-events","title":"Trigger used before events","text":"<pre><code>create trigger setnull before update of takes\nreferencing new row as nrow\nfor each row\nwhen (nrow.grade ='')\nbegin atomic\n    set nrow.grade = null\nend;\n</code></pre> <ul> <li>\u89e6\u53d1\u5668\u53ef\u4ee5\u5728\u4e8b\u4ef6(\u63d2\u5165\u3001\u5220\u9664\u6216\u66f4\u65b0)\u4e4b\u524d\u88ab\u6fc0\u6d3b\uff0c\u800c\u4e0d\u4ec5\u662f\u5728\u4e8b\u4ef6\u4e4b\u540e\u88ab\u6fc0\u6d3b\u3002</li> <li>\u5728\u4e8b\u4ef6\u4e4b\u524d\u6267\u884c\u7684\u89e6\u53d1\u5668\u53ef\u4ee5\u4f5c\u4e3a\u907f\u514d\u975e\u6cd5\u66f4\u65b0\u3001\u63d2\u5165\u6216\u5220\u9664\u7684\u989d\u5916\u7ea6\u675f\u3002\u4e3a\u4e86\u907f\u514d\u6267\u884c\u975e\u6cd5\u64cd\u4f5c\u800c\u4ea7\u751f\u9519\u8bef\uff0c\u89e6\u53d1\u5668\u53ef\u4ee5\u91c7\u53d6\u63aa\u65bd\u6765\u7ea0\u6b63\u95ee\u9898\uff0c\u4f7f\u66f4\u65b0\u3001\u63d2\u5165\u6216\u5220\u9664\u53d8\u5f97\u5408\u6cd5\u5316\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter5/#statement-level-triggers","title":"Statement Level Triggers","text":"<p>Instead of executing a separate action for each affected row, a single action can be executed for all rows affected by a transaction.</p> <p>\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u5f15\u8d77\u63d2\u5165\u3001\u5220\u9664\u6216\u66f4\u65b0\u7684\u6574\u6761 SQL \u8bed\u53e5\u6267\u884c\u5355\u4e2a\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u9488\u5bf9\u6bcf\u4e2a\u53d7\u5f71\u54cd\u7684\u884c\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u3002</p> <p>\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u7528 <code>for each statement</code> \u5b50\u53e5\u6765\u66ff\u4ee3 <code>for each row</code> \u5b50\u53e5\u3002\u7136\u540e\u53ef\u4ee5\u7528 <code>referencing old table as</code> \u5b50\u53e5\u6216 <code>referencing new table as</code> \u5b50\u53e5\u6765\u6307\u4ee3\u5305\u542b\u6240\u6709\u53d7\u5f71\u54cd\u884c\u7684\u4e34\u65f6\u8868(\u79f0\u4e3a\u8fc7\u6e21\u8868(transitiontable))\u3002</p> <p>\u8fc7\u6e21\u8868\u4e0d\u80fd\u7528\u4e8e before \u89e6\u53d1\u5668\uff0c\u4f46\u662f\u5b83\u4eec\u53ef\u4ee5\u7528\u4e8e after \u89e6\u53d1\u5668\uff0c\u65e0\u8bba\u662f\u8bed\u53e5\u89e6\u53d1\u5668\u8fd8\u662f\u884c\u89e6\u53d1\u5668\u3002\u8fd9\u6837\uff0c\u5728\u8fc7\u6e21\u8868\u7684\u57fa\u7840\u4e0a\uff0c\u5355\u6761 SQL \u8bed\u53e5\u5c31\u53ef\u4ee5\u7528\u6765\u6267\u884c\u591a\u4e2a\u64cd\u4f5c\u3002</p> <pre><code>create trigger grade_trigger after update of takes on grade\nreferencing new table as new_table \n\nfor each statement\nwhen exists( select avg(grade)\n            from new_table\n            group by course_id, sec_id, semester, year\n            having avg(grade)&lt; 60 )\n\nbegin \n    rollback\nend;\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#when-not-to-use-triggers","title":"When Not To Use Triggers","text":"<p>Triggers were used earlier for tasks such as </p> <pre><code>- maintaining summary data (e.g., total salary of each department).\n- Replicating databases by recording changes to special relations (called change or delta relations) and having a separate process that applies the changes over to a replica.\n</code></pre> <p>There are better ways of doing these now:</p> <pre><code>- Databases today provide built in materialized view facilities to maintain summary data.\n- Databases provide built-in support for replication.\n</code></pre> <p>Encapsulation facilities can be used instead of triggers in many cases:</p> <pre><code>- Define methods to update fields\n- Carry out actions as part of the update methods instead of through a trigger\n</code></pre>"},{"location":"Computer_Science/DB/Chapter5/#recursive-queries","title":"Recursive Queries","text":""},{"location":"Computer_Science/DB/Chapter5/#recursion-in-sql","title":"Recursion in SQL","text":"<pre><code>-- recursive \u6307\u660e\u4e86\u89c6\u56fe\u662f\u9012\u5f52\u7684\nwith recursive rec_prereq(course_id, prereq_id) as (\n\n    -- \u57fa\u7840\u67e5\u8be2\uff08\u975e\u9012\u5f52\u90e8\u5206\uff09\n    select course_id, prereq_id\n    from prereq\n\n    union\n\n    -- \u9012\u5f52\u90e8\u5206\n    select rec_prereq.course_id, prereq.prereq_id\n    from rec_prereq, prereq\n    where rec_prereq.prereq_id = prereq.course_id\n)\n\nselect \u2217\nfrom rec_prereq;\n</code></pre> <ul> <li>\u57fa\u7840\u67e5\u8be2\uff1a\u4ece prereq \u8868\u4e2d\u83b7\u53d6\u6240\u6709\u8bfe\u7a0b\u7684\u76f4\u63a5\u5148\u4fee\u5173\u7cfb\u3002</li> <li>\u9012\u5f52\u67e5\u8be2\uff1a\u5c06\u9012\u5f52CTE\u7684\u5f53\u524d\u7ed3\u679c\uff08rec_prereq\uff09\u4e0e\u539f\u59cb\u8868\uff08prereq\uff09\u8fde\u63a5\u3002\u8fde\u63a5\u6761\u4ef6\u4e3a <code>rec_prereq.prereq_id = prereq.course_id</code> \uff0c\u5373\u201c\u5f53\u524d\u5148\u4fee\u8bfe\u7684\u5148\u4fee\u8bfe\u201d\u3002\u6700\u7ec8\u7ed3\u679c\u4e3a\u539f\u59cb\u8bfe\u7a0b\uff08rec_prereq.course_id\uff09\u548c\u66f4\u5e95\u5c42\u7684\u5148\u4fee\u8bfe\uff08prereq.prereq_id\uff09\u3002</li> </ul> <p>\u5047\u8bbe\u6267\u884c\u5b8c\u57fa\u7840\u67e5\u8be2\u540e\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u8868\uff1a</p> course_id prereq_id A B B C C D <p>\u90a3\u4e48\u9012\u5f52\u67e5\u8be2\u7684\u610f\u601d\u662f\uff08\u4ee5 A \u4e3a\u4f8b\uff09\uff1a</p> <p>\u4ece\u4e0a\u8ff0\u8868\u4e0e\u539f\u59cb\u8868\u4e2d\u67e5\u627e\uff0c\u5f53\u4e0a\u8ff0\u8868\u4e2d prereq_id \u4e0e\u539f\u59cb\u8868 course_id \u76f8\u7b49\u65f6\uff0c\u9009\u62e9\u4e0a\u8ff0\u8868\u8fd9\u4e00\u884c\u4e2d\u7684 course_id \u548c\u539f\u59cb\u8868\u4e2d\u67e5\u8be2\u65f6\u5bf9\u5e94\u7684 course_id\u3002</p> <p>\u5bf9\u9012\u5f52\u89c6\u56fe\u542b\u4e49\u7684\u6700\u597d\u7684\u7406\u89e3\u65b9\u5f0f\u5982\u4e0b:</p> <ol> <li>\u9996\u5148\u8ba1\u7b97\u57fa\u67e5\u8be2\uff0c\u5e76\u628a\u6240\u6709\u7ed3\u679c\u5143\u7ec4\u6dfb\u52a0\u5230\u9012\u5f52\u5b9a\u4e49\u7684\u89c6\u56fe\u5173\u7cfb <code>rec_prereg</code> \u4e2d(\u5b83\u521d\u59cb\u4e3a\u7a7a)\u3002</li> <li>\u7136\u540e\u7528\u89c6\u56fe\u5173\u7cfb\u7684\u5f53\u524d\u5185\u5bb9\u8ba1\u7b97\u9012\u5f52\u67e5\u8be2\u5e76\u628a\u6240\u6709\u7ed3\u679c\u5143\u7ec4\u52a0\u56de\u5230\u89c6\u56fe\u5173\u7cfb\u4e2d\u3002</li> <li>\u6301\u7eed\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u76f4\u81f3\u6ca1\u6709\u65b0\u7684\u5143\u7ec4\u6dfb\u52a0\u5230\u89c6\u56fe\u5173\u7cfb\u4e2d\u4e3a\u6b62\u3002</li> </ol> <p>\u6240\u5f97\u5230\u7684\u89c6\u56fe\u5173\u7cfb\u5b9e\u4f8b\u88ab\u79f0\u4e3a\u9012\u5f52\u89c6\u56fe\u5b9a\u4e49\u7684\u4e0d\u52a8\u70b9(fixed point)\u3002\u8fd9\u6837\uff0c\u89c6\u56fe\u5173\u7cfb\u5c31\u88ab\u5b9a\u4e49\u4e3a\u6b63\u597d\u5305\u542b\u4e0d\u52a8\u70b9\u5b9e\u4f8b\u4e2d\u7684\u5143\u7ec4\u3002</p>"},{"location":"Computer_Science/DB/Chapter6/","title":"Chapter 6 | Entity-Relationship Model","text":"<p> \u7ea6 5811 \u4e2a\u5b57  31 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 29 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter6/#database-design-process","title":"Database Design Process","text":"<p>requirement specification (\u89c4\u8303\u8bf4\u660e\u3001\u9700\u6c42\u5b9a\u4e49)     - specification of user requirement</p> <pre><code>\u6570\u636e\u5e93\u8bbe\u8ba1\u7684\u6700\u521d\u9636\u6bb5\u662f\u5b8c\u6574\u5730\u63cf\u8ff0\u672a\u6765\u6570\u636e\u5e93\u7528\u6237\u7684\u6570\u636e\u9700\u6c42\u3002\u4e3a\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u6570\u636e\u5e93\u8bbe\u8ba1\u8005\u9700\u8981\u540c\u5e94\u7528\u9886\u57df\u7684\u4e13\u5bb6\u548c\u7528\u6237\u8fdb\u884c\u6df1\u5165\u7684\u6c9f\u901a\u3002\u8fd9\u4e00\u9636\u6bb5\u7684\u4ea7\u51fa\u662f\u7528\u6237\u9700\u6c42\u89c4\u683c\u8bf4\u660e\u3002\u867d\u7136\u5b58\u5728\u56fe\u5f62\u5316\u65b9\u5f0f\u7684\u7528\u6237\u9700\u6c42\u8868\u793a\u6280\u672f\uff0c\u4f46\u662f\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u4ec5\u9650\u4e8e\u91c7\u7528\u6587\u672c\u7684\u65b9\u5f0f\u6765\u63cf\u8ff0\u7528\u6237\u9700\u6c42\u3002\n</code></pre> <p>conceptual-design (\u6982\u5ff5\u8bbe\u8ba1)     - E-R diagram</p> <pre><code>\u8bbe\u8ba1\u8005\u9009\u62e9\u4e00\u79cd\u6570\u636e\u6a21\u578b\uff0c\u5e76\u91c7\u7528\u6240\u9009\u6570\u636e\u6a21\u578b\u7684\u6982\u5ff5\u5c06\u8fd9\u4e9b\u9700\u6c42\u8f6c\u5316\u4e3a\u6570\u636e\u5e93\u7684\u6982\u5ff5\u6a21\u5f0f\u3002\u5728\u6b64\u6982\u5ff5\u8bbe\u8ba1\u9636\u6bb5\u6240\u4ea7\u751f\u7684\u6a21\u5f0f\u63d0\u4f9b\u4e86\u5bf9\u4f01\u4e1a\u7684\u8be6\u7ec6\u6982\u89c8\u3002\u6982\u5ff5\u6a21\u5f0f\u660e\u786e\u89c4\u5b9a\u4e86\u6570\u636e\u5e93\u4e2d\u8868\u793a\u7684\u5b9e\u4f53\u5b9e\u4f53\u7684\u5c5e\u6027\u3001\u5b9e\u4f53\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u4ee5\u53ca\u5b9e\u4f53\u548c\u8054\u7cfb\u4e0a\u7684\u7ea6\u675f\u3002\u901a\u5e38\uff0c\u6982\u5ff5\u8bbe\u8ba1\u9636\u6bb5\u4f1a\u5bfc\u81f4\u5b9e\u4f53-\u8054\u7cfb\u56fe\u7684\u6784\u5efa\uff0c\u5b83\u63d0\u4f9b\u4e86\u5bf9\u6a21\u5f0f\u7684\u56fe\u5f62\u5316\u8868\u793a\u3002\n</code></pre> <p>logical-design (\u903b\u8f91\u8bbe\u8ba1)     - logical schema</p> <pre><code>\u5728\u903b\u8f91\u8bbe\u8ba1\u9636\u6bb5\u4e2d\uff0c\u8bbe\u8ba1\u8005\u5c06\u9ad8\u5c42\u6982\u5ff5\u6a21\u5f0f\u6620\u5c04\u5230\u5c06\u88ab\u4f7f\u7528\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u5177\u4f53\u5b9e\u73b0\u7684\u6570\u636e\u6a21\u578b\u3002\u6570\u636e\u6a21\u578b\u7684\u5b9e\u73b0\u901a\u5e38\u662f\u5173\u7cfb\u6570\u636e\u6a21\u578b\uff0c\u5e76\u4e14\u8be5\u9636\u6bb5\u901a\u5e38\u5305\u62ec\u5c06\u91c7\u7528\u5b9e\u4f53-\u8054\u7cfb\u6a21\u578b\u5b9a\u4e49\u7684\u6982\u5ff5\u6a21\u5f0f\u6620\u5c04\u5230\u5173\u7cfb\u6a21\u5f0f\u3002\n</code></pre> <p>physical-design (\u7269\u7406\u8bbe\u8ba1)     - physical schema</p> <pre><code>\u6570\u636e\u5e93\u7684\u7269\u7406\u7279\u6027\u88ab\u5177\u4f53\u8bf4\u660e\uff0c\u8fd9\u4e9b\u7279\u6027\u5305\u62ec\u6587\u4ef6\u7ec4\u7ec7\u5f62\u5f0f\u548c\u7d22\u5f15\u7ed3\u6784\u7684\u9009\u62e9\u3002\n</code></pre>"},{"location":"Computer_Science/DB/Chapter6/#design-alternatives","title":"Design Alternatives","text":"<p>In designing a database schema, we must ensure that we avoid two major pitfalls:</p> <ol> <li>Redundancy:<ul> <li>\u4e00\u79cd\u4e0d\u597d\u7684\u8bbe\u8ba1\u53ef\u80fd\u4f1a\u91cd\u590d\u4fe1\u606f\u3002</li> <li>\u5197\u4f59\u4e5f\u53ef\u80fd\u51fa\u73b0\u5728\u5173\u7cfb\u6a21\u5f0f\u4e2d\u3002</li> <li>\u4fe1\u606f\u7684\u8fd9\u79cd\u5197\u4f59\u8868\u8fbe\u7684\u6700\u5927\u95ee\u9898\u662f:\u5982\u679c\u5bf9\u4e00\u6761\u4fe1\u606f\u8fdb\u884c\u4e86\u66f4\u65b0\u4f46\u6ca1\u6709\u4ed4\u7ec6\u5730\u5c06\u8fd9\u6761\u4fe1\u606f\u7684\u6240\u6709\u62f7\u8d1d\u90fd\u66f4\u65b0\uff0c\u90a3\u4e48\u8fd9\u6761\u4fe1\u606f\u7684\u62f7\u8d1d\u4f1a\u53d8\u5f97\u4e0d\u4e00\u81f4\u3002</li> </ul> </li> <li>Incompleteness:<ul> <li>\u4e00\u79cd\u4e0d\u597d\u7684\u8bbe\u8ba1\u53ef\u80fd\u4f1a\u4f7f\u5f97\u4f01\u4e1a\u7684\u67d0\u4e9b\u65b9\u9762\u96be\u4ee5\u751a\u81f3\u65e0\u6cd5\u5efa\u6a21\u3002</li> </ul> </li> </ol>"},{"location":"Computer_Science/DB/Chapter6/#e-r-diagram-for-a-university-enterprise","title":"E-R Diagram for a University Enterprise","text":"<ul> <li>Entity-Relationship</li> </ul>"},{"location":"Computer_Science/DB/Chapter6/#entity-sets","title":"Entity Sets","text":"<p>\u5b9e\u4f53\u96c6(entity set)\u662f\u5171\u4eab\u76f8\u540c\u6027\u8d28\u6216\u5c5e\u6027\u7684\u3001\u5177\u6709\u76f8\u540c\u7c7b\u578b\u7684\u5b9e\u4f53\u7684\u96c6\u5408\u3002</p> <p>\u5b9e\u4f53\u96c6\u4e0d\u5fc5\u4e92\u4e0d\u76f8\u4ea4\u3002</p> <p>\u5b9e\u4f53\u901a\u8fc7\u4e00\u7ec4\u5c5e\u6027(attribute)\u6765\u8868\u793a\u3002\u5c5e\u6027\u662f\u5b9e\u4f53\u96c6\u4e2d\u6bcf\u4e2a\u6210\u5458\u6240\u62e5\u6709\u7684\u63cf\u8ff0\u6027\u6027\u8d28\u3002\u4e3a\u5b9e\u4f53\u96c6\u8bbe\u8ba1\u4e00\u4e2a\u5c5e\u6027\u8868\u660e\u6570\u636e\u5e93\u5b58\u50a8\u5173\u4e8e\u8be5\u5b9e\u4f53\u96c6\u4e2d\u6bcf\u4e2a\u5b9e\u4f53\u7684\u7c7b\u4f3c\u4fe1\u606f\uff0c\u4f46\u6bcf\u4e2a\u5b9e\u4f53\u5728\u6bcf\u4e2a\u5c5e\u6027\u4e0a\u53ef\u4ee5\u6709\u5b83\u81ea\u5df1\u7684\u503c\u3002</p> <p>\u5b9e\u4f53\u96c6\u5728 E-R \u56fe\u4e2d\u7528\u4e00\u4e2a\u77e9\u5f62\u6765\u8868\u793a\uff0c\u8be5\u77e9\u5f62\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u3002\u7b2c\u4e00\u90e8\u5206\u5728\u56fe\u4e2d\u4e3a\u84dd\u8272\u9634\u5f71\uff0c\u5b83\u5305\u542b\u5b9e\u4f53\u96c6\u7684\u540d\u79f0\u3002\u7b2c\u4e8c\u90e8\u5206\u5305\u542b\u5b9e\u4f53\u96c6\u6240\u6709\u5c5e\u6027\u7684\u540d\u79f0\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter6/#relationship-sets","title":"Relationship Sets","text":"<p>\u8054\u7cfb(relationship)\u662f\u591a\u4e2a\u5b9e\u4f53\u95f4\u7684\u76f8\u4e92\u5173\u8054\u3002</p> <p>E-R \u6a21\u5f0f\u4e2d\u7684\u4e00\u4e2a\u8054\u7cfb\u5b9e\u4f8b\u8868\u793a\u5728\u6240\u5efa\u6a21\u7684\u73b0\u5b9e\u4f01\u4e1a\u4e2d\u88ab\u547d\u540d\u7684\u5b9e\u4f53\u4e4b\u95f4\u7684\u4e00\u79cd\u5173\u8054\u3002</p> <p>\u8054\u7cfb\u96c6\u5728 E-R \u56fe\u4e2d\u7528\u840e\u5f62\u8868\u793a\uff0c\u83f1\u5f62\u901a\u8fc7\u7ebf\u6761\u8fde\u63a5\u5230\u591a\u4e2a\u4e0d\u540c\u7684\u5b9e\u4f53\u96c6(\u77e9\u5f62)\u3002</p> <p></p> <p>Formally, a relationship set is a mathematical relation on n \\(\\ge\\) 2 (possibly nondistinct) entity sets. If \\(E_1, E_2, \\ldots, E_n\\) are entity sets, then a relationship set R is a subset of \\(\\{(e_1, e_2, \\ldots, e_n) \\mid e_i \\in E_i\\}\\) , where \\((e_1, e_2, \\ldots, e_i)\\) is a relationship instance.</p>"},{"location":"Computer_Science/DB/Chapter6/#participate","title":"participate","text":"<p>\u5b9e\u4f53\u96c6\u4e4b\u95f4\u7684\u5173\u8054\u88ab\u79f0\u4e3a\u53c2\u4e0e\uff0c\u5373\u5b9e\u4f53\u96c6 \\(E_1, E_2, \\ldots, E_n\\) \u53c2\u4e0e(participate)\u8054\u7cfb\u96c6 R\u3002</p>"},{"location":"Computer_Science/DB/Chapter6/#role","title":"role","text":"<p>\u5b9e\u4f53\u5728\u8054\u7cfb\u4e2d\u626e\u6f14\u7684\u529f\u80fd\u88ab\u79f0\u4e3a\u5b9e\u4f53\u7684\u89d2\u8272(role)\u3002</p> <ul> <li>\u7531\u4e8e\u53c2\u4e0e\u4e00\u4e2a\u8054\u7cfb\u96c6\u7684\u5b9e\u4f53\u96c6\u901a\u5e38\u662f\u4e92\u5f02\u7684\uff0c\u56e0\u6b64\u89d2\u8272\u662f\u9690\u542b\u7684\u5e76\u4e14\u4e00\u822c\u5e76\u4e0d\u6307\u5b9a\u3002</li> <li>\u4f46\u662f\uff0c\u5f53\u8054\u7cfb\u7684\u542b\u4e49\u9700\u8981\u89e3\u91ca\u65f6\uff0c\u89d2\u8272\u662f\u6709\u7528\u7684\u3002\u5f53\u53c2\u4e0e\u8054\u7cfb\u96c6\u7684\u5b9e\u4f53\u96c6\u5e76\u975e\u4e92\u5f02\u65f6\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5:\u540c\u6837\u7684\u5b9e\u4f53\u96c6\u4ee5\u4e0d\u540c\u7684\u89d2\u8272\u591a\u6b21\u53c2\u4e0e\u4e00\u4e2a\u8054\u7cfb\u96c6\u3002\u5728\u8fd9\u7c7b\u8054\u7cfb\u96c6\u4e2d\uff0c\u6709\u5fc5\u8981\u7528\u663e\u5f0f\u7684\u89d2\u8272\u540d\u6765\u6307\u660e\u5b9e\u4f53\u662f\u5982\u4f55\u53c2\u4e0e\u8054\u7cfb\u5b9e\u4f8b\u7684\uff0c\u8fd9\u7c7b\u8054\u7cfb\u96c6\u6709\u65f6\u88ab\u79f0\u4f5c\u9012\u5f52\u7684(recursive)\u8054\u7cfb\u96c6\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u8003\u8651\u8bb0\u5f55\u5927\u5b66\u4e2d\u6240\u5f00\u8bbe\u7684\u6240\u6709\u8bfe\u7a0b\u7684\u4fe1\u606f\u7684 course \u5b9e\u4f53\u96c6\u3002\u6211\u4eec\u7528 course \u5b9e\u4f53\u7684\u6709\u5e8f\u5bf9\u6765\u5efa\u6a21\u8054\u7cfb\u96c6 prereg \u4ee5\u63cf\u8ff0\u4e00\u95e8\u8bfe\u7a0b(C2)\u662f\u53e6\u4e00\u95e8\u8bfe\u7a0b(C1)\u7684\u5148\u4fee\u8bfe\u3002\u6bcf\u5bf9\u8bfe\u7a0b\u4e2d\u7684\u7b2c\u4e00\u95e8\u8bfe\u7a0b\u626e\u6f14 C1 \u8bfe\u7a0b\u7684\u89d2\u8272\uff0c\u800c\u7b2c\u4e8c\u95e8\u8bfe\u7a0b\u626e\u6f14 C2 \u5148\u4fee\u8bfe\u7684\u89d2\u8272\u3002\u6309\u7167\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6240\u6709\u7684 prereg \u8054\u7cfb\u901a\u8fc7(C1,C2)\u5bf9\u6765\u8868\u793a\uff0c\u6392\u9664\u4e86(C2,C1)\u5bf9\u3002</p> <p>\u5728E-R\u56fe\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5728\u83f1\u5f62\u548c\u77e9\u5f62\u4e4b\u95f4\u7684\u8fde\u7ebf\u4e0a\u8fdb\u884c\u6807\u6ce8\u6765\u8868\u793a\u89d2\u8272\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter6/#descriptive-attribute","title":"descriptive attribute","text":"<p>\u8054\u7cfb\u4e5f\u53ef\u4ee5\u5177\u6709\u88ab\u79f0\u4f5c\u63cf\u8ff0\u6027\u5c5e\u6027(descriptive attribute)\u7684\u5c5e\u6027\u3002</p> <p>\u4f5c\u4e3a\u8054\u7cfb\u7684\u63cf\u8ff0\u6027\u5c5e\u6027\u7684\u793a\u4f8b\uff0c\u8003\u8651\u4e0e student \u548c section \u5b9e\u4f53\u96c6\u76f8\u5173\u8054\u7684 takes \u8054\u7cfb\u96c6\u3002\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5b58\u50a8\u8054\u7cfb\u7684\u63cf\u8ff0\u6027\u5c5e\u6027 grade \uff0c\u4ee5\u8bb0\u5f55\u5b66\u751f\u5728\u5f00\u8bbe\u7684\u8bfe\u7a0b\u4e2d\u83b7\u5f97\u7684\u6210\u7ee9\u3002</p> <p>\u8054\u7cfb\u96c6\u7684\u5c5e\u6027\u5728 E-R \u56fe\u4e2d\u901a\u8fc7\u672a\u5206\u5272\u7684\u77e9\u5f62\u6765\u8868\u793a\u3002\u6211\u4eec\u7528\u865a\u7ebf\u5c06\u6b64\u77e9\u5f62\u4e0e\u8868\u793a\u8be5\u8054\u7cfb\u96c6\u7684\u83f1\u5f62\u76f8\u8fde\u63a5\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter6/#degree-of-a-relationship-set","title":"Degree of a Relationship Set","text":"<p>\u6d89\u53ca\u4e24\u4e2a\u5b9e\u4f53\u96c6\u7684\u8054\u7cfb\u96c6\uff0c\u4e5f\u5c31\u662f\u4e8c\u5143\u8054\u7cfb\u96c6(binary relationshipset)\u3002</p> <p>\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\u7684\u5927\u90e8\u5206\u8054\u7cfb\u96c6\u90fd\u662f\u4e8c\u5143\u7684\u3002</p> <p>\u7136\u800c\uff0c\u6709\u65f6\u8054\u7cfb\u96c6\u4f1a\u6d89\u53ca\u591a\u4e8e\u4e24\u4e2a\u5b9e\u4f53\u96c6\u3002\u53c2\u4e0e\u8054\u7cfb\u96c6\u7684\u5b9e\u4f53\u96c6\u7684\u6570\u76ee\u662f\u8054\u7cfb\u96c6\u7684\u5ea6(degree)\u3002</p> <p>\u4e8c\u5143\u8054\u7cfb\u96c6\u7684\u5ea6\u4e3a2;\u4e09\u5143\u8054\u7cfb\u96c6(ternary relationship set)\u7684\u5ea6\u4e3a3\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter6/#complex-attributes","title":"Complex Attributes","text":"<p>\u5bf9\u4e8e\u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u4e00\u4e2a\u53ef\u53d6\u503c\u7684\u96c6\u5408\uff0c\u79f0\u4e3a\u8be5\u5c5e\u6027\u7684\u57df(domain)\uff0c\u6216\u8005\u503c\u96c6(value set)\u3002</p> <p>E-R \u6a21\u578b\u4e2d\u4f7f\u7528\u7684\u5c5e\u6027\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u7684\u5c5e\u6027\u7c7b\u578b\u6765\u8fdb\u884c\u63cf\u8ff0\u3002</p>"},{"location":"Computer_Science/DB/Chapter6/#simple-and-composite-attributes","title":"Simple and composite attributes","text":"<ul> <li>\u4e0a\u6587\u4e2d\u51fa\u73b0\u7684\u5c5e\u6027\u90fd\u662f\u7b80\u5355\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u4e0d\u80fd\u88ab\u5212\u5206\u4e3a\u5b50\u90e8\u5206\u3002</li> <li>\u800c\u590d\u5408\u5c5e\u6027\u53ef\u4ee5\u88ab\u5212\u5206\u4e3a\u5b50\u90e8\u5206(\u5373\u5176\u4ed6\u5c5e\u6027)\u3002</li> </ul> <p>\u4f8b\u5982\uff0cname\u5c5e\u6027\u53ef\u88ab\u6784\u5efa\u4e3a\u4e00\u4e2a\u5305\u62ec frst_name\u3001middle_initial \u548c last_name \u7684\u590d\u5408\u5c5e\u6027\u3002</p> <p>\u5982\u679c\u7528\u6237\u5e0c\u671b\u5728\u4e00\u4e9b\u573a\u666f\u4e2d\u5f15\u7528\u6574\u4e2a\u5c5e\u6027\uff0c\u800c\u5728\u53e6\u5916\u7684\u573a\u666f\u4e2d\u4ec5\u5f15\u7528\u5c5e\u6027\u7684\u4e00\u90e8\u5206\uff0c\u5219\u5728\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u4f7f\u7528\u590d\u5408\u5c5e\u6027\u662f\u4e00\u79cd\u597d\u7684\u9009\u62e9\u3002\u590d\u5408\u5c5e\u6027\u5e2e\u52a9\u6211\u4eec\u628a\u76f8\u5173\u5c5e\u6027\u96c6\u5408\u8d77\u6765\uff0c\u4f7f\u6a21\u578b\u66f4\u6e05\u6670\u3002</p> <p>\u8fd8\u8981\u6ce8\u610f\uff0c\u590d\u5408\u5c5e\u6027\u7684\u51fa\u73b0\u53ef\u4ee5\u662f\u6709\u5c42\u6b21\u7684\u3002\u5728 address \u590d\u5408\u5c5e\u6027\u4e2d\uff0c\u5176\u5b50\u5c5e\u6027 street \u53ef\u4ee5\u8fdb\u4e00\u6b65\u5206\u4e3a street_number\u3001street_name \u548capartment_number\u3002</p> <p></p>"},{"location":"Computer_Science/DB/Chapter6/#single-valued-and-multivalued-attributes","title":"Single-valued and multivalued attributes","text":"<p>\u4f8b\u5982\uff0c\u5bf9\u67d0\u4e2a\u7279\u5b9a\u7684\u5b66\u751f\u5b9e\u4f53\u800c\u8a00\uff0cstudent_ID\u5c5e\u6027\u53ea\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u5b66\u751fID\u3002\u8fd9\u6837\u7684\u5c5e\u6027\u88ab\u79f0\u4f5c\u662f\u5355\u503c\u7684\u3002</p> <p>\u800c\u5728\u67d0\u4e9b\u5b9e\u4f8b\u4e2d\uff0c\u5bf9\u4e00\u4e2a\u7279\u5b9a\u5b9e\u4f53\u800c\u8a00\uff0c\u4e00\u4e2a\u5c5e\u6027\u53ef\u80fd\u5bf9\u5e94\u4e8e\u4e00\u7ec4\u503c\u3002\u5047\u8bbe\u6211\u4eec\u5f80 instructor \u5b9e\u4f53\u96c6\u4e2d\u6dfb\u52a0\u4e00\u4e2a phone_number \u5c5e\u6027\uff0c\u6bcf\u4f4d\u6559\u5e08\u53ef\u4ee5\u6709\u96f6\u4e2a\u3001\u4e00\u4e2a\u6216\u591a\u4e2a\u7535\u8bdd\u53f7\u7801\uff0c\u4e0d\u540c\u7684\u6559\u5e08\u53ef\u4ee5\u6709\u4e0d\u540c\u6570\u91cf\u7684\u7535\u8bdd\u53f7\u7801\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u5c5e\u6027\u88ab\u79f0\u4f5c\u662f\u591a\u503c\u7684\u3002</p>"},{"location":"Computer_Science/DB/Chapter6/#derived-attributes","title":"Derived attributes","text":"<p>\u8fd9\u7c7b\u5c5e\u6027\u7684\u503c\u53ef\u4ee5\u4ece\u5176\u4ed6\u76f8\u5173\u5c5e\u6027\u6216\u5b9e\u4f53\u7684\u503c\u6d3e\u751f\u51fa\u6765\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe instructor \u5b9e\u4f53\u96c6\u5177\u6709 age \u5c5e\u6027\uff0c\u5b83\u8868\u793a\u6559\u5e08\u7684\u5e74\u9f84\u3002\u5982\u679c instructor \u5b9e\u4f53\u96c6\u8fd8\u5177\u6709 date_of_birth\u5c5e\u6027\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4ecedate_of_birth\u548c\u5f53\u524d\u65e5\u671f\u8ba1\u7b97\u51fa age\u3002\u56e0\u6b64 age \u5c31\u662f\u6d3e\u751f\u5c5e\u6027\u3002</p> <ul> <li>date_of_birh\u53ef\u4ee5\u79f0\u4e3a\u57fa(base)\u5c5e\u6027\uff0c\u6216\u5b58\u50a8\u7684(stored)\u5c5e\u6027\u3002</li> <li>\u6d3e\u751f\u5c5e\u6027\u7684\u503c\u5e76\u4e0d\u5b58\u50a8\uff0c\u800c\u662f\u5728\u9700\u8981\u65f6\u88ab\u8ba1\u7b97\u51fa\u6765\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter6/#example-figure","title":"Example figure","text":"<p>Here, a composite attribute name with component attributes first_name, middle_initial,and last_name replaces the simple attribute name of instructor. </p> <p>As another example, suppose we were to add an address to the instructor entity set. The address can be defined as the composite attribute address with the attributes street, city, state, and postalcode. The attribute street is itself a composite attribute whose component attributes are street_number, street_name, and apartment_number. </p> <p>The figure also illustrates a multivalued attribute phone_number, denoted by \"{phone number}\", and a derived attribute age, depicted by \"age ( )\".</p>"},{"location":"Computer_Science/DB/Chapter6/#mapping-cardinalities","title":"Mapping Cardinalities","text":"<p>\u6620\u5c04\u57fa\u6570(mapping cardinality)\u6216\u57fa\u6570\u6bd4\u7387\uff0c\u8868\u793a\u4e00\u4e2a\u5b9e\u4f53\u80fd\u901a\u8fc7\u4e00\u4e2a\u8054\u7cfb\u96c6\u5173\u8054\u7684\u53e6\u4e00\u4e9b\u5b9e\u4f53\u7684\u6570\u91cf\u3002</p> <p>\u5bf9\u4e8e\u5b9e\u4f53\u96c6 A \u548c B \u4e4b\u95f4\u7684\u4e8c\u5143\u8054\u7cfb\u96c6 R \u6765\u8bf4\uff0c\u6620\u5c04\u57fa\u6570\u5fc5\u7136\u662f\u4ee5\u4e0b\u60c5\u51b5\u4e4b\u4e00:</p> <ol> <li>\u4e00\u5bf9\u4e00(one-to-one)\u3002 A \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u81f3\u591a\u4e0e B \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u76f8\u5173\u8054\uff0c\u5e76\u4e14 B \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u4e5f\u81f3\u591a\u4e0e A \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u76f8\u5173\u8054\u3002</li> <li>\u4e00\u5bf9\u591a(one-to-many)\u3002A \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u53ef\u4ee5\u4e0e B \u4e2d\u4efb\u610f\u6570\u91cf(\u96f6\u4e2a\u6216\u591a\u4e2a)\u7684\u5b9e\u4f53\u76f8\u5173\u8054\uff0c\u800c B \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u81f3\u591a\u4e0e A \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u76f8\u5173\u8054\u3002</li> </ol> <p></p> <ol> <li>\u591a\u5bf9\u4e00(many-to-one)\u3002A \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u81f3\u591a\u4e0e B \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u76f8\u5173\u8054\uff0c\u800c B \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u53ef\u4ee5\u4e0e A \u4e2d\u4efb\u610f\u6570\u91cf(\u96f6\u4e2a\u6216\u591a\u4e2a)\u7684\u5b9e\u4f53\u76f8\u5173\u8054\u3002</li> <li>\u591a\u5bf9\u591a(many-to-many)\u3002A \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u53ef\u4ee5\u4e0e B \u4e2d\u4efb\u610f\u6570\u91cf(\u96f6\u4e2a\u6216\u591a\u4e2a)\u7684\u5b9e\u4f53\u76f8\u5173\u8054\uff0c\u800c\u4e14 B \u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\u4e5f\u53ef\u4ee5\u4e0eA\u4e2d\u4efb\u610f\u6570\u91cf(\u96f6\u4e2a\u6216\u591a\u4e2a)\u7684\u5b9e\u4f53\u76f8\u5173\u8054\u3002</li> </ol> <p></p> <p>In the E-R diagram notation, we indicate cardinality constraints on a relationship by drawing either a directed line (\\(\\rightarrow\\)) or an undirected line (\u2014) between the relationship set and the entity set in question. </p> <ol> <li>\u4e00\u5bf9\u4e00(one-to-one)\u3002\u6211\u4eec\u4ece\u8054\u7cfb\u96c6\u5230\u4e24\u4e2a\u5b9e\u4f53\u96c6\u5404\u753b\u4e00\u6761\u6709\u5411\u7ebf\u6bb5\u3002</li> </ol> <p></p> <p>\u8868\u793a\u4e00\u4f4d\u6559\u5e08\u6700\u591a\u53ef\u4ee5\u6307\u5bfc\u4e00\u540d\u5b66\u751f\uff0c\u5e76\u4e14\u4e00\u540d\u5b66\u751f\u6700\u591a\u53ef\u4ee5\u6709\u4e00\u4f4d\u5bfc\u5e08\u3002</p> <ol> <li>\u4e00\u5bf9\u591a(one-to-many)\u3002\u6211\u4eec\u4ece\u8054\u7cfb\u96c6\u5230\u8054\u7cfb\u7684\"\u4e00\"\u4fa7\u753b\u4e00\u6761\u6709\u5411\u7ebf\u6bb5\u3002</li> </ol> <p></p> <p>\u8fd9\u8868\u793a\u4e00\u4f4d\u6559\u5e08\u53ef\u4ee5\u6307\u5bfc\u591a\u540d\u5b66\u751f\uff0c\u4f46\u4e00\u540d\u5b66\u751f\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4f4d\u5bfc\u5e08\u3002</p> <ol> <li>\u591a\u5bf9\u4e00(many-to-one)\u3002\u6211\u4eec\u4ece\u8054\u7cfb\u96c6\u5230\u8054\u7cfb\u7684\"\u4e00\"\u4fa7\u753b\u4e00\u6761\u6709\u5411\u7ebf\u6bb5\u3002</li> </ol> <p></p> <p>\u8fd9\u8868\u793a\u4e00\u4f4d\u6559\u5e08\u6700\u591a\u53ef\u4ee5\u6307\u5bfc\u4e00\u540d\u5b66\u751f\uff0c\u4f46\u4e00\u540d\u5b66\u751f\u53ef\u4ee5\u6709\u591a\u4f4d\u5bfc\u5e08\u3002</p> <ol> <li>\u591a\u5bf9\u591a(many-to-many)\u3002\u6211\u4eec\u4ece\u8054\u7cfb\u96c6\u5230\u4e24\u4e2a\u5b9e\u4f53\u96c6\u5404\u753b\u4e00\u6761\u65e0\u5411\u7ebf\u6bb5\u3002</li> </ol> <p></p> <p>\u8fd9\u8868\u793a\u4e00\u4f4d\u6559\u5e08\u53ef\u4ee5\u6307\u5bfc\u591a\u540d\u5b66\u751f\uff0c\u5e76\u4e14\u4e00\u540d\u5b66\u751f\u53ef\u4ee5\u6709\u591a\u4f4d\u5bfc\u5e08\u3002</p> <p>\u5982\u679c\u5b9e\u4f53\u96c6 E \u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f53\u90fd\u5fc5\u987b\u53c2\u4e0e\u5230\u8054\u7cfb\u96c6 R \u4e2d\u7684\u81f3\u5c11\u4e00\u4e2a\u8054\u7cfb\u4e2d\uff0c\u90a3\u4e48\u5b9e\u4f53\u96c6 E \u5728\u8054\u7cfb\u96c6 R \u4e2d\u7684\u53c2\u4e0e\u5c31\u88ab\u79f0\u4e3a\u662f\u5168\u90e8(total)\u7684\u3002\u5982\u679c E \u4e2d\u4e00\u4e9b\u5b9e\u4f53\u53ef\u80fd\u4e0d\u53c2\u4e0e\u5230 R \u7684\u8054\u7cfb\u4e2d\uff0c\u90a3\u4e48\u5b9e\u4f53\u96c6\u4e0e\u5728\u8054\u7cfb\u96c6 R \u4e2d\u7684\u53c2\u4e0e\u5c31\u88ab\u79f0\u4e3a\u662f\u90e8\u5206(partial)\u7684\u3002</p> <p>\u4f8b\u5982\uff0c\u4e00\u6240\u5927\u5b66\u53ef\u80fd\u8981\u6c42\u6bcf\u540d\u5b66\u751f\u81f3\u5c11\u6709\u4e00\u4f4d\u5bfc\u5e08;\u5728 E-R \u6a21\u578b\u4e2d\uff0c\u8fd9\u76f8\u5f53\u4e8e\u8981\u6c42\u6bcf\u4e2a student \u5b9e\u4f53\u901a\u8fc7 advisor \u8054\u7cfb\u81f3\u5c11\u4e0e\u4e00\u4f4d\u6559\u5e08\u76f8\u5173\u8054\u3002\u56e0\u800c\uff0c student \u5728 advisor \u8054\u7cfb\u96c6\u4e2d\u7684\u53c2\u4e0e\u662f\u5168\u90e8\u7684\u3002\u800c\u4e00\u4f4d\u6559\u5e08\u4e0d\u662f\u5fc5\u987b\u8981\u6307\u5bfc\u5b66\u751f\u3002\u56e0\u6b64\uff0c\u53ef\u80fd\u53ea\u6709\u67d0\u4e9b instructor \u5b9e\u4f53\u901a\u8fc7 advisor \u8054\u7cfb\u540c student \u5b9e\u4f53\u96c6\u76f8\u5173\u8054\uff0c\u90a3\u4e48 instructor \u5728 adviso r\u8054\u7cfb\u96c6\u4e2d\u7684\u53c2\u4e0e\u662f\u90e8\u5206\u7684\u3002</p> <p>\u6211\u4eec\u7528\u53cc\u7ebf\u8868\u793a\u4e00\u4e2a\u5b9e\u4f53\u5728\u8054\u7cfb\u96c6\u4e2d\u7684\u5168\u90e8\u53c2\u4e0e\u3002</p> <p></p> <p>E-R \u56fe\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u6765\u63cf\u8ff0\u66f4\u590d\u6742\u7684\u7ea6\u675f\uff0c\u8fd9\u79cd\u7ea6\u675f\u9650\u5236\u4e86\u6bcf\u4e2a\u5b9e\u4f53\u53c2\u4e0e\u8054\u7cfb\u96c6\u4e2d\u7684\u8054\u7cfb\u7684\u6b21\u6570\u3002\u7ebf\u6bb5\u4e0a\u53ef\u4ee5\u6709\u4e00\u4e2a\u5173\u8054\u7684\u6700\u5c0f\u548c\u6700\u5927\u57fa\u6570\uff0c\u7528 \\(l \\ldots h\\) \u7684\u5f62\u5f0f\u8868\u793a\uff0c\u5176\u4e2d l \u8868\u793a\u6700\u5c0f\u57fa\u6570\uff0ch \u8868\u793a\u6700\u5927\u57fa\u6570\u3002</p> <p>\u6700\u5c0f\u503c\u4e3a 1 \u8868\u793a\u5b9e\u4f53\u96c6\u5168\u90e8\u53c2\u4e0e\u8054\u7cfb\u96c6\uff0c\u5373\u5b9e\u4f53\u96c6\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f53\u5728\u8be5\u8054\u7cfb\u96c6\u4e2d\u7684\u81f3\u5c11\u4e00\u4e2a\u8054\u7cfb\u4e2d\u51fa\u73b0\u3002\u6700\u5927\u503c\u4e3a 1 \u8868\u793a\u5b9e\u4f53\u81f3\u591a\u53c2\u4e0e\u4e00\u4e2a\u8054\u7cfb\uff0c\u800c\u6700\u5927\u503c\u4e3a * \u4ee3\u8868\u6ca1\u6709\u9650\u5236\u3002</p> <p></p> <p>advisor \u548c student \u4e4b\u95f4\u7684\u7ebf\u6bb5\u6709 1.1 \u7684\u57fa\u6570\u7ea6\u675f\uff0c\u8fd9\u610f\u5473\u7740\u57fa\u6570\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u90fd\u662f1\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u540d\u5b66\u751f\u5fc5\u987b\u6709\u4e14\u53ea\u6709\u4e00\u4f4d\u5bfc\u5e08\u3002 advisor \u548c instructor \u4e4b\u95f4\u7684\u7ebf\u6bb5\u6709 0.* \u7684\u9650\u5236\uff0c\u8bf4\u660e\u4e00\u4f4d\u6559\u5e08\u53ef\u4ee5\u6709\u96f6\u540d\u6216\u591a\u540d\u5b66\u751f\u3002\u56e0\u6b64\uff0cadvisor \u8054\u7cfb\u662f\u4ece insiructor \u5230 student \u7684\u4e00\u5bf9\u591a\u8054\u7cfb\uff0c\u66f4\u8fdb\u4e00\u6b65\u5730\u8bb2\uff0cstudent \u5728 advisor \u4e2d\u7684\u53c2\u4e0e\u662f\u5168\u90e8\u7684\u8fd9\u610f\u5473\u7740\u4e00\u540d\u5b66\u751f\u5fc5\u987b\u6709\u4e00\u4f4d\u5bfc\u5e08\u3002</p> <p>\u5f88\u5bb9\u6613\u5c06\u5de6\u4fa7\u7684\u8fb9\u4e0a\u7684 0. \u66f2\u89e3\u4e3a advisor \u8054\u7cfb\u662f\u4ece instructor \u5230 student \u7684\u591a\u5bf9\u4e00\u8054\u7cfb\uff0c\u8fd9\u6b63\u597d\u548c\u6b63\u786e\u7684\u89e3\u91ca\u76f8\u53cd\uff0c\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u4e00\u5bf9\u591a*\u3002</p>"},{"location":"Computer_Science/DB/Chapter6/#primary-key","title":"Primary Key","text":"<p>If the relationship set R has no attributes associated with it, then the set of attributes</p> \\[primary-key(E1) \\cup primary-key(E2) \\cup \\dots \\cup primary-key(En)\\] <p>describes an individual relationship in set R.</p> <p>If the relationship set R has attributes \\(a_1, a_2, \\dots, a_m\\) associated with it, then the set of attributes</p> \\[primary-key(E1) \\cup primary-key(E2) \\cup \\dots \\cup primary-key(En) \\cup \\{a_1, a_2, \\dots, a_m\\}\\] <p>describes an individual relationship in set R.</p> <p>\u5728\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c \\(primary-key(E1) \\cup primary-key(E2) \\cup \\dots \\cup primary-key(En)\\) \u6784\u6210\u4e86\u8054\u7cfb\u96c6\u7684\u4e00\u4e2a super-key \u3002</p> <p>\u4e8c\u5143\u8054\u7cfb\u96c6\u4e3b\u7801\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u8054\u7cfb\u96c6\u7684\u6620\u5c04\u57fa\u6570\u3002</p> <p>\u5bf9\u4e8e\u591a\u5bf9\u591a\u5173\u7cfb\uff0c\u524d\u8ff0\u4e3b\u7801\u7684\u5e76\u96c6\u662f\u6700\u5c0f\u7684\u8d85\u7801\uff0c\u5e76\u88ab\u9009\u4f5c\u4e3b\u7801\u3002</p> <p>\u5bf9\u4e8e\u4e00\u5bf9\u591a\u548c\u591a\u5bf9\u4e00\u5173\u7cfb,\"\u591a\"\u65b9\u7684\u4e3b\u7801\u662f\u6700\u5c0f\u7684\u8d85\u7801\uff0c\u5e76\u88ab\u7528\u4f5c\u4e3b\u7801\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4ece student \u5230 instructor \u7684\u8054\u7cfb\u662f\u591a\u5bf9\u4e00\u7684\uff0c\u5373\u6bcf\u540d\u5b66\u751f\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4f4d\u5bfc\u5e08\uff0c\u5219 advisor \u7684\u4e3b\u7801\u5c31\u4ec5\u662f student \u7684\u4e3b\u7801\u3002</p> <p>\u5bf9\u4e8e\u4e00\u5bf9\u4e00\u7684\u8054\u7cfb\uff0c\u4efb\u4e00\u53c2\u4e0e\u5b9e\u4f53\u96c6\u7684\u4e3b\u7801\u90fd\u6784\u6210\u6700\u5c0f\u8d85\u7801\uff0c\u5e76\u4e14\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u4f5c\u4e3a\u8054\u7cfb\u96c6\u7684\u4e3b\u7801\u3002</p>"},{"location":"Computer_Science/DB/Chapter6/#weak-entity-sets","title":"Weak Entity Sets","text":"<p>\u5f31\u5b9e\u4f53\u96c6(weak entitys et)\u7684\u5b58\u5728\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u5b9e\u4f53\u96c6\uff0c\u79f0\u4e3a\u5176\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6(identifying entity set);\u6211\u4eec\u4f7f\u7528\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u7684\u4e3b\u7801\u4ee5\u53ca\u79f0\u4e3a\u5206\u8fa8\u7b26\u5c5e\u6027(discriminator attribute)\u7684\u989d\u5916\u5c5e\u6027\u6765\u552f\u4e00\u5730\u6807\u8bc6\u5f31\u5b9e\u4f53\uff0c\u800c\u4e0d\u662f\u5c06\u4e3b\u7801\u4e0e\u5f31\u5b9e\u4f53\u76f8\u5173\u8054\u3002\u975e\u5f31\u5b9e\u4f53\u96c6\u7684\u5b9e\u4f53\u96c6\u88ab\u79f0\u4e3a\u5f3a\u5b9e\u4f53\u96c6(strong entity set)\u3002</p> <p>\u6bcf\u4e2a\u5f31\u5b9e\u4f53\u5fc5\u987b\u548c\u4e00\u4e2a\u6807\u8bc6\u6027\u5b9e\u4f53\u76f8\u5173\u8054;\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b9e\u4f53\u96c6\u88ab\u79f0\u4e3a\u5b58\u5728\u4f9d\u8d56(existence dependent)\u4e8e\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u3002\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u88ab\u79f0\u4e3a\u62e5\u6709(own)\u5b83\u6240\u6807\u8bc6\u7684\u5f31\u5b9e\u4f53\u96c6\u3002\u5c06\u5f31\u5b9e\u4f53\u96c6\u4e0e\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u76f8\u5173\u8054\u7684\u8054\u7cfb\u88ab\u79f0\u4e3a\u6807\u8bc6\u6027\u8054\u7cfb(identifying relationship)\u3002\u6807\u8bc6\u6027\u8054\u7cfb\u662f\u4ece\u5f31\u5b9e\u4f53\u96c6\u5230\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u7684\u591a\u5bf9\u4e00\u8054\u7cfb\uff0c\u5e76\u4e14\u5f31\u5b9e\u4f53\u96c6\u5728\u8054\u7cfb\u4e2d\u7684\u53c2\u4e0e\u662f\u5168\u90e8\u7684\u3002\u6807\u8bc6\u6027\u8054\u7cfb\u96c6\u4e0d\u5e94\u8be5\u6709\u4efb\u4f55\u63cf\u8ff0\u6027\u5c5e\u6027\uff0c\u56e0\u4e3a\u4efb\u4f55\u8fd9\u6837\u7684\u5c5e\u6027\u90fd\u53ef\u4ee5\u4e0e\u5f31\u5b9e\u4f53\u96c6\u76f8\u5173\u8054\u3002</p> <p>\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0csection \u7684\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u662f course \uff0c\u5c06 section \u5b9e\u4f53\u548c\u5b83\u4eec\u5bf9\u5e94\u7684 course \u5b9e\u4f53\u5173\u8054\u5728\u4e00\u8d77\u7684 sec_course \u8054\u7cfb\u662f\u6807\u8bc6\u6027\u8054\u7cfb\u3002section \u7684\u4e3b\u7801\u7531\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6(\u5373course)\u7684\u4e3b\u7801\u52a0\u4e0a\u5f31\u5b9e\u4f53\u96c6(\u5373section)\u7684\u5206\u8fa8\u7b26\u6784\u6210\u3002\u56e0\u6b64\uff0c\u4e3b\u7801\u5c31\u662f{course_id\uff0csec_id,year, semester}.</p> <p>In our example, the identifying entity set for section is course, and the relationship sec_course, which associates section entities with their corresponding course entities, is the identifying relationship. The primary key of section is formed by the primary key of the identifying entity set (that is, course), plus the discriminator of the weak entity set (that is, section). Thus, the primary key is {course id, sec_id, year, semester}.</p> <p>\u5728 E-R \u56fe\u4e2d\uff0c\u901a\u8fc7\u53cc\u8fb9\u6846\u7684\u77e9\u5f62\u63cf\u8ff0\u5f31\u5b9e\u4f53\u96c6\uff0c\u5176\u5206\u8fa8\u7b26\u88ab\u52a0\u4e0a\u865a\u7684\u4e0b\u5212\u7ebf\u3002\u5173\u8054\u5f31\u5b9e\u4f53\u96c6\u548c\u6807\u8bc6\u6027\u5f3a\u5b9e\u4f53\u96c6\u7684\u8054\u7cfb\u96c6\u4ee5\u53cc\u8fb9\u6846\u7684\u83f1\u5f62\u8868\u793a\u3002</p> <p></p> <p>\u8be5\u56fe\u8fd8\u8bf4\u660e\u4f7f\u7528\u53cc\u7ebf\u6765\u8868\u793a\u7684(\u5f31)\u5b9e\u4f53\u96c6 section \u5728 sec_course \u8054\u7cfb\u4e2d\u7684\u53c2\u4e0e\u662f\u5168\u90e8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u8bfe\u7a0b\u6bb5\u5fc5\u987b\u901a\u8fc7 sec_course \u4e0e\u67d0\u95e8\u8bfe\u7a0b\u76f8\u5173\u8054\u3002\u6700\u540e\uff0c\u4ece sec_course \u6307\u5411 course \u7684\u7bad\u5934\u8868\u793a\u6bcf\u4e2a\u8bfe\u7a0b\u6bb5\u4e0e\u5355\u95e8\u8bfe\u7a0b\u76f8\u5173\u8054\u3002\u901a\u5e38\uff0c\u5f31\u5b9e\u4f53\u96c6\u5fc5\u987b\u5168\u90e8\u53c2\u4e0e\u5176\u6807\u8bc6\u6027\u8054\u7cfb\u96c6\uff0c\u5e76\u4e14\u8be5\u8054\u7cfb\u662f\u5230\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u7684\u591a\u5bf9\u4e00\u8054\u7cfb\u3002</p> <p>\u5f31\u5b9e\u4f53\u96c6\u53ef\u4ee5\u53c2\u4e0e\u9664\u6807\u8bc6\u6027\u8054\u7cfb\u4e4b\u5916\u7684\u8054\u7cfb\u3002\u4f8b\u5982\uff0csection \u5b9e\u4f53\u53ef\u4ee5\u53c2\u4e0e\u4e0e time_slot \u5b9e\u4f53\u96c6\u7684\u8054\u7cfb\uff0c\u4ee5\u6807\u8bc6\u7279\u5b9a\u8bfe\u7a0b\u6bb5\u7684\u4e0a\u8bfe\u65f6\u95f4\u3002\u5f31\u5b9e\u4f53\u96c6\u53ef\u4ee5\u4f5c\u4e3a\u5c5e\u4e3b\u53c2\u4e0e\u4e0e\u53e6\u4e00\u4e2a\u5f31\u5b9e\u4f53\u96c6\u7684\u6807\u8bc6\u6027\u8054\u7cfb\u3002\u4e00\u4e2a\u5f31\u5b9e\u4f53\u96c6\u4e5f\u53ef\u80fd\u4e0e\u4e0d\u6b62\u4e00\u4e2a\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u76f8\u5173\u8054\u3002</p> <p>\u8fd9\u6837\uff0c\u4e00\u4e2a\u7279\u5b9a\u7684\u5f31\u5b9e\u4f53\u5c06\u901a\u8fc7\u5b9e\u4f53\u7684\u7ec4\u5408\u6765\u6807\u8bc6\uff0c\u6bcf\u4e2a\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u6709\u4e00\u4e2a\u5b9e\u4f53\u5728\u8be5\u7ec4\u5408\u4e2d\u3002\u5b9e\u4f53\u96c6\u7684\u4e3b\u7801\u53ef\u4ee5\u7531\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u4e3b\u7801\u7684\u5e76\u96c6\u518d\u52a0\u4e0a\u5f31\u5b9e\u4f53\u96c6\u7684\u5206\u8fa8\u7b26\u7ec4\u6210\u3002</p>"},{"location":"Computer_Science/DB/Chapter6/#reducing-e-r-diagrams-to-relational-schemas","title":"Reducing E-R Diagrams to Relational Schemas","text":""},{"location":"Computer_Science/DB/Chapter6/#representing-entity-sets","title":"Representing Entity Sets","text":"<ul> <li>A strong entity set reduces to a schema with the same attributes</li> </ul> <p>course(\\(\\underline{course\\_id}\\), title, credits)</p> <ul> <li>A weak entity set becomes a table that includes a column for the primary key of the identifying strong entity set</li> </ul> <p>Primary key of the table is the union of the discriminator of the weak entity set and the primary key of the identifying strong entity set</p> <p>section( \\(\\underline{course\\_id, sec\\_id, semester, year}\\) )</p> <p></p> <p>\u5bf9\u4e8e identifying relationship \uff0c\u5728 weak entity set \u88ab\u8f6c\u6362\u540e\u5c31\u4e0d\u9700\u8981\u5355\u72ec\u518d\u5904\u7406\u4e86\uff0c\u56e0\u4e3a weak entity set \u76f8\u5f53\u4e8e\u662f\u4f9d\u8d56\u4e8e indentifying strong entity set \u7684\uff0c\u5df2\u7ecf\u5305\u542b\u9700\u8981\u8f6c\u6362\u7684\u4fe1\u606f\u4e86\u3002</p> <ul> <li> <p>A many-to-many relationship set is represented as a schema with attributes for the primary keys of the two participating entity sets, and any descriptive attributes of the relationship set.</p> </li> <li> <p>Many-to-one and one-to-many relationship sets that are total on the many-side can be represented by adding an extra attribute to the \"many\" side, containing the primary key of the \"one\" side</p> </li> </ul>"},{"location":"Computer_Science/DB/Chapter6/#composite-and-multivalued-attributes","title":"Composite and Multivalued Attributes","text":"<p>Composite attributes are flattened out by creating a separate attribute for each component attribute.</p> <p>instructor(ID, first_name, middle_initial, last_name, street_number, street_name, apt_number, city, state, zip_code, date_of_birth, age )</p> <p></p> <p>A multivalued attribute M of an entity E is represented by a separate schema EM</p> <p>Schema EM has attributes corresponding to the primary key of E and an attribute corresponding to multivalued attribute M</p> <p>Example: Multivalued attribute phone_number of instructor is represented by a schema:</p> \\[inst\\_phone= ( ID, \\underline{phone\\_number})\\] <p>Special case: entity time_slot has only one attribute other than the primary-key attribute, and that attribute is multivalued</p> \\[time\\_slot(\\underline{time\\_slot\\_id})\\] \\[time\\_slot\\_detail(\\underline{time\\_slot\\_id, day, start\\_time}, end\\_time)\\] <p>Optimization: Don\u2019t create the relation corresponding to the entity, just create the one corresponding to the multivalued attribute</p> \\[time\\_slot(\\underline{time\\_slot_id, day, start\\_time}, end\\_time)\\]"},{"location":"Computer_Science/DB/Chapter6/#entity-relationship-design-issues","title":"Entity-Relationship Design Issues","text":"<ol> <li>\u521b\u5efa E-R \u6a21\u578b\u65f6\u4e00\u79cd\u5e38\u89c1\u7684\u9519\u8bef\u662f\u4f7f\u7528\u4e00\u4e2a\u5b9e\u4f53\u96c6\u7684\u4e3b\u7801\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u5b9e\u4f53\u96c6\u7684\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u8054\u7cfb\u3002</li> </ol> <p>\u4f8b\u5982\uff0c\u5728\u6211\u4eec\u7684\u5927\u5b66E-R\u6a21\u578b\u4e2d\uff0c\u5c06 dept_name \u4f5c\u4e3a student \u7684\u5c5e\u6027\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u5373\u4f7f\u5b83\u4f5c\u4e3a student \u7684\u5173\u7cfb\u6a21\u5f0f\u4e2d\u7684\u5c5e\u6027\u5b58\u5728\u3002stud_dept \u8054\u7cfb\u662f\u5728 E-R \u6a21\u578b\u4e2d\u8868\u793a\u6b64\u4fe1\u606f\u7684\u6b63\u786e\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u660e\u786e\u8868\u793a student \u548c department \u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u800c\u4e0d\u662f\u5c06\u8fd9\u79cd\u8054\u7cfb\u9690\u542b\u5728\u5c5e\u6027\u4e2d\u3002\u540c\u65f6\u5b58\u5728 dept_name \u5c5e\u6027\u4ee5\u53castud_dept\u8054\u7cfb\u5c06\u5bfc\u81f4\u4fe1\u606f\u91cd\u590d\u3002</p> <p></p> <ol> <li>\u5728\u9700\u8981\u591a\u503c\u5c5e\u6027\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5177\u6709\u5355\u503c\u5c5e\u6027\u7684\u8054\u7cfb\u3002</li> </ol> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u51b3\u5b9a\u8868\u793a\u5b66\u751f\u5728\u4e00\u4e2a\u5f00\u8bbe\u7684\u8bfe\u7a0b\u6bb5(section)\u7684\u4e0d\u540c\u4f5c\u4e1a\u4e2d\u6240\u83b7\u5f97\u7684\u5206\u6570\u3002\u4e00\u79cd\u9519\u8bef\u7684\u505a\u6cd5\u662f\u7ed9 stud_section \u8054\u7cfb\u6dfb\u52a0 assignment \u548c marks \u4e24\u4e2a\u5c5e\u6027\u3002</p> <p>\u8fd9\u79cd\u8bbe\u8ba1\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u6211\u4eec\u53ea\u80fd\u8868\u793a\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b66\u751f-\u8bfe\u7a0b\u6bb5\u5bf9\u7684\u5355\u6b21\u8d4b\u503c\uff0c\u56e0\u4e3a\u8054\u7cfb\u5b9e\u4f8b\u5fc5\u987b\u901a\u8fc7\u53c2\u4e0e\u5b9e\u4f53student\u548csection\u6765\u552f\u4e00\u6807\u8bc6\u3002</p> <p></p> <p>\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u5c06 assignment \u5efa\u6a21\u4e3a\u7531 section \u6807\u8bc6\u7684\u5f31\u5b9e\u4f53\uff0c\u5e76\u5728 assignment \u548c student \u4e4b\u95f4\u6dfb\u52a0 marks_in \u8054\u7cfb\uff0c\u8be5\u8054\u7cfb\u5c06\u5177\u6709\u4e00\u4e2a marks \u5c5e\u6027\u3002</p> <p>\u4e00\u79cd\u66ff\u4ee3\u7684\u89e3\u51b3\u65b9\u6848\u662f\u7ed9 stud_section \u4f7f\u7528\u591a\u503c\u590d\u5408\u5c5e\u6027 {assignment_marks}\uff0c\u5176\u4e2d assignment_marks \u5177\u6709\u6210\u5458\u5c5e\u6027 assignment \u548c marks \u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u5c06\u8bfe\u7a0b\u4f5c\u4e1a\u5efa\u6a21\u4e3a\u5f31\u5b9e\u4f53\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u8bb0\u5f55\u6709\u5173\u4f5c\u4e1a\u7684\u5176\u4ed6\u4fe1\u606f\uff0c\u6bd4\u5982\u6700\u9ad8\u5206\u6216\u622a\u6b62\u65e5\u671f\u3002</p> <p></p> <ol> <li>Use of Entity Sets versus Attributes</li> </ol> <p></p> <ul> <li>\u5229\uff1a\u8868\u8fbe\u66f4\u591a\u4fe1\u606f\u5c5e\u6027\u3001\u8868\u8fbe\u66f4\u591a\u8001\u5e08\u4e4b\u95f4\u7684\u5173\u7cfb</li> <li>\u5f0a\uff1a\u589e\u52a0\u590d\u6742\u6027\uff0c\u591a\u4e86\u4e00\u4e2a\u8868</li> </ul> <p>\u90a3\u4e48\uff0c\u6559\u5e08\u7684\u8fd9\u4e24\u79cd\u5b9a\u4e49\u4e4b\u95f4\u7684\u4e3b\u8981\u5dee\u522b\u662f\u4ec0\u4e48\u5462?\u5c06\u7535\u8bdd\u770b\u6210\u4e00\u4e2a phone_number \u5c5e\u6027\u6697\u793a\u6bcf\u4f4d\u6559\u5e08\u6070\u597d\u6709\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u3002\u5c06\u7535\u8bdd\u770b\u6210\u4e00\u4e2a phone \u5b9e\u4f53\u5219\u5141\u8bb8\u6559\u5e08\u53ef\u4ee5\u6709\u82e5\u5e72\u7535\u8bdd\u53f7\u7801(\u5305\u62ec\u96f6\u4e2a)\u4e0e\u4e4b\u76f8\u5173\u8054\u3002\u7136\u800c\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u7b80\u5355\u5730\u5c06 phone_number \u5b9a\u4e49\u4e3a\u591a\u503c\u5c5e\u6027\uff0c\u4ece\u800c\u5141\u8bb8\u6bcf\u4f4d\u6559\u5e08\u6709\u591a\u90e8\u7535\u8bdd\u3002</p> <p>\u90a3\u4e48\u4e3b\u8981\u7684\u5dee\u522b\u5c31\u662f\uff0c\u5728\u4e00\u4e2a\u4eba\u5e0c\u671b\u4fdd\u5b58\u5173\u4e8e\u7535\u8bdd\u7684\u989d\u5916\u4fe1\u606f\uff0c\u5982\u5b83\u7684\u4f4d\u7f6e\u6216\u5b83\u7684\u7c7b\u578b(\u79fb\u52a8\u7535\u8bdd\u3001IP\u7535\u8bdd\u6216\u7b80\u5355\u7684\u8001\u5f0f\u7535\u8bdd)\uff0c\u6216\u5171\u4eab\u8be5\u7535\u8bdd\u7684\u6240\u6709\u7684\u4eba\u65f6\uff0c\u5c06\u7535\u8bdd\u770b\u4f5c\u4e00\u4e2a\u5b9e\u4f53\u662f\u4e00\u79cd\u66f4\u597d\u7684\u5efa\u6a21\u65b9\u5f0f\u3002\u56e0\u6b64\uff0c\u628a\u7535\u8bdd\u89c6\u4e3a\u4e00\u4e2a\u5b9e\u4f53\u6bd4\u628a\u5b83\u89c6\u4e3a\u4e00\u4e2a\u5c5e\u6027\u66f4\u5177\u901a\u7528\u6027\uff0c\u800c\u4e14\u5f53\u901a\u7528\u6027\u53ef\u80fd\u6709\u7528\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u5b9a\u4e49\u65b9\u5f0f\u5c31\u66f4\u4e3a\u9002\u5408\u4e86\u3002</p> <ol> <li>Use of Entity Sets versus Relationship Sets</li> </ol> <p></p> <p>\u4e00\u4e2a\u6559\u5b66\u73ed\u6709\u5f88\u591a\u5b66\u751f\u6ce8\u518c\uff0c\u4f46\u662f\u4e00\u4e2a\u6ce8\u518c\u4fe1\u606f\u53ea\u5bf9\u5e94\u4e00\u4e2a\u5b66\u751f\u3002\u4e00\u4ef6\u4e8b\u8bbe\u8ba1\u6210 relationship \u8fd8\u662f entity \u4e5f\u662f\u4e00\u79cd\u9009\u62e9\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u539f\u5219\uff0c\u5047\u5982\u4e00\u4e2a registration \u6709\u5176\u4ed6\u5b9e\u4f53\u4e0e\u5b83\u53d1\u751f\u8054\u7cfb\uff0c\u6b64\u65f6\u628a takes \u8bbe\u8ba1\u6210 relationship \u4f1a\u66f4\u597d\u8868\u8fbe\uff0c\u662f\u4e24\u4e2a\u5b9e\u4f53\u95f4\u7684 relationship\u3002</p> <ol> <li>Placement of relationship attributes</li> </ol> <p>Attribute date as attribute of access or as attribute of account are different.</p> <p></p> <ol> <li>Binary Vs. Non-Binary Relationships</li> </ol> <ul> <li>\u591a\u5143\u8054\u7cfb\u672c\u8d28\u4e0a\u53ef\u4ee5\u8f6c\u6362\u6210\u591a\u4e2a\u4e8c\u5143\u8054\u7cfb\u3002</li> <li>n\u5143\u8054\u7cfb\u96c6\u53ef\u4ee5\u66f4\u6e05\u6670\u5730\u8868\u793a\u51e0\u4e2a\u5b9e\u4f53\u53c2\u4e0e\u5230\u5355\u4e2a\u8054\u7cfb\u4e2d\u3002</li> <li>\u6709\u53ef\u80fd\u65e0\u6cd5\u5c06\u4e09\u5143\u8054\u7cfb\u4e0a\u7684\u7ea6\u675f\u8f6c\u6362\u4e3a\u591a\u4e2a\u4e8c\u5143\u8054\u7cfb\u4e0a\u7ea6\u675f\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter6/#extended-e-r-features","title":"Extended E-R Features","text":""},{"location":"Computer_Science/DB/Chapter6/#specialization","title":"Specialization(\u7279\u5316)","text":"<ul> <li>Top-down design process:     we designate subgroupings within an entity set that are distinctive from other entities in the set.</li> <li>Attribute inheritance:      a lower-level entity set inherits all the attributes and relationship participation of the higher-level entity set to which it is linked.</li> </ul> <p>\u6211\u4eec\u5728 E-R \u56fe\u4e2d\u63cf\u8ff0\u7279\u5316\u7684\u65b9\u5f0f\u53d6\u51b3\u4e8e\u4e00\u4e2a\u5b9e\u4f53\u662f\u5426\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a\u7279\u5316\u5b9e\u4f53\u96c6\uff0c\u6216\u8005\u5b83\u662f\u5426\u5fc5\u987b\u5c5e\u4e8e\u81f3\u591a\u4e00\u4e2a\u7279\u5316\u5b9e\u4f53\u96c6\u3002</p> <p>\u524d\u8005(\u5141\u8bb8\u591a\u4e2a\u96c6\u5408)\u79f0\u4e3a\u91cd\u53e0\u7279\u5316(overlapping specialization)\uff0c\u800c\u540e\u8005(\u5141\u8bb8\u81f3\u591a\u4e00\u4e2a\u96c6\u5408)\u79f0\u4e3a\u4e0d\u76f8\u4ea4\u7279\u5316(disjoint specialization)\u3002</p> <ul> <li>\u5bf9\u4e8e\u91cd\u53e0\u7279\u5316(\u5982 student \u548c employee \u4f5c\u4e3a person \u7684\u7279\u5316\u7684\u60c5\u51b5)\uff0c\u4f7f\u7528\u4e24\u4e2a\u5355\u72ec\u7684\u7bad\u5934\u3002</li> <li>\u5bf9\u4e8e\u4e0d\u76f8\u4ea4\u7279\u5316(\u5982instructor\u548csecretary\u4f5c\u4e3aemployee\u7684\u7279\u5316\u7684\u60c5\u51b5)\uff0c\u4f7f\u7528\u5355\u4e2a\u7bad\u5934\u3002</li> </ul> <p>\u7279\u5316\u8054\u7cfb\u8fd8\u53ef\u80fd\u88ab\u79f0\u4f5c\u8d85\u7c7b-\u5b50\u7c7b(superclass-subclass)\u8054\u7cfb\u3002\u9ad8\u5c42\u548c\u4f4e\u5c42\u5b9e\u4f53\u96c6\u6309\u666e\u901a\u5b9e\u4f53\u96c6\u8868\u793a\u2014\u2014\u5373\u5305\u542b\u5b9e\u4f53\u96c6\u540d\u79f0\u7684\u77e9\u5f62\u3002</p>"},{"location":"Computer_Science/DB/Chapter6/#generalization","title":"Generalization\uff08\u6982\u5316\uff09","text":"<p>A bottom-up design process:      combine a number of entity sets that share the same features into a higher-level entity set.</p>"},{"location":"Computer_Science/DB/Chapter6/#representing-specialization-via-schemas","title":"Representing Specialization via Schemas","text":""},{"location":"Computer_Science/DB/Chapter6/#method-1","title":"method 1","text":"<p>Drawback: getting information about, an employee requires accessing two relations, the one corresponding to the low-level  schema and the one corresponding to the high-level schema</p>"},{"location":"Computer_Science/DB/Chapter6/#method-2","title":"method 2","text":"<p>Drawback: name, street and city may be stored redundantly for people who are both students and employees</p> <p>\u6240\u4ee5\u6700\u597d\u662f disjoint \u7684</p>"},{"location":"Computer_Science/DB/Chapter6/#method-3","title":"method 3","text":"<p>Drawback: \u9996\u5148\u662f\u8868\u592a\u957f\u4e86\uff0c\u5176\u6b21\u662f\u8868\u592a\u7a00\u758f\u4e86\uff0cNull \u503c\u4f1a\u6bd4\u8f83\u591a\u3002</p>"},{"location":"Computer_Science/DB/Chapter6/#alternative-notations-for-modeling-data","title":"Alternative Notations for Modeling Data","text":""},{"location":"Computer_Science/DB/Chapter6/#alternative-e-r-notations","title":"Alternative E-R Notations","text":""},{"location":"Computer_Science/DB/Chapter6/#the-unified-modeling-language-uml","title":"The Unified Modeling Language UML","text":""},{"location":"Computer_Science/DB/Chapter7/","title":"Chapter 7 | Relational Database Design","text":"<p> \u7ea6 5482 \u4e2a\u5b57  4 \u884c\u4ee3\u7801  28 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 27 \u5206\u949f</p> <p>\u524d\u60c5\u63d0\u8981</p> <p>\u672c\u7ae0\u4f1a\u51fa\u73b0\u5f88\u591a\"\u7801\"\uff0c\u5728\u8fd9\u91cc\u5148\u884c\u68b3\u7406\u4e00\u4e0b\u3002</p> <ol> <li> <p>\u8d85\u7801\uff1a\u80fd\u591f\u552f\u4e00\u6807\u8bc6\u4e00\u6761\u8bb0\u5f55\u7684\u5c5e\u6027\u6216\u5c5e\u6027\u96c6</p> </li> <li> <p>\u5019\u9009\u7801\uff1a\u80fd\u591f\u552f\u4e00\u6807\u8bc6\u4e00\u6761\u8bb0\u5f55\u7684\u6700\u5c0f\u5c5e\u6027\u96c6(\u4e0d\u542b\u591a\u4f59\u5c5e\u6027)</p> </li> <li> <p>\u4e3b\u7801\uff1a\u67d0\u4e2a\u80fd\u591f\u552f\u4e00\u6807\u8bc6\u4e00\u6761\u8bb0\u5f55\u7684\u6700\u5c0f\u5c5e\u6027\u96c6\uff08\u5019\u9009\u7801\u4e2d\u7684\"\u4eba\u9009\u4e4b\u5b50\"\uff09</p> </li> </ol> <p>Suppose we combine instructor and department into inst_dept.</p> <p></p> <p>\u6240\u6709\u8fd9\u4e9b\u5143\u7ec4\u7684\u9884\u7b97\u6570\u989d\u7edf\u4e00\u8fd9\u4e00\u70b9\u662f\u91cd\u8981\u7684\uff0c\u5426\u5219\u6211\u4eec\u7684\u6570\u636e\u5e93\u5c06\u4f1a\u4e0d\u4e00\u81f4\u3002\u5728\u4f7f\u7528 <code>instructor</code> \u548c <code>department</code> \u7684\u539f\u59cb\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u9884\u7b97\u7684\u6570\u989d\u53ea\u5b58\u50a8\u4e00\u6b21\u3002\u8fd9\u8bf4\u660e\u4f7f\u7528 <code>inst_dept</code> \u662f\u4e00\u4e2a\u574f\u4e3b\u610f\uff0c\u56e0\u4e3a\u5b83\u91cd\u590d\u5b58\u50a8\u9884\u7b97\u6570\u989d\uff0c\u5e76\u4e14\u9700\u8981\u627f\u62c5\u67d0\u4e9b\u7528\u6237\u53ef\u80fd\u66f4\u65b0\u4e00\u4e2a\u5143\u7ec4\u800c\u4e0d\u662f\u6240\u6709\u5143\u7ec4\u4e2d\u7684\u9884\u7b97\u6570\u989d\u5e76\u56e0\u6b64\u4ea7\u751f\u4e0d\u4e00\u81f4\u6027\u7684\u98ce\u9669\u3002</p> <p>\u5373\u4f7f\u6211\u4eec\u51b3\u5b9a\u5bb9\u5fcd\u5197\u4f59\u7684\u95ee\u9898\uff0c<code>inst_dept</code> \u6a21\u5f0f\u4ecd\u7136\u5b58\u5728\u5176\u4ed6\u95ee\u9898\u3002\u5047\u8bbe\u6211\u4eec\u5728\u5927\u5b66\u91cc\u521b\u7acb\u4e00\u4e2a\u65b0\u7684\u7cfb\u3002\u5728\u4e0a\u9762\u7684\u5907\u9009\u8bbe\u8ba1\u65b9\u6848\u4e2d\uff0c\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u8868\u8fbe\u5173\u4e8e\u4e00\u4e2a\u7cfb\u7684\u4fe1\u606f(<code>dept_name,building,budget</code>)\uff0c\u9664\u975e\u8be5\u7cfb\u5728\u5927\u5b66\u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u6559\u5e08\u3002\u8fd9\u662f\u56e0\u4e3a <code>inst_dept</code> \u8868\u4e2d\u7684\u5143\u7ec4\u9700\u8981 <code>ID</code>\u3001<code>name</code> \u548c <code>salary</code> \u7684\u503c\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u80fd\u8bb0\u5f55\u65b0\u6210\u7acb\u7684\u7cfb\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u76f4\u5230\u8fd9\u4e2a\u65b0\u7cfb\u5f55\u7528\u4e86\u7b2c\u4e00\u4f4d\u6559\u5e08\u4e3a\u6b62\u3002\u5728\u65e7\u7684\u8bbe\u8ba1\u4e2d\uff0c<code>department</code> \u6a21\u5f0f\u53ef\u4ee5\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u662f\u5728\u4fee\u6539\u540e\u7684\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u521b\u5efa\u4e00\u4e2a <code>building</code> \u548c <code>budget</code> \u4e3a\u7a7a\u503c\u7684\u5143\u7ec4\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7a7a\u503c\u4f1a\u5e26\u6765\u9ebb\u70e6\u3002</p> <p>Pitfalls of the \"bad\" relations:</p> <ul> <li>Information repetition (\u4fe1\u606f\u91cd\u590d)</li> <li>Insertion anomalies (\u63d2\u5165\u5f02\u5e38)</li> <li>Update difficulty (\u66f4\u65b0\u56f0\u96be)</li> </ul>"},{"location":"Computer_Science/DB/Chapter7/#decomposition","title":"Decomposition","text":"<p>\u907f\u514d <code>inst_dept</code> \u6a21\u5f0f\u4e2d\u7684\u4fe1\u606f\u91cd\u590d\u95ee\u9898\u7684\u552f\u4e00\u65b9\u5f0f\u662f\u5c06\u5176\u5206\u89e3\u4e3a\u4e24\u4e2a\u6a21\u5f0f(\u5728\u672c\u4f8b\u4e2d\u4e3a <code>instructor</code> \u548c <code>department</code> \u6a21\u5f0f)\u3002</p> <p>\u5e76\u975e\u6240\u6709\u7684\u6a21\u5f0f\u5206\u89e3\u90fd\u662f\u6709\u76ca\u7684\u3002\u8bf7\u8003\u8651\u6240\u6709\u6a21\u5f0f\u90fd\u7531\u4e00\u4e2a\u5c5e\u6027\u6784\u6210\u7684\u6781\u7aef\u60c5\u51b5\u3002\u4efb\u4f55\u7c7b\u578b\u7684\u6709\u610f\u4e49\u7684\u8054\u7cfb\u90fd\u65e0\u6cd5\u88ab\u8868\u793a\u3002</p> <p>Now consider a less extreme case where we choose to decompose the employee schema : employee (ID, name, street, city, salary), into the following two schemas: employee1 (ID, name)  employee2 (name, street, city, salary)</p> <p></p> <p>\u5728\u4f01\u4e1a\u53ef\u80fd\u62e5\u6709\u4e24\u4e2a\u91cd\u540d\u804c\u5458\u7684\u60c5\u51b5\u4e0b\u4f1a\u66b4\u9732\u8fd9\u4e2a\u5206\u89e3\u7684\u7f3a\u9677\u3002\u867d\u7136\u6211\u4eec\u62e5\u6709\u66f4\u591a\u7684\u5143\u7ec4\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4ece\u4ee5\u4e0b\u610f\u4e49\u6765\u8bb2\u6211\u4eec\u5374\u62e5\u6709\u66f4\u5c11\u7684\u4fe1\u606f\u3002\u6211\u4eec\u80fd\u591f\u6307\u51fa\u4e00\u4e2a\u7279\u5b9a\u7684\u8857\u9053\u3001\u57ce\u5e02\u548c\u5de5\u8d44\u5c5e\u4e8e\u67d0\u4e2a\u540d\u4e3a Kim \u7684\u4eba\uff0c\u4f46\u662f\u6211\u4eec\u65e0\u6cd5\u533a\u5206\u51fa\u662f\u54ea\u4e00\u4e2a Kim \u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u5206\u89e3\u65e0\u6cd5\u8868\u8fbe\u5173\u4e8e\u5927\u5b66\u804c\u5458\u7684\u7279\u5b9a\u7684\u91cd\u8981\u4e8b\u5b9e\u3002\u6211\u4eec\u60f3\u8981\u907f\u514d\u8fd9\u6837\u7684\u5206\u89e3\u3002\u6211\u4eec\u5c06\u8fd9\u6837\u7684\u5206\u89e3\u79f0\u4e3a\u6709\u635f\u5206\u89e3(lossy decomposition)\uff0c\u800c\u5c06\u90a3\u4e9b\u6ca1\u6709\u4fe1\u606f\u4e22\u5931\u7684\u79f0\u4e3a\u65e0\u635f\u5206\u89e3(lossless decomposition)\u3002</p> <p>\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5b9a\u4e49\u4e00\u79cd\u901a\u7528\u7684\u65b9\u6cd5\u6765\u5bfc\u51fa\u4e00\u7ec4\u6a21\u5f0f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u6a21\u5f0f\u90fd\u662f\"\u826f\u6784\u7684\";\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4e0d\u53d7\u4fe1\u606f\u91cd\u590d\u95ee\u9898\u7684\u5f71\u54cd\u3002</p> <p>\u7528\u4e8e\u8bbe\u8ba1\u5173\u7cfb\u6570\u636e\u5e93\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u4e00\u4e2a\u901a\u5e38\u79f0\u4e3a\u89c4\u8303\u5316(normalization)\u7684\u8fc7\u7a0b\u3002\u5176\u76ee\u6807\u662f\u751f\u6210\u4e00\u7ec4\u5173\u7cfb\u6a21\u5f0f\uff0c\u5141\u8bb8\u6211\u4eec\u5b58\u50a8\u4fe1\u606f\u5e76\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5197\u4f59\uff0c\u540c\u65f6\u8fd8\u5141\u8bb8\u6211\u4eec\u8f7b\u677e\u5730\u68c0\u7d22\u4fe1\u606f\u3002</p>"},{"location":"Computer_Science/DB/Chapter7/#lossless-decomposition","title":"Lossless Decomposition","text":"<p>\u4ee4 R \u4e3a\u5173\u7cfb\u6a21\u5f0f\uff0c\u5e76\u4ee4 \\(R_1\\) \u548c \\(R_2\\) \u6784\u6210 R \u7684\u5206\u89e3\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06R\u3001 \\(R_1\\) \u548c \\(R_2\\) \u89c6\u4e3a\u5c5e\u6027\u96c6\uff0c \\(R = R_1 \\cup R_2\\) \u3002\u5982\u679c\u7528\u4e24\u4e2a\u5173\u7cfb\u6a21\u5f0f \\(R_1\\) \u548c \\(R_2\\) \u53bb\u66ff\u4ee3 R \u65f6\u6ca1\u6709\u4fe1\u606f\u4e22\u5931\uff0c\u5219\u6211\u4eec\u79f0\u8be5\u5206\u89e3\u662f\u4e00\u4e2a\u65e0\u635f\u5206\u89e3\u3002</p> <p>In SQL query:</p> <pre><code>select *\nfrom (select R1 from r)\n    natural join\n    (select R2 from r)\n</code></pre> <p>In the relational algebra:</p> \\[\\Pi_{R_1}(r) \\bowtie \\Pi_{R_2}(r) = r\\]"},{"location":"Computer_Science/DB/Chapter7/#functional-dependencies","title":"Functional Dependencies","text":"<p>Let R be a relation schema \\(\\alpha \\subseteq R\\) and \\(\\beta \\subseteq R\\) . </p> <p>The functional dependency \\(\\alpha \\rightarrow \\beta\\) holds on R if and only if for any legal relations r(R), whenever any two tuples \\(t_1\\) and \\(t_2\\) of r agree on the attributes \\(\\alpha\\), they also agree on the attributes \\(\\beta\\). </p> <p>That is, \\(t_1[\\alpha] = t_2[\\alpha] \\rightarrow t_1[\\beta] = t_2[\\beta]\\)</p> <p>\u4f7f\u7528\u51fd\u6570\u4f9d\u8d56\u8fd9\u4e00\u6982\u5ff5\uff0c\u6211\u4eec\u8bf4\u5982\u679c\u51fd\u6570\u4f9d\u8d56 \\(K \\rightarrow R\\) \u5728 r(R) \u4e0a\u6210\u7acb\uff0c\u5219 K \u662f r(R) \u7684\u4e00\u4e2a\u8d85\u7801\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u5bf9\u4e8e r(R) \u7684\u6bcf\u4e2a\u5408\u6cd5\u5b9e\u4f8b\uff0c\u5bf9\u4e8e\u6765\u81ea\u5b9e\u4f8b\u7684\u6bcf\u5bf9\u5143\u7ec4 \\(t_1\\) and \\(t_2\\) \uff0c\u53ea\u8981 \\(t_1\\) [K] = \\(t_2\\) [K]\uff0c\u5c31\u603b\u6709 \\(t_1\\) [R]= \\(t_2\\) [R]\u6210\u7acb(\u5373 \\(t_1 = t_2\\))\uff0c\u5219 K \u5c31\u662f\u4e00\u4e2a\u8d85\u7801\u3002</p>"},{"location":"Computer_Science/DB/Chapter7/#trivial-functional-dependencies","title":"Trivial Functional Dependencies","text":"<p>Some functional dependencies are said to be trivial because they are satisfied by all relations. In general, a functional dependency of the form \\(\\alpha \\rightarrow \\beta\\) is trivial if \\(\\beta \\subseteq \\alpha\\).</p> <p>For example, \\(A \\rightarrow A\\) is satisfied by all relations involving attribute A. Reading the definition of functional dependency literally, we see that, for all tuples \\(t_1\\) and \\(t_2\\) such that \\(t_1\\)[A] = \\(t_2\\)[A], it is the case that \\(t_1\\)[A] = \\(t_2\\)[A]. Similarly, \\(AB \\rightarrow A\\) is satisfied by all relations involving attribute A.</p> <p>We shall use the notation \\(F^+\\) to denote the closure of the set F, that is, the set of all functional dependencies that can be inferred given the set F. \\(F^+\\) contains all of the functional dependencies in F.</p>"},{"location":"Computer_Science/DB/Chapter7/#lossless-decomposition-and-functional-dependencies","title":"Lossless Decomposition and Functional Dependencies","text":"<p>\\(R_1\\) and \\(R_2\\) form a lossless decomposition of R if at least one of the following functional dependencies is in \\(F^+\\):</p> <ul> <li>\\(R_1 \\cap R_2 \\rightarrow R_1\\)</li> <li>\\(R_1 \\cap R_2 \\rightarrow R_2\\)</li> </ul> <p>In other words, if \\(R_1 \\cap R_2\\) forms a superkey for either \\(R_1\\) or \\(R_2\\), the decomposition of R is a lossless decomposition.</p> <p>Suppose we decompose a relation schema r(R) into \\(r_1(R_1)\\) and \\(r_2(R_2)\\), where \\(R_1 \\cap R_2 = R_1\\). Then the following SQL constraints must be imposed on the decomposed schema to ensure their contents are consistent with the original schema.</p> <ul> <li>\\(R_1 \\cap R_2\\) is the primary key of \\(r_1\\)</li> </ul> <p>This constraint enforces the functional dependency.</p> <ul> <li>\\(R_1 \\cap R_2\\) 2 is a foreign key from \\(r_2\\) referencing \\(r_1\\)</li> </ul> <p>This constraint ensures that each tuple in \\(r_2\\) has a matching tuple in \\(r_1\\) , without which it would not appear in the natural join of \\(r_1\\) and \\(r_2\\).</p> <p>We can find \\(F^+\\), the closure of F, by repeatedly applying Armstrong's Axioms:</p> <p>if \\(\\beta \\subseteq \\alpha\\) , then \\(\\alpha \\rightarrow \\beta\\) (reflexivity,\u81ea\u53cd\u7387)</p> <p>if \\(\\alpha \\rightarrow \\beta\\) , then \\(\\gamma \\alpha \\rightarrow \\gamma\\beta\\) (augmentation\uff0c\u589e\u8865\u7387)</p> <p>if \\(\\alpha \\rightarrow \\beta\\) and \\(\\beta \\rightarrow \\gamma\\) , then \\(\\alpha \\rightarrow \\gamma\\) (transitivity\uff0c\u4f20\u9012\u7387)</p> Exercise <p></p> <p>Additional rules:</p> <p>If \\(\\alpha \\rightarrow \\beta\\) holds and \\(\\alpha \\rightarrow \\gamma\\) holds, then \\(\\alpha \\rightarrow \\beta \\gamma\\) holds (union\uff0c\u5408\u5e76)</p> <p>If \\(\\alpha \\rightarrow \\beta \\gamma\\) holds, then \\(\\alpha \\rightarrow \\beta\\) holds and \\(\\alpha \\rightarrow \\gamma\\) holds (decomposition\uff0c\u5206\u89e3)</p> <p>If \\(\\alpha \\rightarrow \\beta\\) holds and \\(\\gamma \\beta \\rightarrow \\delta\\) holds, then \\(\\alpha \\gamma \\rightarrow \\delta\\) holds (pseudo transitivity\uff0c\u4f2a\u4f20\u9012)</p>"},{"location":"Computer_Science/DB/Chapter7/#algorithm-to-compute-alpha-the-closure-of-alpha-under-f","title":"Algorithm to compute \\(\\alpha^+\\), the closure of \\(\\alpha\\) under F","text":"<p>result := \\(\\alpha\\);</p> <p>while (changes to result) do</p> <pre><code>for each $\\beta \\rightarrow \\gamma$ in F do\n\n    begin\n\n        if $\\beta \\subseteq result$ then result := result $\\cup \\ \\gamma$\n\n    end\n</code></pre> <p></p> <p>Prove:</p> <p></p> <p>There are several uses of the attribute closure algorithm:</p> <ol> <li>To test if \\(\\alpha\\) is a superkey, we compute \\(\\alpha^+\\) and check if \\(\\alpha^+\\) contains all attributes in R.</li> <li>We can check if a functional dependency \\(\\alpha \\rightarrow \\beta\\) holds (or, in other words, is in \\(F^+\\)), by checking if \\(\\beta \\subseteq \\alpha^+\\). That is, we compute \\(\\alpha^+\\) by using attribute closure, and then check if it contains \\(\\beta\\).</li> <li>It gives us an alternative way to compute \\(F^+\\) : For each \\(\\gamma \\subseteq R\\), we find the closure \\(\\gamma^+\\), and for each \\(S \\subseteq \\gamma^+\\), we output a functional dependency \\(\\gamma \\rightarrow S\\).</li> </ol> Exercise <p></p> Exercise <p></p>"},{"location":"Computer_Science/DB/Chapter7/#canonical-cover","title":"Canonical Cover\uff08\u6b63\u5219\u8986\u76d6\uff09","text":"<p>\u5047\u8bbe\u6211\u4eec\u5728\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f\u4e0a\u6709\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u96c6 F \u3002\u6bcf\u5f53\u7528\u6237\u5728\u8be5\u5173\u7cfb\u4e0a\u6267\u884c\u66f4\u65b0\u65f6\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u5fc5\u987b\u786e\u4fdd\u6b64\u66f4\u65b0\u4e0d\u7834\u574f\u4efb\u4f55\u51fd\u6570\u4f9d\u8d56\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cF \u4e2d\u7684\u6240\u6709\u51fd\u6570\u4f9d\u8d56\u5728\u65b0\u7684\u6570\u636e\u5e93\u72b6\u6001\u4e0b\u4ecd\u7136\u88ab\u6ee1\u8db3\u3002</p> <p>\u5982\u679c\u66f4\u65b0\u8fdd\u53cd\u4e86\u96c6\u5408 F \u4e2d\u7684\u4efb\u610f\u51fd\u6570\u4f9d\u8d56\uff0c\u5219\u7cfb\u7edf\u5fc5\u987b\u56de\u6eda\u8be5\u66f4\u65b0\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\u4e0e\u7ed9\u5b9a\u51fd\u6570\u4f9d\u8d56\u96c6\u5177\u6709\u76f8\u540c\u95ed\u5305\u7684\u4e00\u4e2a\u7b80\u5316\u96c6\u7684\u65b9\u5f0f\u6765\u51cf\u5c0f\u82b1\u8d39\u5728\u8fdd\u53cd\u68c0\u6d4b\u65b9\u9762\u7684\u5f00\u9500\u3002\u7531\u4e8e\u7b80\u5316\u96c6\u548c\u539f\u96c6\u5177\u6709\u76f8\u540c\u7684\u95ed\u5305\uff0c\u6240\u4ee5\u6ee1\u8db3\u51fd\u6570\u4f9d\u8d56\u7b80\u5316\u96c6\u7684\u4efb\u4f55\u6570\u636e\u5e93\u4e5f\u4e00\u5b9a\u6ee1\u8db3\u539f\u96c6\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002</p> <p>F \u7684\u6b63\u5219\u8986\u76d6 \\(F_c\\) \u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4f9d\u8d56\u96c6: F \u903b\u8f91\u8574\u6db5 \\(F_c\\) \u4e2d\u7684\u6240\u6709\u4f9d\u8d56\u5e76\u4e14 \\(F_c\\) \u903b\u8f91\u8574\u6db5 F \u4e2d\u7684\u6240\u6709\u4f9d\u8d56\u3002\u6b64\u5916\uff0c \\(F_c\\) \u5fc5\u987b\u5177\u5907\u5982\u4e0b\u6027\u8d28:</p> <ul> <li>\\(F_c\\) \u4e2d\u4efb\u4f55\u51fd\u6570\u4f9d\u8d56\u90fd\u4e0d\u5305\u542b\u65e0\u5173\u5c5e\u6027\u3002</li> <li>\\(F_c\\) \u4e2d\u6bcf\u4e2a\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u8fb9\u90fd\u662f\u552f\u4e00\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 \\(F_c\\) \u4e2d\u4e0d\u5b58\u5728\u4e24\u4e2a\u51fd\u6570\u4f9d\u8d56 \\(\\alpha_1 \\rightarrow \\beta_1\\) \u548c \\(\\alpha_2  \\rightarrow \\beta_2\\) \uff0c\u6ee1\u8db3 \\(\\alpha_1 = \\alpha_2\\) \u3002</li> </ul> <p>Sets of functional dependencies may have redundant dependencies that can be inferred from the others.</p> <p>Parts of a functional dependency may be redundant:</p> <p>{A \\(\\rightarrow\\) B, B \\(\\rightarrow\\) C, A \\(\\rightarrow\\) CD} can be simplified to  {A \\(\\rightarrow\\) B, B \\(\\rightarrow\\) C, A \\(\\rightarrow\\) D}</p> <p>A \\(\\rightarrow\\) CD=&gt; A \\(\\rightarrow\\) D</p> <p>A \\(\\rightarrow\\) B,B \\(\\rightarrow\\) C =&gt; A \\(\\rightarrow\\) C , A \\(\\rightarrow\\) D =&gt; A \\(\\rightarrow\\) CD</p> <p>Intuitively, a canonical cover of F is a \"minimal\" set of functional dependencies equivalent to F, having no redundant dependencies or redundant parts of dependencies.</p>"},{"location":"Computer_Science/DB/Chapter7/#extraneous-attributes","title":"Extraneous Attributes(\u65e0\u5173\u5c5e\u6027)","text":"<p>\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u53bb\u9664\u51fd\u6570\u4f9d\u8d56\u7684\u4e00\u4e2a\u5c5e\u6027\u800c\u4e0d\u6539\u53d8\u8be5\u51fd\u6570\u4f9d\u8d56\u96c6\u7684\u95ed\u5305\uff0c\u5219\u79f0\u8be5\u5c5e\u6027\u662f\u65e0\u5173\u7684\u3002</p> <p>Consider a set F of functional dependencies and the functional  dependency \\(\\alpha \\rightarrow \\beta\\) in F. </p> <ul> <li>Attribute A is extraneous in \\(\\alpha\\) if \\(A \\in \\alpha\\) and F logically implies \\((F - \\{\\alpha \\rightarrow \\beta \\}) \\cup \\{ (\\alpha - A) \\rightarrow \\beta \\}\\).</li> <li>Attribute A is extraneous in \\(\\beta\\) if \\(A \\in \\beta\\) and the set of functional dependencies \\((F - \\{\\alpha \\rightarrow \\beta \\}) \\cup \\{ \\alpha \\rightarrow (\\beta - A) \\}\\) logically implies F.</li> </ul> <p>Note: implication in the opposite direction is trivial in each of the cases above, since a \"stronger\" functional dependency always implies a weaker one</p> Example <ol> <li> <p>Given F = {A \\(\\rightarrow\\) C, AB \\(\\rightarrow\\) C }</p> </li> <li> <p>Given F = {A \\(\\rightarrow\\) C, AB \\(\\rightarrow\\) CD}</p> </li> </ol> answer <ol> <li> <p>B is extraneous in AB \\(\\rightarrow\\) C because {A \\(\\rightarrow\\) C, AB \\(\\rightarrow\\) C} logically  implies A \\(\\rightarrow\\) C.</p> </li> <li> <p>C is extraneous in AB \\(\\rightarrow\\) CD since AB \\(\\rightarrow\\) C can be inferred even after deleting C</p> </li> </ol> Computing a Canonical Cover <p>R = (A, B, C)</p> <p>F = {A \\(\\rightarrow\\) BC  B \\(\\rightarrow\\) C  A \\(\\rightarrow\\) B  AB \\(\\rightarrow\\) C}</p> answer <p></p> <p>\u5408\u7406\u8fd0\u7528\u753b\u56fe</p> <p></p> Exercise <p></p> answer <p></p>"},{"location":"Computer_Science/DB/Chapter7/#boyce-codd-normal-form","title":"Boyce-Codd Normal Form","text":"<p>A relation schema R is in BCNF with respect to a set F of functional dependencies if for all functional dependencies in \\(F^+\\) of the form \\(\\alpha \\rightarrow \\beta\\), where \\(\\alpha \\subseteq R\\) and \\(\\beta \\subseteq R\\), at least one of the following holds:</p> <ol> <li>\\(\\alpha\\) is a superkey for R</li> <li>\\(\\alpha \\rightarrow \\beta\\) is trivial</li> </ol> <p>Suppose we have a schema R and a non-trivial dependency \\(\\alpha \\rightarrow \\beta\\) causes a violation of BCNF.</p> <p>We decompose R into: \\((\\alpha \\cup \\beta)\\) and \\(R - (\\beta - \\alpha)\\)</p>"},{"location":"Computer_Science/DB/Chapter7/#bcnf-decomposition-algorithm","title":"BCNF Decomposition Algorithm","text":"<p>result := {R };</p> <p>done := false;</p> <p>while (not done) do</p> <p>if (there is a schema \\(R_i\\) in result that is not in BCNF)</p> <p>then begin</p> <p>let \\(\\alpha \\rightarrow \\beta\\) be a nontrivial functional dependency that holds on \\(R_i\\) such that \\(\\alpha^+\\) does not contain \\(R_i\\) and \\(\\alpha \\cap \\beta = \\emptyset\\);</p> <p>result := (result \u2013 \\(R_i\\)) \\(\\cap\\) (\\(R_i \u2013 \\beta\\)) \\(\\cap\\) (\\(\\alpha\\), \\(\\beta\\));</p> <p>end</p> <p>else done := true;</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u6240\u4ea7\u751f\u7684\u5206\u89e3\u4e0d\u4ec5\u6ee1\u8db3 BCNF \uff0c\u800c\u4e14\u8fd8\u662f\u65e0\u635f\u5206\u89e3\u3002\u6765\u770b\u770b\u4e3a\u4ec0\u4e48\u6211\u4eec\u7684\u7b97\u6cd5\u53ea\u4ea7\u751f\u65e0\u635f\u5206\u89e3\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5f53\u7528 \\((R_i - \\beta)\\) \u548c \\((\\alpha, \\beta)\\) \u6765\u66ff\u6362 \\(R_i\\) \u65f6\uff0c\u4f9d\u8d56 \\(\\alpha \\rightarrow \\beta\\) \u6210\u7acb\uff0c\u800c\u4e14 \\((R_i - \\beta) \\cap (\\alpha, \\beta) = \\alpha\\)\u3002</p> <p>\u5982\u679c\u6211\u4eec\u6ca1\u6709\u8981\u6c42 \\(\\alpha \\cap \\beta = \\emptyset\\)\uff0c\u90a3\u4e48 \\(\\alpha \\cap \\beta\\) \u4e2d\u7684\u90a3\u4e9b\u5c5e\u6027\u5c31\u4e0d\u4f1a\u51fa\u73b0\u5728 \\((R_i - \\beta)\\) \u4e2d\uff0c\u800c\u4f9d\u8d56 \\(\\alpha \\rightarrow \\beta\\) \u4e5f\u4e0d\u518d\u6210\u7acb\u3002</p> Exercise <p></p> answer <p></p>"},{"location":"Computer_Science/DB/Chapter7/#dependency-preservation","title":"Dependency Preservation","text":"<p>If it is sufficient to test only those dependencies on each individual relation of a decomposition in order to ensure that all functional dependencies hold, then that decomposition is dependency preserving.</p> <p>\u5982\u679c\u901a\u8fc7\u68c0\u9a8c\u5355\u4e00\u5173\u7cfb\u4e0a\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5c31\u80fd\u786e\u4fdd\u6240\u6709\u7684\u51fd\u6570\u4f9d\u8d56\u6210\u7acb\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u5206\u89e3\u662f\u4f9d\u8d56\u4fdd\u6301\u7684\u3002\u6216\u8005\uff0c\u539f\u6765\u5173\u7cfb R \u4e0a\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u90fd\u53ef\u4ee5\u5728\u5206\u89e3\u540e\u7684\u5355\u4e00\u5173\u7cfb\u4e0a\u5f97\u5230\u68c0\u9a8c\u6216\u8005\u63a8\u5bfc\u5f97\u5230\u3002</p> <p>Let \\(F_i\\) be the set of all functional dependencies in \\(F^+\\) that include only attributes in \\(R_i\\). (\\(F_i\\) : the restriction of F on \\(R_i\\) )</p> <ul> <li>A decomposition is dependency preserving, if (F1 \\(\\cup\\) F2 \\(\\cup\\) \u2026 \\(\\cup\\) Fn )\\(^+\\) = F\\(^+\\)</li> <li>If it is not, then checking updates for violation of functional  dependencies may require computing joins, which is expensive.</li> </ul> Exercise <p>R = (A, B, C )</p> <p>F = {A \\(\\rightarrow\\) B  B \\(\\rightarrow\\) C}</p> <p>Key = {A}</p> answer <p></p> Exercise <p></p> answer <p> </p> <p>It is not always possible to get a BCNF decomposition that is  dependency preserving.</p> <p></p>"},{"location":"Computer_Science/DB/Chapter7/#third-normal-form","title":"Third Normal Form","text":"<p>There are some situations where BCNF is not dependency preserving, and efficient checking for FD violation on updates is important.</p> <p>BCNF \u8981\u6c42\u6240\u6709\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\u90fd\u5f62\u5982 \\(\\alpha \\rightarrow \\beta\\)\uff0c\u5176\u4e2d\u7684 \\(\\alpha\\) \u4e3a\u4e00\u4e2a\u8d85\u7801\u3002\u7b2c\u4e09\u8303\u5f0f\u7a0d\u5fae\u653e\u677e\u4e86\u4e00\u70b9\u8fd9\u4e2a\u7ea6\u675f\uff0c\u5b83\u5141\u8bb8\u5b58\u5728\u5de6\u4fa7\u4e0d\u662f\u8d85\u7801\u7684\u7279\u5b9a\u7684\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\u3002</p> <p>Solution: define a weaker normal form, called Third Normal Form (3NF)</p> <ul> <li>Allows some redundancy</li> <li>But functional dependencies can be checked on individual relations without computing a join </li> <li>There is always a lossless-join, dependency-preserving decomposition into 3NF.</li> </ul> <p>A relation schema R is in third normal form (3NF) if for all: \\(\\alpha \\rightarrow \\beta \\in F^+\\)</p> <p>at least one of the following holds:</p> <ol> <li>\\(\\alpha\\) is a superkey for R</li> <li>\\(\\alpha \\rightarrow \\beta\\) is trivial (i.e., \\(\\beta \\in \\alpha\\))</li> <li>Each attribute A in \\(\\beta - \\alpha\\) is contained in a candidate key for R. (NOTE: each attribute may be in a different candidate key)</li> </ol> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c3NF\u7684\u5b9a\u4e49\u662f\uff1a\u5bf9\u4e8e\u5173\u7cfb\u6a21\u5f0fR\u4e2d\u7684\u6bcf\u4e00\u4e2a\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56X \\(\\rightarrow\\) Y\uff0c\u8981\u4e48 X \u662f\u8d85\u952e\uff0c\u8981\u4e48 Y \u662f\u4e3b\u5c5e\u6027\uff08\u5373Y\u5c5e\u4e8e\u67d0\u4e2a\u5019\u9009\u952e\uff09\u3002</p> <ul> <li>If a relation is in BCNF it is in 3NF (since in BCNF one of the first two conditions above must hold).</li> <li>Third condition is a minimal relaxation of BCNF to ensure dependency preservation.</li> </ul> Question <p>Relation dept_advisor:</p> <p>dept_advisor (s_ID, i_ID, dept_name)</p> <p>F = {s_ID, dept_name \\(\\rightarrow\\) i_ID, i_ID \\(\\rightarrow\\) dept_name}</p> <p>Two candidate keys: s_ID, dept_name, and i_ID, s_ID</p> Answer <p>R is in 3NF</p> <p>s_ID, dept_name \\(\\rightarrow\\) i_ID</p> <p>\u2013 s_ID, dept_name is a superkey</p> <p>i_ID \\(\\rightarrow\\) dept_name</p> <p>\u2013 dept_name is contained in a candidate key</p>"},{"location":"Computer_Science/DB/Chapter7/#3nf-decomposition-algorithm","title":"3NF Decomposition Algorithm","text":"<p>\u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u63cf\u8ff0\u7684\u7528\u4e8e\u5206\u89e3\u5230 3NF \u7684\u7b97\u6cd5\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u5c3d\u7ba1\u5224\u5b9a\u4e2a\u7ed9\u5b9a\u5173\u7cfb\u662f\u5426\u6ee1\u8db3 3NF \u662f NP-hard \u7684\u3002</p> <p>summary</p> <p><code>BCNF</code>\uff1a\u82e5 X \\(\\rightarrow\\) Y \u662f\u975e\u5e73\u51e1\u4f9d\u8d56\uff0c\u5219 <code>X</code> \u5fc5\u987b\u662f\u8d85\u952e\u3002</p> <p><code>3NF</code>\uff1a\u5141\u8bb8 X \\(\\rightarrow\\) Y \u6ee1\u8db3\u4ee5\u4e0b\u4efb\u4e00\u6761\u4ef6\uff1a</p> <p><code>X</code> \u662f\u8d85\u952e\uff1b</p> <p><code>Y</code>\u662f\u4e3b\u5c5e\u6027\uff08\u5c5e\u4e8e\u5019\u9009\u952e\u7684\u4e00\u90e8\u5206\uff09\u3002</p>"},{"location":"Computer_Science/DB/Chapter7/#goals-of-normalization","title":"Goals of Normalization","text":"<p>Let R be a relation scheme with a set F of functional dependencies. Decide whether a relation scheme R is in \"good\" form.</p> <p>In the case that a relation scheme R is not in \"good\" form, decompose it into a set of relation scheme {\\(R_1, R_2, ..., R_n\\)} such that</p> <ul> <li>each relation scheme is in good form (i.e., BCNF or 3NF)</li> <li>the decomposition is a lossless-join decomposition</li> <li>Preferably, the decomposition should be dependency preserving.</li> </ul> Exercise <p></p> answer <p></p>"},{"location":"Computer_Science/DB/Chapter7/#multivalued-dependencies","title":"Multivalued Dependencies","text":"<p>\u6709\u4e9b\u5173\u7cfb\u6a21\u5f0f\u867d\u7136\u5c5e\u4e8e BCNF \uff0c\u4f46\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\u4ecd\u7136\u906d\u53d7\u4fe1\u606f\u91cd\u590d\u95ee\u9898\u7684\u56f0\u6270\uff0c\u6240\u4ee5\u770b\u8d77\u6765\u5e76\u6ca1\u6709\u88ab\u5145\u5206\u5730\u89c4\u8303\u5316\u3002</p> <p>Consider a relation inst_info (\\(\\underline{ID, child\\_name, phone}\\)) where an instructor may have more than one phone and can have multiple children.</p> <p></p> <p>There are no non-trivial functional dependencies and therefore the  relation is in BCNF.</p> <p>Insertion anomalies \u2013 i.e., if we add a phone 981-992-3443 to 99999,  we need to add two tuples</p> <p>(99999, David, 981-992-3443)</p> <p>(99999, William, 981-992-3443)</p> <p>Therefore, it is better to decompose inst_info into:</p> <p></p> <p>This suggests the need for higher normal forms, such as Fourth Normal Form (4NF).</p> <p>\u4e3a\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5fc5\u987b\u5b9a\u4e49\u4e00\u79cd\u79f0\u4e3a\u591a\u503c\u4f9d\u8d56\u7684\u65b0\u7684\u7ea6\u675f\u5f62\u5f0f\u3002\u6b63\u5982\u6211\u4eec\u5bf9\u51fd\u6570\u4f9d\u8d56\u6240\u505a\u7684\u90a3\u6837\uff0c\u6211\u4eec\u5c06\u5229\u7528\u591a\u503c\u4f9d\u8d56\u6765\u4e3a\u5173\u7cfb\u6a21\u5f0f\u5b9a\u4e49\u4e00\u79cd\u8303\u5f0f\u3002\u8fd9\u79cd\u8303\u5f0f\u79f0\u4e3a\u7b2c\u56db\u8303\u5f0f(Fourth NormalForm\uff0c4NF)\uff0c\u5b83\u6bd4 BCNF \u7684\u7ea6\u675f\u66f4\u4e3a\u4e25\u683c\u3002\u6211\u4eec\u5c06\u770b\u5230\u6bcf\u4e2a 4NF \u6a21\u5f0f\u4e5f\u90fd\u5c5e\u4e8e BCNF \uff0c\u4f46\u5b58\u5728\u4e0d\u5c5e\u4e8e 4NF \u7684 BCNF \u5f0f\u3002</p>"},{"location":"Computer_Science/DB/Chapter7/#definition","title":"definition","text":"<p>\u51fd\u6570\u4f9d\u8d56\u5728\u4e00\u4e2a\u5173\u7cfb\u4e2d\u6392\u9664\u4e86\u67d0\u4e9b\u5143\u7ec4\u3002\u5982\u679c A \\(\\rightarrow\\) B \u6210\u7acb\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u80fd\u6709\u4e24\u4e2a\u5143\u7ec4\u5728 A \u4e0a\u7684\u53d6\u503c\u76f8\u540c\u800c\u5728 B \u4e0a\u7684\u53d6\u503c\u4e0d\u540c\u3002\u591a\u503c\u4f9d\u8d56\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u51fa\u53d1\uff0c\u5e76\u4e0d\u6392\u9664\u7279\u5b9a\u5143\u7ec4\u7684\u5b58\u5728\uff0c\u800c\u662f\u8981\u6c42\u5177\u6709\u7279\u5b9a\u5f62\u5f0f\u7684\u5176\u4ed6\u5143\u7ec4\u5b58\u5728\u4e8e\u5173\u7cfb\u4e2d\u3002\u7531\u4e8e\u8fd9\u79cd\u539f\u56e0\uff0c\u51fd\u6570\u4f9d\u8d56\u6709\u65f6\u88ab\u79f0\u4e3a\u76f8\u7b49\u4ea7\u751f\u4f9d\u8d56(equality-generating dependency)\uff0c\u800c\u591a\u503c\u4f9d\u8d56\u88ab\u79f0\u4e3a\u5143\u7ec4\u4ea7\u751f\u4f9d\u8d56 (tuple-generating dependency)\u3002</p> <p>Let R be a relation schema and let \\(\\alpha \\subseteq R\\) and \\(\\beta \\subseteq R\\). The multivalued dependency </p> \\[\\alpha \\rightarrow \\rightarrow \\beta\\] <p>holds on R if in any legal relation r(R), for all pairs for tuples \\(t_1\\) and \\(t_2\\) in r such that \\(t_1[\\alpha] = t_2[\\alpha]\\), there exists tuples \\(t_3\\) and \\(t_4\\) in r such that:</p> \\[t_3[\\alpha] = t_4[\\alpha] = t_1[\\alpha] = t_2[\\alpha]\\] \\[t_3[\\beta] = t_1[\\beta]\\] \\[t_3[R - \\beta] = t_2[R - \\beta]\\] \\[t_4[\\beta] = t_2[\\beta]\\] \\[t_4[R - \\beta] = t_1[R - \\beta]\\] <p>Note</p> <p>\u4e5f\u5c31\u662f\u5728 \\(\\alpha\\) \u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u4e00\u5bf9 \\(\\beta\\) \u76f8\u540c\uff0c\u5269\u4e0b\u7684\u5c5e\u6027\u662f\u4ea4\u6362\u4e86\u7684\u3002</p> <p>\u4e5f\u5373\u5728\u591a\u503c\u4f9d\u8d56\uff08Multivalued Dependency, MVD\uff09\u4e2d\uff0c\u5b58\u5728\u4e92\u8865\u6027\uff08Complementary Rule\uff09\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4e00\u4e2a\u975e\u5e73\u51e1\u7684\u591a\u503c\u4f9d\u8d56 \\(X \\rightarrow \\rightarrow Y\\) \u6210\u7acb\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u5176\u4e92\u8865\u7684\u591a\u503c\u4f9d\u8d56 \\(X \\rightarrow \\rightarrow Z\\) \uff0c\u5176\u4e2d \\(Z = R - X - Y\\) \u3002</p> <p>\u76f4\u89c2\u5730\u8bf4\uff0c\u591a\u503c\u4f9d\u8d56 \\(\\alpha \\rightarrow \\rightarrow \\beta\\) \u662f\u8bf4 \\(\\alpha\\) \u548c \\(\\beta\\) \u4e4b\u95f4\u7684\u8054\u7cfb\u72ec\u7acb\u4e8e \\(\\alpha\\) \u548c \\(R-\\beta\\) \u4e4b\u95f4\u7684\u8054\u7cfb\u3002\u82e5\u6a21\u5f0f R \u4e0a\u7684\u6240\u6709\u5173\u7cfb\u90fd\u6ee1\u8db3\u591a\u503c\u4f9d\u8d56 \\(\\alpha \\rightarrow \\rightarrow \\beta\\) ,\u5219 \\(\\alpha \\rightarrow \\rightarrow \\beta\\) \u5728\u6a21\u5f0f R \u4e0a\u662f\u5e73\u51e1\u7684\u591a\u503c\u4f9d\u8d56\u3002\u56e0\u6b64\uff0c\u5982\u679c \\(\\beta \\subseteq \\alpha\\) \u6216 \\(\\beta \\cup \\alpha = R\\) \uff0c\u5219 \\(\\alpha \\rightarrow \\rightarrow \\beta\\) \u662f\u5e73\u51e1\u7684\u3002</p> <p>Tabular representation of \\(\\alpha \\rightarrow \\rightarrow \\beta\\)</p> <p></p> <p>From the definition of multivalued dependency, we can derive the following rule:</p> <p>If \\(\\alpha \\rightarrow \\beta\\) ,then \\(\\alpha \\rightarrow \\rightarrow \\beta\\)</p> <p>That is, every functional dependency is also a multivalued dependency.</p> <p>\u6839\u636e\u591a\u503c\u4f9d\u8d56\u7684\u5b9a\u4e49\uff0c\u5bf9\u4e8e \\(\\alpha, \\beta \\subseteq R\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u51fa\u4ee5\u4e0b\u89c4\u5219:</p> <ul> <li>\u82e5 \\(\\alpha \\rightarrow \\beta\\) \uff0c\u5219 \\(\\alpha \\rightarrow \\rightarrow \\beta\\) \u3002\u6362\u8a00\u4e4b\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u4e5f\u662f\u4e00\u4e2a\u591a\u503c\u4f9d\u8d56\u3002</li> <li>\u82e5 \\(\\alpha \\rightarrow \\beta\\) \uff0c\u5219 \\(\\alpha \\rightarrow \\rightarrow R - \\alpha - \\beta\\) \u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter7/#another-version","title":"another version","text":"<p>Let R be a relation schema with a set of attributes that are partitioned into 3 nonempty subsets.</p> <p>Y,Z,W</p> <p>We say that \\(Y \\rightarrow \\rightarrow Z\\) (Y multidetermines Z ) if and only if for all possible relations r(R)</p> <p>&lt; y1, z1, w1 &gt; \\(\\in\\) r and &lt; y1, z2, w2 &gt; \\(\\in\\) r</p> <p>then,</p> <p>&lt; y1, z1, w2 &gt; \\(\\in\\) r and &lt; y1, z2, w1 &gt; \\(\\in\\) r</p>"},{"location":"Computer_Science/DB/Chapter7/#fourth-normal-form","title":"Fourth Normal Form","text":"<p>A relation schema R is in 4NF with respect to a set D of functional and multivalued dependencies if for all multivalued dependencies in \\(D^+\\) of the form \\(\\alpha \\rightarrow \\rightarrow \\beta\\) , where \\(\\alpha \\subseteq R\\) and \\(\\beta \\subseteq R\\), at least one of the following hold:</p> <ol> <li>\\(\\alpha\\) is a superkey for R</li> <li>\\(\\alpha \\rightarrow \\rightarrow \\beta\\) is a trivial (i.e., \\(\\beta \\subseteq \\alpha\\) or \\(\\alpha \\cup \\beta\\) = R)</li> </ol> <p>If a relation is in 4NF it is in BCNF.</p> <p>\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f R \u662f\u5173\u4e8e\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u548c\u591a\u503c\u4f9d\u8d56\u7684\u96c6\u5408D\u7684\u7b2c\u56db\u8303\u5f0f(Fourth Normal Form\uff0c4NF)\u7684\u6761\u4ef6\u662f\uff0c\u5bf9\u4e8e \\(D^+\\) \u4e2d\u6240\u6709\u5f62\u5982 \\(\\alpha \\rightarrow \\rightarrow \\beta\\) \u7684\u591a\u503c\u4f9d\u8d56(\u5176\u4e2d \\(\\alpha \\subseteq R\\) \u4e14 \\(\\beta \\subseteq R\\) )\uff0c\u81f3\u5c11\u6709\u4ee5\u4e0b\u4e4b\u4e00\u6210\u7acb:</p> <ul> <li>\\(\\alpha \\rightarrow \\rightarrow \\beta\\) \u662f\u4e00\u4e2a\u5e73\u51e1\u7684\u591a\u503c\u4f9d\u8d56\u3002</li> <li>\\(\\alpha\\) \u662f R \u7684\u4e00\u4e2a\u8d85\u952e\u3002</li> </ul> <p>\u6bcf\u4e00\u4e2a 4NF \u7684\u5173\u7cfb\u6a21\u5f0f\u90fd\u662f BCNF \u7684\u3002</p>"},{"location":"Computer_Science/DB/Chapter7/#4nf-decomposition-algorithm","title":"4NF Decomposition Algorithm","text":"<p>\u4e0a\u8ff0\u7b97\u6cd5\u53ea\u4ea7\u751f\u65e0\u635f\u5206\u89e3\u3002</p> Exercise <p></p> answer <p></p>"},{"location":"Computer_Science/DB/Chapter7/#overall-database-design-process","title":"Overall Database Design Process","text":"<p>We have assumed schema R is given</p> <ul> <li>R could have been generated when converting E-R diagram to a set of tables.</li> <li>R could have been a single relation containing all attributes that are of interest (called universal relation).Normalization breaks R into smaller relations.</li> <li>R could have been the result of some ad hoc design of relations, which we then test/convert to normal form.</li> </ul> <ol> <li>r(R) \u53ef\u4ee5\u662f\u7531 E-R \u56fe\u5411\u5173\u7cfb\u6a21\u5f0f\u96c6\u8f6c\u6362\u65f6\u6240\u751f\u6210\u7684\u3002</li> <li>r(R) \u53ef\u4ee5\u662f\u5305\u542b\u6240\u6709\u6709\u610f\u4e49\u7684\u5c5e\u6027\u7684\u5355\u4e2a\u5173\u7cfb\u6a21\u5f0f\u3002\u7136\u540e\u7531\u89c4\u8303\u5316\u8fc7\u7a0b\u5c06 R \u5206\u89e3\u6210\u4e00\u4e9b\u66f4\u5c0f\u7684\u6a21\u5f0f\u3002</li> <li>r(R) \u53ef\u4ee5\u662f\u5bf9\u5173\u7cfb\u5373\u5e2d\u8bbe\u8ba1\u7684\u7ed3\u679c\uff0c\u7136\u540e\u68c0\u9a8c\u5b83\u662f\u5426\u6ee1\u8db3\u4e00\u79cd\u671f\u671b\u7684\u8303\u5f0f\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter7/#er-model-and-normalization","title":"ER Model and Normalization","text":"<ul> <li>When an E-R diagram is carefully designed, identifying all entities correctly, the tables generated from the E-R diagram should not need further normalization.</li> </ul> <p>\u5f53\u6211\u4eec\u4ed4\u7ec6\u5730\u5b9a\u4e49\u4e86 E-R \u56fe\u5e76\u6b63\u786e\u5730\u8bc6\u522b\u51fa\u6240\u6709\u7684\u5b9e\u4f53\u96c6\u65f6\uff0c\u4ece E-R \u56fe\u751f\u6210\u7684\u5173\u7cfb\u6a21\u5f0f\u5e94\u8be5\u4e0d\u9700\u8981\u592a\u591a\u8fdb\u4e00\u6b65\u7684\u89c4\u8303\u5316\u3002</p> <ul> <li>However, in a real (imperfect) design, there can be functional dependencies from non-key attributes of an entity to other attributes of the entity</li> </ul> <p>\u4e8b\u5b9e\u4e0a\uff0c\u67d0\u4e9b E-R \u56fe\u7684\u53d8\u79cd\u5b9e\u9645\u4e0a\u5f88\u96be\u6216\u8005\u4e0d\u53ef\u80fd\u6307\u5b9a\u975e\u4e8c\u5143\u7684\u8054\u7cfb\u96c6\u3002</p>"},{"location":"Computer_Science/DB/Chapter7/#denormalization-for-performance","title":"Denormalization for Performance","text":"<ul> <li>May want to use non-normalized schema for performance</li> <li>For example, displaying prereqs along with course_id and title requires join of course with prereq</li> </ul> <p>\u6709\u65f6\u5019\u6570\u636e\u5e93\u8bbe\u8ba1\u8005\u4f1a\u9009\u62e9\u4e00\u4e2a\u5177\u6709\u5197\u4f59\u4fe1\u606f\u7684\u6a21\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u6ca1\u6709\u89c4\u8303\u5316\u3002\u5bf9\u7279\u5b9a\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u5b83\u4eec\u4f7f\u7528\u5197\u4f59\u6765\u63d0\u9ad8\u6027\u80fd\u3002\u4e0d\u4f7f\u7528\u89c4\u8303\u5316\u6a21\u5f0f\u7684\u4ee3\u4ef7\u662f\u7528\u6765\u4fdd\u6301\u5197\u4f59\u6570\u636e\u81f4\u6027\u7684\u989d\u5916\u5de5\u4f5c(\u4ee5\u7f16\u7801\u65f6\u95f4\u548c\u6267\u884c\u65f6\u95f4\u8ba1\u7b97)\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u5b9a\u6bcf\u6b21\u8bbf\u95ee\u4e00\u95e8\u8bfe\u7a0b\u65f6\u6240\u6709\u7684\u5148\u4fee\u8bfe\u7a0b\u90fd\u5fc5\u987b\u548c\u8be5\u8bfe\u7a0b\u4fe1\u606f\u4e00\u8d77\u663e\u793a\u3002\u5728\u6211\u4eec\u89c4\u8303\u5316\u7684\u6a21\u5f0f\u4e2d\uff0c\u9700\u8981\u8fde\u63a5 course \u548c prereg \u3002</p> <ol> <li>Alternative 1: Use denormalized relation containing attributes of course as well as prereq with all above attributes</li> </ol> <ul> <li>faster lookup</li> <li>extra space and extra execution time for updates</li> <li>extra coding work for programmer and possibility of error in extra code</li> </ul> <p>\u4e00\u79cd\u4e0d\u7528\u52a8\u6001\u8ba1\u7b97\u8fde\u63a5\u7684\u53ef\u66ff\u4ee3\u65b9\u5f0f\u662f\u4fdd\u5b58\u4e00\u4e2a\u5305\u542b course \u548c prereq \u7684\u6240\u6709\u5c5e\u6027\u7684\u5173\u7cfb\u3002</p> <ul> <li>\u8fd9\u4f7f\u5f97\u663e\u793a\"\u5168\u90e8\"\u8bfe\u7a0b\u4fe1\u606f\u4f1a\u66f4\u5feb\u3002</li> <li>\u7136\u800c\uff0c\u5bf9\u4e8e\u6bcf\u95e8\u5148\u4fee\u8bfe\u7a0b\u90fd\u8981\u91cd\u590d\u8bfe\u7a0b\u7684\u4fe1\u606f\u800c\u4e14\u6bcf\u5f53\u6dfb\u52a0\u6216\u5220\u9664\u4e00\u95e8\u5148\u4fee\u8bfe\u7a0b\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c31\u5fc5\u987b\u66f4\u65b0\u6240\u6709\u7684\u526f\u672c\u3002</li> </ul> <p>\u628a\u4e00\u4e2a\u89c4\u8303\u5316\u7684\u6a21\u5f0f\u53d8\u6210\u975e\u89c4\u8303\u5316\u7684\u8fc7\u7a0b\u79f0\u4e3a\u53bb\u89c4\u8303\u5316(denormalization)\uff0c\u8bbe\u8ba1\u8005\u7528\u5b83\u6765\u8c03\u6574\u7cfb\u7edf\u7684\u6027\u80fd\u4ee5\u652f\u6301\u54cd\u5e94\u65f6\u95f4\u82db\u523b\u7684\u64cd\u4f5c\u3002</p> <ol> <li>Alternative 2: use a materialized view defined as \\(course \\bowtie prereq\\)</li> </ol> <ul> <li>Benefits and drawbacks same as above, except no extra coding work  for programmer and avoids possible errors.</li> </ul> <p>\u4f7f\u7528\u89c4\u8303\u5316\u7684\u6a21\u5f0f\uff0c\u540c\u65f6\u5c06 course \u548c prereq \u7684\u8fde\u63a5\u4f5c\u4e3a\u7269\u5316\u89c6\u56fe\u989d\u5916\u5b58\u50a8\u3002\u7269\u5316\u89c6\u56fe\u662f\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u7684\u89c6\u56fe\uff0c\u5e76\u4e14\u5f53\u89c6\u56fe\u4e2d\u4f7f\u7528\u7684\u5173\u7cfb\u88ab\u66f4\u65b0\u65f6\u4e5f\u76f8\u5e94\u66f4\u65b0\u3002</p> <ul> <li>\u4e0e\u53bb\u89c4\u8303\u5316\u7c7b\u4f3c\uff0c\u4f7f\u7528\u7269\u5316\u89c6\u56fe\u786e\u5b9e\u4f1a\u6709\u7a7a\u95f4\u548c\u65f6\u95f4\u4e0a\u7684\u5f00\u9500.</li> <li>\u4e0d\u8fc7\u5b83\u4e5f\u6709\u4f18\u70b9\uff0c\u5c31\u662f\u8fdb\u884c\u89c6\u56fe\u66f4\u65b0\u7684\u5de5\u4f5c\u662f\u7531\u6570\u636e\u5e93\u7cfb\u7edf\u800c\u4e0d\u662f\u5e94\u7528\u7a0b\u5e8f\u5458\u6765\u5b8c\u6210\u7684\u3002</li> </ul>"},{"location":"Computer_Science/DB/Chapter7/#other-design-issues","title":"Other Design Issues","text":"<ul> <li>Some aspects of database design are not caught by normalization</li> </ul> <p>\u5728\u6570\u636e\u5e93\u8bbe\u8ba1\u4e2d\u6709\u4e00\u4e9b\u65b9\u9762\u4e0d\u80fd\u901a\u8fc7\u89c4\u8303\u5316\u6765\u89e3\u51b3\uff0c\u800c\u5b83\u4eec\u4e5f\u4f1a\u5bfc\u81f4\u4e0d\u597d\u7684\u6570\u636e\u5e93\u8bbe\u8ba1\u3002\u4e0e\u65f6\u95f4\u6216\u65f6\u95f4\u8303\u56f4\u6709\u5173\u7684\u6570\u636e\u5c31\u5b58\u5728\u8fd9\u6837\u7684\u95ee\u9898\u3002</p> <ul> <li>Examples : 4 approaches to represent the same information:</li> </ul> <ol> <li>earnings (company_id, year, amount)</li> <li>ernings_2012(company_id, earnings)</li> </ol> <p>earnings_2013(company_id, earnings)</p> <p>earnings_2014(company_id, earnings)</p> <ul> <li>Above are in BCNF, but make querying across years difficult(\u9700\u8981\u7f16\u5199\u65b0\u7684\u67e5\u8be2\u628a\u6bcf\u4e2a\u65b0\u7684\u5173\u7cfb\u8003\u8651\u8fdb\u53bb) and needs new table each year</li> <li>\u53ef\u4ee5\u63d0\u9ad8\u5e76\u53d1\u5ea6</li> </ul> <ol> <li>company_year (company_id, earnings_2012, earnings_2013, earnings_2014)</li> </ol> <ul> <li>Also in BCNF, but also makes querying across years difficult and requires new attribute each year.</li> <li>\u4f9d\u65e7\u9700\u8981\u6bcf\u5e74\u4fee\u6539\u5173\u7cfb\u6a21\u5f0f\u4e0e\u6dfb\u52a0\u65b0\u7684\u67e5\u8be2\uff0c\u7531\u4e8e\u53ef\u80fd\u8981\u5f15\u7528\u5f88\u591a\u5c5e\u6027\uff0c\u67e5\u8be2\u4e5f\u4f1a\u66f4\u52a0\u590d\u6742\u3002</li> <li>Is an example of a crosstab, where values for one attribute become column names</li> <li>Used in spreadsheets, and in data analysis tools 1</li> </ul> <ol> <li>\u5728 SQL \u4e2d\u53ef\u4ee5\u4f7f\u7528 course (course_id, tiile, dept_name, credits, start, end)\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u8bfe\u672c\u3002</li> </ol>"},{"location":"Computer_Science/DB/Chapter8/","title":"Chapter 8 | Complex Data Types","text":"<p> \u7ea6 267 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"Computer_Science/DB/Chapter8/#object-based-databases","title":"Object-based Databases","text":"<ol> <li>Advanced Database Applications need Complex Data Types</li> <li> <p>Applications are often written in object-oriented programming languages\uff08OOPL\uff09</p> <ul> <li>Type system does not match relational type system</li> <li>Switching between imperative language and SQL is troublesome</li> </ul> </li> <li> <p>Approaches for integrating object-orientation with databases</p> <ul> <li>Build an object-oriented database\uff08OODB\uff09 that natively supports object-oriented data and direct access from programming language</li> <li>Build an object-relational database\uff08ORDB\uff09\uff0c adding object-oriented features to a relational database</li> <li>Automatically convert data between programming language model and relational model; data conversion specified by object-relational mapping(ORM)</li> </ul> </li> </ol>"},{"location":"Computer_Science/DB/Chapter8/#object-relational-mapping","title":"Object-Relational Mapping","text":"<ol> <li> <p>Object-relational mapping (ORM) systems allow </p> <ul> <li>Specification of mapping between programming language objects and database tuples </li> <li>Automatic creation of database tuples upon creation of objects </li> <li>Automatic update/delete of database tuples when objects are update/deleted</li> <li>Interface to retrieve objects satisfying specified conditions<ul> <li>Tuples in database are queried, and object created from the tuples</li> </ul> </li> </ul> </li> <li> <p>Details in Section 9.6.2</p> <ul> <li>Hibernate ORM for Java</li> <li>Django ORM for Python</li> </ul> </li> </ol>"},{"location":"Computer_Science/DB/Chapter8/#semi-structured-data","title":"Semi-Structured Data","text":"<ol> <li>Many applications require storage of complex data, whose schema changes often</li> <li> <p>The relational model\u2019s requirement of atomic data types may be an overkill</p> <ul> <li>E.g., storing set of interests as a set-valued attribute of a user profile may be simpler than normalizing it</li> </ul> </li> <li> <p>Data exchange can benefit greatly from semi-structured data</p> <ul> <li>Exchange can be between applications, or between back-end and front-end of an application</li> <li>Web-services are widely used today, with complex data fetched to the front-end and displayed using a mobile app or JavaScript</li> </ul> </li> <li> <p>XML and JSON are widely used semi-structured data models</p> <ul> <li>XML: Extensible Markup Language<ul> <li>Earlier generation notation, still used extensively</li> </ul> </li> <li>JSON: JavaScript Object Notation<ul> <li>Widely used today</li> </ul> </li> </ul> </li> </ol>"},{"location":"Computer_Science/DB/homework/","title":"Homework","text":"<p> \u7ea6 12808 \u4e2a\u5b57  509 \u884c\u4ee3\u7801  60 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 70 \u5206\u949f</p>"},{"location":"Computer_Science/DB/homework/#_1","title":"\u7b2c\u4e00\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#17","title":"1.7","text":"Question <p>List four significant differences between a file-processing system and a DBMS.</p> my <ol> <li>Data Redundancy and Consistency:</li> </ol> <p>For File-Processing System, data redundancy is common because the same data may be duplicated across multiple files. This can lead to inconsistencies if updates are not applied uniformly. However, as for DBMS, redundancy is minimized.</p> <ol> <li>Data Integrity and Security:</li> </ol> <p>Integrity constraints and security measures are typically implemented at the application level in File-Processing System. But for DBMS, it provides robust mechanisms for enforcing data integrity and security at the system level.</p> <ol> <li>Data Isolation:</li> </ol> <p>Data in File-Processing System is typically isolated within specific applications, compared to data in DBMS, which is centralized and can be shared across multiple applications and users.</p> <ol> <li>Concurrency Control for Multiple User:</li> </ol> <p>Concurrency control is typically not built into file-processing systems. But a DBMS provides built-in concurrency control mechanisms to ensure that multiple users can access and modify data simultaneously without conflicts.</p> answer <ol> <li> <p>A file-processing system is more specific to the problem at hand while a DBMS is more general. A file-processing system used by a university is difficult to use in a hospital setting. While a DBMS once written can be used in different places.</p> </li> <li> <p>It is difficult to ensure atomicity in a conventional file-processing system while it is a lot easier in a DBMS. Often wrapping a set of SQL statements in a \"BEGIN TRANSACTION\" and \"END TRANSACTION\" are often enough in the relational DBMS world.</p> </li> <li> <p>Protecting against concurrent-access anomalies in a file-processing system is difficult. Using a DBMS is much easier to protect against concurrent-access anomalies.</p> </li> <li> <p>Most DBMS have a concept of a user and what access that user has. Enforcing such authorization in a file-processing system is really difficult.</p> </li> </ol>"},{"location":"Computer_Science/DB/homework/#18","title":"1.8","text":"Question <p>Explain the concept of physical data independence and its importance in database systems.</p> my <p>Physical data independence is the ability to modify the physical schema without changing the logical schema. It is a fundamental principle in database systems that enhances flexibility, scalability, and maintainability. By decoupling the physical storage details from the logical data representation, it allows for efficient management and optimization of data storage without impacting the applications that rely on the database.</p> answer(\ud83d\udcddPhysical level) (\ud83d\udcddPhysical data independence) <p>There are 3 levels of data abstraction in a database: Physical Level, Logical Level and View Level. Physical data independence is the abstraction provided by the Logical Level to hide the complex data-structures that are used at the Physical Level to retrieve data efficiently.</p> <p>Physical level: The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures in detail.</p> <p>Physical data independence: the ability to modify the physical schema without changing the logical schema. </p> <p>from DeepSeek: Physical data independence is a fundamental principle in database systems that enhances flexibility, scalability, and maintainability. By decoupling the physical storage details from the logical data representation, it allows for efficient management and optimization of data storage without impacting the applications that rely on the database. This separation is crucial for building robust, scalable, and maintainable database systems.</p>"},{"location":"Computer_Science/DB/homework/#19","title":"1.9","text":"Question <p>List five responsibilities of a database-management system. For each responsibility, explain the problems that would arise if the responsibility were not discharged.</p> my <ol> <li>Efficiency and Scalability in Data Access</li> </ol> <p>Users might experience slow response times, and the system could become unusable under heavy load, if the responsibility were not discharged.</p> <ol> <li>Reduced Application Development Time</li> </ol> <p>Without it, developers would have to manually manage data storage and retrieval for every application feature, slowing down the development process.</p> <ol> <li>Data Independence</li> </ol> <p>If the storage system will be upgrated, applications might break if they are tightly coupled to the physical storage details.</p> <ol> <li>Data Integrity and Security</li> </ol> <p>For example, in a banking system, without integrity constraints, account balances could become incorrect, and without security measures, hackers could steal customer information.</p> <ol> <li>Concurrent Access and Robustness</li> </ol> <p>Such as in an e-commerce platform, without concurrency control, two users might purchase the last item in stock simultaneously, leading to overselling. Without recovery mechanisms, a system crash could result in lost orders or payment data.</p> answer(\ud83d\udcddCharacteristics) <ol> <li> <p>Security - Since DBMS have the concept of a ROLE (user) it easier for setting access managmenent.</p> </li> <li> <p>Needs to offer atomicity when needed - If atomicity is not provided, inconsistency will be inevitable.</p> </li> <li> <p>Needs to offer a simple and efficient way to query data</p> </li> <li> <p>Needs to offer durability i.e. once an update or an insert has happened it must be persisted.</p> </li> <li> <p>A DBMS needs to offer a way for protection against concurrent-access anomalies.</p> </li> </ol>"},{"location":"Computer_Science/DB/homework/#115","title":"1.15","text":"Question <p>Describe at least three tables that might be used to store information in a socialnetworking system such as Facebook.</p> my <ol> <li>Users Table</li> </ol> <p>This table stores information about the users of the social networking platform, containing user_id, username, email, first_name, last_name, date_of_birth and profile_picture.</p> <ol> <li>Posts Table</li> </ol> <p>This table stores information about the posts made by users, containing post_id, user_id, content and media_url.</p> <ol> <li>Friends Table</li> </ol> <p>This table stores relationships between users, containing friendship_id, user_id1, user_id2 and status.</p> answer <ol> <li> <p>Users table - that contains id, full name, phone number, email, date of birth, profile pic</p> </li> <li> <p>Chats table - that contains the chat</p> </li> <li> <p>Friends table - that contains basically two columns of user ids (foreign keys from Users table)</p> </li> </ol>"},{"location":"Computer_Science/DB/homework/#_2","title":"\u7b2c\u4e8c\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#27","title":"2.7","text":"Question <p>Consider the bank database of Figure 2.18. Give an expression in the relational algebra for each of the following queries:</p> <p>a. Find the name of each branch located in \u201cChicago\u201d.</p> <p>b. Find the ID of each borrower who has a loan in branch \u201cDowntown\u201d.</p> <pre><code>branch (branch_name, branch_city, assets)\ncustomer (ID, customer_name, customer_street, customer_city)\nloan (loan_number, branch_name, amount)\nborrower (ID, loan_number)\naccount (account_number, branch_name, balance)\ndepositor (ID, account_number)\n</code></pre> <p>Figure 2.18 Bank database.</p> my <p>a.</p> <p>\\(\\Pi_{branch\\_name}branch(\\sigma_{branch\\_city = 'Chicago'}(branch))\\)</p> <p>b.</p> <p>\\(\\Pi_{ID}(\\sigma_{branch\\_name = 'Downtown'}(loan \\bowtie_{loan.loan\\_number = borrower.loan\\_number} borrower))\\)</p> answer <p>a. \\(\\Pi_{branch\\_name}(\\sigma_{branch\\_city = \"Chicago\"}(branch))\\)</p> <p>b.\\(\\Pi_{ID}(\\sigma_{branch\\_name = \"Downtown\"}(loan \\bowtie_{loan.loan\\_number = borrower.loan\\_number} borrower))\\)</p>"},{"location":"Computer_Science/DB/homework/#212","title":"2.12","text":"Question <p>Consider the bank database of Figure 2.18. Assume that branch names and customer names uniquely identify branches and customers, but loans and accounts can be associated with more than one customer.</p> <p>a. What are the appropriate primary keys?</p> <p>b. Given your choice of primary keys, identify appropriate foreign keys.</p> my <p>a.</p> <p>\\(branch: branch\\_name\\)</p> <p>\\(coustomer: ID\\)</p> <p>\\(loan: loan\\_number\\)</p> <p>\\(borrower: {ID, loan\\_number}\\)</p> <p>\\(account: account\\_number\\)</p> <p>\\(depositor: {ID, account\\_number}\\)</p> <p>\u5206\u884c\u540d\u79f0\uff08<code>branch_name</code>\uff09\u662f\u552f\u4e00\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u552f\u4e00\u6807\u8bc6\u6bcf\u4e2a\u5206\u884c\u3002\u5ba2\u6237 ID\uff08<code>ID</code>\uff09\u662f\u552f\u4e00\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u552f\u4e00\u6807\u8bc6\u6bcf\u4e2a\u5ba2\u6237\u3002\u8d37\u6b3e\u7f16\u53f7\uff08<code>loan_number</code>\uff09\u662f\u552f\u4e00\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u552f\u4e00\u6807\u8bc6\u6bcf\u7b14\u8d37\u6b3e\u3002<code>borrower</code> \u8868\u662f\u5ba2\u6237\u548c\u8d37\u6b3e\u4e4b\u95f4\u7684\u5173\u8054\u8868\u3002\u4e00\u4e2a\u5ba2\u6237\u53ef\u4ee5\u6709\u591a\u4e2a\u8d37\u6b3e\uff0c\u4e00\u4e2a\u8d37\u6b3e\u4e5f\u53ef\u4ee5\u5173\u8054\u591a\u4e2a\u5ba2\u6237\uff08\u867d\u7136\u901a\u5e38\u4e00\u4e2a\u8d37\u6b3e\u53ea\u5173\u8054\u4e00\u4e2a\u5ba2\u6237\uff09\u3002\u56e0\u6b64\uff0c\u4e3b\u952e\u9700\u8981\u662f <code>ID</code> \u548c <code>loan_number</code> \u7684\u7ec4\u5408\u3002\u8d26\u6237\u7f16\u53f7\uff08<code>account_number</code>\uff09\u662f\u552f\u4e00\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u552f\u4e00\u6807\u8bc6\u6bcf\u4e2a\u8d26\u6237\u3002<code>depositor</code> \u8868\u662f\u5ba2\u6237\u548c\u8d26\u6237\u4e4b\u95f4\u7684\u5173\u8054\u8868\u3002\u4e00\u4e2a\u5ba2\u6237\u53ef\u4ee5\u6709\u591a\u4e2a\u8d26\u6237\uff0c\u4e00\u4e2a\u8d26\u6237\u4e5f\u53ef\u4ee5\u5173\u8054\u591a\u4e2a\u5ba2\u6237\uff08\u4f8b\u5982\u8054\u540d\u8d26\u6237\uff09\u3002\u56e0\u6b64\uff0c\u4e3b\u952e\u9700\u8981\u662f <code>ID</code> \u548c <code>account_number</code> \u7684\u7ec4\u5408\u3002</p> <p>b. </p> <p>foreign key: </p> <p>\\(branch: No\\)</p> <p>\\(customer: No\\)</p> <p>\\(loan: branch\\_name \\ from \\ branch\\)</p> <p>\\(borrower: ID \\ from \\ customer, loan\\_number \\ from \\ loan\\)</p> <p>\\(account: branch\\_name \\ from \\ branch\\)</p> <p>\\(depositor: ID \\ from \\ customer, account\\_number \\ from \\ account\\)</p> <p><code>loan</code> \u8868\u4e2d\u7684 <code>branch_name</code> \u5f15\u7528 <code>branch</code> \u8868\u7684 <code>branch_name</code>\uff0c\u8868\u793a\u8d37\u6b3e\u6240\u5c5e\u7684\u5206\u884c\u3002<code>borrower</code> \u8868\u901a\u8fc7\u5916\u952e\u5efa\u7acb\u4e86\u5ba2\u6237\u548c\u8d37\u6b3e\u4e4b\u95f4\u7684\u5173\u7cfb\u3002<code>account</code> \u8868\u4e2d\u7684 <code>branch_name</code> \u5f15\u7528 <code>branch</code> \u8868\u7684 <code>branch_name</code>\uff0c\u8868\u793a\u8d26\u6237\u6240\u5c5e\u7684\u5206\u884c\u3002<code>depositor</code> \u8868\u901a\u8fc7\u5916\u952e\u5efa\u7acb\u4e86\u5ba2\u6237\u548c\u8d26\u6237\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p> answer <p>a. </p> Relation Name Primary key branch branch_name customer ID loan loan_number borrower {ID, loan_number} account account_number depositor {ID, account_number} <p>b. </p> Relation Name Foreign key branch No Foreign Key customer No Foreign Key loan branch_name borrower ID - a foreign key referencing customer relation, loan_number - a foreign key referencing loan relation account branch_name depositor ID - a foreign key referencing customer relation, account_number - a foreign key referencing account relation"},{"location":"Computer_Science/DB/homework/#213","title":"2.13","text":"Question <p>Construct a schema diagram for the bank database of Figure 2.18.</p> my <p></p> answer <p></p>"},{"location":"Computer_Science/DB/homework/#215","title":"2.15","text":"Question <p>Consider the bank database of Figure 2.18. Give an expression in the relational algebra for each of the following queries:</p> <p>a. Find each loan number with a loan amount greater than $10000.</p> <p>b. Find the ID of each depositor who has an account with a balance greater than $6000.</p> <p>c. Find the ID of each depositor who has an account with a balance greater than $6000 at the \u201cUptown\u201d branch.</p> my <p>a. \\(\\Pi_{loan\\_number}(\\sigma_{amount &gt; 10000}(loan))\\)</p> <p>b. \\(\\Pi_{ID}(\\sigma_{balance &gt; 6000}(depositor \\bowtie_{depositor.account\\_number = account.account\\_number} account))\\)</p> <p>c. \\(\\Pi_{ID}(\\sigma_{balance &gt; 6000 \\land branch\\_name = 'Uptown'}(depositor \\bowtie_{depositor.account\\_number = account.account\\_number} account))\\)</p> answer <p>a. \\(\\Pi_{loan\\_number}(\\sigma_{amount &gt; 10000}(loan))\\)</p> <p>b. \\(\\Pi_{ID}(depositor \\bowtie_{depositor.account\\_number = account.account\\_number} \\sigma_{balance &gt; 6000}(account))\\)</p> <p>c. \\(\\Pi_{ID}(depositor \\bowtie_{depositor.account\\_number = account.account\\_number} \\sigma_{balance &gt; 6000 \\land branch\\_name = 'Uptown'}(account))\\)</p>"},{"location":"Computer_Science/DB/homework/#_3","title":"\u7b2c\u4e09\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#38","title":"3.8","text":"Question <p>Consider the bank database of Figure 3.18, where the primary keys are underlined. Construct the following SQL queries for this relational database.</p> <p>a. Find the ID of each customer of the bank who has an account but not a loan.</p> <p>b. Find the ID of each customer who lives on the same street and in the same city as customer '12345'.</p> <p>c. Find the name of each branch that has at least one customer who has an account in the bank and who lives in \"Harrison\".</p> <p>Figure 3.18 Banking database.</p> <p>branch(\\(\\underline{branch\\_name}\\), branch_city, assets)</p> <p>customer (\\(\\underline{ID}\\), customer_name, customer_street, customer_city)</p> <p>loan (\\(\\underline{loan\\_number}\\), branch_name, amount)</p> <p>borrower (\\(\\underline{ID},\\ \\underline{loan\\_number}\\))</p> <p>account (\\(\\underline{account\\_number}\\) branch_name, balance)</p> <p>depositor (\\(\\underline{ID},\\ \\underline{account\\_number}\\))</p> my <p>a. </p> <pre><code>(SELECT ID FROM depositor)\nEXCEPT \n(SELECT ID FROM borrower)\n</code></pre> <p>b. </p> <pre><code>SELECT ID\nFROM customer\nWHERE customer_city == (SELECT customer_city FROM customer WHERE ID = '12345') AND customer_street == (SELECT customer_street FROM customer WHERE ID = '12345')\n</code></pre> <p>c. </p> <pre><code>SELECT DISTINCT branch_name\nFROM account, depositor, customer \nWHERE customer.id = depositor.id\n    AND depositor.account_number = account.account_number \n    AND customer_city = 'Harrison'\n</code></pre> answer <p>a.</p> <pre><code>(SELECT ID FROM depositor)\nEXCEPT \n(SELECT ID FROM borrower)\n</code></pre> <p>b.</p> <pre><code>SELECT F.ID\nFROM customer AS F, customer AS S\nWHERE F.customer_street = S.customer_street\n    AND F.customer_city = S.customer_city\n    AND S.customer_id = '12345';\n</code></pre> <p>Another method (using scalar subqueries)</p> <pre><code>SELECT ID \nFROM customer \nWHERE customer_street = (SELECT customer_street FROM customer WHERE ID = '12345') AND \n    customer_city = (SELECT customer_city FROM customer WHERE ID = '12345')\n</code></pre> <p>c.</p> <pre><code>SELECT DISTINCT branch_name\nFROM account, depositor, customer \nWHERE customer.id = depositor.id\n    AND depositor.account_number = account.account_number \n    AND customer_city = 'Harrison'\n</code></pre>"},{"location":"Computer_Science/DB/homework/#39","title":"3.9","text":"Question <p>Consider the relational database of Figure 3.19, where the primary keys are underlined. Give an expression in SQL for each of the following queries.</p> <p>a. Find the ID, name, and city of residence of each employee who works for \"First Bank Corporation\".</p> <p>b. Find the ID, name, and city of residence of each employee who works for \"First Bank Corporation\" and earns more than $10000.</p> <p>c. Find the ID of each employee who does not work for \"First Bank Corporation\".</p> <p>d. Find the ID of each employee who earns more than every employee of \"Small Bank Corporation\".</p> <p>e. Assume that companies may be located in several cities. Find the name of each company that is located in every city in which \"Small Bank Corporation\" is located.</p> <p>f. Find the name of the company that has the most employees (or companies, in the case where there is a tie for the most).</p> <p>g. Find the name of each company whose employees earn a higher salary, on average, than the average salary at \"First Bank Corporation\".</p> <p>Figure 3.19 Employee database.</p> <p>employee (\\(\\underline{ID}\\), person_name, street, city)</p> <p>works (\\(\\underline{ID}\\), company_name, salary)</p> <p>company (\\(\\underline{company\\_name}\\), city)</p> <p>manages (\\(\\underline{ID}\\), manager_id)</p> my <p>a. </p> <pre><code>SELECT ID, person_name, city\nFROM employee, works\nWHERE employee.ID = works.ID AND works.company_name = 'First Bank Corporation'\n</code></pre> <p>b. </p> <pre><code>SELECT ID, person_name, city\nFROM employee, works\nWHERE employee.ID = works.ID AND works.company_name = 'First Bank Corporation' AND works.salary &gt; 10000\n</code></pre> <p>c. </p> <pre><code>SELECT ID\nFROM works\nWHERE ID NOT IN (SELECT ID FROM works WHERE company_name = 'First Bank Corporation')\n</code></pre> <p>\u8fd9\u91cc\u8981\u6ce8\u610f\u4e0b\u8ff0\u505a\u6cd5\u662f\u9519\u8bef\u7684\u3002</p> <pre><code>SELECT ID\nFROM works\nWHERE company_name != 'First Bank Corporation'\n</code></pre> <p>\u56e0\u4e3a\u5982\u679c\u5458\u5de5\u5728\u591a\u4e2a\u516c\u53f8\u5de5\u4f5c\uff0c\u6bd4\u5982\u540c\u65f6\u5728\u201c\u7b2c\u4e00\u94f6\u884c\u201d\u548c\u5176\u4ed6\u516c\u53f8\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684ID\u4f1a\u88ab\u5305\u542b\u5417\uff1f\u6bd4\u5982\uff0c\u4e00\u4e2a\u5458\u5de5\u5728works\u8868\u4e2d\u6709\u4e24\u6761\u8bb0\u5f55\uff0c\u4e00\u6761\u516c\u53f8\u662f\u201c\u7b2c\u4e00\u94f6\u884c\u201d\uff0c\u53e6\u4e00\u6761\u662f\u5176\u4ed6\u516c\u53f8\uff0c\u8fd9\u65f6\u5019company_name !=\u7684\u6761\u4ef6\u4f1a\u5305\u542b\u8fd9\u6761\u8bb0\u5f55\u5417\uff1f\u6b64\u65f6\uff0c\u8be5\u5458\u5de5\u7684ID\u4f1a\u88ab\u9009\u51fa\uff0c\u4f46\u5b9e\u9645\u4e0a\u8be5\u5458\u5de5\u786e\u5b9e\u6709\u5728\u201c\u7b2c\u4e00\u94f6\u884c\u201d\u5de5\u4f5c\uff0c\u6240\u4ee5\u5e94\u8be5\u88ab\u6392\u9664\u3002\u6240\u4ee5\u8fd9\u4e2a\u67e5\u8be2\u4e0d\u6b63\u786e\u3002</p> <p>d. </p> <pre><code>SELECT ID\nFROM works\nWHERE salary &gt; ALL (SELECT salary FROM works WHERE company_name = 'Small Bank Corporation')\n</code></pre> <p>\u8981\u6ce8\u610f\u4e0b\u8ff0\u505a\u6cd5\u662f\u9519\u7684\u3002</p> <pre><code>SELECT ID\nFROM works\nWHERE company_name = 'Small Bank Corporation' AND salary &gt; avg(salary)\n</code></pre> <p>\u4e0a\u8ff0\u67e5\u8be2\u6761\u4ef6\u662f\u516c\u53f8\u540d\u4e3a\u201cSmall Bank Corporation\u201d\u4e14\u5de5\u8d44\u5927\u4e8e\u8be5\u516c\u53f8\u7684\u5e73\u5747\u5de5\u8d44\uff0c\u800c\u9898\u76ee\u8981\u6c42\u7684\u662f\u627e\u51fa\u90a3\u4e9b\u5458\u5de5\uff08\u4e0d\u8bba\u4ed6\u4eec\u6240\u5728\u7684\u516c\u53f8\uff09\u7684\u5de5\u8d44\u9ad8\u4e8e\u201c\u5c0f\u94f6\u884c\u516c\u53f8\u201d\u7684\u6240\u6709\u5458\u5de5\u3002\u5373\uff0c\u5e94\u8be5\u6bd4\u8f83\u8be5\u5458\u5de5\u7684\u5de5\u8d44\u662f\u5426\u5927\u4e8e\u201c\u5c0f\u94f6\u884c\u516c\u53f8\u201d\u6240\u6709\u5458\u5de5\u7684\u6700\u9ad8\u5de5\u8d44\uff0c\u6216\u8005\u6240\u6709\u5458\u5de5\u7684\u5de5\u8d44\u3002</p> <p>e. </p> <p>\u6b63\u786e\u7684\u601d\u8def\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u516c\u53f8x\uff0c\u786e\u4fdd\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u4e2a\u201cSmall Bank Corporation\u201d\u6240\u5728\u7684\u57ce\u5e02\u4e0d\u5728x\u516c\u53f8\u7684\u57ce\u5e02\u4e2d\u3002</p> <pre><code>SELECT x.company_name\nFROM company as x\nWHERE NOT EXISTS (\nSELECT city\nFROM company\nWHERE company_name = 'Small Bank Corporation'\nEXCEPT\nSELECT city\nFROM company as y\nWHERE y.company_name = x.company_name\n)\n</code></pre> <p>f. </p> <pre><code>SELECT company_name \nFROM works\nGROUP BY company_name\nHAVING COUNT(ID) &gt;= ALL (\n    SELECT COUNT(ID)\n    FROM works\n    GROUP BY company_name\n)\n</code></pre> <p>g. </p> <pre><code>SELECT conpany_name\nFROM works\nGROUP BY company_name\nHAVING avg(salary) &gt; (SELECT avg(salary) FROM works WHERE company_name = 'First Bank Corporation')\n</code></pre> answer <p>a. </p> <pre><code>SELECT e.ID, e.person_name, city\nFROM employee AS e, works AS w\nWHERE w.company_name = 'First Bank Corporation' AND w.ID = e.ID\n</code></pre> <p>b. </p> <pre><code>SELECT ID, name, city\nFROM employee \nWHERE ID IN (\n    SELECT ID\n    FROM works\n    WHERE company_name = 'First Bank Corporation' AND salary &gt; 10000\n) \n</code></pre> <p>This could be written also in the style of the answer to part a, as follows:</p> <pre><code>SELECT e.ID, e.person_name, city\nFROM employee AS e, works AS w\nWHERE w.company_name = 'First Bank Corporation' AND w.ID = e.ID\n    AND w.salary &gt; 10000\n</code></pre> <p>c. </p> <pre><code>SELECT ID\nFROM works\nWHERE company_name &lt;&gt; 'First Bank Corporation' \n</code></pre> <p>If one allows people to appear in employee without appearing also in works, the solution is slightly more complicated. An outer join as discussed in Chapter 4 could be used as well.</p> <pre><code>SELECT ID \nFROM employee\nWHERE ID NOT IN (\n    SELECT ID\n    FROM works\n    WHERE company_name = 'First Bank Corporation'\n)\n</code></pre> <p>d. </p> <pre><code>SELECT ID\nFROM works\nWHERE salary &gt; ALL (\n    SELECT salary\n    FROM works\n    WHERE company_name = 'Small Bank Corporation'\n)\n</code></pre> <p>If people may work for several companies and we wish to consider the total earnings of each person, the is more complex. But note that the fact that ID is the primary key for works implies that this cannot be the case.</p> <p>e. </p> <pre><code>SELECT S.company_name \nFROM company AS S \nWHERE NOT EXISTS (\n    (\n        SELECT city\n        FROM company\n        WHERE company_name = 'Small Bank Corporation'\n    )\n    EXCEPT\n    (\n        SELECT city\n        FROM company AS T\n        WHERE T.company_name = S.company_name\n    )\n)\n</code></pre> <p>f. </p> <pre><code>SELECT company_name \nFROM works\nGROUP BY company_name\nHAVING COUNT(DISTINCT ID) &gt;= ALL (\n    SELECT COUNT(DISTINCT ID)\n    FROM works\n    GROUP BY company_name\n)\n</code></pre> <p>g. </p> <pre><code>SELECT company_name\nFROM works\nGROUP BY company_name \nHAVING AVG(salary) &gt;  (\n    SELECT AVG(salary)\n    FROM works\n    WHERE company_name = 'First Bank Corporation'\n)\n</code></pre>"},{"location":"Computer_Science/DB/homework/#310","title":"3.10","text":"Question <p>Consider the relational database of Figure 3.19. Give an expression in SQL for each of the following:</p> <p>a. Modify the database so that the employee whose ID is '12345' now lives in \"Newtown\".</p> <p>b. Give each manager of \u201cFirst Bank Corporation\u201d a 10 percent raise unless the salary becomes greater than $100000; in such cases, give only a 3 percent raise.</p> my <p>a. </p> <pre><code>update employee\nset city = 'Newtown'\nwhere ID = '12345'\n</code></pre> <p>b.</p> <pre><code>update employee\nset salary = case\n            when salary * 1.1 &gt; 100000 then salary * 1.03\n            else salary * 1.1\n            end\nwhere ID in (SELECT manager_id FROM magages)\n    and company_name = 'First Bank Corporation'\n</code></pre> answer <p>a. </p> <pre><code>UPDATE employee\nSET city = 'Newtown'\nWHERE ID = '12345' \n</code></pre> <p>b.</p> <pre><code>UPDATE works T\nSET T.salary = T.salary * 1.03\nWHERE T.ID IN (SELECT manager_id FROM manages)\n    AND T.salary * 1.1 &gt; 100000\n    AND T.company_name = 'First Bank Corporation';\n\nUPDATE works T\nSET T.salary = T.salary * 1.1\nWHERE T.ID IN (SELECT manager_id FROM manages)\n    AND T.salary * 1.1 &lt;= 100000\n    AND T.company_name = 'First Bank Corporation';\n</code></pre> <p>The above updates would give different results if executed in the opposite order. We give below a safer solution using the case statement.</p> <pre><code>UPDATE works T\nSET T.salary = T.salary * ( \n    CASE\n        WHEN (T.salary * 1.1 &gt; 100000) THEN 1.03\n        ELSE 1.1 \n    END\n)\nWHERE T.ID IN (SELECT manager_id FROM manages) \n    AND T.company_name = 'First Bank Corporation'\n</code></pre>"},{"location":"Computer_Science/DB/homework/#311","title":"3.11","text":"Question <p>Write the following queries in SQL, using the university schema.</p> <p>a. Find the ID and name of each student who has taken at least one Comp. Sci. course; make sure there are no duplicate names in the result.</p> <p>b. Find the ID and name of each student who has not taken any course offered before 2017.</p> <p>c. For each department, find the maximum salary of instructors in that department. You may assume that every department has at least one instructor.</p> <p>d. Find the lowest, across all departments, of the per-department maximum salary computed by the preceding query.</p> <p></p> <p>(For more information about the university schema, see this link)</p> my <p>a. </p> <pre><code>SELECT DISTINCT student.ID, student.name\nFROM student INNER JOIN takes ON student.ID = takes.ID INNER JOIN course ON takes.course_id = course.course_id\nWHERE course.dept_name = 'Comp. Sci.'\n</code></pre> <p>b. </p> <pre><code>SELECT S.ID, S.name\nFROM student as S\nWHERE NOT EXISTS (SELECT * FROM takes WHERE course.year &lt; 2017 AND S.ID = takes.ID)\n</code></pre> <p>c. </p> <pre><code>SELECT dept_name, MAX(salary)\nFROM instructor\nGROUP BY dept_name\n</code></pre> <p><code>GROUP BY dept_name</code> \u8981\u6c42 <code>SELECT</code> \u5b50\u53e5\u4e2d\u53ea\u80fd\u5305\u542b\u805a\u5408\u51fd\u6570\u6216\u5206\u7ec4\u5217\u3002<code>dept_name</code> \u662f\u5206\u7ec4\u5217\uff0c\u7528\u4e8e\u6807\u8bc6\u6bcf\u4e2a\u90e8\u95e8\uff0c\u800c <code>MAX(salary)</code> \u662f\u8be5\u7ec4\u7684\u805a\u5408\u7ed3\u679c\u3002\u5982\u679c\u7701\u7565 <code>dept_name</code>\uff0c\u67e5\u8be2\u5c06\u65e0\u6cd5\u660e\u786e\u663e\u793a\u6bcf\u4e2a\u90e8\u95e8\u7684\u6700\u5927\u5de5\u8d44\uff0c\u7ed3\u679c\u4f1a\u5931\u53bb\u610f\u4e49\uff08\u4ec5\u8fd4\u56de\u5168\u5c40\u6700\u5927\u5de5\u8d44\uff0c\u800c\u975e\u6309\u90e8\u95e8\u5206\u7ec4\uff09\u3002</p> <p>d. </p> <pre><code>WITH dept_max (dept_name, max_salary) AS (\n    SELECT dept_name, MAX(salary)\n    FROM instructor\n    GROUP BY dept_name\n)\nSELECT MIN(max_salary)\nFROM dept_max\n</code></pre> answer <p>a. </p> <pre><code>SELECT DISTINCT student.ID, student.name\nFROM student INNER JOIN takes  ON student.ID = takes.ID \n            INNER JOIN course ON takes.course_id = course.course_id\nWHERE course.dept_name = 'Comp. Sci.';\n</code></pre> <p>b. </p> <pre><code>SELECT ID, name \nFROM student AS S\nWHERE NOT EXISTS (\n    SELECT * \n    FROM takes AS T\n    WHERE year &lt; 2017 AND T.ID = S.ID \n)\n</code></pre> <p>c. </p> <pre><code>SELECT dept_name, MAX(salary)\nFROM instructor\nGROUP BY dept_name \n</code></pre> <p>d. </p> <pre><code>WITH maximum_salary_within_dept(dept_name, max_salary) AS (\n    SELECT dept_name, MAX(salary)\n    FROM instructor\n    GROUP BY dept_name \n) \nSELECT MIN(max_salary) \nFROM maximum_salary_within_dept\n</code></pre>"},{"location":"Computer_Science/DB/homework/#315","title":"3.15","text":"Question <p>Consider the bank database of Figure 3.18, where the primary keys are underlined. Construct the following SQL queries for this relational database.</p> <p>a. Find each customer who has an account at every branch located in \"Brooklyn\".</p> <p>b. Find the total sum of all loan amounts in the bank.</p> <p>c. Find the names of all branches that have assets greater than those of at least one branch located in \"Brooklyn\".</p> my <p>a. </p> <pre><code>SELECT c.ID\nFROM customer c\nWHERE NOT EXISTS (\n    SELECT b.branch_name \n    FROM branch b \n    WHERE b.branch_city = 'Brooklyn'\n    EXCEPT\n    SELECT a.branch_name \n    FROM depositor d JOIN account a ON d.account_number = a.account_number\n    WHERE d.ID = c.ID\n);\n</code></pre> <p>b. </p> <pre><code>SELECT SUM(amount)\nFROM loan\n</code></pre> <p>\u8fd9\u91cc\u4e0d\u80fd\u52a0\u4e0a <code>GROUP BY loan_number</code>\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8d37\u6b3e\u53f7\u5bf9\u5e94\u4e00\u4e2a\u91d1\u989d\uff0c\u8fd9\u6837SUM\u4e4b\u540e\u6bcf\u4e2a\u8d37\u6b3e\u53f7\u7684\u603b\u548c\u8fd8\u662f\u81ea\u8eab\uff0c\u5bfc\u81f4\u7ed3\u679c\u4f1a\u662f\u6240\u6709\u8d37\u6b3e\u91d1\u989d\u7684\u5217\u8868\uff0c\u800c\u4e0d\u662f\u603b\u548c\u3002</p> <p>c. </p> <pre><code>SELECT branch_name\nFROM branch\nWHERE assets &gt; SOME (\n    SELECT assets\n    FROM branch\n    WHERE branch_city = 'Brooklyn'\n);\n</code></pre> answer <p>a. </p> <pre><code>WITH all_branches_in_brooklyn(branch_name) AS (\nSELECT branch_name \nFROM branch\nWHERE branch_city = 'Brooklyn'\n)\nSELECT ID, customer_name \nFROM customer AS c1\nWHERE NOT EXISTS (\n    (SELECT branch_name FROM all_branches_in_brooklyn)\n    EXCEPT\n    (\n        SELECT branch_name\n        FROM account INNER JOIN depositor \n            ON account.account_number = depositor.account_number\n        WHERE depositor.ID = c1.ID\n    )\n)\n</code></pre> <p>b.</p> <pre><code>SELECT SUM(amount)\nFROM loan\n</code></pre> <p>c. </p> <pre><code>SELECT branch_name\nFROM branch\nWHERE assets &gt; SOME (\n    SELECT assets\n    FROM branch\n    WHERE branch_city = 'Brooklyn'\n);\n</code></pre>"},{"location":"Computer_Science/DB/homework/#_4","title":"\u7b2c\u56db\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#47","title":"4.7","text":"Question <p>Consider the employee database of Figure 4.12. Give an SQL DDL definition of this database.</p> <p>Identify referential-integrity constraints that should hold, and include them in the DDL definition.</p> <p>Figure 4.12 Employee database.</p> <p>employee (\\(\\underline{ID}\\), person_name, street, city)</p> <p>works (\\(\\underline{ID}\\), company_name, salary)</p> <p>company (\\(\\underline{company\\_name}\\), city)</p> <p>manages (\\(\\underline{ID}\\), manager_id)</p> my <pre><code>CREATE TABLE employee(\n    ID int,\n    person_name char(20),\n    street char(20),\n    city char(20),\n    primary key (ID)\n);\n\nCREATE TABLE company(\n    company_name char(20),\n    city char(20),\n    primary key (company_name)\n);\n\nCREATE TABLE works(\n    ID int,\n    company_name char(20),\n    salary int,\n    primary key (ID),\n    foreign key (ID) references employee(ID),\n    foreign key (company_name) references company(company_name)\n);\n\nCREATE TABLE manages(\n    ID int,\n    manager_id int,\n    primary key (ID),\n    foreign key (ID) references employee(ID),\n    foreign key (manager_id) references employee(ID)\n);\n</code></pre> answer <pre><code>CREATE TABLE employee ( \n    id INTEGER,\n    person_name VARCHAR(50),\n    street VARCHAR(50),\n    city VARCHAR(50),\n    PRIMARY KEY (id)\n);\n\nCREATE TABLE company ( \n    company_name VARCHAR(50),\n    city VARCHAR(50),\n    PRIMARY KEY(company_name)\n);\n\nCREATE TABLE works (\n    id INTEGER,\n    company_name VARCHAR(50),\n    salary numeric(10,2),\n    PRIMARY KEY(id),\n    FOREIGN KEY (id) REFERENCES employee(id),\n    FOREIGN KEY (company_name) REFERENCES company(company_name)\n);\n\nCREATE TABLE manages ( \n    id INTEGER,\n    manager_id INTEGER, \n    PRIMARY KEY (id), \n    FOREIGN KEY (id) REFERENCES employee (id), \n    FOREIGN KEY (manager_id) REFERENCES employee (id)\n);\n</code></pre> about DDL(https://zhuanlan.zhihu.com/p/391552199) <p>SQL\u7a0b\u5e8f\u8bed\u8a00\u6709\u56db\u79cd\u7c7b\u578b\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u57fa\u672c\u64cd\u4f5c\u90fd\u5c5e\u4e8e\u8fd9\u56db\u7c7b\uff0c\u5b83\u4eec\u5206\u522b\u4e3a\uff1b\u6570\u636e\u5b9a\u4e49\u8bed\u8a00(DDL)\u3001\u6570\u636e\u67e5\u8be2\u8bed\u8a00\uff08DQL\uff09\u3001\u6570\u636e\u64cd\u7eb5\u8bed\u8a00\uff08DML\uff09\u3001\u6570\u636e\u63a7\u5236\u8bed\u8a00\uff08DCL\uff09\u3002</p> <ol> <li>DDL \u5168\u79f0\u662f Data Definition Language\uff0c\u5373\u6570\u636e\u5b9a\u4e49\u8bed\u8a00\u3002</li> </ol> <p>\u6570\u636e\u5b9a\u4e49\u8bed\u8a00\u662f\u7531 SQL \u8bed\u8a00\u96c6\u4e2d\u8d1f\u8d23\u6570\u636e\u7ed3\u6784\u5b9a\u4e49\u4e0e\u6570\u636e\u5e93\u5bf9\u8c61\u5b9a\u4e49\u7684\u8bed\u8a00\uff0c\u5e76\u4e14\u7531 <code>CREATE</code> \u3001<code>ALTER</code> \u3001<code>DROP</code> \u548c <code>TRUNCATE</code> \u56db\u4e2a\u8bed\u6cd5\u7ec4\u6210\u3002</p> <ol> <li>DML \u5168\u79f0\u662f Data Manipulation Language\uff0c\u5373\u6570\u636e\u64cd\u7eb5\u8bed\u8a00\u3002</li> </ol> <p>\u4e3b\u8981\u7531 <code>insert</code>\u3001<code>update</code>\u3001<code>delete</code>\u8bed\u6cd5\u7ec4\u6210\u3002</p> <ol> <li>DQL \u5168\u79f0\u662f Data Query Language\uff0c\u5373\u6570\u636e\u67e5\u8be2\u8bed\u8a00\u3002</li> </ol> <p>\u4e3b\u8981\u7531 <code>select</code> \u8bed\u6cd5\u7ec4\u6210\u3002</p> <ol> <li>DCL \u5168\u79f0\u662f Data Control Language\uff0c\u5373\u6570\u636e\u63a7\u5236\u8bed\u8a00\u3002</li> </ol> <p>\u4e3b\u8981\u7531 <code>grant</code>\u3001<code>revoke</code>\u3001<code>show grants</code>\u8bed\u6cd5\u7ec4\u6210\u3002</p>"},{"location":"Computer_Science/DB/homework/#49","title":"4.9","text":"Question <p>SQL allows a foreign-key dependency to refer to the same relation, as in the following example:</p> <pre><code>create table manager\n    (employee_ID char(20),\n    manager_ID char(20),\n    primary key employee_ID,\n    foreign key (manager_ID) references manager(employee_ID) on delete cascade);\n</code></pre> <p>Here, employee_ID is a key to the table manager, meaning that each employee has at most one manager. The foreign-key clause requires that every manager also be an employee. Explain exactly what happens when a tuple in the relation manager is deleted.</p> my <p>When a tuple in the relation manager is deleted, the corresponding tuple of this manager in the manager, which means that the tuples of employees under this manager will also be deleted. And the same thing happens for the employees under the deleted employees that are deleted in the previous deletion. The deletion will reach end when all the employees under the manager are deleted.</p> answer <p>The tuples of all employees of the manager, at all levels, get deleted as well! This happens in a series of steps. The inital deletion will trigger deletion of all the tuples corresponding to direct employees of the manager. These deletions will in turn cause deletions of second-level employee tuples, and so on, till all direct and indirect employee tuples are deleted.</p>"},{"location":"Computer_Science/DB/homework/#412","title":"4.12","text":"Question <p>Suppose a user wants to grant select access on a relation to another user. Why should the user include (or not include) the clause granted by current role in the grant statement?</p> my <p>\u5305\u542b<code>granted by current role</code> \u65f6\u662f\u660e\u786e\u6743\u9650\u7684\u6388\u4e88\u8005\u662f\u5f53\u524d\u4f1a\u8bdd\u6fc0\u6d3b\u7684\u89d2\u8272\uff0c\u800c\u4e0d\u662f\u7528\u6237\u81ea\u8eab\uff0c\u6b64\u65f6\u540e\u7eed\u6743\u9650\u7684\u64a4\u9500\u6216\u4fee\u6539\u5c06\u57fa\u4e8e\u89d2\u8272\u7684\u6743\u9650\u94fe\u3002\u6b64\u65f6\u53ef\u786e\u4fdd\u6743\u9650\u4e0e\u89d2\u8272\u7ed1\u5b9a\u3002\u5f53\u89d2\u8272\u88ab\u64a4\u9500\u65f6\uff0c\u5176\u6388\u4e88\u7684\u6743\u9650\u624d\u4f1a\u81ea\u52a8\u5931\u6548\u3002\u800c\u4e0d\u5305\u542b\u65f6\u6743\u9650\u7684\u6388\u4e88\u8005\u88ab\u8bb0\u5f55\u4e3a\u6267\u884c\u547d\u4ee4\u7684\u7528\u6237\u672c\u8eab\uff0c\u6743\u9650\u94fe\u76f4\u63a5\u4f9d\u8d56\u7528\u6237\uff0c\u4e0e\u89d2\u8272\u65e0\u5173\uff0c\u66f4\u9002\u5408\u5728\u4e34\u65f6\u8c03\u8bd5\u6216\u4e00\u6b21\u6027\u8bbf\u95ee\u65f6\u4f7f\u7528\u3002</p> <p>When <code>granted by current role</code> is included, it indicates that the granting authority is the current session-activated role rather than the user themselves. At this point, the subsequent revocation or modification of permissions will be based on the permission chain of the role. This ensures that permissions are bound to the role. When the role is revoked, the permissions granted by it will automatically become invalid. When it is not included, the granting authority is recorded as the user who executed the command, and the permission chain directly depends on the user and is unrelated to the role. This is more suitable for temporary debugging or one-time access.</p> answer <p>Both cases give the same authorization at the time the statement is executed, but the long-term effects differ. If the grant is done based on the role, then the grant remains in effect even if the user who performed the grant leaves and that user's account is terminated. Whether that is a good or bad idea depends on the specific situation, but usually granting through a role is more consistent with a well-run enterprise.</p>"},{"location":"Computer_Science/DB/homework/#56","title":"5.6","text":"Question <p>Consider the bank database of Figure 5.21. Let us define a view branch_cust as follows:</p> <pre><code>create view branch_cust as\nselect branch_name, customer_name\nfrom depositor, account\nwhere depositor.account_number = account.account_number;\n</code></pre> <p>Suppose that the view is materialized; that is, the view is computed and stored. Write triggers to maintain the view, that is, to keep it up-to-date on insertions to depositor or account. It is not necessary to handle deletions or updates. Note that, for simplicity, we have not required the elimination of duplicates.</p> <p>Figure 5.21 Banking database</p> <p>branch (\\(\\underline{branch\\_name}\\), branch_city, assets)</p> <p>customer (\\(\\underline{customer\\_name}\\), customer_street, cust omer_city)</p> <p>loan (\\(\\underline{loan\\_number}\\), branch name, amount)</p> <p>borrower (\\(\\underline{customer\\_name}\\), \\(\\underline{loan\\_number}\\))</p> <p>account (\\(\\underline{account\\_number}\\), branch_name, balance)</p> <p>depositor (\\(\\underline{customer\\_name}\\), \\(\\underline{account\\_number}\\))</p> my <pre><code>CREATE TRIGGER depositor_trigger AFTER INSERT ON depositor\nreferencing new row as nrow\n\nFOR each ROW\nBEGIN\n    INSERT INTO branch_cust\n        SELECT branch_name, nrow.customer_name\n        FROM account\n        WHERE account.account_number = nrow.account_number;\nEND\n\nCREATE TRIGGER account_trigger AFTER INSERT ON account\nreferencing new row as nrow\n\nFOR each ROW\nBEGIN\n    INSERT INTO branch_cust\n        SELECT nrow.branch_name, customer_name\n        FROM depositor\n        WHERE depositor.account_number = nrow.account_number\nEND\n</code></pre> answer <pre><code>CREATE TRIGGER insert_into_branch_cust_via_depositor\nAFTER INSERT ON depositor\nREFERENCING NEW ROW AS inserted\nFOR EACH ROW\nINSERT INTO branch_cust\n    SELECT branch_name, inserted.customer_name\n    FROM account\n    WHERE inserted.account_number = account.account_number;\n\nCREATE TRIGGER insert_into_branch_cust_via_account\nAFTER INSERT ON account\nREFERENCING NEW ROW AS inserted\nFOR EACH STATEMENT\nINSERT INTO branch_cust\n    SELECT inserted.branch_name, customer_name\n    FROM depositor\n    WHERE depositor.account_number = inserted.account_number;\n</code></pre> Question <p>\u5982\u679c\u6539\u6210 \"require the elimination of duplicates\" \u5462\uff1f</p> answer <pre><code>CREATE TRIGGER depositor_insert_trigger\nAFTER INSERT ON depositor\nFOR EACH ROW\nBEGIN\n    -- \u63d2\u5165\u524d\u68c0\u67e5 (branch_name, customer_name) \u662f\u5426\u5df2\u5b58\u5728\n    INSERT INTO branch_cust (branch_name, customer_name)\n    SELECT a.branch_name, NEW.customer_name\n    FROM account a\n    WHERE a.account_number = NEW.account_number\n    AND NOT EXISTS (\n        SELECT 1\n        FROM branch_cust bc\n        WHERE bc.branch_name = a.branch_name\n            AND bc.customer_name = NEW.customer_name\n    );\nEND;\n\nCREATE TRIGGER account_insert_trigger\nAFTER INSERT ON account\nFOR EACH ROW\nBEGIN\n    -- \u63d2\u5165\u524d\u68c0\u67e5 (branch_name, customer_name) \u662f\u5426\u5df2\u5b58\u5728\n    INSERT INTO branch_cust (branch_name, customer_name)\n    SELECT NEW.branch_name, d.customer_name\n    FROM depositor d\n    WHERE d.account_number = NEW.account_number\n    AND NOT EXISTS (\n        SELECT 1\n        FROM branch_cust bc\n        WHERE bc.branch_name = NEW.branch_name\n            AND bc.customer_name = d.customer_name\n    );\nEND;\n</code></pre>"},{"location":"Computer_Science/DB/homework/#515","title":"5.15","text":"Question <p>Consider an employee database with two relations:</p> <p>employee (\\(\\underline{employee\\_name}\\), street, city)</p> <p>works (\\(\\underline{employee\\_name}\\), company_name, salary)</p> <p>where the primary keys are underlined. Write a function avg_salary that takes a company_name as an argument and finds the average salary of employees at that company. Then, write an SQL statement, using that function, to find companies whose employees earn a higher salary, on average, than the average salary at \"First Bank\".</p> my <pre><code>CREATE function avg_salary(name varchar(20))\nRETURNS double\n\nBEGIN\n    declare salary_avg double;\n    SELECT AVG(salary) INTO salary_avg\n    FROM works\n    WHERE works.company_name = name;\n    RETURN salary_avg;\nEND\n\nSELECT DISTINCT company_name\nFROM works\nWHERE avg_salary(works.company_name) &gt; avg_salary('First Bank');\n</code></pre> answer <pre><code>-- The following defines the sql function avg_salary.\n-- Takes a company name as an argument and finds the average salary of\n-- employees at that company.\nCREATE FUNCTION avg_salary(company_name VARCHAR(20))\n    RETURNS REAL\n    BEGIN\n    DECLARE retval REAL;\n        SELECT AVG(salary)\n        FROM works\n        WHERE works.company_name = company_name;\n    RETURN retval;\n    END;\n\nSELECT DISTINCT company_name\nFROM works\nWHERE avg_salary(company_name) &gt; avg_salary('First Bank');\n</code></pre>"},{"location":"Computer_Science/DB/homework/#519","title":"5.19","text":"Question <p>Suppose there are two relations r and s, such that the foreign key B of r references the primary key A of s. Describe how the trigger mechanism can be used to implement the on delete cascade option when a tuple is deleted from s.</p> my <p>When there is a row that is deleted from s, then the trigger can be used to delete all the r in B where r.B = deleted_row.A.</p> answer <p>When any row is deleted from from the relation s the trigger mechanism is supposed to take the following action: delete all rows from the relation r that reference the deleted row from the relation s.</p>"},{"location":"Computer_Science/DB/homework/#_5","title":"\u7b2c\u4e94\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#61","title":"6.1","text":"Question <p>Construct an E-R diagram for a car insurance company whose customers own one or more cars each. Each car has associated with it zero to any number of recorded accidents. Each insurance policy covers one or more cars and has one or more premium payments associated with it. Each payment is for a particular period of time, and has an associated due date, and the date when the payment was received.</p> my <p>\u4e00\u4e2a\u4e8b\u6545\u5bf9\u5e94\u7684\u4e0d\u6b62\u4e00\u8f86\u8f66\u3002</p> <p></p> answer <p></p>"},{"location":"Computer_Science/DB/homework/#62","title":"6.2","text":"Question <p>Consider a database that includes the entity sets student, course, and section from the university schema and that additionally records the marks that students receive in different exams of different sections.</p> <p>a. Construct an E-R diagram that models exams as entities and uses a ternary relationship as part of the design.</p> <p>b. Construct an alternative E-R diagram that uses only a binary relationship between student and section. Make sure that only one relationship exists between a particular student and section pair, yet you can represent the marks that a student gets in different exams.</p> my <p>a. </p> <p>b. </p> answer <p>a. </p> <p>b. </p>"},{"location":"Computer_Science/DB/homework/#621","title":"6.21","text":"Question <p>Consider the E-R diagram in Figure 6.30, which models an online bookstore.</p> <p>a. Suppose the bookstore adds Blu-ray discs and downloadable video to its collection. The same item may be present in one or both formats, with differing prices. Draw the part of the E-R diagram that models this addition, showing just the parts related to video.</p> <p>b. Now extend the full E-R diagram to model the case where a shopping basket may contain any combination of books, Blu-ray discs, or downloadable video.</p> <p></p> my <p>a. </p> <p>b. </p> answer <p>a. </p> <p>Note that <code>Blu_ray_discs</code> and <code>downloadable_videos</code> are weak entities while <code>video_in_bluray</code> and <code>video_on_net</code> are the identifying relationships sets. <code>video</code> is the identifying entity set and owns both of the weak entities.</p> <p>b. </p>"},{"location":"Computer_Science/DB/homework/#622","title":"6.22","text":"Question <p>Design a database for an automobile company to provide to its dealers to assist them in maintaining customer records and dealer inventory and to assist sales staff in ordering cars.</p> <p>Each vehicle is identified by a vehicle identification number (VIN). Each individual vehicle is a particular model of a particular brand offered by the company (e.g., the XF is a model of the car brand Jaguar of Tata Motors). Each model can be offered with a variety of options, but an individual car may have only some (or none) of the available options. The database needs to store information about models, brands, and options, as well as information about individual dealers, customers, and cars.</p> <p>Your design should include an E-R diagram, a set of relational schemas, and a list of constraints, including primary-key and foreign-key constraints.</p> my <p></p> <p>car(\\(\\underline{VIN}\\), choice_id, )</p> <p>choice(\\(\\underline{choice\\_id}\\), model, brand, options)</p> <p>dealer(\\(\\underline{dealer\\_id}\\), name, address)</p> <p>customer(\\(\\underline{customer\\_id}\\), name, address)</p> <p>car_choice(\\(\\underline{VIN}\\), choice_id)</p> <p>dealer_inventory(\\(\\underline{VIN}\\), dealer_id)</p> <p>sales(\\(\\underline{VIN}\\), $\\underline{customer_id}, $\\underline{dealer_id})</p> answer <p></p> <p>The above figure displays the E-R diagram of the database for the automobile company. The attribute <code>options</code> of the entity set <code>car_type</code> is a composite attribute. The ternary relationship set <code>sales</code> represents a single trasaction or a sale of a car. A <code>dealer</code> may have never sold a car or have sold numerous cars. A <code>customer</code> may have never bought a car or have bought numerous cars. But a particular car has either been sold or in stock. This constraints are represented as mapping cardinalities in the diagram.</p> <p>When we change the diagram to a relational schema we get the following:</p> <p>car_type(\\(\\underline{car\\_type\\_id}\\), model, brand, color, electric_or_gas, self_driving_or_not,solar_panel_on_roof)</p> <p>car(\\(\\underline{VIN}\\), car_type_id, dealer_id)</p> <p>customer(\\(\\underline{customer\\_id}\\), name, phone_number, address)</p> <p>dealer(\\(\\underline{dealer\\_id}\\), name, phone_number, address)</p> <p>sale(\\(\\underline{VIN}\\), \\(\\underline{customer\\_id}\\), \\(\\underline{dealer\\_id}\\), amount, timestamp)</p> <p>The attributes <code>car_type_id</code> and <code>dealer_id</code> in the relation <code>car</code> are foreign-keys referencing <code>car_type</code> and <code>dealer</code> relations respectively. The <code>sale</code> relation has <code>VIN</code>, <code>customer_id</code> and <code>dealer_id</code> as foreign-keys referencing the relations <code>car_type</code>, <code>customer</code> and <code>dealer</code> respectively.</p>"},{"location":"Computer_Science/DB/homework/#524","title":"5.24","text":"Question <p>Consider the relation, r, shown in Figure 5.22. Give the result of the following query:</p> <pre><code>select building, room_number, time_slot_id, count(*)\nfrom r\ngroup by rollup (building, room_number, time_slot_id)\n</code></pre> <p></p> my <p>\u8be5 SQL \u67e5\u8be2\u4f7f\u7528\u4e86 <code>GROUP BY ROLLUP</code> \u6765\u751f\u6210\u5206\u5c42\u6b21\u7684\u805a\u5408\u7ed3\u679c\uff0c\u4ece\u6700\u7ec6\u7c92\u5ea6\u5230\u603b\u8ba1\u9010\u7ea7\u6c47\u603b\u3002</p> <ol> <li>\u6309\u6240\u6709\u4e09\u5217\u5206\u7ec4\uff1a\u7edf\u8ba1\u6bcf\u4e2a building \u3001room_number \u548ctime_slot_id \u7ec4\u5408\u7684\u8bb0\u5f55\u6570\u3002</li> <li>\u6309\u524d\u4e24\u5217\u5206\u7ec4\uff1a\u7edf\u8ba1\u6bcf\u4e2a building \u548c room_number \u7ec4\u5408\u7684\u603b\u8bb0\u5f55\u6570\u3002</li> <li>\u6309\u7b2c\u4e00\u5217\u5206\u7ec4\uff1a\u7edf\u8ba1\u6bcf\u4e2a building \u7684\u603b\u8bb0\u5f55\u6570\u3002</li> <li>\u603b\u8ba1\uff1a\u7edf\u8ba1\u6574\u4e2a\u8868\u7684\u8bb0\u5f55\u603b\u6570\u3002</li> </ol> building room_number time_slot_id count Garfield 359 A 1 Garfield 359 B 1 Garfield 359 NULL 2 Garfield NULL NULL 2 Saucon 651 A 1 Saucon 651 NULL 1 Saucon 550 C 1 Saucon 550 NULL 1 Saucon NULL NULL 2 Painter 705 D 1 Painter 705 NULL 1 Painter 403 D 1 Painter 403 NULL 1 Painter NULL NULL 2 NULL NULL NULL 6 answer <pre><code>university=# SELECT building, room_number,time_slot_id,COUNT(*)\nuniversity-# FROM r\nuniversity-# GROUP BY ROLLUP(building,room_number,time_slot_id);\nbuilding | room_number | time_slot_id | count \n----------+-------------+--------------+-------\n        |             |              |     6\nSaucon   | 651         | A            |     1\nGarfield | 359         | B            |     1\nPainter  | 705         | D            |     1\nSaucon   | 550         | C            |     1\nGarfield | 359         | A            |     1\nPainter  | 403         | D            |     1\nPainter  | 705         |              |     1\nSaucon   | 550         |              |     1\nSaucon   | 651         |              |     1\nPainter  | 403         |              |     1\nGarfield | 359         |              |     2\nSaucon   |             |              |     2\nGarfield |             |              |     2\nPainter  |             |              |     2\n(15 rows)\n\nuniversity=# \n</code></pre> <p>But the output of given above is not much readable. The following is a bit better.</p> <pre><code>SELECT \n    (\n        CASE \n            WHEN GROUPING(building) = 1 THEN '(all)'\n            ELSE building\n        END\n    ) AS building, \n    (\n        CASE \n            WHEN GROUPING(room_number) = 1 THEN '(all)'\n            ELSE room_number\n        END\n    ) AS room_number, \n    (\n        CASE \n            WHEN GROUPING(time_slot_id) = 1 THEN '(all)'\n            ELSE time_slot_id\n        END\n    ) AS time_slot_id, \n    COUNT(*)\nFROM r\nGROUP BY ROLLUP(building,room_number,time_slot_id)\nORDER BY (building,room_number,time_slot_id) NULLS LAST;\n</code></pre> <p>OUTPUT:</p> <pre><code> building | room_number | time_slot_id | count \n----------+-------------+--------------+-------\nGarfield | 359         | A            |     1\nGarfield | 359         | B            |     1\nGarfield | 359         | (all)        |     2\nGarfield | (all)       | (all)        |     2\nPainter  | 403         | D            |     1\nPainter  | 403         | (all)        |     1\nPainter  | 705         | D            |     1\nPainter  | 705         | (all)        |     1\nPainter  | (all)       | (all)        |     2\nSaucon   | 550         | C            |     1\nSaucon   | 550         | (all)        |     1\nSaucon   | 651         | A            |     1\nSaucon   | 651         | (all)        |     1\nSaucon   | (all)       | (all)        |     2\n(all)    | (all)       | (all)        |     6\n(15 rows)\n</code></pre> <p>That is more like it!</p> <p>Just in case you want to replicate the instance given at Figure 5.22 in your db.</p> <pre><code>CREATE TABLE r(\n    building VARCHAR(15),\n    room_number VARCHAR(7),\n    time_slot_id VARCHAR(4),\n    course_id VARCHAR(8),\n    sec_id   VARCHAR(8),\n    PRIMARY KEY (building,room_number,time_slot_id,course_id,sec_id)\n);\n\nINSERT INTO r VALUES \n    ('Garfield','359','A','BIO-101','1'),\n    ('Garfield','359','B','BIO-101','2'),\n    ('Saucon','651','A','CS-101','2'),\n    ('Saucon','550','C','CS-319','1'),\n    ('Painter','705','D','MU-199','1'),\n    ('Painter','403','D','FIN-201','1');\n</code></pre>"},{"location":"Computer_Science/DB/homework/#_6","title":"\u7b2c\u516d\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#71","title":"7.1","text":"Question <p>Suppose that we decompose the schema R = (A, B, C, D, E) into</p> <p>(A, B, C)</p> <p>(A, D, E).</p> <p>Show that this decomposition is a lossless decomposition if the following set F of functional dependencies holds:</p> <p>A \\(\\rightarrow\\) BC</p> <p>CD \\(\\rightarrow\\) E</p> <p>B \\(\\rightarrow\\) D</p> <p>E \\(\\rightarrow\\) A</p> my <p>\u65e0\u635f\u5206\u89e3\u9700\u8981\u4fdd\u8bc1\u4e86\u5206\u89e3\u540e\u7684\u5b50\u5173\u7cfb\u901a\u8fc7\u81ea\u7136\u8fde\u63a5\u80fd\u591f\u5b8c\u5168\u6062\u590d\u539f\u5173\u7cfb\uff0c\u65e2\u4e0d\u4f1a\u4e22\u5931\u539f\u59cb\u6570\u636e\uff0c\u4e5f\u4e0d\u4f1a\u5f15\u5165\u5197\u4f59\u6570\u636e\u3002</p> <p>\u5728\u5206\u89e3\u8fc7\u7a0b\u4e2d\uff0c\\(R1\\) \u548c \\(R2\\) \u7684\u516c\u5171\u5c5e\u6027\u662f\u8fde\u63a5\u64cd\u4f5c\u7684\u6865\u6881\u3002\u5982\u679c\u516c\u5171\u5c5e\u6027\u662f\u67d0\u4e2a\u5b50\u6a21\u5f0f\u7684Super Key\uff0c\u5219\u5b83\u80fd\u552f\u4e00\u6807\u8bc6\u8be5\u5b50\u6a21\u5f0f\u4e2d\u7684\u5176\u4ed6\u5c5e\u6027\u3002\u8fd9\u786e\u4fdd\u4e86\u8fde\u63a5\u64cd\u4f5c\u4e0d\u4f1a\u4ea7\u751f\u989d\u5916\u7684\u539f\u5173\u7cfb\u4e2d\u4e0d\u5b58\u5728\u7684\u5143\u7ec4\u3002</p> <p>\u6240\u4ee5\uff0c\u5f53\u5173\u7cfb\u6a21\u5f0f R \u5206\u89e3\u4e3a R1 \u548c R2 \u65f6\uff0c\u82e5\u6ee1\u8db3 \\(R1 \\cap R2 \\rightarrow R1\\) \u6216\u8005 \\(R1 \\cap R2 \\rightarrow R2\\) \uff0c\u5219\u5206\u89e3\u662f\u65e0\u635f\u7684\u3002</p> <p>\u5bf9\u4e8e\u4e0a\u8ff0\u95ee\u9898\u4e2d\u7684 R1 \u548c R2 \u6765\u8bf4\uff0c \\(R1 \\cap R2 = A\\)\uff0c\u800c \\(A \\rightarrow BC\\)\uff0c\u6240\u4ee5 \\(R1 \\cap R2 \\rightarrow R1\\)\uff0c\u6240\u4ee5\u5206\u89e3\u662f\u65e0\u635f\u7684\u3002</p> answer <p>A decomposition \\(\\{R_1, R_2\\}\\) is a lossless decomposition if \\(R_1 \\cap R_2 \\rightarrow R_1\\) or \\(R_1 \\cap R_2 \\rightarrow R_2\\). Let \\(R_1 = (A, B, C)\\) and \\(R_2 = (A, D, E)\\), and \\(R_1 \\cap R_2 = (A)\\). Since \\(A\\) is a candidate key, \\(R_1 \\cap R_2 \\rightarrow R_1\\).</p>"},{"location":"Computer_Science/DB/homework/#713","title":"7.13","text":"Question <p>Show that the decomposition in Exercise 7.1 is not a dependency-preserving decomposition.</p> my <p>\u82e5\u5173\u7cfb\u6a21\u5f0f R \u88ab\u5206\u89e3\u4e3a\u82e5\u5e72\u5b50\u6a21\u5f0f R1, R2, ..., Rn\uff0c\u4e14\u539f\u51fd\u6570\u4f9d\u8d56\u96c6 F \u4e2d\u7684\u6240\u6709\u4f9d\u8d56\u53ef\u4ee5\u901a\u8fc7\u5b50\u6a21\u5f0f\u7684\u4f9d\u8d56\u96c6\u903b\u8f91\u63a8\u5bfc\u51fa\u6765\uff0c\u5219\u79f0\u8be5\u5206\u89e3\u662f\u4f9d\u8d56\u4fdd\u6301\u7684\u3002</p> <p>\u9898\u76ee\u4e2d R = (A, B, C, D, E)\uff0c\u5206\u89e3\u4e3a R1 = (A, B, C) \u548c R2 = (A, D, E)\u3002\u539f\u51fd\u6570\u4f9d\u8d56\u96c6 F = {A \\(\\rightarrow\\) BC, CD \\(\\rightarrow\\) E, B \\(\\rightarrow\\) D, E \\(\\rightarrow\\) A}\uff0c\u5b50\u6a21\u5f0f R1 \u7684\u51fd\u6570\u4f9d\u8d56\u96c6 F1 = {A \\(\\rightarrow\\) BC}\uff0c\u5b50\u6a21\u5f0f R2 \u7684\u51fd\u6570\u4f9d\u8d56\u96c6 F2 = {E \\(\\rightarrow\\) A}\u3002</p> <p>\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u539f\u51fd\u6570\u4f9d\u8d56\u96c6\u4e2d\u7684\u4f9d\u8d56 CD \\(\\rightarrow\\) E \u4ee5\u53ca B \\(\\rightarrow\\) D \u90fd\u4e0d\u80fd\u901a\u8fc7\u5b50\u6a21\u5f0f\u7684\u4f9d\u8d56\u96c6\u903b\u8f91\u63a8\u5bfc\u51fa\u6765\u3002\u56e0\u4e3a C \u548c D \u672a\u540c\u65f6\u5728\u4efb\u4e00\u5b50\u6a21\u5f0f\u4e2d\u51fa\u73b0\uff0c\u4e14\u65e0\u76f8\u5173\u4f9d\u8d56\uff0c\u5e76\u4e14 B \u548c D \u5206\u5e03\u5728\u4e0d\u540c\u7684\u5b50\u6a21\u5f0f\u4e2d\uff0c\u4e14\u65e0\u95f4\u63a5\u63a8\u5bfc\u8def\u5f84\u3002\u6240\u4ee5\u8be5\u5206\u89e3\u4e0d\u662f\u4f9d\u8d56\u4fdd\u6301\u7684\u3002</p> answer <p>There are several functional dependencies that are not preserved. We discuss one example here. The dependency \\(B \\rightarrow D\\) is not preserved. \\(F_1\\) , the restriction of \\(F\\) to \\((A, B, C)\\) , is \\(A \\rightarrow ABC\\) , \\(A \\rightarrow AB\\) , \\(A \\rightarrow AC\\) , \\(A \\rightarrow BC\\) , \\(A \\rightarrow B\\) , \\(A \\rightarrow C\\) , \\(A \\rightarrow A\\) , \\(B \\rightarrow B\\) , \\(C \\rightarrow C\\) , \\(AB \\rightarrow AC\\) , \\(AB \\rightarrow AB\\) . \\(F_2\\) , the restriction of \\(F\\) to \\((A, D, E)\\) , is \\(A \\rightarrow ADE\\) , \\(A \\rightarrow AD\\) , \\(A \\rightarrow AE\\) , \\(A \\rightarrow DE\\) , \\(A \\rightarrow A\\) , \\(A \\rightarrow D\\) , \\(A \\rightarrow E\\) , \\(D \\rightarrow D, E (\\text{same as } A), AD, AE, DE, ADE (\\text{same as } A)\\) . </p> <p>\\((F_1 \\cup F_2)^+\\) is easily seen not to contain \\(B \\rightarrow D\\) since the only FD in \\(F_1 \\cup F_2\\) with \\(B\\) as the left side is \\(B \\rightarrow B\\) , a trivial FD. Thus \\(B \\rightarrow D\\) is not preserved.</p> <p>A simpler argument is as follows: \\(F_1\\) contains no dependencies with \\(D\\) on the right side of the arrow. \\(F_2\\) contains no dependencies with \\(B\\) on the left side of the arrow. Therefore for \\(B \\rightarrow D\\) to be preserved there must be a functional dependency \\(B \\rightarrow \\alpha\\) in \\(F_1^+\\) and \\(\\alpha \\rightarrow D\\) in \\(F_2^+\\) (so \\(B \\rightarrow D\\) would follow by transitivity). Since the intersection of the two schemas is \\(A\\) , \\(\\alpha = A\\) . Observe that \\(B \\rightarrow A\\) is not in \\(F_1^+\\) since \\(B^+ = BD\\) .</p>"},{"location":"Computer_Science/DB/homework/#721","title":"7.21","text":"Question <p>Give a lossless decomposition into BCNF of schema R of Exercise 7.1.</p> my <ol> <li>\u5224\u65ad candidate key\uff0c \u901a\u8fc7\u8ba1\u7b97 Closure \u6765\u5206\u6790\uff1a  </li> </ol> <ul> <li>\\(E \\rightarrow A \\rightarrow BC\\)\uff0c\u56e0\u6b64 \\(E\\) \u53ef\u4ee5\u63a8\u5bfc\u51fa \\(A, B, C\\) \uff0c\u800c \\(B \\rightarrow D\\) \uff0c\u56e0\u6b64 \\(E\\) \u7684\u95ed\u5305\u4e3a \\({A, B, C, D, E}\\) \uff0c\u5373 \\(E\\) \u662f\u5019\u9009\u952e\u3002  </li> <li>\u540c\u7406\uff0c\\(CD \\rightarrow E\\)\uff0c\u800c \\(CD\\) \u7684\u95ed\u5305\u4e5f\u8986\u76d6\u6240\u6709\u5c5e\u6027\uff0c\u56e0\u6b64 \\(CD\\) \u4e5f\u662f\u5019\u9009\u952e\u3002</li> <li>\u540c\u7406\u53ef\u4ee5\u5f97\u51fa \\(A\\) \u662f\u5019\u9009\u952e\u3002</li> </ul> <ol> <li>\u68c0\u67e5\u8fdd\u53cd BCNF \u7684\u51fd\u6570\u4f9d\u8d56:</li> </ol> <ul> <li>\\(B \\rightarrow D\\) \u90fd\u8fdd\u53cd BCNF \u3002   </li> </ul> <ol> <li>\u5206\u89e3\uff1a</li> </ol> <ul> <li>\u7531 \\(B \\rightarrow D\\) \u5206\u89e3 R\uff0c\u5f97\u5230 \\(R_1 = (A, B, C, E)\\) \u548c \\(R_2 = (B, D)\\) \u3002</li> <li>\u6b64\u65f6 \\(F_1 = \\{A \\rightarrow BC, E \\rightarrow A\\}\\) \uff0c \\(F_2 = \\{B \\rightarrow D\\}\\) \u3002</li> <li>\u9a8c\u8bc1\u4e3a\u65e0\u635f\u5206\u89e3\u3002</li> </ul> <ol> <li>\u6240\u4ee5\u5f97\u51fa\u7b54\u6848\uff1a\\(\\{(A, B, C, E), (B, D)\\}\\)</li> </ol> answer <p>One possible decomposition: \\(\\{(A, B, C, E), (B, D)\\}\\)</p>"},{"location":"Computer_Science/DB/homework/#722","title":"7.22","text":"Question <p>Give a lossless, dependency-preserving decomposition into 3NF of schema R of Exercise 7.1.</p> my <ol> <li> <p>\u901a\u8fc7\u95ed\u5305\u8ba1\u7b97\u627e\u5230 candidate key \uff1a\u7531\u4e0a\u4e00\u9898\u7684\u5206\u6790\u53ef\u4ee5\u77e5\u9053 candidate key \u4e3a \\(E, CD, A\\) \u3002</p> </li> <li> <p>\u6700\u5c0f\u51fd\u6570\u4f9d\u8d56\u96c6: \u539f\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u5df2\u662f\u6700\u5c0f\u8986\u76d6\uff1a  </p> </li> <li> <p>\u4e3a\u6bcf\u4e2a\u51fd\u6570\u4f9d\u8d56\u521b\u5efa\u5b50\u6a21\u5f0f\uff1a</p> <ul> <li>\\(A \\rightarrow BC \\rightarrow\\) \u5b50\u6a21\u5f0f R1(A, B, C)  </li> <li>\\(CD \\rightarrow E \\rightarrow\\) \u5b50\u6a21\u5f0f R2(C, D, E)</li> <li>\\(B \\rightarrow D \\rightarrow\\) \u5b50\u6a21\u5f0f R3(B, D)</li> <li>\\(E \\rightarrow A \\rightarrow\\) \u5b50\u6a21\u5f0f R4(E, A)</li> </ul> </li> <li> <p>\u4e3a\u786e\u4fdd\u65e0\u635f\u6027\uff0c\u5c06\u5305\u542b candidate key \u7684\u5b50\u6a21\u5f0f\u4e0e\u5176\u4ed6\u5b50\u6a21\u5f0f\u5408\u5e76:</p> </li> </ol> <ul> <li>\u5c06 R2(C, D, E) \u4e0e R4(E, A) \u5408\u5e76\u4e3a R2(C, D, E, A) \u3002</li> </ul> <ol> <li>\u6700\u7ec8\u5206\u89e3\u7ed3\u679c\uff1a\\(\\{(A, B, C), (C, D, E, A), (B, D)\\}\\) \uff0c\u7ecf\u9a8c\u8bc1\u662f\u65e0\u635f\u5206\u89e3\u4e14\u4f9d\u8d56\u4fdd\u6301\u7684\u3002</li> </ol> \u5982\u4f55\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\uff1f <ol> <li>\u786e\u5b9a\u5019\u9009\u952e\uff1a\u901a\u8fc7\u95ed\u5305\u8ba1\u7b97\u627e\u5230\u6240\u6709\u5019\u9009\u952e\u3002  </li> <li>\u6700\u5c0f\u5316\u4f9d\u8d56\u96c6\uff1a\u6d88\u9664\u5197\u4f59\u4f9d\u8d56\u548c\u5197\u4f59\u5c5e\u6027\u3002  </li> <li>\u5408\u6210\u5b50\u6a21\u5f0f\uff1a\u4e3a\u6bcf\u4e2a\u6700\u5c0f\u4f9d\u8d56\u521b\u5efa\u5b50\u6a21\u5f0f\u3002  </li> <li>\u5408\u5e76\u5019\u9009\u952e\u5b50\u6a21\u5f0f\uff1a\u786e\u4fdd\u81f3\u5c11\u4e00\u4e2a\u5b50\u6a21\u5f0f\u5305\u542b\u5019\u9009\u952e\u3002  </li> <li>\u9a8c\u8bc1\u65e0\u635f\u6027\u548c\u4f9d\u8d56\u4fdd\u6301\uff1a\u901a\u8fc7 Chase \u7b97\u6cd5\u548c\u4f9d\u8d56\u6295\u5f71\u68c0\u67e5\u3002  </li> </ol> answer <p>Also don't forget that \\(F = F_c\\)</p> \\[R_1 = \\{A, B, C \\} \\ R_2 = \\{C, D, E \\} \\ R_3 = \\{B, D \\} \\ R_4 = \\{E, A \\}\\]"},{"location":"Computer_Science/DB/homework/#729","title":"7.29","text":"Question <p>Show that the following decomposition of the schema R of Exercise 7.1 is not a lossless decomposition:</p> <p>(A, B, C)</p> <p>(C, D, E).</p> <p>Hint: Give an example of a relation r(R) such that \\(\\Pi_{A, B, C}(r) \\bowtie \\Pi_{C, D, E}(r) \\neq r\\).</p> my <p>\u4f8b\u5982\u5bf9\u4e8e\u4ee5\u4e0b\u7684 r(R) \u6765\u8bf4</p> A B C D E 1 2 3 4 5 6 7 3 8 9 <p>\u6b64\u65f6\uff0c\\(\\Pi_{A, B, C}(r)\\) \u662f</p> A B C 1 2 3 6 7 3 <p>\u800c \\(\\Pi_{C, D, E}(r)\\) \u662f</p> C D E 3 4 5 3 8 9 <p>\u6b64\u65f6\uff0c\\(\\Pi_{A, B, C}(r) \\bowtie \\Pi_{C, D, E}(r)\\) \u662f</p> A B C D E 1 2 3 4 5 6 7 3 8 9 1 2 3 8 9 6 7 3 4 5 <p>\u663e\u7136\uff0c\\(\\Pi_{A, B, C}(r) \\bowtie \\Pi_{C, D, E}(r) \\neq r\\)\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5206\u89e3\u4e0d\u662f\u65e0\u635f\u7684\u3002</p> answer <p>Take the following instance of \\(r(R)\\) :</p> A B C D E 1 6 5 7 3 2 8 5 9 4 <p>Then \\(\\Pi_{A, B, C}(r)\\) is :</p> A B C 1 6 5 2 8 5 <p>\\(\\Pi_{C, D, E}(r)\\) is :</p> C D E 5 7 3 5 9 4 <p>And their natural join \\(\\Pi_{A, B, C}(r) \\bowtie \\Pi_{C, D, E}(r)\\) is :</p> A B C D E 1 6 5 7 3 1 6 5 9 4 2 8 5 7 3 2 8 5 9 4 <p>Thus, the decomposition is a lossy decomposition.</p>"},{"location":"Computer_Science/DB/homework/#_7","title":"\u7b2c\u4e03\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#1213","title":"12.13","text":"Question <p>Suppose you have data that should not be lost on disk failure, and the application is write-intensive. How would you store the data?</p> my <p>\u53ef\u4ee5\u7ed3\u5408 RAID 1 \u548c RAID 0\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u901a\u8fc7\u5e76\u884c\u5199\u5165\u591a\u5757\u78c1\u76d8\u6765\u63d0\u5347\u5199\u5165\u901f\u5ea6\uff0c\u53c8\u53ef\u4ee5\u901a\u8fc7\u955c\u50cf\u4fdd\u8bc1\u6570\u636e\u5197\u4f59\u3002\u5982\u679c\u5355\u5757\u78c1\u76d8\u6545\u969c\uff0c\u955c\u50cf\u76d8\u53ef\u7acb\u5373\u63a5\u7ba1\uff0c\u907f\u514d\u6570\u636e\u4e22\u5931\u3002</p> answer <p>I would use RAID level 1 (Mirroring disks). This is because RAID level 1 offers the best write performance, and data would not be lost on disk failure since we have a mirror disk for each disk in the array.</p>"},{"location":"Computer_Science/DB/homework/#1311","title":"13.11","text":"Question <p>List two advantages and two disadvantages of each of the following strategies for storing a relational database:</p> <p>a. Store each relation in one file.</p> <p>b. Store multiple relations (perhaps even the entire database) in one file.</p> my <p>a. </p> <p>\u4f18\u70b9\uff1a  </p> <ol> <li> <p>\u6bcf\u4e2a\u8868\u5bf9\u5e94\u72ec\u7acb\u6587\u4ef6\uff0c\u4fbf\u4e8e\u76f4\u63a5\u5b9a\u4f4d\u548c\u64cd\u4f5c\uff0c\u8fd9\u6837\u7ed3\u6784\u66f4\u6e05\u6670\uff0c\u6613\u4e8e\u7ba1\u7406\u3002</p> </li> <li> <p>\u5355\u8868\u67e5\u8be2\u65f6\uff0c\u4ec5\u9700\u8bfb\u53d6\u5355\u4e2a\u6587\u4ef6\uff0c\u51cf\u5c11I/O\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u80fd\u591f\u505a\u5230\u9488\u5bf9\u7279\u5b9a\u8868\u7684\u8bbf\u95ee\u6a21\u5f0f\u4f18\u5316\u6587\u4ef6\u5b58\u50a8\u7ed3\u6784\uff0c\u53ef\u4ee5\u4f18\u5316\u67e5\u8be2\u6027\u80fd\u3002 </p> </li> </ol> <p>\u7f3a\u70b9\uff1a</p> <ol> <li> <p>\u82e5\u6570\u636e\u5e93\u5305\u542b\u5927\u91cf\u8868\uff0c\u53ef\u80fd\u8d85\u51fa\u6587\u4ef6\u7cfb\u7edf\u5bf9\u540c\u65f6\u6253\u5f00\u6587\u4ef6\u6570\u7684\u9650\u5236\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f71\u54cd\u5e76\u53d1\u6027\u80fd\u3002\u540c\u65f6\u7ba1\u7406\u6210\u767e\u4e0a\u5343\u4e2a\u6587\u4ef6\u4f1a\u589e\u52a0\u8fd0\u7ef4\u590d\u6742\u5ea6\u3002  </p> </li> <li> <p>\u5f53\u6d89\u53ca\u591a\u8868\u5173\u8054\uff08\u5982JOIN\uff09\u65f6\uff0c\u9700\u9891\u7e41\u5207\u6362\u548c\u8bfb\u53d6\u591a\u4e2a\u6587\u4ef6\uff0c\u589e\u52a0\u78c1\u76d8\u5bfb\u5740\u65f6\u95f4\uff0c\u4f7f\u5f97\u8de8\u8868\u64cd\u4f5c\u6548\u7387\u4f4e\u4e0b\u3002</p> </li> </ol> <p>b. </p> <p>\u4f18\u70b9\uff1a</p> <ol> <li> <p>\u6240\u6709\u8868\u96c6\u4e2d\u5b58\u50a8\uff0c\u907f\u514d\u6587\u4ef6\u3001\u8868\u7b49\u6570\u91cf\u7206\u70b8\uff0c\u53ef\u4ee5\u51cf\u5c11\u6587\u4ef6\u7ba1\u7406\u5f00\u9500\u3002</p> </li> <li> <p>\u8de8\u8868\u4e8b\u52a1\u53ea\u9700\u5199\u5165\u5355\u4e2a\u6587\u4ef6\uff0c\u51cf\u5c11\u591a\u6587\u4ef6\u540c\u6b65\u7684\u5f00\u9500\u3002</p> </li> </ol> <p>\u7f3a\u70b9\uff1a</p> <ol> <li> <p>\u6570\u636e\u635f\u574f\u65f6\uff0c\u6574\u4e2a\u6587\u4ef6\u53ef\u80fd\u4e0d\u53ef\u7528\uff0c\u6062\u590d\u96be\u5ea6\u5927\u3002  </p> </li> <li> <p>\u5728\u9700\u8981\u67e5\u8be2\u65f6\uff0c\u67e5\u8be2\u6027\u80fd\u53ef\u80fd\u4f1a\u8f83\u5dee\uff0c\u56e0\u4e3a\u5168\u8868\u626b\u63cf\u9700\u8bfb\u53d6\u6574\u4e2a\u5927\u6587\u4ef6\uff0c\u53ef\u80fd\u52a0\u8f7d\u65e0\u5173\u8868\u6570\u636e\uff0c\u6d6a\u8d39I/O\u5e26\u5bbd\u3002  </p> </li> </ol> about when to apply <ul> <li>\u9002\u5408\u7b56\u7565 (a)\uff1a  </li> <li>\u9700\u8981\u9891\u7e41\u5907\u4efd\u5355\u4e2a\u8868\uff08\u5982\u65e5\u5fd7\u8868\u5b9a\u671f\u5f52\u6863\uff09\u3002  </li> <li> <p>OLAP\u573a\u666f\u4e2d\u591a\u8868\u72ec\u7acb\u5206\u6790\uff08\u5982\u5355\u72ec\u7edf\u8ba1\u7528\u6237\u8868\u3001\u8ba2\u5355\u8868\uff09\u3002  </p> </li> <li> <p>\u9002\u5408\u7b56\u7565 (b)\uff1a  </p> </li> <li>\u5d4c\u5165\u5f0f\u6570\u636e\u5e93\uff08\u5982\u79fb\u52a8\u7aef\u5e94\u7528\u4f7f\u7528SQLite\uff09\u3002  </li> <li>\u4e8b\u52a1\u5bc6\u96c6\u578bOLTP\u7cfb\u7edf\uff0c\u9700\u4fdd\u8bc1\u8de8\u8868\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff08\u5982\u94f6\u884c\u8f6c\u8d26\u6d89\u53ca\u591a\u4e2a\u8868\u66f4\u65b0\uff09\u3002  </li> </ul> <p>\u603b\u7ed3</p> <ul> <li>\u7b56\u7565 (a) \u727a\u7272\u7ba1\u7406\u4fbf\u5229\u6027\u6362\u53d6\u7075\u6d3b\u6027\u548c\u9694\u79bb\u6027\uff0c\u7b56\u7565 (b) \u5219\u76f8\u53cd\u3002  </li> <li>\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u73b0\u4ee3\u6570\u636e\u5e93\uff08\u5982MySQL\u3001PostgreSQL\uff09\u5e38\u91c7\u7528\u6df7\u5408\u6a21\u5f0f\uff1a  </li> <li>\u6838\u5fc3\u8868\u5355\u72ec\u5b58\u50a8\uff0c\u9644\u5c5e\u8868\uff08\u5982\u7d22\u5f15\u3001\u5143\u6570\u636e\uff09\u5408\u5e76\u5b58\u50a8\u3002  </li> <li>\u5229\u7528\u8868\u7a7a\u95f4\uff08Tablespace\uff09\u673a\u5236\u5e73\u8861\u6587\u4ef6\u7c92\u5ea6\u548c\u6027\u80fd\u9700\u6c42\u3002</li> </ul> answer <p>a. </p> Advantage Disadvantage Since each relation is stored in its own file, it is easier to put the relations that are frequently used on SSDs, while the relations that are used rarely can be stored on magnetic disk drives. Optimizations such as Multitable clustering file organization cannot be performed since each relation is stored in its own file. Assuming the blocks of a given file are stored nearby on the platters of the hard disk, reading a relation from hard disk to memory is faster since the blocks are closer, reducing movement of the disk arm. Every access to a relation must first go through the Data Dictionary/System Catalog to get the corresponding file's path of the relation. Once the path is found, opening the file (using open() syscall for example) incurs overhead. <p>b. </p> Advantage Disadvantage Optimizations such as Multitable clustering file organization can be performed if needed If the database stores all relations in a single file, the Data Dictionary may note the blocks containing records of each relation in a data structure such as a linked list. However, doing so deprive us from the benefits of sequential reading from the hard drive to main memory. Assuming that the entire database is stored in one file (like sqlite), we only have to call the open() syscall once Since all of the relations of the database are stored in the same file, optimizations like putting some relations on SSDs and others on magnetic disks are not possible (or hard to do)."},{"location":"Computer_Science/DB/homework/#_8","title":"\u7b2c\u516b\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#143ac","title":"14.3[a][c]","text":"Question <p>Construct a B+-tree for the following set of key values:</p> <p>(2, 3, 5, 7, 11, 17, 19, 23, 29, 31)</p> <p>Assume that the tree is initially empty and values are added in ascending order. Construct B+-trees for the cases where the number of pointers that will fit in one node is as follows:</p> <p>a. Four</p> <p>c. Eight</p> my <p>a. </p> <p></p> <p>c.</p> <p></p> answer <p>The following were generated by inserting values into the B+-tree in ascending order. A node (other than the root) was never allowed to have fewer than \\(\\lceil n / 2 \\rceil\\) values/pointers.</p> <p>a. </p> <p></p> <p>c. </p> <p></p>"},{"location":"Computer_Science/DB/homework/#144","title":"14.4","text":"Question <p>For each B+-tree of Exercise 14.3, show the form of the tree after each of the following series of operations:</p> <p>a. Insert 9.</p> <p>b. Insert 10.</p> <p>c. Insert 8.</p> <p>d. Delete 23.</p> <p>e. Delete 19.</p> my <p>For tree a:</p> <p>a. </p> <p></p> <p>b. </p> <p></p> <p>c. </p> <p></p> <p>d. </p> <p></p> <p>e.</p> <p></p> <p>For tree b:</p> <p>a.</p> <p></p> <p>b.</p> <p></p> <p>c.</p> <p></p> <p>d.</p> <p></p> <p>e.</p> <p></p> <p>For tree c:</p> <p>a.</p> <p></p> <p>b.</p> <p></p> <p>c.</p> <p></p> <p>d.</p> <p></p> <p>e.</p> <p></p> answer <p>For tree a:</p> <p>a. </p> <p></p> <p>b. </p> <p></p> <p>c. </p> <p></p> <p>d. </p> <p></p> <p>e.</p> <p></p> <p>For tree b:</p> <p>a.</p> <p></p> <p>b.</p> <p></p> <p>c.</p> <p></p> <p>d.</p> <p></p> <p>e.</p> <p></p> <p>For tree c:</p> <p>a.</p> <p></p> <p>b.</p> <p></p> <p>c.</p> <p></p> <p>d.</p> <p></p> <p>e.</p> <p></p>"},{"location":"Computer_Science/DB/homework/#1411","title":"14.11","text":"Question <p>In write-optimized trees such as the LSM tree or the stepped-merge index, entries in one level are merged into the next level only when the level is full. Suggest how this policy can be changed to improve read performance during periods when there are many reads but no updates.</p> my <ol> <li> <p>\u5728\u65e0\u5199\u5165\u7684\u8bfb\u53d6\u5bc6\u96c6\u671f\uff0c\u5373\u4f7f\u5f53\u524d\u5c42\u672a\u6ee1\uff0c\u4e5f\u4e3b\u52a8\u5c06\u4e0a\u5c42\u6570\u636e\u5408\u5e76\u5230\u4e0b\u5c42\u3002\u8fd9\u6837\u5c31\u80fd\u51cf\u5c11\u5c42\u7ea7\u6570\u91cf\u548c\u6570\u636e\u91cd\u53e0\uff0c\u964d\u4f4e\u8bfb\u53d6\u65f6\u9700\u8981\u8bbf\u95ee\u7684\u6587\u4ef6\u6570\u3002  </p> </li> <li> <p>\u6216\u8005\u5728\u8bfb\u53d6\u5bc6\u96c6\u671f\u4e34\u65f6\u8c03\u6574\u5c42\u7ea7\u7ed3\u6784\uff0c\u5c06\u591a\u4e2a\u5c0f\u6587\u4ef6\u5408\u5e76\u4e3a\u66f4\u5927\u7684\u6587\u4ef6\uff0c\u5e76\u76f4\u63a5\u4e0b\u6c89\u5230\u66f4\u6df1\u5c42\u7ea7\u3002\u51cf\u5c11\u540c\u4e00\u5c42\u7ea7\u5185\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u964d\u4f4e\u70b9\u67e5\u8be2\u65f6\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u5047\u9633\u6027\u6982\u7387\u548c\u8303\u56f4\u67e5\u8be2\u7684\u968f\u673aI/O\u3002</p> </li> <li> <p>\u5728\u7cfb\u7edf\u7a7a\u95f2\u6216\u4f4e\u8d1f\u8f7d\u65f6\uff0c\u63d0\u524d\u6267\u884c\u201c\u9884\u9632\u6027\u5408\u5e76\u201d\uff0c\u907f\u514d\u5728\u8bfb\u53d6\u9ad8\u5cf0\u65f6\u56e0\u5408\u5e76\u5360\u7528\u8d44\u6e90\u3002</p> </li> </ol> answer <p>If there have been no updates in a while, but there are a lot of index look ups on an index, then entries at one level, say i, can be merged into the next level, even if the level is not full. The benefit is that reads would then not have to look up indices at level i, reducing the cost of reads.</p>"},{"location":"Computer_Science/DB/homework/#2410","title":"24.10","text":"Question <p>The stepped merge variant of the LSM tree allows multiple trees per level. What are the tradeoffs in having more trees per level?</p> my <p>\u4f18\u70b9</p> <ol> <li> <p>\u6bcf\u6b21\u5408\u5e76\u64cd\u4f5c\u5904\u7406\u7684\u6570\u636e\u91cf\u66f4\u5c0f\uff0c\u51cf\u5c11\u5355\u6b21\u5408\u5e76\u7684\u5ef6\u8fdf\uff0c\u4f7f\u5199\u5165\u5ef6\u8fdf\u66f4\u5e73\u6ed1\uff0c\u907f\u514d\u5927\u5408\u5e76\u5bfc\u81f4\u7684\u6027\u80fd\u6296\u52a8\u3002  </p> </li> <li> <p>\u53ef\u6839\u636e\u6570\u636e\u7279\u5f81\u4f18\u5148\u5408\u5e76\u7279\u5b9a\u5b50\u6811\uff0c\u4f18\u5316\u7a7a\u95f4\u548c\u67e5\u8be2\u6548\u7387\u3002  </p> </li> <li> <p>\u5c0f\u89c4\u6a21\u5408\u5e76\u53ef\u66f4\u5feb\u6e05\u7406\u65e0\u6548\u6570\u636e\uff08\u5982\u5220\u9664\u6807\u8bb0\uff09\uff0c\u51cf\u5c11\u77ed\u671f\u7a7a\u95f4\u653e\u5927\u3002</p> </li> </ol> <p>\u7f3a\u70b9</p> <ol> <li> <p>\u4f1a\u9020\u6210\u66f4\u591aI/O\u5f00\u9500\uff0c\u8bfb\u53d6\u64cd\u4f5c\u9700\u68c0\u67e5\u591a\u4e2a\u6811\u7684\u7d22\u5f15\u548c\u5e03\u9686\u8fc7\u6ee4\u5668\uff0c\u589e\u52a0\u78c1\u76d8\u5bfb\u5740\u548cCPU\u5f00\u9500\uff0c\u5c24\u5176\u5f71\u54cd\u70b9\u67e5\u8be2\u548c\u8303\u56f4\u67e5\u8be2\u7684\u5ef6\u8fdf\u3002</p> </li> <li> <p>\u9700\u8981\u7ef4\u62a4\u66f4\u591a\u6811\u7684\u5143\u4fe1\u606f\uff0c\u589e\u52a0\u5185\u5b58\u6d88\u8017\u548c\u5b9e\u73b0\u590d\u6742\u6027\u3002\u540c\u65f6\u66f4\u591a\u6811\u610f\u5473\u7740\u6062\u590d\u65f6\u9700\u8981\u5904\u7406\u66f4\u591a\u6587\u4ef6\u72b6\u6001\uff0c\u53ef\u80fd\u5f71\u54cd\u53ef\u9760\u6027\u3002</p> </li> </ol> answer <p>\u9057\u61be\uff0c\u5e76\u672a\u627e\u5230\u5b98\u65b9\u7b54\u6848</p>"},{"location":"Computer_Science/DB/homework/#_9","title":"\u7b2c\u4e5d\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#152","title":"15.2","text":"Question <p>Consider the bank database of Figure 15.14, where the primary keys are underlined, and the following SQL query:</p> <pre><code>select T.branch_name\nfrom branch T, branch S\nwhere T.assets &gt; S.assets and S.branch_city = \"Brooklyn\"\n</code></pre> <p>Write an efficient relational-algebra expression that is equivalent to this query. Justify your choice.</p> <p></p> my \\[\\Pi_{T.branch_name}((\\Pi_{branch\\_name, assets}(\\rho_T(branch))) \\bowtie_{T.assets &gt; S.assets} (\\Pi_{assets}(\\sigma_{branch\\_city = 'Brooklyn'}(\\rho_S(branch)))))\\] <p>\u9996\u5148\u5bf9 <code>branch</code> \u8868\u8fdb\u884c\u91cd\u547d\u540d\u4e3a <code>S</code> \uff0c\u5e76\u5e94\u7528\u9009\u62e9\u6761\u4ef6 <code>\u03c3_{branch_city='Brooklyn'}</code> \uff0c\u4ec5\u4fdd\u7559\u90e8\u5206\u5206\u652f\u3002\u63a5\u7740\u6295\u5f71\u51fa <code>assets</code> \u5c5e\u6027\uff0c\u5927\u5e45\u51cf\u5c11\u6570\u636e\u91cf\u3002\u540c\u6837\uff0c\u5bf9 <code>branch</code> \u8868\u91cd\u547d\u540d\u4e3a <code>T</code> \u540e\uff0c\u4ec5\u6295\u5f71\u51fa <code>branch_name</code> \u548c <code>assets</code> \uff0c\u53ef\u4ee5\u907f\u514d\u5904\u7406\u65e0\u5173\u5c5e\u6027\u3002\u8fd9\u6837 <code>S</code> \u548c <code>T</code> \u7684\u89c4\u6a21\u88ab\u6700\u5c0f\u5316\u3002\u8fd9\u4f7f\u5f97\u540e\u7eed\u7684 <code>T.assets &gt; S.assets</code> \u8fde\u63a5\u64cd\u4f5c\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u91cf\u663e\u8457\u964d\u4f4e\uff0c\u63d0\u5347\u4e86\u6548\u7387\u3002</p> answer <p>Query:</p> \\[\\Pi_{T.branch\\_name} ( (\\Pi_{branch\\_name, assets}(\\rho_T(branch))) \\bowtie_{T.assets &gt; S.assets} (\\Pi_{assets} (\\sigma_{branch\\_city = 'Brooklyn'}(\\rho_S(branch)))))\\] <p>This expression performs the theta join on the smallest amount of data possible. It does this by restricting the right-hand side operand of the join to only those branches in Brooklyn and also eliminating the unneeded attributes from both the operands.</p>"},{"location":"Computer_Science/DB/homework/#153","title":"15.3","text":"Question <p>Let relations \\(r_1\\) (A, B, C) and \\(r_2\\) (C, D, E) have the following properties: \\(r_1\\) has 20,000 tuples, \\(r_2\\) has 45,000 tuples, 25 tuples of \\(r_1\\) fit on one block, and 30 tuples of \\(r_2\\) fit on one block. Estimate the number of block transfers and seeks required using each of the following join strategies for \\(r_1 \\bowtie r_2\\) :</p> <p>a. Nested-loop join.</p> <p>b. Block nested-loop join.</p> <p>c. Merge join.</p> <p>d. Hash join.</p> my <p>\u5bf9\u4e8e \\(r_1\\) \u9700\u8981 \\(800\\) blocks\uff0c\\(r_2\\) \u9700\u8981 \\(1500\\) blocks\u3002\u5047\u8bbe\u5185\u5b58\u4e00\u5171\u6709 \\(M\\) \u9875\u3002</p> <p>\u5982\u679c \\(M &gt; 800\\) \uff0c\u90a3\u4e48\u4e0a\u8ff0\u56db\u79cd\u7b56\u7565\u90fd\u53ea\u9700\u8981 800 + 1500 = 2300 \u6b21 transfer \u548c 2 \u6b21 seek\u3002</p> <p>\u800c\u5982\u679c \\(M &lt; 800\\) :</p> <p>a. \u4e24\u5c42\u5faa\u73af</p> <p>\u5982\u679c\u662f\u5916\u5c42 \\(r_1\\)\uff0c\u5185\u5c42 \\(r_2\\)</p> <p>transfer : 20,000 * 1500 + 800 = 30,000,800</p> <p>seek : 800 + 20,000 = 20,800</p> <p>\u5982\u679c\u662f\u5916\u5c42 \\(r_2\\)\uff0c\u5185\u5c42 \\(r_1\\)</p> <p>transfer : 45,000 * 800 + 1500 = 36,001,500</p> <p>seek : 1500 + 45,000 = 46,500</p> <p>b.</p> <p>\u5982\u679c\u5916\u5c42\u662f \\(r_1\\)\uff0c\u5185\u5c42\u662f \\(r_2\\)</p> <p>transfer : \\(\\lceil \\frac{800}{M-2} \\rceil * 1500 + 800\\)</p> <p>seek : \\(\\lceil \\frac{800}{M-2} \\rceil * 2\\)</p> <p>\u5982\u679c\u5916\u5c42\u662f \\(r_2\\)\uff0c\u5185\u5c42\u662f \\(r_1\\)</p> <p>transfer : \\(\\lceil \\frac{1500}{M-2} \\rceil * 800 + 1500\\)</p> <p>seek : \\(\\lceil \\frac{1500}{M-2} \\rceil * 2\\)</p> <p>c.</p> <p>transfer : \\(800 + 1500 = 2300\\)</p> <p>seek : \\(\\lceil \\frac{800}{x_r} \\rceil + \\lceil \\frac{1500}{x_s} \\rceil\\)</p> <p>with \\(x_r = \\sqrt{800} * \\frac{M}{\\sqrt{800} + \\sqrt{1500}}\\) and \\(x_s = \\sqrt{1500} * \\frac{M}{\\sqrt{800} + \\sqrt{1500}}\\)</p> <p>d.</p> <p>if \\(M &gt; \\frac{800}{M} + 1\\) does not need recursive partitioning\uff0c\u5047\u8bbe\u54c8\u5e0c\u8868\u7684\u957f\u5ea6\u4e3a \\(n_h\\)\uff0c\u90a3\u4e48</p> <p>transfer : 3 * (800 + 1500) + 4 * \\(n_h\\)</p> <p>seek : 2 * (\\(\\lceil \\frac{800}{b_b} \\rceil + \\lceil \\frac{1500}{b_b} \\rceil\\)) + 2 * \\(n_h\\)</p> <p>otherwise if recursive partitioning required</p> <p>transfer : 2(800 + 1500) * \\(\\lceil log_{\\lfloor \\frac{M}{b_b} \\rfloor - 1} (\\frac{800}{M}) \\rceil\\) + 800 + 1500</p> <p>seek : 2(\\(\\lceil \\frac{800}{b_b} \\rceil + \\lceil \\frac{1500}{b_b} \\rceil\\)) * \\(\\lceil log_{\\lfloor \\frac{M}{b_b} \\rfloor - 1} (\\frac{800}{M}) \\rceil\\)</p> answer <p>\\(r_1\\) needs \\(800\\) blocks, and \\(r_2\\) needs \\(1500\\) blocks. Let us assume \\(M\\) pages of memory. </p> <p>If \\(M &gt; 800\\), the join can easily be done in \\(1500 + 800\\) disk accesses, using even plain nested-loop join. So we consider only the case where \\(M \\leq 800\\) pages. </p> <p>a. </p> <p>If \\(r_1\\) is the outer relation, we need \\(20000 * 1500 + 800 = 30,000,800\\) disk accesses and \\(20000 + 800 = 20,800\\) disk seeks.</p> <p>If \\(r_2\\) is the outer relation, we need \\(45000 * 800 + 1500 = 36,001,500\\) disk accesses and $ 45000 + 1500 = 46,500$ disk seeks. </p> <p>b. </p> <p>If \\(r_1\\) is the outer relation, we need \\(\\lceil \\frac{800}{M-2} \\rceil * 1500 + 800\\) disk accesses and \\(2 * \\lceil \\frac{800}{M-2} \\rceil\\) disk seeks. </p> <p>If \\(r_2\\) is the outer relation, we need \\(\\lceil \\frac{1500}{M-2} \\rceil * 800 + 1500\\) disk accesses and \\(2 * \\lceil \\frac{1500}{M-2} \\rceil\\) disk seeks.  </p> <p>c. </p> <p>Assuming that \\(r_1\\) and \\(r_2\\) are not initially sorted on the join key and \\(b_b = 1\\), the total sorting cost inclusive of the output is </p> \\[B_s = 1500(2 \\lceil \\log_{M - 1} (1500/M) \\rceil + 2) + 800(2 \\lceil \\log_{M - 1} (800/M) \\rceil + 2)\\] <p>disk accesses. Assuming all tuples with the same value for the join attributes fit in memory, the total cost is \\(B_s + 1500 + 800\\) disk accesses. </p> <p>TODO: disk seek </p> <p>d. </p> <p>We assume no overflow occurs. Since \\(r_1\\) is smaller, we use it as the build relation and \\(r_2\\) as the probe relation. If \\(M &gt; 800/M\\), i.e., no need for recursive partitioning, then the cost is \\(3 (1500 + 800) = 6900\\) disk accesses, else the cost is </p> \\[2 (1500 + 800) \\lceil \\log_{M-1}(800) - 1 \\rceil + 1500 + 800\\] <p>disk accesses. </p> <p>TODO: disk seek </p>"},{"location":"Computer_Science/DB/homework/#156","title":"15.6","text":"Question <p>Consider the bank database of Figure 15.14, where the primary keys are underlined. Suppose that a B+-tree index on branch_city is available on relation branch, and that no other index is available. List different ways to handle the following selections that involve negation:</p> <p>a. \\(\\sigma_{\\neg (branch\\_city &lt; \"Brooklyn\")}(branch)\\)</p> <p>b. \\(\\sigma_{\\neg (branch\\_city = \"Brooklyn\")}(branch)\\)</p> <p>c. \\(\\sigma_{\\neg (branch\\_city &lt; \"Brooklyn\" \\lor assets &lt; 5000)}(branch)\\)</p> <p></p> my <p>a.  </p> <p>\u6761\u4ef6\u7b49\u4ef7\u4e8e\\(branch\\_city \\geq \"Brooklyn\"\\)</p> <p>\u76f4\u63a5\u5229\u7528 B+ \u6811\u7d22\u5f15\u5feb\u901f\u5b9a\u4f4d \\(branch\\_city = \"Brooklyn\"\\) \u7684\u5143\u7ec4\uff0c\u7531\u4e8e B+ \u6811\u662f\u53f6\u5b50\u8282\u70b9\u662f\u987a\u5e8f\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u5927\u4e8e\u7b49\u4e8e \"Brooklyn\" \u7684\u5143\u7ec4\u3002</p> <p>b. </p> <p>\u6761\u4ef6\u7b49\u4ef7\u4e8e \\(branch\\_city \\neq \"Brooklyn\"\\)</p> <p>\u901a\u8fc7 B+ \u6811\u7d22\u5f15\u67e5\u627e\u6240\u6709 \\(branch\\_city = \"Brooklyn\"\\) \u7684\u5143\u7ec4\uff0c\u8bb0\u5f55\u5176\u4f4d\u7f6e\u3002\u518d\u5728\u6309\u7167 B+ \u6811\u53f6\u5b50\u8282\u70b9\u5168\u8868\u987a\u5e8f\u626b\u63cf\u65f6\u8df3\u8fc7\u8fd9\u4e9b\u5143\u7ec4\uff0c\u8fd4\u56de\u5269\u4f59\u5143\u7ec4\u3002  </p> <p>c. </p> <p>\u6761\u4ef6\u7b49\u4ef7\u4e8e \\(branch\\_city \\geq \"Brooklyn\" \\ \\land \\ assets \\geq 5000\\)\u3002</p> <p>\u53ef\u4ee5\u53c2\u8003 a \u4e2d\u7684\u65b9\u6cd5\u4f7f\u7528\u7d22\u5f15\u5feb\u901f\u7b5b\u9009\u51fa \\(branch\\_city \\geq \"Brooklyn\"\\) \u7684\u5143\u7ec4\u3002\u518d\u5bf9\u7b5b\u9009\u540e\u7684\u5143\u7ec4\u9010\u6761\u68c0\u67e5 \\(assets \\geq 5000\\)\u3002  </p> answer <p>a. </p> <p>Use the index to locate the first tuple whose branch_city field has value \"Brooklyn\". From this tuple, follow the pointer chains till the end, retrieving all the tuples. </p> <p>b. </p> <p>For this query, the index serves no purpose. We can scan the file sequentially and select all tuples whose branch_city field is anything other than \"Brooklyn\". </p> <p>c. </p> <p>This query is equivalent to the query</p> \\[\\sigma_{(branch\\_city  \\geq \"Brooklyn\" \\land assets \\geq 5000)}(branch)\\] <p>Using the branch_city index, we can retrieve all tuples with branch_city value greater than or equal to \"Brooklyn\" by following the pointer chains from the first \"Brooklyn\" tuple. We also apply the additional criteria of \\(assets \\geq 5000\\) on every tuple. </p>"},{"location":"Computer_Science/DB/homework/#1520","title":"15.20","text":"Question <p>Estimate the number of block transfers and seeks required by your solution to Exercise 15.19 for \\(r_1 \\bowtie r_2\\), where \\(r_1\\) and \\(r_2\\) are as defined in Exercise 15.3.</p> <p>Question 15.19 Design a variant of the hybrid merge-join algorithm for the case where both relations are not physically sorted, but both have a sorted secondary index on the join attributes.</p> my <p>Answer to 15.19:</p> <p>\u95ee\u9898\u60c5\u5883\uff1a \u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u5173\u7cfb \\(r\\) \u548c \\(s\\)\u3002\u8fd9\u4e24\u4e2a\u5173\u7cfb\u4e2d\u7684\u6570\u636e\u5e76\u6ca1\u6709\u6309\u7167\u8fde\u63a5\u5c5e\u6027\u8fdb\u884c\u7269\u7406\u6392\u5e8f\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u5728\u8fde\u63a5\u5c5e\u6027\u4e0a\u90fd\u5efa\u6709\u6392\u5e8f\u7684\u4e8c\u7ea7\u7d22\u5f15\uff0c\u6bd4\u5982 B+ \u6811\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u904d\u5386\u8fd9\u4e9b\u7d22\u5f15\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u6309\u7167\u8fde\u63a5\u5c5e\u6027\u7684\u987a\u5e8f\u8bbf\u95ee\u5230\u5173\u7cfb \\(r\\) \u548c \\(s\\) \u4e2d\u5143\u7ec4\u7684\u5730\u5740\uff08\u6307\u5411\u5b9e\u9645\u5b58\u50a8\u4f4d\u7f6e\u7684\u6307\u9488\uff09\u3002</p> <p>\u7b97\u6cd5\u601d\u8def\uff1a \u8fd9\u4e2a\u53d8\u4f53\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5229\u7528\u5df2\u6709\u7684\u6392\u5e8f\u4e8c\u7ea7\u7d22\u5f15\u6765\u6a21\u62df\u5f52\u5e76\u8fde\u63a5\u7684\u8fc7\u7a0b\uff0c\u800c\u65e0\u9700\u5bf9\u5b9e\u9645\u7684\u6570\u636e\u8fdb\u884c\u7269\u7406\u6392\u5e8f\u3002\u5b83\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li> <p>\u57fa\u4e8e\u7d22\u5f15\u7684\u8fde\u63a5\u4fe1\u606f\u6536\u96c6\uff1a</p> <ul> <li>\u904d\u5386\u5173\u7cfb \\(r\\) \u7684\u6392\u5e8f\u4e8c\u7ea7\u7d22\u5f15\u7684\u53f6\u5b50\u8282\u70b9\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u7684\u6761\u76ee\uff0c\u5b83\u4f1a\u5305\u542b\u8fde\u63a5\u5c5e\u6027\u7684\u503c\u4ee5\u53ca\u6307\u5411\u5173\u7cfb \\(r\\) \u4e2d\u5bf9\u5e94\u5143\u7ec4\u7684\u5730\u5740\u3002</li> <li>\u540c\u6837\u5730\uff0c\u904d\u5386\u5173\u7cfb \\(s\\) \u7684\u6392\u5e8f\u4e8c\u7ea7\u7d22\u5f15\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u83b7\u53d6\u8fde\u63a5\u5c5e\u6027\u503c\u548c\u6307\u5411\u5173\u7cfb \\(s\\) \u4e2d\u5bf9\u5e94\u5143\u7ec4\u7684\u5730\u5740\u3002</li> <li>\u5c06\u4ece \\(r\\) \u548c \\(s\\) \u7684\u7d22\u5f15\u4e2d\u83b7\u53d6\u7684\u8fde\u63a5\u5c5e\u6027\u503c\u548c\u5bf9\u5e94\u7684\u5730\u5740\u5bf9\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u7ed3\u679c\u6587\u4ef6\u3002\u8fd9\u4e2a\u7ed3\u679c\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u6761\u8bb0\u5f55\u5927\u81f4\u5305\u542b\uff1a\u6765\u81ea \\(r\\) \u7684\u8fde\u63a5\u5c5e\u6027\u503c\u3001\u6307\u5411 \\(r\\) \u4e2d\u5143\u7ec4\u7684\u5730\u5740\u3001\u6765\u81ea \\(s\\) \u7684\u8fde\u63a5\u5c5e\u6027\u503c\u3001\u6307\u5411 \\(s\\) \u4e2d\u5143\u7ec4\u7684\u5730\u5740\u3002</li> </ul> </li> <li> <p>\u7b2c\u4e00\u6b21\u6392\u5e8f\u4e0e \\(r\\) \u7684\u5143\u7ec4\u68c0\u7d22\uff1a</p> <ul> <li>\u5bf9\u4e0a\u8ff0\u751f\u6210\u7684\u7ed3\u679c\u6587\u4ef6\u6309\u7167\u6307\u5411\u5173\u7cfb \\(r\\) \u4e2d\u5143\u7ec4\u7684\u5730\u5740\u8fdb\u884c\u6392\u5e8f\u3002</li> <li>\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u987a\u5e8f\u5730\u8bfb\u53d6\u7ed3\u679c\u6587\u4ef6\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8bb0\u5f55\u4e2d \\(r\\) \u7684\u5730\u5740\uff0c\u6309\u7167\u7269\u7406\u5b58\u50a8\u7684\u987a\u5e8f\u4ece\u78c1\u76d8\u4e2d\u68c0\u7d22\u51fa\u5bf9\u5e94\u7684\u5143\u7ec4\u3002</li> <li>\u5c06\u68c0\u7d22\u51fa\u7684 \\(r\\) \u7684\u5143\u7ec4\u4e0e\u7ed3\u679c\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684 \\(s\\) \u7684\u5730\u5740\u4fe1\u606f\u6682\u65f6\u5173\u8054\u8d77\u6765\u3002</li> </ul> </li> <li> <p>\u7b2c\u4e8c\u6b21\u6392\u5e8f\u4e0e \\(s\\) \u7684\u5143\u7ec4\u68c0\u7d22\u548c\u8fde\u63a5\uff1a</p> <ul> <li>\u73b0\u5728\uff0c\u6211\u4eec\u62e5\u6709\u4e86\u6309\u7167 \\(r\\) \u7684\u7269\u7406\u5b58\u50a8\u987a\u5e8f\u6392\u5217\u7684 \\(r\\) \u7684\u5143\u7ec4\uff0c\u4ee5\u53ca\u5b83\u4eec\u5bf9\u5e94\u7684 \\(s\\) \u7684\u5730\u5740\u4fe1\u606f\u3002</li> <li>\u5bf9\u8fd9\u4e2a\u65b0\u7684\u6587\u4ef6\uff08\u5305\u542b \\(r\\) \u7684\u5143\u7ec4\u548c \\(s\\) \u7684\u5730\u5740\uff09\u6309\u7167\u6307\u5411\u5173\u7cfb \\(s\\) \u4e2d\u5143\u7ec4\u7684\u5730\u5740\u8fdb\u884c\u6392\u5e8f\u3002</li> <li>\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u518d\u6b21\u987a\u5e8f\u5730\u8bfb\u53d6\u8fd9\u4e2a\u6587\u4ef6\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8bb0\u5f55\u4e2d \\(s\\) \u7684\u5730\u5740\uff0c\u6309\u7167\u7269\u7406\u5b58\u50a8\u7684\u987a\u5e8f\u4ece\u78c1\u76d8\u4e2d\u68c0\u7d22\u51fa\u5bf9\u5e94\u7684\u5143\u7ec4\u3002</li> <li>\u5c06\u68c0\u7d22\u51fa\u7684 \\(s\\) \u7684\u5143\u7ec4\u4e0e\u5f53\u524d\u8bb0\u5f55\u4e2d\u7684 \\(r\\) \u7684\u5143\u7ec4\u8fdb\u884c\u8fde\u63a5\u64cd\u4f5c\u3002</li> </ul> </li> </ol> <p>\u4e3a\u4ec0\u4e48\u9700\u8981\u4e24\u6b21\u6392\u5e8f\uff1f</p> <ul> <li>\u7b2c\u4e00\u6b21\u6309 \\(r\\) \u7684\u5730\u5740\u6392\u5e8f\uff1a \u76ee\u7684\u662f\u4e3a\u4e86\u80fd\u591f\u4ee5\u66f4\u9ad8\u6548\u7684\u7269\u7406\u5b58\u50a8\u987a\u5e8f\u8bbf\u95ee\u5173\u7cfb \\(r\\) \u7684\u5143\u7ec4\uff0c\u51cf\u5c11\u78c1\u76d8\u5bfb\u9053\u65f6\u95f4\u3002</li> <li>\u7b2c\u4e8c\u6b21\u6309 \\(s\\) \u7684\u5730\u5740\u6392\u5e8f\uff1a \u76ee\u7684\u662f\u4e3a\u4e86\u80fd\u591f\u4ee5\u66f4\u9ad8\u6548\u7684\u7269\u7406\u5b58\u50a8\u987a\u5e8f\u8bbf\u95ee\u5173\u7cfb \\(s\\) \u7684\u5143\u7ec4\uff0c\u540c\u6837\u662f\u4e3a\u4e86\u51cf\u5c11\u78c1\u76d8\u5bfb\u9053\u65f6\u95f4\uff0c\u5e76\u6700\u7ec8\u5b8c\u6210\u8fde\u63a5\u64cd\u4f5c\u3002</li> </ul> <p>\u4e0e\u4f20\u7edf\u6df7\u5408\u5f52\u5e76\u8fde\u63a5\u7684\u5dee\u5f02\uff1a</p> <p>\u4f20\u7edf\u7684\u6df7\u5408\u5f52\u5e76\u8fde\u63a5\u901a\u5e38\u5047\u8bbe\u81f3\u5c11\u6709\u4e00\u4e2a\u8f93\u5165\u5173\u7cfb\u662f\u7269\u7406\u6392\u5e8f\u7684\u3002\u800c\u8fd9\u4e2a\u53d8\u4f53\u7b97\u6cd5\u5de7\u5999\u5730\u5229\u7528\u4e86\u5df2\u6709\u7684\u6392\u5e8f\u4e8c\u7ea7\u7d22\u5f15\uff0c\u907f\u514d\u4e86\u5bf9\u539f\u59cb\u5173\u7cfb\u7684\u7269\u7406\u6392\u5e8f\uff0c\u4ece\u800c\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387\uff0c\u7279\u522b\u662f\u5f53\u7269\u7406\u6392\u5e8f\u7684\u4ee3\u4ef7\u5f88\u9ad8\uff0c\u800c\u4e8c\u7ea7\u7d22\u5f15\u5df2\u7ecf\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u3002</p> <p>\u63a5\u4e0b\u6765\u8fdb\u884c\u5173\u4e8e\u4f7f\u7528\u4e8c\u7ea7 B+ \u6811\u7d22\u5f15\u8fdb\u884c\u8fde\u63a5\u64cd\u4f5c\u7684\u6210\u672c\u5206\u6790\u3002</p> <p>\u5047\u8bbe: \\(r_1\\) \u548c \\(r_2\\) \u90fd\u62e5\u6709\u4e00\u4e2a\u4e8c\u7ea7 B+ \u6811\u7d22\u5f15\uff0c\u800c\u4e14\u8fd9\u4e24\u4e2a\u7d22\u5f15\u7684\u53f6\u5b50\u8282\u70b9\u5728\u786c\u76d8\u4e0a\u662f\u8fde\u7eed\u5b58\u50a8\u7684\u3002\\(b_1\\) \u662f\u5173\u7cfb \\(r_1\\) \u7684\u7d22\u5f15\u53f6\u5b50\u8282\u70b9\u7684\u5757\u6570\uff0c\\(b_2\\) \u662f\u5173\u7cfb \\(r_2\\) \u7684\u7d22\u5f15\u53f6\u5b50\u8282\u70b9\u7684\u5757\u6570\uff0c\\(b_b\\) \u662f\u5206\u914d\u7ed9\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u5e8f\u5217\u548c\u8f93\u51fa\u5173\u7cfb\u7684\u7f13\u51b2\u533a\u5757\u6570\u3002\\(M\\) \u662f\u53ef\u7528\u7684\u4e3b\u5185\u5b58\u5757\u6570\u3002\\(x\\) \u662f\u8fde\u63a5\u7d22\u5f15\u53f6\u5b50\u8282\u70b9\u540e\u4ea7\u751f\u7684\u4e2d\u95f4\u7ed3\u679c\u7684\u5757\u6570\uff08\u5305\u542b \\(r_1\\) \u548c \\(r_2\\) \u5143\u7ec4\u7684\u6307\u9488\uff09\u3002\\(x_2\\) \u662f\u6700\u7ec8\u8fde\u63a5\u7ed3\u679c\u5173\u7cfb\u7684\u5757\u6570\u3002\\(b_r\\) \u662f\u6839\u636e \\(r_1\\) \u7684\u6307\u9488\u83b7\u53d6\u5b9e\u9645\u5143\u7ec4\u6240\u9700\u7684\u5757\u4f20\u8f93\u6570\uff0c\\(b_s\\) \u662f\u6839\u636e \\(r_2\\) \u7684\u6307\u9488\u83b7\u53d6\u5b9e\u9645\u5143\u7ec4\u6240\u9700\u7684\u5757\u4f20\u8f93\u6570\u3002</p> <ol> <li>\u5f52\u5e76\u8fde\u63a5\u7d22\u5f15\u53f6\u5b50\u8282\u70b9</li> </ol> <p>transfer:\\(b_1 + b_2 + x\\)</p> <p>\u8bfb\u53d6 \\(r_1\\) \u7684\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u8bfb\u53d6 \\(r_2\\) \u7684\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u4ee5\u53ca\u5199\u5165\u5f52\u5e76\u8fde\u63a5\u4ea7\u751f\u7684\u4e2d\u95f4\u7ed3\u679c\u6240\u9700\u7684transfer\u3002</p> <p>seek: \\(\\lceil b_1 / b_b \\rceil + \\lceil b_2 / b_b \\rceil + \\lceil x / b_b \\rceil\\)</p> <p>\u56e0\u4e3a\u9700\u8981\u987a\u5e8f\u8bfb\u53d6 \\(r_1\\) \u7684\u53f6\u5b50\u8282\u70b9\uff0c\u53ef\u80fd\u9700\u8981 \\(\\lceil l_1 / b_b \\rceil\\) \u6b21 seek\u3002\u540c\u6837\u5730\uff0c\u8bfb\u53d6 \\(r_2\\) \u7684\u53f6\u5b50\u8282\u70b9\u9700\u8981 \\(\\lceil l_2 / b_b \\rceil\\) \u6b21 seek\uff0c\u5199\u5165\u4e2d\u95f4\u7ed3\u679c\u9700\u8981 \\(\\lceil x / b_b \\rceil\\) \u6b21 seek\u3002</p> <ol> <li>\u5bf9 \\(r_1\\) \u6307\u9488\u6392\u5e8f</li> </ol> <p>transfer: \\(x (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x / M) \\rceil + 2)\\)</p> <p>\u6bcf\u4e00\u8d9f\u5f52\u5e76\u9700\u8981\u8bfb\u53d6\u548c\u5199\u5165\u6570\u636e\uff0c\u4e00\u5171\u6709 \\(x\\) \u4e2a\u5757\u7684\u6570\u636e\u9700\u8981\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u52a0\u4e0a\u521d\u59cb\u8bfb\u53d6\u548c\u6700\u7ec8\u5199\u5165\u3002</p> <p>seek: \\(2 \\lceil x / M \\rceil + \\lceil x / b_b \\rceil (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x / M) \\rceil - 1)\\)</p> <ol> <li>\u5bf9 \\(r_2\\) \u6307\u9488\u6392\u5e8f</li> </ol> <p>\u4e0e\u5bf9 \\(r_1\\) \u6307\u9488\u6392\u5e8f\u7c7b\u4f3c\u3002</p> <p>transfer: \\(x_2 (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x_2 / M) \\rceil + 2)\\)</p> <p>seek: \\(2 \\lceil x_2 / M \\rceil + \\lceil x_2 / b_b \\rceil (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x_2 / M) \\rceil - 1)\\)</p> <ol> <li>\u6700\u540e\u8fde\u63a5\u83b7\u53d6\u5b9e\u9645\u5143\u7ec4</li> </ol> <p>transfer\uff1a\\(b_s + b_r\\)</p> <p>seek: 2</p> <p>\u6700\u521d\u7684\u8bfb\u5165\u4e0e\u6700\u540e\u7684\u8f93\u51fa\u3002</p> <p>\u7efc\u4e0a\u6240\u8ff0:</p> <p>transfer: \\(b_1 + b_2 + x + x (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x / M) \\rceil + 2) + x_2 (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x_2 / M) \\rceil + 2) + (b_s + b_r)\\)</p> <p>seek: \\(\\lceil b_1 / b_b \\rceil + \\lceil b_2 / b_b \\rceil + \\lceil x / b_b \\rceil + (2 \\lceil x / M \\rceil + \\lceil x / b_b \\rceil (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x / M) \\rceil - 1)) + (2 \\lceil x_2 / M \\rceil + \\lceil x_2 / b_b \\rceil (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x_2 / M) \\rceil - 1)) + 2\\)</p> answer <p>Assume the relations \\(r_1\\) and \\(r_2\\) have a secondary B+-tree index. Assume also, the leaf nodes of their indices is stored consecutively on the hard disk. Let the number of leaf nodes in the index of relation \\(r_1\\) be \\(l_1\\). Similarly let the number of leaf nodes in the index of relation \\(r_2\\) be \\(l_2\\). </p> <p>Thus merge-joining the leaf nodes of the indices will cost us \\(l_1 + l_2 + x\\) block transfers, where \\(x\\) is the number of output blocks. Assuming that \\(b_b\\) buffer blocks are allocated to each series of leaf nodes and for the output relation, the number of disk seeks required would be \\(\\lceil l_1 / b_b \\rceil + \\lceil l_2 / b_b \\rceil + \\lceil x / b_b \\rceil\\).</p> <p>Then since we need to sort the output on the pointers of \\(r_1\\) we will perform \\(x (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x / M) \\rceil + 2)\\) block transfers and \\(2 \\lceil x / M \\rceil + \\lceil x / b_b \\rceil (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x / M) \\rceil - 1)\\) disk seeks. Let \\(x_2\\) be the number of blocks of the resulting relation. Then since we also need to re-sort the output on the pointers of \\(r_2\\), we will perform  \\(x_2 (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x_2 / M) \\rceil + 2)\\) block transfers and  \\(2 \\lceil x_2 / M \\rceil + \\lceil x_2 / b_b \\rceil (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x_2 / M) \\rceil - 1)\\) disk seeks.</p> <p>Thus the total number of block transfers will be: </p> \\[l_1 + l_2 + x + x (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x / M) \\rceil + 2) + x_2 (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x_2 / M) \\rceil + 2) + (z_1 + z_2)\\] <p>where \\(z_i\\) is the number of blocks that we have to fetch when dereferencing the pointers of \\(r_i\\) (for \\(i = 1, 2\\)).</p> <p>And the total number of seeks will be: </p> \\[\\lceil l_1 / b_b \\rceil + \\lceil l_2 / b_b \\rceil + \\lceil x / b_b \\rceil + (2 \\lceil x / M \\rceil + \\lceil x / b_b \\rceil (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x / M) \\rceil - 1)) + (2 \\lceil x_2 / M \\rceil + \\lceil x_2 / b_b \\rceil (2 \\lceil \\log_{\\lfloor M/b_b \\rfloor - 1}(x_2 / M) \\rceil - 1)) + 2 \\]"},{"location":"Computer_Science/DB/homework/#_10","title":"\u7b2c\u5341\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#165","title":"16.5","text":"Question <p>Consider the relations \\(r_1(A, B, C)\\) \uff0c \\(r_2(C, D, E)\\) , and \\(r_3(E, F)\\) , with primary keys A, C, and E, respectively. Assume that \\(r_1\\) has 1000 tuples, \\(r_2\\) has 1500 tuples, and \\(r_3\\) has 750 tuples. Estimate the size of \\(r_1 \\bowtie r_2 \\bowtie r_3\\) , and give an efficient strategy for computing the join.</p> my <p>\\(r_2\\) \u7684\u4e3b\u952e\u662f C \uff0c\u56e0\u6b64\u6bcf\u4e2a C \u503c\u5728 \\(r_2\\) \u4e2d\u552f\u4e00\uff0c\u82e5 \\(r_1\\) \u7684 C \u662f\u5916\u952e\u5f15\u7528 \\(r_2\\) \u7684 C\uff0c\u5219 \\(r_1 \\bowtie r_2\\) \u7684\u7ed3\u679c\u4e3a 1000 \u4e2a\u5143\u7ec4\u3002</p> <p>\u540c\u7406\uff0c\\(r_3\\) \u7684\u4e3b\u952e\u662f E\uff0c\u82e5 \\(r_2\\) \u7684 E \u662f\u5916\u952e\u5f15\u7528 \\(r_3\\) \u7684 E\uff0c\u5219\u4e2d\u95f4\u7ed3\u679c \\(r_1 \\bowtie r_2\\) \u7684\u6bcf\u4e2a E \u503c\u90fd\u5b58\u5728\u4e8e \\(r_3\\) \u4e2d\uff0c\u6700\u7ec8\u7ed3\u679c\u4e3a 1000 \u4e2a\u5143\u7ec4\u3002</p> <p>\u6211\u4eec\u6709\u51e0\u79cd\u7b56\u7565:</p> <ol> <li> <p>\u4f18\u5148\u9009\u62e9\u80fd\u51cf\u5c11\u4e2d\u95f4\u7ed3\u679c\u5927\u5c0f\u7684\u8fde\u63a5\u987a\u5e8f\u3002\u6240\u4ee5 \\(r_1 \\bowtie r_2\\) \u5148\u6267\u884c\uff0c\u518d\u4e0e \\(r_3\\) \u8fde\u63a5\u6548\u7387\u66f4\u9ad8\u3002</p> </li> <li> <p>\u4e3a \\(r_2\\) \u7684 C \u5217\u548c \\(r_3\\) \u7684 E \u5217\u5efa\u7acb\u7d22\u5f15\u3002\u901a\u8fc7\u7d22\u5f15\u5feb\u901f\u5339\u914d\u8fde\u63a5\u5c5e\u6027\uff0c\u51cf\u5c11\u626b\u63cf\u6210\u672c\u3002</p> </li> </ol> answer <p>The relation resulting from the join of \\(r_1, r_2\\) and \\(r_3\\) will be the same no matter which way we join them, due to the associative and commutative properties of joins. So we will consider the size based on the strategy of \\(((r_1 \\bowtie r_2) \\bowtie r_3)\\) . Joining \\(r_1\\) with \\(r_2\\) will yield a relation of at most 1000 tuples, since C is a key for \\(r_2\\) . Likewise, joining that result with \\(r_3\\) , will yield a relation of at most 1000 tuples because E is a key for \\(r_3\\) . Therefore, the final relation will have at most 1000 tuples.</p> <p>An efficient strategy for computing this join would be to create an index on attribute C for relation \\(r_2\\) , and on E for \\(r_3\\) . Then for each tuple in \\(r_1\\) , we do the following:</p> <p>a. Use the index for \\(r_2\\) , to look up at most one tuple which matches the C value of \\(r_1\\) .</p> <p>b. Use the created index on E to look up in \\(r_3\\) at most one tuple which matches the unique value for E in \\(r_2\\) .</p>"},{"location":"Computer_Science/DB/homework/#156_1","title":"15.6","text":"Question <p>Consider the bank database of Figure 15.14, where the primary keys are underlined. Suppose that a B+-tree index on branch_city is available on relation branch, and that no other index is available. List different ways to handle the following selections that involve negation:</p> <p>a. \\(\\sigma_{\\neg (branch\\_city &lt; \"Brooklyn\")}(branch)\\)</p> <p>b. \\(\\sigma_{\\neg (branch\\_city = \"Brooklyn\")}(branch)\\)</p> <p>c. \\(\\sigma_{\\neg (branch\\_city &lt; \"Brooklyn\" \\lor assets &lt; 5000)}(branch)\\)</p> <p></p> my <p>a.  </p> <p>\u6761\u4ef6\u7b49\u4ef7\u4e8e\\(branch\\_city \\geq \"Brooklyn\"\\)</p> <p>\u76f4\u63a5\u5229\u7528 B+ \u6811\u7d22\u5f15\u5feb\u901f\u5b9a\u4f4d \\(branch\\_city = \"Brooklyn\"\\) \u7684\u5143\u7ec4\uff0c\u7531\u4e8e B+ \u6811\u662f\u53f6\u5b50\u8282\u70b9\u662f\u987a\u5e8f\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u5927\u4e8e\u7b49\u4e8e \"Brooklyn\" \u7684\u5143\u7ec4\u3002</p> <p>b. </p> <p>\u6761\u4ef6\u7b49\u4ef7\u4e8e \\(branch\\_city \\neq \"Brooklyn\"\\)</p> <p>\u901a\u8fc7 B+ \u6811\u7d22\u5f15\u67e5\u627e\u6240\u6709 \\(branch\\_city = \"Brooklyn\"\\) \u7684\u5143\u7ec4\uff0c\u8bb0\u5f55\u5176\u4f4d\u7f6e\u3002\u518d\u5728\u6309\u7167 B+ \u6811\u53f6\u5b50\u8282\u70b9\u5168\u8868\u987a\u5e8f\u626b\u63cf\u65f6\u8df3\u8fc7\u8fd9\u4e9b\u5143\u7ec4\uff0c\u8fd4\u56de\u5269\u4f59\u5143\u7ec4\u3002  </p> <p>c. </p> <p>\u6761\u4ef6\u7b49\u4ef7\u4e8e \\(branch\\_city \\geq \"Brooklyn\" \\ \\land \\ assets \\geq 5000\\)\u3002</p> <p>\u53ef\u4ee5\u53c2\u8003 a \u4e2d\u7684\u65b9\u6cd5\u4f7f\u7528\u7d22\u5f15\u5feb\u901f\u7b5b\u9009\u51fa \\(branch\\_city \\geq \"Brooklyn\"\\) \u7684\u5143\u7ec4\u3002\u518d\u5bf9\u7b5b\u9009\u540e\u7684\u5143\u7ec4\u9010\u6761\u68c0\u67e5 \\(assets \\geq 5000\\)\u3002  </p> answer <p>a. </p> <p>Use the index to locate the first tuple whose branch_city field has value \"Brooklyn\". From this tuple, follow the pointer chains till the end, retrieving all the tuples. </p> <p>b. </p> <p>For this query, the index serves no purpose. We can scan the file sequentially and select all tuples whose branch_city field is anything other than \"Brooklyn\". </p> <p>c. </p> <p>This query is equivalent to the query</p> \\[\\sigma_{(branch\\_city  \\geq \"Brooklyn\" \\land assets \\geq 5000)}(branch)\\] <p>Using the branch_city index, we can retrieve all tuples with branch_city value greater than or equal to \"Brooklyn\" by following the pointer chains from the first \"Brooklyn\" tuple. We also apply the additional criteria of \\(assets \\geq 5000\\) on every tuple. </p>"},{"location":"Computer_Science/DB/homework/#1616","title":"16.16","text":"Question <p>Suppose that a B+-tree index on (dept_name, building) is available on relation department. What would be the best way to handle the following selection?</p> \\[\\sigma_{(building &lt; \"Watson\") \\land (budget &lt; 55000) \\land (dept\\_name = \"Music\")}(department)\\] my <ol> <li> <p>\u5148\u5229\u7528 B+ \u6811\u7684\u7d22\u5f15\u76f4\u63a5\u5b9a\u4f4d\u5230\u6240\u6709 <code>dept_name</code> \u4e3a <code>\"Music\"</code> \u7684\u7d22\u5f15\u9879\u3002</p> </li> <li> <p>\u7136\u540e\u6839\u636e <code>building &lt; \"Watson\"</code> \u7684\u6761\u4ef6\uff0c\u5728 <code>dept_name = \"Music\"</code> \u7684\u5b50\u6811\u5185\u5feb\u901f\u904d\u5386\u6ee1\u8db3\u6761\u4ef6\u7684 <code>building</code> \u503c\u3002</p> </li> <li> <p>\u6839\u636e\u6307\u9488\u8bfb\u53d6\u6570\u636e\u9875\u4e2d\u7684\u5b8c\u6574\u8bb0\u5f55\u3002\u5bf9\u6bcf\u6761\u8bb0\u5f55\u68c0\u67e5 <code>budget &lt; 55000</code>\uff0c\u4fdd\u7559\u7b26\u5408\u6761\u4ef6\u7684\u8bb0\u5f55\u3002</p> </li> </ol> answer <p>Using the index on (dept_name, building), we locate the first tuple having (building \"Watson\" and dept_name \"Music\"). We then followthe pointers retrieving successive tuples as long as building is less than \"Watson\". From the tuples retrieved, the ones not satisfying the condition(budget &lt; 55000) are rejected.</p>"},{"location":"Computer_Science/DB/homework/#1620","title":"16.20","text":"Question <p>Explain how to use a histogram to estimate the size of a selection of the form</p> \\[\\sigma_{A \\le v}(r)\\] my <p>\u904d\u5386\u76f4\u65b9\u56fe\u7684\u6876\uff0c\u627e\u5230\u6ee1\u8db3 \\(min \\le v \\le max\\) \u7684\u6876\u3002\u82e5 v \u8d85\u51fa\u6240\u6709\u6876\u7684\u6700\u5927\u503c\uff0c\u7ed3\u679c\u4e3a\u6574\u4e2a\u5173\u7cfb\u7684\u5927\u5c0f\uff1b\u82e5 v \u5c0f\u4e8e\u6240\u6709\u6876\u7684\u6700\u5c0f\u503c\uff0c\u7ed3\u679c\u4e3a0\u3002</p> <p>\u5047\u8bbe\u6876\u5185\u6570\u636e\u5747\u5300\u5206\u5e03\uff0c\u518d\u8ba1\u7b97\u5f53\u524d\u6876\u4e2d\u6ee1\u8db3 \\(A \\le v\\) \u7684\u5143\u7ec4\u6570\u91cf\uff1a</p> \\[\\text{\u5f53\u524d\u6876\u8d21\u732e} = \\text{\u5f53\u524d\u6876\u7684\u603b\u5143\u7ec4\u6570} \\times \\frac{v - min}{max - min}\\] <p>\u6240\u4ee5\u603b\u4f30\u8ba1\u503c\u4e3a\uff1a</p> \\[\\text{\u603b\u5927\u5c0f} = \\left( \\sum_{\\text{\u524d\u9762\u6240\u6709\u6876}} \\text{\u8d21\u732e} \\right) + \\text{\u5f53\u524d\u6876\u8d21\u732e}\\] answer <p>Suppose the histogram H storing the distribution of values in r is divided into ranges \\(r_1, ..., r_n\\) . For each range \\(r_i\\) with low value \\(r_{i:low}\\) and high value \\(r_{i:high}\\) , if \\(r_{i:high}\\) is less than v, we add the number of tuples given by</p> \\[H(r_i)\\] <p>to the estimated total. If v &lt; \\(r_{i:high}\\) and v \\(\\ge r_{i:low}\\) , we assume that values within \\(r_i\\) are uniformly distributed and we add</p> \\[H(r_i) \\times \\frac{v - r_{i:low}}{r_{i:high} - r_{i:low}}\\] <p>to the estimated total.</p>"},{"location":"Computer_Science/DB/homework/#_11","title":"\u7b2c\u5341\u4e00\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#176","title":"17.6","text":"Question <p>Consider the precedence graph of Figure 17.16. Is the corresponding schedule conflict serializable? Explain your answer.</p> <p></p> my <p>The graph is acyclic, so there exists a schedule is conflict serializable. For example, \\(T_1, T_2, T_3, T_4, T_5\\).</p> answer <p>There is a serializable schedule corresponding to the precedence graph sincethe graph is acyclic. A possible schedule is obtained by doing a topologicalsort, that is, \\(T_1\\) , \\(T_2\\) , \\(T_3\\) , \\(T_4\\) , \\(T_5\\) .</p>"},{"location":"Computer_Science/DB/homework/#177","title":"17.7","text":"Question <p>What is a cascadeless schedule? Why is cascadelessness of schedules desirable? Are there any circumstances under which it would be desirable to allow noncascadeless schedules? Explain your answer.</p> my <p>\u65e0\u7ea7\u8054\u8c03\u5ea6\u8981\u6c42\u5982\u679c\u4e00\u4e2a\u4e8b\u52a1 \\(T_j\\) \u8981\u8bfb\u53d6\u53e6\u4e00\u4e2a\u4e8b\u52a1 \\(T_i\\) \u5df2\u7ecf\u5199\u5165\u7684\u6570\u636e\u9879\uff0c\u90a3\u4e48\u4e8b\u52a1 \\(T_i\\) \u5fc5\u987b\u5148\u6210\u529f\u63d0\u4ea4\uff0c\u4e4b\u540e\u4e8b\u52a1 \\(T_j\\) \u624d\u80fd\u6267\u884c\u8fd9\u4e2a\u8bfb\u53d6\u64cd\u4f5c\u3002</p> <p>\u65e0\u7ea7\u8054\u8c03\u5ea6\u7684\u4e3b\u8981\u4f18\u70b9\u5728\u4e8e\uff1a</p> <ol> <li>\u5f53\u4e8b\u52a1\u5931\u8d25\u65f6\uff0c\u4e0d\u9700\u8981\u8ffd\u6eaf\u5e76\u56de\u6eda\u6240\u6709\u4f9d\u8d56\u4e8e\u5b83\u7684\u4e8b\u52a1\u3002</li> <li>\u907f\u514d\u4e86\u56e0\u7ea7\u8054\u56de\u6eda\u9020\u6210\u7684\u5f00\u9500\u3002</li> </ol> <p>\u5f53\u4e8b\u52a1\u5931\u8d25\u662f\u975e\u5e38\u7f55\u89c1\u65f6\uff0c\u53d1\u751f\u7ea7\u8054\u4e2d\u6b62\u7684\u53ef\u80fd\u6027\u5c31\u6bd4\u8f83\u4f4e\uff0c\u6b64\u65f6\u5141\u8bb8\u975e\u65e0\u7ea7\u8054\u8c03\u5ea6\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7edf\u7684\u5e76\u53d1\u6027\uff0c\u4ece\u800c\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u4f7f\u5f97\u7cfb\u7edf\u6027\u80fd\u66f4\u597d\u3002</p> answer <p>A cascadeless schedule is one where, for each pair of transactions \\(T_i\\) , and \\(T_j\\) such that \\(T_j\\) , reads data items previously written by \\(T_i\\) , the commit operation of \\(T_i\\) , appears before the read operation of \\(T_j\\) . Cascadeless schedules are desirable because the failure of a transaction does not lead to the aborting of any other transaction. Of course this comes at the cost of less concurrency. If failuresoccur rarely, so that we can pay the price of cascading aborts for the increased concurrency, noncascadeless schedules might be desirable.</p>"},{"location":"Computer_Science/DB/homework/#1712","title":"17.12","text":"Question <p>List the ACID properties. Explain the usefulness of each.</p> my <ol> <li> <p>Atomicity: \u539f\u5b50\u6027\u786e\u4fdd\u4e8b\u52a1\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u3001\u4e0d\u53ef\u5206\u5272\u7684\u5de5\u4f5c\u5355\u5143\u3002\u4e8b\u52a1\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u8981\u4e48\u5168\u90e8\u6210\u529f\u6267\u884c\uff0c\u8981\u4e48\u5728\u4efb\u4f55\u4e00\u6b65\u5931\u8d25\u65f6\u5168\u90e8\u4e0d\u6267\u884c\uff08\u56de\u6eda\u5230\u4e8b\u52a1\u5f00\u59cb\u524d\u7684\u72b6\u6001\uff09\u3002\u7cfb\u7edf\u4e0d\u4f1a\u505c\u7559\u5728\u90e8\u5206\u5b8c\u6210\u7684\u72b6\u6001\u3002\u539f\u5b50\u6027\u4fdd\u8bc1\u4e86\u64cd\u4f5c\u7684\u5b8c\u6574\u6027\uff0c\u4f8b\u5982\u94f6\u884c\u8f6c\u8d26\u64cd\u4f5c\u4e2d\uff0c\u539f\u5b50\u6027\u786e\u4fdd\u4e0d\u4f1a\u53d1\u751f\u53ea\u6263\u6b3e\u6210\u529f\u4f46\u5b58\u6b3e\u5931\u8d25\u7684\u60c5\u51b5\uff0c\u4ece\u800c\u907f\u514d\u4e86\u8d26\u6237\u6570\u636e\u7684\u4e0d\u4e00\u81f4\u548c\u8d44\u91d1\u635f\u5931\u3002</p> </li> <li> <p>Consistency: \u4e00\u81f4\u6027\u786e\u4fdd\u4e8b\u52a1\u6267\u884c\u524d\u540e\uff0c\u6570\u636e\u5e93\u90fd\u5fc5\u987b\u6ee1\u8db3\u6240\u6709\u9884\u8bbe\u7684\u7ea6\u675f\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e8b\u52a1\u6267\u884c\u524d\u540e\u6570\u636e\u5e93\u72b6\u6001\u90fd\u662f\u5408\u6cd5\u7684\u3002\u5982\u679c\u4e0d\u5408\u6cd5\uff0c\u90a3\u5c31\u4f1a\u56de\u6eda\u5230\u4e8b\u52a1\u5f00\u59cb\u524d\u7684\u72b6\u6001\u3002\u4e00\u81f4\u6027\u7ef4\u62a4\u4e86\u6570\u636e\u5e93\u7684\u6570\u636e\u5b8c\u6574\u6027\uff0c\u9632\u6b62\u4e86\u975e\u6cd5\u6570\u636e\u7684\u4ea7\u751f\uff0c\u786e\u4fdd\u4e86\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u59cb\u7ec8\u662f\u7b26\u5408\u89c4\u5219\u548c\u903b\u8f91\u7ea6\u675f\u7684\u3002</p> </li> <li> <p>Isolation: \u9694\u79bb\u6027\u786e\u4fdd\u5e76\u53d1\u6267\u884c\u7684\u591a\u4e2a\u4e8b\u52a1\u4e4b\u95f4\u4e0d\u4f1a\u76f8\u4e92\u5e72\u6270\u3002\u5373\u4f7f\u591a\u4e2a\u4e8b\u52a1\u5e76\u884c\u5904\u7406\uff0c\u5176\u6700\u7ec8\u7ed3\u679c\u4e5f\u5e94\u8be5\u4e0e\u8fd9\u4e9b\u4e8b\u52a1\u6309\u67d0\u79cd\u987a\u5e8f\u4e32\u884c\u6267\u884c\u7684\u7ed3\u679c\u76f8\u540c\u3002\u9694\u79bb\u6027\u9632\u6b62\u4e86\u5e76\u53d1\u5904\u7406\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u5404\u79cd\u95ee\u9898(\u4f8b\u5982 Dirty Read, Non-repeatable Read, Phantom Read)\u3002</p> </li> <li> <p>Durability: \u6301\u4e45\u6027\u786e\u4fdd\u4e00\u65e6\u4e8b\u52a1\u88ab\u6210\u529f\u63d0\u4ea4\uff0c\u5176\u5bf9\u6570\u636e\u5e93\u6240\u505a\u7684\u66f4\u6539\u5c31\u662f\u6c38\u4e45\u6027\u7684\uff0c\u5373\u4f7f\u5728\u4e8b\u52a1\u63d0\u4ea4\u540e\u7cfb\u7edf\u53d1\u751f\u6545\u969c\uff0c\u8fd9\u4e9b\u66f4\u6539\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002\u6301\u4e45\u6027\u4e3a\u6570\u636e\u5e93\u63d0\u4f9b\u4e86\u53ef\u9760\u6027\u4fdd\u8bc1\uff0c\u5b83\u786e\u4fdd\u4e86\u7528\u6237\u7684\u64cd\u4f5c\u7ed3\u679c\u4e0d\u4f1a\u56e0\u4e3a\u7cfb\u7edf\u6545\u969c\u800c\u4e22\u5931\u3002</p> </li> </ol> answer <p>The ACID properties, and the need for each of them are:</p> <ul> <li> <p>Consistency: Execution of a transaction in isolation (that is, with noother transaction executing concurrently) preserves the consistency of the database. This is typically the responsibility of the application programmer who codes the transactions.</p> </li> <li> <p>Atomicity: Either all operations of the transaction are reflected properly in the database, or none are. Clearly lack of atomicity will lead toinconsistency in the database.</p> </li> <li> <p>Isolation: When multiple transactions execute concurrently, it shouldbe the case that, for every pair of transactions \\(T_i\\) , and \\(T_j\\) , it appearsto \\(T_i\\) , that either \\(T_j\\) , finished execution before \\(T_i\\) started, or  \\(T_j\\) ; startedexecution after \\(T_i\\) finished. Thus, each transaction is unaware of othertransactions executing concurrently with it. The user view of a transaction system requires the isolation property, and the property thatconcurrent schedules take the system from one consistent state toanother. These requirements are satisfied by ensuring that only serializable schedules ofindividuallyconsistency preserving transactionsare allowed.</p> </li> <li> <p>Durability: After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures.</p> </li> </ul>"},{"location":"Computer_Science/DB/homework/#_12","title":"\u7b2c\u5341\u4e8c\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#181","title":"18.1","text":"Question <p>Show that the two-phase locking protocol ensures conflict serializability and that transactions can be serialized according to their lock points.</p> my <p>\u5047\u8bbe\u4e00\u4e2a\u9075\u5faa 2PL \u7684\u8c03\u5ea6\u5b58\u5728\u4e00\u4e2a\u73af\uff1a\\(T_1 \\rightarrow T_2 \\rightarrow \\cdots \\rightarrow T_n \\rightarrow T_1\\)\u3002</p> <p>\u8fd9\u610f\u5473\u7740\uff1a</p> <ul> <li> <p>\\(T_1\\) \u5728\u6267\u884c\u51b2\u7a81\u64cd\u4f5c \\(O_1\\) \u4e4b\u524d\u83b7\u5f97\u4e86\u67d0\u4e2a\u9501\uff0c\u800c \\(O_1\\) \u4e0e \\(T_2\\) \u7684\u64cd\u4f5c\u51b2\u7a81\uff0c\u4e14 \\(T_2\\) \u5fc5\u987b\u5728 \\(T_1\\) \u91ca\u653e\u8be5\u9501\u540e\u624d\u80fd\u6267\u884c\u5176\u51b2\u7a81\u64cd\u4f5c \\(O_2\\) \u3002</p> </li> <li> <p>\\(T_2\\) \u5728\u6267\u884c\u51b2\u7a81\u64cd\u4f5c \\(O_2\\) \u4e4b\u524d\u83b7\u5f97\u4e86\u67d0\u4e2a\u9501\uff0c\u800c \\(O_2\\) \u4e0e \\(T_3\\) \u7684\u64cd\u4f5c\u51b2\u7a81\uff0c\u4e14 \\(T_3\\) \u5fc5\u987b\u5728 \\(T_2\\) \u91ca\u653e\u8be5\u9501\u540e\u624d\u80fd\u6267\u884c\u5176\u51b2\u7a81\u64cd\u4f5c \\(O_3\\) \u3002</p> </li> <li> <p>...</p> </li> <li> <p>\\(T_n\\) \u5728\u6267\u884c\u51b2\u7a81\u64cd\u4f5c \\(O_n\\) \u4e4b\u524d\u83b7\u5f97\u4e86\u67d0\u4e2a\u9501\uff0c\u800c \\(O_n\\) \u4e0e \\(T_1\\) \u7684\u64cd\u4f5c\u51b2\u7a81\uff0c\u4e14 \\(T_1\\) \u5fc5\u987b\u5728 \\(T_n\\) \u91ca\u653e\u8be5\u9501\u540e\u624d\u80fd\u6267\u884c\u5176\u51b2\u7a81\u64cd\u4f5c \\(O_1\\) \u3002</p> </li> </ul> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e8b\u52a1 \\(T_i\\) \u7684\u51b2\u7a81\u64cd\u4f5c\u5148\u4e8e \\(T_{i+1}\\) \u7684\u51b2\u7a81\u64cd\u4f5c(\u5bf9\u4e8e \\(T_n\\) \u6765\u8bf4\uff0c \\(T_{n+1}\\) \u5c31\u662f \\(T_1\\) )\u3002\u7531\u4e8e\u9501\u673a\u5236\uff0c \\(T_i\\) \u91ca\u653e\u76f8\u5173\u9501\u7684\u65f6\u95f4\u70b9\u65e9\u4e8e \\(T_{i+1}\\) \u83b7\u5f97\u76f8\u5173\u9501\u7684\u65f6\u95f4\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4 \\(T_i\\) \u7684 lock point \u5fc5\u987b\u65e9\u4e8e \\(T_{i+1}\\) \u7684 lock point \uff0c\u56e0\u6b64\u6211\u4eec\u4f1a\u5f97\u5230\u5bf9\u4e8e lock point \u6765\u8bf4\uff0c \\(T_1 \\rightarrow T_2 \\rightarrow \\cdots \\rightarrow T_n \\rightarrow T_1\\) \uff0c\u8fd9\u662f\u77db\u76fe\u7684\uff0c\u56e0\u6b64 2PL \u786e\u4fdd\u4e86\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u3002</p> answer <p>Suppose two-phase locking does not ensure serializability. Then there exists aset oftransactions \\(T_1, T_2, \\codts, T_{n-1}\\) which obey 2PL and which produce a nonserializable schedule. A nonserializable schedule implies a cycle in the precedencegraph, and we shall show that 2PL cannot produce such cycles. Without lossof generality, assume the following cycle exists in the precedence graph: \\(T_0 \\rightarrow T_1 \\rightarrow T_2 \\rightarrow \\cdots \\rightarrow T_{n-1} \\rightarrow T_0\\). Let \\(\\alpha_i\\) be the time at which \\(T_i\\) obtains its lastlock (i.e. \\(T_i\\) 's lock point). Then for all transactions such that \\(T_i \\rightarrow T_j\\) , \\(\\alpha_i &lt; \\alpha_j\\). Then for the cycle we have</p> \\[\\alpha_0 &lt; \\alpha_1 &lt; \\alpha_2 &lt; \\cdots &lt; \\alpha_{n-1} &lt; \\alpha_0\\] <p>Since \\(\\alpha_0 &lt; \\alpha_0\\) is a contradiction, no such cycle can exist. Hence 2PL cannotproduce nonserializable schedules. Because of the property that for all transactions such that \\(T_i \\rightarrow T_j\\) , \\(\\alpha_i &lt; \\alpha_j\\), the lock point ordering of the transactions is also a topological sort ordering of the precedence graph. Thus transactions can be serialized according to their lock points.</p>"},{"location":"Computer_Science/DB/homework/#182","title":"18.2","text":"Question <p>Consider the following two transactions:</p> <p>\\(T_{34}\\) :</p> <pre><code>            read(A);\n\n            read(B);\n\n            if A = 0 then B := B + 1;\n\n            write(B).\n</code></pre> <p>\\(T_{35}\\) :</p> <pre><code>            read(B);\n\n            read(A);\n\n            if B = 0 then A := A + 1;\n\n            write(A).\n</code></pre> <p>Add lock and unlock instructions to transactions \\(T_{34}\\) and \\(T_{35}\\) so that they observe the two-phase locking protocol. Can the execution of these transactions result in a deadlock?</p> my <p>\\(T_{34}\\):</p> <pre><code>            lock_S(A);\n            read(A);\n            lock_X(B);\n            read(B);\n            if A = 0 then\n                B := B + 1;\n                write(B);\n            end if;\n\n            unlock_S(A);\n            unlock_X(B);\n</code></pre> <p>\\(T_{35}\\):</p> <pre><code>            lock_S(B);\n            read(B);\n            lock_X(A);\n\n            if B = 0 then\n                A := A + 1;\n                write(A);\n            end if;\n\n\n            unlock_S(B);\n            unlock_X(A);\n</code></pre> <p>\u5728\u6309\u7167\u4e0a\u8ff0 2PL \u6dfb\u52a0\u9501\u6307\u4ee4\u540e\uff0c\u4e8b\u52a1 \\(T_{34}\\) \u548c \\(T_{35}\\) \u7684\u5e76\u53d1\u6267\u884c\u4f1a\u5bfc\u81f4\u6b7b\u9501\u3002</p> <p>\u4f8b\u5982\u4e0b\u8ff0\u7684\u5e76\u53d1\u6267\u884c\u987a\u5e8f\u3002</p> <ol> <li> <p>\\(T_{34}\\) \u6267\u884c lock_S(A)\u3002</p> </li> <li> <p>\\(T_{34}\\) \u6267\u884c read(A)\u3002</p> </li> <li> <p>\\(T_{35}\\) \u6267\u884c lock_S(B)\u3002</p> </li> <li> <p>\\(T_{35}\\) \u6267\u884c read(B)\u3002</p> </li> <li> <p>\\(T_{34}\\) \u6267\u884c lock_X(B)\u3002</p> </li> <li> <p>\\(T_{34}\\) \u6267\u884c read(B)\u3002</p> </li> <li> <p>\\(T_{35}\\) \u6267\u884c lock_X(A)\u3002</p> </li> <li> <p>\\(T_{35}\\) \u6267\u884c read(A)\u3002</p> </li> </ol> <p>\u5728\u8fd9\u91cc\uff0c\u6839\u636e\u9501\u534f\u8bae\uff0c\\(T_{34}\\) \u5728\u7b2c 5 \u6b65\u88ab\u963b\u585e\uff0c\u5fc5\u987b\u7b49\u5f85 \\(T_{35}\\) \u91ca\u653e\u5b83\u6301\u6709\u7684 B \u7684\u9501\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5b83\u6765\u8bf4\u7b2c 6 \u6b65\u4ee5\u53ca\u4e4b\u540e\u7684\u4efb\u4f55\u64cd\u4f5c\u65e0\u6cd5\u88ab\u6267\u884c\u3002\u800c\u5bf9\u4e8e \\(T_{35}\\) \u6765\u8bf4\uff0c\u5728\u7b2c 7 \u6b65\u88ab\u963b\u585e\uff0c\u5fc5\u987b\u7b49\u5f85 \\(T_{34}\\) \u91ca\u653e\u5b83\u6301\u6709\u7684 A \u7684\u9501\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5b83\u6765\u8bf4\u7b2c 8 \u6b65\u4ee5\u53ca\u4e4b\u540e\u7684\u4efb\u4f55\u64cd\u4f5c\u65e0\u6cd5\u88ab\u6267\u884c\u3002\u8fd9\u5c31\u5f62\u6210\u4e86\u6b7b\u9501\u3002</p> answer <p></p> <p></p> <p></p>"},{"location":"Computer_Science/DB/homework/#187","title":"18.7","text":"Question <p>Consider a database system that includes an atomic increment operation, in addition to the read and write operations. Let V be the value of data item X.</p> <p>The operation</p> <p>increment(X) by C</p> <p>sets the value of X to V + C in an atomic step. The value of X is not available to the transaction unless the latter executes a read(X).</p> <p>Assume that increment operations lock the item in increment mode using the compatibility matrix in Figure 18.25.</p> <p>a. Show that, if all transactions lock the data that they access in the corresponding mode, then two-phase locking ensures serializability.</p> <p>b. Show that the inclusion of increment mode locks allows for increased concurrency.</p> <p></p> my <p>a. \u5728 18.1 \u4e2d\u5df2\u7ecf\u8bc1\u660e\u4e86\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u672c\u8eab\u80fd\u6709\u6548\u5730\u9632\u6b62\u4e86\u5faa\u73af\u7b49\u5f85\u548c\u51b2\u7a81\u56fe\u4e2d\u7684\u73af\u3002\u5728\u52a0\u5165\u4e86 I \u9501\u8f74\uff0c\u53ea\u8981\u4e8b\u52a1\u9075\u5faa\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff0c\u5b83\u4ecd\u7136\u80fd\u591f\u786e\u4fdd\u51b2\u7a81\u53ef\u4e32\u793c\u5316\uff0c\u56e0\u4e3a\u65b0\u7684\u9501\u6a21\u5f0f\u53ea\u662f\u6269\u5c55\u4e86\u9700\u8981\u8fdb\u884c\u51b2\u7a81\u68c0\u67e5\u7684\u64cd\u4f5c\u7c7b\u578b\u3002</p> <p>b. \u8003\u8651\u591a\u4e2a\u4e8b\u52a1\u9700\u8981\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\u9879 X \u6267\u884c increment(X) by C \u64cd\u4f5c\u7684\u573a\u666f\u3002</p> <ol> <li> <p>\u5982\u679c\u53ea\u4f7f\u7528 S \u548c X \u9501\uff1a increment \u64cd\u4f5c\u672c\u8d28\u4e0a\u662f\u8bfb\u53d6\u5f53\u524d\u503c\uff0c\u8ba1\u7b97\u65b0\u503c\uff0c\u7136\u540e\u5199\u56de\u3002\u8fd9\u6d89\u53ca\u5230\u8bfb\u548c\u5199\u64cd\u4f5c\u3002\u5982\u679c\u4e25\u683c\u6309\u7167 S/X \u9501\uff0c\u4e8b\u52a1\u53ef\u80fd\u9700\u8981\u5148\u83b7\u53d6 S \u9501\u8fdb\u884c\u8bfb\uff0c\u7136\u540e\u5347\u7ea7\u5230 X \u9501\u8fdb\u884c\u5199\u3002\u7531\u4e8e X \u9501\u4e0e\u4efb\u4f55\u5176\u4ed6\u9501\u90fd\u4e0d\u517c\u5bb9\uff0c\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u4e8b\u52a1\u6301\u6709 X \u9501\u5bf9 X \u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u5176\u4ed6\u60f3\u8981 increment \u7684\u4e8b\u52a1\u5fc5\u987b\u7b49\u5f85\u5f53\u524d\u7684\u5199\u4e8b\u52a1\u5b8c\u6210\u5e76\u91ca\u653e X \u9501\u540e\u624d\u80fd\u83b7\u53d6\u9501\u5e76\u6267\u884c\u3002\u8fd9\u5c06\u5bfc\u81f4\u8fd9\u4e9b increment \u64cd\u4f5c\u88ab\u4e32\u884c\u5316\u6267\u884c\uff0c\u5e76\u53d1\u5ea6\u5f88\u4f4e\u3002</p> </li> <li> <p>\u5982\u679c\u4f7f\u7528 S, X, I \u9501\uff1a \u7531\u4e8e I \u9501\u4e0e I \u9501\u662f\u517c\u5bb9\u7684\uff0c\u591a\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u540c\u65f6\u83b7\u53d6\u6570\u636e\u9879 X \u4e0a\u7684 I \u9501\u3002\u8fd9\u610f\u5473\u7740\u591a\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u540c\u65f6\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\u9879 X \u6267\u884c increment(X) by C \u64cd\u4f5c\u3002\u6570\u636e\u5e93\u7cfb\u7edf\u8d1f\u8d23\u786e\u4fdd\u8fd9\u4e9b\u539f\u5b50\u589e\u91cf\u64cd\u4f5c\u7684\u6b63\u786e\u6027\u3002\u76f8\u5bf9\u4e8e\u4f7f\u7528 X \u9501\uff0c\u591a\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u5728\u4e0d\u4e92\u76f8\u7b49\u5f85\u9501\u7684\u60c5\u51b5\u4e0b\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\u9879\u8fdb\u884c increment \u64cd\u4f5c\u3002\u56e0\u6b64\u4ece\u9501\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u4eec\u65e0\u9700\u7b49\u5f85\u5373\u53ef\u83b7\u53d6\u9501\u5e76\u6267\u884c\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u5e76\u53d1\u5ea6\u3002</p> </li> </ol> answer <p>a. Serializability can be shown by observing that if two transactions have any mode lock on the same item, the increment operations can be swapped, just like read operations. However, any pair of conflicting operations must be serialized in the order of the lock points of the corresponding transactions, as shown in Exercise 18.1.</p> <p>b. The increment lock mode being compatible with itself allows multiple incrementing transactions to take the lock simultaneously, thereby improving the concurrency of the protocol. In the absence of this mode, an exclusive mode will have to be taken on a data item by each transaction that wants to increment the value of this data item. An exclusive lock being incompatible with itself adds to the lock waiting time and obstructs the overall progress of the concurrent schedule. </p> <p>In general, increasing the true entries in the compatibility matrix increases the concurrency and improves the throughput.</p> <p>The proof is in Korth, \"Locking Primitives in a Database System,\" Journal of the ACM Volume 30,(1983).</p>"},{"location":"Computer_Science/DB/homework/#1818","title":"18.18","text":"Question <p>Most implementations of database systems use strict two-phase locking. Suggest three reasons for the popularity of this protocol.</p> my <ol> <li> <p>\u9632\u6b62\u7ea7\u8054\u56de\u6eda</p> </li> <li> <p>\u5b9e\u73b0\u76f8\u5bf9\u7b80\u5355</p> </li> <li> <p>\u4fdd\u8bc1\u4e25\u683c\u53ef\u4e32\u884c\u5316\u7684\u540c\u65f6\uff0c\u5e76\u53d1\u5ea6\u8f83\u9ad8</p> </li> </ol> answer <p>It is relatively simple to implement, imposes low rollback over-head because of cascadeless schedules, and usually allows an acceptable level of concurrency.</p>"},{"location":"Computer_Science/DB/homework/#_13","title":"\u7b2c\u5341\u4e09\u6b21\u4f5c\u4e1a","text":""},{"location":"Computer_Science/DB/homework/#191","title":"19.1","text":"Question <p>Explain why log records for transactions on the undo-list must be processed in reverse order, whereas redo is performed in a forward direction.</p> my <p>\u64a4\u9500\u65e5\u5fd7\u8bb0\u5f55\u7684\u662f\u5982\u4f55\"\u64a4\u9500\"\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5c06\u6570\u636e\u6062\u590d\u5230\u64cd\u4f5c\u524d\u7684\u6837\u5b50\u3002\u56e0\u6b64\uff0c\u5904\u7406\u8fd9\u4e9b\u8bb0\u5f55\u65f6\uff0c\u5fc5\u987b\u4ece\u6700\u540e\u4e00\u4e2a\u5b8c\u6210\u7684\u64cd\u4f5c\u5f00\u59cb\uff0c\u4e00\u6b65\u6b65\u5411\u524d\u56de\u6eaf\uff0c\u5c42\u5c42\u5265\u79bb\uff0c\u76f4\u5230\u6062\u590d\u5230\u4e8b\u52a1\u7684\u8d77\u70b9\u3002</p> <p>\u91cd\u505a\u65e5\u5fd7\u8bb0\u5f55\u7684\u662f\u5982\u4f55\"\u5b8c\u6210\"\u4e00\u4e2a\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u5728\u6062\u590d\u65f6\uff0c\u7cfb\u7edf\u9700\u8981\u4ece\u65e5\u5fd7\u7684\u8d77\u70b9\u5f00\u59cb\uff0c\u6309\u7167\u5386\u53f2\u7684\u8f68\u8ff9\uff0c\u4e00\u6b65\u6b65\u5730\u91cd\u65b0\u6267\u884c\u90a3\u4e9b\u5df2\u7ecf\u6210\u529f\u63d0\u4ea4\u7684\u4e8b\u52a1\uff0c\u786e\u4fdd\u6240\u6709\u7684\u4fee\u6539\u90fd\u5f97\u5230\u4f53\u73b0\u3002</p> answer <p>Within a single transaction in undo-list, suppose a data item is updated morethan once, say from l to 2, and then from 2 to 3. If the undo log records areprocessed in forward order, the final value of the data item will be incorrectly set to 2, whereas by processing them in reverse order, the value is set to 1. The same logic also holds for data items updated by more than one transaction on undo-list.</p> <p>Using the same example as above, but assuming the transaction committed, it is easy to see that if redo processing processes the records in forward orderthe fnal value is set correctly to 3, but if done in reverse order, the fnal valueis set incorrectly to 2.</p>"},{"location":"Computer_Science/DB/homework/#192","title":"19.2","text":"Question <p>Explain the purpose of the checkpoint mechanism. How often should checkpoints be performed? How does the frequency of checkpoints affect:</p> <ul> <li> <p>System performance when no failure occurs?</p> </li> <li> <p>The time it takes to recover from a system crash?</p> </li> <li> <p>The time it takes to recover from a media (disk) failure?</p> </li> </ul> my <p>Purpose of the Checkpoint Mechanism</p> <ol> <li> <p>\u51cf\u5c11\u6062\u590d\u65f6\u95f4\u3002\u5728\u7cfb\u7edf\u5d29\u6e83\u540e\uff0c\u6570\u636e\u5e93\u9700\u8981\u901a\u8fc7 Redo \u65e5\u5fd7\u6765\u6062\u590d\u5df2\u63d0\u4ea4\u4f46\u5c1a\u672a\u5199\u5165\u78c1\u76d8\u6570\u636e\u6587\u4ef6\u7684\u4e8b\u52a1\uff0c\u5e76\u901a\u8fc7\u64a4\u9500 Undo \u65e5\u5fd7\u6765\u56de\u6eda\u672a\u5b8c\u6210\u7684\u4e8b\u52a1\u3002\u5982\u679c\u6ca1\u6709\u68c0\u67e5\u70b9\uff0c\u7cfb\u7edf\u53ef\u80fd\u9700\u8981\u4ece\u65e5\u5fd7\u7684\u975e\u5e38\u65e9\u671f\u7684\u4f4d\u7f6e\u5f00\u59cb\u626b\u63cf\u548c\u5904\u7406\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6f2b\u957f\u7684\u6062\u590d\u8fc7\u7a0b\u3002\u68c0\u67e5\u70b9\u901a\u8fc7\u5b9a\u671f\u5c06\u5185\u5b58\u4e2d\u5df2\u4fee\u6539\u7684\u6570\u636e\u5757\uff08\u810f\u9875\uff09\u5f3a\u5236\u5199\u5165\u78c1\u76d8\uff0c\u5e76\u8bb0\u5f55\u4e00\u4e2a\u68c0\u67e5\u70b9\u4f4d\u7f6e\u5230\u65e5\u5fd7\u4e2d\uff0c\u4ece\u800c\u9650\u5236\u4e86\u6062\u590d\u65f6\u9700\u8981\u626b\u63cf\u7684\u65e5\u5fd7\u8303\u56f4\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u6062\u590d\u8fc7\u7a0b\u53ea\u9700\u8981\u4ece\u6700\u540e\u4e00\u4e2a\u68c0\u67e5\u70b9\u5f00\u59cb\u5904\u7406\u65e5\u5fd7\uff0c\u5927\u5927\u7f29\u77ed\u4e86\u6062\u590d\u6240\u9700\u7684\u65f6\u95f4\u3002</p> </li> <li> <p>\u91ca\u653e\u65e5\u5fd7\u7a7a\u95f4\u3002\u4e00\u65e6\u67d0\u4e2a\u68c0\u67e5\u70b9\u5b8c\u6210\uff0c\u610f\u5473\u7740\u8be5\u68c0\u67e5\u70b9\u4e4b\u524d\u6240\u6709\u5df2\u63d0\u4ea4\u4e8b\u52a1\u7684\u4fee\u6539\u90fd\u5df2\u5b89\u5168\u5199\u5165\u78c1\u76d8\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u68c0\u67e5\u70b9\u4e4b\u524d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5bf9\u4e8e\u6b63\u5e38\u7684\u5d29\u6e83\u6062\u590d\u6765\u8bf4\u5c31\u4e0d\u518d\u662f\u5fc5\u9700\u7684\u4e86\u3002\u8fd9\u4f7f\u5f97\u7cfb\u7edf\u53ef\u4ee5\u91cd\u7528\u6216\u622a\u65ad\u8fd9\u4e9b\u65e7\u7684\u65e5\u5fd7\u7a7a\u95f4\u3002</p> </li> <li> <p>\u63d0\u9ad8\u6b63\u5e38\u64cd\u4f5c\u6027\u80fd\u7684\u95f4\u63a5\u5f71\u54cd\u3002\u867d\u7136\u68c0\u67e5\u70b9\u672c\u8eab\u4f1a\u6d88\u8017\u4e00\u5b9a\u7684 I/O \u8d44\u6e90\uff0c\u4f46\u901a\u8fc7\u5b9a\u671f\u5c06\u810f\u9875\u5199\u5165\u78c1\u76d8\uff0c\u53ef\u4ee5\u907f\u514d\u5728\u5185\u5b58\u7f13\u51b2\u533a\u6ee1\u65f6\u51fa\u73b0\u5927\u91cf\u7684\u3001\u96c6\u4e2d\u7684\u3001\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u6682\u65f6\u505c\u987f\u7684\u5199\u5165\u64cd\u4f5c\u3002\u5b83\u5c06\u5199\u5165\u538b\u529b\u5206\u6563\u5230\u4e0d\u540c\u7684\u65f6\u95f4\u70b9\u3002</p> </li> </ol> <p>\u68c0\u67e5\u70b9\u7684\u6267\u884c\u9891\u7387: \u627e\u5230\u4e00\u4e2a\u5e73\u8861\u70b9\uff0c\u4f7f\u5f97\u65e2\u4e0d\u8981\u56e0\u4e3a\u592a\u9891\u7e41\u5b58\u6863\u5bfc\u81f4\u7cfb\u7edf\u53d8\u6162\uff0c\u4e5f\u4e0d\u8981\u56e0\u4e3a\u5b58\u6863\u95f4\u9694\u592a\u957f\u5bfc\u81f4\u5d29\u6e83\u540e\u6062\u590d\u592a\u4e45\u3002</p> <p>\u68c0\u67e5\u70b9\u9891\u7387\u7684\u5f71\u54cd:</p> <ol> <li> <p>\u8fc7\u4e8e\u9891\u7e41\u7684\u68c0\u67e5\u70b9\u4f1a\u5bfc\u81f4\u6301\u7eed\u7684\u3001\u8f83\u9ad8\u7684 I/O \u6d3b\u52a8\uff0c\u56e0\u4e3a\u7cfb\u7edf\u9700\u8981\u4e0d\u65ad\u5730\u5c06\u810f\u9875\u5199\u5165\u78c1\u76d8\u3002\u8fd9\u53ef\u80fd\u4f1a\u62a2\u5360\u6b63\u5e38\u4e8b\u52a1\u5904\u7406\u6240\u9700\u7684 I/O \u8d44\u6e90\uff0c\u4ece\u800c\u964d\u4f4e\u6574\u4f53\u7cfb\u7edf\u541e\u5410\u91cf\u548c\u54cd\u5e94\u65f6\u95f4\u3002CPU \u8d44\u6e90\u4e5f\u53ef\u80fd\u56e0\u4e3a\u7ba1\u7406\u68c0\u67e5\u70b9\u8fc7\u7a0b\u800c\u88ab\u6d88\u8017\u3002\u8fc7\u4e8e\u7a00\u758f\u7684\u68c0\u67e5\u70b9\u5728\u4e24\u6b21\u68c0\u67e5\u70b9\u4e4b\u95f4\uff0c\u5199\u5165\u64cd\u4f5c\u4e3b\u8981\u5728\u5185\u5b58\u4e2d\u8fdb\u884c\uff0c\u78c1\u76d8 I/O \u8f83\u5c11\uff0c\u77ed\u671f\u5185\u7cfb\u7edf\u6027\u80fd\u53ef\u80fd\u770b\u8d77\u6765\u66f4\u597d\uff0c\u54cd\u5e94\u66f4\u5feb\u3002\u4f46\u662f\u5f53\u68c0\u67e5\u70b9\u6700\u7ec8\u53d1\u751f\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u6b21\u6027\u5c06\u5927\u91cf\u7684\u810f\u9875\u5199\u5165\u78c1\u76d8\uff0c\u5bfc\u81f4\u4e00\u4e2a\u77ed\u6682\u4f46\u5267\u70c8\u7684 I/O \u9ad8\u5cf0\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u7cfb\u7edf\u77ac\u95f4\u5361\u987f\u3002</p> </li> <li> <p>\u8fc7\u4e8e\u9891\u7e41\u7684\u68c0\u67e5\u70b9\u6062\u590d\u65f6\u95f4\u901a\u5e38\u8f83\u77ed\u3002\u56e0\u4e3a\u68c0\u67e5\u70b9\u786e\u4fdd\u4e86\u8f83\u65b0\u7684\u6570\u636e\u5df2\u7ecf\u5199\u5165\u78c1\u76d8\uff0c\u6240\u4ee5\u4ece\u6700\u540e\u4e00\u4e2a\u68c0\u67e5\u70b9\u5f00\u59cb\u9700\u8981\u91cd\u505a\u7684\u65e5\u5fd7\u91cf\u8f83\u5c11\u3002\u8fc7\u4e8e\u7a00\u758f\u7684\u68c0\u67e5\u70b9\u6062\u590d\u65f6\u95f4\u901a\u5e38\u8f83\u957f\u3002\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u68c0\u67e5\u70b9\u53ef\u80fd\u6bd4\u8f83\u65e7\uff0c\u610f\u5473\u7740\u81ea\u8be5\u68c0\u67e5\u70b9\u4ee5\u6765\u6709\u5927\u91cf\u7684\u4e8b\u52a1\u65e5\u5fd7\u9700\u8981\u88ab\u626b\u63cf\u548c\u91cd\u505a\uff0c\u8fd9\u4f1a\u663e\u8457\u589e\u52a0\u6062\u590d\u6240\u9700\u7684\u65f6\u95f4\u3002</p> </li> <li> <p>\u68c0\u67e5\u70b9\u672c\u8eab\u5e76\u4e0d\u76f4\u63a5\u51b3\u5b9a\u4ece\u5907\u4efd\u6062\u590d\u6570\u636e\u7684\u901f\u5ea6\u3002\u4f46\u662f\uff0c\u68c0\u67e5\u70b9\u5f71\u54cd\u4e86\u9700\u8981\u5e94\u7528\u7684\u65e5\u5fd7\u91cf\u3002\u8fc7\u4e8e\u9891\u7e41\u7684\u68c0\u67e5\u70b9\u5bf9\u4ecb\u8d28\u6062\u590d\u65f6\u95f4\u5f71\u54cd\u4e0d\u5927\uff0c\u56e0\u4e3a\u4e3b\u8981\u4f9d\u8d56\u7684\u662f\u5907\u4efd\u548c\u5f52\u6863\u65e5\u5fd7\u3002\u4e0d\u8fc7\uff0c\u4e00\u4e2a\u975e\u5e38\u8fd1\u7684\u68c0\u67e5\u70b9\u53ef\u80fd\u610f\u5473\u7740\u5728\u7ebf\u65e5\u5fd7\u4e2d\u9700\u8981\u5e94\u7528\u7684\u66f4\u6539\u76f8\u5bf9\u8f83\u5c11\u3002\u8fc7\u4e8e\u7a00\u758f\u7684\u68c0\u67e5\u70b9\u7684\u8bdd\uff0c\u5982\u679c\u6700\u540e\u4e00\u4e2a\u68c0\u67e5\u70b9\u975e\u5e38\u65e7\uff0c\u90a3\u4e48\u5728\u4ece\u5907\u4efd\u6062\u590d\u6570\u636e\u540e\uff0c\u9700\u8981\u5e94\u7528\u7684\u5f52\u6863\u65e5\u5fd7\u548c\u5728\u7ebf\u65e5\u5fd7\u91cf\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u8fd9\u4f1a\u5ef6\u957f\u6574\u4e2a\u4ecb\u8d28\u6062\u590d\u8fc7\u7a0b\u7684 rollforward \u9636\u6bb5\u3002</p> </li> </ol> answer <p>Checkpointing is done with log-based recovery schemes to reduce the time required for recovery after a crash. If there is no checkpointing, then the entirelog must be searched after a crash, and all transactions must be undone/redone from the log. If checkpointing is performed, then most ofthe log records priorto the checkpoint can be ignored at the time of recovery.</p> <p>Another reason to perform checkpoints is to clear log records from stablestorage as it gets full.</p> <p>Since checkpoints cause some loss in performance while they are beingtaken, their frequency should be reduced if fast recovery is not critical. If we need fast recovery, checkpointing frequency should be increased. If the amount of stable storage available is less, frequent checkpointing is unavoidable.</p> <p>Checkpoints have no effect on recovery from a disk crash; archival dumpsare the equivalent of checkpoints for recovery from disk crashes.</p>"},{"location":"Computer_Science/DB/homework/#1910","title":"19.10","text":"Question <p>Explain the reasons why recovery of interactive transactions is more difficult to deal with than is recovery of batch transactions. Is there a simple way to deal with this difficulty? (Hint: Consider an automatic teller machine transaction in which cash is withdrawn.)</p> my <ol> <li> <p>\u4ea4\u4e92\u5f0f\u4e8b\u52a1\u7684\u7279\u70b9\u662f\u5b83\u4eec\u6d89\u53ca\u5230\u4e0e\u5916\u90e8\u5b9e\u4f53\uff08\u901a\u5e38\u662f\u7528\u6237\uff0c\u4f46\u4e5f\u53ef\u80fd\u662f\u5176\u4ed6\u7cfb\u7edf\uff09\u7684\u5b9e\u65f6\u4ea4\u4e92\uff0c\u5e76\u4e14\u5176\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f34\u968f\u7740\u73b0\u5b9e\u4e16\u754c\u4e2d\u4e0d\u53ef\u9006\u8f6c\u7684\u64cd\u4f5c\u3002\u6279\u5904\u7406\u4e8b\u52a1\u901a\u5e38\u5728\u6570\u636e\u5e93\u5185\u90e8\u5b8c\u6210\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u5982\u679c\u5931\u8d25\uff0c\u53ef\u4ee5\u901a\u8fc7\u64a4\u9500\u65e5\u5fd7\u5c06\u6570\u636e\u5e93\u72b6\u6001\u56de\u6eda\u5230\u4e8b\u52a1\u5f00\u59cb\u524d\uff0c\u4eff\u4f5b\u4ec0\u4e48\u90fd\u6ca1\u53d1\u751f\u8fc7\u3002\u4ea4\u4e92\u5f0f\u4e8b\u52a1\u5f80\u5f80\u6d89\u53ca\u5230\u4e0e\u6570\u636e\u5e93\u5916\u90e8\u4e16\u754c\u7684\u4ea4\u4e92\u3002\u4ee5 ATM \u53d6\u6b3e\u4e3a\u4f8b\uff0c\u4e00\u65e6ATM\u673a\u5410\u51fa\u73b0\u91d1\uff0c\u8fd9\u4e2a\u7269\u7406\u52a8\u4f5c\u662f\u65e0\u6cd5\u901a\u8fc7\u6570\u636e\u5e93\u56de\u6eda\u6765\"\u6536\u56de\"\u73b0\u91d1\u7684\u3002\u5373\u4f7f\u6570\u636e\u5e93\u8bb0\u5f55\u663e\u793a\u53d6\u6b3e\u5931\u8d25\u6216\u88ab\u56de\u6eda\uff0c\u94b1\u5df2\u7ecf\u5230\u4e86\u7528\u6237\u624b\u4e2d\u3002</p> </li> <li> <p>\u7531\u4e8e\u65e0\u6cd5\u76f4\u63a5\u56de\u6eda\u5916\u90e8\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u5df2\u5728\u5916\u90e8\u4e16\u754c\u4ea7\u751f\u5f71\u54cd\u7684\u4ea4\u4e92\u5f0f\u4e8b\u52a1\uff0c\u6062\u590d\u5f80\u5f80\u9700\u8981\u4f9d\u8d56\u8865\u507f\u4e8b\u52a1\u3002\u8865\u507f\u4e8b\u52a1\u7684\u76ee\u7684\u662f\u6267\u884c\u4e0e\u539f\u4e8b\u52a1\u76f8\u53cd\u7684\u64cd\u4f5c\uff0c\u4ee5\u671f\u8fbe\u5230\u4e00\u79cd\u903b\u8f91\u4e0a\u7684\"\u62b5\u6d88\"\u6548\u679c\u3002\u4f8b\u5982\uff0c\u5982\u679c ATM \u9519\u8bef\u5730\u591a\u5410\u4e86\u94b1\uff0c\u8865\u507f\u4e8b\u52a1\u53ef\u80fd\u9700\u8981\u8bb0\u5f55\u4e00\u7b14\u501f\u9879\u5230\u7528\u6237\u7684\u8d26\u6237\uff0c\u4f46\u8fd9\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u80fd\u8ffd\u56de\u73b0\u91d1\u3002\u8bbe\u8ba1\u548c\u5b9e\u73b0\u6b63\u786e\u7684\u8865\u507f\u4e8b\u52a1\u672c\u8eab\u5c31\u5f88\u590d\u6742\uff0c\u9700\u8981\u51c6\u786e\u7406\u89e3\u539f\u4e8b\u52a1\u7684\u6bcf\u4e00\u4e2a\u5916\u90e8\u5f71\u54cd\uff0c\u5e76\u786e\u4fdd\u8865\u507f\u64cd\u4f5c\u7684\u539f\u5b50\u6027\u548c\u4e00\u81f4\u6027\u3002</p> </li> <li> <p>\u4ea4\u4e92\u5f0f\u4e8b\u52a1\u9700\u8981\u5728\u6570\u636e\u5e93\u5185\u90e8\u72b6\u6001\u548c\u5916\u90e8\u4e16\u754c\u72b6\u6001\u4e4b\u95f4\u4fdd\u6301\u540c\u6b65\u3002\u5f53\u7cfb\u7edf\u5d29\u6e83\u65f6\uff0c\u8fd9\u4e24\u4e2a\u72b6\u6001\u53ef\u80fd\u4e0d\u4e00\u81f4\u3002\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u53ef\u80fd\u8bb0\u5f55\u4e86\u53d6\u6b3e\u4e8b\u52a1\u5df2\u63d0\u4ea4\uff0c\u4f46ATM\u786c\u4ef6\u6545\u969c\u5bfc\u81f4\u672a\u5410\u949e\u3002\u6216\u8005ATM\u5df2\u5410\u949e\uff0c\u4f46\u6570\u636e\u5e93\u56e0\u5d29\u6e83\u672a\u80fd\u53ca\u65f6\u66f4\u65b0\u4f59\u989d\u3002\u6062\u590d\u65f6\u9700\u8981\u51c6\u786e\u5224\u65ad\u771f\u5b9e\u60c5\u51b5\u5e76\u8fdb\u884c\u76f8\u5e94\u5904\u7406\u3002</p> </li> <li> <p>\u4ea4\u4e92\u5f0f\u4e8b\u52a1\u901a\u5e38\u6709\u65f6\u95f4\u654f\u611f\u6027\u3002\u7528\u6237\u4e0d\u4f1a\u65e0\u9650\u671f\u5730\u7b49\u5f85\u54cd\u5e94\u3002\u5982\u679c\u7cfb\u7edf\u5728\u4ea4\u4e92\u8fc7\u7a0b\u4e2d\u53d8\u6162\u6216\u65e0\u54cd\u5e94\uff0c\u7528\u6237\u53ef\u80fd\u4f1a\u653e\u5f03\u64cd\u4f5c\u6216\u5c1d\u8bd5\u5176\u4ed6\u64cd\u4f5c\uff0c\u8fd9\u4f1a\u4f7f\u6062\u590d\u903b\u8f91\u66f4\u52a0\u590d\u6742\u3002\u5728\u7f51\u7edc\u5206\u533a\u6216\u7cfb\u7edf\u90e8\u5206\u6545\u969c\u7684\u60c5\u51b5\u4e0b\uff0c\u5f88\u96be\u786e\u5b9a\u4ea4\u4e92\u7684\u53e6\u4e00\u65b9\u662f\u5426\u6536\u5230\u4e86\u6700\u540e\u7684\u6d88\u606f\u6216\u5b8c\u6210\u4e86\u5176\u64cd\u4f5c\u3002</p> </li> </ol> <p>\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6279\u5904\u7406\u4e8b\u52a1\u7684\u6062\u590d\u76f8\u5bf9\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u7684\u64cd\u4f5c\u901a\u5e38\u5c40\u9650\u4e8e\u6570\u636e\u5e93\u5185\u90e8\u3002\u5f88\u5bb9\u6613\u901a\u8fc7\u65e5\u5fd7\u56de\u6eda\u5230\u4e00\u81f4\u72b6\u6001\u3002\u5931\u8d25\u4e0d\u9700\u8981\u7acb\u5373\u901a\u77e5\u7528\u6237\u6216\u5904\u7406\u590d\u6742\u7684\u4ea4\u4e92\u4e2d\u65ad\u3002\u5f88\u591a\u6279\u5904\u7406\u4efb\u52a1\u53ef\u4ee5\u8bbe\u8ba1\u6210\u5e42\u7b49\u7684\uff0c\u5373\u591a\u6b21\u6267\u884c\u548c\u4e00\u6b21\u6267\u884c\u7684\u6548\u679c\u76f8\u540c\uff0c\u8fd9\u7b80\u5316\u4e86\u91cd\u8bd5\u903b\u8f91\u3002</p> <p>\u4f46\u662f\u4e5f\u53ef\u4ee5\u6709\u4e00\u4e9b\u529e\u6cd5\u3002</p> <ol> <li>\u5c06\u4e8b\u52a1\u5206\u89e3\u4e3a\u591a\u4e2a\u6b65\u9aa4\uff0c\u53ea\u6709\u5728\u6240\u6709\u5173\u952e\u524d\u63d0\u6761\u4ef6\uff08\u5305\u62ec\u6570\u636e\u5e93\u5185\u90e8\u64cd\u4f5c\uff09\u90fd\u6210\u529f\u5b8c\u6210\u540e\uff0c\u624d\u6267\u884c\u4e0d\u53ef\u9006\u8f6c\u7684\u5916\u90e8\u64cd\u4f5c\u3002</li> <li>\u5c3d\u53ef\u80fd\u5c06\u4e0e\u5916\u90e8\u7cfb\u7edf\u7684\u4ea4\u4e92\u8bbe\u8ba1\u6210\u5e42\u7b49\u7684\u3002\u8fd9\u610f\u5473\u7740\u5373\u4f7f\u4e00\u4e2a\u8bf7\u6c42\u56e0\u4e3a\u7f51\u7edc\u95ee\u9898\u6216\u7cfb\u7edf\u91cd\u542f\u88ab\u53d1\u9001\u4e86\u591a\u6b21\uff0c\u5916\u90e8\u7cfb\u7edf\u4e5f\u53ea\u4f1a\u5904\u7406\u4e00\u6b21\uff0c\u6216\u8005\u591a\u6b21\u5904\u7406\u7684\u7ed3\u679c\u4e0e\u4e00\u6b21\u5904\u7406\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u7ed9 ATM \u53d1\u9001\u5410\u949e\u6307\u4ee4\u65f6\uff0c\u53ef\u4ee5\u9644\u5e26\u4e00\u4e2a\u552f\u4e00\u7684\u4e8b\u52a1 ID \u3002 ATM \u786c\u4ef6\u6216\u5176\u63a7\u5236\u5668\u53ef\u4ee5\u8bb0\u5f55\u5df2\u7ecf\u5904\u7406\u8fc7\u7684\u4e8b\u52a1 ID \uff0c\u907f\u514d\u91cd\u590d\u5410\u949e\u3002</li> <li>\u8be6\u7ec6\u8bb0\u5f55\u4ea4\u4e92\u5f0f\u4e8b\u52a1\u7684\u6bcf\u4e00\u4e2a\u5173\u952e\u6b65\u9aa4\u548c\u72b6\u6001\u8f6c\u6362\u3002\u8fd9\u6709\u52a9\u4e8e\u5728\u6062\u590d\u65f6\u51c6\u786e\u5224\u65ad\u4e8b\u52a1\u8fdb\u5c55\u5230\u4e86\u54ea\u4e00\u6b65\uff0c\u4ee5\u53ca\u54ea\u4e9b\u5916\u90e8\u64cd\u4f5c\u53ef\u80fd\u5df2\u7ecf\u53d1\u751f\u3002</li> <li>\u5bf9\u4e8e\u90a3\u4e9b\u65e0\u6cd5\u907f\u514d\u7684\u3001\u9700\u8981\u5728\u5931\u8d25\u540e\u8fdb\u884c\u8865\u507f\u7684\u5916\u90e8\u64cd\u4f5c\uff0c\u5e94\u8bbe\u8ba1\u6807\u51c6\u5316\u7684\u8865\u507f\u6d41\u7a0b\uff0c\u5e76\u5c3d\u53ef\u80fd\u81ea\u52a8\u5316\u6267\u884c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u786e\u8ba4\u53d1\u751f\u4e86\u9519\u8bef\u6263\u6b3e\u4f46\u672a\u5410\u949e\uff0c\u7cfb\u7edf\u5e94\u80fd\u81ea\u52a8\u89e6\u53d1\u4e00\u4e2a\u51b2\u6b63\u4ea4\u6613\u3002</li> <li>\u4e3a\u4e0e\u5916\u90e8\u7cfb\u7edf\u7684\u4ea4\u4e92\u8bbe\u7f6e\u5408\u7406\u7684\u8d85\u65f6\u3002\u5728\u8d85\u65f6\u6216\u5931\u8d25\u540e\uff0c\u6839\u636e\u64cd\u4f5c\u7684\u5e42\u7b49\u6027\u548c\u4e1a\u52a1\u903b\u8f91\u51b3\u5b9a\u662f\u5426\u4ee5\u53ca\u5982\u4f55\u91cd\u8bd5\u3002</li> <li>\u5bf9\u4e8e\u6781\u5176\u590d\u6742\u6216\u65e0\u6cd5\u81ea\u52a8\u6062\u590d\u7684\u573a\u666f\uff08\u4f8b\u5982\uff0cATM\u786c\u4ef6\u62a5\u544a\u4e86\u4e00\u4e2a\u65e0\u6cd5\u89e3\u91ca\u7684\u9519\u8bef\uff09\uff0c\u5fc5\u987b\u6709\u660e\u786e\u7684\u4eba\u5de5\u4ecb\u5165\u6d41\u7a0b\u548c\u5f02\u5e38\u5904\u7406\u9884\u6848\u3002\u7cfb\u7edf\u5e94\u80fd\u6e05\u6670\u5730\u8bb0\u5f55\u6b64\u7c7b\u4e8b\u4ef6\uff0c\u5e76\u901a\u77e5\u76f8\u5173\u4eba\u5458\u3002</li> </ol> answer <p>Interactive transactions are more dificult to recover from than batch transactions because some actions may be irrevocable. For example, an output (write)statement may have fred a missile or caused a bank machine to give money toa customer. The best way to deal with this is to try to do all output statementsat the end ofthe transaction. That way ifthe transaction aborts in the middle.no harm will be have been done.</p> <p>Output operations should ideally be done atomically; for example, ATM machines often count out notes and deliver all the notes together instead of delivering notes one at a time. If output operations cannot be done atomicallya physical log of output operations, such as a disk log ofevents, or even a videolog of what happened in the physical world can be maintained to allow performrecovery to be performed manually later, for example, by crediting cash back to a customer's account.</p>"},{"location":"Computer_Science/DB/homework/#1921","title":"19.21","text":"Question <p>Consider the log in Figure 19.5. Suppose there is a crash just before the log record <code>&lt;T0 abort&gt;</code> is written out. Explain what would happen during recovery.</p> <p></p> my <p>\u5047\u8bbe\u7cfb\u7edf\u5728\u5199\u5165 <code>&lt;T0 abort&gt;</code> \u8bb0\u5f55\u524d\u5d29\u6e83\uff0c\u6839\u636e\u56fe\u4e2d\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u6211\u4eec\u53ef\u4ee5\u5224\u65ad\u4e8b\u52a1\u7684\u72b6\u6001\uff1a</p> <ul> <li> <p>T0 \u5df2\u5f00\u59cb\uff0c\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u5e76\u4e14\u5df2\u7ecf\u5f00\u59cb\u56de\u6eda\u5176\u64cd\u4f5c\uff08\u5c06 B \u6062\u590d\u4e3a 2000\uff09\uff0c\u4f46\u7531\u4e8e\u6ca1\u6709 <code>&lt;T0 abort&gt;</code> \u6216 <code>&lt;T0 commit&gt;</code> \u8bb0\u5f55\uff0cT0 \u5728\u5d29\u6e83\u65f6\u88ab\u89c6\u4e3a\u672a\u5b8c\u6210\u6d3b\u52a8\u4e8b\u52a1\u3002</p> </li> <li> <p>T1 \u662f\u5df2\u63d0\u4ea4\u4e8b\u52a1\u3002</p> </li> <li> <p>T2 \u5df2\u5f00\u59cb\uff0c\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u4f46\u6ca1\u6709 <code>&lt;T2 commit&gt;</code> \u6216 <code>&lt;T2 abort&gt;</code> \u8bb0\u5f55\uff0cT2 \u5728\u5d29\u6e83\u65f6\u88ab\u89c6\u4e3a\u672a\u5b8c\u6210\u6d3b\u52a8\u4e8b\u52a1\u3002</p> </li> </ul> <p>\u521d\u59cb\u5316 Undo-List\uff1a\u6839\u636e\u68c0\u67e5\u70b9 <code>&lt;checkpoint {T0, T1}&gt;</code>\uff0c\u521d\u59cb <code>Undo-List = {T0, T1}</code>\u3002\u4ece\u68c0\u67e5\u70b9\u6761\u76ee\u5f00\u59cb\u5411\u524d\u626b\u63cf\u65e5\u5fd7\u5e76\u6267\u884c Redo \u64cd\u4f5c\uff0c\u9047\u5230 <code>&lt;T1, C, 700, 600&gt;</code> \u91cd\u505a\u6b64\u64cd\u4f5c\uff0c\u5c06 C \u7684\u503c\u8bbe\u7f6e\u4e3a 600\u3002\u9047\u5230 <code>&lt;T1 commit&gt;</code> \u5c06\u5176\u4ece <code>Undo-List</code> \u4e2d\u79fb\u9664\u3002\u9047\u5230 <code>&lt;T2 start&gt;</code> \u5c06\u5176\u52a0\u5165 <code>Undo-List</code>\u3002\u518d\u5c06 A \u7684\u503c\u8bbe\u7f6e\u4e3a 400\u3002\u5c06 B \u7684\u503c\u8bbe\u7f6e\u4e3a 2000\u3002\u6b64\u65f6 Redo \u9636\u6bb5\u7ed3\u675f\u3002\u6700\u7ec8 <code>Undo-List = {T0, T2}</code>\u3002\u78c1\u76d8\u4e0a\u7684\u72b6\u6001\u662f A = 400, B = 2000, C = 600\u3002\u63a5\u7740\u5c06\u56de\u6eda\u6240\u6709\u5728 Redo \u9636\u6bb5\u7ed3\u675f\u540e\u4ecd\u5728 Undo-List \u4e2d\u7684\u4e8b\u52a1\u3002\u4ece\u65e5\u5fd7\u7684\u672b\u5c3e\u5f00\u59cb\u5411\u540e\u626b\u63cf\uff0c\u5bf9 Undo-List \u4e2d\u7684\u4e8b\u52a1\u6267\u884c\u64a4\u9500\u64cd\u4f5c\u3002\u5148\u662f\u5c06 A \u7684\u503c\u4ece 400 \u6062\u590d\u5230 500\u3002\u7136\u540e\u8f93\u51fa\u4e00\u6761\u8865\u507f\u65e5\u5fd7\u8bb0\u5f55 <code>&lt;T2, A, 500&gt;</code>\u3002\u6700\u540e\u5230 <code>&lt;T0, B, 2000, 2050&gt;</code> \u65f6\uff0c\u5c06 B \u7684\u503c\u4ece 2050 \u6062\u590d\u5230 2000\u3002\u8f93\u51fa\u4e00\u6761\u8865\u507f\u65e5\u5fd7\u8bb0\u5f55: <code>&lt;T0, B, 2000&gt;</code>\u3002\u6062\u590d\u7ed3\u675f\u65f6\u7684\u7cfb\u7edf\u72b6\u6001\u662f A = 500, B = 2000, C = 600\u3002</p> answer <p>Recovery would happen as follows:</p> <p>Redo phase:</p> <p>a. Undo-List = \\(T_0, T_1\\)</p> <p>b. Start from the checkpoint entry and perform the redo operation.</p> <p>c. <code>C=600</code></p> <p>d. \\(T_1\\) is removed from the Undo-list as there is a commit record</p> <p>e. \\(T_2\\) is added to the Undo list on encountering the <code>&lt; $T_2$, start &gt;</code> record.</p> <p>f. <code>A = 400</code></p> <p>g. <code>B = 2000</code></p> <p>Undo phase:</p> <p>a. Undo-List = \\(T_0, T_2\\)</p> <p>b. Scan the log backwards from the end.</p> <p>c. <code>A = 500;</code> output the redo-only record <code>&lt;$T_2$, A, 500&gt;</code></p> <p>d. output <code>&lt; $T_2$, abort &gt;</code></p> <p>e. <code>B = 2000;</code> output the redo-only record <code>&lt;$T_0$, B, 2000&gt;</code></p> <p>f. output <code>&lt; $T_0$, abort &gt;</code></p> <p>At the end of the recovery process, the state of the system is as follows: <code>A = 500, B = 2000, C = 600</code></p> <p>The log records added during recovery are, `&lt;\\(T_2\\), A, 500&gt;, &lt;\\(T_2\\), abort&gt;, &lt;\\(T_0\\), B, 2000&gt;, &lt;\\(T_0\\), abort&gt;</p> <p>Observe that B is set to 2000 by two log records, one created during normal rollback of \\(T_0\\), and the other created during recovery, when the abort of \\(T_0\\) is completed. Clearly the second one is redundant, although not incorrect. Optimizations described in the ARlES algorithm (and equivalent optimizations described in Section 16.7 for the case of logical operations) can help avoid carrying out redundant operations, which create such redundant log records.</p>"},{"location":"Computer_Science/DB/homework/#1925","title":"19.25","text":"Question <p>In the ARIES recovery algorithm:</p> <p>a. If at the beginning of the analysis pass, a page is not in the checkpoint dirty page table, will we need to apply any redo records to it? Why?</p> <p>b. What is RecLSN, and how is it used to minimize unnecessary redos?</p> my <p>a. \u5728\u68c0\u67e5\u70b9\u65f6\u523b\uff0c\u810f\u9875\u8868\u8bb0\u5f55\u4e86\u90a3\u4e9b\u5728\u5185\u5b58\u4e2d\u88ab\u4fee\u6539\u8fc7\u4f46\u5c1a\u672a\u5199\u56de\u78c1\u76d8\u7684\u9875\u9762\u3002\u5982\u679c\u4e00\u4e2a\u9875\u9762\u5728\u68c0\u67e5\u70b9\u65f6\u523b\u4e0d\u5728\u810f\u9875\u8868\u4e2d\uff0c\u8fd9\u901a\u5e38\u610f\u5473\u7740\u5728\u68c0\u67e5\u70b9\u90a3\u4e00\u523b\uff0c\u8be5\u9875\u9762\u5728\u78c1\u76d8\u4e0a\u7684\u7248\u672c\u662f\u6700\u65b0\u7684\uff0c\u6216\u8005\u8bf4\u5b83\u81ea\u4e0a\u6b21\u5199\u56de\u78c1\u76d8\u540e\u6ca1\u6709\u518d\u88ab\u4fee\u6539\u8fc7\u3002\u4f46\u662f\u5373\u4f7f\u4e00\u4e2a\u9875\u9762\u5728\u68c0\u67e5\u70b9\u65f6\u523b\u662f\u4e0d\u5728\u810f\u9875\u8868\u4e2d\u7684\uff0c\u5b83\u5b8c\u5168\u6709\u53ef\u80fd\u5728\u68c0\u67e5\u70b9\u5b8c\u6210\u4e4b\u540e\u3001\u7cfb\u7edf\u5d29\u6e83\u4e4b\u524d\u88ab\u4fee\u6539\u3002\u5982\u679c\u5b83\u5728\u68c0\u67e5\u70b9\u540e\u53d8\u810f\uff0c\u76f8\u5173\u7684\u4fee\u6539\u88ab\u8bb0\u5f55\u5230\u65e5\u5fd7\uff0c\u4f46\u9875\u9762\u672c\u8eab\u672a\u5728\u5d29\u6e83\u524d\u5237\u76d8\uff0c\u90a3\u4e48\u5728\u6062\u590d\u7684 Redo \u9636\u6bb5\uff0c\u8fd9\u4e9b\u4fee\u6539\u7684\u65e5\u5fd7\u8bb0\u5f55\u4ecd\u7136\u9700\u8981\u88ab\u5e94\u7528\u5230\u8be5\u9875\u9762\u4e0a\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u6301\u4e45\u6027\u548c\u4e00\u81f4\u6027\u3002Redo \u7684\u4f9d\u636e\u662f\u65e5\u5fd7\u8bb0\u5f55\u548c\u9875\u9762\u4e0a\u5b58\u50a8\u7684 PageLSN\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u68c0\u67e5\u70b9\u65f6\u523b\u7684\u810f\u9875\u8868\u3002</p> <p>b. RecLSN \u662f\u5728 ARIES \u7b97\u6cd5\u7684\u5206\u6790\u9636\u6bb5\u786e\u5b9a\u7684\u4e00\u4e2a\u975e\u5e38\u5173\u952e\u7684\u65e5\u5fd7\u5e8f\u5217\u53f7\u3002\u5b83\u4ee3\u8868\u4e86 Redo \u9636\u6bb5\u5fc5\u987b\u5f00\u59cb\u5411\u524d\u626b\u63cf\u65e5\u5fd7\u7684\u6700\u65e9\u4f4d\u7f6e\u3002RecLSN \u7684\u503c\u901a\u5e38\u662f\u4ee5\u4e0b\u4e24\u8005\u4e2d\u7684\u8f83\u5c0f\u8005\uff1a\u68c0\u67e5\u70b9\u8bb0\u5f55\u4e2d\"\u4e8b\u52a1\u8868\"\u91cc\u6700\u65e9\u7684\u6d3b\u52a8\u4e8b\u52a1\u6240\u5bf9\u5e94\u7684\u7b2c\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN\u3002\u8fd9\u8868\u793a\u4efb\u4f55\u6bd4\u8fd9\u4e2a LSN \u66f4\u65e9\u7684\u3001\u7531\u5df2\u7ed3\u675f\u4e8b\u52a1\u5b8c\u6210\u7684\u4fee\u6539\uff0c\u5e94\u8be5\u90fd\u5df2\u7ecf\u6709\u673a\u4f1a\u5199\u5165\u78c1\u76d8\u4e86\u3002\u6216\u8005\u662f\u68c0\u67e5\u70b9\u8bb0\u5f55\u4e2d\"\u810f\u9875\u8868\"\u91cc\u6240\u6709\u810f\u9875\u7684 RecLSN \u5b57\u6bb5\u4e2d\u7684\u6700\u5c0f\u503c\u3002\u810f\u9875\u8868\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u4f1a\u8bb0\u5f55\u4e00\u4e2a RecLSN\uff0c\u8fd9\u4e2a RecLSN \u662f\u6307\u7b2c\u4e00\u6b21\u4f7f\u5f97\u8be5\u9875\u9762\u53d8\u810f\uff08\u5e76\u4e14\u8be5\u4fee\u6539\u53ef\u80fd\u672a\u5199\u5165\u78c1\u76d8\uff09\u7684\u65e5\u5fd7\u8bb0\u5f55\u7684 LSN\u3002\u53d6\u6240\u6709\u8fd9\u4e9b RecLSN \u7684\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u627e\u5230\u6700\u65e9\u7684\u53ef\u80fd\u9700\u8981\u91cd\u505a\u7684\u9875\u9762\u4fee\u6539\u3002</p> <p>RecLSN \u6700\u4e3b\u8981\u7684\u4f5c\u7528\u662f\uff0cARIES \u7684 Redo \u9636\u6bb5\u53ea\u9700\u8981\u4ece RecLSN \u6307\u5b9a\u7684\u4f4d\u7f6e\u5f00\u59cb\u5411\u524d\u626b\u63cf\u65e5\u5fd7\uff0c\u800c\u4e0d\u9700\u8981\u4ece\u65e5\u5fd7\u7684\u8d77\u70b9\u6216\u68c0\u67e5\u70b9\u7684\u8d77\u70b9\u5f00\u59cb\u626b\u63cf\u3002\u901a\u8fc7\u8df3\u8fc7\u4e00\u4e9b\u76f8\u5173\u4fee\u6539\u5df2\u7ecf\u5728\u78c1\u76d8\u4e2d\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0cARIES \u907f\u514d\u4e86\u8bfb\u53d6\u548c\u5206\u6790\u5927\u91cf\u53ef\u80fd\u5b8c\u5168\u4e0d\u9700\u8981\u91cd\u505a\u7684\u65e5\u5fd7\u4fe1\u606f\uff0c\u4ece\u800c\u663e\u8457\u51cf\u5c11\u4e86 Redo \u9636\u6bb5\u7684\u5de5\u4f5c\u91cf\u3002</p> answer <p>a. If a page is not in the checkpoint dirty page table at the beginning of the analysis pass, redo records prior to the checkpoint record need not be applied to it as it means that the page has been flushed to disk and been removed from the DirtyPageTable before the checkpoint. However, the page may have been updated after the checkpoint, which means it will appear in the dirty page table at the end of the analysis pass.</p> <p>For pages that appear in the checkpoint dirty page table,redo records prior to the checkpoint may also need to be applied.</p> <p>b. The RecLSN is an entry in the DirtyPageTable, which reflects the LSN at the end of the log when the page was added to DirtyPageTable. During the redo pass of the ARlES algorithm, if the LSN of the update log record encountered, is less than the RecLSN of the page in DirtyPageTable, then that record is not redone but skipped. Further, the redo pass starts at RedoLSN, which is the earliest of the RecLSNs among the entries in the checkpoint DirtyPageTable, since earlier log records would certainly not need to be redone. (If there are no dirty pages in the checkpoint, the RedoLSN is set to the LSN of thecheckpoint log record.)</p>"},{"location":"Computer_Science/DB/sql/","title":"SQL learning","text":"<p> \u7ea6 2007 \u4e2a\u5b57  20 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 10 \u5206\u949f</p> <p>Abstract</p> <p>\u63a8\u8350\u5927\u5bb6\u5728 B\u7ad9 \u770b GeekHour \u7684 SQL \u901f\u6210\u8bfe\u7a0b\uff0c\u8bb2\u7684\u5f88\u6e05\u695a\u3002</p> <p>\u8fd9\u91cc\u662f\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u3002</p> <p>sql(structured query language) \u662f\u4e00\u79cd\u5173\u7cfb\u578b\u6570\u636e\u5e93\u8bed\u8a00\u3002</p> <ul> <li>\u6570\u636e\u5b9a\u4e49\u8bed\u8a00 <code>CREATE</code>\u3001<code>DROP</code>\u3001<code>ALTER</code>\u3001<code>TRUNCATE</code></li> <li>\u6570\u636e\u64cd\u4f5c\u8bed\u8a00 <code>INSERT</code>\u3001<code>UPDATE</code>\u3001<code>DELETE</code>\u3001<code>CALL</code></li> <li>\u6570\u636e\u67e5\u8be2\u8bed\u8a00 <code>SELECT</code></li> <li>\u6570\u636e\u63a7\u5236\u8bed\u8a00 <code>GRANT</code>\u3001<code>REVOKE</code></li> </ul> <p><code>MySQL</code> \u4e2d\u7684\u6570\u636e\u7c7b\u578b\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e94\u4e2a\u5927\u7684\u7c7b\u522b\u3002\u5305\u62ec\u6570\u503c\u7c7b\u578b\u3001\u65e5\u671f\u548c\u65f6\u95f4\u7c7b\u578b\u3001\u5b57\u7b26\u4e32\u7c7b\u578b\u3001json\u7c7b\u578b\u548c\u7a7a\u95f4\u7c7b\u578b\u3002</p> <ul> <li> <p>\u6570\u503c\u7c7b\u578b\u5206\u4e3a\u6574\u6570\u7c7b\u578b\u548c\u6d6e\u70b9\u6570\u7c7b\u578b</p> <ul> <li>\u6574\u6570\u7c7b\u578b\u6839\u636e\u5360\u7528\u7684\u5b58\u50a8\u7a7a\u95f4\u7684\u4e0d\u540c\u5206\u4e3a <code>TINYINT</code> <code>SMALLINT</code> \u548c <code>BIGINT</code> \u5206\u522b\u5bf9\u5e941-8\u4e2a\u5b57\u8282\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e0d\u540c\u8303\u56f4\u7684\u6574\u6570\u3002</li> <li>\u6d6e\u70b9\u6570\u7c7b\u578b\u5206\u4e3a <code>FLOAT</code> \u548c <code>DOUBLE</code> \u5206\u522b\u5bf9\u5e944\u4e2a\u5b57\u8282\u548c8\u4e2a\u5b57\u8282\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e0d\u540c\u8303\u56f4\u7684\u6d6e\u70b9\u6570\u3002</li> </ul> </li> <li> <p>\u65e5\u671f\u548c\u65f6\u95f4\u7c7b\u578b\u5305\u62ec <code>DATE</code>\u3001<code>TIME</code>\u3001<code>DATETIME</code> \u548c <code>TIMESTAMP</code> ,\u5206\u522b\u5bf9\u5e94\u65e5\u671f\u3001\u65f6\u95f4\u3001\u65e5\u671f\u65f6\u95f4\u548c\u65f6\u95f4\u6233\u3002</p> </li> <li>\u5b57\u7b26\u4e32\u7c7b\u578b\u5305\u62ec <code>CHAR</code>\u3001<code>VARCHAR</code>\u3001<code>TEXT</code> \u548c <code>BLOB</code> \u7b49\u7b49\uff0c\u5206\u522b\u5bf9\u5e94\u5b9a\u957f\u5b57\u7b26\u4e32\u3001\u53d8\u957f\u5b57\u7b26\u4e32\u3001\u6587\u672c\u4ee5\u53ca\u4e8c\u8fdb\u5236\u6570\u636e\u3002</li> <li>\u6bd4\u8f83\u65b0\u7248\u7684 MySQL \u8fd8\u652f\u6301 json \u7c7b\u578b\u548c\u70b9\u7ebf\u7a7a\u95f4\u7b49\u51e0\u4f55\u7c7b\u578b\u3002</li> </ul>"},{"location":"Computer_Science/DB/sql/#_1","title":"\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c","text":"<ul> <li><code>DESC player;</code> \u7528\u4e8e\u67e5\u770b\u8868\u7684\u7ed3\u6784\uff0c<code>DESC</code> \u662f <code>describe</code> \u7684\u7f29\u5199\u3002</li> <li><code>ALTER TABLE player MODIFY COLUMN name VARCHAR(200);</code> \u7528\u4e8e\u4fee\u6539\u8868\u4e2d\u7684\u5217\u3002</li> <li><code>ALTER TABLE player RENAME COLUMN name TO nick_name;</code> \u7528\u4e8e\u4fee\u6539\u5217\u540d\u3002</li> <li><code>ALTER TABLE player ADD COLUMN last_login DATETIME;</code> \u7528\u4e8e\u6dfb\u52a0\u5217\u3002</li> <li><code>ALTER TABLE player DROP COLUMN last_login;</code> \u7528\u4e8e\u5220\u9664\u5217\u3002</li> <li><code>DROP TABLE player;</code> \u7528\u4e8e\u5220\u9664\u8868\u3002</li> </ul>"},{"location":"Computer_Science/DB/sql/#_2","title":"\u6570\u636e\u7684\u589e\u5220\u67e5\u6539","text":"<p><code>INSERT INTO player(id, name, level, exp, gold) VALUES(1, '\u5f20\u4e09', 1,1,1);</code> \u7528\u4e8e\u63d2\u5165\u6570\u636e\u3002\u5982\u679c\u8868\u540d\u540e\u9762\u7684\u62ec\u53f7\u4e2d\u5305\u62ec\u4e86\u6240\u6709\u7684\u5217\uff0c\u5e76\u4e14\u987a\u5e8f\u4e5f\u548c\u8868\u7ed3\u6784\u4fdd\u6301\u4e00\u81f4\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u62ec\u53f7\u4ee5\u53ca\u5b83\u91cc\u9762\u7684\u5217\u540d\u5c31\u90fd\u53ef\u4ee5\u7701\u7565\u6389\uff0c\u76f4\u63a5\u5728\u8868\u540d\u540e\u9762\u52a0\u4e0a <code>VALUES</code> \u5173\u952e\u5b57\uff0c\u7136\u540e\u52a0\u4e0a\u8981\u63d2\u5165\u7684\u6570\u636e\u5373\u53ef\u3002\u4e5f\u53ef\u4ee5\u5199\u4e0a\u90e8\u5206\u5217\u7684\u540d\u79f0\uff0c\u8fd9\u6837\u6ca1\u6709\u5199\u51fa\u6765\u7684\u5217\u4f1a\u4f7f\u7528\u5efa\u8868\u65f6\u8bbe\u7f6e\u7684\u9ed8\u8ba4\u503c\u3002</p> <p><code>SELECT * FROM player;</code> \u7528\u4e8e\u67e5\u8be2\u6570\u636e\u3002<code>SELECT</code> \u5173\u952e\u5b57\u540e\u9762\u53ef\u4ee5\u8ddf\u4e00\u4e2a\u661f\u53f7\uff0c\u8868\u793a\u67e5\u8be2\u6240\u6709\u7684\u5217\u3002\u4e5f\u53ef\u4ee5\u8ddf\u5177\u4f53\u7684\u5217\u540d\uff0c\u8868\u793a\u67e5\u8be2\u6307\u5b9a\u7684\u5217\u3002</p> <p><code>INSERT INTO player(id, name) VALUES(2, '\u674e\u56db'),(3, '\u738b\u4e94');</code> \u7528\u4e8e\u63d2\u5165\u591a\u6761\u6570\u636e\u3002</p> <p><code>ALTER TABLE player MODIFY LEVEL INT DEFAULT 1;</code> \u7528\u4e8e\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u3002</p> <p><code>UPDATE player SET level = 1 WHERE name = '\u674e\u56db';</code> \u7528\u4e8e\u66f4\u65b0\u6570\u636e\u3002</p> <p><code>DELETE FROM player WHERE name = '\u674e\u56db';</code> \u7528\u4e8e\u5220\u9664\u6570\u636e\u3002</p>"},{"location":"Computer_Science/DB/sql/#_3","title":"\u6570\u636e\u7684\u5bfc\u5165\u5bfc\u51fa","text":"<p><code>mysqldump -u root -p game player &gt; player.sql</code> \u7528\u4e8e\u5bfc\u51fa\u6570\u636e\u3002<code>-u</code> \u540e\u9762\u8ddf\u7684\u662f\u7528\u6237\u540d\uff0c<code>-p</code> \u540e\u9762\u8ddf\u7684\u662f\u5bc6\u7801\uff0c<code>game</code> \u662f\u6570\u636e\u5e93\u540d\uff0c<code>player</code> \u662f\u8868\u540d\uff0c<code>player.sql</code> \u662f\u5bfc\u51fa\u7684\u6587\u4ef6\u540d\u3002\u8868\u7684\u540d\u79f0\u53ef\u4ee5\u7701\u7565\uff0c\u8fd9\u6837\u4f1a\u5bfc\u51fa\u6574\u4e2a\u6570\u636e\u5e93\u3002</p> <p><code>mysql -u root -p game &lt; player.sql</code> \u7528\u4e8e\u5bfc\u5165\u6570\u636e\u3002<code>-u</code> \u540e\u9762\u8ddf\u7684\u662f\u7528\u6237\u540d\uff0c<code>-p</code> \u540e\u9762\u8ddf\u7684\u662f\u5bc6\u7801\uff0c<code>game</code> \u662f\u6570\u636e\u5e93\u540d\uff0c<code>player.sql</code> \u662f\u5bfc\u5165\u7684\u6587\u4ef6\u540d\u3002</p>"},{"location":"Computer_Science/DB/sql/#_4","title":"\u5e38\u7528\u8bed\u53e5","text":""},{"location":"Computer_Science/DB/sql/#select","title":"<code>SELECT</code>","text":"<p><code>SELECT * FROM player WHERE level &gt; 1 AND level &lt; 5;</code> \u7528\u4e8e\u67e5\u8be2 level \u5927\u4e8e 1 \u5e76\u4e14\u5c0f\u4e8e 5 \u7684\u6570\u636e\u3002</p> <p>\u4f18\u5148\u7ea7\u987a\u5e8f\u662f <code>()</code> &gt; <code>NOT</code> &gt; <code>AND</code> &gt; <code>OR</code>\u3002</p>"},{"location":"Computer_Science/DB/sql/#in","title":"<code>IN</code>","text":"<p>\u53ef\u4ee5\u7528 <code>IN</code> \u6307\u5b9a\u591a\u4e2a\u503c\u3002</p> <p><code>SELECT * FROM player WHERE level IN (1, 2, 3);</code> \u7528\u4e8e\u67e5\u8be2 level \u5728 1\u30012\u30013 \u4e2d\u7684\u6570\u636e\u3002</p>"},{"location":"Computer_Science/DB/sql/#between","title":"<code>BETWEEN</code>","text":"<p>\u53ef\u4ee5\u7528 <code>BETWEEN</code> \u548c <code>AND</code> \u6307\u5b9a\u4e00\u4e2a\u8303\u56f4\u3002</p> <p><code>SELECT * FROM player WHERE level BETWEEN 1 AND 3;</code> \u7528\u4e8e\u67e5\u8be2 level \u5728 1 \u5230 3 \u4e4b\u95f4\u7684\u6570\u636e\u3002\u5305\u62ec 1 \u548c 3\u3002</p>"},{"location":"Computer_Science/DB/sql/#not","title":"<code>NOT</code>","text":"<p>\u53ef\u4ee5\u7528 <code>NOT</code> \u53d6\u53cd\u3002</p> <p><code>SELECT * FROM player WHERE level NOT BETWEEN 1 AND 3;</code> \u7528\u4e8e\u67e5\u8be2 level \u4e0d\u5728 1 \u5230 3 \u4e4b\u95f4\u7684\u6570\u636e\u3002</p>"},{"location":"Computer_Science/DB/sql/#like-and-regexp","title":"<code>LIKE</code> and <code>REGEXP</code>","text":"<p>\u53ef\u4ee5\u7528 <code>LIKE</code> \u6a21\u7cca\u67e5\u8be2\u3002</p> <p><code>SELECT * FROM player WHERE name LIKE '\u674e%';</code> \u7528\u4e8e\u67e5\u8be2 name \u4ee5 \u674e \u5f00\u5934\u7684\u6570\u636e\u3002\u767e\u5206\u53f7\u8868\u793a\u4efb\u610f\u5b57\u7b26\uff0c\u4e0b\u5212\u7ebf\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u3002</p> <p>\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u5e38\u7528\u901a\u914d\u7b26</p> <ul> <li><code>.</code> \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26</li> <li><code>^</code> \u5339\u914d\u5b57\u7b26\u4e32\u7684\u5f00\u59cb</li> <li><code>$</code> \u5339\u914d\u5b57\u7b26\u4e32\u7684\u7ed3\u675f</li> <li><code>[abc]</code> \u5339\u914d\u62ec\u53f7\u5185\u7684\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26</li> <li><code>[a-z]</code> \u8303\u56f4\u5185\u7684\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26</li> <li><code>A|B</code> \u5339\u914d A \u6216 B</li> </ul> <p><code>SELECT * FROM player WHERE name REGEXP '^\u674e.$';</code> \u7528\u4e8e\u67e5\u8be2 name \u4ee5 \u674e \u5f00\u5934\u53ea\u6709\u4e24\u4e2a\u5b57\u7684\u6570\u636e\u3002</p> <p>\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u6ca1\u6709 <code>%</code> \u548c <code>_</code>\uff0c\u8fd9\u662f\u5728 <code>LIKE</code> \u4e2d\u7684\u7528\u6cd5\u3002</p> Question <ol> <li> <p>\u67e5\u627e\u90ae\u4ef6\u5730\u5740\u4ee5 zhangsan \u5f00\u5934\u7684\u73a9\u5bb6\u3002</p> </li> <li> <p>\u67e5\u627e\u90ae\u4ef6\u5730\u5740\u4ee5 a/b/c \u5f00\u5934\u7684\u73a9\u5bb6\u3002</p> </li> <li> <p>\u67e5\u627e\u90ae\u4ef6\u5730\u5740\u4ee5 net \u7ed3\u5c3e\u7684\u73a9\u5bb6\u3002</p> </li> </ol> answer <ol> <li><code>SELECT * FROM player WHERE email REGEXP '^zhangsan';</code></li> </ol> <p><code>SELECT * FROM player WHERE email LIKE 'zhangsan%';</code></p> <ol> <li><code>SELECT * FROM player WHERE email REGEXP '^[abc];</code></li> </ol> <p><code>SELECT * FROM player WHERE email REGEXP '^[a-c];</code></p> <ol> <li><code>SELECT * FROM player WHERE email REGEXP 'net$';</code></li> </ol> <p><code>SELECT * FROM player WHERE email LIKE '%net';</code></p>"},{"location":"Computer_Science/DB/sql/#is-null","title":"<code>IS NULL</code>","text":"<p>\u53ef\u4ee5\u7528 <code>IS NULL</code> \u67e5\u8be2\u7a7a\u503c\u3002</p> <p><code>SELECT * FROM player WHERE email IS NULL;</code> \u7528\u4e8e\u67e5\u8be2 email \u4e3a\u7a7a\u7684\u6570\u636e\u3002</p> <p>\u4e0d\u80fd\u4f7f\u7528 <code>= null</code>\uff0c\u56e0\u4e3a null \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u503c\uff0c\u8868\u793a\u672a\u77e5\uff0c\u4e0e\u5176\u672c\u8eab\u4e5f\u4e0d\u76f8\u7b49\u3002</p>"},{"location":"Computer_Science/DB/sql/#order-by","title":"<code>ORDER BY</code>","text":"<p>\u53ef\u4ee5\u7528 <code>ORDER BY</code> \u6392\u5e8f\u3002</p> <p><code>SELECT * FROM player ORDER BY level;</code> \u7528\u4e8e\u67e5\u8be2 level \u6392\u5e8f\u7684\u6570\u636e\u3002\u9ed8\u8ba4\u662f\u5347\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u663e\u5f0f\u5730\u52a0\u4e0a\u4e00\u4e2a <code>ASC</code>\u3002</p> <p><code>SELECT * FROM player ORDER BY level DESC;</code> \u7528\u4e8e\u67e5\u8be2 level \u964d\u5e8f\u7684\u6570\u636e\u3002</p> <p><code>SELECT * FROM player ORDER BY level DESC, exp ASC;</code> \u7528\u4e8e\u67e5\u8be2 level \u964d\u5e8f\uff0cexp \u5347\u5e8f\u7684\u6570\u636e\u3002</p> <p><code>SELECT * FROM player ORDER BY 5 DESC;</code> \u7528\u4e8e\u67e5\u8be2\u7b2c 5 \u5217(\u4e5f\u5373 level \u5217)\u6392\u5e8f\u7684\u6570\u636e\u3002</p>"},{"location":"Computer_Science/DB/sql/#and-group-by","title":"\u805a\u5408\u51fd\u6570 and <code>GROUP BY</code>","text":"<p>\u5e38\u7528\u7684\u805a\u5408\u51fd\u6570</p> <ul> <li><code>AVG()</code> \u5e73\u5747\u503c</li> <li><code>COUNT()</code> \u8ba1\u6570</li> <li><code>MAX()</code> \u6700\u5927\u503c</li> <li><code>MIN()</code> \u6700\u5c0f\u503c</li> <li><code>SUM()</code> \u6c42\u548c</li> </ul> <p>\u53ef\u4ee5\u7528 <code>GROUP BY</code> \u5206\u7ec4\u3002</p> <p><code>SELECT AVG(level) FROM player;</code> \u7528\u4e8e\u67e5\u8be2 level \u7684\u5e73\u5747\u503c\u3002</p> <p><code>SELECT sex, count(*) from player group by sex;</code> \u7528\u4e8e\u67e5\u8be2\u6bcf\u4e2a\u6027\u522b\u7684\u6570\u91cf\u3002</p>"},{"location":"Computer_Science/DB/sql/#having","title":"<code>HAVING</code>","text":"<p><code>HAVING</code> \u53ef\u4ee5\u7528\u4e8e\u5bf9\u5206\u7ec4\u540e\u7684\u7ed3\u679c\u8fdb\u884c\u8fc7\u6ee4\u3002</p> <p><code>SELECT level, count(level) FROM player GROUP BY level HAVING count(level) &gt; 10;</code> \u7528\u4e8e\u67e5\u8be2 level \u5927\u4e8e 10 \u7684\u6570\u91cf\u3002</p> <p><code>SELECT level, count(level) FROM player GROUP BY level HAVING count(level) &gt; 10 ORDER BY count(level) DESC;</code> \u7528\u4e8e\u67e5\u8be2 level \u5927\u4e8e 10 \u7684\u6570\u91cf\uff0c\u5e76\u6309\u6570\u91cf\u964d\u5e8f\u6392\u5e8f\u3002</p> Question <p>\u7edf\u8ba1\u6bcf\u4e2a\u59d3\u6c0f\u73a9\u5bb6\u7684\u6570\u91cf\uff0c\u5e76\u5c06\u7ed3\u679c\u6309\u7167\u6570\u91cf\u6765\u964d\u5e8f\u6392\u5217\uff0c\u53ea\u663e\u793a\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e 5 \u7684\u59d3\u6c0f\u3002</p> answer <pre><code>SELECT SUBSTR(name, 1, 1) AS surname, COUNT(surname) FROM player GROUP BY surname HAVING count(surname) &gt;= 5 ORDER BY COUNT(*) DESC;\n</code></pre>"},{"location":"Computer_Science/DB/sql/#limit","title":"<code>LIMIT</code>","text":"<p>\u53ef\u4ee5\u7528 <code>LIMIT</code> \u9650\u5236\u8fd4\u56de\u7684\u884c\u6570\u3002</p> <pre><code>SELECT SUBSTR(name, 1, 1) AS surname, COUNT(surname) \nFROM player \nGROUP BY surname \nHAVING count(surname) &gt;= 5 \nORDER BY COUNT(*) DESC\nLIMIT 3, 3;\n</code></pre> <ul> <li>\u5982\u679c\u53ea\u6709\u4e00\u4e2a 3 \u90a3\u4e48\u5c31\u662f\u8fd4\u56de\u524d 3 \u540d\u3002</li> <li>\u5982\u679c\u662f\u4e24\u4e2a\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a 3 \u662f\u504f\u79fb\u91cf\uff0c\u8868\u793a\u4ece\u7b2c 4 \u540d\u5f00\u59cb\u3002\u7b2c\u4e8c\u4e2a 3 \u662f\u8fd4\u56de\u7684\u6570\u91cf\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u8fd4\u56de\u7b2c 4 \u5230\u7b2c 6 \u540d\u3002</li> </ul>"},{"location":"Computer_Science/DB/sql/#distinct","title":"<code>DISTINCT</code>","text":"<p>\u53ef\u4ee5\u7528 <code>DISTINCT</code> \u53bb\u91cd\u3002</p> <p><code>SELECT DISTINCT name FROM player;</code> \u7528\u4e8e\u67e5\u8be2\u6240\u6709\u4e0d\u540c\u7684\u540d\u5b57\u3002</p>"},{"location":"Computer_Science/DB/sql/#union","title":"<code>UNION</code>","text":"<p>\u53ef\u4ee5\u7528 <code>UNION</code> \u5408\u5e76\u4e24\u4e2a\u67e5\u8be2\u7ed3\u679c\u3002</p> <pre><code>SELECT * FROM player WHERE level &gt; 10\nUNION\nSELECT * FROM player WHERE exp BETWEEN 10000 AND 20000;\n</code></pre> <p><code>UNION</code> \u4f1a\u81ea\u52a8\u53bb\u91cd\uff0c\u5982\u679c\u4e0d\u60f3\u53bb\u91cd\u53ef\u4ee5\u7528 <code>UNION ALL</code>\u3002</p> <p><code>UNION</code> \u548c <code>OR</code> \u6709\u70b9\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e <code>UNION</code> \u662f\u7528\u6765\u5408\u5e76\u4e24\u4e2a\u67e5\u8be2\u7ed3\u679c\u7684\uff0c\u4e5f\u5373\u662f\u53d6\u4e24\u4e2a\u67e5\u8be2\u7ed3\u679c\u7684\u5e76\u96c6\u3002</p>"},{"location":"Computer_Science/DB/sql/#intersect","title":"<code>INTERSECT</code>","text":"<p>\u53ef\u4ee5\u7528 <code>INTERSECT</code> \u67e5\u8be2\u4e24\u4e2a\u67e5\u8be2\u7ed3\u679c\u7684\u4ea4\u96c6\u3002</p> <pre><code>SELECT * FROM player WHERE level &gt; 10\nINTERSECT\nSELECT * FROM player WHERE exp BETWEEN 10000 AND 20000;\n</code></pre>"},{"location":"Computer_Science/DB/sql/#except","title":"<code>EXCEPT</code>","text":"<p>\u53ef\u4ee5\u7528 <code>EXCEPT</code> \u67e5\u8be2\u4e24\u4e2a\u67e5\u8be2\u7ed3\u679c\u7684\u5dee\u96c6\u3002</p> <pre><code>SELECT * FROM player WHERE level &gt; 10\nEXCEPT\nSELECT * FROM player WHERE exp BETWEEN 10000 AND 20000;\n</code></pre>"},{"location":"Computer_Science/DB/sql/#_5","title":"\u5b50\u67e5\u8be2","text":"<p><code>SELECT * FROM player where level &gt; SELECT AVG(level) FROM player;</code></p> <p><code>CREATE TABLE new_player SELECT * FROM player WHERE level &gt; 10;</code></p> <p><code>SELECT * FROM new_player;</code></p> <p><code>INSERT INTO new_player SELECT * FROM player WHERE level BETWEEN 1 AND 5;</code></p> <p><code>SELECT EXISITS(SELECT * FROM player WHERE level &gt; 10);</code></p> <p>\u4e0d\u5b58\u5728\u65f6\u8fd4\u56de 0\uff0c\u5b58\u5728\u65f6\u8fd4\u56de 1\u3002</p>"},{"location":"Computer_Science/DB/sql/#_6","title":"\u8868\u5173\u8054","text":"<p>\u5185\u8fde\u63a5\u53ea\u8fd4\u56de\u4e24\u4e2a\u8868\u4e2d\u90fd\u6709\u7684\u6570\u636e\u3002</p> <p>\u5de6\u8fde\u63a5\u5c31\u662f\u8fd4\u56de\u5de6\u8868\u4e2d\u6240\u6709\u6570\u636e\u548c\u53f3\u8868\u4e2d\u5339\u914d\u7684\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u7684\u6570\u636e\uff0c\u53f3\u8868\u4e2d\u7684\u6570\u636e\u4e3a NULL\u3002</p> <p>\u53f3\u8fde\u63a5\u5c31\u662f\u8fd4\u56de\u53f3\u8868\u4e2d\u6240\u6709\u6570\u636e\u548c\u5de6\u8868\u4e2d\u5339\u914d\u7684\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u7684\u6570\u636e\uff0c\u5de6\u8868\u4e2d\u7684\u6570\u636e\u4e3a NULL\u3002</p> <pre><code>SELECT * \nFROM player\nINNER JOIN equip\nON player.id = equip.player_id;\n</code></pre>"},{"location":"Computer_Science/DB/sql/#_7","title":"\u7d22\u5f15","text":"<p>\u7d22\u5f15\u662f\u4e00\u79cd\u7528\u6765\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u5b9a\u4f4d\u5230\u60f3\u8981\u7684\u6570\u636e\u3002\u5982\u679c\u6ca1\u6709\u7d22\u5f15\u5c31\u53ea\u80fd\u4ece\u5934\u5f00\u59cb\u904d\u5386\uff0c\u76f4\u5230\u627e\u5230\u60f3\u8981\u7684\u6570\u636e\u3002</p> <p><code>CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX idx_player_level ON player(level);</code></p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u4e3a\u4e00\u5f20\u8868\u7684\u4e3b\u952e\u5b57\u6bb5\u6216\u8005\u7ecf\u5e38\u7528\u6765\u67e5\u8be2\u7684\u5b57\u6bb5\u7528\u6765\u7d22\u5f15\u3002</p> <p><code>DROP INDEX idx_player_level ON player;</code></p> <p><code>ALTER TABLE index_player ADD INDEX idx_player_level(level);</code></p>"},{"location":"Computer_Science/DB/sql/#_8","title":"\u89c6\u56fe","text":"<p>\u89c6\u56fe\u662f\u4e00\u79cd\u865a\u62df\u8868\uff0c\u5b83\u672c\u8eab\u4e0d\u5b58\u50a8\u6570\u636e\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u67e5\u8be2\u8bed\u53e5\u4fdd\u5b58\u5728\u6570\u636e\u5b57\u5178\u4e2d\u3002\u6839\u636e\u67e5\u8be2\u8bed\u53e5\u7684\u5b9a\u4e49\u6765\u52a8\u6001\u5730\u751f\u6210\u6570\u636e\u3002</p> <p><code>CREATE VIEW top10 AS SELECT * FROM player ORDER BY level DESC LIMIT 10;</code></p> <p>\u89c6\u56fe\u4e2d\u7684\u6570\u636e\u662f\u52a8\u6001\u7684\uff0c\u4f1a\u968f\u7740\u8868\u7684\u6570\u636e\u53d8\u5316\u800c\u53d8\u5316\u3002</p> <p><code>ALTER VIEW top10 AS SELECT * FROM player ORDER BY level LIMIT 10;</code></p> <p><code>DROP VIEW top10;</code></p>"},{"location":"Computer_Science/DB/%E7%BF%BB%E8%AF%91/","title":"\u6d59\u5927\u5ba3\u4f20\u6587\u7a3f","text":"<p> \u7ea6 862 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f</p> <p>(\u8f85\u52a9\u5b57\u5e55\uff1a\u56fd\u6709\u6210\u5747\uff0c\u5728\u6d59\u4e4b\u6ee8\u3002\u6614\u8a00\u6c42\u662f\uff0c\u5b9e\u542f\u800c\u6c42\u771f)</p> <p>A national university is standing by River Qiantang. Its eternal philosophy is seeking truth from facts.</p> <p>\u8bde\u751f\u4e8e\u516c\u51431897\u5e74\uff0c\u4e0e\u676d\u5dde\u897f\u6e56\u4e3a\u4f34\uff0c\u51e0\u7ecf\u98ce\u96e8\u53d8\u8fc1\uff0c\u6d59\u6c5f\u5927\u5b66\u8d70\u8fc7\u6574\u6574\u4e00\u767e\u4e8c\u5341\u5e74\u7684\u8270\u8f9b\u4e0e\u8363\u5149\uff0c\u5982\u4eca\u6b63\u671d\u6c14\u84ec\u52c3\u3001\u8e0f\u6d6a\u524d\u884c\uff0c\u4e3a\u4e2d\u56fd\u5927\u5730\u548c\u4eba\u7c7b\u793e\u4f1a\u6ce8\u5165\u6c42\u662f\u4e4b\u57fa\u56e0\u3001\u521b\u65b0\u4e4b\u6e90\u6cc9\u3002</p> <p>Born in 1897 at the West Lake, after hardships and glory for 120 years, Zhejiang University is marching vigorously ahead, infusing the philosophy of seeking truth and innovation into the Chinese land and human society. </p> <p>\u6d59\u5927\u4eba\u7684\u8840\u8109\u4e2d\uff0c\u6c42\u662f\u521b\u65b0\u7684\u7075\u9b42\u751f\u751f\u4e0d\u606f\uff0c\u4e0e\u65f6\u4ee3\u540c\u9891\u5171\u632f\uff0c\u594f\u51fa\u5f3a\u97f3\u3002\u6d77\u7eb3\u6c5f\u6cb3\u3001\u542f\u771f\u539a\u5fb7\u3001\u5f00\u7269\u524d\u6c11\u3001\u6811\u6211\u90a6\u56fd\uff0c\u8fd9\u662f60\u4e07\u6821\u53cb\u548c\u5e08\u751f\u5171\u540c\u7684\u601d\u60f3\u8d22\u5bcc\uff0c\u5171\u540c\u7684\u7acb\u8eab\u4e4b\u672c\uff0c\u5171\u540c\u7684\u7cbe\u795e\u8ffd\u6c42\u3002</p> <p>In our blood, the spirit of seeking truth and innovation runs ceaselessly, making a resonant sound with the times. Embracing all rivers in the vast sea, seeking truth and being virtuous. Searching truth to lead the people, and rejuvenating Chinese nation. These ideas constitute the mutual wealth and common pursuit of 600,000 community members. </p> <p>\u6c42\u662f\u56ed\u7684\u6d53\u836b\u4e2d\uff0c\u7406-\u5de5-\u519c-\u533b\uff0c\u6587-\u53f2-\u54f2-\u827a\uff0c\u7ecf-\u7ba1-\u6cd5-\u6559\uff0c\u5b66\u79d1\u95e8\u7c7b\u9f50\u5168\uff0c\u6c47\u805a\u4ea4\u7ec7\uff0c\u539a\u79ef\u8584\u53d1\u3002\u4e00\u4ee3\u53c8\u4e00\u4ee3\u7cbe\u82f1\u5b66\u4eba\uff0c\u5728\u201c\u6d59\u91cc\u201d\u8015\u8018\u65b0\u77e5\uff0c\u521b\u65b0\u6280\u672f\uff0c\u4f20\u64ad\u6587\u5316\uff0c\u4f20\u627f\u6587\u660e\u3002\u4e00\u9879\u53c8\u4e00\u9879\u5b66\u672f\u6210\u679c\uff0c\u4ece\u201c\u6d59\u91cc\u201d\u51fa\u53d1\u670d\u52a1\u793e\u4f1a\uff0c\u8d70\u5411\u4e16\u754c\uff0c\u5f15\u9886\u672a\u6765\u3002</p> <p>We own a complete range of disciplines, science ,engineering ,agriculture and medicine, humanities, history, philosophy and arts, economics,management ,law and education. Interdisciplinary studies are progressing and accumulating. Elite scholars cultivate knowledge, make innovation, disseminate culture and civilization. Academic achievements serve the society, go global and lead the future. </p> <p>\u8fc7\u53bb\u4e94\u5e74\u4e2dSCI\u56fd\u9645\u5408\u4f5c\u8bba\u6587\u6570\u3001\u5341\u5e74\u7d2f\u8ba1\u5f15\u6587\u6570\u5c45\u5168\u56fd\u9ad8\u6821\u7b2c\u4e00\uff1b\u5728\u56fd\u9645\u4e0a\u6700\u5177\u5f71\u54cd\u529b\u7684\u5b66\u672f\u673a\u6784\u8bc4\u4ef7\u6570\u636e\u5e93ESI\u4e2d\uff0c18\u4e2a\u5b66\u79d1\u8fdb\u5165\u4e16\u754c\u5b66\u672f\u673a\u6784\u524d1%\u30017\u4e2a\u5b66\u79d1\u8fdb\u5165\u4e16\u754c\u524d100\u4f4d\u30014\u4e2a\u5b66\u79d1\u8fdb\u5165\u4e16\u754c\u524d50\u4f4d\uff0c\u6700\u65b0ESI\u5927\u5b66\u7efc\u5408\u6392\u540d\u8dc3\u5c45\u5168\u56fd\u9ad8\u6821\u7b2c\u4e8c\uff1b\u53d1\u660e\u4e13\u5229\u6388\u6743\u6570\u548c\u8f6c\u5316\u7387\u8fde\u7eed\u5341\u5e74\u5c45\u5168\u56fd\u9ad8\u6821\u7b2c\u4e00\u3002</p> <p>In the past five years, No.1 among Chinese universities in SCl papers, papers of international cooperation and10-year accumulative citations; </p> <p>\u767e\u5eff\u5e74\u7684\u7825\u783a\u6d17\u793c\uff0c\u8fd9\u7247\u5174\u5b66\u80b2\u4eba\u4e4b\u5730\u6108\u53d1\u95ea\u4eae\u3002\u5728\u65f6\u4ee3\u524d\u884c\u7684\u6b65\u4f10\u91cc\uff0c\u5728\u8ffd\u6c42\u5353\u8d8a\u7684\u5f81\u9014\u4e2d\uff0c\u6d59\u6c5f\u5927\u5b66\u521b\u9020\u5bbd\u9614\u800c\u4f18\u8d28\u7684\u6210\u957f\u7a7a\u95f4\uff0c\u52aa\u529b\u57f9\u517b\u5177\u6709\u56fd\u9645\u89c6\u91ce\u7684\u9ad8\u7d20\u8d28\u521b\u65b0\u4eba\u624d\u548c\u672a\u6765\u9886\u5bfc\u8005\u3002</p> <p>\u52e4\u5b66 \u4fee\u5fb7 \u660e\u8fa8 \u7b03\u5b9e</p> <p>\u4f4d\u4e8e\u5d1b\u8d77\u4e2d\u7684\u4e2d\u56fd\u201c\u7845\u8c37\u201d\u2014\u2014\u676d\u5dde\u57ce\u897f\u79d1\u521b\u5927\u8d70\u5eca\u7684\u8d77\u70b9\uff0c\u6d59\u6c5f\u5927\u5b66\u662f\u201c\u6392\u5934\u5175\u201d\uff0c\u66f4\u662f\u201c\u53d1\u52a8\u673a\u201d\u3002\u8ba9\u77e5\u8bc6\u521b\u9020\u4ef7\u503c\uff0c\u8ba9\u667a\u6167\u66f4\u52a0\u9ad8\u8fdc\uff0c\u539a\u690d\u521b\u4e1a\u6c83\u571f\uff0c\u52c7\u7acb\u521b\u65b0\u6f6e\u5934\uff0c\u521b\u65b0\u521b\u4e1a\u5df2\u6210\u4e3a\u5979\u5411\u4e16\u754c\u5c55\u793a\u81ea\u5df1\u7684\u4e00\u5f20\u91d1\u540d\u7247\u3002</p> <p>\u5168\u56fd\u9996\u5c4a\u201c\u4e92\u8054\u7f51+\u201d\u521b\u4e1a\u5927\u8d5b\u603b\u6210\u7ee9\u7b2c\u4e00\uff1b\u5168\u7403\u91cd\u5927\u6311\u6218\u5cf0\u4f1a\u552f\u4e00\u91d1\u5956\uff1b2014\u5e74\u4ee5\u6765\u5728\u6821\u5b66\u751f\u521b\u4e1a\u516c\u53f8\u878d\u8d44\u603b\u989d\u903e4\u4ebf\u5143\u4eba\u6c11\u5e01\uff1b\u6bd5\u4e1a\u4e94\u5e74\u5185\u5927\u5b66\u751f\u521b\u4e1a\u7387\u5c45\u5168\u56fd\u9ad8\u6821\u524d\u5217\uff1b\u6821\u53cb\u521b\u529e\u4f01\u4e1a\u4e2d\u5df2\u6709160\u591a\u5bb6\u516c\u53f8\u4e0a\u5e02\u3002</p> <p>\u8fdc\u773a\u524d\u65b9\uff0c\u5e0c\u671b\u4e0e\u96c4\u5fc3\u540c\u5728\u3002\u81f4\u529b\u521b\u529e\u4e2d\u56fd\u548c\u4e16\u754c\u6700\u597d\u7684\u5927\u5b66\u4e4b\u4e00\uff0c\u4eca\u65e5\u6d59\u5927\uff0c\u6b63\u4ee5\u66f4\u4ece\u5bb9\u7684\u59ff\u6001\u8fc8\u5411\u672a\u6765\uff0c\u8feb\u8fd1\u68a6\u60f3\u3002</p> <p>\u6c42\u662f\u521b\u65b0</p>"},{"location":"Computer_Science/OOP/","title":"OOP notes","text":"<p> \u7ea6 46 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f</p> <p>\u8bfe\u7a0b\u4fe1\u606f</p> <ul> <li>\u667a\u4e91\u94fe\u63a5\uff1a\ud83d\udd17</li> <li>\u6388\u8bfe\uff1a\u9648\u7fd4</li> <li>\u6559\u6750\uff1aThe C++ Programming Language, Third Edition (Bjarne Stroustrup)</li> <li>PPT\uff1a [\ud83d\udcc1]</li> <li>\u4f5c\u4e1a\uff1a[\ud83d\udcdd]</li> <li>\u6211\u7684\u7b14\u8bb0\uff1a\ud83d\udcdd</li> <li>\u5386\u5e74\u9898\uff1a</li> <li>\u590d\u4e60\u8d44\u6599\uff1a</li> </ul> <p>\u5b66\u4e60\u5efa\u8bae</p> <ol> <li>\u5237\u9898</li> </ol>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/","title":"105 STL Algorithmsin Less Than an Hour","text":"<p>Abstract</p> <p>This is my note while learning the content of this course: 105 STL Algorithms in Less Than an Hour</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#105-stl-algorithms-in-less-than-an-hour","title":"105 STL Algorithms in Less Than an Hour","text":"<p> \u7ea6 3401 \u4e2a\u5b57  206 \u884c\u4ee3\u7801  5 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 20 \u5206\u949f</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#for_each","title":"<code>for_each</code>","text":"<pre><code>UnaryFunc for_each( InputIt first, InputIt last, UnaryFunc f );\n</code></pre> <p>\u5bf9\u8303\u56f4 <code>[first, last)</code> \u4e2d\u6bcf\u4e2a\u8fed\u4ee3\u5668\u7684\u89e3\u5f15\u7528\u7ed3\u679c\u5e94\u7528\u7ed9\u5b9a\u7684\u4e00\u5143\u51fd\u6570\u5bf9\u8c61 <code>f</code>\u3002\u5ffd\u7565 <code>f</code> \u8fd4\u56de\u7684\u7ed3\u679c\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#heap","title":"<code>heap</code>","text":""},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#make_heap","title":"<code>make_heap</code>","text":"<pre><code>void make_heap( RandomIt first, RandomIt last );\nvoid make_heap( RandomIt first, RandomIt last, Compare comp );\n</code></pre> <p>\u5728\u8303\u56f4 <code>[first, last)</code> \u4e2d\u6784\u9020\u5806\u3002</p> <p>ATTENTION</p> <p>\u4e00\u822c\u793a\u4f8b\u4e2d <code>std::make_heap(v.begin(), v.end());</code> \u7684 <code>v.end()</code> \u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5b83\u6307\u5411\u5411\u91cf <code>v</code> \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>v.end()</code> \u6307\u5411\u7684\u662f\u5411\u91cf <code>v</code> \u7684\u7ed3\u675f\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u672c\u8eab\u3002</p> <p>1) \u6784\u9020\u5173\u4e8e <code>operator&lt;</code>(C++20 \u524d) / <code>std::less{}</code>(C++20 \u8d77) \u7684\u5806\u3002 2) \u6784\u9020\u5173\u4e8e <code>comp</code> \u7684\u5806\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#push_heap","title":"<code>push_heap</code>","text":"<pre><code>void push_heap( RandomIt first, RandomIt last );\nvoid push_heap( RandomIt first, RandomIt last, Compare comp );\n</code></pre> <p>\u5c06\u4f4d\u4e8e\u4f4d\u7f6e <code>last - 1</code> \u7684\u5143\u7d20\u63d2\u5165\u5230\u5806 <code>[first, last - 1)</code> \u4e2d\u3002\u63d2\u5165\u5143\u7d20\u540e\u7684\u5806\u5373\u662f <code>[first, last)</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#pop_heap","title":"<code>pop_heap</code>","text":"<pre><code>void pop_heap( RandomIt first, RandomIt last );\nvoid pop_heap( RandomIt first, RandomIt last, Compare comp );\n</code></pre> <p>\u4ea4\u6362\u5728\u4f4d\u7f6e <code>first</code> \u7684\u503c\u548c\u5728\u4f4d\u7f6e <code>last - 1</code> \u7684\u503c\uff0c\u5e76\u4f7f\u5f97\u5b50\u8303\u56f4 <code>[first, last - 1)</code> \u53d8\u4e3a\u5806\u3002\u8fd9\u62e5\u6709\u4ece\u5806 <code>[first, last)</code> \u79fb\u9664\u9996\u4e2a\u5143\u7d20\u7684\u6548\u679c\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#sort_heap","title":"<code>sort_heap</code>","text":"<pre><code>void sort_heap( RandomIt first, RandomIt last );\nvoid sort_heap( RandomIt first, RandomIt last, Compare comp );\n</code></pre> <p>\u5c06\u5806 <code>[first, last)</code> \u8f6c\u6362\u4e3a\u6709\u5e8f\u8303\u56f4\u3002\u4e0d\u518d\u7ef4\u6301\u5806\u7684\u6027\u8d28\u3002</p> <ul> <li>just like \u4e00\u76f4\u4f7f\u7528 <code>pop_heap</code> \u6765\u79fb\u9664\u5806\u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002</li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#sort","title":"<code>sort</code>","text":""},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#sort_1","title":"<code>sort</code>","text":"<pre><code>void sort( RandomIt first, RandomIt last );\nvoid sort( RandomIt first, RandomIt last, Compare comp );\n</code></pre> <p>\u4ee5\u975e\u964d\u5e8f\u6392\u5e8f\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u3002\u4e0d\u4fdd\u8bc1\u7ef4\u6301\u76f8\u7b49\u5143\u7d20\u7684\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#partial_sort","title":"<code>partial_sort</code>","text":"<pre><code>void partial_sort( RandomIt first, RandomIt middle, RandomIt last );\nvoid partial_sort( RandomIt first, RandomIt middle, RandomIt last, Compare comp );\n</code></pre> <p>\u91cd\u6392\u5143\u7d20\uff0c\u4f7f\u5f97\u8303\u56f4 <code>[first, middle)</code> \u542b\u6709\u8303\u56f4 <code>[first, last)</code> \u4e2d\u5df2\u6392\u5e8f\u7684 <code>middle - first</code> \u4e2a\u6700\u5c0f\u5143\u7d20\u3002\u4e0d\u4fdd\u8bc1\u4fdd\u6301\u76f8\u7b49\u5143\u7d20\u95f4\u7684\u987a\u5e8f\u3002\u672a\u6307\u5b9a\u8303\u56f4 <code>[middle, last)</code> \u4e2d\u5269\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#nth_element","title":"<code>nth_element</code>","text":"<pre><code>ForwardIt nth_element( ForwardIt first, ForwardIt nth, ForwardIt last );\nForwardIt nth_element( ForwardIt first, ForwardIt nth, ForwardIt last, Compare comp );\n</code></pre> <p><code>nth_element</code> \u4f1a\u91cd\u6392 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u5728\u91cd\u6392\u540e\uff1a<code>nth</code> \u6307\u5411\u7684\u5143\u7d20\u88ab\u66f4\u6539\u4e3a\u5047\u5982 <code>[first, last)</code> \u5df2\u6392\u5e8f\u5219\u8be5\u4f4d\u7f6e\u4f1a\u51fa\u73b0\u7684\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#inplace_merge","title":"<code>inplace_merge</code>","text":"<pre><code>void inplace_merge( BidirIt first, BidirIt middle, BidirIt last );\nvoid inplace_merge( BidirIt first, BidirIt middle, BidirIt last, Compare comp );\n</code></pre> <p>\u5c06\u4e24\u4e2a\u76f8\u7ee7\u7684\u6709\u5e8f\u8303\u56f4 <code>[first, middle)</code> \u548c <code>[middle, last)</code> \u5f52\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u8303\u56f4 <code>[first, last)</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#partition","title":"<code>partition</code>","text":"<pre><code>ForwardIt partition( ForwardIt first, ForwardIt last, UnaryPred p );\n</code></pre> <p>\u91cd\u6392\u5e8f\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u8c13\u8bcd <code>p</code> \u5bf9\u5176\u8fd4\u56de <code>true</code> \u7684\u6240\u6709\u5143\u7d20\u4f4d\u4e8e\u8c13\u8bcd <code>p</code> \u5bf9\u5176\u8fd4\u56de <code>false</code> \u7684\u6240\u6709\u5143\u7d20\u4e4b\u524d\u3002\u4e0d\u4fdd\u6301\u76f8\u5bf9\u987a\u5e8f\u3002</p> <p>Example:</p> <pre><code>std::vector&lt;int&gt; v{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\nauto it = std::partition(v.begin(), v.end(), [](int i) {return i % 2 == 0;});\n</code></pre> <ul> <li><code>it</code> \u6307\u5411\u7b2c\u4e00\u4e2a <code>false</code> \u5143\u7d20\uff0c\u5373\u7b2c\u4e00\u4e2a\u5947\u6570\u3002</li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#partition_point","title":"<code>partition_point</code>","text":"<pre><code>ForwardIt partition_point( ForwardIt first, ForwardIt last, UnaryPred p );\n</code></pre> <p>\u68c0\u9a8c(\u5982\u540c\u7528 std::partition)\u5df2\u5212\u5206\u8303\u56f4 <code>[first, last)</code>\uff0c\u5e76\u5b9a\u4f4d\u7b2c\u4e00\u5206\u6bb5\u7684\u7ed3\u5c3e\uff0c\u5373\u9996\u4e2a\u4e0d\u6ee1\u8db3 <code>p</code> \u7684\u5143\u7d20\uff0c\u6216\u8005\u5728\u6240\u6709\u5143\u7d20\u6ee1\u8db3 <code>p</code> \u65f6\u662f <code>last</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#rotate","title":"<code>rotate</code>","text":"<pre><code>ForwardIt rotate( ForwardIt first, ForwardIt middle, ForwardIt last );\n</code></pre> <p>\u8fdb\u884c\u5143\u7d20\u8303\u56f4\u4e0a\u7684\u5de6\u65cb\u8f6c\u3002\u5177\u4f53\u800c\u8a00\uff0c<code>std::rotate</code> \u4ea4\u6362\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\uff0c\u5c06 <code>[first, middle)</code> \u4e2d\u7684\u5143\u7d20\u653e\u5728 <code>[middle, last)</code> \u540e\u9762\u5e76\u4e14\u4fdd\u7559\u8fd9\u4e24\u4e2a\u8303\u56f4\u4e2d\u5143\u7d20\u7684\u539f\u672c\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#shuffle","title":"<code>shuffle</code>","text":"<pre><code>void shuffle( RandomIt first, RandomIt last, URBG&amp;&amp; g );\n</code></pre> <p>\u91cd\u6392\u5e8f\u7ed9\u5b9a\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u5143\u7d20\u7684\u6bcf\u4e2a\u6392\u5217\u62e5\u6709\u76f8\u7b49\u7684\u51fa\u73b0\u6982\u7387\u3002\u968f\u673a\u6027\u6765\u6e90\u662f\u5bf9\u8c61 <code>g</code>\u3002</p> <p>\u4e00\u4e2a <code>g</code> \u7684 Example:</p> <pre><code>std::random_device rd;\nstd::mt19937 g(rd());\n</code></pre>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#next_permutation","title":"<code>next_permutation</code>","text":"<pre><code>bool next_permutation( BidirIt first, BidirIt last );\nbool next_permutation( BidirIt first, BidirIt last, Compare comp );\n</code></pre> <p>\u5c06\u8303\u56f4 <code>[first, last)</code> \u53d8\u6362\u4e3a\u4e0b\u4e2a\u6392\u5217\u3002\u8fd9\u79cd\u6392\u5217\u5b58\u5728\u65f6\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u5c06\u8303\u56f4\u53d8\u6362\u4e3a\u9996\u4e2a\u6392\u5217(\u5982\u540c\u7528 <code>std::sort</code>)\u5e76\u8fd4\u56de <code>false</code>\u3002</p> <ul> <li>\u65b0\u6392\u5217\u6309\u5b57\u5178\u5e8f\u5927\u4e8e\u65e7\u6392\u5217\u65f6\u8fd4\u56de <code>true</code>\u3002\u62b5\u8fbe\u6700\u540e\u6392\u5217\u5e76\u91cd\u7f6e\u8303\u56f4\u4e3a\u9996\u4e2a\u6392\u5217\u65f6\u8fd4\u56de <code>false</code>\u3002</li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#prev_permutation","title":"<code>prev_permutation</code>","text":"<pre><code>bool prev_permutation( BidirIt first, BidirIt last );\nbool prev_permutation( BidirIt first, BidirIt last, Compare comp );\n</code></pre> <p>\u4e0e <code>next_permutation</code> \u540c\u7406\uff0c\u4f46\u751f\u6210\u7684\u662f\u524d\u4e00\u4e2a\u6392\u5217\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#reverse","title":"<code>reverse</code>","text":"<pre><code>void reverse( BidirIt first, BidirIt last );\n</code></pre> <p>\u53cd\u8f6c <code>[first, last)</code> \u8303\u56f4\u4e2d\u7684\u5143\u7d20\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#stable_","title":"<code>stable_*</code>","text":"<ul> <li><code>stable</code> \u4e5f\u5373\u7a33\u5b9a\u6392\u5e8f\u3002\u5728\u6392\u5e8f\u8fc7\u7a0b\u4e2d\uff0c\u76f8\u7b49\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u4fdd\u6301\u4e0d\u53d8\u3002</li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#stable_sort","title":"<code>stable_sort</code>","text":"<pre><code>void stable_sort( RandomIt first, RandomIt last );\nvoid stable_sort( RandomIt first, RandomIt last, Compare comp );\n</code></pre> <p>\u4ee5\u975e\u964d\u5e8f\u6392\u5e8f\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u3002\u4fdd\u8bc1\u4fdd\u6301\u7b49\u4ef7\u5143\u7d20\u95f4\u7684\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#stable_partition","title":"<code>stable_partition</code>","text":"<pre><code>BidirIt stable_partition( BidirIt first, BidirIt last, UnaryPred p );\n</code></pre> <p>\u91cd\u6392\u5e8f\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6240\u6709\u8c13\u8bcd <code>p</code> \u5bf9\u5176\u8fd4\u56de <code>true</code> \u7684\u5143\u7d20\u5747\u5148\u4e8e\u8c13\u8bcd <code>p</code> \u5bf9\u5176\u8fd4\u56de <code>false</code> \u7684\u5143\u7d20\u3002\u4fdd\u6301\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#is_","title":"<code>is_*</code>","text":"<ul> <li><code>is</code> \u7cfb\u5217\u7b97\u6cd5\u7528\u4e8e\u68c0\u67e5\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u662f\u5426\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u3002</li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#is_sorted","title":"<code>is_sorted</code>","text":"<pre><code>bool is_sorted( ForwardIt first, ForwardIt last );\nbool is_sorted( ForwardIt first, ForwardIt last, Compare comp );\n</code></pre> <p>\u68c0\u67e5\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u662f\u5426\u6309\u975e\u964d\u5e8f\u6392\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#is_partitioned","title":"<code>is_partitioned</code>","text":"<pre><code>bool is_partitioned( ForwardIt first, ForwardIt last, UnaryPred p );\nbool is_partitioned( ForwardIt first, ForwardIt last, UnaryPred p, Compare comp );\n</code></pre> <p>\u68c0\u67e5\u8303\u56f4 <code>[first, last)</code> \u662f\u5426\u5df2\u6309\u8c13\u8bcd <code>p</code> \u5212\u5206\uff1a\u6240\u6709\u6ee1\u8db3 <code>p</code> \u7684\u5143\u7d20\u90fd\u4f1a\u5728\u6240\u6709\u4e0d\u6ee1\u8db3\u7684\u5143\u7d20\u4e4b\u524d\u51fa\u73b0\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#is_heap","title":"<code>is_heap</code>","text":"<pre><code>bool is_heap( RandomIt first, RandomIt last );\nbool is_heap( RandomIt first, RandomIt last, Compare comp );\n</code></pre> <p>\u68c0\u67e5\u8303\u56f4 <code>[first, last)</code> \u662f\u5426\u4e3a\u5806\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#is__until","title":"<code>is_*_until</code>","text":"<ul> <li><code>is_*_until</code> \u7cfb\u5217\u7b97\u6cd5\u7528\u4e8e\u68c0\u67e5\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u662f\u5426\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u3002</li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#is_sorted_until","title":"<code>is_sorted_until</code>","text":"<pre><code>ForwardIt is_sorted_until( ForwardIt first, ForwardIt last );\nForwardIt is_sorted_until( ForwardIt first, ForwardIt last, Compare comp );\n</code></pre> <p>\u68c0\u9a8c\u8303\u56f4 <code>[first, last)</code>\uff0c\u5e76\u5bfb\u627e\u4ece <code>first</code> \u5f00\u59cb\u4e14\u5176\u4e2d\u5143\u7d20\u5df2\u6309\u975e\u964d\u5e8f\u6392\u5e8f\u7684\u6700\u5927\u8303\u56f4\u3002</p> <p>\u8fd4\u56de\u503c\u662f\u4ece <code>first</code> \u5f00\u59cb\u4e14\u5176\u4e2d\u5143\u7d20\u5df2\u6309\u975e\u964d\u5e8f\u6392\u5e8f\u7684\u6700\u5927\u8303\u56f4\u3002\u5373\u6ee1\u8db3\u4f7f\u8303\u56f4 <code>[first, it)</code> \u6709\u5e8f\u7684\u6700\u540e\u8fed\u4ee3\u5668 <code>it</code>\u3002\u5bf9\u4e8e\u7a7a\u8303\u56f4\u548c\u957f\u5ea6\u4e3a\u4e00\u7684\u8303\u56f4\u8fd4\u56de <code>last</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#is_heap_until","title":"<code>is_heap_until</code>","text":"<pre><code>RandomIt is_heap_until( RandomIt first, RandomIt last );\nRandomIt is_heap_until( RandomIt first, RandomIt last, Compare comp );\n</code></pre> <p>\u68c0\u9a8c\u8303\u56f4 <code>[first, last)</code>\uff0c\u5e76\u5bfb\u627e\u4ece <code>first</code> \u5f00\u59cb\u4e14\u5176\u4e2d\u5143\u7d20\u4e3a\u5806\u7684\u6700\u5927\u8303\u56f4\u3002</p> <p>\u8fd4\u56de\u503c\u662f\u4f7f\u5f97\u8303\u56f4 <code>[first, it)</code> \u662f\u5806\u7684\u6700\u672b\u8fed\u4ee3\u5668 it\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#count-count_if","title":"<code>count</code> / <code>count_if</code>","text":"<pre><code>typename std::iterator_traits&lt;InputIt&gt;::difference_type count( InputIt first, InputIt last, const T&amp; value );\ntypename std::iterator_traits&lt;InputIt&gt;::difference_type count_if( InputIt first, InputIt last, UnaryPred p );\n</code></pre> <p>\u8fd4\u56de\u8303\u56f4 <code>[first, last)</code> \u4e2d\u6ee1\u8db3\u7279\u5b9a\u5224\u522b\u6807\u51c6\u7684\u5143\u7d20\u6570\u3002</p> <ul> <li>\u8ba1\u6570\u7b49\u4e8e <code>value</code> \u7684\u5143\u7d20\uff08\u4f7f\u7528 <code>operator==</code>\uff09\u3002</li> <li>\u8ba1\u6570\u8c13\u8bcd <code>p</code> \u5bf9\u5176\u8fd4\u56de <code>true</code> \u7684\u5143\u7d20\u3002</li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#accumulate","title":"<code>accumulate</code>","text":"<pre><code>T accumulate( InputIt first, InputIt last, T init );\nT accumulate( InputIt first, InputIt last, T init, BinaryOp op );\n</code></pre> <p>\u8ba1\u7b97\u7ed9\u5b9a\u503c <code>init</code> \u4e0e\u8303\u56f4 <code>[first, last)</code> \u4e2d\u5404\u5143\u7d20\u7684\u548c\u3002</p> <p>Example:</p> <pre><code>std::vector&lt;int&gt; v{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint sum = std::accumulate(v.begin(), v.end(), 0); // \u548c\uff1a55\nint product = std::accumulate(v.begin(), v.end(), 1, std::multiplies&lt;int&gt;()); // \u79ef\uff1a3628800\n</code></pre>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#reduce","title":"<code>reduce</code>","text":"<pre><code>typename std::iterator_traits&lt;InputIt&gt;::value_type reduce( InputIt first, InputIt last );\nT reduce( InputIt first, InputIt last, T init );\nT reduce( InputIt first, InputIt last, T init, BinaryOp op );\n</code></pre> <p>\u5206\u522b\u5bf9\u5e94:</p> <ol> <li>\u7b49\u4ef7\u4e8e <code>reduce(first, last, typename std::iterator_traits&lt;InputIt&gt;::value_type{})</code>\u3002</li> <li>\u7b49\u4ef7\u4e8e <code>reduce(first, last, init, std::plus&lt;&gt;())</code>\u3002</li> <li>\u5728 <code>op</code> \u4e0a\u4ee5\u521d\u503c <code>init</code> \u5bf9\u8303\u56f4 <code>[first, last)</code> \u8fdb\u884c\u89c4\u7ea6\uff0c\u53ef\u80fd\u4ee5\u672a\u6307\u5b9a\u65b9\u5f0f\u8fdb\u884c\u6392\u5217\u548c\u805a\u5408\u3002\u7ed9\u5b9a <code>binary_op</code> \u4e3a\u5b9e\u9645\u7684\u4e8c\u5143\u8fd0\u7b97\u3002</li> </ol> <p>\u8fd4\u56de\u503c\u662f: <code>init</code> \u548c <code>[first, last)</code> \u7684\u5143\u7d20\u5728 <code>std::plus&lt;&gt;()</code> \u4e0a\u7684\u5e7f\u4e49\u548c\u6216 <code>init</code> \u548c <code>[first, last)</code> \u7684\u5143\u7d20\u5728 <code>op</code> \u4e0a\u7684\u5e7f\u4e49\u548c\u3002</p> <p>\u4e00\u7ec4\u5143\u7d20\u5728\u4e8c\u5143\u8fd0\u7b97 binary_op \u4e0a\u7684\u5e7f\u4e49\u548c\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>\u5982\u679c\u5143\u7d20\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u548c\u5c31\u662f\u8be5\u5143\u7d20\u7684\u503c\u3002</li> <li> <p>\u5426\u5219\uff0c\u4f9d\u6b21\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ol> <li>\u4ece\u5143\u7d20\u7ec4\u4e2d\u53d6\u8d70\u4e24\u4e2a\u5143\u7d20 <code>elem1</code> \u548c <code>elem2</code>\u3002</li> <li>\u8ba1\u7b97 <code>binary_op(elem1, elem2)</code>\uff0c\u5e76\u5c06\u7ed3\u679c\u653e\u56de\u5143\u7d20\u7ec4\u3002</li> <li>\u91cd\u590d\u4ee5\u4e0a\u4e24\u6b65\uff0c\u76f4\u5230\u7ec4\u91cc\u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u3002</li> </ol> </li> </ul> <p>ATTENTION</p> <p><code>std::reduce</code> \u8868\u73b0\u7c7b\u4f3c <code>std::accumulate</code>\uff0c\u4f46\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u53ef\u80fd\u4ee5\u4efb\u610f\u987a\u5e8f\u5206\u7ec4\u5e76\u91cd\u6392\u3002\u5e76\u4e14\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#transform_reduce","title":"<code>transform_reduce</code>","text":"<pre><code>T transform_reduce( InputIt1 first1, InputIt1 last1, InputIt2 first2, T init );\nT transform_reduce( InputIt1 first1, InputIt1 last1, InputIt2 first2, T init, BinaryOp1 reduce, BinaryOp2 transform );\nT transform_reduce( InputIt first, InputIt last, T init, BinaryOp reduce, UnaryOp transform );\n</code></pre> <p>\u5206\u522b\u5bf9\u5e94:</p> <ol> <li>\u7b49\u4ef7\u4e8e <code>transform_reduce(first1, last1, first2, init, std::plus&lt;&gt;(), std::multiplies&lt;&gt;())</code>\uff0c\u5b9e\u9645\u4e0a\u662f\u9ed8\u8ba4\u7684 <code>std::inner_product</code> \u7684\u7b49\u6548\u5e76\u884c\u7248\u672c\u3002</li> <li>\u5e94\u7528 <code>transform</code> \u5230\u6765\u81ea\u8303\u56f4 <code>[first1, last1)</code> \u548c\u4ece <code>first2</code> \u5f00\u59cb\u7684\u5305\u542b <code>std::distance(first1, last1)</code> \u4e2a\u5143\u7d20\u7684\u8303\u56f4\u7684\u6bcf\u5bf9\u5143\u7d20\uff0c\u5e76\u5728 <code>reduce</code> \u4e0a\u4e0e\u521d\u59cb\u503c <code>init</code> \u4e00\u540c\u89c4\u7ea6\u5404\u7ed3\u679c\uff08\u53ef\u4ee5\u4ee5\u672a\u6307\u5b9a\u884c\u4e3a\u91cd\u6392\u805a\u5408\uff09\u3002</li> <li>\u5e94\u7528 <code>transform</code> \u5230\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u5728 <code>reduce</code> \u4e0a\u4e0e\u521d\u59cb\u503c <code>init</code> \u4e00\u540c\u89c4\u7ea6\u5404\u7ed3\u679c\uff08\u53ef\u4ee5\u4ee5\u672a\u6307\u5b9a\u884c\u4e3a\u91cd\u6392\u805a\u5408\uff09\u3002</li> </ol> <p>\u8fd4\u56de\u503c:</p> <ol> <li><code>init</code> \u548c <code>values</code> \u5728 <code>std::plus&lt;&gt;()</code> \u4e0a\u7684\u5e7f\u4e49\u548c\uff0c\u5176\u4e2d <code>values</code> \u662f\u901a\u8fc7 <code>std::multiplies&lt;&gt;()</code> \u53d8\u6362\u5f97\u5230\u7684\u4e00\u7ec4\u503c\uff0c\u6bcf\u4e2a\u503c\u4ece\u4e24\u4e2a\u8f93\u5165\u8303\u56f4\u4e2d\u7684\u4e00\u5bf9\u5143\u7d20\u53d8\u6362\u800c\u6765\u3002</li> <li><code>init</code> \u548c <code>values</code> \u5728 <code>reduce</code> \u4e0a\u7684\u5e7f\u4e49\u548c\uff0c\u5176\u4e2d <code>values</code> \u662f\u901a\u8fc7 <code>transform</code> \u53d8\u6362\u5f97\u5230\u7684\u4e00\u7ec4\u503c\uff0c\u6bcf\u4e2a\u503c\u4ece\u4e24\u4e2a\u8f93\u5165\u8303\u56f4\u4e2d\u7684\u4e00\u5bf9\u5143\u7d20\u53d8\u6362\u800c\u6765\u3002</li> <li><code>init</code> \u548c <code>values</code> \u5728 <code>reduce</code> \u4e0a\u7684\u5e7f\u4e49\u548c\uff0c\u5176\u4e2d <code>values</code> \u662f\u901a\u8fc7 <code>transform</code> \u53d8\u6362\u5f97\u5230\u7684\u4e00\u7ec4\u503c\uff0c\u6bcf\u4e2a\u503c\u4ece\u8f93\u5165\u8303\u56f4\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u53d8\u6362\u800c\u6765\u3002</li> </ol> <p>ATTENTION</p> <ul> <li> <p>\u4e0d\u4f1a\u5bf9 <code>init</code> \u5e94\u7528 <code>transform</code>\u3002</p> </li> <li> <p>\u5982\u679c <code>first == last</code> \u6216 <code>first1 == last1</code>\uff0c\u90a3\u4e48\u8fd4\u56de\u672a\u7ecf\u4fee\u6539\u7684 <code>init</code>\u3002</p> </li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#partial_sum","title":"<code>partial_sum</code>","text":"<pre><code>OutputIt partial_sum( InputIt first, InputIt last, OutputIt d_first );\nOutputIt partial_sum( InputIt first, InputIt last, OutputIt d_first, BinaryOp op );\n</code></pre> <p>\u4ee5 1 \u4e3a\u4f8b:</p> <ul> <li>\u5982\u679c <code>[first, last)</code> \u4e3a\u7a7a\uff0c\u90a3\u4e48\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002</li> <li> <p>\u5426\u5219\u6309\u987a\u5e8f\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ol> <li>\u521b\u5efa\u7d2f\u52a0\u5668 <code>acc</code>\uff0c\u5b83\u7684\u7c7b\u578b\u662f <code>InputIt</code> \u7684\u503c\u7c7b\u578b\uff0c\u4ee5 <code>*first</code> \u521d\u59cb\u5316\u3002</li> <li>\u5c06 <code>acc</code> \u8d4b\u7ed9 <code>*d_first</code>\u3002</li> <li> <p>\u5bf9\u4e8e <code>[1, std::distance(first, last))</code> \u4e2d\u7684\u6240\u6709\u6574\u6570 <code>i</code>\uff0c\u6309\u987a\u5e8f\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <p>(a) \u8ba1\u7b97 <code>acc + *iter</code>(C++20 \u524d) / <code>std::move(acc) + *iter</code>(C++20 \u8d77)\uff0c\u5176\u4e2d <code>iter</code> \u662f <code>first</code> \u7684\u4e0b <code>i</code> \u4e2a\u8fed\u4ee3\u5668\u3002 (b) \u5c06\u8ba1\u7b97\u7ed3\u679c\u8d4b\u7ed9 <code>acc</code>\u3002 (c) \u5c06 <code>acc[1]</code> \u8d4b\u7ed9 <code>*dest</code>\uff0c\u5176\u4e2d <code>dest</code> \u662f <code>d_first</code> \u7684\u4e0b <code>i</code> \u4e2a\u8fed\u4ee3\u5668\u3002</p> </li> </ol> </li> </ul> <p>Example:</p> <pre><code>#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\n\nint main()\n{\n    std::vector&lt;int&gt; v(10, 2); // v = {2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n\n    std::cout &lt;&lt; \"\u524d \" &lt;&lt; v.size() &lt;&lt; \" \u4e2a\u5076\u6570\u662f\uff1a\";\n    // \u5c06\u7ed3\u679c\u5199\u5165\u6d41 cout\n    std::partial_sum(v.cbegin(), v.cend(), \n                     std::ostream_iterator&lt;int&gt;(std::cout, \" \"));\n    std::cout &lt;&lt; '\\n';\n\n    // \u5c06\u7ed3\u679c\u5199\u56de vector v\n    std::partial_sum(v.cbegin(), v.cend(),\n                     v.begin(), std::multiplies&lt;int&gt;());\n\n    std::cout &lt;&lt; \"2 \u7684\u524d \" &lt;&lt; v.size() &lt;&lt; \" \u4e2a\u5e42\u662f\uff1a\";\n    for (int n : v)\n        std::cout &lt;&lt; n &lt;&lt; ' ';\n    std::cout &lt;&lt; '\\n';\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>\u524d 10 \u4e2a\u5076\u6570\u662f\uff1a2 4 6 8 10 12 14 16 18 20 \n2 \u7684\u524d 10 \u4e2a\u5e42\u662f\uff1a2 4 8 16 32 64 128 256 512 1024\n</code></pre>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#inclusive_scan","title":"<code>inclusive_scan</code>","text":"<p>The same thing as <code>partial_sum</code>, except that it can run in parallel.</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#exclusive_scan","title":"<code>exclusive_scan</code>","text":"<p>The same thing as <code>inclusive_scan</code>, except that the first element is not included in the sum.</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#inner_product","title":"<code>inner_product</code>","text":"<pre><code>T inner_product( InputIt1 first1, InputIt1 last1, InputIt2 first2, T init );\nT inner_product( InputIt1 first1, InputIt1 last1, InputIt2 first2, T init, BinaryOp1 op1, BinaryOp2 op2 );\n</code></pre> <p>\u5728\u8303\u56f4 <code>[first1, last1)</code> \u548c\u4ece <code>first2</code> \u5f00\u59cb\u7684\u5305\u542b <code>std::distance(first1, last1)</code> \u4e2a\u5143\u7d20\u7684\u8303\u56f4\u4e0a\u8ba1\u7b97\u5185\u79ef\uff08\u5373\u79ef\u4e4b\u548c\uff09\u6216\u8fdb\u884c\u6709\u5e8f\u6620\u5c04/\u89c4\u7ea6\u64cd\u4f5c\u3002</p> <pre><code>std::vector&lt;int&gt; a{0, 1, 2, 3, 4};\nstd::vector&lt;int&gt; b{5, 4, 2, 3, 1};\n\nint r1 = std::inner_product(a.begin(), a.end(), b.begin(), 0);\nstd::cout &lt;&lt; \"a \u548c b \u7684\u5185\u79ef\uff1a\" &lt;&lt; r1 &lt;&lt; '\\n';\n</code></pre> <ul> <li>\u76f8\u4e58\u540e\u76f8\u52a0</li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#adjacent_difference","title":"<code>adjacent_difference</code>","text":"<pre><code>OutputIt adjacent_difference( InputIt first, InputIt last, OutputIt d_first );\nOutputIt adjacent_difference( InputIt first, InputIt last, OutputIt d_first, BinaryOp op );\n</code></pre> <p>\u8ba1\u7b97\u8303\u56f4 <code>[first, last)</code> \u4e2d\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u4ece <code>d_first</code> \u5f00\u59cb\u7684\u8303\u56f4\u4e2d\u3002</p> <p>Example: <code>std::adjacent_difference(v.begin(), v.end(), v.begin());</code></p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#sample","title":"<code>sample</code>","text":"<pre><code>SampleIterator sample( PopulationIt first, PopulationIt last, SampleIt out, Distance n, URBG&amp;&amp; g );\n</code></pre> <p>\u4ece\u5e8f\u5217 <code>[first, last)</code>\uff08\u4e0d\u91cd\u590d\u5730\uff09\u9009\u62e9 <code>n</code> \u4e2a\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u6837\u672c\u62e5\u6709\u76f8\u7b49\u7684\u51fa\u73b0\u6982\u7387\uff0c\u5e76\u5c06\u8fd9\u4e9b\u88ab\u9009\u62e9\u7684\u5143\u7d20\u5199\u5165\u5230\u8f93\u51fa\u8fed\u4ee3\u5668 <code>out</code>\u3002\u7528\u968f\u673a\u6570\u751f\u6210\u5668 <code>g</code> \u751f\u6210\u968f\u673a\u6570\u3002</p> <p>Example: </p> <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n#include &lt;random&gt;\n#include &lt;string&gt;\n\nint main()\n{\n    std::string in {\"ABCDEFGHIJK\"}, out;\n    std::sample(in.begin(), in.end(), std::back_inserter(out), 4,\n                std::mt19937 {std::random_device{}()});\n    std::cout &lt;&lt; \"\u4ece \" &lt;&lt; in &lt;&lt; \" \u4e2d\u968f\u673a\u9009\u53d6\u56db\u4e2a\u5b57\u6bcd\uff1a\" &lt;&lt; out &lt;&lt; '\\n';\n}\n</code></pre> <p></p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#_of","title":"<code>*_of</code>","text":"<pre><code>bool all_of( InputIt first, InputIt last, UnaryPred p );\nbool any_of( InputIt first, InputIt last, UnaryPred p );\nbool none_of( InputIt first, InputIt last, UnaryPred p );\n</code></pre> <ol> <li>\u68c0\u67e5\u4e00\u5143\u8c13\u8bcd p \u662f\u5426\u5bf9\u8303\u56f4 <code>[first, last)</code> \u4e2d\u81f3\u5c11\u4e00\u4e2a\u5143\u7d20\u8fd4\u56de false\u3002</li> <li>\u68c0\u67e5\u4e00\u5143\u8c13\u8bcd p \u662f\u5426\u5bf9\u8303\u56f4 <code>[first, last)</code> \u4e2d\u81f3\u5c11\u4e00\u4e2a\u5143\u7d20\u8fd4\u56de true\u3002</li> <li>\u68c0\u67e5\u4e00\u5143\u8c13\u8bcd p \u662f\u5426\u4e0d\u5bf9\u8303\u56f4 <code>[first, last)</code> \u4e2d\u4efb\u4f55\u5143\u7d20\u8fd4\u56de true\u3002</li> </ol>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#equal","title":"<code>equal</code>","text":"<pre><code>bool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2 );\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPred p );\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, BinaryPred p );\n</code></pre> <p>\u68c0\u67e5 <code>[first1, last1)</code> \u4e0e\u4ece first2 \u5f00\u59cb\u7684\u53e6\u4e00\u4e2a\u8303\u56f4\u662f\u5426\u76f8\u7b49\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#is_permutation","title":"<code>is_permutation</code>","text":"<pre><code>bool is_permutation( ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2 );\nbool is_permutation( ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2, BinaryPredicate p );\nbool is_permutation( ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2, ForwardIt2 last2 );\nbool is_permutation( ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2, ForwardIt2 last2, BinaryPredicate p );\n</code></pre> <p>\u68c0\u67e5 <code>[first1, last1)</code> \u662f\u5426\u4e3a first2 \u5f00\u59cb\u7684\u53e6\u4e00\u4e2a\u8303\u56f4\u7684\u6392\u5217\u3002</p> <pre><code>static constexpr auto v1 = {1, 2, 3, 4, 5};\nstatic constexpr auto v2 = {3, 5, 4, 1, 2};\nstatic constexpr auto v3 = {3, 5, 4, 1, 1};\n\nstd::cout &lt;&lt; v2 &lt;&lt; \" \u662f \" &lt;&lt; v1 &lt;&lt; \" \u7684\u6392\u5217\uff1a\" &lt;&lt; std::boolalpha\n            &lt;&lt; std::is_permutation(v1.begin(), v1.end(), v2.begin()) &lt;&lt; '\\n'\n            &lt;&lt; v3 &lt;&lt; \" \u662f \" &lt;&lt; v1 &lt;&lt; \" \u7684\u6392\u5217\uff1a\" &lt;&lt; std::boolalpha\n            &lt;&lt; std::is_permutation(v1.begin(), v1.end(), v3.begin()) &lt;&lt; '\\n';\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>{ 3 5 4 1 2 } \u662f { 1 2 3 4 5 } \u7684\u6392\u5217\uff1atrue\n{ 3 5 4 1 1 } \u662f { 1 2 3 4 5 } \u7684\u6392\u5217\uff1afalse\n</code></pre>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#lexicographical_compare","title":"<code>lexicographical_compare</code>","text":"<pre><code>bool lexicographical_compare( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\nbool lexicographical_compare( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, Compare comp );\n</code></pre> <p>\u68c0\u67e5\u7b2c\u4e00\u4e2a\u8303\u56f4 <code>[first1, last1)</code> \u662f\u5426\u6309\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u8303\u56f4 <code>[first2, last2)</code>\u3002\u7b2c\u4e00\u8303\u56f4\u6309\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u65f6\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#mismatch","title":"<code>mismatch</code>","text":"<pre><code>std::pair&lt;InputIt1, InputIt2&gt; mismatch( InputIt1 first1, InputIt1 last1, InputIt2 first2 );\nstd::pair&lt;InputIt1, InputIt2&gt; mismatch( InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPred p );\nstd::pair&lt;InputIt1, InputIt2&gt; mismatch( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\nstd::pair&lt;InputIt1, InputIt2&gt; mismatch( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, BinaryPred p );\n</code></pre> <p>\u8fd4\u56de\u4e00\u5bf9\u5230\u4e24\u4e2a\u8303\u56f4\u4e2d\u7684\u9996\u4e2a\u4e0d\u5339\u914d\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff1a\u4e00\u4e2a\u8303\u56f4\u662f <code>[first1, last1)</code>\uff0c\u800c\u53e6\u4e00\u4e2a\u8303\u56f4\u4ece <code>first2</code> \u5f00\u59cb\u3002</p> <p>\u8fd4\u56de\u503c\u662f\u62e5\u6709\u6307\u5411\u9996\u5bf9\u4e24\u4e2a\u4e0d\u76f8\u7b49\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u7684 <code>std::pair</code>\u3002\u5982\u679c\u62b5\u8fbe\u4e86 <code>last1</code>\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u5bf9\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u8fed\u4ee3\u5668\u662f <code>first2</code> \u540e\u7684\u7b2c <code>std::distance(first1, last1)</code> \u4e2a\u8fed\u4ee3\u5668\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#find-find_if-find_if_not","title":"<code>find</code> / <code>find_if</code> / <code>find_if_not</code>","text":"<pre><code>InputIt find( InputIt first, InputIt last, const T&amp; value );\nInputIt find_if( InputIt first, InputIt last, UnaryPred p );\nInputIt find_if_not( InputIt first, InputIt last, UnaryPred q );\n</code></pre> <p>\u8fd4\u56de\u6307\u5411\u8303\u56f4 <code>[first, last)</code> \u4e2d\u6ee1\u8db3\u7279\u5b9a\u5224\u522b\u6807\u51c6\u7684\u9996\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff08\u6ca1\u6709\u8fd9\u79cd\u5143\u7d20\u65f6\u8fd4\u56de last\uff09\u3002</p> <ol> <li><code>find</code> \u641c\u7d22\u7b49\u4e8e\uff08\u7528 <code>operator==</code> \u6bd4\u8f83\uff09<code>value</code> \u7684\u5143\u7d20\u3002</li> <li><code>find_if</code> \u641c\u7d22\u8c13\u8bcd <code>p</code> \u5bf9\u5176\u8fd4\u56de <code>true</code> \u7684\u5143\u7d20\u3002</li> <li><code>find_if_not</code> \u641c\u7d22\u8c13\u8bcd <code>q</code> \u5bf9\u5176\u8fd4\u56de <code>false</code> \u7684\u5143\u7d20\u3002</li> </ol>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#adjacent_find","title":"<code>adjacent_find</code>","text":"<pre><code>ForwardIt adjacent_find( ForwardIt first, ForwardIt last );\nForwardIt adjacent_find( ForwardIt first, ForwardIt last, BinaryPred p );\n</code></pre> <p>\u5728\u8303\u56f4 <code>[first, last)</code> \u4e2d\u641c\u7d22\u4e24\u4e2a\u8fde\u7eed\u7684\u76f8\u7b49\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#equal_range","title":"<code>equal_range</code>","text":"<pre><code>std::pair&lt;ForwardIt, ForwardIt&gt; equal_range( ForwardIt first, ForwardIt last, const T&amp; value );\nstd::pair&lt;ForwardIt, ForwardIt&gt; equal_range( ForwardIt first, ForwardIt last, const T&amp; value, Compare comp );\n</code></pre> <p>\u8fd4\u56de\u8303\u56f4 <code>[first, last)</code> \u4e2d\u5305\u542b\u6240\u6709\u7b49\u4ef7\u4e8e <code>value</code> \u7684\u5143\u7d20\u7684\u8303\u56f4\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#lower_bound","title":"<code>lower_bound</code>","text":"<pre><code>ForwardIt lower_bound( ForwardIt first, ForwardIt last, const T&amp; value );\nForwardIt lower_bound( ForwardIt first, ForwardIt last, const T&amp; value, Compare comp );\n</code></pre> <p>\u5728\u5df2\u5212\u5206\u7684\u8303\u56f4 <code>[first, last)</code> \u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u5148\u5e8f\u4e8e value \u7684\u5143\u7d20\u3002</p> <p>ATTENTION</p> <p>\u5c3d\u7ba1 <code>std::lower_bound</code> \u53ea\u8981\u6c42 <code>[first, last)</code> \u5df2\u5212\u5206\uff0c\u4f46\u662f\u8be5\u7b97\u6cd5\u901a\u5e38\u4f1a\u5728 <code>[first, last)</code> \u5df2\u6392\u5e8f\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff0c\u6b64\u65f6\u4e8c\u5206\u67e5\u627e\u5bf9\u4e8e\u4efb\u610f <code>value</code> \u90fd\u6709\u6548\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#upper_bound","title":"<code>upper_bound</code>","text":"<pre><code>ForwardIt upper_bound( ForwardIt first, ForwardIt last, const T&amp; value );\nForwardIt upper_bound( ForwardIt first, ForwardIt last, const T&amp; value, Compare comp );\n</code></pre> <p>\u5728\u5df2\u5212\u5206\u7684\u8303\u56f4 <code>[first, last)</code> \u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u540e\u5e8f\u4e8e <code>value</code> \u7684\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#binary_search","title":"<code>binary_search</code>","text":"<pre><code>bool binary_search( ForwardIt first, ForwardIt last, const T&amp; value );\nbool binary_search( ForwardIt first, ForwardIt last, const T&amp; value, Compare comp );\n</code></pre> <p>\u68c0\u67e5\u5728\u5df2\u5212\u5206\u8303\u56f4 <code>[first, last)</code> \u4e2d\u662f\u5426\u51fa\u73b0\u4e0e <code>value</code> \u7b49\u4ef7\u7684\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#search","title":"<code>search</code>","text":"<pre><code>ForwardIt1 search( ForwardIt1 first, ForwardIt1 last, ForwardIt2 s_first, ForwardIt2 s_last );\nForwardIt1 search( ForwardIt1 first, ForwardIt1 last, ForwardIt2 s_first, ForwardIt2 s_last, BinaryPred p );\n</code></pre> <p>\u641c\u7d22\u8303\u56f4 <code>[first, last)</code> \u4e2d\u9996\u6b21\u51fa\u73b0\u5143\u7d20\u5e8f\u5217 <code>[s_first, s_last)</code> \u7684\u4f4d\u7f6e\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#find_end","title":"<code>find_end</code>","text":"<pre><code>ForwardIt1 find_end( ForwardIt1 first, ForwardIt1 last, ForwardIt2 s_first, ForwardIt2 s_last );\nForwardIt1 find_end( ForwardIt1 first, ForwardIt1 last, ForwardIt2 s_first, ForwardIt2 s_last, BinaryPred p );\n</code></pre> <p>\u5728\u8303\u56f4 <code>[first, last)</code> \u4e2d\u641c\u7d22\u5e8f\u5217 <code>[s_first, s_last)</code> \u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#find_first_of","title":"<code>find_first_of</code>","text":"<pre><code>InputIt find_first_of( InputIt first, InputIt last, ForwardIt s_first, ForwardIt s_last );\nInputIt find_first_of( InputIt first, InputIt last, ForwardIt s_first, ForwardIt s_last, BinaryPred p );\n</code></pre> <p>\u5728\u8303\u56f4 <code>[first, last)</code> \u4e2d\u641c\u7d22\u8303\u56f4 <code>[s_first, s_last)</code> \u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u3002</p> <p>\u8fd4\u56de\u503c\u662f\u6307\u5411\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7b49\u4e8e\u8303\u56f4 <code>[s_first, s_last)</code> \u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u9996\u4e2a\u5143\u7d20\u3002\u5982\u679c <code>[s_first, s_last)</code> \u4e3a\u7a7a\u6216\u627e\u4e0d\u5230\u8fd9\u79cd\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fd4\u56de <code>last</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#max_element","title":"<code>max_element</code>","text":"<pre><code>ForwardIt max_element( ForwardIt first, ForwardIt last );\nForwardIt max_element( ForwardIt first, ForwardIt last, Compare comp );\n</code></pre> <p>\u5bfb\u627e\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002\u6307\u5411\u8303\u56f4 <code>[first, last)</code> \u4e2d\u6700\u5927\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u5982\u679c\u8303\u56f4\u4e2d\u6709\u591a\u4e2a\u5143\u7d20\u7b49\u4ef7\u4e8e\u6700\u5927\u5143\u7d20\uff0c\u90a3\u4e48\u8fd4\u56de\u6307\u5411\u9996\u4e2a\u8fd9\u79cd\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u8303\u56f4\u4e3a\u7a7a\u65f6\u8fd4\u56de <code>last</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#min_element","title":"<code>min_element</code>","text":"<pre><code>ForwardIt min_element( ForwardIt first, ForwardIt last );\nForwardIt min_element( ForwardIt first, ForwardIt last, Compare comp );\n</code></pre> <p>\u5bfb\u627e\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002\u6307\u5411\u8303\u56f4 <code>[first, last)</code> \u4e2d\u6700\u5c0f\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u5982\u679c\u8303\u56f4\u4e2d\u6709\u591a\u4e2a\u5143\u7d20\u7b49\u4ef7\u4e8e\u6700\u5c0f\u5143\u7d20\uff0c\u90a3\u4e48\u8fd4\u56de\u6307\u5411\u9996\u4e2a\u8fd9\u79cd\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u8303\u56f4\u4e3a\u7a7a\u65f6\u8fd4\u56de <code>last</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#minmax_element","title":"<code>minmax_element</code>","text":"<pre><code>std::pair&lt;ForwardIt, ForwardIt&gt; minmax_element( ForwardIt first, ForwardIt last );\nstd::pair&lt;ForwardIt, ForwardIt&gt; minmax_element( ForwardIt first, ForwardIt last, Compare comp );\n</code></pre> <p>\u5bfb\u627e\u8303\u56f4 <code>[first, last)</code> \u4e2d\u6700\u5c0f\u548c\u6700\u5927\u7684\u5143\u7d20\u3002</p> <p>\u8fd4\u56de\u503c\u4ee5\u6307\u5411\u6700\u5c0f\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u4e3a\u7b2c\u4e00\u5143\u7d20\uff0c\u4ee5\u6307\u5411\u6700\u5927\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u4e3a\u7b2c\u4e8c\u5143\u7d20\u7684 <code>pair</code>\u3002\u8303\u56f4\u4e3a\u7a7a\u65f6\u8fd4\u56de <code>std::make_pair(first, first)</code>\u3002\u5982\u679c\u591a\u4e2a\u5143\u7d20\u7b49\u4ef7\u4e8e\u6700\u5c0f\u5143\u7d20\uff0c\u90a3\u4e48\u8fd4\u56de\u6307\u5411\u9996\u4e2a\u8fd9\u79cd\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u5982\u679c\u591a\u4e2a\u5143\u7d20\u7b49\u4ef7\u4e8e\u6700\u5927\u5143\u7d20\uff0c\u90a3\u4e48\u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u8fd9\u79cd\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#set","title":"<code>set</code>","text":""},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#set_difference","title":"<code>set_difference</code>","text":"<pre><code>OutputIt set_difference( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first );\nOutputIt set_difference( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first, Compare comp );\n</code></pre> <p>\u590d\u5236\u6765\u81ea\u6709\u5e8f\u8303\u56f4 <code>[first1, last1)</code> \u5e76\u4e14\u5728\u6709\u5e8f\u8303\u56f4 <code>[first2, last2)</code> \u4e2d\u672a\u80fd\u627e\u5230\u7684\u5143\u7d20\u5230\u59cb\u4e8e <code>d_first</code> \u7684\u8303\u56f4\u3002\u8f93\u51fa\u8303\u56f4\u4e5f\u4fdd\u6301\u6709\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#set_intersection","title":"<code>set_intersection</code>","text":"<pre><code>OutputIt set_intersection( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first );\nOutputIt set_intersection( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first, Compare comp );\n</code></pre> <p>\u6784\u9020\u59cb\u4e8e <code>d_first</code>\uff0c\u7531\u5728\u4e24\u4e2a\u6709\u5e8f\u8303\u56f4 <code>[first1, last1)</code> \u4e0e <code>[first2, last2)</code> \u4e2d\u90fd\u627e\u5230\u7684\u5143\u7d20\u6784\u6210\u7684\u6709\u5e8f\u8303\u56f4\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#set_union","title":"<code>set_union</code>","text":"<pre><code>OutputIt set_union( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first );\nOutputIt set_union( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first, Compare comp );\n</code></pre> <p>\u6784\u9020\u4ece <code>d_first</code> \u5f00\u59cb\u7684\u6709\u5e8f\u5e76\u96c6\uff0c\u7531\u5b58\u5728\u4e8e\u6709\u5e8f\u8303\u56f4 <code>[first1, last1)</code> \u548c <code>[first2, last2)</code> \u4e4b\u4e00\u6216\u4e8c\u8005\u4e2d\u7684\u6240\u6709\u5143\u7d20\u6784\u6210\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#set_symmetric_difference","title":"<code>set_symmetric_difference</code>","text":"<pre><code>OutputIt set_symmetric_difference( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first );\nOutputIt set_symmetric_difference( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first, Compare comp );\n</code></pre> <p>\u8ba1\u7b97\u4e24\u4e2a\u6709\u5e8f\u8303\u56f4\u7684\u5bf9\u79f0\u5dee\uff1a\u5c06\u5904\u4e8e\u4efb\u4e00\u8303\u56f4\u4e2d\uff0c\u4f46\u672a\u5728\u4e24\u4e2a\u8303\u56f4\u4e2d\u5747\u88ab\u627e\u5230\u7684\u5143\u7d20\uff0c\u590d\u5236\u5230\u59cb\u4e8e <code>d_first</code> \u7684\u8303\u56f4\u3002\u8f93\u51fa\u8303\u56f4\u4e5f\u4fdd\u6301\u6709\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#includes","title":"<code>includes</code>","text":"<pre><code>bool includes( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\nbool includes( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, Compare comp );\n</code></pre> <p>\u5728\u6709\u5e8f\u8303\u56f4 <code>[first2, last2)</code> \u662f\u6709\u5e8f\u8303\u56f4 <code>[first1, last1)</code> \u7684\u5b50\u5e8f\u5217\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de <code>true</code>(\u4e0d\u5fc5\u662f\u8fde\u7eed\u7684\u5b50\u5e8f\u5217)\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#merge","title":"<code>merge</code>","text":"<pre><code>OutputIt merge( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first );\nOutputIt merge( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first, Compare comp );\n</code></pre> <p>\u5c06\u4e24\u4e2a\u6709\u5e8f\u8303\u56f4 <code>[first1, last1)</code> \u548c <code>[first2, last2)</code> \u5408\u5e76\u5230\u59cb\u4e8e <code>d_first</code> \u7684\u4e00\u4e2a\u6709\u5e8f\u8303\u56f4\u4e2d\u3002</p> <p></p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#copy","title":"<code>copy</code>","text":"<pre><code>OutputIt copy( InputIt first, InputIt last, OutputIt d_first );\nOutputIt copy_if( InputIt first, InputIt last, OutputIt d_first, UnaryPred pred );\n</code></pre> <p>\u590d\u5236\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u5230\u4ece <code>d_first</code> \u5f00\u59cb\u7684\u53e6\u4e00\u8303\u56f4\uff08\u590d\u5236\u76ee\u6807\u8303\u56f4\uff09\u3002\u800c\u5bf9\u4e8e 2 \u5219\u662f\u4ec5\u590d\u5236\u8c13\u8bcd <code>pred</code> \u5bf9\u5176\u8fd4\u56de <code>true</code> \u7684\u5143\u7d20\u3002\u6b64\u590d\u5236\u7b97\u6cd5\u662f\u7a33\u5b9a\u7684\uff1a\u4fdd\u6301\u88ab\u590d\u5236\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#move","title":"<code>move</code>","text":"<pre><code>OutputIt move( InputIt first, InputIt last, OutputIt d_first );\n</code></pre> <p>\u79fb\u52a8\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u5230\u4ece <code>d_first</code> \u5f00\u59cb\u7684\u53e6\u4e00\u8303\u56f4\uff0c\u4ece <code>first</code> \u5f00\u59cb\u9010\u6b21\u5230 <code>last</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#swap_ranges","title":"<code>swap_ranges</code>","text":"<pre><code>ForwardIt2 swap_ranges( ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2 );\n</code></pre> <p>\u5728\u8303\u56f4 <code>[first1, last1)</code> \u548c\u4ece <code>first2</code> \u5f00\u59cb\u7684\u5305\u542b <code>std::distance(first1, last1)</code> \u4e2a\u5143\u7d20\u7684\u53e6\u4e00\u8303\u56f4\u95f4\u4ea4\u6362\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#copy_backward","title":"<code>copy_backward</code>","text":"<pre><code>BidirIt2 copy_backward( BidirIt1 first, BidirIt1 last, BidirIt2 d_last );\n</code></pre> <p>\u5c06\u8303\u56f4 <code>[first, last)</code> \u5185\u7684\u5143\u7d20\u590d\u5236\u5230\u7ec8\u4e8e <code>d_last</code> \u7684\u8303\u56f4\u3002\u4ee5\u9006\u5e8f\u590d\u5236\u5143\u7d20\uff08\u9996\u5148\u590d\u5236\u672b\u5143\u7d20\uff09\uff0c\u4f46\u4fdd\u6301\u76f8\u5bf9\u987a\u5e8f\u3002</p> <p></p> <p>ATTENTION</p> <p>\u5982\u679c\u4f7f\u7528 <code>copy</code> \u5219\u4f1a\u51fa\u73b0 4 \u4e0d\u89c1\u4e86\u7684\u60c5\u51b5\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#move_backward","title":"<code>move_backward</code>","text":"<pre><code>BidirIt2 move_backward( BidirIt1 first, BidirIt1 last, BidirIt2 d_last );\n</code></pre> <p>\u79fb\u52a8\u6765\u81ea\u8303\u56f4 <code>[first, last)</code> \u7684\u5143\u7d20\u5230\u5728 <code>d_last</code> \u7ed3\u675f\u7684\u53e6\u4e00\u8303\u56f4\u3002\u4ee5\u9006\u5e8f\u79fb\u52a8\u5143\u7d20\uff08\u9996\u5148\u590d\u5236\u672b\u5143\u7d20\uff09\uff0c\u4f46\u4fdd\u6301\u5b83\u4eec\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#fill","title":"<code>fill</code>","text":"<pre><code>void fill( ForwardIt first, ForwardIt last, const T&amp; value );\n</code></pre> <p>\u5c06\u7ed9\u5b9a\u7684 <code>value</code> \u8d4b\u7ed9 <code>[first, last)</code> \u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#generate","title":"<code>generate</code>","text":"<pre><code>void generate( ForwardIt first, ForwardIt last, Generator g );\n</code></pre> <p>\u4ee5\u7ed9\u5b9a\u51fd\u6570\u5bf9\u8c61 <code>g</code> \u6240\u751f\u6210\u7684\u503c\u5bf9\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8d4b\u503c\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#iota","title":"<code>iota</code>","text":"<pre><code>void iota( ForwardIt first, ForwardIt last, T value );\n</code></pre> <p>\u4ee5\u59cb\u4e8e <code>value</code> \u5e76\u91cd\u590d\u5730\u6c42\u503c <code>++value</code> \u7684\u987a\u5e8f\u9012\u589e\u503c\u586b\u5145\u8303\u56f4 <code>[first, last)</code>\u3002</p> <p></p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#replace-replace_if","title":"<code>replace</code> / <code>replace_if</code>","text":"<pre><code>void replace( ForwardIt first, ForwardIt last, const T&amp; old_value, const T&amp; new_value );\nvoid replace_if( ForwardIt first, ForwardIt last, UnaryPred p, const T&amp; new_value );\n</code></pre> <p>\u4ee5 <code>new_value</code> \u66ff\u6362\u8303\u56f4 <code>[first, last)</code> \u4e2d\u6240\u6709\u6ee1\u8db3\u7279\u5b9a\u5224\u522b\u6807\u51c6\u7684\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#remove-remove_if","title":"<code>remove</code> / <code>remove_if</code>","text":"<pre><code>ForwardIt remove( ForwardIt first, ForwardIt last, const T&amp; value );\nForwardIt remove_if( ForwardIt first, ForwardIt last, UnaryPred p );\n</code></pre> <p>\u4ece\u8303\u56f4 <code>[first, last)</code> \u79fb\u9664\u6240\u6709\u6ee1\u8db3\u7279\u5b9a\u5224\u522b\u6807\u51c6\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u8303\u56f4\u65b0\u7ed3\u5c3e\u7684\u5c3e\u540e\u8fed\u4ee3\u5668\u3002</p> <p>\u79fb\u9664\u5143\u7d20\u662f\u901a\u8fc7\u5c06\u8303\u56f4\u5185\u7684\u5143\u7d20\u79fb\u52a8\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u4e0d\u9700\u8981\u88ab\u79fb\u9664\u7684\u5143\u7d20\u4f1a\u5728\u8303\u56f4\u7684\u5f00\u5934\u51fa\u73b0\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684\u3002\u79fb\u9664\u64cd\u4f5c\u662f\u7a33\u5b9a\u7684\uff1a\u4e0d\u9700\u8981\u88ab\u79fb\u9664\u7684\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u4fdd\u6301\u4e0d\u53d8\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#unique","title":"<code>unique</code>","text":"<pre><code>ForwardIt unique( ForwardIt first, ForwardIt last );\nForwardIt unique( ForwardIt first, ForwardIt last, BinaryPred p );\n</code></pre> <p>\u4ece\u8303\u56f4 <code>[first, last)</code> \u79fb\u9664\u76f8\u7ee7\u7b49\u4ef7\u5143\u7d20\u7ec4\u4e2d\u9996\u5143\u7d20\u4ee5\u5916\u7684\u6240\u6709\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u8303\u56f4\u65b0\u7ed3\u5c3e\u7684\u5c3e\u540e\u8fed\u4ee3\u5668\u3002</p> <p>\u79fb\u9664\u5143\u7d20\u662f\u901a\u8fc7\u5c06\u8303\u56f4\u5185\u7684\u5143\u7d20\u79fb\u52a8\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u4e0d\u9700\u8981\u88ab\u79fb\u9664\u7684\u5143\u7d20\u4f1a\u5728\u8303\u56f4\u7684\u5f00\u5934\u51fa\u73b0\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684\u3002\u79fb\u9664\u64cd\u4f5c\u662f\u7a33\u5b9a\u7684\uff1a\u4e0d\u9700\u8981\u88ab\u79fb\u9664\u7684\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u4fdd\u6301\u4e0d\u53d8\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#_copy","title":"<code>*_copy</code>","text":"<p>Do the same thing but in a new collection.</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#remove_copy-remove_copy_if","title":"<code>remove_copy</code> / <code>remove_copy_if</code>","text":"<pre><code>OutputIt remove_copy( InputIt first, InputIt last, OutputIt d_first, const T&amp; value );\nOutputIt remove_copy_if( InputIt first, InputIt last, OutputIt d_first, UnaryPred p );\n</code></pre> <p>\u590d\u5236\u6765\u81ea\u8303\u56f4 <code>[first, last)</code> \u7684\u5143\u7d20\u5230\u4ece <code>d_first</code> \u5f00\u59cb\u7684\u53e6\u4e00\u8303\u56f4\uff0c\u5ffd\u7565\u6240\u6709\u7b49\u4e8e\uff08\u7528 <code>operator==</code> \u6bd4\u8f83\uff09<code>value</code> \u7684\u5143\u7d20\uff0c\u6216\u7565\u6240\u6709\u8c13\u8bcd <code>p</code> \u5bf9\u5176\u8fd4\u56de <code>true</code> \u7684\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#unique_copy","title":"<code>unique_copy</code>","text":"<pre><code>OutputIt unique_copy( InputIt first, InputIt last, OutputIt d_first );\nOutputIt unique_copy( InputIt first, InputIt last, OutputIt d_first, BinaryPred p );\n</code></pre> <p>\u4ece\u8303\u56f4 <code>[first, last)</code> \u590d\u5236\u5143\u7d20\u5230\u4ece <code>d_first</code> \u5f00\u59cb\u7684\u53e6\u4e00\u8303\u56f4\uff0c\u4f7f\u5f97\u76ee\u6807\u8303\u56f4\u4e0d\u5b58\u5728\u8fde\u7eed\u7684\u76f8\u7b49\u5143\u7d20\u3002\u53ea\u590d\u5236\u6bcf\u7ec4\u76f8\u7b49\u5143\u7d20\u7684\u9996\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#reverse_copy","title":"<code>reverse_copy</code>","text":"<pre><code>OutputIt reverse_copy( BidirIt first, BidirIt last, OutputIt d_first );\n</code></pre> <p>\u7ed9\u5b9a <code>N</code> \u4e3a <code>std::distance(first, last)</code>\u3002\u5c06\u8303\u56f4 <code>[first, last)</code>\uff08\u6e90\u8303\u56f4\uff09\u4e2d\u7684\u5143\u7d20\u590d\u5236\u5230\u4ece <code>d_first</code> \u5f00\u59cb\u7684\u5305\u542b <code>N</code> \u4e2a\u5143\u7d20\u7684\u65b0\u8303\u56f4\uff08\u76ee\u6807\u8303\u56f4\uff09\uff0c\u4f7f\u5f97\u76ee\u6807\u8303\u56f4\u4e2d\u5143\u7d20\u4ee5\u9006\u5e8f\u6392\u5217\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#rotate_copy","title":"<code>rotate_copy</code>","text":"<pre><code>OutputIt rotate_copy( ForwardIt first, ForwardIt middle, ForwardIt last, OutputIt d_first );\n</code></pre> <p>\u4ece\u8303\u56f4 <code>[first, last)</code> \u590d\u5236\u5143\u7d20\u5230\u59cb\u4e8e <code>d_first</code>\uff0c\u4f7f\u5f97\u76ee\u6807\u8303\u56f4\u4e2d\uff0c<code>[first, middle)</code> \u7684\u5143\u7d20\u5728 <code>[middle, last)</code> \u540e\u9762\u5e76\u4e14\u4fdd\u7559\u8fd9\u4e24\u4e2a\u8303\u56f4\u4e2d\u5143\u7d20\u7684\u539f\u672c\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#replace_copy-replace_copy_if","title":"<code>replace_copy</code> / <code>replace_copy_if</code>","text":"<pre><code>OutputIt replace_copy( InputIt first, InputIt last, OutputIt d_first, const T&amp; old_value, const T&amp; new_value );\nOutputIt replace_copy_if ( InputIt first, InputIt last, OutputIt d_first, UnaryPred p, const T&amp; new_value );\n</code></pre> <p>\u590d\u5236\u6765\u81ea\u8303\u56f4 <code>[first, last)</code> \u7684\u5143\u7d20\u5230\u59cb\u4e8e <code>d_first</code> \u7684\u8303\u56f4\uff0c\u590d\u5236\u8fc7\u7a0b\u4e2d\u4ee5 <code>new_value</code> \u66ff\u6362\u6240\u6709\u6ee1\u8db3\u7279\u5b9a\u5224\u522b\u6807\u51c6\u7684\u5143\u7d20\u3002\u66ff\u6362\u6240\u6709\u7b49\u4e8e\uff08\u7528 <code>operator==</code> \u6bd4\u8f83\uff09<code>old_value</code> \u7684\u5143\u7d20\u6216\u6240\u6709\u8c13\u8bcd <code>p</code> \u5bf9\u5176\u6ee1\u8db3 <code>true</code> \u7684\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#partition_copy","title":"<code>partition_copy</code>","text":"<pre><code>std::pair&lt;OutputIt1, OutputIt2&gt; partition_copy( InputIt first, InputIt last, OutputIt1 d_first_true, OutputIt2 d_first_false, UnaryPred p );\n</code></pre> <p>\u6839\u636e\u8c13\u8bcd <code>p</code> \u7684\u8fd4\u56de\u503c\uff0c\u5c06\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u590d\u5236\u5230\u4e24\u4e2a\u4e0d\u540c\u8303\u56f4\u3002</p> <ul> <li>\u6ee1\u8db3\u8c13\u8bcd <code>p</code> \u7684\u5143\u7d20\u4f1a\u88ab\u590d\u5236\u5230\u4ece <code>d_first_true</code> \u5f00\u59cb\u7684\u8303\u56f4\u3002</li> <li>\u5269\u4f59\u5143\u7d20\u4f1a\u88ab\u590d\u5236\u5230\u4ece <code>d_first_false</code> \u5f00\u59cb\u7684\u8303\u56f4\u3002</li> </ul>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#partial_sort_copy","title":"<code>partial_sort_copy</code>","text":"<pre><code>RandomIt partial_sort_copy( InputIt first, InputIt last, RandomIt d_first, RandomIt d_last );\nRandomIt partial_sort_copy( InputIt first, InputIt last, RandomIt d_first, RandomIt d_last, Compare comp );\n</code></pre> <p>\u4ee5\u5347\u5e8f\u6392\u5e8f\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u67d0\u4e9b\u5143\u7d20\uff0c\u5b58\u50a8\u7ed3\u679c\u4e8e\u8303\u56f4 <code>[d_first, d_last)</code>\u3002</p> <p>\u81f3\u591a\u5c06 <code>d_last - d_first</code> \u4e2a\u5143\u7d20\u6709\u5e8f\u653e\u7f6e\u5230\u8303\u56f4 <code>[d_first, d_first + n)</code> \u4e2d\u3002\u5176\u4e2d <code>n</code> \u662f\u8981\u6392\u5e8f\u7684\u5143\u7d20\u6570\uff08<code>std::min(std::distance(first, last), d_last - d_first)</code>\uff09\u3002\u4e0d\u4fdd\u8bc1\u4fdd\u6301\u76f8\u7b49\u5143\u7d20\u7684\u987a\u5e8f\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#transform","title":"<code>transform</code>","text":"<pre><code>OutputIt transform( InputIt first1, InputIt last1, OutputIt d_first, UnaryOp unary_op );\nOutputIt transform( InputIt1 first1, InputIt1 last1, InputIt2 first2, OutputIt d_first, BinaryOp binary_op );\n</code></pre> <p><code>std::transform</code> \u5e94\u7528\u7ed9\u5b9a\u7684\u51fd\u6570\u5230\u67d0\u4e2a/\u4e9b\u8f93\u5165\u8303\u56f4\u4e2d\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5230\u4ece <code>d_first</code> \u5f00\u59cb\u7684\u8f93\u51fa\u8303\u56f4\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#uninitialized","title":"<code>uninitialized</code>","text":"<p>\u5982\u679c\u4f60\u6709\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u7136\u540e\u4f60\u60f3\u7528\u503c\u6765\u586b\u5145\u5b83\uff0c\u4f46\u662f\u5e76\u4e0d\u80fd\u4f7f\u7528 <code>std::fill</code> \u4e4b\u7c7b\u7684(\u56e0\u4e3a\u6b64\u65f6\u4e0d\u80fd\u4f7f\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26)\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#uninitialized_fill","title":"<code>uninitialized_fill</code>","text":"<pre><code>void uninitialized_fill( NoThrowForwardIt first, NoThrowForwardIt last, const T&amp; value );\n</code></pre> <p>\u5c06 <code>value</code> \u590d\u5236\u5230\u672a\u521d\u59cb\u5316\u5185\u5b58\u533a\u57df <code>[first, last)</code>\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#uninitialized_copy","title":"<code>uninitialized_copy</code>","text":"<pre><code>NoThrowForwardIt uninitialized_copy( InputIt first, InputIt last, NoThrowForwardIt d_first );\n</code></pre> <p>\u5c06\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u590d\u5236\u5230\u4ece d_first \u5f00\u59cb\u7684\u672a\u521d\u59cb\u5316\u5185\u5b58\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#uninitialized_move","title":"<code>uninitialized_move</code>","text":"<pre><code>NoThrowForwardIt uninitialized_move( InputIt first, InputIt last, NoThrowForwardIt d_first );\n</code></pre> <p>\u5c06\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u590d\u5236\u5230\u4ece d_first \u5f00\u59cb\u7684\u672a\u521d\u59cb\u5316\u5185\u5b58\u533a\u57df\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#destroy","title":"<code>destroy</code>","text":"<pre><code>void destroy( ForwardIt first, ForwardIt last );\n</code></pre> <p>\u9500\u6bc1\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5bf9\u8c61\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#uninitialized_default_construct","title":"<code>uninitialized_default_construct</code>","text":"<pre><code>void uninitialized_default_construct( NoThrowForwardIt first, NoThrowForwardIt last );\n</code></pre> <p>\u5728\u672a\u521d\u59cb\u5316\u5185\u5b58\u533a\u57df <code>[first, last)</code> \u4e0a\u901a\u8fc7\u9ed8\u8ba4\u521d\u59cb\u5316\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#uninitialized_value_construct","title":"<code>uninitialized_value_construct</code>","text":"<pre><code>void uninitialized_value_construct( NoThrowForwardIt first, NoThrowForwardIt last );\n</code></pre> <p>\u5728\u672a\u521d\u59cb\u5316\u5185\u5b58\u533a\u57df <code>[first, last)</code> \u4e0a\u901a\u8fc7\u503c\u521d\u59cb\u5316\u6784\u9020\u3002</p>"},{"location":"Computer_Science/OOP/105_STL_Algorithmsin_Less_Than_an_Hour/#_n","title":"<code>*_n</code>","text":"<p>\u8fd9\u4e9b\u4e0d\u9700\u8981\u5f00\u59cb\u548c\u7ed3\u675f\uff0c\u53ea\u9700\u8981\u5f00\u59cb\u548c\u6570\u91cf\u3002</p> <p>\u8fd9\u91cc\u5c31\u5217\u51fa\u4e86\uff0c\u4e0d\u4e00\u4e00\u4ecb\u7ecd\u4e86\u3002</p> <p><code>fill_n</code> / <code>copy_n</code> / <code>generate_n</code> / <code>search_n</code> / <code>for_each_n</code> / <code>unininitialized_copy_n</code> / <code>uninitialized_move_n</code> / <code>uninitialized_fill_n</code> / <code>uninitialized_value_construct_n</code> / <code>uninitialized_default_construct_n</code> / <code>destroy_n</code></p>"},{"location":"Computer_Science/OOP/Chapter1/","title":"Chapter 1 | introduction","text":"<p> \u7ea6 934 \u4e2a\u5b57  96 \u884c\u4ee3\u7801  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 6 \u5206\u949f</p>"},{"location":"Computer_Science/OOP/Chapter1/#the-first-cpp-program","title":"The first CPP program","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main() {  \n    int age;\n    cin &gt;&gt; age;\n    cout &lt;&lt; \"Hello, World! I am \" &lt;&lt; age &lt;&lt; \" years old!\" &lt;&lt; endl;  \n    return 0;\n}\n</code></pre> <ul> <li><code>iostream</code> \u662f\u5b9a\u4e49\u8f93\u5165/\u8f93\u51fa\u6d41\u76f8\u5173\u51fd\u6570\u548c\u64cd\u4f5c\u7684\u5934\u6587\u4ef6</li> <li>\u547d\u540d\u7a7a\u95f4\u7528\u4e8e\u533a\u5206\u5177\u6709\u76f8\u540c\u65b9\u6cd5\u540d\u7684\u4ee3\u7801\u5757\u3002\u5728\u672c\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528\u547d\u540d\u7a7a\u95f4 std; \u5c06\u547d\u540d\u7a7a\u95f4\u8bbe\u7f6e\u4e3a\u6807\u51c6\uff0c\u4ee5\u4fbf\u7528\u6237\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6240\u6709\u6807\u51c6\u65b9\u6cd5\u3002</li> <li>\u6709\u4e9b\u7f16\u8bd1\u5668 <code>void</code> \u53ef\u80fd\u4f1a\u62a5\u9519\uff0c\u8981\u7528 <code>int</code></li> <li><code>cin</code> \u662f\u8f93\u5165\u51fd\u6570\uff0c<code>cout</code> \u662f\u8f93\u51fa\u51fd\u6570</li> <li><code>endl</code> \u662f\u6362\u884c\u7b26\uff0c\u76f8\u5f53\u4e8e <code>\\n</code></li> <li>\u4e0d\u5199 <code>return 0</code> \u4e5f\u884c</li> </ul>"},{"location":"Computer_Science/OOP/Chapter1/#string","title":"String","text":""},{"location":"Computer_Science/OOP/Chapter1/#assignment","title":"Assignment","text":"<pre><code>char cstr1[20];\nchar cstr2[20] = \"jaguar\"; \n\nstring str1;\nstring str2 = \"panther\"; \n\ncstr1 = cstr2; // illegal \nstr1 = str2; // legal\n</code></pre> <ul> <li>\u6570\u7ec4\u4e0d\u80fd\u76f4\u63a5 copy \u8981\u8c03\u7528\u51fd\u6570 <code>strcpy(cstr1, cstr2);</code></li> <li><code>string</code> \u53ef\u4ee5\u76f4\u63a5 copy</li> </ul>"},{"location":"Computer_Science/OOP/Chapter1/#concatenation","title":"Concatenation","text":"<pre><code>string str1 = \"foo\";\nstring str2 = \"bar\";\nstring str3 = str1 + str2; \ncout &lt;&lt; \"str3 = \" &lt;&lt; str3 &lt;&lt; endl; // str3 = foobar\n\n\nstr2 += str1;\ncout &lt;&lt; \"str2 = \" &lt;&lt; str2 &lt;&lt; endl; // str2 = barfoo\n</code></pre> <ul> <li>\u5b57\u7b26\u4e32\u7684\u8fde\u63a5</li> </ul>"},{"location":"Computer_Science/OOP/Chapter1/#constructorsctors","title":"Constructors(Ctors)","text":"<pre><code>string (const char *cp, int len);\u00a0 // copy from cp to cp+len\n\nstring (const string&amp; s2, int pos); // copy from pos\n\nstring (const string&amp; s2, int pos, int len); // copy from pos to pos+len\n</code></pre> <p>Note</p> <p><code>string</code> \u7684\u5143\u7d20\u5b58\u50a8\u662f\u8fde\u7eed\u7684\uff0c\u5373\u5bf9\u4e8e <code>string s</code> \uff0c\u5bf9 <code>[\u200b0\u200b, s.size())</code> \u4e2d\u7684\u4efb\u610f <code>n</code> \u6709 <code>&amp;*(s.begin() + n) == &amp;*s.begin() + n</code>\u3002</p>"},{"location":"Computer_Science/OOP/Chapter1/#substring","title":"Substring","text":"<pre><code>substr (int pos, int len);\n</code></pre> <ul> <li><code>substr</code> \u8fd4\u56de\u4e00\u4e2a\u4ece <code>pos</code> \u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a <code>len</code> \u7684\u5b50\u4e32</li> </ul>"},{"location":"Computer_Science/OOP/Chapter1/#modification","title":"Modification","text":"<pre><code>str3 = \"hello, china!\"; // \u8d4b\u503c\nstring str4(\"hello, zju\"); // \u521d\u59cb\u5316\nstring str5(str3); // \u62f7\u8d1d\u6784\u9020\nstring str6(str3, 7, 5);\nstring str7 = str3.substr(7, 5);\nstring str8 = str3;\nstr8.replace(7, 5, \"zjg\");\n\ncout &lt;&lt; \"str4 = \" &lt;&lt; str4 &lt;&lt; endl; // str4 = hello, zju\ncout &lt;&lt; \"str5 = \" &lt;&lt; str5 &lt;&lt; endl; // str5 = hello, china!\ncout &lt;&lt; \"str6 = \" &lt;&lt; str6 &lt;&lt; endl; // str6 = china\ncout &lt;&lt; \"str7 = \" &lt;&lt; str7 &lt;&lt; endl; // str7 = china\ncout &lt;&lt; \"str8 = \" &lt;&lt; str8 &lt;&lt; endl; // str8 = hello, zjg!\n\nstr8.assign(10, 'A');\ncout &lt;&lt; \"str8 = \" &lt;&lt; str8 &lt;&lt; endl; // str8 = AAAAAAAAAA\n\nstring str9 = \"hello, hangzhou city!\";\ncout &lt;&lt; \"str9 = \" &lt;&lt; str9 &lt;&lt; endl; // str9 = hello, hanghzou city!\nstring str_to_find = \"hangzhou\";\ncout &lt;&lt; \"str9.find(str_to_find) = \" &lt;&lt; str9.find(str_to_find) &lt;&lt; endl; // str9.find(str_to_find) = 7\nstr9.replace(str9.find(str_to_find), str_to_find.length(), \"jinhua\");\ncout &lt;&lt; \"str9 = \" &lt;&lt; str9 &lt;&lt; endl; // str9 = hello, jinhua city!\n</code></pre> <ul> <li>\u521d\u59cb\u5316\u548c\u62f7\u8d1d\u6784\u9020\u6709\u672c\u8d28\u533a\u522b</li> <li>\u6784\u9020\u51fd\u6570\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570</li> </ul> <ol> <li><code>assign</code> \u51fd\u6570</li> </ol> <ul> <li><code>assign(const string&amp; str)</code> \uff1a\u5c06\u5f53\u524d\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a <code>str</code> \u7684\u526f\u672c\u3002</li> <li><code>assign( size_type count, CharT ch );</code> \uff1a\u5c06\u5f53\u524d\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a <code>count</code> \u4e2a\u5b57\u7b26 <code>ch</code> \u7684\u526f\u672c\u3002</li> </ul> <ol> <li><code>insert</code> \u51fd\u6570</li> </ol> <ul> <li><code>insert( size_type index, size_type count, CharT ch );</code> \uff1a\u5728\u5b57\u7b26\u4e32\u7684 <code>index</code> \u4f4d\u7f6e\u63d2\u5165 <code>count</code> \u4e2a\u5b57\u7b26 <code>ch</code>\u3002</li> <li><code>insert( size_type index, const CharT* s );</code> : \u5728\u5b57\u7b26\u4e32\u7684 <code>index</code> \u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26\u4e32 <code>s</code> \u4e14\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7531\u9996\u4e2a\u7a7a\u5b57\u7b26\uff0c\u901a\u8fc7 <code>Traits::length(s)</code> \u786e\u5b9a\u3002</li> <li><code>insert( size_type index, const CharT* s, size_type count );</code> \uff1a\u5728\u5b57\u7b26\u4e32\u7684 <code>index</code> \u4f4d\u7f6e\u63d2\u5165\u63d2\u5165\u8303\u56f4 <code>[s, s + count)</code> \u4e2d\u7684\u5b57\u7b26\u3002\u8303\u56f4\u53ef\u4ee5\u5305\u542b\u7a7a\u5b57\u7b26\u3002</li> <li><code>insert( size_type index, const string&amp; str );</code> \uff1a\u5728\u5b57\u7b26\u4e32\u7684 <code>index</code> \u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26\u4e32 <code>str</code> \u3002</li> <li><code>iterator insert( iterator pos, CharT ch );</code> : \u5728 <code>pos</code> \u6240\u6307\u5411\u7684\u5b57\u7b26\u524d\u63d2\u5165\u5b57\u7b26 <code>ch</code> \u3002</li> </ul> <ol> <li><code>erase</code> \u51fd\u6570</li> </ol> <ul> <li><code>erase(index,count);</code> \uff1a\u5220\u9664\u4ece <code>index</code> \u5f00\u59cb\u7684 <code>count</code> \u4e2a\u5b57\u7b26\u3002\u5982\u679c <code>count</code> \u8d85\u51fa\u8303\u56f4(<code>std::min(count, size() - index)</code>)\uff0c\u5219\u5220\u9664\u4ece <code>index</code> \u5230\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u6240\u6709\u5b57\u7b26\u3002\u5982\u679c\u7701\u7565 <code>count</code>\uff0c\u5219\u5220\u9664\u4ece <code>index</code> \u5230\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u6240\u6709\u5b57\u7b26\u3002</li> </ul> <ol> <li><code>append</code> \u51fd\u6570</li> </ol> <ul> <li><code>append(count, ch);</code> \uff1a\u5c06 <code>count</code> \u4e2a\u5b57\u7b26 <code>ch</code> \u6dfb\u52a0\u5230\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002</li> <li><code>append(const CharT* s, size_type count );</code> \uff1a\u5c06\u8303\u56f4 <code>[s, s + count)</code> \u4e2d\u7684\u5b57\u7b26\u6dfb\u52a0\u5230\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002\u8303\u56f4\u53ef\u4ee5\u5305\u542b\u7a7a\u5b57\u7b26\u3002</li> <li><code>append(const CharT* s);</code> \uff1a\u7b49\u4ef7\u4e8e <code>return append(s, Traits::length(s));</code>\u3002</li> </ul> <ol> <li><code>replace</code> \u51fd\u6570</li> </ol> <ul> <li><code>replace(pos, count, const string&amp; str );</code> : \u4ee5\u7ed9\u5b9a\u5b57\u7b26\u66ff\u6362\u8303\u56f4 <code>[begin() + pos, begin() + std::min(pos + count, size()))</code></li> </ul> <ol> <li><code>find</code> \u51fd\u6570</li> </ol> <ul> <li><code>find(string&amp; str, pos) const;</code> : \u5bfb\u627e\u9996\u4e2a\u7b49\u4e8e\u7ed9\u5b9a\u5b57\u7b26\u5e8f\u5217\u7684\u5b50\u4e32\u3002\u641c\u7d22\u4ece pos \u5f00\u59cb\uff0c\u4e5f\u5c31\u662f\u8bf4\u627e\u5230\u7684\u5b50\u4e32\u4e0d\u4f1a\u4ece pos \u4e4b\u524d\u7684\u4f4d\u7f6e\u5f00\u59cb\u3002</li> <li><code>find( const CharT* s, size_type pos, size_type count ) const;</code> : \u5bfb\u627e\u9996\u4e2a\u7b49\u4e8e\u8303\u56f4 <code>[s, s + count)</code> \u7684\u5b50\u4e32\u3002\u6b64\u8303\u56f4\u53ef\u4ee5\u5305\u542b\u7a7a\u5b57\u7b26\u3002</li> <li><code>find( const CharT* s, size_type pos = 0 ) const;</code> : \u5bfb\u627e\u9996\u4e2a\u7b49\u4e8e <code>s</code> \u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002\u8be5\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7531\u9996\u4e2a\u7a7a\u5b57\u7b26\uff0c\u901a\u8fc7 <code>Traits::length(s)</code> \u786e\u5b9a\u3002</li> </ul> <ol> <li><code>clear</code> \u51fd\u6570</li> </ol> <ul> <li><code>void clear();</code> : \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff0c\u4f7f\u5176\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\u5982\u540c\u901a\u8fc7\u6267\u884c <code>erase(begin(), end())</code>\u3002</li> </ul> reference <ul> <li> <p>assign</p> </li> <li> <p>insert</p> </li> <li> <p>erase</p> </li> <li> <p>append</p> </li> <li> <p>replace</p> </li> <li> <p>find</p> </li> <li> <p>clear</p> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter1/#files","title":"files","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\n\nint main(){\n    string str1 = \"foo, bar!\";\n    ofstream fout(\"out.txt\");  // or ofstream fout(\"C:\\\\test.txt\");\n    fout &lt;&lt; str1 &lt;&lt; endl;\n\n    ifstream fin(\"out.txt\");\n    string str2, str3;\n    fin &gt;&gt; str2 &gt;&gt; str3;\n    cout &lt;&lt; \"str2 = \" &lt;&lt; str2 &lt;&lt; endl; // str2 = foo,\n    cout &lt;&lt; \"str3 = \" &lt;&lt; str3 &lt;&lt; endl; // str3 = bar!\n}\n</code></pre> \u5728 fin \u65f6\u4e3a\u4ec0\u4e48\u8981\u6709\u4e24\u4e2a\u5462 <p>\u56e0\u4e3a\u5728 <code>str1</code> \u4e2d\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u5728\u8bfb\u5165\u65f6\u4f1a\u81ea\u52a8\u65ad\u5f00\u3002\u4e00\u884c\u5168\u8bfb\u8fdb\u6765\u9700\u8981\u7528 <code>getline</code> \u51fd\u6570\u3002</p> <p><code>getline</code> \u51fd\u6570\uff1a \u5b9a\u4e49\u5728\u5934\u6587\u4ef6 <code>&lt;string&gt;</code> \u4e2d\u3002</p> <pre><code>std::basic_istream&lt;CharT, Traits&gt;&amp; getline( std::basic_istream&lt;CharT, Traits&gt;&amp; input, std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; str, CharT delim );\n</code></pre> <p>Example:</p> <pre><code>std::string name;\nstd::cout &lt;&lt; \"What is your name? \";\nstd::getline(std::cin, name);\nstd::cout &lt;&lt; \"Hello \" &lt;&lt; name &lt;&lt; \", nice to meet you.\\n\";\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter1/#regex","title":"regex","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;regex&gt;\n\nusing namespace std;\n\nint main(){\n    string s = \"Hello, Students@zju!\";\n    regex re(\"a|e|i|o|u\");\n    string s1 = regex_replace(s, re, \"*\");\n    cout &lt;&lt; \"s1 = \" &lt;&lt; s1 &lt;&lt; endl; // s1 = H*ll*, St*d*nts@zj*!\n}\n</code></pre> <ul> <li>\u53cc\u5f15\u53f7\uff0c\u6240\u4ee5\u53ef\u4ee5\u662f\u4e00\u4e2a\u4e32\u3002</li> <li>\u6b63\u5219\u8868\u8fbe\u5f0f <code>a|e|i|o|u</code><ul> <li><code>|</code> \u8868\u793a\u903b\u8f91\"\u6216\",\u5339\u914d\u4efb\u610f\u4e00\u4e2a\u5c0f\u5199\u5143\u97f3\u5b57\u6bcd<code>(a\u3001e\u3001i\u3001o\u3001u)</code>\u3002</li> <li>\u6ce8\u610f\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u9ed8\u8ba4\u533a\u5206\u5927\u5c0f\u5199\uff0c\u56e0\u6b64\u5927\u5199\u5143\u97f3\u4e0d\u4f1a\u88ab\u5339\u914d\u3002</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter1/#further-reading","title":"Further reading","text":"A_Tour_of_C++__CH08   124 KB / 2025-02-17 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter1/#formatting","title":"Formatting","text":"<p>The iostream library provides a large set of operations for controlling the format of input and output. The simplest formatting controls are called manipulators.</p> <ul> <li>For example, we can output integers as decimal (the default), octal, or hexadecimal numbers:</li> </ul> <pre><code>cout &lt;&lt; 1234 &lt;&lt; ',' &lt;&lt; hex &lt;&lt; 1234 &lt;&lt; ',' &lt;&lt; oct &lt;&lt; 1234 &lt;&lt; '\\n';\n\n// 1234,4d2,2322\n</code></pre> <ul> <li>We can explicitly set the output format for floating-point numbers:</li> </ul> <pre><code>constexpr double d = 123.456;\n\ncout &lt;&lt; d &lt;&lt; \"; \" // use the default for mat for d\n    &lt;&lt; scientific &lt;&lt; d &lt;&lt; \"; \" // use 1.123e2 style for mat for d\n    &lt;&lt; hexfloat &lt;&lt; d &lt;&lt; \"; \" // use hexadecimal notation for d\n    &lt;&lt; fixed &lt;&lt; d &lt;&lt; \"; \" // use 123.456 style for mat for f\n    &lt;&lt; defaultfloat &lt;&lt; d &lt;&lt; '\\n'; // use the default for mat for d\n</code></pre> <ul> <li>This produces:</li> </ul> <pre><code>123.456; 1.234560e+002; 0x1.edd2f2p+6; 123.456000; 123.456\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter10/","title":"Chapter 10 | Operator Overloading &amp;&amp; Streams","text":"<p> \u7ea6 1056 \u4e2a\u5b57  434 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 11 \u5206\u949f</p> <ul> <li>Allow user-defined types to act like built-in types</li> <li>Another way to make a function call</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#overloadable-operators","title":"Overloadable operators","text":""},{"location":"Computer_Science/OOP/Chapter10/#unary-and-binary-operators-overloadable","title":"Unary and binary operators overloadable","text":"<pre><code>+ - * / % ^ &amp; | ~\n= &lt; &gt; += -= *= /= %=\n^= &amp;= |= &lt;&lt; &gt;&gt; &gt;&gt;= &lt;&lt;= ==\n!= &lt;= &gt;= ! &amp;&amp; || ++ --\n, -&gt;* -&gt; () []\nnew new[]\ndelete delete[]\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter10/#you-cannot-overload","title":"You cannot overload:","text":"<pre><code>. .* :: ?:\nsizeof typeid\nstatic_cast dynamic_cast\nconst_cast reinterpret_cast\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter10/#operator-overloading","title":"Operator Overloading","text":""},{"location":"Computer_Science/OOP/Chapter10/#restrictions","title":"Restrictions","text":"<ul> <li>Only existing operators can be overloaded<ul> <li>You cannot create ** for exponentiation</li> </ul> </li> <li>Overloaded operators must<ul> <li>Preserve number of operands (\u4e00\u5143\u8fd0\u7b97\u7b26\u6216\u4e8c\u5143\u8fd0\u7b97\u7b26\u7b49)</li> <li>Preserve precedence</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#overloaded-operators","title":"Overloaded operators","text":"<ul> <li>just a function with an operator name!<ul> <li>Use the operator keyword as a prefix<ul> <li><code>operator*(...)</code></li> </ul> </li> </ul> </li> </ul> <ul> <li>A member function with implicit first argument</li> </ul> <p><code>String String::operator+(const String&amp; that);</code></p> <ul> <li>A global (free) function with explicit arguments</li> </ul> <p><code>String operator+(const String&amp; l,const String&amp; r);</code></p>"},{"location":"Computer_Science/OOP/Chapter10/#operator-as-a-member-function","title":"Operator as a member function","text":"<pre><code>class Integer{\npublic :\n    Integer( int n = 0 ):i(n){}\n    Integer operator+(const Integer&amp; n)const{\n        return Integer(i + n.i);\n    }\nprivate:\n    int i;\n};\n</code></pre> <p>Note</p> <p>\u5bf9\u4e8e member function \u8981\u8bb0\u4f4f\u4e00\u70b9\uff0c\u662f\u5b58\u5728\u9690\u5f0f\u7684\u53c2\u6570 this \u7684\u3002</p>"},{"location":"Computer_Science/OOP/Chapter10/#member-functions","title":"Member functions","text":"<pre><code>Integer x(1), y(5), z;\nx + y; // x.operator+(y);\n</code></pre> <ul> <li>Implicit first argument</li> <li>Full access to the class definition and all fields</li> <li>No type conversion performed on receiver (.operator \u524d\u9762\u7684 \u4e5f\u5c31\u662f receiver \u662f\u4e0d\u80fd\u505a\u9690\u5f0f\u8f6c\u6362\u7684)</li> <li>\u4e0b\u8ff0\u7684 <code>x + 3</code> \u53ef\u4ee5\u7684\u539f\u56e0\u662f\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8c03\u7528 <code>Integer( int n = 0 ):i(n){}</code> \u5c06 <code>3</code> \u8f6c\u6362\u4e3a <code>Integer</code> \u7c7b\u578b\u3002</li> </ul> <pre><code>z = x + y // Good\nz = x + 3 // Good\nz = 3 + y // Error\n</code></pre> <ul> <li>For binary operators ( +, -, *, etc. ), the member functions require one argument.</li> <li>For unary operators ( unary -, !, etc. ), the member functions require no arguments:</li> </ul> <pre><code>Integer operator-() const { \n    return Integer(-i);\n}\n...\nz = -x; // z.operator=(x.operator-());\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter10/#operator-as-a-global-function","title":"Operator as a global function","text":"<pre><code>Integer operator+(const Integer&amp;, const Integer&amp;);\nInteger x, y;\nx + y // operator+(x, y);\n</code></pre> <ul> <li>\u6ca1\u6709\u9690\u5f0f\u53c2\u6570</li> <li>Explicit first argument</li> <li>Does not need special access to classes</li> <li>May need to be a friend</li> <li>Type conversions performed on both arguments</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#global-operators-friend","title":"Global operators (friend)","text":"<pre><code>class Integer {\npublic:\n    friend Integer operator+(const Integer&amp;,\n    const Integer&amp;); \n    ...\nprivate:\n    int i;\n};\nInteger operator+(const Integer&amp; lhs, const Integer&amp; rhs)\n{\n    return Integer( lhs.i + rhs.i ); \n}\n</code></pre> <ul> <li>Binary operators require two arguments</li> <li>Unary operators require one argument</li> <li>Conversion:</li> </ul> <pre><code>z = x + y; // operator+(x, y)\nz = x + 3; // operator+(x, Integer(3))\nz = 3 + y; // operator+(Integer(3), y)\nz = 3 + 7; // Integer(10) \u8fd9\u91cc\u662f\u5148 3 + 7 \u518d\u8f6c\u6362\u4e3a Integer(10)\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u81ea\u7136\u7684 int \u7684\u8ba1\u7b97\n</code></pre> <p>If you cannot access private data members, then the global function must use the public interface, e.g., the accessors.</p>"},{"location":"Computer_Science/OOP/Chapter10/#argument-passing","title":"Argument passing","text":"<ul> <li>Pass it as a const reference if it is read-only (except built-ins).</li> <li>Make member functions const if they do not change the class (relational operators, + , - , etc.).</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#return-values","title":"Return values","text":"<ul> <li>The return type depends on the expected semantics of the operator, e.g.,<ul> <li><code>operator+</code> needs to return a new object</li> <li>logical operators should return <code>bool</code> .</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#prototypes","title":"Prototypes","text":"<p>\u51fd\u6570\u7b7e\u540d\u5176\u5b9e\u662f\u56fa\u5b9a\u7684:</p> <ul> <li><code>+-*/%^&amp;|~</code><ul> <li><code>T operator X(const T&amp; l, const T&amp; r)</code></li> </ul> </li> <li><code>! &amp;&amp; || &lt; &lt;= == &gt;= &gt;</code><ul> <li><code>bool operator X(const T&amp; l, const T&amp; r)</code></li> </ul> </li> <li><code>[]</code><ul> <li><code>E&amp; T::operator [](int index)</code></li> <li>\u5403\u8fdb\u53bb\u4e00\u4e2a\u6574\u6570\uff0c\u5176\u5b9e\u662f\u4e00\u79cd\u5bb9\u5668\uff0c\u6240\u4ee5\u8981\u8fd4\u56de\u5bb9\u5668\u91cc\u9762\u7684\u6570\u636e\u7684\u7c7b\u578b\uff0c\u53c8\u56e0\u4e3a\u53ef\u4ee5\u8d4b\u503c\u6240\u4ee5\u6709\u5f15\u7528\u3002</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#operators-and-","title":"Operators ++ and --","text":"<p>How to distinguish postfix from prefix?</p> <ul> <li><code>i++</code> or <code>++i</code></li> <li>\u5355\u770b\u53c2\u6570\u8868\uff0c\u770b\u4f3c\u65e0\u6cd5\u533a\u5206\uff0c\u5b9e\u9645\u4e0a\u7684\u5b9e\u73b0\u662f\u5982\u4e0b\u7684\u3002</li> </ul> <ul> <li>Postfix forms take an <code>int</code> argument</li> <li>compiler will pass <code>0</code> for that argument.</li> </ul> <pre><code>class Integer { \npublic: \n    ... \n    Integer&amp; operator++(); //prefix++ \n    Integer operator++(int); //postfix++ \n    Integer&amp; operator--(); //prefix-- \n    Integer operator--(int); //postfix-- \n    ... \n};\n</code></pre> <ul> <li>\u8fd9\u91cc\u7684 <code>int</code> \u662f\u7528\u6765\u5360\u4f4d\u7684\uff0c\u5b9e\u9645\u4e0a\u5373\u5982\u4e0b\uff1a</li> </ul> <pre><code>Integer x(5);\n++x; // calls x.operator++();\nx++; // calls x.operator++(0);\n--x; // calls x.operator--();\nx--; // calls x.operator--(0);\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter10/#implementing-and-","title":"Implementing <code>++</code> and <code>--</code>","text":"<pre><code>Integer&amp; Integer::operator++() { \n    this-&gt;i += 1; // increment \n    return *this; // fetch \n} \n// the int argument is not used so leave it unnamed\nInteger Integer::operator++( int ){ \n    Integer old( *this ); // fetch \n    ++(*this); // increment \n    return old; // return \n}\n</code></pre> <ul> <li>\u5f62\u6210\u91cd\u8f7d\u5173\u7cfb\u7684 <code>operator</code> \u8fd8\u662f\u8981\u5229\u7528\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u7684</li> <li>\u4f7f\u7528 <code>++(*this);</code> \u53ef\u662f\u4f7f\u5f97\u5b9e\u73b0 <code>++</code> \u53ef\u4ee5\u628a\u5b9e\u73b0\u8fd0\u7b97\u7684\u7279\u6b8a\u6027\u5c40\u9650\u5728 <code>operator++</code> \u4e2d\uff0c\u4ece\u800c\u4f7f\u5f97\u4e24\u4e2a\u51fd\u6570\u62e5\u6709\u4e00\u81f4\u6027</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#relational-operators","title":"Relational operators","text":"<pre><code>class Integer { \npublic: \n    bool operator==( const Integer&amp; rhs ) const; \n    bool operator!=( const Integer&amp; rhs ) const;\n    bool operator&lt;( const Integer&amp; rhs ) const; \n    bool operator&gt;( const Integer&amp; rhs ) const; \n    bool operator&lt;=( const Integer&amp; rhs ) const; \n    bool operator&gt;=( const Integer&amp; rhs ) const; \n}\n</code></pre> <ol> <li>implement <code>!=</code> in terms of <code>==</code></li> </ol> <pre><code>bool Integer::operator==( const Integer&amp; rhs ) const { \n    return i == rhs.i; \n} \nbool Integer::operator!=( const Integer&amp; rhs ) const { \n    return !(*this == rhs); \n}\n</code></pre> <ol> <li>implement <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;=</code> in terms of <code>&lt;</code></li> </ol> <pre><code>bool Integer::operator&lt;( const Integer&amp; rhs ) const { \n    return i &lt; rhs.i; \n}\nbool Integer::operator&gt;( const Integer&amp; rhs ) const { \n    return rhs &lt; *this; \n} \nbool Integer::operator&lt;=( const Integer&amp; rhs ) const { \n    return !(rhs &lt; *this); \n} \nbool Integer::operator&gt;=( const Integer&amp; rhs ) const { \n    return !(*this &lt; rhs); \n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter10/#operator","title":"Operator <code>[]</code>","text":"<pre><code>Vector v(100); // create a vector of size 100\nv[10] = 45;\n</code></pre> <ul> <li>Must be a member function</li> <li>Single argument</li> <li>Implies that the object acts like an array</li> <li>should return a reference</li> </ul> <pre><code>#ifndef _VECTOR_H\n#define _VECTOR_H\n\nclass Vector {\npublic:\n    Vector(int size) : m_size(size) {\n        m_array = new int[size];\n    }\n    ~Vector() {\n        delete[] m_array;\n    }\n    int&amp; operator[](int index) {\n        return m_array[index];\n    }\nprivate:\n    int* m_array;\n    int m_size;\n};\n\n#endif\n</code></pre> <ul> <li>index \u5f80\u5f80\u4f1a\u505a\u4e24\u4e2a\u7248\u672c\uff0c\u8fd8\u6709\u4e00\u4e2a\u662f <code>const int&amp;</code> \u7684\u7248\u672c\uff0c\u56e0\u4e3a\u5bf9\u4e8e <code>const</code> \u5bf9\u8c61\u4e5f\u8981\u80fd\u7528\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#operator_1","title":"Operator <code>( )</code>","text":"<ul> <li>A functor, which overloads the function call operator, is an object that acts like a function.</li> </ul> <pre><code>struct F {\n    void operator()(int x) const {\n    std::cout &lt;&lt; x &lt;&lt; \"\\n\";\n    }\n}; // F is a functor class\n\nF f; // f is a functor\nf(2); // calls f.operator()\n</code></pre> <ul> <li><code>F</code> \u662f functor class\uff0c<code>f</code> \u662f\u4e00\u4e2a functor object</li> <li> <p>\u6807\u51c6\u5e93\u4e2d\u5f88\u591a\u90fd\u4f7f\u7528\u4e86 <code>functor</code></p> </li> <li> <p>\u5148\u5b9e\u73b0\u4e00\u4e2a\u8f6c\u6362\u7684\u529f\u80fd\u3002</p> </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main(){\n    vector&lt;int&gt; v = {1, 3, 5, 7, 9};\n\n    for(int&amp; x : v){\n        x *= 5;\n    }\n\n    for(int&amp; x : v){\n        x += 3;\n    }\n\n    for(int&amp; x : v){\n        x = x*x;\n    }\n\n    for(int&amp; x : v){\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n\n    cout &lt;&lt; endl;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>64 324 784 1444 2304\n</code></pre> <ul> <li>\u4f46\u662f\u4ece\u91cd\u8f7d\u3001\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u91cd\u590d\u4ee3\u7801\u591a\uff0c\u8fd9\u79cd\u505a\u6cd5\u5e76\u4e0d\u597d\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u62bd\u8c61\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid transform(vector&lt;int&gt;&amp; v, int (*f)(int)){\n    for(int&amp; x : v){\n        x = f(x);\n    }\n}\n\nint main(){\n    vector&lt;int&gt; v = {1, 3, 5, 7, 9};\n\n    transform(v, [](int x){return x*5;});\n    transform(v, [](int x){return x+3;});\n    transform(v, [](int x){return x*x;});\n\n    for(int&amp; x : v){\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n\n    cout &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u53ea\u5f15\u7528\u4e00\u6b21\uff0c\u53ef\u4ee5\u7528\u533f\u540d\u51fd\u6570</li> <li><code>[]</code> \u5185\u662f\u6355\u6349\u7684\u73af\u5883\u53d8\u91cf</li> </ul> <ul> <li>\u5982\u679c\u6211\u4eec\u9700\u8981\u4e58\u7684\u6570\u636e\u53ef\u53d8\u5462\uff1f</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid transform(vector&lt;int&gt;&amp; v, int (*f)(int)){\n    for(int&amp; x : v){\n        x = f(x);\n    }\n}\n\nint main(){\n    vector&lt;int&gt; v = {1, 3, 5, 7, 9};\n\n    int a = 5;\n    transform(v, [](int x){return x*5;});  // Right\n    // transform(v, [a](int x){return x*a;});  // Error\n    transform(v, [](int x){return x+3;});\n    transform(v, [](int x){return x*x;});\n\n    for(int&amp; x : v){\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n\n    cout &lt;&lt; endl;\n}\n</code></pre> <ul> <li><code>lamda function</code> \u4ece\u73af\u5883\u4e0a\u4e0b\u6587\u6355\u83b7\u4e86\u4e00\u4e9b\u4e1c\u897f\u540e\u5c31\u4e0d\u518d\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\uff0c\u5f53 <code>lambda</code> \u8868\u8fbe\u5f0f \u6355\u83b7\u4efb\u4f55\u53d8\u91cf\uff08\u4f8b\u5982 [a]\uff09\u65f6\uff0c\u5b83\u4f1a\u53d8\u6210\u4e00\u4e2a\"\u6709\u72b6\u6001\"\u7684\u95ed\u5305\u5bf9\u8c61\uff0c\u800c\u51fd\u6570\u6307\u9488\u662f\u65e0\u72b6\u6001\u7684\u3002\u4e8c\u8005\u7c7b\u578b\u4e0d\u517c\u5bb9\uff0c\u56e0\u6b64\u65e0\u6cd5\u76f4\u63a5\u8f6c\u6362\u3002\u5982\u679c <code>lambda</code> \u4e0d\u6355\u83b7\u4efb\u4f55\u53d8\u91cf\uff08\u4f8b\u5982 <code>[](int x){return x+3;}</code>\uff09\uff0c\u5b83\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u51fd\u6570\u6307\u9488\u3002</li> </ul> <p>\u6709\u72b6\u6001\u7684\u95ed\u5305</p> <p>\u95ed\u5305 \u662f\u4e00\u4e2a\u51fd\u6570\u53ca\u5176\u76f8\u5173\u7684\u5f15\u7528\u73af\u5883\uff08\u5373\u5b83\u80fd\u8bbf\u95ee\u7684\u5916\u90e8\u53d8\u91cf\uff09\u3002\u5728 C++ \u4e2d\uff0c<code>lambda</code> \u8868\u8fbe\u5f0f\u751f\u6210\u7684\u95ed\u5305\u5bf9\u8c61\u53ef\u4ee5\u6355\u83b7\u5916\u90e8\u53d8\u91cf\uff0c\u8fd9\u79cd\u6355\u83b7\u884c\u4e3a\u4f1a\u8d4b\u4e88\u95ed\u5305\"\u72b6\u6001\"\u3002\u5177\u4f53\u6765\u8bf4\uff1a</p> <ul> <li>\u65e0\u72b6\u6001\u95ed\u5305\uff1a\u5982\u679c <code>lambda</code> \u4e0d\u6355\u83b7\u4efb\u4f55\u5916\u90e8\u53d8\u91cf\uff0c\u5b83\u4ec5\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u903b\u8f91\uff0c\u6ca1\u6709\u989d\u5916\u7684\u6570\u636e\u9700\u8981\u5b58\u50a8\u3002\u4f8b\u5982\uff1a</li> </ul> <pre><code>auto lambda = [](int x) { return x + 1; };\n</code></pre> <p>\u6b64\u65f6\uff0c\u95ed\u5305\u5bf9\u8c61\u6ca1\u6709\u6210\u5458\u53d8\u91cf\uff0c\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u51fd\u6570\u6307\u9488\u3002</p> <ul> <li>\u6709\u72b6\u6001\u95ed\u5305\uff1a\u5982\u679c <code>lambda</code> \u6355\u83b7\u4e86\u5916\u90e8\u53d8\u91cf\uff08\u4f8b\u5982 <code>[a]</code>\uff09\uff0c\u95ed\u5305\u5bf9\u8c61\u5185\u90e8\u4f1a\u751f\u6210\u6210\u5458\u53d8\u91cf\u6765\u4fdd\u5b58\u8fd9\u4e9b\u6355\u83b7\u7684\u503c\u6216\u5f15\u7528\u3002\u4f8b\u5982\uff1a</li> </ul> <pre><code>int a = 5;\nauto lambda = [a](int x) { return x * a; }; // \u95ed\u5305\u5bf9\u8c61\u5185\u90e8\u4f1a\u4fdd\u5b58 `a` \u7684\u526f\u672c\n</code></pre> <p>\u6b64\u65f6\uff0c\u95ed\u5305\u5bf9\u8c61\u5305\u542b\u72b6\u6001\uff08\u5373\u6355\u83b7\u7684\u53d8\u91cf\uff09\uff0c\u65e0\u6cd5\u8f6c\u6362\u4e3a\u51fd\u6570\u6307\u9488\u3002</p> <p>\u56e0\u4e3a\u51fd\u6570\u6307\u9488\uff08\u5982 <code>int (*)(int)</code>\uff09\u672c\u8d28\u662f\u4e00\u4e2a\u6307\u5411\u4ee3\u7801\u6bb5\u4e2d\u67d0\u4e2a\u51fd\u6570\u7684\u6307\u9488\uff0c\u5b83\u53ea\u5305\u542b\u51fd\u6570\u7684\u5730\u5740\uff0c\u6ca1\u6709\u5b58\u50a8\u6570\u636e\u7684\u80fd\u529b\u3002\u5f53 <code>lambda</code> \u6355\u83b7\u53d8\u91cf\u65f6\uff0c\u751f\u6210\u7684\u95ed\u5305\u5bf9\u8c61\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7c7b\u5b9e\u4f8b\uff0c\u5185\u90e8\u4f1a\u4fdd\u5b58\u6355\u83b7\u53d8\u91cf\u7684\u526f\u672c\u6216\u5f15\u7528\u3002\u4f8b\u5982\uff1a</p> <pre><code>int a = 5;\nauto lambda = [a](int x) { return x * a; };\n</code></pre> <p>\u7f16\u8bd1\u5668\u4f1a\u4e3a\u8fd9\u4e2a lambda \u751f\u6210\u7c7b\u4f3c\u5982\u4e0b\u7684\u7c7b\uff1a</p> <pre><code>class Closure {\nprivate:\n    int a; // \u4fdd\u5b58\u6355\u83b7\u7684\u53d8\u91cf\npublic:\n    Closure(int a) : a(a) {}\n    int operator()(int x) const { return x * a; }\n};\n</code></pre> <p>\u95ed\u5305\u5bf9\u8c61 <code>lambda</code> \u662f <code>Closure</code> \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5fc5\u987b\u901a\u8fc7 <code>operator()</code> \u8c03\u7528\uff0c\u4e14\u5185\u90e8\u9700\u8981\u8bbf\u95ee\u6210\u5458\u53d8\u91cf <code>a</code>\u3002</p> <ul> <li>\u56e0\u6b64\u53ef\u4ee5\u5f15\u5165 <code>std::function</code> \u6765\u5904\u7406\u6709\u72b6\u6001\u95ed\u5305\u3002\u5e76\u4e14\u518d\u6b21\u8fdb\u884c\u66f4\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\u3002</li> </ul> <pre><code>#include &lt;cmath&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;functional&gt;\nusing namespace std;\n\nvoid transform(vector&lt;int&gt;&amp; v, function&lt;int(int)&gt; f){\n    for(int&amp; x : v){\n        x = f(x);\n    }\n}\n\nclass mul_by{\npublic:\n    mul_by(int a) : a(a) {}\n    int operator()(int x) const {\n        return x * a;\n    }\nprivate:\n    int a;\n};\n\nclass add_by{\npublic:\n    add_by(int a) : a(a) {}\n    int operator()(int x) const {\n        return x + a;\n    }\nprivate:\n    int a;\n};\n\nclass nth_pow{\npublic:\n    nth_pow(int a) : a(a) {}\n    int operator()(int x) const {\n        return pow(x, a);\n    }\nprivate:\n    int a;\n};\n\nclass line {\npublic:\n    line(int a, int b) : a(a), b(b) {}\n    int operator()(int x) const {\n        return a * x + b;\n    }\nprivate:\n    int a, b;\n};\n\nclass print{\npublic:\n    print(char sep) : sep(sep) {}\n    int operator()(int x) const {\n        cout &lt;&lt; x &lt;&lt; sep;\n        return x;\n    }\nprivate:\n    char sep;\n};\n\nint main(){\n    vector&lt;int&gt; v = {1, 3, 5, 7, 9};\n\n    transform(v, mul_by(5));\n    transform(v, add_by(3));\n    transform(v, nth_pow(2));\n    transform(v, line(2, 1));\n    transform(v, line(-1, 0));\n    transform(v, print(' ')); cout &lt;&lt; endl;\n    transform(v, print(',')); cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter10/#user-defined-type-conversions","title":"User-defined type conversions","text":"<p>Compilers perform implicit conversions using:</p> <ul> <li>single-argument constructors (\u6784\u9020\u51fd\u6570\u5355\u53c2\u6570)</li> <li>type conversion operators (\u5b9a\u4e49\u7c7b\u578b\u8f6c\u6362\u7684\u7b97\u5b50)</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#single-argument-constructors","title":"Single argument constructors","text":"<pre><code>class PathName { \n    string name; \npublic: \n    PathName(const string&amp;); \n    ~ PathName(); \n}; \n... \nstring abc(\"abc\"); \nPathName xyz(abc); // OK! \nxyz = abc; // OK abc =&gt; PathName\n</code></pre> <ul> <li>\u8fd9\u91cc\u7684 <code>abc</code> \u53ef\u4ee5\u9690\u5f0f\u5730\u8f6c\u6362\uff0c\u5148\u6784\u9020\u4e00\u4e2a <code>PathName</code> \u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u518d\u8d4b\u503c\u7ed9 <code>xyz</code>\uff0c\u6700\u540e\u9500\u6bc1\u4e34\u65f6\u5bf9\u8c61\u3002</li> </ul> <pre><code>class One{\npublic:\n    One() {}\n};\n\nclass Two{\npublic:\n    explicit Two(const One&amp;) {}\n};\n\nvoid f(Two) {}\n\nint main(){\n    One one;\n    f(Two(one)); // OK\n    f(one); // \u5982\u679c\u53bb\u6389 explicit\uff0c\u5219\u53ef\u4ee5\u7531\u9690\u5f0f\u8f6c\u6362\n}\n</code></pre> <ul> <li>\u5355\u53c2\u6570\u7684 <code>ctor</code> \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u52a0\u4e0a <code>explicit</code> \u4f1a\u597d\u4e00\u70b9\uff0c\u4f7f\u5f97\u8bed\u4e49\u66f4\u6e05\u6670</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#conversion-operator","title":"Conversion operator","text":"<pre><code>class Rational { \npublic: \n    operator double() const {\n        return numerator / (double)denominator;\n    }\n} \nRational r(1,3);\ndouble d = 1.3 * r; // r =&gt; double\n</code></pre> <ul> <li>\u5982\u679c\u8981\u5b9e\u73b0\u5c31\u8981\u6c42 <code>r</code> \u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u6210 <code>double</code> \u7c7b\u578b\u3002</li> <li>\u8fd9\u4e2a <code>operator</code> \u5f88\u7279\u6b8a\uff0c\u56e0\u4e3a\u5b83\u7684\u540d\u5b57\u5c31\u662f\u8981\u8f6c\u6362\u6210\u7684\u90a3\u4e2a\u7c7b\u578b\u7684\u540d\u5b57\uff0c\u4e14\u5b83\u7684\u8fd4\u56de\u503c\u5c31\u662f <code>double</code> \u7c7b\u578b\u7684\u503c\u3002</li> <li>The function will be called automatically</li> <li>Return type is same as the function name</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#the-general-form","title":"The general form","text":"<ul> <li><code>X::operator T()</code></li> </ul> <ol> <li>Operator name is any type descriptor</li> <li>No explicit arguments (\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u5728\u5b9a\u4e49\u65f6\u4e0d\u9700\u8981\u663e\u5f0f\u58f0\u660e\u4efb\u4f55\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u9690\u5f0f\u4f5c\u7528\u4e8e\u5f53\u524d\u5bf9\u8c61\uff08\u5373\u7c7b\u7684\u5b9e\u4f8b\u672c\u8eab\uff09\u3002\u5176\u64cd\u4f5c\u5bf9\u8c61\u662f <code>this</code> \u6307\u9488\u6307\u5411\u7684\u5b9e\u4f8b\uff0c\u56e0\u6b64\u65e0\u9700\u624b\u52a8\u4f20\u9012\u53c2\u6570\u3002)</li> <li>No return type</li> </ol> <ul> <li>A conversion operator can be used to convert an object of one class into an object of</li> </ul> <ol> <li>another class</li> <li>a built-in type</li> </ol>"},{"location":"Computer_Science/OOP/Chapter10/#c-type-conversions","title":"C++ type conversions","text":"<ol> <li>Built-in conversions, e.g.,</li> </ol> <ul> <li>char =&gt; short =&gt; int =&gt; float =&gt; double</li> <li>T[] =&gt; T*</li> </ul> <ol> <li>User-defined type conversions T =&gt; C if</li> </ol> <ul> <li>either <code>C(T)</code> is a valid constructor call for C (\u8981\u4e48\u5728\u7c7b C \u4e2d\u5b9a\u4e49\u4e86\u8f6c\u6362\u6210\u7c7b\u578b <code>T</code> \u7684\u6784\u9020\u51fd\u6570)</li> <li> <p>or <code>operator C()</code> is defined for T (\u8981\u4e48\u5728\u7c7b T \u4e2d\u5b9a\u4e49\u4e86\u8f6c\u6362\u6210\u7c7b\u578b <code>C</code> \u7684\u8f6c\u6362\u8fd0\u7b97\u7b26)</p> </li> <li> <p>\u5982\u679c <code>C</code> \u662f built-in type \u7684\uff0c\u7b2c\u4e00\u6761\u8def\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a built-in type \u6ca1\u6709\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u53ea\u80fd\u7528\u7b2c\u4e8c\u6761\u8def\u3002</p> </li> </ul> <p>\u5982\u679c\u4e24\u79cd\u90fd\u505a\u4e86\u5462\uff1f</p> <pre><code>class Apple;\n\nclass Orange {\npublic:\n    Orange() {}\n    Orange(const Apple&amp;) {} // \u6784\u9020\u51fd\u6570, convert Apple to Orange\uff0c \u52a0\u4e0a explicit \u5173\u952e\u5b57\uff0c\u5c31\u53ef\u4ee5\u4e86\n};\n\nclass Apple {\npublic:\n    operator Orange() { return Orange(); }  // \u8f6c\u6362\u8fd0\u7b97\u7b26, convert Apple to Orange\n}\n\nvoid f(Orange o) {}\n\nint main(){\n    Apple a;\n    f(a);  // Error: ambiguous conversion\n}\n</code></pre> <ul> <li>\u4e24\u7c7b\u64cd\u4f5c\u90fd\u6709\uff0c\u6240\u4ee5\u6709\u6b67\u4e49</li> <li>Must be careful! Cause lots of problems if called unexpectedly.</li> <li>Use explicit conversions</li> <li>e.g., declare a member function</li> </ul> <pre><code>class Rational {\n    /* ... */\n    double to_double() const;\n};\n</code></pre> <ul> <li>\u8fd9\u6837\u505a\uff0c\u8f6c\u6362\u80fd\u529b\u8fd8\u5728\uff0c\u4e5f\u4e0d\u4f1a\u9690\u5f0f\u8f6c\u6362\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#stream","title":"Stream","text":""},{"location":"Computer_Science/OOP/Chapter10/#why-streams","title":"Why streams?","text":"<ul> <li>Original C I/O used printf, scanf</li> <li>Streams introduced in C++<ul> <li>C I/O libraries still work</li> </ul> </li> <li>Advantages of streams<ul> <li>Type safety</li> <li>Extensible: overload inserters and extractors</li> <li>More object-oriented</li> </ul> </li> <li>Disadvantages<ul> <li>More verbose ( <code>std::format</code> comes in C++20)</li> <li>Might be slower (Turn off synchronization: <code>std::ios::sync_with_stdio(false);</code>)</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#what-is-a-stream","title":"What is a stream?","text":"<ul> <li>Common logical interface to a device</li> <li>One-dimension (\u6d41\u662f\u4e00\u7ef4\u7684), unidirectional</li> <li>Random access on file, but not on <code>std::cin/cout</code> (\u56e0\u4e3a\u662f\u4e32\u884c\u6240\u4ee5\u4e0d\u80fd\u968f\u610f\u5b9a\u4f4d)</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#stream-naming-convections","title":"Stream naming convections","text":"Input Output Header Generic <code>istream</code> <code>ostream</code> <code>&lt;iostream&gt;</code> File <code>ifstream</code> <code>ofstream</code> <code>&lt;fstream&gt;</code> C string <code>istrstream</code> <code>ostrstream</code> <code>&lt;strstream&gt;</code> C++ string <code>istringstream</code> <code>ostringstream</code> <code>&lt;sstream&gt;</code>"},{"location":"Computer_Science/OOP/Chapter10/#stream-operations","title":"Stream operations","text":"<ol> <li>Extractors</li> </ol> <ul> <li>Read a value from the stream</li> <li>Overload <code>operator&gt;&gt;</code></li> </ul> <ol> <li>Inserters</li> </ol> <ul> <li>Insert a value into a stream</li> <li>Overload <code>operator&lt;&lt;</code></li> </ul> <ol> <li>Manipulators</li> </ol> <ul> <li>Change the stream state</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#kinds-of-streams","title":"Kinds of streams","text":"<ol> <li>Text streams</li> </ol> <ul> <li>Deal with ASCII text</li> <li>Perform some characters translation</li> <li>\u591a\u8fdb\u884c\u4e86\u4e00\u5c42\u8f6c\u4e49</li> </ul> <p>e.g., newline =&gt; actual OS file representation</p> <ol> <li>Binary streams</li> </ol> <ul> <li>Binary data</li> <li>No translation</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#predefined-streams","title":"Predefined streams","text":"<ul> <li><code>cin</code> : standard input</li> <li><code>cout</code> : standard output</li> <li><code>cerr</code>: unbuffered error (debugging) output</li> <li><code>clog</code> : buffered error (debugging) output</li> </ul> <pre><code>#include &lt;iostream&gt;\nint i; float f; char c;\nchar buffer[80];\n// Read the next character\ncin &gt;&gt; c;\n// Read an integer, skips whitespace\ncin &gt;&gt; i;\n// Read a float and a string separated by whitespace\ncin &gt;&gt; f &gt;&gt; buffer;\n</code></pre> <ul> <li>Extractors skip leading whitespace, in general</li> </ul>"},{"location":"Computer_Science/OOP/Chapter10/#defining-a-stream-extractor","title":"Defining a stream extractor","text":"<ul> <li>Has to be a 2-argument free function</li> </ul> <ol> <li>The first argument is an <code>istream&amp;</code>\uff0c\u6d41\u8bfb\u53d6\u540e\u72b6\u6001\u5c31\u53d8\u4e86\uff0c\u6240\u4ee5\u4e5f\u4e0d\u662f const</li> <li>The second argument is a reference to a value\uff0c\u56e0\u4e3a\u4ece\u6d41\u4e2d\u8bfb\u53d6\u7684\u503c\u9700\u8981\u8d4b\u7ed9\u67d0\u4e2a\u53d8\u91cf\uff0c\u6240\u4ee5\u4e0d\u662f const</li> </ol> <pre><code>istream&amp; operator&gt;&gt;(istream&amp; is, T&amp; obj) {\n    // specific code to read obj \n    return is;\n}\n</code></pre> <ul> <li>Return an istream&amp; for chaining</li> </ul> <pre><code>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; // ((cin &gt;&gt; a) &gt;&gt; b) &gt;&gt; c;\n</code></pre> <ul> <li>Other input operators e.g.</li> </ul> <p><code>int get()</code></p> <ul> <li>Returns the next character in the stream</li> <li>Returns EOF if no characters left</li> <li>Example: copy input to output</li> </ul> <pre><code>int ch;\nwhile ((ch = cin.get()) != EOF)\n     cout.put(ch);\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter10/#creating-a-stream-inserter","title":"Creating a stream inserter","text":"<ul> <li>Has to be a 2-argument free function</li> </ul> <ol> <li>The first argument is an ostream&amp;</li> <li>The second argument is a const reference\uff0c\u8bfb\u53d6\u540e\u4e0d\u9700\u8981\u6539\u53d8\uff0c\u6240\u4ee5\u662f const</li> </ol> <pre><code>ostream&amp; operator&lt;&lt;(ostream&amp; os, const T&amp; obj) {\n    // specific code to write obj \n    return os; \n}\n</code></pre> <ul> <li>Return an ostream&amp; for chaining</li> </ul> <pre><code>cout &lt;&lt; a &lt;&lt; b &lt;&lt; c; // ((cout &lt;&lt; a) &lt;&lt; b) &lt;&lt; c;\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter10/#formatting-using-manipulators","title":"Formatting using manipulators","text":"<p>Manipulators modify the state of the stream</p> <ul> <li><code>#include &lt;iomanip&gt;</code></li> <li>Effects hold (usually)</li> <li>Example</li> </ul> <pre><code>int n;\ncout &lt;&lt; \"enter number in hexadecimal\" &lt;&lt; endl;\ncin &gt;&gt; hex &gt;&gt; n;\n</code></pre> <ul> <li>A simple printing program</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nint main() {\n    cout &lt;&lt; setprecision(2) &lt;&lt; 1230.243 &lt;&lt; endl; // \u4e24\u4f4d\u6709\u6548\u6570\u5b57\n    cout &lt;&lt; setw(20) &lt;&lt; \"OK!\"; // \u5b9a\u4e49\u8f93\u51fa\u5bbd\u5ea6\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>1.2e+03\n               OK!\n</code></pre> <ul> <li>\u6240\u4ee5 manipulator \u672c\u8eab\u4e0d\u662f\u53d8\u91cf\uff0c\u662f\u63a7\u5236\u8f93\u5165\u8f93\u51fa\u7684\"\u5f00\u5173\"</li> <li>\u4e0d\u5e26\u53c2\u6570\u7684 manipulator \u7b80\u5355\u4e00\u70b9\uff0c\u53ef\u4ee5\u5982\u4e0b\u5b9a\u4e49\u3002(\u5e26\u53c2\u6570\u7684\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u6b64\u4e0d\u8ba8\u8bba)</li> </ul> <pre><code>// skeleton for an output stream manipulator \nostream&amp; manip(ostream&amp; out) { \n    ... \n    return out; \n}\nostream&amp; tab(ostream&amp; out) { \n    return out &lt;&lt; '\\t'; \n}\ncout &lt;&lt; \"Hello\" &lt;&lt; tab &lt;&lt; \"World!\" &lt;&lt; endl;\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n#include &lt;vector&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\nclass Point{\npublic:\n    Point(int x, int y) : x(x), y(y) {}\n    friend ostream&amp; operator&lt;&lt;(ostream&amp; out, const Point&amp; p);\nprivate:\n    int x, y;\n};\n\nostream&amp; operator&lt;&lt;(ostream&amp; out, const Point&amp; p){\n    return out &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \",\" &lt;&lt; p.y &lt;&lt; \")\";\n}\n\nclass LineSegment{\npublic:\n    LineSegment(const Point&amp; p1, const Point&amp; p2) : start(p1), end(p2) {}\n    friend ostream&amp; operator&lt;&lt;(ostream&amp; out, const LineSegment&amp; s);\nprivate:\n    Point start, end;\n};\n\nostream&amp; operator&lt;&lt;(ostream&amp; out, const LineSegment&amp; s){\n    return out &lt;&lt; s.start &lt;&lt; \" -------- \" &lt;&lt; s.end;\n}\n\nint main(){\n    Point a(3, 5);\n    Point b(7, 8);\n    cout &lt;&lt; a &lt;&lt; endl;\n    cout &lt;&lt; b &lt;&lt; endl;\n\n    LineSegment s(a, b);\n    cout &lt;&lt; s &lt;&lt; endl;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>(3,5)\n(7,8)\n(3,5) -------- (7,8)\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter11/","title":"Chapter 11 | templates","text":"<p> \u7ea6 3137 \u4e2a\u5b57  539 \u884c\u4ee3\u7801  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 22 \u5206\u949f</p>"},{"location":"Computer_Science/OOP/Chapter11/#function-overloading","title":"Function overloading","text":"<ul> <li>Same function name with different argument-lists.</li> </ul> <pre><code>void print(char * str, int width); // #1\nvoid print(double d, int width); // #2\nvoid print(long l, int width); // #3\nvoid print(int i, int width); // #4\nvoid print(char *str); // #5\nprint(\"Pancakes\", 15); // #1\nprint(\"Syrup\"); // #5\nprint(1999.0, 10); // #2\nprint(1999, 12); // #4\nprint(1999L, 15); // #3\n</code></pre> <ul> <li>c++ \u63d0\u4f9b\u7684\u57fa\u672c\u7684\u591a\u6001\u6027\u7684\u62bd\u8c61\u624b\u6bb5\uff0c\u7ed9\u4e00\u4e2a\u540c\u540d\u51fd\u6570\uff0c\u5141\u8bb8\u540c\u540d\u51fd\u6570\u5b9a\u4e49\u591a\u4efd\uff0c\u6bcf\u4e00\u4e2a\u540c\u540d\u51fd\u6570\u7684\u53c2\u6570\u8868\u662f\u4e0d\u4e00\u6837\u7684\u3002</li> <li>\u5f53\u4e0a\u8ff0\u7684 <code>print</code> \u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u6839\u636e\u4f20\u8fdb\u53bb\u7684\u5b9e\u53c2\u7684\u7c7b\u578b\u548c\u4e2a\u6570\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u5224\u65ad\u8c03\u7528\u54ea\u4e00\u4e2a\u7248\u672c\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#overload-and-auto-cast","title":"Overload and auto-cast","text":"<ul> <li>\u5728\u9690\u5f0f\u8f6c\u6362\u5b58\u5728\u65f6\uff0c function overloading \u53ef\u80fd\u4f1a\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\u3002</li> </ul> <pre><code>void foo(int i) {}\nvoid foo(double d) {}\n\nint main(){\n    foo(2);\n    foo(2.3);\n    foo('a');\n    foo(3.2f);\n    foo(2L);  // Error: call of overloaded \u2018foo(long int)\u2019 is ambiguous\n}\n</code></pre> <ul> <li><code>char</code> \u5230 <code>int</code> \u5b58\u5728\u9690\u5f0f\u8f6c\u6362\uff0c\u6240\u4ee5 <code>'a'</code> \u88ab\u8f6c\u6362\u6210 <code>int</code> \u4f20\u7ed9 <code>foo(int i)</code> \u3002</li> <li><code>L</code> \u662f <code>long</code> \u7c7b\u578b\uff0c\u53ef\u4ee5\u8f6c\u6362\u6210 <code>int</code> \u4e5f\u53ef\u4ee5\u8f6c\u6362\u6210 <code>double</code>,\u6240\u4ee5\u8981\u4e48\u7ed9\u4e00\u4e2a <code>foo(long l)</code> \u8981\u4e48\u5bf9 <code>2L</code> \u8fdb\u884c\u5f3a\u5236\u7684\u7c7b\u578b\u8f6c\u6362\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#default-arguments","title":"Default arguments","text":"<ul> <li>A default argument is a value given in the declaration that the compiler automatically inserts if you don't provide a value in the function call.</li> </ul> <pre><code>int harpo(int n, int m = 4, int j = 5);\nbeeps = harpo(2); // calls harpo(2,4,5)\nbeeps = harpo(1,8); // calls harpo(1,8,5)\nbeeps = harpo(8,7,6);\n</code></pre> <ul> <li>\u5728\u51fd\u6570\u58f0\u660e\u7684\u67d0\u4e9b\u53c2\u6570\u7684\u540e\u9762\u52a0\u5165\u4e00\u4e9b\u9ed8\u8ba4\u503c\uff0c\u8fd9\u4e2a\u4e0d\u662f\u91cd\u8f7d\uff0c\u662f\u9ed8\u8ba4\u503c\u3002\u4f8b\u5982\u4e0a\u8ff0\u5355\u53c2\u6570\u65f6\u7f16\u8bd1\u5668\u505a\u4e86\u524d\u5904\u7406\uff0c\u628a\u540e\u9762\u7684\u4e24\u4e2a\u503c\u4f20\u8fdb\u53bb\uff0c\u53ef\u4ee5\u8ba4\u4f5c\u628a\u9ed8\u8ba4\u503c\u586b\u8fdb\u53bb\u4e86(\u628a\u6e90\u7801\u6539\u4e86)\u3002</li> <li>Default args must be added from right to left.  c++ \u4e2d\u9ed8\u8ba4\u503c\u8981\u4ece\u53f3\u8fb9\u5f00\u59cb\u7ed9(\u5927\u6982\u53ea\u662f\u7f16\u8bd1\u5668\u597d\u505a)\u3002</li> </ul> <pre><code>int chico(int n, int m = 6, int j); //illegal\nint groucho(int k = 1, int m = 2, int n = 3);\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter11/#why-templates","title":"Why templates?","text":"<ul> <li> <p>\u5bf9\u4e8e\u51fd\u6570\u6765\u8bf4\uff0c\u5185\u90e8\u903b\u8f91\u90fd\u4e0d\u4e00\u6837\u7528 <code>overloading</code> \u4f1a\u597d\u4e00\u4e9b\uff0c\u4f46\u662f\u5982\u679c\u53ea\u662f\u53c2\u6570\u7c7b\u578b\u4e0d\u4e00\u6837\u800c\u8981\u6bcf\u6b21\u91cd\u5199\u51fd\u6570\u5c31\u663e\u5f97\u7b28\u62d9\u3002\u800c\u5bf9\u4e8e\u7c7b\u6765\u8bf4\u4e5f\u662f\u4e00\u6837\u7684\u3002</p> </li> <li> <p>Suppose you need a list of <code>X</code> and a list of <code>Y</code></p> </li> </ul> <ol> <li>The lists would use the same logic</li> <li>The only difference is the type of element</li> </ol> <p>Possible choices:</p> <ol> <li>Clone the code</li> </ol> <ul> <li>preserves type-safety: \u7c7b\u578b\u68c0\u67e5\u662f\u5b89\u5168\u7684</li> <li>hard to manage: \u91cd\u590d\u4ee3\u7801\u96be\u4ee5\u7ba1\u7406\uff0c\u5bb9\u6613\u51fa\u73b0 bug \uff0c\u56e0\u4e3a\u5f53\u66f4\u6539\u5176\u4e2d\u4e00\u4e2a\u7248\u672c\u65f6\u53e6\u4e00\u4e2a\u5927\u6982\u7387\u4e5f\u9700\u8981\u66f4\u6539\u3002</li> </ul> <ol> <li>Make a common base class</li> </ol> <ul> <li>May not be desirable</li> <li>\u4e24\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u7c7b\u975e\u8981\u8bf4\u4ece\u4e00\u4e2a\u516c\u5171\u7684\u7c7b\u7ee7\u627f\uff0c\u4ece\u8bbe\u8ba1\u4e0a\u6765\u8bf4\u662f\u4e0d\u5408\u7406\u7684\uff0c\u8bed\u4e49\u4e0a\u6765\u8bf4\u662f\u4e0d\u76f4\u89c2\u7684\u3002\u4ee5\u53ca\u7eaf O \u7684\u65b9\u6cd5\u5728\u8fd0\u884c\u65f6\u662f\u6709\u5f00\u9500\u7684\uff0c\u865a\u51fd\u6570\u7684\u8c03\u7528\u9700\u8981\u989d\u5916\u7684\u5f00\u9500\u3002</li> </ul> <ol> <li>Untyped lists</li> </ol> <ul> <li>type unsafe \u7ed5\u8fc7\u4e86\u7c7b\u578b\u68c0\u67e5\uff0c\u4e0d\u592a\u5b89\u5168\u3002</li> </ul> <ol> <li>Reuse source code</li> </ol> <ul> <li>generic programming</li> <li>use types as parameters in class or function definitions</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#templates","title":"Templates","text":"<ol> <li>Function Template</li> </ol> <ul> <li>Example: <code>sort</code> function</li> </ul> <ol> <li>Class Template</li> </ol> <ul> <li>Example: containers -- <code>stack</code> , <code>list</code> , <code>queue</code> , ...</li> <li>stack operations are independent of the type of items in the stack</li> <li>template member functions</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#function-templates","title":"Function templates","text":"<ul> <li>Similar operations on different types of data.</li> <li>Swap function for two int arguments:</li> </ul> <pre><code>void swap ( int&amp; x, int&amp; y ) {\n    int temp = x;\n    x = y;\n    y = temp;\n}\n</code></pre> <ul> <li>What if we want to swap <code>floats</code> , string<code>s ,</code>Currency<code>,</code>Person` ?</li> </ul> <pre><code>template &lt; class T &gt;\nvoid swap( T&amp; x, T&amp; y ) {\n    T temp = x;\n    x = y;\n    y = temp;\n}\n</code></pre> <ul> <li>\u6b64\u65f6 <code>T</code> \u662f\u4e00\u4e2a\u5360\u4f4d\u7b26\uff0c\u8868\u793a\u4efb\u4f55\u7c7b\u578b\u3002</li> <li>The <code>template</code> keyword introduces the template</li> <li>The <code>class T</code> specifies a parameterized type name</li> <li><code>class</code> means any built-in type or UDT(user defined type)</li> <li>Inside the template, use T as a type name</li> </ul> difference between <code>class</code> and <code>typename</code> <p>\u5728C++\u6a21\u677f\u4e2d\uff0c<code>class T</code> \u548c <code>typename T</code> \u5728\u58f0\u660e\u6a21\u677f\u7c7b\u578b\u53c2\u6570\u65f6\u5b8c\u5168\u7b49\u4ef7\uff0c\u53ef\u4ee5\u4e92\u6362\u4f7f\u7528\u3002</p> <p>\u4e24\u8005\u7684\u552f\u4e00\u533a\u522b\u662f\u5386\u53f2\u4e60\u60ef\uff1a\u65e9\u671fC++\u7528 <code>class</code> \u5f3a\u8c03\"\u7528\u6237\u5b9a\u4e49\u7c7b\u578b\"\uff0c\u800c <code>typename</code> \u66f4\u660e\u786e\u8868\u793a\"\u4efb\u610f\u7c7b\u578b\"\uff08\u5305\u62ec\u57fa\u672c\u7c7b\u578b\uff09\u3002\u73b0\u4ee3 C++ \u4e2d\u63a8\u8350\u7528 <code>typename</code> \u4ee5\u66f4\u901a\u7528\u3002</p> <p>\u867d\u7136\u6a21\u677f\u53c2\u6570\u58f0\u660e\u4e2d\u4e8c\u8005\u7b49\u4ef7\uff0c\u4f46 <code>typename</code> \u5728\u5176\u4ed6\u573a\u666f\u6709\u4e0d\u53ef\u66ff\u4ee3\u7684\u4f5c\u7528\uff0c\u4f8b\u5982\u5728\u6a21\u677f\u4f53\u5185\u6807\u8bb0\u4f9d\u8d56\u7c7b\u578b\uff08Dependent Type\uff09\uff1a</p> <pre><code>template&lt;class T&gt;\nvoid foo() {\n    typename T::InnerType x; // \u5fc5\u987b\u7528 typename\uff0c\u544a\u8bc9\u7f16\u8bd1\u5668 InnerType \u662f\u7c7b\u578b\n}\n</code></pre> <p>\u6b64\u5904 <code>T::InnerType</code> \u662f\u4f9d\u8d56\u6a21\u677f\u53c2\u6570 <code>T</code> \u7684\u5d4c\u5957\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u76f4\u63a5\u786e\u5b9a\u5b83\u662f\u7c7b\u578b\u8fd8\u662f\u9759\u6001\u6210\u5458\uff0c\u9700\u7528 <code>typename</code> \u660e\u786e\u8bf4\u660e\u3002</p>"},{"location":"Computer_Science/OOP/Chapter11/#function-templates-syntax","title":"Function templates syntax","text":"<p>Type parameters can represent:</p> <ol> <li>types of arguments to the function</li> <li>return type of the function</li> <li>types of local variables within the function</li> </ol>"},{"location":"Computer_Science/OOP/Chapter11/#template-instantiation","title":"Template instantiation","text":"<p>Generating a definition from a template class/function and template arguments:</p> <ul> <li>\u5148\u8fdb\u884c\u6a21\u677f\u53c2\u6570\u63a8\u65ad\uff0c\u7f16\u8bd1\u5668\u6839\u636e\u51fd\u6570\u8c03\u7528\u6216\u7c7b\u5b9e\u4f8b\u5316\u63a8\u65ad\u51fa\u6a21\u677f\u53c2\u6570\u7684\u5177\u4f53\u7c7b\u578b</li> <li>Types are substituted into template \u7c7b\u578b\u66ff\u6362</li> <li>New body of function or class definition is created : syntax errors, type checking \u8bed\u6cd5\u68c0\u67e5\u4e0e\u7c7b\u578b\u68c0\u67e5</li> <li>Specialization -- a version of a template for a particular argument(s) \u7f16\u8bd1\u5668\u4f1a\u4e3a\u6bcf\u4e2a\u4e0d\u540c\u7684\u6a21\u677f\u53c2\u6570\u7ec4\u5408\u751f\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u5b9a\u4e49</li> </ul> <pre><code>int i = 3; int j = 4;\nswap(i, j); // use explicit int swap\n\nfloat k = 4.5; float m = 3.7;\nswap(k, m); // instantiate float swap\n\nstd::string s(\"Hello\");\nstd::string t(\"World\");\nswap(s, t); // instantiate std::string swap\n</code></pre> <ul> <li>A template function is an instantiation of a function template</li> <li>\u6a21\u677f\u5b9a\u4e49\u5728\u8fd9\u91cc\u4e0d\u4f1a\u5b9e\u4f8b\u5316\uff0c\u53ea\u6709\u88ab\u4f7f\u7528\u65f6\u624d\u4f1a\u6709\u3002\u4e0d\u4f1a\u4e3a\u6240\u6709\u7c7b\u578b\u9884\u5148\u751f\u6210\u597d\u3002\u5b9e\u4f8b\u5316\u662f\u7f16\u8bd1\u5668\u7684\u884c\u4e3a\uff0c\u53ea\u6709\u7f16\u8bd1\u5668\u770b\u5230\u5b9e\u4f8b\u5316\u6709\u5173\u7684\u4ee3\u7801\u65f6\u624d\u4f1a\u8fdb\u884c\u5b9e\u4f8b\u5316\u3002</li> <li>\u800c\u666e\u901a\u51fd\u6570\u4e00\u5b9a\u4e49\uff0c\u51fd\u6570\u4f53\u4e00\u653e\uff0c\u7f16\u8bd1\u4ee5\u540e\u5c31\u4f1a\u6709\u76f8\u5173\u4ee3\u7801\u3002\u6240\u4ee5\u6a21\u677f\u4e0d\u662f\u771f\u6b63\u7684\u51fd\u6570\u4f53\uff0c\u800c\u53ea\u662f\u4e00\u4e2a\u677f\u5b50\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#template-arguments-deduction","title":"Template arguments deduction","text":"<ol> <li>Only exact match on types is used</li> <li>No conversion operations are applied</li> </ol> <pre><code>swap(int, int); // ok\nswap(double, double); // ok\nswap(int, double); // error! \u6b64\u65f6\u4e0d\u77e5\u9053 T \u7a76\u7adf\u662f\u54ea\u4e2a\n</code></pre> <ol> <li>Even implicit conversions are ignored</li> </ol> <ul> <li>\u6a21\u677f\u63a8\u5bfc\u7684\u65f6\u5019\u662f\u4e0d\u5141\u8bb8\u9690\u79c1\u8f6c\u6362\u7684\u3002\u5fc5\u987b\u5b9e\u9645\u53c2\u6570\u548c\u6a21\u677f\u5b8c\u5168\u5339\u914d\u3002</li> </ul> <ol> <li>Template functions and regular functions coexist</li> </ol> <ul> <li>\u5c16\u62ec\u53f7\u91cc\u9762\u662f\u8981\u7528\u5230\u7684\u5b9e\u4f8b\u5316\u7684\u7248\u672c\u7684\u7c7b\u578b\u53c2\u6570\u3002</li> <li>\u7528\u5c16\u62ec\u53f7\u7684\u65f6\u5019\u76f8\u5f53\u4e8e\u662f\u4e0d\u9700\u8981\u7c7b\u578b\u63a8\u6f14\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u6267\u884c\u9690\u5f0f\u8f6c\u6362\u4e86\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class T&gt;\nvoid print(T a, T b) {\n    cout &lt;&lt; a &lt;&lt; \", \" &lt;&lt; b &lt;&lt; endl;\n}\n\nvoid print(float a, float b) {\n    cout &lt;&lt; \"print(float):\" &lt;&lt; a &lt;&lt; \",\" &lt;&lt; b &lt;&lt; endl;\n}\n\n\nint main() {\n    print(2.3f, 5.3f); // print(float):2.3,5.3\n    print(2.3, 5.3); // 2.3, 5.3\n    print(2, 2.3); // Error\n    print&lt;int&gt;(2, 2.3); // print(int):2,2\n    print(2, 3.4);      // print(float):2,3.4\n}\n</code></pre> <ul> <li>\u5b9e\u53c2\u5217\u8868\u7ed9\u51fa\u6765\u4e4b\u540e\uff0c\u4f1a\u5148\u627e\u666e\u901a\u51fd\u6570\u6709\u6ca1\u6709\u5339\u914d\u7684\u3002\u6709\u7684\u8bdd\u5148\u7528\u666e\u901a\u51fd\u6570\u7684\uff0c\u6ca1\u6709\u7684\u8bdd\u624d\u4f1a\u53bb\u8c03\u7528\u6a21\u677f\u51fd\u6570\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#overloading-rules","title":"Overloading rules","text":"<ul> <li>First, check for exact regular-function match</li> <li>Then, check for exact function-template match</li> <li>Last, implicit conversions for regular functions</li> </ul> <pre><code>void f(float i, float k) { /*...*/ };\ntemplate &lt;class T&gt; void f(T t, T u) { /*...*/ };\nf(1.0f, 2.0f);\nf(1.0, 2.0);\nf(1, 2);\nf(1, 2.0);\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter11/#function-instantiation","title":"Function instantiation","text":"<ul> <li>The compiler deduces the template type from the actual arguments passed into the function.</li> <li>Types can also be explicitly provided:</li> </ul> <p>e.g. when <code>T</code> is not used in the args, but in the function body.</p> <pre><code>template &lt;class T&gt;\nvoid foo() { /* ... */ }\nfoo&lt;int&gt;(); // type T is int\nfoo&lt;float&gt;(); // type T is float\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter11/#class-templates","title":"Class templates","text":"<p>Classes parameterized by types</p> <ul> <li>Abstract operations from the types being operated upon</li> <li>Define potentially infinite set of classes</li> <li>Another step towards reuse</li> <li> <p>Typical use: container classes</p> <ul> <li><code>stack&lt;int&gt;</code></li> <li><code>list&lt;Person*&gt;</code></li> <li><code>queue&lt;Job&gt;</code></li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#example-vector","title":"Example: Vector","text":"<pre><code>template &lt;class T&gt;\nclass Vector {\npublic:\n    Vector(int);\n    ~Vector();\n    Vector(const Vector&amp;);\n    Vector&amp; operator=(const Vector&amp;);\n    T&amp; operator[](int);\nprivate:\n    T* m_elements;\n    int m_size;\n};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter11/#usage","title":"Usage","text":"<pre><code>Vector&lt;int&gt; v1(100);\nVector&lt;Complex&gt; v2(256);\nv1[20] = 10;\nv2[20] = Complex(cos(pi/4), sin(pi/4));\n</code></pre> <ul> <li>\u5b9e\u4f8b\u5316\u4e86\u4e4b\u540e\u624d\u6709\u771f\u6b63\u7684\u7c7b\u7684\u5b9a\u4e49\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#vector-members","title":"Vector members","text":"<pre><code>template &lt;class T&gt;\nVector&lt;T&gt;::Vector(int size): m_size(size) {\n    m_elements = new T[m_size];\n}\n\ntemplate &lt;class T&gt;\nT&amp; Vector&lt;T&gt;::operator[](int index) {\n    if(index &lt; m_size &amp;&amp; index &gt;= 0) {\n    return m_elements[index];\n    } else {\n    /*...*/\n    }\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter11/#a-simple-sort-function","title":"A simple sort function","text":"<pre><code>// bubble sort \u2013 don't use it!\ntemplate &lt;class T&gt;\nvoid sort(Vector&lt;T&gt;&amp; arr) {\n    const size_t last = arr.size() - 1;\n    for (int i = 0; i &lt; last; ++i)\n    for (int j = last; j &gt; i; --j) {\n        if (arr[j] &lt; arr[j-1]) {\n        // which swap?\n        swap(arr[j], arr[j-1]);  // \u5728\u5b9e\u4f8b\u5316\u65f6\u624d\u4f1a\u77e5\u9053\n    }\n    }\n}\n</code></pre> <ul> <li><code>T</code> \u8981\u6709\u826f\u597d\u7684 <code>copy constructor</code>\uff0c\u540c\u65f6 <code>assignment</code> \u90a3\u4e48\u4e5f\u9700\u8981\u4e00\u4e2a\u826f\u597d\u7684 <code>constructor\u3002</code></li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#sorting-the-vector","title":"Sorting the Vector","text":"<pre><code>Vector&lt;int&gt; vi(4);\nvi[0] = 4; vi[1] = 3; vi[2] = 7; vi[3] = 1;\nsort(vi); // sort(Vector&lt;int&gt;&amp;)\n\nVector&lt;string&gt; vs(5);\nvs[0] = \"Fred\";\nvs[1] = \"Wilma\";\nvs[2] = \"Barney\";\nvs[3] = \"Dino\";\nvs[4] = \"Prince\";\nsort(vs); // sort(Vector&lt;string&gt;&amp;);\n</code></pre> <ul> <li>NOTE: sort use <code>operator&lt;</code> for comparison</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#templates-properties","title":"Templates' properties","text":"<ol> <li>Templates can use multiple type parameters</li> </ol> <p>\u6a21\u677f\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u72ec\u7acb\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u6bcf\u4e2a\u53c2\u6570\u5728\u6a21\u677f\u5b9a\u4e49\u4e2d\u5747\u53ef\u72ec\u7acb\u4f7f\u7528\u3002</p> <pre><code>template &lt; class Key, class Value &gt;\nclass HashTable {\n    const Value&amp; lookup (const Key&amp;) const;\n    void insert (const Key&amp;, const Value&amp;);\n    /* ... */\n}\n</code></pre> <ul> <li>\u7c7b\u578b\u53c2\u6570\u53ef\u4ee5\u4e0d\u6b62\u4e00\u4e2a\uff0c\u53ef\u4ee5\u6709\u5f88\u591a\u4e2a\u3002</li> </ul> <ol> <li>Templates can be nested \u2013 they're just new types!</li> </ol> <p>\u6a21\u677f\u5b9e\u4f8b\u5316\u540e\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6\u6a21\u677f\u7684\u53c2\u6570\uff0c\u5f62\u6210\u5d4c\u5957\u7ed3\u6784\u3002</p> <pre><code>Vector&lt; Vector&lt;double*&gt; &gt;\n</code></pre> <p>\u8bed\u6cd5\u6ce8\u610f</p> <p>\u5728 C++11 \u524d\uff0c\u8fde\u7eed\u7684\u4e24\u4e2a <code>&gt;</code> \u9700\u5199\u6210 <code>&gt; &gt;</code>\uff08\u907f\u514d\u88ab\u89e3\u6790\u4e3a\u53f3\u79fb\u8fd0\u7b97\u7b26\uff09\uff0c C++11 \u540e\u5df2\u4fee\u590d\u6b64\u95ee\u9898\u3002</p> <ol> <li>Type arguments can be complicated</li> </ol> <p>\u6a21\u677f\u7684\u7c7b\u578b\u53c2\u6570\u53ef\u4ee5\u662f\u4efb\u610f\u5408\u6cd5\u7684 C++ \u7c7b\u578b\uff0c\u5305\u62ec\u51fd\u6570\u6307\u9488\u3001\u5d4c\u5957\u7c7b\u578b\u7b49\u590d\u6742\u7c7b\u578b\u3002</p> <pre><code>Vector&lt; int (*) (Vector&lt;double&gt;&amp;, int) &gt;\n</code></pre> <ul> <li> <p><code>int (*)(Vector&lt;double&gt;&amp;, int)</code> \u8868\u793a\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f <code>int</code>\uff0c\u53c2\u6570\u5217\u8868\u91cc\u6709 <code>Vector&lt;double&gt;&amp;</code> (\u63a5\u53d7\u4e00\u4e2a <code>double</code> \u7c7b\u578b\u7684 <code>Vector</code> \u7684\u5f15\u7528)\u548c <code>int</code>\u3002</p> </li> <li> <p>\u6a21\u677f\u8fd9\u4e00\u5957\u662f\u56fe\u7075\u5b8c\u5907\u7684\uff0c\u5f88\u591a\u90fd\u53ef\u4ee5\u505a\u3002\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u6a21\u677f\u5143\u7f16\u7a0b\uff08Template Metaprogramming, TMP\uff09\uff0c\u4f60\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u95f4\u5b8c\u6210\u4efb\u610f\u53ef\u8ba1\u7b97\u7684\u64cd\u4f5c\uff08\u5373\u4efb\u4f55\u56fe\u7075\u673a\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff09\u3002</p> </li> </ul> \u56fe\u7075\u5b8c\u5907 <p>\u4e00\u4e2a\u7cfb\u7edf\u6216\u7f16\u7a0b\u8bed\u8a00\u88ab\u79f0\u4e3a\u56fe\u7075\u5b8c\u5907\uff0c\u5982\u679c\u5b83\u80fd\u591f\u6a21\u62df\u56fe\u7075\u673a\u7684\u8ba1\u7b97\u80fd\u529b\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u80fd\u529b\uff1a</p> <ul> <li>\u6761\u4ef6\u5206\u652f\uff08\u5982 <code>if</code>/<code>else</code>\uff09</li> <li>\u5faa\u73af\u6216\u9012\u5f52\uff08\u7528\u4e8e\u91cd\u590d\u64cd\u4f5c\uff09</li> <li>\u6570\u636e\u5b58\u50a8\u4e0e\u64cd\u4f5c\uff08\u5982\u53d8\u91cf\uff09</li> </ul> <p>C++\u6a21\u677f\u901a\u8fc7\u9012\u5f52\u5b9e\u4f8b\u5316\u548c\u6a21\u677f\u7279\u5316\u5b9e\u73b0\u4e86\u8fd9\u4e9b\u80fd\u529b\uff0c\u56e0\u6b64\u662f\u56fe\u7075\u5b8c\u5907\u7684\u3002</p> <p>\u90a3\u4e48\u6a21\u677f\u5982\u4f55\u5b9e\u73b0\u56fe\u7075\u5b8c\u5907\uff1f</p> <p>(1) \u6761\u4ef6\u5206\u652f\uff1a\u901a\u8fc7\u6a21\u677f\u7279\u5316</p> <p>\u6a21\u677f\u7279\u5316\u5141\u8bb8\u6839\u636e\u4e0d\u540c\u7684\u7c7b\u578b\u6216\u503c\u9009\u62e9\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u7c7b\u4f3c <code>if</code>/<code>else</code> \u903b\u8f91\u3002</p> <pre><code>// \u901a\u7528\u6a21\u677f\uff08\u7c7b\u4f3c \"else\" \u5206\u652f\uff09\ntemplate&lt;int N&gt;\nstruct Factorial {\n    static const int value = N * Factorial&lt;N - 1&gt;::value;\n};\n\n// \u7279\u5316\u6a21\u677f\uff08\u7c7b\u4f3c \"if\" \u5206\u652f\uff0c\u7ec8\u6b62\u9012\u5f52\uff09\ntemplate&lt;&gt;\nstruct Factorial&lt;0&gt; {\n    static const int value = 1;\n};\n\n// \u7f16\u8bd1\u65f6\u8ba1\u7b97 5! \nint result = Factorial&lt;5&gt;::value; // \u7b49\u4ef7\u4e8e 120\n</code></pre> <p>\u6b64\u4f8b\u4e2d\uff0c\u6a21\u677f\u901a\u8fc7\u9012\u5f52\u5b9e\u4f8b\u5316\u548c\u7279\u5316\u5b9e\u73b0\u4e86\u9636\u4e58\u8ba1\u7b97\u3002</p> <p>(2) \u5faa\u73af\uff1a\u901a\u8fc7\u9012\u5f52\u6a21\u677f\u5b9e\u4f8b\u5316</p> <p>C++ \u6a21\u677f\u4e0d\u652f\u6301\u4f20\u7edf\u5faa\u73af\uff08\u5982 <code>for</code>/<code>while</code>\uff09\uff0c\u4f46\u901a\u8fc7\u9012\u5f52\u5b9e\u4f8b\u5316\u53ef\u4ee5\u6a21\u62df\u5faa\u73af\u3002</p> <pre><code>// \u8ba1\u7b97 1+2+...+N \u7684\u6a21\u677f\u5143\u7f16\u7a0b\ntemplate&lt;int N&gt;\nstruct Sum {\n    static const int value = N + Sum&lt;N - 1&gt;::value;\n};\n\ntemplate&lt;&gt;\nstruct Sum&lt;0&gt; {\n    static const int value = 0;\n};\n\nint sum = Sum&lt;5&gt;::value; // \u7f16\u8bd1\u65f6\u8ba1\u7b97 15\n</code></pre> <p>(3) \u6570\u636e\u5b58\u50a8\u4e0e\u64cd\u4f5c\uff1a\u901a\u8fc7\u7c7b\u578b\u548c\u503c\u5305\u88c5</p> <p>\u6a21\u677f\u53c2\u6570\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u503c\uff08\u5982 <code>int</code>\uff09\uff0c\u901a\u8fc7\u5d4c\u5957\u6a21\u677f\u53ef\u4ee5\u6784\u5efa\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u3002</p> <pre><code>// \u7f16\u8bd1\u65f6\u94fe\u8868\u7ed3\u6784\ntemplate&lt;typename T, typename Next&gt;\nstruct Node {\n    using Value = T;\n    using NextNode = Next;\n};\n\nstruct End {}; // \u94fe\u8868\u7ec8\u6b62\u6807\u8bb0\n\nusing MyList = Node&lt;int, Node&lt;float, Node&lt;double, End&gt;&gt;&gt;;\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u8bf4\u6a21\u677f\u662f\u56fe\u7075\u5b8c\u5907\u7684\uff1f</p> <ul> <li>\u7406\u8bba\u4e0a\uff0c\u53ea\u8981\u7f16\u8bd1\u5668\u5141\u8bb8\u65e0\u9650\u9012\u5f52\u5b9e\u4f8b\u5316\uff0c\u6a21\u677f\u53ef\u4ee5\u5b8c\u6210\u4efb\u4f55\u8ba1\u7b97\u3002\u4f46\u5b9e\u9645\u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u9650\u5236\u9012\u5f52\u6df1\u5ea6\uff08\u5982MSVC\u9ed8\u8ba4500\u5c42\uff0cGCC\u9ed8\u8ba4900\u5c42\uff09\u3002</li> <li>\u6a21\u677f\u7684\u9012\u5f52\u3001\u6761\u4ef6\u5206\u652f\u548c\u503c\u8ba1\u7b97\u80fd\u529b\uff0c\u7b49\u4ef7\u4e8e\u56fe\u7075\u673a\u7684\u8ba1\u7b97\u6a21\u578b\u3002</li> </ul> <p>\u6a21\u677f\u5143\u7f16\u7a0b\u7684\u4f18\u7f3a\u70b9</p> \u4f18\u70b9 \u7f3a\u70b9 \u96f6\u8fd0\u884c\u65f6\u5f00\u9500\uff08\u7f16\u8bd1\u671f\u5b8c\u6210\u8ba1\u7b97\uff09 \u4ee3\u7801\u53ef\u8bfb\u6027\u5dee\uff08\u6a21\u677f\u4ee3\u7801\u590d\u6742\u96be\u61c2\uff09 \u7c7b\u578b\u5b89\u5168\uff08\u7f16\u8bd1\u671f\u68c0\u67e5\u9519\u8bef\uff09 \u7f16\u8bd1\u65f6\u95f4\u663e\u8457\u589e\u52a0\uff08\u9012\u5f52\u5b9e\u4f8b\u5316\u5f00\u9500\u5927\uff09 \u5b9e\u73b0\u9ad8\u5ea6\u6cdb\u5316\u7684\u4ee3\u7801\uff08\u5982STL\uff09 \u8c03\u8bd5\u56f0\u96be\uff08\u9519\u8bef\u4fe1\u606f\u5197\u957f\u6666\u6da9\uff09"},{"location":"Computer_Science/OOP/Chapter11/#expression-parameters","title":"Expression parameters","text":"<p>Non-type parameters: may have default arguments</p> <pre><code>template &lt;class T, int bounds = 100&gt;\nclass FixedVector {\npublic:\n    FixedVector();\n    T&amp; operator[](int);\nprivate:\n    T elements[bounds]; // fixed-size array!\n}\n</code></pre> <ul> <li>\u8fdb\u6765\u662f\u5e38\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f5c\u4e3a\u6570\u7ec4\u7684\u957f\u5ea6\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class T, int N&gt;\nclass Array {\npublic:\n    int size() const {return N;}\n    T&amp; operator[](int i) {return m_arr[i];}\nprivate:\n    T m_arr[N];\n};\n\nint main() {\n    Array&lt;int, 3&gt; a;\n    a[0] = 2, a[1] = 3, a[2] = 1;\n    cout &lt;&lt; a.size() &lt;&lt; endl;  // 3\n\n    Array&lt;int, 3&gt; b{}; // \u6709\u82b1\u62ec\u53f7\u5df2\u7ecf\u521d\u59cb\u5316\u8fc7\u4e86\uff0c\u7f16\u8bd1\u5668\u9ed8\u8ba4\u586b 0\n    cout &lt;&lt; b[0] &lt;&lt; \", \"  &lt;&lt; b[1] &lt;&lt; \", \" &lt;&lt; b[2] &lt;&lt; endl;  // 0, 0, 0\n\n    b = a;\n    cout &lt;&lt; b[0] &lt;&lt; \", \"  &lt;&lt; b[1] &lt;&lt; \", \" &lt;&lt; b[2] &lt;&lt; endl;  // 2, 3, 1\n}\n</code></pre> <ul> <li>\u8fd9\u6837\u6bd4\u539f\u751f\u6570\u7ec4\u65b9\u4fbf\u591a\u4e86\uff0c\u4f46\u662f\u5982\u679c\u662f <code>Array&lt;int, 3&gt;</code> \u548c <code>Array&lt;int, 4&gt;</code> \u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u7528 <code>=</code> \u4e86\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\u3002\u800c\u5982\u679c\u7528\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982 <code>Array&lt;int, 9/3&gt;</code>\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528 <code>=</code> \u4e86\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\u3002\u4f46\u662f\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5fc5\u987b\u8981\u8ba9\u7f16\u8bd1\u5668\u80fd\u591f\u7b97\u51fa\u6765\u3002</li> <li><code>b = a;</code> \u53ef\u4ee5\u6267\u884c\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u751f\u6210\u4e86\u9ed8\u8ba4\u7684\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff08copy assignment operator\uff09\uff0c\u5e76\u4e14\u8be5\u8fd0\u7b97\u7b26\u6267\u884c\u7684\u662f\u6210\u5458\u9010\u62f7\u8d1d\uff08member-wise copy\uff09\u3002\u9ed8\u8ba4\u7684\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u4f1a\u9010\u4e2a\u62f7\u8d1d\u6bcf\u4e2a\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff08\u5305\u62ec\u6570\u7ec4\uff09\uff0c\u4f7f\u7528\u6210\u5458\u81ea\u8eab\u7684\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#non-type-parameters","title":"Non-type parameters","text":"<ol> <li>Usage</li> </ol> <pre><code>FixedVector&lt;int, 50&gt; v1;\nFixedVector&lt;int, 10*5&gt; v2;\nFixedVector&lt;int&gt; v3; // =&gt; FixedVector&lt;int, 100&gt;\n</code></pre> <ol> <li>Summary</li> </ol> <ul> <li>Embedding sizes is not necessarily good</li> <li>Can make code run faster</li> <li>More complicated code : size argument appears everywhere</li> <li>May lead to (even more) code bloat</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#member-templates","title":"Member templates","text":"<ul> <li>Template declarations can appear inside a member specification of any class</li> </ul> <p>e.g., a template constructor in <code>std::complex</code> :</p> <pre><code>template&lt;typename T&gt; class complex\n{\npublic:\n    template&lt;class X&gt; complex(const complex&lt;X&gt;&amp;);\n    /* ... */\n};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter11/#templates-and-inheritance","title":"Templates and inheritance","text":"<ol> <li>Templates can inherit from non-template classes \u6a21\u677f\u7c7b\u7ee7\u627f\u81ea\u975e\u6a21\u677f\u7c7b</li> </ol> <pre><code>template &lt;class A&gt;\nclass Derived : public Base { /* ... */ };\n</code></pre> <ol> <li>Templates can inherit from class templates \u6a21\u677f\u7c7b\u7ee7\u627f\u81ea\u6a21\u677f\u7c7b</li> </ol> <pre><code>template &lt;class A&gt;\nclass Derived : public List&lt;A&gt; { /* ... */ };\n</code></pre> <ol> <li>Non-template classes can inherit from instantiated template classes \u975e\u6a21\u677f\u7c7b\u7ee7\u627f\u81ea\u5b9e\u4f8b\u5316\u7684\u6a21\u677f\u7c7b</li> </ol> <pre><code>class SupervisorGroup : public List&lt;Employee*&gt; { /* ... */ }\n</code></pre> <ul> <li>\u6709\u5177\u4f53\u7c7b\u4e4b\u540e\u548c\u666e\u901a\u7c7b\u4e5f\u5c31\u662f\u4e00\u6837\u7684\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;typename T&gt;\nstruct complex{\n    T real, imag;\n    complex(T real, T imag): real(real), imag(imag) {}\n\n    template &lt;typename U&gt;\n    complex(const complex&lt;U&gt;&amp; other): real(other.real), imag(other.imag) {}\n};\n\ntemplate &lt;typename T&gt;\nostream&amp; operator&lt;&lt;(ostream&amp; out, const complex&lt;T&gt;&amp; c) {\n    return out &lt;&lt; \"(\" &lt;&lt; c.real &lt;&lt; \", \" &lt;&lt; c.imag &lt;&lt; \")\";\n}\n\nint main() {\n    complex&lt;double&gt; a(3.14, -1.57);\n    cout &lt;&lt; a &lt;&lt; endl; // (3.14, -1.57)\n\n    complex&lt;double&gt; b = a;\n    cout &lt;&lt; b &lt;&lt; endl; // (3.14, -1.57) \u56e0\u4e3a copy constructor \u4f1a\u81ea\u52a8\u751f\u6210\n\n    complex&lt;int&gt; c = a;\n    cout &lt;&lt; c &lt;&lt; endl; // (3, -1)\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter11/#crtp","title":"CRTP","text":"<ul> <li>\u5947\u5f02\u91cd\u73b0\u6a21\u677f\u6a21\u5f0f CRTP(Curiously Recurring Template Pattern)</li> </ul> <pre><code>template &lt;class T&gt;\nclass Base\n{\n    /* ... */\n};\nclass Derived : public Base&lt;Derived&gt;\n{\n    /* ... */\n};\n</code></pre> <ul> <li>\u628a\u81ea\u5df1\u4f5c\u4e3a\u7c7b\u578b\u53c2\u6570\u6254\u4e86\u8fdb\u53bb\u3002 </li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#example","title":"Example","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nbool is_close(double f, double tolerance){\n    return std::fabs(f) &lt; tolerance;\n}\n\nvoid print_info(int k, double x, double f){\n    cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; \", f(x) = \" &lt;&lt; f &lt;&lt; endl;\n}\n\nclass Problem{\npublic:\n    virtual double f(double x) const = 0;\n    virtual double df(double x) const = 0;\n};\n\ndouble newton_solve(const Problem* p, double x0, double tolerance = 1e-12, int max_iters = 30){\n    int k = 0;\n    double x = x0;\n    double f = p-&gt;f(x);\n    double df = p-&gt;df(x);\n\n    print_info(k, x, f);\n\n    while(!is_close(f, tolerance) &amp;&amp; k &lt; max_iters){\n        x = x - f / df;\n        f = p-&gt;f(x);\n        df = p-&gt;df(x);\n        k++;\n        print_info(k, x, f);\n    }\n\n    return x;\n}\n\nclass Sqrt2 : public Problem{\npublic:\n    double f(double x) const override{\n        return x * x - 2;\n    }\n\n    double df(double x) const override{\n        return 2 * x;\n    }\n};\n\nclass WhatEver : public Problem{\npublic:\n    double f(double x) const override{\n        return std::cos(x) - std::pow(x, 3);\n    }\n\n    double df(double x) const override{\n        return -std::sin(x) - 3 * std::pow(x, 2);\n    }\n};\n\nint main(){\n    double x0 = 1.0;\n\n    Sqrt2 sqrt_problem;\n    WhatEver what_problem;\n\n    newton_solve(&amp;sqrt_problem, x0);\n    cout &lt;&lt; \"---------------------------------------\" &lt;&lt; endl;\n    newton_solve(&amp;what_problem, x0);\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>k = 0, x = 1, f(x) = -1\nk = 1, x = 1.5, f(x) = 0.25\nk = 2, x = 1.41667, f(x) = 0.00694444\nk = 3, x = 1.41422, f(x) = 6.0073e-06\nk = 4, x = 1.41421, f(x) = 4.51061e-12\nk = 5, x = 1.41421, f(x) = 4.44089e-16\n---------------------------------------\nk = 0, x = 1, f(x) = -0.459698\nk = 1, x = 0.880333, f(x) = -0.0453512\nk = 2, x = 0.865684, f(x) = -0.000632313\nk = 3, x = 0.865474, f(x) = -1.2892e-07\nk = 4, x = 0.865474, f(x) = -5.21805e-15\n</code></pre> <ul> <li>\u5982\u679c\u57fa\u7c7b <code>Problem</code> \u5b9a\u4e49\u4e86 <code>virtual</code> \u51fd\u6570\u4e14\u6d3e\u751f\u7c7b\u51fd\u6570\u7b7e\u540d\uff08\u53c2\u6570\u3001\u8fd4\u56de\u7c7b\u578b\u3001const \u4fee\u9970\u7b26\u7b49\uff09\u5b8c\u5168\u4e00\u81f4\uff0c\u7701\u7565 <code>override</code> \u4e0d\u4f1a\u5f71\u54cd\u529f\u80fd\uff0c\u4f46\u4f1a\u5931\u53bb\u7f16\u8bd1\u5668\u7684\u5b89\u5168\u68c0\u67e5\u3002</li> </ul> <ul> <li>\u5982\u679c\u4f7f\u7528\u6a21\u677f\u6765\u5b9e\u73b0\u5462\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nbool is_close(double f, double tolerance){\n    return std::fabs(f) &lt; tolerance;\n}\n\nvoid print_info(int k, double x, double f){\n    cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; \", f(x) = \" &lt;&lt; f &lt;&lt; endl;\n}\n\ntemplate &lt;typename Problem&gt;\ndouble newton_solve(const Problem* p, double x0, double tolerance = 1e-12, int max_iters = 30){\n    int k = 0;\n    double x = x0;\n    double f = p-&gt;f(x);\n    double df = p-&gt;df(x);\n\n    print_info(k, x, f);\n\n    while(!is_close(f, tolerance) &amp;&amp; k &lt; max_iters){\n        x = x - f / df;\n        f = p-&gt;f(x);\n        df = p-&gt;df(x);\n        k++;\n        print_info(k, x, f);\n    }\n\n    return x;\n}\n\nclass Sqrt2{\npublic:\n    double f(double x) const { \n        return x * x - 2;\n    }\n\n    double df(double x) const {\n        return 2 * x;\n    }\n};\n\nclass WhatEver{\npublic:\n    double f(double x) const{\n        return std::cos(x) - std::pow(x, 3);\n    }\n\n    double df(double x) const{\n        return -std::sin(x) - 3 * std::pow(x, 2);\n    }\n};\n\nint main(){\n    double x0 = 1.0;\n\n    Sqrt2 sqrt_problem;\n    WhatEver what_problem;\n\n    newton_solve(&amp;sqrt_problem, x0);\n    cout &lt;&lt; \"---------------------------------------\" &lt;&lt; endl;\n    newton_solve(&amp;what_problem, x0);\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>k = 0, x = 1, f(x) = -1\nk = 1, x = 1.5, f(x) = 0.25\nk = 2, x = 1.41667, f(x) = 0.00694444\nk = 3, x = 1.41422, f(x) = 6.0073e-06\nk = 4, x = 1.41421, f(x) = 4.51061e-12\nk = 5, x = 1.41421, f(x) = 4.44089e-16\n---------------------------------------\nk = 0, x = 1, f(x) = -0.459698\nk = 1, x = 0.880333, f(x) = -0.0453512\nk = 2, x = 0.865684, f(x) = -0.000632313\nk = 3, x = 0.865474, f(x) = -1.2892e-07\nk = 4, x = 0.865474, f(x) = -5.21805e-15\n</code></pre> <ul> <li>\u8fd9\u4e2a\u65b9\u6848\u4e0d\u597d\u7684\u5730\u65b9\u5728\u4e8e\u4f7f\u7528\u65f6\u9700\u8981\u7528\u6237\u81ea\u5df1\u53bb\u770b\u6587\u6863\u6765\u77e5\u9053\u5982\u4f55\u4f7f\u7528\uff0c\u9700\u8981\u5b9a\u4e49\u7684\u4e1c\u897f(\u4f8b\u5982\u672c\u4f8b\u4e2d\u7684 <code>f</code> \u548c <code>df</code>)\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nbool is_close(double f, double tolerance){\n    return std::fabs(f) &lt; tolerance;\n}\n\nvoid print_info(int k, double x, double f){\n    cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; \", f(x) = \" &lt;&lt; f &lt;&lt; endl;\n}\n\ntemplate &lt;typename Derived&gt;\nclass Problem{\npublic:\n    double f(double x) const{\n        return static_cast&lt;const Derived*&gt;(this)-&gt;f(x);\n    }\n    double df(double x) const{\n        return static_cast&lt;const Derived*&gt;(this)-&gt;df(x);\n    }\n};\n\ntemplate &lt;typename Derived&gt;\ndouble newton_solve(const Problem&lt;Derived&gt;* p, double x0, double tolerance = 1e-12, int max_iters = 30){\n    int k = 0;\n    double x = x0;\n    double f = p-&gt;f(x);\n    double df = p-&gt;df(x);\n\n    print_info(k, x, f);\n\n    while(!is_close(f, tolerance) &amp;&amp; k &lt; max_iters){\n        x = x - f / df;\n        f = p-&gt;f(x);\n        df = p-&gt;df(x);\n        k++;\n        print_info(k, x, f);\n    }\n\n    return x;\n}\n\nclass Sqrt2 : public Problem&lt;Sqrt2&gt;{\npublic:\n    double f(double x) const {  \n        return x * x - 2;\n    }\n\n    double df(double x) const {\n        return 2 * x;\n    }\n};\n\nclass WhatEver : public Problem&lt;WhatEver&gt;{\npublic:\n    double f(double x) const {\n        return std::cos(x) - std::pow(x, 3);\n    }\n\n    double df(double x) const {\n        return -std::sin(x) - 3 * std::pow(x, 2);\n    }\n};\n\nint main(){\n    double x0 = 1.0;\n\n    Sqrt2 sqrt_problem;\n    WhatEver what_problem;\n\n    newton_solve(&amp;sqrt_problem, x0);\n    cout &lt;&lt; \"---------------------------------------\" &lt;&lt; endl;\n    newton_solve(&amp;what_problem, x0);\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>k = 0, x = 1, f(x) = -1\nk = 1, x = 1.5, f(x) = 0.25\nk = 2, x = 1.41667, f(x) = 0.00694444\nk = 3, x = 1.41422, f(x) = 6.0073e-06\nk = 4, x = 1.41421, f(x) = 4.51061e-12\nk = 5, x = 1.41421, f(x) = 4.44089e-16\n---------------------------------------\nk = 0, x = 1, f(x) = -0.459698\nk = 1, x = 0.880333, f(x) = -0.0453512\nk = 2, x = 0.865684, f(x) = -0.000632313\nk = 3, x = 0.865474, f(x) = -1.2892e-07\nk = 4, x = 0.865474, f(x) = -5.21805e-15\n</code></pre> <ul> <li>\u8fdb\u6765\u7684\u662f\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u4f46\u662f\u8c03\u51fa\u6765\u7684\u7ed3\u679c\u662f\u6d3e\u751f\u7c7b\u91cc\u9762\u7684\u3002\u770b\u8d77\u6765\u50cf\u591a\u6001\uff0c\u4f46\u662f\u4e0d\u662f\u865a\u51fd\u6570\uff0c\u6ca1\u6709\u8fd0\u884c\u65f6\u5f00\u9500\uff0c\u662f\u6a21\u677f\u505a\u51fa\u6765\u7684\u3002</li> <li>\u5bf9\u4e8e <code>Sqrt2</code> \u548c <code>WhatEver</code> \uff0c\u5b83\u4eec\u7684\u57fa\u7c7b\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a\u57fa\u7c7b\u662f\u5e26\u6709\u6a21\u677f\u7684\u3002\u56e0\u6b64\u5982\u679c\u9700\u8981\u653e\u5230\u4e00\u4e2a <code>vector</code> \u91cc\u9762\u8fd8\u9700\u8981\u518d\u505a\u4e00\u4e2a\u516c\u5171\u7684\u57fa\u7c7b\u548c <code>virtual function</code> \u3002</li> <li><code>static_cast</code> \u7528\u4e8e\u57fa\u7c7b\u5230\u6d3e\u751f\u7c7b\u7684\u5b89\u5168\u5411\u4e0b\u8f6c\u578b\uff0c\u7ed3\u5408\u6a21\u677f\u53c2\u6570\u786e\u4fdd\u7c7b\u578b\u6b63\u786e\u3002</li> <li><code>CRTP</code> \u901a\u8fc7\u6a21\u677f\u7ee7\u627f\u5b9e\u73b0\u7f16\u8bd1\u65f6\u591a\u6001\uff0c\u907f\u514d\u865a\u51fd\u6570\u5f00\u9500\uff0c\u63d0\u5347\u6027\u80fd\u3002</li> </ul> <ul> <li>Simulate virtual function in generic programming</li> </ul> <pre><code>template &lt;class T&gt; \nstruct Base { \n    void interface() { // normal\n        static_cast&lt;T*&gt;(this)-&gt;implementation();\n    }\n    static void static_func() { // static\n        T::static_sub_func();\n    }\n};\nstruct Derived : public Base&lt;Derived&gt; { \n    void implementation(); \n    static void static_sub_func(); \n};\n</code></pre> <ul> <li>\u7528\u666e\u901a\u51fd\u6570\u53ef\u4ee5\u505a\uff0c\u7528 <code>static function</code> \u4e5f\u53ef\u4ee5\u505a\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#morality","title":"Morality","text":"<ul> <li>Put the definition/declaration for templates in the header file (\u56e0\u4e3a\u8981\u5b9e\u4f8b\u5316\u5fc5\u987b\u8981\u770b\u5230\u6e90\u7801\uff0c\u6ca1\u6709\u6e90\u7801\u65e0\u6cd5\u5b9e\u4f8b\u5316)</li> <li>won't allocate storage for the function/class at that point</li> <li> <p>compiler/linker have mechanisms for removing multiple definitions</p> </li> <li> <p>main.cpp</p> </li> </ul> <pre><code>#include \"templates.h\"\n\nint main(){\n    foo(3);\n    foo1(4.3);\n}\n</code></pre> <ul> <li>templates.h</li> </ul> <pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;class T&gt;\nvoid foo(T a){\n    std::cout &lt;&lt;  a &lt;&lt; std::endl;\n}\n\nvoid foo1(double a){\n    std::cout &lt;&lt;  a &lt;&lt; std::endl;\n}\n</code></pre> <ul> <li>templates.cpp</li> </ul> <pre><code>#include \"templates.h\"\n\nvoid bar(){\n    foo(2);\n    foo1(3.2);\n}\n</code></pre> <ul> <li>\u6b64\u65f6\u4f1a\u6709\u7f16\u8bd1\u9519\u8bef\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709 <code>foo1</code> \u5c31\u4e0d\u4f1a\u62a5\u9519\u3002</li> <li>\u56e0\u4e3a\u6a21\u677f\u672c\u8eab\u4e0d\u662f\u5b9e\u9645\u51fd\u6570\uff0c\u800c\u662f\u751f\u6210\u51fd\u6570\u7684\"\u84dd\u56fe\"\u3002\u7f16\u8bd1\u5668\u5728\u6bcf\u4e2a\u4f7f\u7528\u6a21\u677f\u7684\u6e90\u6587\u4ef6\u4e2d\u5b9e\u4f8b\u5316\u5177\u4f53\u7c7b\u578b\uff08\u5982 <code>foo&lt;int&gt;</code>\uff09\uff0c\u5e76\u751f\u6210\u4ee3\u7801\u3002\u6a21\u677f\u5b9e\u4f8b\u5316\u540e\u7684\u51fd\u6570\u4f1a\u88ab\u6807\u8bb0\u4e3a\u5f31\u7b26\u53f7\uff08Weak Symbol\uff09\uff0c\u94fe\u63a5\u5668\u4f1a\u5408\u5e76\u91cd\u590d\u7684\u5b9e\u4f8b\u5316\u4ee3\u7801\uff0c\u907f\u514d\u51b2\u7a81\u3002</li> <li>\u8fd9\u548c <code>inline</code> \u7c7b\u4f3c\uff0c\u90fd\u662f\u52a0\u4e86 <code>week_definition</code> \u3002</li> <li>\u4f46\u662f\u975e\u6a21\u677f\u51fd\u6570\u7684\u5b9a\u4e49\u76f4\u63a5\u751f\u6210\u5f3a\u7b26\u53f7\uff08Strong Symbol\uff09\u3002\u6bcf\u4e2a\u5305\u542b\u5934\u6587\u4ef6\u7684\u6e90\u6587\u4ef6\uff08\u5982 <code>main.cpp</code> \u548c <code>templates.cpp</code>\uff09\u90fd\u4f1a\u751f\u6210\u72ec\u7acb\u7684 <code>foo1</code> \u5b9a\u4e49\u3002\u5f3a\u7b26\u53f7\u4e0d\u5141\u8bb8\u91cd\u590d\uff0c\u5bfc\u81f4 <code>multiple definition</code> \u9519\u8bef\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter11/#writing-templates","title":"Writing templates","text":"<ol> <li>Get a non-template version working first</li> </ol> <p>\u5148\u8ba9\u975e\u6a21\u677f\u7248\u672c\u6b63\u5e38\u5de5\u4f5c\uff0c\u786e\u4fdd\u57fa\u7840\u903b\u8f91\u6b63\u786e\uff0c\u907f\u514d\u5728\u6a21\u677f\u5316\u8fc7\u7a0b\u4e2d\u540c\u65f6\u5904\u7406\u903b\u8f91\u9519\u8bef\u548c\u6cdb\u578b\u590d\u6742\u6027\u3002</p> <ol> <li>Establish a good set of test cases</li> </ol> <p>\u5efa\u7acb\u5b8c\u5584\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u901a\u8fc7\u6d4b\u8bd5\u8986\u76d6\u6240\u6709\u5173\u952e\u573a\u666f\uff0c\u4e3a\u6a21\u677f\u5316\u540e\u7684\u4ee3\u7801\u63d0\u4f9b\u9a8c\u8bc1\u57fa\u51c6\u3002</p> <ol> <li>Measure performance and tune</li> </ol> <p>\u6d4b\u91cf\u6027\u80fd\u5e76\u4f18\u5316\uff0c\u786e\u4fdd\u975e\u6a21\u677f\u7248\u672c\u7684\u6027\u80fd\u8db3\u591f\u9ad8\u6548\uff0c\u907f\u514d\u6a21\u677f\u5316\u540e\u653e\u5927\u6027\u80fd\u95ee\u9898\u3002</p> <ol> <li>Review implementation : Which type(s) should be parameterized?</li> </ol> <p>\u5ba1\u67e5\u5b9e\u73b0\uff1a\u786e\u5b9a\u9700\u8981\u53c2\u6570\u5316\u7684\u7c7b\u578b\u3002\u660e\u786e\u54ea\u4e9b\u90e8\u5206\u9700\u8981\u6cdb\u578b\u5316\uff0c\u907f\u514d\u8fc7\u5ea6\u8bbe\u8ba1\u6216\u9057\u6f0f\u5173\u952e\u53c2\u6570\u3002</p> <ol> <li>Convert the non-parameterized version into a template</li> </ol> <p>\u5c06\u975e\u53c2\u6570\u5316\u4ee3\u7801\u8f6c\u6362\u4e3a\u6a21\u677f\uff0c\u901a\u8fc7\u6cdb\u578b\u5316\u6269\u5c55\u4ee3\u7801\u7684\u9002\u7528\u6027\uff0c\u652f\u6301\u591a\u79cd\u7c7b\u578b\u3002</p> <ol> <li>Test it against the established test cases</li> </ol> <p>\u7528\u65e2\u6709\u6d4b\u8bd5\u7528\u4f8b\u6d4b\u8bd5\u6a21\u677f\u4ee3\u7801\uff0c\u9a8c\u8bc1\u6a21\u677f\u5316\u540e\u7684\u4ee3\u7801\u4e0e\u539f\u884c\u4e3a\u4e00\u81f4\uff0c\u786e\u4fdd\u6cdb\u578b\u5316\u672a\u5f15\u5165\u9519\u8bef\u3002</p>"},{"location":"Computer_Science/OOP/Chapter11/#further-reading","title":"Further reading","text":"Effective C++__Item-41   92 KB / 2025-04-28 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter12/","title":"Chapter 12 | Iterators","text":"<p> \u7ea6 2132 \u4e2a\u5b57  629 \u884c\u4ee3\u7801  3 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 19 \u5206\u949f</p>"},{"location":"Computer_Science/OOP/Chapter12/#why-need-iterators","title":"Why need iterators?","text":"<ol> <li>Provide a way to visit the elements in order, without knowing the details of the container.</li> </ol> <ul> <li>Generalization of pointers</li> </ul> <p>\u672c\u8d28\u4e0a\u662f\u6307\u9488\u6982\u5ff5\u7684\u63a8\u5e7f\uff0c\u4f7f\u5f97\u6211\u4eec\u80fd\u591f\u904d\u5386\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u9700\u8981\u77e5\u9053\u5bb9\u5668\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u3002</p> <ol> <li>Separate container and algorithms with standarditerator interface functions.</li> </ol> <ul> <li>The glue between algorithms and data structures</li> <li>Without iterators, with N algorithms and M data structures, you have to manage N * M implementations (combinatorial explosion)</li> </ul> <p>\u7b97\u6cd5\u7684\u5b9e\u73b0\u548c\u5bb9\u5668\u7684\u5b9e\u73b0\u89e3\u8026\u3002</p> <ol> <li>One of design patterns (Gang of Four):</li> </ol> <ul> <li>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</li> <li>Supported in C++, java, Python, Rust, etc.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#usage","title":"Usage","text":"<pre><code>template &lt;class InputIterator, class &gt;\nInputIterator find(InputIterator first, InputIterator last, const T &amp;value){\n    while(first!=last &amp;&amp; *first!=value){ // [first, last)\n        ++first;\n    }\n    return first;\n}\n\nvector&lt;int&gt; vecTemp;\nlist&lt;double&gt; listTemp;\nif(find(vecTemp.begin(),vecTemp.end(),3)== vecTemp.end()){\n    cout &lt;&lt;\"3 not found in vecTemp\" &lt;&lt; endl;\n}\nif(find(listTemp,begin(),listTemp.end(),4)== listTemp.end()){\n    cout &lt;&lt;\"4 not found in listTemp\" &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u5bf9\u4e8e <code>find</code> \u6765\u8bf4\uff0c\u4e0d\u9700\u8981\u5173\u6ce8\u5bb9\u5668\u5185\u90e8\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ea\u9700\u8981\u77e5\u9053\u5982\u4f55\u904d\u5386\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u5373\u53ef\u3002</li> </ul> <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\n#include &lt;list&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nint main(){\n    const int Size = 5;\n    int arr[Size] = {1, 2, 3, 4, 5};\n\n    list&lt;int&gt; l(arr, arr + Size);\n    set&lt;int&gt; s(arr, arr + Size);\n    vector&lt;int&gt; v(arr, arr + Size);\n\n    auto itl = find(l.begin(), l.end(), 3);\n    auto its = find(s.begin(), s.end(), 3);\n    auto itv = find(v.begin(), v.end(), 3);\n\n    cout &lt;&lt; *itl &lt;&lt; endl;  // 3\n    cout &lt;&lt; *its &lt;&lt; endl;  // 3\n    cout &lt;&lt; *itv &lt;&lt; endl;  // 3\n\n    auto ita = find(arr, arr + Size, 3);\n    cout &lt;&lt; *ita &lt;&lt; endl;  // 3\n\n    return 0;\n}\n</code></pre> <ul> <li><code>list&lt;int&gt;::iterator itl = find(l.begin(), l.end(), 3);</code> \u524d\u9762\u7684\u540d\u5b57\u5f88\u957f\uff0c\u53ef\u4ee5\u7528auto\u7b80\u5316\u3002</li> <li>\u4e0d\u80fd\u8f7b\u6613\u89e3\u5f15\u7528\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u91cc\u9762\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u6570\uff0c\u5bf9 <code>end</code> \u89e3\u5f15\u7528\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</li> <li>\u8fed\u4ee3\u5668\u662f\u6307\u9488\u7684\u63a8\u5e7f\uff0c\u6240\u4ee5\u539f\u751f\u7684\u6307\u9488\u5929\u7136\u5c31\u662f\u8fed\u4ee3\u5668\u3002</li> <li><code>int * ita = find(arr, arr + Size, 3);</code> \u4e5f\u53ef\u4ee5\u3002</li> <li>\u5bf9\u4e8e\u8fd9\u4e2a\u8fed\u4ee3\u5668 \u4e5f\u53ef\u4ee5 <code>auto ita = find(begin(arr), end(arr), 3);</code> \u4f7f\u7528\u3002</li> </ul> <ul> <li>\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u80fd\u529b\u4e5f\u6709\u5dee\u522b\u3002</li> </ul> <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\n#include &lt;list&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nint main(){\n    const int Size = 5;\n    int arr[Size] = {1, 2, 3, 4, 5};\n\n    list&lt;int&gt; l(arr, arr + Size);\n    set&lt;int&gt; s(arr, arr + Size);\n    vector&lt;int&gt; v(arr, arr + Size);\n\n    auto itl = find(l.begin(), l.end(), 3);\n    itl++;\n    //itl += 2;  // Error\n\n    auto its = find(s.begin(), s.end(), 3); \n    its++; \n\n    auto itv = find(v.begin(), v.end(), 3);\n    itv += 2;\n\n    cout &lt;&lt; *itl &lt;&lt; endl;  // 4\n    cout &lt;&lt; *its &lt;&lt; endl;  // 4\n    cout &lt;&lt; *itv &lt;&lt; endl;  // 5\n\n\n    auto ita = find(arr, arr + Size, 3);\n    cout &lt;&lt; *ita &lt;&lt; endl;  // 3\n\n    return 0;\n}\n</code></pre> <ul> <li><code>list&lt;int&gt;</code> \u8fed\u4ee3\u5668\u5e95\u5c42\u6570\u636e\u7ed3\u6784 <code>std::list</code> \u662f\u53cc\u5411\u94fe\u8868\u3002\u94fe\u8868\u8282\u70b9\u5728\u5185\u5b58\u4e2d\u975e\u8fde\u7eed\u5b58\u50a8\uff0c\u65e0\u6cd5\u76f4\u63a5\u8df3\u8dc3\u8bbf\u95ee\u3002\u6240\u4ee5\u65e0\u6cd5 <code>+= 2</code>\u3002\u662f\u53cc\u5411\u8fed\u4ee3\u5668\uff08Bidirectional Iterator\uff09\u3002</li> <li><code>set&lt;int&gt;</code> \u8fed\u4ee3\u5668\u5e95\u5c42\u6570\u636e\u7ed3\u6784 <code>std::set</code> \u662f\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811(\u7ea2\u9ed1\u6811)\u3002<code>set</code> \u7684\u8fed\u4ee3\u5668\u652f\u6301 <code>++</code>\uff0c\u4f46 \u4e0d\u652f\u6301 <code>+= 2</code>\u3002\u662f\u53cc\u5411\u8fed\u4ee3\u5668\uff08Bidirectional Iterator\uff09\u3002</li> <li><code>vector&lt;int&gt;</code> \u8fed\u4ee3\u5668\u5e95\u5c42\u6570\u636e\u7ed3\u6784 <code>std::vector</code> \u662f\u52a8\u6001\u6570\u7ec4\u3002\u6570\u7ec4\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u5b58\u50a8\uff0c\u53ef\u901a\u8fc7\u6307\u9488\u7b97\u672f\u76f4\u63a5\u8ba1\u7b97\u504f\u79fb\u3002\u6240\u4ee5\u652f\u6301 <code>++</code>\u3001<code>--</code>\u3001<code>+=</code>\u3001<code>+</code>\u3001<code>-</code>\u3001<code>[]</code> \u7b49\u4efb\u610f\u8df3\u8dc3\u8bbf\u95ee\u3002\u662f\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff08Random Access Iterator\uff09\u3002</li> <li>\u67e5\u627e\u6548\u7387\u6ca1\u6709\u66f4\u5feb\u7684\u5c31\u662f \\(O(n)\\)\uff0c\u4f46\u662f\u5bf9\u4e8e <code>set</code> \u6765\u8bf4\uff0c\u7531\u4e8e\u5e95\u5c42\u662f\u7ea2\u9ed1\u6811\uff0c\u6709\u66f4\u5feb\u7684\u67e5\u627e\u65b9\u6cd5\uff0c\u67e5\u627e\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u7531 <code>member function</code> \u5b9e\u73b0\uff0c\u6548\u7387\u662f \\(O(\\log n)\\)\u3002</li> </ul> <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\n#include &lt;list&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nint main(){\n    const int Size = 5;\n    int arr[Size] = {5, 4, 3, 2, 1};\n\n    list&lt;int&gt; l(arr, arr + Size);\n    set&lt;int&gt; s(arr, arr + Size);\n    vector&lt;int&gt; v(arr, arr + Size);\n\n    auto itl = find(l.begin(), l.end(), 3);\n    itl++;\n\n    auto its = find(s.begin(), s.end(), 3); \n    its++; \n\n    auto itv = find(v.begin(), v.end(), 3);\n    itv += 2;\n\n    cout &lt;&lt; *itl &lt;&lt; endl;  // 2\n    cout &lt;&lt; *its &lt;&lt; endl;  // 4\n    cout &lt;&lt; *itv &lt;&lt; endl;  // 1\n\n\n    auto ita = find(arr, arr + Size, 3);\n    cout &lt;&lt; *ita &lt;&lt; endl;  // 3\n\n    return 0;\n}\n</code></pre> <ul> <li>\u7531\u4e8e\u5012\u8fc7\u6765\u4e86\uff0c\u5bf9\u4e8e <code>list</code> \u6765\u8bf4 3 \u7684\u540e\u9762\u662f 2\u3002\u5bf9\u4e8e <code>set</code> \u6765\u8bf4\uff0c\u8fd9\u91cc\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u6240\u4ee5\u503c\u5b58\u8fdb\u53bb\u4e86\u4e4b\u540e\u662f\u6811\u7684\u5f62\u5f0f\uff0c\u8fed\u4ee3\u5668\u5728\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff0c\u6240\u4ee5 3 \u7684\u540e\u9762\u662f 4\uff0c\u4e5f\u5c31\u662f\u5728 <code>set</code> \u4e2d\u7684\u8bbf\u95ee\u987a\u5e8f\u662f <code>1, 2, 3, 4, 5</code>\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#requirements","title":"Requirements","text":"<ul> <li>A unified interface used in algorithms</li> <li> <p>Work like a pointer to the elements in a container</p> <ul> <li>Have <code>++</code> operator to visit elements in order </li> <li>Have <code>*</code> operator to access the content of an element</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#operator-overloading","title":"operator overloading","text":"<ul> <li>\u8fed\u4ee3\u5668\u6700\u6838\u5fc3\u7684\u8981\u505a\u7684\u5c31\u662f\u8fd0\u7b97\u7b26\u91cd\u8f7d\u3002</li> </ul> <p>An example of overloading operators <code>*</code> and <code>-&gt;</code></p> <p><pre><code>template&lt;class T&gt;\nclass auto_ptr {\nprivate:\n    T *pointee;\npublic:\n    /* ... */\n    T&amp; operator *() { return *pointee; }\n    T* operator -&gt;() { return pointee; }\n};\n</code></pre> - \u4ee5 <code>list</code> \u4e3a\u4f8b</p> <pre><code>template&lt;class T&gt;\nclass List {\npublic:\n    void insert_front();\n    void insert_end();\n    /* ... */\nprivate:\n    ListItem&lt;T&gt; *front;\n    ListItem&lt;T&gt; *end;\n    long _size;\n};\n\ntemplate&lt;class T&gt;\nclass ListItem {\npublic:\n    T&amp; val() {\n        return _value;\n    }\n    ListItem* next() {\n        return _next;\n    }\n    /* ... */\nprivate:\n    T _value;\n    ListItem *_next;\n};\n</code></pre> <ul> <li>\u5b9e\u73b0\u4e00\u4e0b\u4e00\u4e2a\u6709 <code>dummy head</code> \u7684\u7248\u672c\u3002</li> </ul> <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate &lt;class T&gt;\nstruct ListItem {\n    T value;\n    ListItem * next;\n};\n\ntemplate &lt;class T&gt;\nclass List {\npublic:\n    List(){\n        head = new ListItem&lt;T&gt;;\n        head-&gt;next = nullptr;\n    }\n    ~List(){\n        ListItem&lt;T&gt; * p = head;\n        while(p != nullptr){\n            ListItem&lt;T&gt; * q = p-&gt;next;\n            delete p;\n            p = q;\n        }\n    }\n    void push_front(T value){\n        ListItem&lt;T&gt; * p = new ListItem&lt;T&gt;;\n        p-&gt;value = value;\n        p-&gt;next = head-&gt;next;\n        head-&gt;next = p;\n    }\n    ListItem&lt;T&gt; * get_head(){\n        return head;\n    }\n    bool empty(){\n        return head-&gt;next == nullptr;\n    }\nprivate:\n    ListItem&lt;T&gt; * head;\n};\n\nint main(){\n    List&lt;int&gt; l;\n    l.push_front(1);\n    l.push_front(2);\n    l.push_front(3);\n    ListItem&lt;int&gt; * p = l.get_head()-&gt;next;\n    while(p != nullptr){\n        cout &lt;&lt; p-&gt;value &lt;&lt; endl;\n        p = p-&gt;next;\n    }\n    return 0;    \n}\n</code></pre> <ul> <li>\u5728\u6a21\u677f\u7c7b\uff08\u5982 <code>ListItem&lt;T&gt;</code>\uff09\u7684\u5185\u90e8\u5b9a\u4e49\u6210\u5458\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u7c7b\u540d\uff08\u5982 <code>ListItem</code>\uff09\u89c6\u4e3a\u5f53\u524d\u6a21\u677f\u53c2\u6570\u5b9e\u4f8b\u5316\u7684\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u5728\u6a21\u677f\u7c7b\u5185\u90e8\u4e0d\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u6a21\u677f\u53c2\u6570,\u76f4\u63a5\u4f7f\u7528 <code>ListItem</code> \u7b49\u540c\u4e8e <code>ListItem&lt;T&gt;</code>\u3002\u5728\u7c7b\u4f5c\u7528\u57df\u5185\uff0c\u6240\u6709\u672a\u52a0\u6a21\u677f\u53c2\u6570\u7684\u7c7b\u540d\u4f1a\u88ab\u89e3\u6790\u4e3a\u5f53\u524d\u5b9e\u4f8b\u5316\u7684\u7c7b\u578b\u3002</li> <li>\u8fd9\u662f\u6bd4\u8f83\u4f20\u7edf\u7684\u904d\u5386\u65b9\u5f0f\uff0c\u5982\u679c\u8981\u548c <code>STL</code> \u4e2d\u7684\u7b97\u6cd5\u7ed3\u5408\uff0c\u5c31\u9700\u8981\u4f7f\u7528\u8fed\u4ee3\u5668\u3002</li> </ul> <ul> <li>\u63a5\u4e0b\u6765\u5c01\u88c5\u4e00\u5c42\u8fed\u4ee3\u5668\u3002</li> </ul> <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate &lt;class T&gt;\nstruct ListItem {\n    T value;\n    ListItem * next;\n};\n\ntemplate &lt;class T&gt;\nclass ListIter{\npublic:\n    ListIter(ListItem&lt;T&gt; * p = nullptr) : ptr(p){}\n    ListIter&lt;T&gt;&amp; operator++(){\n        ptr = ptr-&gt;next;\n        return *this;\n    }\n    bool operator==(const ListIter&lt;T&gt; &amp; i) const {\n        return ptr == i.ptr;\n    }\n    bool operator!=(const ListIter&lt;T&gt; &amp; i) const {\n        return !(*this == i);\n    }\n    T&amp; operator*(){\n        return ptr-&gt;value;\n    }\n    T* operator-&gt;(){\n        return &amp;(*this);\n    }\nprivate:\n    ListItem&lt;T&gt; * ptr;\n};\n\ntemplate &lt;class T&gt;\nclass List {\npublic:\n    List(){\n        head = new ListItem&lt;T&gt;;\n        head-&gt;next = nullptr;\n    }\n    ~List(){\n        ListItem&lt;T&gt; * p = head;\n        while(p != nullptr){\n            ListItem&lt;T&gt; * q = p-&gt;next;\n            delete p;\n            p = q;\n        }\n    }\n    ListIter&lt;T&gt; begin(){\n        return ListIter&lt;T&gt;(head-&gt;next);\n    }\n    ListIter&lt;T&gt; end(){\n        return ListIter&lt;T&gt;(nullptr);\n    }\n    void push_front(T value){\n        ListItem&lt;T&gt; * p = new ListItem&lt;T&gt;;\n        p-&gt;value = value;\n        p-&gt;next = head-&gt;next;\n        head-&gt;next = p;\n    }\n    ListItem&lt;T&gt; * get_head(){\n        return head;\n    }\n    bool empty(){\n        return head-&gt;next == nullptr;\n    }\nprivate:\n    ListItem&lt;T&gt; * head;\n};\n\nint main(){\n    List&lt;int&gt; l;\n    l.push_front(1);\n    l.push_front(2);\n    l.push_front(3);\n    ListItem&lt;int&gt; * p = l.get_head()-&gt;next;\n    while(p != nullptr){\n        cout &lt;&lt; p-&gt;value &lt;&lt; endl;\n        p = p-&gt;next;\n    }\n\n    for(ListIter&lt;int&gt; iter = l.begin(); iter != l.end(); ++iter){ \n        cout &lt;&lt; *iter &lt;&lt; endl;\n    }\n\n    for(int a : l){\n        cout &lt;&lt; a &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li>\u4e0d\u9700\u8981\u5199\u6790\u6784\u51fd\u6570\uff0c\u56e0\u4e3a\u6211\u53ea\u77e5\u9053\u6211\u73b0\u5728\u5b58\u7684\u72b6\u6001\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5e76\u4e0d\u7ba1\u7406\u8fd9\u4e00\u5757\u5185\u5b58\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5199\u6790\u6784\u51fd\u6570\u3002</li> <li><code>++</code> \u64cd\u4f5c\u7684\u8fd4\u56de\u503c\u662f\u672c\u7c7b\u578b\u7684\u5f15\u7528\u3002</li> <li>\u8fd9\u91cc\u53ea\u5199\u4e86\u524d\u7f00\u7684 <code>++</code> \u64cd\u4f5c\u7b26\uff0c\u56e0\u4e3a\u8fd4\u56de\u503c\u662f\u5df2\u7ecf\u4fee\u6539\u540e\u7684\u5185\u5bb9\u3002\u800c(\ud83d\udcdd\u540e\u7f00 <code>++</code> \u64cd\u4f5c\u7b26\u7684\u64b0\u5199)</li> <li>\u5bf9\u4e8e <code>T* operator-&gt;() { return &amp;(*this); }</code> \u6765\u8bf4\u3002<code>operator-&gt;</code> \u7684\u4f5c\u7528\u662f\u5141\u8bb8\u901a\u8fc7\u8fed\u4ee3\u5668\u76f4\u63a5\u8bbf\u95ee\u5bf9\u8c61\u7684\u6210\u5458\uff0c\u8bed\u6cd5\u5f62\u5f0f\u4e3a <code>iter-&gt;member</code>\u3002<code>this</code> \u662f\u6307\u5411\u5f53\u524d <code>ListIter</code> \u5bf9\u8c61\u7684\u6307\u9488\u3002<code>*this</code> \u8c03\u7528 <code>operator*()</code> \u89e3\u5f15\u7528\u8be5\u6307\u9488\uff0c\u5f97\u5230 <code>ListIter</code> \u5bf9\u8c61\u672c\u8eab\uff0c\u8fd4\u56de <code>T&amp;</code>\uff08\u4e5f\u5c31\u662f\u8fd4\u56de\u5f53\u524d <code>ListItem</code> \u7684 <code>value</code> \u7684\u5f15\u7528\uff09\u3002<code>&amp;(*this)</code> \u7b49\u4ef7\u4e8e <code>&amp;(*this)</code>\uff0c\u5373\u53d6 <code>T&amp;</code> \u7684\u5730\u5740\uff0c\u5f97\u5230 <code>T*</code>\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#the-associated-type","title":"The associated type","text":"<pre><code>// we do NOT know the data type of iter,\n// so we need another variable v to infer T\ntemplate &lt;class I, class T&gt;\nvoid func_impl(I iter, T&amp; v)\n{\n    T tmp;\n    tmp = *iter;\n    // processing code here\n}\n</code></pre> <ul> <li>\u5728 body \u91cc\u9762\u53ef\u80fd\u4f1a\u9700\u8981 <code>T</code> \u7684\u4fe1\u606f\uff0c\u6216\u8005\u518d\u5c01\u88c5\u4e00\u4e0b\u3002</li> </ul> <pre><code>// a wrapper to extract the associated\n// data type T\ntemplate &lt;class I&gt;\nvoid func(I iter)\n{\n    func_impl(iter, *iter);\n    // processing code here\n}\n</code></pre> <ul> <li>\u5e95\u4e0b\u53ef\u4ee5\u518d\u5957\u4e00\u5c42\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a <code>T</code> \u7684\u4fe1\u606f\u7ed9\u9690\u85cf\u8d77\u6765\u3002\u56e0\u4e3a <code>*iter</code> \u662f\u4e00\u4e2a\u8fd4\u56de <code>T&amp;</code> \u7684\u3002\u8fd9\u4e2a <code>*iter</code> \u552f\u4e00\u7684\u7528\u5904\u5c31\u662f\u63a8\u5bfc\u8fd9\u4e2a <code>T</code> \u7684\u7c7b\u578b\u3002(\u5bf9\u4e8e\u8fed\u4ee3\u5668\uff0c<code>operator*</code> \u7528\u4e8e\u89e3\u5f15\u7528\u8fed\u4ee3\u5668\uff0c\u8fd4\u56de\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u5f15\u7528)</li> <li>However, we might need more type information that associated to iterators.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#type-info-definition","title":"Type info. definition","text":"<ul> <li>\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u662f\u76f4\u63a5\u5728\u8fed\u4ee3\u5668\u91cc\u9762\u5b9a\u4e49\u3002</li> <li>Explicitly define the type info. inside iterators.</li> </ul> <pre><code>template &lt;class T&gt;\nstruct myIter {\n    typedef T value_type;\n    /* ... */\n    T* ptr;\n    myIter(T *p = 0) : ptr(p) {}\n    T&amp; operator*() {\n        return *ptr;\n    }\n};\n\ntemplate &lt;class I&gt;\ntypename I::value_type\nfunc(I iter) {\n    return *iter;\n}\n// code\nmyIter&lt;int&gt; iter(new int(8));\ncout &lt;&lt; func(iter);\n</code></pre> <ul> <li><code>typename I::value_type</code> \u7684\u4f5c\u7528\u662f\u663e\u5f0f\u544a\u8bc9\u7f16\u8bd1\u5668 <code>I::value_type</code> \u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u975e\u9759\u6001\u6210\u5458\u6216\u53d8\u91cf\u3002</li> <li>\u6a21\u677f\u4ee3\u7801\u4f1a\u7ecf\u5386\u4e24\u6b21\u7f16\u8bd1\uff1a</li> </ul> <ol> <li>\u9996\u6b21\u7f16\u8bd1\uff1a\u68c0\u67e5\u975e\u6a21\u677f\u76f8\u5173\u8bed\u6cd5\uff08\u5982\u7b26\u53f7\u540d\u79f0\u3001\u57fa\u672c\u8bed\u6cd5\uff09\u3002</li> <li>\u5b9e\u4f8b\u5316\u7f16\u8bd1\uff1a\u751f\u6210\u5177\u4f53\u7c7b\u578b\u4ee3\u7801\u65f6\uff0c\u68c0\u67e5\u6a21\u677f\u53c2\u6570\u76f8\u5173\u903b\u8f91\u3002</li> </ol> <p>\u5728\u9996\u6b21\u7f16\u8bd1\u9636\u6bb5\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u786e\u5b9a <code>I::value_type</code> \u662f\u7c7b\u578b\u8fd8\u662f\u9759\u6001\u6210\u5458\uff08\u56e0\u4e3a <code>I</code> \u662f\u6a21\u677f\u53c2\u6570\uff0c\u5177\u4f53\u7c7b\u578b\u672a\u77e5\uff09\u3002typename \u7684\u4f5c\u7528\u662f\u5728\u9996\u6b21\u7f16\u8bd1\u9636\u6bb5\u660e\u786e\u544a\u77e5\u7f16\u8bd1\u5668 <code>I::value_type</code> \u662f\u7c7b\u578b\uff0c\u907f\u514d\u6b67\u4e49\u3002</p> <p>\u4ee3\u7801\u793a\u4f8b\u5206\u6790:</p> <ol> <li><code>typedef T value_type;</code> : \u5b9a\u4e49\u5d4c\u5957\u7c7b\u578b <code>value_type</code></li> <li><code>typename I::value_type</code> : \u8fd4\u56de\u7c7b\u578b\u4e3a <code>I::value_type</code>\uff08\u5373 <code>T</code>\uff09</li> </ol> <p>\u4f8b\u5982:</p> <pre><code>myIter&lt;int&gt; iter(new int(8));\ncout &lt;&lt; func(iter); // \u8f93\u51fa 8\n</code></pre> <ul> <li><code>I</code> \u88ab\u63a8\u5bfc\u4e3a <code>myIter&lt;int&gt;</code>\u3002\u800c\u6b64\u65f6\u5bf9\u4e8e <code>T</code> \u6765\u8bf4\uff0c <code>myIter&lt;int&gt;</code> \u8bf4\u660e <code>T</code> \u4e3a <code>int</code>\u3002</li> <li><code>I::value_type</code> \u5373\u4e3a <code>int</code>\uff0c\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u4e3a <code>int</code>\u3002</li> </ul> <p>Pitfalls:</p> <p>The problem of the typedef trick: It cannot support pointer-type iterators, e.g., <code>int*</code>, <code>double*</code>, <code>Complex*</code> , which cripples the STL programming.</p>"},{"location":"Computer_Science/OOP/Chapter12/#iterator-traits","title":"Iterator Traits","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n\nusing namespace std;\n\ntemplate &lt;class T&gt;\nstruct ListItem {\n    T value;\n    ListItem * next;\n};\n\ntemplate &lt;class T&gt;\nclass ListIter{\npublic:\n\n    using iterator_category = forward_iterator_tag;\n    using value_type = T;\n    using pointer = T *;\n    using reference = T &amp;;\n    using difference_type = ptrdiff_t;\n\n    ListIter(ListItem&lt;T&gt; * p = nullptr) : ptr(p){}  \n    ListIter&lt;T&gt;&amp; operator++(){\n        ptr = ptr-&gt;next;\n        return *this;  \n    }\n    bool operator==(const ListIter&lt;T&gt; &amp; i) const {\n        return ptr == i.ptr;\n    }\n    bool operator!=(const ListIter&lt;T&gt; &amp; i) const {\n        return !(*this == i);\n    }\n    T&amp; operator*(){\n        return ptr-&gt;value;\n    }\n    T* operator-&gt;(){\n        return &amp;(**this);  \n    }\nprivate:\n    ListItem&lt;T&gt; * ptr;\n};\n\ntemplate &lt;class T&gt;\nclass List {\npublic:\n    List(){\n        head = new ListItem&lt;T&gt;;\n        head-&gt;next = nullptr;\n    }\n    ~List(){\n        ListItem&lt;T&gt; * p = head;\n        while(p != nullptr){\n            ListItem&lt;T&gt; * q = p-&gt;next;\n            delete p;\n            p = q;\n        }\n    }\n    ListIter&lt;T&gt; begin(){\n        return ListIter&lt;T&gt;(head-&gt;next);\n    }\n    ListIter&lt;T&gt; end(){\n        return ListIter&lt;T&gt;(nullptr);\n    }\n    void push_front(T value){\n        ListItem&lt;T&gt; * p = new ListItem&lt;T&gt;;\n        p-&gt;value = value;\n        p-&gt;next = head-&gt;next;\n        head-&gt;next = p;\n    }\n    ListItem&lt;T&gt; * get_head(){\n        return head;\n    }\n    bool empty(){\n        return head-&gt;next == nullptr;\n    }\nprivate:\n    ListItem&lt;T&gt; * head;\n};\n\nint main(){\n    List&lt;int&gt; l;\n    l.push_front(1);\n    l.push_front(2);\n    l.push_front(3);\n    ListItem&lt;int&gt; * p = l.get_head()-&gt;next;\n    while(p != nullptr){\n        cout &lt;&lt; p-&gt;value &lt;&lt; endl;\n        p = p-&gt;next;\n    }\n\n    for(ListIter&lt;int&gt; iter = l.begin(); iter != l.end(); ++iter){\n        cout &lt;&lt; *iter &lt;&lt; endl;\n    }\n\n    for(int a: l){\n        cout &lt;&lt; a &lt;&lt; endl;\n    }\n\n    for(int i = 1; i &lt;= 5; ++i){\n        auto iter = find(l.begin(), l.end(), i);\n        if(iter == l.end()){\n            cout &lt;&lt; i &lt;&lt; \" is not found\" &lt;&lt; endl;\n        }else{\n            cout &lt;&lt; \"found: \" &lt;&lt; *iter &lt;&lt; endl;\n        }\n    }\n\n    auto iter = l.begin();\n    advance(iter, 2);\n    cout &lt;&lt; \"*iter after advance: \" &lt;&lt; *iter &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <ul> <li><code>using</code> \u6bd4 <code>typedef</code> \u66f4\u597d\uff0c<code>typedef</code> \u6bd4 <code>using</code> \u8981\u8001\u4e00\u70b9\u3002<code>using</code> \u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\u6a21\u677f\u7c7b\u578b\u522b\u540d\uff0c\u800c <code>typedef</code> \u65e0\u6cd5\u505a\u5230\u3002</li> <li><code>using iterator_category = forward_iterator_tag;</code> \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u524d\u5411\u8fed\u4ee3\u5668\uff08Forward Iterator\uff09\u3002</li> <li><code>using value_type = T;</code> \u8868\u793a\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u7684\u7c7b\u578b\u662f <code>T</code>\u3002</li> <li><code>using difference_type = ptrdiff_t;</code> \u8868\u793a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u5dee\u503c\u7c7b\u578b\u662f <code>ptrdiff_t</code>\u3002<code>ptrdiff_t</code> \u662f C/C++ \u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u4e13\u95e8\u7528\u4e8e\u8868\u793a\u4e24\u4e2a\u6307\u9488\u4e4b\u95f4\u7684\u5dee\u503c\uff08\u6216\u5185\u5b58\u5730\u5740\u7684\u504f\u79fb\u91cf\uff09\u3002</li> <li><code>using pointer = T*;</code> \u8868\u793a\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u7684\u6307\u9488\u7c7b\u578b\u662f <code>T*</code>\u3002</li> <li><code>using reference = T&amp;;</code> \u8868\u793a\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u7684\u5f15\u7528\u7c7b\u578b\u662f <code>T&amp;</code>\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#use-iterator_traits-trick","title":"Use iterator_traits trick","text":"<pre><code>template &lt;class I&gt;\nstruct iterator_traits {\n    typedef typename I::value_type value_type;\n}\n\ntemplate &lt;class I&gt;\ntypename iterator_traits&lt;I&gt;::value_type\nfunc(I iter) {\n    return *iter;\n}\n// code\nmyIter&lt;int&gt; iter(new int(8));\ncout &lt;&lt; func(iter);\nint* p = new int[20]();\ncout &lt;&lt; func(p); // iterator_traits&lt;int*&gt; ??\n</code></pre> <ul> <li>\u5982\u679c\u662f <code>int*</code> \uff0c\u53c8\u4e0d\u662f <code>class</code> \u662f\u6ca1\u6709 <code>I::value_type</code> \u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#template-specialization","title":"Template specialization","text":"<ul> <li>Primary template:</li> </ul> <pre><code>template&lt;class T1, class T2, int I&gt;\nclass A { /* ... */ };\n</code></pre> <ul> <li>Explicit (full) template specialization: (\u53c2\u6570\u7ed9\u5168\u4e86)</li> </ul> <pre><code>template&lt;&gt;\nclass A&lt;int, double, 5&gt; { /* ... */ };\n</code></pre> <ul> <li>Partial template specialization: (\u53c2\u6570\u6ca1\u6709\u7ed9\u5168)</li> </ul> <pre><code>template&lt;class T2&gt;\nclass A&lt;int, T2, 3&gt; { /* ... */ };\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;iterator&gt;\n\nusing namespace std;\n\ntemplate&lt;class T&gt;\nclass A{\npublic:\n    A() {cout &lt;&lt; \"template T\" &lt;&lt; endl;}\n};\n\ntemplate&lt;&gt;\nclass A&lt;int&gt;{\npublic:\n    A() {cout &lt;&lt; \"template int\" &lt;&lt; endl;}\n};\n\ntemplate&lt;class T&gt;\nclass A&lt;T*&gt;{\npublic:\n    A() {cout &lt;&lt; \"template *\" &lt;&lt; endl;}\n};\n\nstruct Node {};\n\ntemplate&lt;&gt;\nclass A&lt;Node&gt;{\npublic:\n    A() {cout &lt;&lt; \"Node T\" &lt;&lt; endl;}\n};\n\nint main(){\n    A&lt;double&gt; d;  // \u4e3b\u6a21\u677f\n    A&lt;int&gt; i;  // \u6709\u5168\u7279\u5316\u7684\u7248\u672c\n    A&lt;int*&gt; ip;  // \u6307\u9488\u7684\u504f\u7279\u5316\u7248\u672c\n\n    A&lt;Node&gt; n;  // Node \u7684\u4e3b\u6a21\u677f\n    A&lt;Node*&gt; np;  // \u6307\u9488\u7279\u5316\u7684\u7248\u672c\n    return 0;\n}\n</code></pre> <ul> <li><code>template&lt;&gt;</code> \u8868\u660e\u8fd9\u662f\u4e00\u4e2a\u6a21\u677f\u7684\u5b8c\u5168\u7279\u5316\uff0c\u5f53\u4f60\u60f3\u8981\u4e3a\u67d0\u4e2a\u7279\u5b9a\u7684\u7c7b\u578b\uff08\u4f8b\u5982 <code>int</code>\uff09\u63d0\u4f9b\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u5b9e\u73b0\u65f6\uff0c\u4f60\u5c31\u9700\u8981\u7528\u5230\u5b8c\u5168\u7279\u5316\u3002\u4e3a\u4e86\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u662f\u4e00\u4e2a\u9488\u5bf9\u7279\u5b9a\u7c7b\u578b\u7684\u5b8c\u5168\u7279\u5316\uff0c\u4f60\u9700\u8981\u4f7f\u7528 <code>template&lt;&gt;</code>\u3002\u8fd9\u4e2a\u7a7a\u7684\u5c16\u62ec\u53f7\u5217\u8868\u8868\u660e\u4f60\u5c06\u4e3a\u6240\u6709\u6a21\u677f\u53c2\u6570\u63d0\u4f9b\u5177\u4f53\u7684\u7c7b\u578b\u3002</li> <li><code>class A&lt;T*&gt;</code> \u4e5f\u662f\u504f\u7279\u5316\uff0c\u6307\u5b9a\u4e86\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u4f46\u662f\u6ca1\u6307\u5b9a\u6307\u5411\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u53ea\u8981\u662f\u6307\u9488\u5c31\u884c</li> <li>\u7279\u5316\u76f8\u5f53\u4e8e\u7ed9\u4e86\u51e0\u79cd\u4e0d\u540c\u7684\u7248\u672c\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u4f60\u4f20\u5165\u7684\u7c7b\u578b\u6765\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002\u5982\u679c\u6709\u7279\u6b8a\u7248\u672c\u4f18\u5148\u4f7f\u7528\u7279\u6b8a\u7248\u672c\u3002</li> <li>\u4e3b\u6a21\u677f\u9002\u7528\u4e8e\u6240\u6709\u672a\u7279\u5316\u7684\u7c7b\u578b\u3002\u5168\u7279\u5316\u7248\u672c\u4ec5\u9002\u7528\u4e8e <code>T = int</code>\u3002\u504f\u7279\u5316\u7248\u672c\uff08\u6307\u9488\u7c7b\u578b\uff09\u9002\u7528\u4e8e\u6240\u6709\u6307\u9488\u7c7b\u578b <code>T*</code>\uff08\u5982 <code>int*</code>\u3001<code>Node*</code>\uff09\u3002\u5168\u7279\u5316\u7248\u672c\uff08<code>Node</code>\uff09\u4ec5\u9002\u7528\u4e8e <code>T = Node</code>\u3002</li> <li>C++ \u6a21\u677f\u5b9e\u4f8b\u5316\u7684\u4f18\u5148\u7ea7\u4e3a : \u5168\u7279\u5316\uff08\u5982 <code>A&lt;int&gt;</code>\u3001<code>A&lt;Node&gt;</code>\uff09 &gt; \u504f\u7279\u5316\uff08\u5982 <code>A&lt;T*&gt;</code>\uff09 &gt; \u4e3b\u6a21\u677f\u3002</li> </ul> <ul> <li>The traits technique with template specialization:</li> </ul> <pre><code>template&lt;class I&gt;\nclass iterator_traits\n{\npublic:\ntypedef typename\n    I::value_type value_type;\ntypedef typename\n    I:pointer_type pointer_type;\n    /* ... */\n};\n\ntemplate&lt;class T&gt;\nclass iterator_traits&lt;T*&gt;\n{\npublic:\n    typedef T value_type;\n    typedef T* pointer_type;\n    /* ... */\n};\n</code></pre> <ul> <li>\u5f53\u4f20\u5165\u662f <code>T*</code> \u8fd9\u6837\u7684\u7c7b\u578b\u65f6\uff0c <code>value_type</code> \u5c31\u662f <code>T</code>\uff0c <code>pointer_type</code> \u5c31\u662f <code>T*</code> \u3002\u89e3\u51b3\u4e86\u6307\u9488\u4f5c\u4e3a\u8fed\u4ee3\u5668\u7684\u95ee\u9898\u3002</li> <li>\u5f53\u7136\u8fd8\u8981\u4e3a <code>const</code> \u6307\u9488\u63d0\u4f9b\u4e00\u4efd\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#standard-traits-in-stl","title":"Standard traits in STL","text":"<pre><code>template&lt;class I&gt;\nclass iterator_traits\n{\npublic:\n    typedef typename I::iterator_category iterator_category;\n    typedef typename I::value_type value_type;\n    typedef typename I::difference_type differece_type;\n    typedef typename I::pointer pointer;\n    typedef typename I::reference reference;\n    /* ... */\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter12/#iterator-category-types","title":"Iterator category (types)","text":"<ul> <li>InputIterator \u53ef\u4ee5\u8bfb</li> <li>OutputIterator \u53ef\u4ee5\u5199</li> <li>ForwardIterator \u6709\u8bfb\u5199\u80fd\u529b\u4e0e\u524d\u8fdb\u80fd\u529b</li> <li>BidirectionalIterator \u5728 ForwardIterator \u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u53cc\u5411\u8d70</li> <li>RandomAccessIterator \u968f\u673a\u8bbf\u95ee\uff0c\u5e38\u6570\u65f6\u95f4\u5185\u8bbf\u95ee\u4efb\u610f\u4f4d\u7f6e</li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#iterator-method-advance","title":"Iterator method: advance","text":"<pre><code>template&lt;class InputIterator, class Distance&gt;\nvoid advance_II(InputIterator &amp;i, Distance n)\n{\n    while (n--) ++i;\n}\n\ntemplate&lt;class BidirectionalIterator, class Distance&gt;\nvoid advance_BI(BidirectionalIterator &amp;i, Distance n)\n{\nif (n &gt;= 0)\n    while (n--) ++i;\nelse\n    while (n++) --i;\n}\n\ntemplate&lt;class RandomAccessIterator, class Distance&gt;\nvoid advance_RAI(RandomAccessIterator &amp;i, Distance n)\n{\n    i += n;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter12/#use-iterator-category-info","title":"Use iterator category info.","text":"<ul> <li>But, how to call the correct version of <code>advance()</code> according to the iterator types?</li> </ul> <pre><code>struct input_iterator_tag {};\nstruct output_iterator_tag {};\nstruct forward_iterator_tag : public input_iterator_tag {};\nstruct bidirectional_iterator_tag : public forward_iterator_tag {};\nstruct random_access_iterator_tag : public bidirectional_iterator_tag {};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter12/#use","title":"Use","text":"<pre><code>template&lt;class InputIterator, class Distance&gt;\ninline void __advance(InputIterator &amp;i, Distance n, input_iterator_tag)\n{\n    while (n--) ++i;\n}\n\ntemplate&lt;class BidirectionalIterator, class Distance&gt;\ninline void __advance(BidirectionalIterator &amp;i, Distance n, bidirectional_iterator_tag)\n{\nif (n &gt;= 0)\n    while (n--) ++i;\nelse\n    while (n++) --i;\n}\n\ntemplate&lt;class RandomAccessIterator, class Distance&gt;\ninline void __advance(RandomAccessIterator &amp;i, Distance n, random_access_iterator_tag)\n{\n    i += n;\n}\n</code></pre> <ul> <li>\u5bf9\u4e8e <code>advance()</code> \u6765\u8bf4\u53ea\u6709\u524d\u4e24\u4e2a\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u518d\u8fdb\u884c\u4e00\u6b21\u5c01\u88c5\u5373\u53ef\u3002</li> <li>Use traits again! Create a temporary object...</li> </ul> <pre><code>template&lt;class Iterator, class Distance&gt;\ninline void advance(Iterator &amp;i, Distance n)\n{\n    __advance(i, n, iterator_traits&lt;Iterator&gt;::iterator_category());\n}\n</code></pre> <ul> <li>Partial specialization for raw pointers</li> </ul> <pre><code>template &lt;class I&gt;\nstruct iterator_traits {\n    /* ... */\n    typedef typename I::iterator_category iterator_category;\n};\ntemplate &lt;class T&gt;\nstruct iterator_traits&lt;T*&gt; {\n    /* ... */\n    typedef random_access_iterator_tag iterator_category;\n};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter12/#pure-transfer","title":"Pure transfer","text":"<ul> <li>\u53ef\u4ee5\u6ce8\u610f\u5230 <code>ForwardIterator</code> \u6ca1\u6709\u5b9e\u73b0\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u5b9e\u73b0\uff0c\u56e0\u4e3a <code>ForwardIterator</code> \u662f <code>InputIterator</code> \u7684\u5b50\u7c7b\uff0c\u6ca1\u6709\u4e25\u683c\u5339\u914d\u65f6\u4f1a\u81ea\u52a8\u5411\u4e0a\u9020\u578b\u3002</li> <li>The function version with pure transfer, from <code>forward_iterator_tag</code> to <code>input_iterator_tag</code> , can be simply removed due to inheritance (implicit conversion).</li> </ul> <pre><code>template&lt;class ForwardIterator, class Distance&gt;\ninline void __advance(ForwardIterator &amp;i, Distance n forward_iterator_tag)\n{\n __advance(i, n, input_iterator_tag());\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter12/#iterator-method-distance","title":"Iterator method: distance","text":"<pre><code>template&lt;class InputIterator&gt;\ninline iterator_traits&lt;InputIterator&gt;::difference_type \n__distance(InputIterator first, InputIterator last, input_iterator_tag)\n{\niterator_traits&lt;InputIterator&gt;::difference_type n=0;\nwhile (first != last) {\n    ++first; ++n;\n}\nreturn n;\n}\n\ntemplate&lt;class RandomAccessIterator&gt;\ninline iterator_traits&lt;RandomAccessIterator&gt;::difference_type\n__distance(RandomAccessIterator first, RandomAccessIterator last, random_access_iterator_tag)\n{\n    return last \u2013 first;\n}\n</code></pre> <ul> <li>The wrapper function</li> </ul> <pre><code>template&lt;class Iterator&gt;\ninline iterator_traits&lt;Iterator&gt;::difference_type\ndistance(Iterator first, Iterator last)\n{\nreturn __distance(first, last,  iterator_traits&lt;Iterator&gt;::iterator_category());\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter12/#iterators","title":"Iterators","text":"<ul> <li>Container knows how to design its own iterator.</li> <li>Traits trick extracts type information embedded in different iterators, including raw pointers.</li> <li>Algorithms are independent to containers through the design philosophy of iterators.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter12/#further-reading","title":"Further reading","text":"Design Patterns - Iterator   777 KB / 2025-04-28 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter13/","title":"Chapter 13 | Exceptions","text":"<p> \u7ea6 2771 \u4e2a\u5b57  708 \u884c\u4ee3\u7801  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 23 \u5206\u949f</p>"},{"location":"Computer_Science/OOP/Chapter13/#run-time-error","title":"Run-time error","text":"<ul> <li>Static typing and compile-time checks<ul> <li>badly formed code is not executed</li> </ul> </li> <li>But, something always happens at run-time<ul> <li>It is crucial to address all potential situations</li> </ul> </li> </ul> <p>E.g. to read a file</p> <ol> <li>open the file</li> <li>determine its size</li> <li>allocate that much memory</li> <li>read the file into memory</li> <li>close the file</li> </ol>"},{"location":"Computer_Science/OOP/Chapter13/#error-code","title":"Error code","text":"<pre><code>errorCodeType readFile {\n    initialize errorCode = 0;\n    open the file;\n    if ( theFilesOpen ) {\n        determine its size;\n        if ( gotTheFileLength ) {\n            allocate that much memory;\n            if ( gotEnoughMemory ) {\n                read the file into memory;\n                if ( readFailed ) {\n                    errorCode = -1;\n                }\n            } else {\n                errorCode = -2;\n            }\n        } else {\n        errorCode = -3;\n        }\n        close the file;\n        if ( theFILEDidntClose &amp;&amp; errorCode == 0 ) {\n            errorCode = -4;\n        } \n    } else {\n        errorCode = -5;\n    }\n    return errorCode;\n}\n</code></pre> <pre><code>try {\n    // -----------------------\n    // main logic here\n    open the file;\n    determine its size;\n    allocate that much memory;\n    read the file into memory;\n    close the file;\n    // -----------------------\n} catch ( fileOpenFailed ) {\n    doSomething;\n} catch ( sizeDeterminationFailed ) {\n    doSomething;\n} catch ( memoryAllocationFailed ) {\n    doSomething;\n} catch ( readFailed ) {\n    doSomething;\n} catch ( fileCloseFailed ) {\n    doSomething;\n}\n</code></pre> <ul> <li>At the point where the problem occurs<ul> <li>you may not know what to do, but you knowthat you can't just continue on merrily</li> <li>you must stop, and somebody, somewhere mustfigure out what to do next</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#why-exception","title":"Why exception?","text":"<p>A major advantage of exceptions:</p> <ul> <li>separate the error-handling code from the code that runs under normal circumstances</li> <li>\u53ef\u4ee5\u628a\u6b63\u5e38\u7684\u4ee3\u7801\u903b\u8f91\u548c\u9519\u8bef\u5904\u7406\u4ee3\u7801\u5206\u5f00</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#example-vector","title":"Example: Vector","text":"<pre><code>template &lt;typename T&gt;\nclass Vector {\nprivate:\n    T* m_elements;\n    int m_size;\npublic:\n    Vector(int size = 0) : m_size(size) { /* ... */ }\n    ~Vector() { delete[] m_elements; }\n    /* ... */\n    int length() { return m_size; }\n    T&amp; operator[](int); // How to implement?\n};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter13/#problem","title":"Problem","text":"<pre><code>template &lt;class T&gt;\nT&amp; Vector&lt;T&gt;::operator[](int idx) {\n</code></pre> <ul> <li>What should <code>operator[]</code> do if <code>idx</code> is not a valid index?</li> </ul> <p>A choice\uff1a</p> <ul> <li>Return random memory <code>return m_elements[idx];</code></li> <li>\u4e00\u79cd\u5c31\u662f <code>return</code> \u51fa\u53bb\u3002</li> </ul> <p>More choices\uff1a</p> <ul> <li>Return a special value representing errors</li> </ul> <pre><code>if (idx &lt; 0 || idx &gt;= m_size) { \n    T error_marker(\"some magic value\");\n    return error_marker;\n}\nreturn m_elements[idx];\n</code></pre> <ul> <li>\u8bbe\u7f6e\u4e00\u4e2a\u7279\u6b8a\u7684\u503c\uff0c\u4f46\u662f\u4f7f\u5f97 <code>m_elements</code> \u53ef\u4ee5\u7528\u7684\u503c\u53d8\u5c11\u3002</li> <li><code>x = v[2] + v[4];</code> is not safe code anymore!</li> <li><code>x = v[2] + v[4];</code> \u8fd9\u79cd\u4ee3\u7801\u5c31\u53d8\u5f97\u4e0d\u5b89\u5168\u4e86\u3002\u56e0\u4e3a\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e0a\u8ff0\u7684\u7279\u6b8a\u7684\u503c\u3002</li> </ul> <p>More choices ...\uff1a</p> <ul> <li>Just die</li> </ul> <pre><code>if (idx &lt; 0 || idx &gt;= m_size){ \n    exit(22);\n}\nreturn m_elements[idx];\n</code></pre> <ul> <li> <p>\u81f3\u5c11\u77e5\u9053\u8fd9\u91cc\u7684\u4ee3\u7801\u5b58\u5728\u95ee\u9898\u3002</p> </li> <li> <p>Die, but gracefully (with autopsy)</p> </li> </ul> <pre><code>assert(idx &gt;= 0 &amp;&amp; idx &lt; m_size);\nreturn m_elements[idx];\n</code></pre> <ul> <li>\u68c0\u6d4b\u5230\u8fd9\u4e2a\u95ee\u9898\u540e\uff0c\u53ef\u4ee5\u6253\u5370\u76f8\u5e94\u7684\u4fe1\u606f\uff0c\u7136\u540e\u9000\u51fa\u7a0b\u5e8f\u3002</li> <li>\u76f8\u5f53\u4e8e\u662f\u5148\u4f20\u9012\u4fe1\u606f\u518d die\u3002</li> <li>\u8fd9\u5bf9\u4e8e debug \u662f\u5f88\u597d\u7684\u3002</li> <li>ASSERT \u5728 DEBUG \u6a21\u5f0f\u4e0b\u4f1a\u89e6\u53d1\uff0c\u8fdb\u5165 RELEASE \u6a21\u5f0f\u65f6\uff0c\u5c31\u4e0d\u4f1a\u89e6\u53d1\uff0c\u4e5f\u4e0d\u4f1a\u9020\u6210\u6027\u80fd\u7684\u635f\u5931\uff0c\u5c31\u662f\u7a7a\u7684\u5b8f\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#when-to-use-exceptions","title":"When to use exceptions","text":"<ul> <li>Many times, you don't know what should be done</li> <li>Anything you do could be wrong</li> <li>Solution: expose the problem</li> </ul> <p>Make your caller (or its caller ...) responsible</p> <p>\u6709\u65f6\u5019\u50cf\u7cfb\u7edf\uff0c\u78c1\u76d8\uff0c\u7f51\u7edc\u7b49\uff0c\u5e76\u4e0d\u662f\u7cfb\u7edf\u7684 bug \uff0c\u53ea\u662f\u4e00\u4e9b\u5f02\u5e38\u7684\u60c5\u51b5\uff0c\u8fd9\u662f\u4e3a\u4e86\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u5904\u7406\u3002</p>"},{"location":"Computer_Science/OOP/Chapter13/#how-to-raise-an-exception","title":"How to raise an exception","text":"<pre><code>template &lt;class T&gt;\nT&amp; Vector&lt;T&gt;::operator[](int idx) {\n    if (idx &lt; 0 || idx &gt;= m_size) {\n        // throw is a *keyword*\n        // exception is raised at this point\n        throw &lt;&lt;something&gt;&gt;;\n    }\n    return m_elements[idx];\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter13/#what-do-you-throw","title":"What do you throw?","text":"<pre><code>// What do you have? Data!\n// Define a class to represent the error\nclass VectorIndexError {\npublic:\n    VectorIndexError(int v) : m_badValue(v) { }\n    ~VectorIndexError() { }\n    void diagnostic() {\n        cerr &lt;&lt; \"index \" &lt;&lt; m_badValue &lt;&lt; \"out of range!\";\n    }\nprivate:\n    int m_badValue;\n};\n</code></pre> <pre><code>template &lt;class T&gt;\nT&amp; Vector&lt;T&gt;::operator[](int idx){ \n    if (idx &lt; 0 || idx &gt;= m_size) {\n        throw VectorIndexError(idx); // the data object\n    }\n    return m_elements[idx];\n}\n</code></pre> <ul> <li>\u5728 <code>throw VectorIndexError(idx);</code> \u5f00\u59cb\u9000\u6808\uff0c\u4e00\u5c42\u5c42\u9000\uff0c\u770b\u54ea\u4e2a caller \u53ef\u4ee5\u63a5\u4f4f\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#what-about-your-caller","title":"What about your caller?","text":"<ul> <li>Doesn't care</li> <li>The code never anticipates any problems</li> </ul> <pre><code>int func() {\n    Vector&lt;int&gt; v(12);\n    v[3] = 5;\n    int i = v[42]; // out of range\n    // control never gets here!\n    return i * 5;\n}\n</code></pre> <ul> <li> <p>\u4e0d\u7ba1\u5b83\uff0c\u4ec0\u4e48\u90fd\u4e0d\u5199\uff0c\u629b\u51fa\u5f02\u5e38\uff0c\u6ca1\u63a5\u4f4f\uff0c\u53ea\u662f\u4f1a\u7ee7\u7eed\u9000\u6808\u3002</p> </li> <li> <p>Cares deeply</p> </li> </ul> <pre><code>void outer() {\n    try {\n        func();\n        func2();\n    } catch (VectorIndexError&amp; e) {\n        e.diagnostic();\n        // This exception does not propagate\n    }\n    cout &lt;&lt; \"Control is here after exception\";\n}\n</code></pre> <ul> <li> <p>\u5173\u5fc3\u8fd9\u4e2a\u5f02\u5e38\u53ef\u4ee5\u5728 <code>try block</code> \u91cc\u9762\u63a5\u4f4f\u8fd9\u4e2a\u5f02\u5e38\u3002</p> </li> <li> <p>Mildly interested</p> </li> </ul> <pre><code>void outer2() {\n    string err_msg(\"exception caught\");\n    try {\n        func();\n    } catch (VectorIndexError&amp;) {\n        cout &lt;&lt; err_msg;\n        throw; // propagate the exception\n    }\n}\n</code></pre> <ul> <li>Doesn\u2019t care about the details</li> <li>\u63a5\u4f4f\u4f46\u662f\u4e0d\u5904\u7406\uff0c\u53ea\u662f\u7ee7\u7eed\u629b\u51fa\u8fd9\u4e2a\u9519\u8bef\uff0c\u76f4\u5230\u6700\u540e\u6709\u4eba\u53bb\u5904\u7406\uff0c\u5982\u4e0b\u3002</li> </ul> <pre><code>void outer3() {\n    try {\n        outer2();\n    } catch (...) {\n        // ... catches ALL exceptions!\n        cout &lt;&lt; \"The exception stops here!\";\n    }\n}\n</code></pre> <ul> <li><code>...</code> \u8868\u793a\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u7684\u5f02\u5e38\u3002</li> </ul> <p></p>"},{"location":"Computer_Science/OOP/Chapter13/#review","title":"Review","text":"<ul> <li> <p><code>throw exp;</code></p> <ul> <li>throws value for matching</li> </ul> </li> <li> <p><code>throw;</code></p> <ul> <li>re-raises the exception being handled</li> <li>valid only within a handler</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#try-catch-blocks","title":"Try-catch blocks","text":"<pre><code>try { ... }\ncatch { ... }\ncatch { ... }\n</code></pre> <ul> <li>Establishes any number of handlers</li> <li>Not needed if you don't use any handlers</li> <li>Shows where you expect to handle exceptions</li> <li>Costs cycles \u6709\u4e00\u4e9b\u65f6\u95f4\u4e0a\u7684\u4ee3\u4ef7</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#exception-handlers","title":"Exception handlers","text":"<ul> <li>Select exception by type</li> <li>Can re-raise</li> <li>Two forms</li> </ul> <pre><code>catch (SomeType v) { // handler code \u5e26\u53c2\u6570\uff0c\u800c\u4e14\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\n}\ncatch (...) { // handler code \u901a\u914d\n}\n</code></pre> <ul> <li>Take a single argument (like a formal parameter)</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#selecting-a-handler","title":"Selecting a handler","text":"<ul> <li>Can have any number of handlers</li> <li>Handlers are checked in order of appearance</li> </ul> <ol> <li>Check for exact match</li> <li> <p>Apply base class conversions</p> <ul> <li>Reference and pointer types, only</li> </ul> </li> <li> <p>The catch-all handler (...)</p> </li> </ol> <pre><code>Inheritance can be used to structure exceptions\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter13/#using-inheritance","title":"Using inheritance","text":"<pre><code>class MathErr {\n    ...\n    virtual void diagnostic();\n};\nclass OverflowErr : public MathErr { ... }\nclass UnderflowErr : public MathErr { ... }\nclass ZeroDivideErr : public MathErr { ... }\n</code></pre> <ul> <li>Hierarchy of exception types</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#using-handlers","title":"Using handlers","text":"<pre><code>try {\n    // code to exercise math options\n    throw UnderFlowErr();\n} catch (ZeroDivideErr&amp; e) {\n    // handle zero divide case\n} catch (UnderFlowErr&amp; e) {\n    // handle underflow errors\n} catch (MathErr&amp; e) {\n    // handle other math errors\n} catch (...) {\n    // any other exceptions\n}\n</code></pre> <ul> <li>Exception types ordered from special to general</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass MathErr{\nprivate:\n    int data;\npublic:\n    virtual void diagnostic() {}\n};\n\nclass OverflowErr : public MathErr {\n};\n\nclass UnderflowErr : public MathErr {\n};\n\nclass ZeroDivideErr : public MathErr {\n};\n\nint main(){\n    try{\n        throw UnderflowErr();\n    }catch (ZeroDivideErr &amp;e){\n        // ...\n    }catch (MathErr &amp;e){\n        cout &lt;&lt; \"math error caught\" &lt;&lt; endl;\n    }catch (...){\n        // ...\n    }\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>math error caught\n</code></pre> <ul> <li>\u5411\u4e0a\u9020\u578b\u662f\u53ef\u4ee5\u7684\u3002</li> </ul> <ul> <li>\u5982\u679c\u60f3\u8981\u5b8c\u5168\u5339\u914d</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass MathErr{\nprivate:\n    int data;\npublic:\n    virtual void diagnostic() {}\n};\n\nclass OverflowErr : public MathErr {\n};\n\nclass UnderflowErr : public MathErr {\n};\n\nclass ZeroDivideErr : public MathErr {\n};\n\nint main(){\n    try{\n        throw UnderflowErr();\n    }catch (ZeroDivideErr &amp;e){\n        // ...\n    }catch (UnderflowErr &amp;e){\n        cout &lt;&lt; \"underflow error caught\" &lt;&lt; endl;\n    }catch (MathErr &amp;e){\n        cout &lt;&lt; \"math error caught\" &lt;&lt; endl;\n    }catch (...){\n        // ...\n    }\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>underflow error caught\n</code></pre> <ul> <li>\u6362\u4e00\u4e2a\u987a\u5e8f</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass MathErr{\nprivate:\n    int data;\npublic:\n    virtual void diagnostic() {}\n};\n\nclass OverflowErr : public MathErr {\n};\n\nclass UnderflowErr : public MathErr {\n};\n\nclass ZeroDivideErr : public MathErr {\n};\n\nint main(){\n    try{\n        throw UnderflowErr();\n    }catch (ZeroDivideErr &amp;e){\n        // ...\n    }catch (MathErr &amp;e){\n        cout &lt;&lt; \"math error caught\" &lt;&lt; endl;\n    }catch (UnderflowErr &amp;e){\n        cout &lt;&lt; \"underflow error caught\" &lt;&lt; endl;\n    }catch (...){\n        // ...\n    }\n}\n</code></pre> <p>\u4f1a\u6709 warning \u5e76\u4e14\u8f93\u51fa:</p> <pre><code>math error caught\n</code></pre> <ul> <li>\u6240\u4ee5\u8d8a general \u7684\u7c7b\u5e94\u8be5\u653e\u5728\u540e\u9762\u3002</li> <li>\u5f53\u7136\u4e86\uff0c\u5982\u679c\u628a <code>catch ( ... )</code> \u653e\u5728\u6700\u524d\u9762\uff0c\u5c31\u4f1a\u76f4\u63a5\u62a5\u9519\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#standard-library-exceptions","title":"Standard library exceptions","text":""},{"location":"Computer_Science/OOP/Chapter13/#some","title":"Some","text":""},{"location":"Computer_Science/OOP/Chapter13/#exception-and-new","title":"Exception and new","text":"<ul> <li><code>new</code> does NOT returned 0 on failure</li> <li><code>new</code> raises a <code>bad_alloc</code> exception (<code>new</code> \u51fa\u9519\u65f6\u662f\u629b\u51fa\u5f02\u5e38)</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#noexcept-specifier","title":"<code>noexcept</code> specifier","text":"<pre><code>void abc(int a) noexcept { ... }\n</code></pre> <ul> <li> <p>Allow compilers to produce more efficient code</p> <ul> <li>optimize non-throwing functions</li> </ul> </li> <li> <p>\u662f\u4e00\u4e2a\u6807\u8bc6\uff0c\u627f\u8bfa\u8fd9\u4e2a\u51fd\u6570\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6b64\u65f6\u7f16\u8bd1\u5668\u53ef\u4ee5\u505a\u51fa\u76f8\u5e94\u7684\u4f18\u5316\u3002</p> </li> <li>\u52a0\u4e86\u8fd9\u4e2a\u6807\u8bc6\u540e\u4e0d\u662f\u8bf4\u4f1a\u5728\u8fd9\u4e2a\u51fd\u6570\u79cd\u5199\u5f02\u5e38\uff0c\u800c\u662f\u51fd\u6570\u662f\u5c42\u5c42\u8c03\u7528\u7684\uff0c\u8c03\u7528\u7684\u90a3\u4e2a\u51fd\u6570\u53ef\u80fd\u4f1a\u629b\u51fa\u5f02\u5e38\u3002</li> <li>At run time, if an exception is thrown out, the <code>std::terminate</code> is called</li> <li>\u6709\u5f88\u591a\u51fd\u6570\u9700\u8981\u52a0\u8fd9\u4e2a\u4e1c\u897f</li> <li> <p>Who use it:</p> <ul> <li>destructors, move constructors, etc.</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#design-considerations","title":"Design considerations","text":"<ul> <li>Exceptions should indicate errors</li> <li>An inappropriate use:</li> </ul> <pre><code>try {\n    for (;;) {\n        p = list.next()\n        // ... \n    }\n} catch (List::end_of_list) {\n    // handle end of list here\n}\n</code></pre> <ul> <li>\u8fd9\u91cc\u628a\u8d70\u5230\u7ec8\u70b9\u65f6\u8fd0\u7528\u5f02\u5e38\u6765\u5904\u7406\uff0c\u662f\u4e0d\u5408\u9002\u7684\u3002\u56e0\u4e3a\u5f02\u5e38\u662f\u7528\u4e8e\u5904\u7406\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u6b63\u5e38\u7684\u903b\u8f91\u3002</li> <li>\u8fd9\u5f53\u7136\u6ca1\u9519\uff0c\u4f46\u662f\u5f02\u5e38\u5904\u7406\u662f\u6709\u989d\u5916\u7684\u5f00\u9500\u7684\uff0c\u6240\u4ee5\u5982\u679c\u53ea\u662f\u6b63\u5e38\u7684\u903b\u8f91\uff0c\u7528\u5f02\u5e38\u5904\u7406\u662f\u4e0d\u5408\u9002\u7684\u3002</li> <li>Don't use exceptions in place of good design</li> </ul> <pre><code>void func() {\n    File f;\n    if (f.open(\"somefile\")) {\n        try {\n            // work with f\n        } catch (...) {\n            f.close()\n        }\n    }\n}\n</code></pre> <ul> <li>\u8fd9\u79cd\u60c5\u51b5\u5e76\u6ca1\u9519\uff0c\u4f46\u662f\u4e0d\u9700\u8981\u7528\u5f02\u5e38\u6765\u5904\u7406\uff0c\u7528\u6790\u6784\u51fd\u6570\u6765\u5904\u7406\u5373\u53ef\u3002</li> <li>This is a good place to rely on the destructor</li> </ul> <pre><code>void func() {\n    File f(\"some file\");\n    // assume destructor closes f\n    // will still be closed if exception \n    // is raised!\n    if (f.ok()) {\n        /* ... */\n    }\n}\n</code></pre> <ul> <li><code>function</code> \u6b63\u5e38\u7ed3\u675f\u65f6\u4f1a\u8fdb\u884c\u6790\u6784\u51fd\u6570\uff0c\u800c\u5bf9\u4e8e\u5f02\u5e38\u53d1\u751f\u65f6\uff0c\u4f1a\u5f00\u59cb\u9000\u6808\uff0c\u6808\u4e0a\u6709\u5bf9\u5e94\u7684\u6790\u6784\u51fd\u6570\uff0c\u6b64\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u4e0d\u9700\u8981\u7279\u610f\u53bb\u5199\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#summary","title":"Summary","text":"<ul> <li>Error recovery is a hard design problem \u9519\u8bef\u5904\u7406\u603b\u7684\u6765\u8bf4\u8fd8\u662f\u4e00\u4e2a\u8bbe\u8ba1\u7684\u95ee\u9898</li> <li>All subsystems need help from their clients to handle exceptional cases \u5e2e\u52a9\u5ba2\u6237\u7aef\u5904\u7406\u5f02\u5e38\u60c5\u51b5</li> <li> <p>Exceptions provide the mechanism for</p> <ul> <li>Propagating dynamically </li> <li>Destroying objects on stack properly \u6b63\u786e\u5730\u9500\u6bc1\u6808\u4e0a\u7684\u5bf9\u8c61</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#more-exceptions","title":"More exceptions","text":"<ul> <li>Exceptions and constructors</li> <li>Exceptions and destructors</li> <li>Design and usage with exceptions</li> <li>Handlers</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#failure-in-constructors","title":"Failure in constructors","text":"<ul> <li>No return value is possible \u6240\u4ee5\u9519\u8bef\u7801\u80af\u5b9a\u662f\u4e0d\u884c\u7684</li> <li>Use an \"uninitialized flag\" \u4f46\u662f\u8fd9\u6837\u5c31\u9700\u8981\u591a\u5360\u4e00\u4e2a\u7a7a\u95f4\u3002</li> <li>Defer work to an <code>init()</code> function</li> <li>Better -- Throw an exception</li> </ul> <pre><code>void f(){\n    X x;\n\n    Y* p = new Y();\n}\n</code></pre> <ul> <li>\u5982\u679c\u629b\u5f02\u5e38\uff0c<code>x</code> \u53d8\u91cf\u7684\u5185\u5b58\u4e0d\u4f1a\u6cc4\u6f0f\uff0c\u56e0\u4e3a\u662f\u6808\u4e0a\u7684\u5bf9\u8c61\u3002</li> <li>\u5982\u679c\u629b\u5f02\u5e38\uff0c<code>p</code> \u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u4e0d\u4f1a\u6cc4\u6f0f\u3002<code>new</code> \u6709\u4e24\u4e2a\u9636\u6bb5\uff0c\u7b2c\u4e00\u4e2a\u662f\u5206\u914d\u5185\u5b58\uff0c\u7b2c\u4e8c\u4e2a\u662f\u521d\u59cb\u5316\u3002\u5982\u679c\u629b\u5f02\u5e38\uff0c\u4f1a roll back\u3002</li> <li> <p>If your constructor throws an exception:</p> <ul> <li>Dtors for the object won't be called</li> <li> <p>Manually clean up allocated resources before throwing</p> <ul> <li>otherwise memory leak happens</li> </ul> </li> </ul> </li> <li> <p>\u9996\u5148\u8bbe\u8ba1\u8fd9\u6837\u4e00\u4e2a\u6846\u67b6\u3002</p> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A{\nprivate:\n    int * vdata;\npublic:\n    A() : vdata(new int[10]()){\n        cout &lt;&lt; \"A::A()\" &lt;&lt; endl;\n    }\n    ~A(){\n        cout &lt;&lt; \"A::~A()\" &lt;&lt; endl;\n        delete[] vdata;\n        cout &lt;&lt; \"deleting vdata ...\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    A a;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>A::A()\nA::~A()\ndeleting vdata ...\n</code></pre> <ul> <li>\u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u6784\u9020\u5931\u8d25\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A{\nprivate:\n    int * vdata;\npublic:\n    A() : vdata(new int[10]()){\n        cout &lt;&lt; \"A::A()\" &lt;&lt; endl;\n        if(true){ // anything indicating a failure\n            throw 2;\n        }\n    }\n    ~A(){\n        cout &lt;&lt; \"A::~A()\" &lt;&lt; endl;\n        delete[] vdata;\n        cout &lt;&lt; \"deleting vdata\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    try{\n        A a;\n    }catch(...){\n        cout &lt;&lt; \"caught\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>A::A()\ncaught\n</code></pre> <ul> <li>\u6784\u9020\u6ca1\u5b8c\u6210\u5c31\u4e0d\u4f1a\u6709\u6790\u6784\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u6267\u884c\u3002</li> <li>\u6b64\u65f6\u5c31\u8bf4\u660e <code>delete[] vdata;</code> \u5e76\u6ca1\u6709\u6267\u884c\uff0c\u4e5f\u5c31\u662f <code>vdata</code> \u9020\u6210\u4e86\u5185\u5b58\u6cc4\u6f0f\u3002</li> <li>\u8fd9\u79cd\u60c5\u51b5\u5982\u4f55\u5904\u7406\u5462\uff1f</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A{\nprivate:\n    int * vdata;\npublic:\n    A() : vdata(nullptr){\n    //A() : vdata(new int[10]()){\n        cout &lt;&lt; \"A::A()\" &lt;&lt; endl;\n        //if(true){ // anything indicating a failure\n            //throw 2;\n        //}\n    }\n    void init(){\n        cout &lt;&lt; \"A::init()\" &lt;&lt; endl;\n        vdata new int[10]();\n        if(true){\n            throw 2;\n        }\n    }\n    ~A(){\n        cout &lt;&lt; \"A::~A()\" &lt;&lt; endl;\n        delete[] vdata;\n        cout &lt;&lt; \"deleting vdata ...\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    try{\n        A a;\n        a.init();\n    }catch(...){\n        cout &lt;&lt; \"caught\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>A::A()\nA::init()\nA::~A()\ndeleting vdata ...\ncaught\n</code></pre> <ul> <li>\u628a\u8d44\u6e90\u83b7\u53d6\u653e\u5230 <code>init</code> \u51fd\u6570\u91cc\u9762\u3002</li> <li>\u5728 <code>init</code> \u51fd\u6570\u91cc\u9762\uff0c\u5982\u679c\u53d1\u751f\u5f02\u5e38\uff0c\u6b64\u65f6\u5c31\u662f\u9000\u6808\uff0c\u56e0\u4e3a <code>A</code> \u7684\u6784\u9020\u5df2\u7ecf\u5b8c\u6210\u3002</li> <li>\u4f46\u662f\u8fd9\u662f\u4e24\u6bb5\u5f0f\u7684\uff0c\u672c\u6765\u8bf4\u521d\u59cb\u5316\u7684\u8fdb\u884c\u5c31\u5728\u6784\u9020\u51fd\u6570\u91cc\u9762\uff0c\u73b0\u5728\u9700\u8981\u624b\u52a8\u8c03\u7528\u3002</li> </ul> <p>Two stages construction</p> <ul> <li> <p>Do normal work in ctor</p> <ul> <li>Initialize all member objects</li> <li>Initialize all pointers to 0</li> <li> <p>Initialize all pointers to 0</p> <ul> <li>File</li> <li>Network connection</li> <li>Memory</li> </ul> </li> </ul> </li> <li> <p>Defer resource allocations to <code>init()</code></p> </li> <li>\u4e5f\u53ef\u4ee5\u8bd5\u4e00\u4e0b\u4e0d\u7528\u4e24\u6bb5\u5f0f\u5982\u4f55\u505a\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass T{\npublic:\n    T() { cout &lt;&lt; \"T::T()\" &lt;&lt; endl; }\n    ~T() { cout &lt;&lt; \"T::~T()\" &lt;&lt; endl; }\n};\n\nvoid foo(){\n    T t;\n    throw 1;\n}\n\nclass A{\nprivate:\n    int * vdata;\npublic:\n    A() : vdata(new int[10]()){\n        cout &lt;&lt; \"A::A()\" &lt;&lt; endl;\n        if(true){ // anything indicating a failure\n            throw 2;\n        }\n    }\n    ~A(){\n        cout &lt;&lt; \"A::~A()\" &lt;&lt; endl;\n        delete[] vdata;\n        cout &lt;&lt; \"deleting vdata ...\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    try{\n        foo();\n        // A a;\n    }catch(...){\n        cout &lt;&lt; \"caught\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>T::T()\nT::~T()\ncaught\n</code></pre> <ul> <li>\u8fd9\u79cd\u60c5\u51b5\u4e0b <code>T</code> \u7684\u6790\u6784\u662f\u4f1a\u6267\u884c\u7684\u3002</li> <li>\u90a3\u4e48\u6211\u4eec\u5c31\u5229\u7528\u8fd9\u4ef6\u4e8b\u60c5\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass T{\npublic:\n    T() { cout &lt;&lt; \"T::T()\" &lt;&lt; endl; }\n    ~T() { cout &lt;&lt; \"T::~T()\" &lt;&lt; endl; }\n};\n\nclass A{\nprivate:\n    T t;\n    int * vdata;\npublic:\n    A() : vdata(new int[10]()){\n        cout &lt;&lt; \"A::A()\" &lt;&lt; endl;\n        if(true){ // anything indicating a failure\n            throw 2;\n        }\n    }\n    ~A(){\n        cout &lt;&lt; \"A::~A()\" &lt;&lt; endl;\n        delete[] vdata;\n        cout &lt;&lt; \"deleting vdata ...\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    try{\n        A a;\n    }catch(...){\n        cout &lt;&lt; \"caught\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>T::T()\nA::A()\nT::~T()\ncaught\n</code></pre> <ul> <li>\u6b64\u65f6 <code>T</code> \u7684\u6790\u6784\u51fd\u6570\u662f\u4f1a\u6267\u884c\u7684\u3002</li> <li>\u5728 <code>A</code> \u7684\u6784\u9020\u51fd\u6570\u4e2d\u629b\u51fa\u5f02\u5e38\uff0c\u6240\u4ee5 <code>A</code> \u7684\u6784\u9020\u6ca1\u6709\u5b8c\u6210\uff0c\u4f46\u662f <code>T</code> \u662f\u5b83\u7684\u4e00\u4e2a <code>filed</code> \uff0c\u8fd9\u4e2a <code>field</code> \u7167\u7406\u8bf4\u5728 <code>vdata(new int[10]())</code> \u8fd9\u4e2a\u521d\u59cb\u5316\u5217\u8868\u4e2d\u5df2\u7ecf\u5b8c\u6210\u3002\u6240\u4ee5\u5df2\u7ecf\u6784\u9020\u597d\u7684 <code>T</code> \u7684\u6790\u6784\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u3002</li> <li>\u56e0\u6b64\u6211\u4eec\u5229\u7528\u8fd9\u4e2a\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Wrapper{\nprivate:\n    int *vdata;\npublic:\n    Wrapper(int *data) :vdata(data) { \n        cout &lt;&lt; \"W::W()\" &lt;&lt; endl; \n    }\n    ~Wrapper() { \n        delete[] vdata;\n        cout &lt;&lt; \"W::~W(), vdata released!\" &lt;&lt; endl; \n    }\n};\n\nclass A{\nprivate:\n    // int * vdata;\n    Wrapper w;\npublic:\n    A() : w(new int[10]()){\n        cout &lt;&lt; \"A::A()\" &lt;&lt; endl;\n        if(true){ // anything indicating a failure\n            throw 2;\n        }\n    }\n    ~A(){\n        cout &lt;&lt; \"A::~A()\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    try{\n        A a;\n    }catch(...){\n        cout &lt;&lt; \"caught\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>W::W()\nA::A()\nW::~W(), vdata released!\ncaught\n</code></pre> <ul> <li>\u76f8\u5f53\u4e8e <code>new</code> \u51fa\u6765\u7684\u4e1c\u897f\u6254\u7ed9 <code>Wrapper</code> \uff0c\u653e\u5230\u5b57\u6bb5\u4e2d\u53bb\uff0c\u800c\u5b57\u6bb5\u6709\u4e00\u4e2a\u673a\u5236\u662f\u5df2\u7ecf\u6784\u9020\u597d\u4e86\uff0c\u4e00\u65e6\u4e0b\u9762\u53d1\u751f <code>throw</code> \uff0c\u6b64\u65f6\u6790\u6784\u51fd\u6570\u5c31\u4f1a\u8c03\u7528\uff0c\u8981\u88ab\u7ba1\u7684\u5185\u5b58\u5c31\u4f1a\u88ab delete\u3002</li> <li>\u4e5f\u4e0d\u9700\u8981\u7279\u610f\u53bb\u5199\u4e00\u4e2a\u6790\u6784\uff0c\u56e0\u4e3a <code>Wrapper</code> \u7684\u6790\u6784\u4f1a\u5728 <code>A</code> \u7684\u6790\u6784\u4e2d\u88ab\u81ea\u52a8\u8c03\u7528\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Wrapper{\nprivate:\n    int *vdata;\npublic:\n    Wrapper(int *data) :vdata(data) { \n        cout &lt;&lt; \"W::W()\" &lt;&lt; endl; \n    }\n    ~Wrapper() { \n        delete[] vdata;\n        cout &lt;&lt; \"W::~W(), vdata released!\" &lt;&lt; endl; \n    }\n};\n\nclass A{\nprivate:\n    // int * vdata;\n    Wrapper w;\npublic:\n    A() : w(new int[10]()){\n        cout &lt;&lt; \"A::A()\" &lt;&lt; endl;\n        // if(true){ // anything indicating a failure\n        //     throw 2;\n        // }\n    }\n    ~A(){\n        cout &lt;&lt; \"A::~A()\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    // try{\n        A a;\n    // }catch(...){\n        // cout &lt;&lt; \"caught\" &lt;&lt; endl;\n    // }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>W::W()\nA::A()\nA::~A()\nW::~W(), vdata released!\n</code></pre> <ul> <li>\u6240\u4ee5\u5c31\u662f\u4e0d\u5f71\u54cd\u6b63\u5e38\u4f7f\u7528\u3002</li> <li>\u7531\u4e8e\u8fd9\u4e2a\u8fc7\u4e8e\u5e38\u7528\uff0c\u6240\u4ee5\u6807\u51c6\u5e93\u4e2d\u6709\u4e00\u4e2a <code>memory</code> \u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nclass A{\nprivate:\n    unique_ptr&lt;int[]&gt; up;\npublic:\n    A() : up(new int[10]()){\n        cout &lt;&lt; \"A::A()\" &lt;&lt; endl;\n        if(true){ // anything indicating a failure\n            throw 2;\n        }\n    }\n    ~A(){\n        cout &lt;&lt; \"A::~A()\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    try{\n        A a;\n    }catch(...){\n        cout &lt;&lt; \"caught\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>A::A()\ncaught\n</code></pre> <ul> <li>\u6b64\u65f6\u8dd1\u5c31\u770b\u4e0d\u5230 <code>release</code> \u8fd9\u53e5\u8bdd\u4e86\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5c01\u88c5\u5728 <code>unique_ptr</code> \u91cc\u9762\u4e86\u3002</li> <li>\u4e5f\u5c31\u662f\u8bf4 <code>unique_ptr&lt;int[]&gt; up;</code> \u8fd9\u662f\u4e00\u4e2a\u5b57\u6bb5\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u4f1a\u4fdd\u8bc1\u5b83\u5b58\u7684\u90a3\u4e2a\u88f8\u6307\u9488\u4f1a\u88ab\u91ca\u653e\u3002</li> </ul> <p>Using smart pointers:</p> <ul> <li><code>std::unique_ptr</code></li> <li><code>std::shared_ptr</code></li> <li>The destructors will delete the managed native pointers when they die.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#exceptions-and-destructors","title":"Exceptions and destructors","text":"<ul> <li> <p>Destructors are called when:</p> <ul> <li> <p>Normal call ends</p> <ul> <li>object exits from scope</li> </ul> </li> <li> <p>Exception is throwed</p> <ul> <li>stack unwinding invokes dtors on objects as they exit from scope. \u4e0e\u51fd\u6570\u8c03\u7528\u7ed3\u675f\u7684\u9000\u6808\u7c7b\u4f3c\u3002</li> </ul> </li> </ul> </li> </ul> <pre><code>What happens if an exception is thrown in a destructor?\n</code></pre> <ul> <li>\u53ef\u80fd\u4f1a\u975e\u5e38\u7cdf\u7cd5\uff0c\u56e0\u4e3a destructor \u53ef\u80fd\u672c\u6765\u5c31\u662f\u5728\u5f02\u5e38\u629b\u51fa\u65f6\u88ab\u8c03\u7528\u7684\uff0c\u6b64\u65f6\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u5f02\u5e38\u8fd8\u6ca1\u6709\u7ed3\u675f\u53c8\u6709\u4e00\u4e2a\u4e86\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u4e8b\u4f1a\u76f4\u63a5\u8c03\u7528 <code>std::terminate</code>() \uff0c\u56e0\u4e3a\u5df2\u7ecf\u65e0\u6cd5\u5904\u7406\u4e86\u3002</li> <li>Throwing an exception in a destructor that is itself being called as the result of an exception will invoke <code>std::terminate()</code> .</li> <li>Allowing exceptions to escape from destructors should be avoided, never throw it!</li> <li>\u6240\u4ee5\u6211\u4eec\u4e00\u822c\u4e0d\u5728 destructor \u91cc\u9762\u629b\u51fa\u5f02\u5e38\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#programming-with-exceptions","title":"Programming with exceptions","text":"<ul> <li>Throwing/catching by value leads to slicing:</li> <li>\u503c\u4f20\u9012\u53ef\u80fd\u4f1a\u6709 slicing \u7684\u95ee\u9898\uff0c\u800c\u4e14\u8fd8\u6709\u62f7\u8d1d\u7684\u4ee3\u4ef7\u3002</li> </ul> <pre><code>struct X {};\nstruct Y : public X {};\ntry {\n    throw Y();\n} catch(X x) {\n    // was it X or Y?\n}\n</code></pre> <ul> <li>Throwing/catching by pointer introduces coupling between regular code and handler code:</li> <li>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6307\u9488\uff0c\u4f46\u662f\u9700\u8981\u624b\u52a8\u5730\u53bb delete</li> </ul> <pre><code>try {\n    throw new Y();\n} catch(Y* p) {\n    // whoops, forgot to delete..\n}\n</code></pre> <ul> <li>Prefer catching exceptions by reference:</li> <li>\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u7528\u5f15\u7528\u6bd4\u8f83\u591a\uff0c\u800c\u5f15\u7528\u4e5f\u662f\u53ef\u4ee5\u5411\u4e0a\u9020\u578b\u7684\u3002</li> </ul> <pre><code>struct B {\n    virtual void print() { /* ... */ }\n};\nstruct D : public B { /* ... */ };\ntry {\n    throw D(\"D error\");\n}\ncatch(B&amp; b) {\n    b.print(); // print D's error.\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter13/#exceptions-wrap-up","title":"Exceptions wrap-up","text":"<ul> <li>Develop an error-handling strategy early in design</li> <li> <p>Avoid over-use of try/catch blocks</p> <ul> <li>Use objects to acquire/release resources, RAII</li> </ul> </li> <li> <p>Don't use exceptions where local control structures would suffice</p> </li> <li>Not every function is designed to handle every type of error</li> <li>Use exception-specifications for major interfaces</li> <li> <p>Library code better not to decide to terminate a program</p> <ul> <li>Throw exceptions and let the caller decide</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter13/#uncaught-exceptions","title":"Uncaught exceptions","text":"<ul> <li>If an exception is thrown but not caught, <code>std::terminate()</code> will be called.</li> <li>The <code>std::terminate()</code> can also be intercepted. \u53ef\u4ee5\u81ea\u5df1\u5b9a\u5236</li> </ul> <pre><code>void my_terminate() {\n    /* ... */\n}\nset_terminate(my_terminate);\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter13/#write-exception-safe-code","title":"Write exception-safe code","text":"<pre><code>class BankAccount {\n    /* ... */\n    void withdrawMoney(int amount) {\n    reduceBalance(amount); // Balance already reduced!\n    prepareCash(); // Throws an exception!\n    releaseCash();\n    }\n    /* ... */\n};\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nclass Resource {\npublic:\n    Resource() = default;\n    Resource(const Resource &amp;r) {\n        throw runtime_error(\"Resource Copy Ctor\");\n    }\n};\n\nclass Widget {\nprivate:\n    int i;\n    string s;\n    Resource *pr;\npublic:\n    Widget() : i(0), pr(new Resource) {}\n    ~Widget() { delete pr; }\n\n    Widget(const Widget &amp;w) : i(w.i), s(w.s){\n        if(w.pr) pr = new Resource(*w.pr); // \u62f7\u8d1d\u6784\u9020\n        else pr = nullptr;\n    }\n\n    Widget &amp;operator=(const Widget &amp;w) {\n        if(this == &amp;w) return *this;\n\n        i = w.i;\n        s = w.s;\n        delete pr;  // \u539f\u6765\u53ef\u80fd\u4e0d\u662f\u7a7a\u7684\uff0c\u8981\u5148\u5220\u6389\u624d\u80fd\u66f4\u6539\n\n        if(w.pr) pr = new Resource(*w.pr); // \u62f7\u8d1d\u8d4b\u503c\n        else pr = nullptr;\n\n        return *this;\n    }\n};\n\nint main(){\n    Widget w1;\n    // Widget w2(w1); // Copy constructor\n    Widget w3;\n    // w3 = w1; // Copy assignment operator\n    try{\n        w3 = w1;\n    }catch(const runtime_error &amp;e){\n        cout &lt;&lt; e.what() &lt;&lt; endl;\n    }\n    // use w3 ...\n}\n</code></pre> <ul> <li>\u5728 copy ctor \u4e2d\u629b\u51fa\u5f02\u5e38\u6240\u4ee5 <code>w2</code> \u6ca1\u6709\u88ab\u521b\u5efa\u51fa\u6765\uff0c\u4f46\u662f <code>w3</code> \u5df2\u7ecf\u6784\u9020\u5b8c\u6210\u4e86\u7684\u3002</li> <li>\u4e5f\u5c31\u662f\u8bf4 <code>delete</code> \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u7a7a\u95f4\u88ab\u6536\u56de\u53bb\u4e86\uff0c\u6240\u4ee5\u51fa\u73b0\u4e86 <code>dangling pointer</code> (\u60ac\u6302\u6307\u9488)\u3002</li> <li>\u8fd9\u5c31\u4e0d\u662f\u5bf9\u4e8e\u5f02\u5e38\u6765\u8bf4\u5b89\u5168\u7684\u72b6\u6001\u3002\u53ef\u4ee5\u6539\u6210 <code>delete pr; pr = nullptr;</code>\uff0c\u8fd9\u6837\u5373\u4f7f\u629b\u51fa\u5f02\u5e38\uff0c<code>pr</code> \u4e5f\u4e0d\u4f1a\u6307\u5411\u4e00\u4e2a\u5df2\u7ecf\u88ab\u5220\u9664\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u6b64\u65f6 <code>pr</code> \u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684\u72b6\u6001\u4e86\uff0c\u56e0\u4e3a <code>pr</code> \u4e2d <code>s</code> \u548c <code>i</code> \u88ab copy \u8d4b\u503c\u8fc7\uff0c\u4f46\u662f\u81ea\u5df1\u662f nullptr\u3002</li> <li>\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nclass Resource {\npublic:\n    Resource() = default;\n    Resource(const Resource &amp;r) {\n        throw runtime_error(\"Resource Copy Ctor\");\n    }\n};\n\nclass Widget {\nprivate:\n    int i;\n    string s;\n    unique_ptr&lt;Resource&gt; pr;\npublic:\n    Widget() : i(0), pr(new Resource) {}\n\n    Widget(const Widget &amp;w) : i(w.i), s(w.s){\n        if(w.pr) pr = make_unique&lt;Resource&gt;(*w.pr);\n    }\n\n    Widget &amp;operator=(const Widget &amp;w) {\n        Widget tmp(w);\n        *this = std::move(tmp);\n\n        return *this;\n    }\n\n    Widget &amp;operator=(Widget &amp;&amp;w) noexcept = default;\n};\n\nint main(){\n    Widget w1;\n    Widget w3;\n    try{\n        w3 = w1;\n    }catch(const runtime_error &amp;e){\n        cout &lt;&lt; e.what() &lt;&lt; endl;\n    }\n    // use w3 ...\n}\n</code></pre> about Widget &amp;operator=(Widget &amp;&amp;w) noexcept = default; <p>\u8fd9\u53e5\u4ee3\u7801\u5b9a\u4e49\u7684\u662f <code>Widget</code> \u7c7b\u7684\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 (Move Assignment Operator)\u3002</p> <ol> <li> <p><code>Widget &amp;operator=(...)</code>: \u8fd9\u8868\u660e\u8fd9\u662f\u4e00\u4e2a\u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a <code>Widget&amp;</code> \u5f15\u7528\uff08\u901a\u5e38\u662f <code>*this</code>\uff09\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u8fdb\u884c\u94fe\u5f0f\u8d4b\u503c\uff08\u4f8b\u5982 <code>a = b = c;</code>\uff09\u3002</p> </li> <li> <p><code>&amp;&amp;</code> \u662f\u5173\u952e\u90e8\u5206\uff0c\u5b83\u8868\u793a\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u3002\u53f3\u503c\u5f15\u7528\u4e3b\u8981\u7528\u4e8e\u7ed1\u5b9a\u5230\u4e34\u65f6\u5bf9\u8c61\u6216\u90a3\u4e9b\u5373\u5c06\u88ab\u9500\u6bc1\u7684\u5bf9\u8c61\u3002\u5f53\u8d4b\u503c\u64cd\u4f5c\u7684\u53f3\u4fa7\u662f\u4e00\u4e2a\u53f3\u503c\uff08\u4f8b\u5982\u4e34\u65f6\u5bf9\u8c61\u6216\u8005\u901a\u8fc7 <code>std::move</code> \u8f6c\u6362\u7684\u5bf9\u8c61\uff09\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u9009\u62e9\u8c03\u7528\u8fd9\u4e2a\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002</p> </li> <li> <p><code>noexcept</code>: \u8fd9\u662f\u4e00\u4e2a\u5f02\u5e38\u89c4\u8303\u3002\u5b83\u58f0\u660e\u8fd9\u4e2a\u51fd\u6570\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u5bf9\u4e8e\u79fb\u52a8\u64cd\u4f5c\u6765\u8bf4\uff0c\u901a\u5e38\u4f1a\u58f0\u660e\u4e3a <code>noexcept</code>\uff0c\u56e0\u4e3a\u5982\u679c\u5728\u79fb\u52a8\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6e90\u5bf9\u8c61\u5904\u4e8e\u4e00\u79cd\u4e0d\u786e\u5b9a\u6216\u65e0\u6548\u7684\u72b6\u6001\uff0c\u800c\u76ee\u6807\u5bf9\u8c61\u4e5f\u6ca1\u6709\u5b8c\u6574\u5730\u83b7\u5f97\u8d44\u6e90\uff0c\u8fd9\u5f88\u96be\u5904\u7406\u3002</p> </li> <li> <p><code>= default;</code>: \u5b83\u544a\u8bc9\u7f16\u8bd1\u5668\u4e3a\u8fd9\u4e2a\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570\uff08\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\uff09\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5b9e\u73b0\u3002\u7f16\u8bd1\u5668\u751f\u6210\u7684\u9ed8\u8ba4\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\u4f1a\u5bf9\u5176\u6210\u5458\u8fdb\u884c\u9010\u4e2a\u79fb\u52a8\u3002</p> </li> </ol> <p>\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\u5229\u7528\u4e86\u53f3\u503c\u5f15\u7528\u7684\u7279\u6027\u3002\u5f53\u6e90\u5bf9\u8c61\u662f\u53f3\u503c\u65f6\uff0c\u6211\u4eec\u77e5\u9053\u5b83\u5373\u5c06\u88ab\u9500\u6bc1\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\"\u5077\u53d6\"\u5b83\u7684\u8d44\u6e90\uff0c\u800c\u4e0d\u662f\u8fdb\u884c\u6602\u8d35\u7684\u6df1\u62f7\u8d1d\u3002\u5bf9\u4e8e <code>unique_ptr</code> \u6210\u5458 <code>pr</code>\uff0c\u9ed8\u8ba4\u7684\u79fb\u52a8\u8d4b\u503c\u5b9e\u73b0\u5c31\u662f\u5c06\u6e90 <code>unique_ptr</code> \u4e2d\u7684\u88f8\u6307\u9488\u8f6c\u79fb\u7ed9\u76ee\u6807 <code>unique_ptr</code>\uff0c\u5e76\u5c06\u6e90 <code>unique_ptr</code> \u7f6e\u4e3a\u7a7a\u3002\u8fd9\u6837\u5c31\u9ad8\u6548\u5730\u5b8c\u6210\u4e86\u8d44\u6e90\u7684\u8f6c\u79fb\uff0c\u907f\u514d\u4e86\u521b\u5efa\u65b0\u7684 <code>Resource</code> \u5bf9\u8c61\u548c\u590d\u5236\u6570\u636e\u3002</p> <p><code>*this = std::move(tmp);</code> \u8fd9\u4e00\u884c\u3002\u5f53\u7b49\u53f7\u53f3\u8fb9\u662f\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u65f6 (<code>std::move(tmp)</code> \u7684\u7ed3\u679c)\uff0cC++ \u4f1a\u67e5\u627e\u5e76\u8c03\u7528\u6700\u5339\u914d\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u800c\u6700\u5339\u914d\u7684\u5c31\u662f\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 <code>Widget &amp;operator=(Widget &amp;&amp;w)</code>\u3002</p>"},{"location":"Computer_Science/OOP/Chapter14/","title":"Chapter 14 | Smart Pointers","text":"<p> \u7ea6 3430 \u4e2a\u5b57  1246 \u884c\u4ee3\u7801  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 33 \u5206\u949f</p>"},{"location":"Computer_Science/OOP/Chapter14/#standard-smart-pointers","title":"Standard smart pointers","text":"<p>Standard library holder for raw pointers</p> <ul> <li><code>std::unique_ptr</code></li> <li><code>std::shared_ptr</code></li> <li><code>std::weak_ptr</code></li> <li><code>std::auto_ptr</code> (deprecated in C++11)</li> </ul>"},{"location":"Computer_Science/OOP/Chapter14/#put-them-all-together","title":"Put them all together","text":"<ul> <li>Templates</li> <li>Inheritance</li> <li>Reference Counting</li> <li>eSmart Pointers</li> </ul> <pre><code>C++ Strategies and Tactics, Robert Murray,1993\n</code></pre> Garbage Collection <p>\u5783\u573e\u56de\u6536\u673a\u5236\u662f\u4e00\u79cd\u81ea\u52a8\u5316\u7684\u5185\u5b58\u7ba1\u7406\u6280\u672f\u3002\u5728\u652f\u6301\u5783\u573e\u56de\u6536\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u4e0d\u9700\u8981\u624b\u52a8\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002\u8fd0\u884c\u65f6\u73af\u5883\u4f1a\u81ea\u52a8\u68c0\u6d4b\u4e0d\u518d\u88ab\u7a0b\u5e8f\u4f7f\u7528\u7684\u5185\u5b58\uff08\u5373\"\u5783\u573e\"\uff09\uff0c\u5e76\u5c06\u5176\u56de\u6536\u4ee5\u4fbf\u91cd\u65b0\u5229\u7528\u3002</p> <p>C++ \u672c\u8eab\u5e76\u6ca1\u6709\u5185\u7f6e\u7684\u5783\u573e\u56de\u6536\u673a\u5236\u3002\u8fd9\u662f\u56e0\u4e3a C++ \u7684\u8bbe\u8ba1\u54f2\u5b66\u662f\u63d0\u4f9b\u5bf9\u786c\u4ef6\u7684\u5e95\u5c42\u63a7\u5236\u548c\u6700\u5927\u7684\u6027\u80fd\u3002C++ \u91c7\u7528\u4e86\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u65b9\u5f0f\uff0c\u7a0b\u5e8f\u5458\u4f7f\u7528 <code>new</code> \u6765\u5206\u914d\u5185\u5b58\uff0c\u4f7f\u7528 <code>delete</code> \u6765\u91ca\u653e\u5185\u5b58\u3002\u8fd9\u79cd\u65b9\u5f0f\u63d0\u4f9b\u4e86\u9ad8\u5ea6\u7684\u7075\u6d3b\u6027\u548c\u6027\u80fd\uff0c\u4f46\u4e5f\u5e26\u6765\u4e86\u5185\u5b58\u6cc4\u6f0f\uff08\u5fd8\u8bb0\u91ca\u653e\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff09\u548c\u91ce\u6307\u9488\uff08\u6307\u5411\u5df2\u91ca\u653e\u5185\u5b58\u7684\u6307\u9488\uff09\u7b49\u98ce\u9669\u3002</p> <p>\u867d\u7136 C++ \u6807\u51c6\u672c\u8eab\u6ca1\u6709\u5783\u573e\u56de\u6536\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\u6307\u9488\uff08\u5982 <code>std::unique_ptr</code> \u548c <code>std::shared_ptr</code>\uff09\u6765\u5e2e\u52a9\u7ba1\u7406\u5185\u5b58\uff0c\u5b83\u4eec\u901a\u8fc7 RAII\uff08Resource Acquisition Is Initialization\uff09\u539f\u5219\uff0c\u5728\u5bf9\u8c61\u8d85\u51fa\u4f5c\u7528\u57df\u65f6\u81ea\u52a8\u91ca\u653e\u5176\u7ba1\u7406\u7684\u8d44\u6e90\uff0c\u4ece\u800c\u51cf\u5c11\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u8d1f\u62c5\u548c\u9519\u8bef\u3002\u6b64\u5916\uff0c\u4e5f\u6709\u7b2c\u4e09\u65b9\u5e93\u4e3a C++ \u63d0\u4f9b\u4e86\u5783\u573e\u56de\u6536\u7684\u529f\u80fd\uff0c\u4f46\u8fd9\u4e9b\u4e0d\u662f\u6807\u51c6 C++ \u7684\u4e00\u90e8\u5206\u3002</p> RAII <p>RAII \u7684\u5168\u79f0\u662f Resource Acquisition Is Initialization\uff0c\u4e2d\u6587\u53ef\u4ee5\u7406\u89e3\u4e3a\u8d44\u6e90\u83b7\u53d6\u5373\u521d\u59cb\u5316\u3002\u8fd9\u662f\u4e00\u79cd\u5728 C++ \u4e2d\uff08\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u5177\u6709\u786e\u5b9a\u6027\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7684\u8bed\u8a00\u4e2d\uff09\u7528\u4e8e\u7ba1\u7406\u8d44\u6e90\u7684\u7f16\u7a0b\u6280\u672f\uff0c\u8fd9\u4e9b\u8d44\u6e90\u5305\u62ec\u5185\u5b58\u3001\u6587\u4ef6\u53e5\u67c4\u3001\u7f51\u7edc\u5957\u63a5\u5b57\u6216\u9501\u7b49\u7b49\u3002</p> <p>RAII \u7684\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u8d44\u6e90\u7684\u751f\u547d\u5468\u671f\u4e0e\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ed1\u5b9a\u5728\u4e00\u8d77\u3002</p> <p>\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a</p> <ol> <li>\u8d44\u6e90\u83b7\u53d6\uff1a \u5728\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u4e2d\u83b7\u53d6\u8d44\u6e90\u3002\u5982\u679c\u8d44\u6e90\u83b7\u53d6\u5931\u8d25\uff0c\u6784\u9020\u51fd\u6570\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\u3002</li> <li>\u521d\u59cb\u5316\uff1a \u73b0\u5728\u5bf9\u8c61\u8d1f\u8d23\u7ba1\u7406\u8fd9\u4e2a\u8d44\u6e90\u3002</li> <li>\u8d44\u6e90\u91ca\u653e\uff1a \u5f53\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\uff08\u65e0\u8bba\u662f\u8d85\u51fa\u4f5c\u7528\u57df\u3001\u88ab\u663e\u5f0f\u5220\u9664\uff0c\u8fd8\u662f\u56e0\u4e3a\u5f02\u5e38\uff09\uff0c\u6790\u6784\u51fd\u6570\u4f1a\u81ea\u52a8\u91ca\u653e\u8d44\u6e90\u3002</li> </ol> <p>\u8fd9\u79cd\u65b9\u6cd5\u4fdd\u8bc1\u4e86\u65e0\u8bba\u5bf9\u8c61\u751f\u547d\u5468\u671f\u5982\u4f55\u7ed3\u675f\uff08\u6b63\u5e38\u9000\u51fa\u4f5c\u7528\u57df\u3001\u51fd\u6570\u8fd4\u56de\u6216\u5f02\u5e38\u53d1\u751f\uff09\uff0c\u8d44\u6e90\u90fd\u4f1a\u88ab\u91ca\u653e\u3002\u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u8d44\u6e90\u6cc4\u9732\u3002</p> <p>\u667a\u80fd\u6307\u9488\uff0c\u6bd4\u5982 std::unique_ptr \u548c std::shared_ptr\uff0c\u5c31\u662f RAII \u7684\u5178\u578b\u4f8b\u5b50\u3002\u5b83\u4eec\u5728\u6784\u9020\u51fd\u6570\u4e2d\u83b7\u53d6\u5185\u5b58\uff0c\u5e76\u5728\u5bf9\u8c61\u8d85\u51fa\u4f5c\u7528\u57df\u65f6\uff0c\u901a\u8fc7\u6790\u6784\u51fd\u6570\u81ea\u52a8\u91ca\u653e\u5185\u5b58\uff08\u8c03\u7528 delete\uff09\u3002</p> <p>\u5728 C++ \u4e2d\uff0c\u5f53\u4f60\u4f7f\u7528 <code>new</code> \u6765\u52a8\u6001\u5730\u5728\u5806\u4e0a\u5206\u914d\u4e00\u5757\u5185\u5b58\u65f6\uff0c\u4f60\u9700\u8981\u8d1f\u8d23\u5728\u4e0d\u518d\u9700\u8981\u8fd9\u5757\u5185\u5b58\u65f6\u4f7f\u7528 <code>delete</code> \u624b\u52a8\u91ca\u653e\u5b83\u3002\u5982\u679c\u5fd8\u8bb0 <code>delete</code>\uff0c\u5c31\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u9732\u3002</p> <p>\u667a\u80fd\u6307\u9488\uff08\u6bd4\u5982 unique_ptr \u548c shared_ptr\uff09\u901a\u8fc7 RAII \u7684\u673a\u5236\uff0c\u81ea\u52a8\u5728\u5b83\u4eec\u6240\u6307\u5411\u7684\u5bf9\u8c61\u4e0d\u518d\u9700\u8981\u65f6\uff08\u901a\u5e38\u662f\u667a\u80fd\u6307\u9488\u5bf9\u8c61\u8d85\u51fa\u4f5c\u7528\u57df\u65f6\uff09\u8c03\u7528 <code>delete</code> \u6765\u91ca\u653e\u5185\u5b58\u3002\u8fd9\u6837\uff0c\u7a0b\u5e8f\u5458\u5c31\u4e0d\u9700\u8981\u624b\u52a8\u53bb\u8bb0\u4f4f\u4ec0\u4e48\u65f6\u5019\u8c03\u7528 delete\uff0c\u4ece\u800c\u5927\u5927\u7b80\u5316\u4e86\u5185\u5b58\u7ba1\u7406\uff0c\u51cf\u5c11\u4e86\u5185\u5b58\u6cc4\u9732\u7684\u98ce\u9669\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u7b80\u5316\u7ba1\u7406\u3002</p> <ul> <li>\u624b\u52a8\u7ba1\u7406</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed: \" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    {   \n        Resource *p = new Resource;\n        delete p;\n    }\n}\n</code></pre> <ul> <li>\u800c\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u7b80\u5316\u8fd9\u4e2a\u4e8b\u60c5</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    {\n        // unique_ptr&lt;Resource&gt; p = new Resource; ERROR!\n        unique_ptr&lt;Resource&gt; p(new Resource);\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Resource destroyed\n\nbefore quit ...\n</code></pre> <ul> <li>\u667a\u80fd\u6307\u9488\u4e0d\u80fd\u9690\u5f0f\u8f6c\u6362\u3002</li> </ul> \u539f\u56e0 <p>\u667a\u80fd\u6307\u9488\uff08\u5c24\u5176\u662f <code>std::unique_ptr</code> \u548c <code>std::shared_ptr</code>\uff09\u4e0d\u652f\u6301\u9690\u5f0f\u8f6c\u6362\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u907f\u514d\u8d44\u6e90\u7ba1\u7406\u4e0a\u7684\u9677\u9631\u548c\u9519\u8bef\uff0c\u4f8b\u5982\u53cc\u91cd\u91ca\u653e\uff08double deletion\uff09\u548c\u60ac\u5782\u6307\u9488\uff08dangling pointer\uff09\u3002</p> <ol> <li> <p>\u6240\u6709\u6743\u8bed\u4e49\uff08Ownership Semantics\uff09\uff1a</p> <ul> <li><code>std::unique_ptr</code> \u8868\u793a\u72ec\u5360\u6240\u6709\u6743\uff0c\u540c\u4e00\u4e2a\u539f\u59cb\u6307\u9488\u4e0d\u80fd\u88ab\u591a\u4e2a <code>unique_ptr</code> \u7ba1\u7406\u3002\u5982\u679c\u5141\u8bb8\u9690\u5f0f\u8f6c\u6362\uff0c\u6bd4\u5982\u5c06\u4e00\u4e2a\u539f\u59cb\u6307\u9488\u9690\u5f0f\u8f6c\u6362\u4e3a <code>unique_ptr</code>\uff0c\u6216\u8005\u5728 <code>unique_ptr</code> \u4e4b\u95f4\u8fdb\u884c\u9690\u5f0f\u8d4b\u503c\u6216\u590d\u5236\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u591a\u4e2a <code>unique_ptr</code> \u8ba4\u4e3a\u81ea\u5df1\u62e5\u6709\u540c\u4e00\u4e2a\u8d44\u6e90\uff0c\u6700\u7ec8\u5728\u6790\u6784\u65f6\u5c1d\u8bd5\u591a\u6b21\u91ca\u653e\u540c\u4e00\u5757\u5185\u5b58\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u6216\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</li> <li><code>std::shared_ptr</code> \u8868\u793a\u5171\u4eab\u6240\u6709\u6743\uff0c\u4f46\u5b83\u7684\u5171\u4eab\u662f\u901a\u8fc7\u5f15\u7528\u8ba1\u6570\u6765\u7ba1\u7406\u7684\u3002\u9690\u5f0f\u8f6c\u6362\u53ef\u80fd\u4f1a\u7ed5\u8fc7\u5f15\u7528\u8ba1\u6570\u7684\u6b63\u786e\u66f4\u65b0\uff0c\u5bfc\u81f4\u8ba1\u6570\u4e0d\u51c6\u786e\uff0c\u8fdb\u800c\u5f15\u53d1\u8fc7\u65e9\u91ca\u653e\u6216\u5185\u5b58\u6cc4\u9732\u3002</li> </ul> </li> <li> <p>\u9632\u6b62\u53cc\u91cd\u91ca\u653e\uff08Preventing Double Deletion\uff09\uff1a \u8fd9\u662f\u6700\u5173\u952e\u7684\u539f\u56e0\u3002\u8003\u8651\u4ee5\u4e0b\u573a\u666f\uff08\u5982\u679c\u5141\u8bb8\u9690\u5f0f\u8f6c\u6362\uff09\uff1a</p> <pre><code>Resource* raw_ptr = new Resource(10);\nunique_ptr&lt;Resource&gt; p1 = raw_ptr; // \u5047\u8bbe\u8fd9\u91cc\u5141\u8bb8\u9690\u5f0f\u8f6c\u6362\nunique_ptr&lt;Resource&gt; p2 = raw_ptr; // \u518d\u6b21\u9690\u5f0f\u8f6c\u6362\u540c\u4e00\u4e2a\u539f\u59cb\u6307\u9488\n</code></pre> <p>\u5f53 p1 \u548c p2 \u8d85\u51fa\u4f5c\u7528\u57df\u65f6\uff0c\u5b83\u4eec\u90fd\u4f1a\u5c1d\u8bd5 delete raw_ptr \u6307\u5411\u7684\u5185\u5b58\uff0c\u5bfc\u81f4\u53cc\u91cd\u91ca\u653e\u9519\u8bef\u3002</p> <p>\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\uff0c<code>unique_ptr</code> \u7684\u6784\u9020\u51fd\u6570\u548c\u8d4b\u503c\u8fd0\u7b97\u7b26\u88ab\u8bbe\u8ba1\u4e3a <code>explicit</code> \u6216\u7981\u6b62\u62f7\u8d1d\u3002\u4f60\u9700\u8981\u663e\u5f0f\u5730\u4f7f\u7528 <code>std::move</code> \u6765\u8f6c\u79fb\u6240\u6709\u6743\uff0c\u6216\u8005\u4f7f\u7528\u5408\u9002\u7684\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u667a\u80fd\u6307\u9488\u3002</p> </li> <li> <p>\u660e\u786e\u610f\u56fe\uff08Explicit Intent\uff09\uff1a \u4e0d\u5141\u8bb8\u9690\u5f0f\u8f6c\u6362\u8feb\u4f7f\u7a0b\u5e8f\u5458\u663e\u5f0f\u5730\u8868\u8fbe\u4ed6\u4eec\u7684\u610f\u56fe\u3002\u5f53\u4f60\u5728\u4f7f\u7528\u539f\u59cb\u6307\u9488\u6216\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\u4e4b\u95f4\u8f6c\u6362\u65f6\uff0c\u4f60\u9700\u8981\u6e05\u695a\u5730\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u6240\u6709\u6743\u662f\u5982\u4f55\u8f6c\u79fb\u6216\u5171\u4eab\u7684\u3002\u8fd9\u79cd\u663e\u5f0f\u6027\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u548c\u5b89\u5168\u6027\u3002</p> </li> <li> <p>\u907f\u514d\u60ac\u5782\u6307\u9488\uff08Avoiding Dangling Pointers\uff09\uff1a \u9690\u5f0f\u8f6c\u6362\u4e5f\u53ef\u80fd\u66f4\u5bb9\u6613\u4ea7\u751f\u60ac\u5782\u6307\u9488\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u539f\u59cb\u6307\u9488\u88ab\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u667a\u80fd\u6307\u9488\uff0c\u800c\u539f\u59cb\u6307\u9488\u672c\u8eab\u6ca1\u6709\u88ab\u7f6e\u7a7a\uff0c\u90a3\u4e48\u539f\u59cb\u6307\u9488\u5c31\u53ef\u80fd\u53d8\u6210\u4e00\u4e2a\u60ac\u5782\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u6307\u5411\u7684\u5185\u5b58\u53ef\u80fd\u4f1a\u5728\u667a\u80fd\u6307\u9488\u91ca\u653e\u8d44\u6e90\u540e\u88ab\u56de\u6536\u3002\u667a\u80fd\u6307\u9488\u7684\u8bbe\u8ba1\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002</p> </li> </ol> <ul> <li>\u800c <code>p</code> \u8fd9\u4e2a\u4e1c\u897f\u4e5f\u53ef\u4ee5\u53bb\u4f7f\u7528\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    {\n        unique_ptr&lt;Resource&gt; p(new Resource);\n        cout &lt;&lt; \"p-&gt;data = \" &lt;&lt; p-&gt;data &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>p-&gt;data = 0\nResource destroyed\n\nbefore quit ...\n</code></pre> <ul> <li><code>std::unique_ptr</code> \u7981\u6b62\u62f7\u8d1d\u3002</li> <li><code>std::unique_ptr</code> \u6307\u5411\u5e76\u7ba1\u7406\u7740\u4e00\u5757\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u8d44\u6e90\u3002\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u90fd\u53ea\u80fd\u6709\u4e00\u4e2a <code>std::unique_ptr</code> \u6307\u5411\u5e76\"\u62e5\u6709\"\u8fd9\u4e2a\u8d44\u6e90\u3002\u5f53\u8fd9\u4e2a <code>std::unique_ptr</code>\u88ab\u9500\u6bc1\u65f6\uff08\u4f8b\u5982\uff0c\u79bb\u5f00\u4e86\u5b83\u6240\u5728\u7684\u4f5c\u7528\u57df {}\uff09\uff0c\u5b83\u4f1a\u81ea\u52a8\u91ca\u653e\u5176\u6240\u7ba1\u7406\u7684\u8d44\u6e90\u3002</li> <li>\u5982\u679c\u5141\u8bb8\u62f7\u8d1d\uff0c\u90a3\u4e48 <code>p1</code> \u548c <code>p2</code> \u5c06\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u5730\u5740\u3002\u73b0\u5728\u6211\u4eec\u5c31\u6709\u4e24\u4e2a <code>unique_ptr</code> \u58f0\u79f0\u81ea\u5df1\u62e5\u6709\u540c\u4e00\u4e2a\u8d44\u6e90\u3002\u8fd9\u5c31\u76f4\u63a5\u8fdd\u53cd\u4e86\"\u72ec\u5360\"\u7684\u539f\u5219\u3002</li> <li>\u8fd9\u6837\u80fd\u591f\u4ece\u6839\u672c\u4e0a\u675c\u7edd\"\u53cc\u91cd\u91ca\u653e\"\u8fd9\u79cd\u4e25\u91cd\u9519\u8bef\u7684\u53d1\u751f\u3002\u5b83\u901a\u8fc7\u5728\u7f16\u8bd1\u5c42\u9762\u5c31\u963b\u6b62\u4f60\u5199\u51fa\u8fd9\u6837\u7684\u4ee3\u7801\uff0c\u6765\u4fdd\u8bc1\u5185\u5b58\u7ba1\u7406\u7684\u7edd\u5bf9\u5b89\u5168\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    {\n        unique_ptr&lt;Resource&gt; p1(new Resource);\n        unique_ptr&lt;Resource&gt; p2(new Resource(7));\n        cout &lt;&lt; \"p-&gt;data = \" &lt;&lt; p-&gt;data &lt;&lt; endl;\n\n        // p1 = p2; \u8fd9\u4e2a\u4e0d\u88ab\u5141\u8bb8\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n}\n</code></pre> <ul> <li><code>std::unique_ptr</code> \u867d\u7136\u7981\u6b62\u62f7\u8d1d\uff0c\u4f46\u5b83\u5141\u8bb8\u79fb\u52a8 ( <code>move</code> )\u3002\u79fb\u52a8\u64cd\u4f5c\u7b26 std::move \u53ef\u4ee5\u5c06\u8d44\u6e90\u7684\u6240\u6709\u6743\u4ece\u4e00\u4e2a unique_ptr \u8f6c\u79fb\u7ed9\u53e6\u4e00\u4e2a\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\nint main(){\n    {\n        cout &lt;&lt; \"--- before move ---\" &lt;&lt; endl;\n        unique_ptr&lt;Resource&gt; p1(new Resource);\n        unique_ptr&lt;Resource&gt; p2(new Resource(7));\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n\n        p1 = std::move(p2);\n\n        cout &lt;&lt; \"--- after move ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n}\n</code></pre> <ul> <li>p1 \u548c p2 \u662f <code>std::unique_ptr&lt;Resource&gt;</code> \u7c7b\u578b\u7684\u5bf9\u8c61\u3002<code>std::unique_ptr</code> \u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\uff0c\u5b83\u5c01\u88c5\u4e86\u4e00\u4e2a\u88f8\u6307\u9488\uff08raw pointer\uff09\uff0c\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u7b49\u529f\u80fd\u3002\u5bf9\u4e8e\u88f8\u6307\u9488\uff0c\u5b83\u7528\u4e8e\u89e3\u5f15\u7528\u6307\u9488\u5e76\u8bbf\u95ee\u6240\u6307\u5411\u5bf9\u8c61\u7684\u6210\u5458\u3002\u4f8b\u5982\uff0c<code>raw_ptr-&gt;member</code> \u7b49\u4ef7\u4e8e <code>(*raw_ptr).member</code>\u3002\u5bf9\u4e8e <code>unique_ptr</code> \u5bf9\u8c61\u672c\u8eab\u7684\u6210\u5458\uff08\u5982 <code>get()</code>\uff09\uff0c\u4f7f\u7528\u70b9\u64cd\u4f5c\u7b26 (<code>.</code>)\u3002\u5f53\u4f60\u5e0c\u671b\u8bbf\u95ee <code>unique_ptr</code> \u6240\u6307\u5411\u7684\u5bf9\u8c61\u7684\u6210\u5458\u65f6\uff08\u5982 <code>data</code>\uff09\uff0c\u4f7f\u7528\u7bad\u5934\u64cd\u4f5c\u7b26 (<code>-&gt;</code>)\u3002<code>unique_ptr</code> \u901a\u8fc7\u91cd\u8f7d <code>operator-&gt;()</code> \u4f7f\u5f97\u8fd9\u79cd\u8bbf\u95ee\u770b\u8d77\u6765\u5c31\u50cf\u76f4\u63a5\u64cd\u4f5c\u88f8\u6307\u9488\u4e00\u6837\u81ea\u7136\uff0c\u540c\u65f6\u5b83\u4ecd\u7136\u5728\u80cc\u540e\u7ba1\u7406\u7740\u8d44\u6e90\u3002</li> <li>p1 \u6307\u5411\u65b0\u7684\u8d44\u6e90\u5c31\u88ab destroy \u4e86\uff08\u56e0\u4e3a\u6ca1\u4eba\u7ba1\uff09</li> <li>\u79fb\u4ea4\u51fa\u53bb\u540e p2 \u53d8\u6210\u4e86 nullptr </li> <li>\u56e0\u4e3a <code>cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;</code> \u4f1a\u5bfc\u81f4 segmentation fault</li> <li><code>move</code> \u5c31\u662f\u7ba1\u7406\u6743\u7684\u79fb\u4ea4\u3002</li> </ul> about move <p><code>std::move</code> \u672c\u8eab\u5e76\u4e0d\u6267\u884c\u4efb\u4f55\u79fb\u52a8\u64cd\u4f5c\u3002\u5b83\u662f\u4e00\u4e2a\u7c7b\u578b\u8f6c\u6362\u51fd\u6570\uff08\u5177\u4f53\u6765\u8bf4\uff0c\u662f\u4e00\u4e2a <code>static_cast</code> \u5230\u53f3\u503c\u5f15\u7528\u7684\u8f6c\u6362\uff09\u3002\u5b83\u7684\u4f5c\u7528\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\uff1a\"\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5bf9\u8c61\u770b\u4f5c\u662f\u4e00\u4e2a\u4e34\u65f6\u7684\u3001\u53ef\u4ee5\u88ab'\u7a83\u53d6'\u8d44\u6e90\u7684\u5bf9\u8c61\u3002\"</p> <p>\u5f53\u4f60\u5bf9\u4e00\u4e2a\u5bf9\u8c61 <code>obj</code> \u4f7f\u7528 <code>std::move(obj)</code> \u65f6\uff1a</p> <ol> <li> <p><code>std::move(obj)</code> \u8fd4\u56de\u4e00\u4e2a\u6307\u5411<code>obj</code> \u7684\u53f3\u503c\u5f15\u7528 (rvalue reference)\u3002</p> </li> <li> <p>\u8fd9\u4e2a\u53f3\u503c\u5f15\u7528\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c<code>obj</code> \u7684\u8d44\u6e90\u53ef\u4ee5\u88ab\u5b89\u5168\u5730\u8f6c\u79fb\u8d70\uff0c\u56e0\u4e3a\u6211\u4eec\uff08\u7a0b\u5e8f\u5458\uff09\u663e\u5f0f\u5730\u8868\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u6697\u793a <code>obj</code> \u4e4b\u540e\u53ef\u80fd\u4e0d\u518d\u4ee5\u5176\u539f\u6709\u72b6\u6001\u88ab\u4f7f\u7528\uff0c\u6216\u8005\u5176\u72b6\u6001\u4e0d\u518d\u91cd\u8981\u3002</p> </li> </ol> <p>\u5b9e\u9645\u7684\u79fb\u52a8\u64cd\u4f5c\u662f\u7531\u79fb\u52a8\u6784\u9020\u51fd\u6570 (<code>move constructor</code>) \u6216\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 (<code>move assignment operator</code>) \u5b8c\u6210\u7684\u3002\u8fd9\u4e9b\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570\u4f1a\u4ee5\u53f3\u503c\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\u3002</p> <p>\u79fb\u52a8\u6784\u9020\u51fd\u6570 <code>ClassName(ClassName&amp;&amp; other</code>): \u4ece <code>other</code> \u5bf9\u8c61\u7a83\u53d6\u8d44\u6e90\u6765\u6784\u9020\u65b0\u5bf9\u8c61\u3002<code>other</code> \u5bf9\u8c61\u901a\u5e38\u4f1a\u88ab\u7f6e\u4e3a\u4e00\u4e2a\u6709\u6548\u7684\u3001\u4f46\u53ef\u80fd\u662f\u7a7a\u6216\u672a\u5b9a\u4e49\u7684\u72b6\u6001\u3002</p> <p>\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 <code>ClassName&amp; operator=(ClassName&amp;&amp; other)</code>: \u91ca\u653e\u5f53\u524d\u5bf9\u8c61\u7684\u8d44\u6e90\uff0c\u7136\u540e\u4ece <code>other</code> \u5bf9\u8c61\u7a83\u53d6\u8d44\u6e90\u3002<code>other</code> \u5bf9\u8c61\u540c\u6837\u4f1a\u88ab\u7f6e\u4e3a\u4e00\u4e2a\u6709\u6548\u7684\u3001\u4f46\u53ef\u80fd\u662f\u7a7a\u6216\u672a\u5b9a\u4e49\u7684\u72b6\u6001\u3002</p> about Rvalue Reference <p>\u5de6\u503c (Lvalue - Locator value): \u6307\u7684\u662f\u8868\u8fbe\u5f0f\u7ed3\u675f\u540e\u4f9d\u7136\u5b58\u5728\u7684\u5bf9\u8c61\u6216\u51fd\u6570\u3002\u5b83\u4eec\u901a\u5e38\u6709\u6301\u4e45\u7684\u5185\u5b58\u5730\u5740\uff0c\u4f60\u53ef\u4ee5\u83b7\u53d6\u5b83\u4eec\u7684\u5730\u5740\uff08\u4f7f\u7528 <code>&amp;</code> \u64cd\u4f5c\u7b26\uff09\u3002\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u64cd\u4f5c\u7b26 (<code>=</code>) \u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\u3002</p> <ul> <li>\u53f3\u503c (Rvalue - Read value / Right-hand-side value):\u6307\u7684\u662f\u8868\u8fbe\u5f0f\u7ed3\u675f\u540e\u5c31\u4e0d\u518d\u5b58\u5728\u7684\u4e34\u65f6\u503c\u3002\u5b83\u4eec\u901a\u5e38\u6ca1\u6709\u6301\u4e45\u7684\u5185\u5b58\u5730\u5740\uff08\u6216\u8005\u8bf4\uff0c\u4f60\u901a\u5e38\u4e0d\u80fd\u5b89\u5168\u5730\u83b7\u53d6\u5b83\u4eec\u7684\u5730\u5740\u5e76\u957f\u671f\u4f7f\u7528\uff09\u3002\u53ea\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u64cd\u4f5c\u7b26 (<code>=</code>) \u7684\u53f3\u8fb9\uff08\u4f5c\u4e3a\u63d0\u4f9b\u503c\u7684\u4e00\u65b9\uff09\u3002</li> </ul> <p>\u533a\u5206\u5c0f\u6280\u5de7\uff1a \u4e00\u4e2a\u7b80\u5355\u7684\uff08\u4f46\u4e0d\u5b8c\u5168\u7cbe\u786e\uff09\u5224\u65ad\u65b9\u6cd5\u662f\uff1a\u5982\u679c\u80fd\u5bf9\u8868\u8fbe\u5f0f\u53d6\u5730\u5740 (<code>&amp;</code>)\uff0c\u90a3\u5b83\u901a\u5e38\u662f\u5de6\u503c\uff1b\u5426\u5219\uff0c\u5b83\u901a\u5e38\u662f\u53f3\u503c\u3002</p> <ol> <li> <p>\u5de6\u503c\u5f15\u7528 (<code>Type&amp;</code>):\u901a\u5e38\u53ea\u80fd\u7ed1\u5b9a\u5230\u5de6\u503c\u3002\u4e3b\u8981\u4f5c\u7528\u662f\u4f5c\u4e3a\u5bf9\u8c61\u7684\u522b\u540d\uff0c\u907f\u514d\u4e86\u6307\u9488\u7684\u590d\u6742\u8bed\u6cd5\uff0c\u5e76\u5e38\u7528\u4e8e\u51fd\u6570\u53c2\u6570\u4f20\u9012\u4ee5\u907f\u514d\u590d\u5236\u3002</p> </li> <li> <p>\u53f3\u503c\u5f15\u7528 (Rvalue Reference - <code>Type&amp;&amp;</code>)</p> </li> </ol> <p>C++11 \u5f15\u5165\u4e86\u53f3\u503c\u5f15\u7528\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\uff1a</p> <ol> <li>\u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49 (Move Semantics): \u8fd9\u662f\u6700\u6838\u5fc3\u7684\u76ee\u7684\u3002</li> <li>\u5b9e\u73b0\u5b8c\u7f8e\u8f6c\u53d1 (Perfect Forwarding): \u5728\u6a21\u677f\u7f16\u7a0b\u4e2d\u975e\u5e38\u6709\u7528\u3002</li> </ol> <p>\u5b9a\u4e49\u548c\u7279\u70b9\uff1a</p> <ul> <li>\u8bed\u6cd5\uff1a \u4f7f\u7528\u4e24\u4e2a <code>&amp;</code> \u7b26\u53f7\uff0c\u5373 <code>Type&amp;&amp;</code>\u3002</li> <li>\u7ed1\u5b9a\u89c4\u5219\uff1a \u53f3\u503c\u5f15\u7528\u4e13\u95e8\u7528\u4e8e\u7ed1\u5b9a\u5230\u53f3\u503c\uff08\u4e34\u65f6\u5bf9\u8c61\uff09\u3002</li> <li>\u6838\u5fc3\u4f5c\u7528\uff1a \u5141\u8bb8\u6211\u4eec\u8bc6\u522b\u51fa\u4e34\u65f6\u5bf9\u8c61\uff0c\u5e76\u5b89\u5168\u5730\"\u7a83\u53d6\"\u5b83\u4eec\u7684\u8d44\u6e90\uff08\u6bd4\u5982\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u3001\u6587\u4ef6\u53e5\u67c4\u7b49\uff09\uff0c\u800c\u4e0d\u662f\u8fdb\u884c\u6602\u8d35\u7684\u590d\u5236\u64cd\u4f5c\u3002\u56e0\u4e3a\u4e34\u65f6\u5bf9\u8c61\u5373\u5c06\u88ab\u9500\u6bc1\uff0c\u6240\u4ee5\u8f6c\u79fb\u5176\u8d44\u6e90\u662f\u5b89\u5168\u7684\u3002</li> </ul> <p><code>std::move</code> \u548c\u53f3\u503c\u5f15\u7528\uff1a</p> <p><code>std::move</code> \u662f\u4e00\u4e2a\u5b9e\u7528\u51fd\u6570\uff0c\u5b83\u5e76\u4e0d\u6267\u884c\u4efb\u4f55\"\u79fb\u52a8\"\u64cd\u4f5c\u3002\u5b83\u7684\u4f5c\u7528\u662f\u5c06\u4e00\u4e2a\u5de6\u503c\u65e0\u6761\u4ef6\u5730\u8f6c\u6362\u4e3a\u53f3\u503c\u5f15\u7528\u3002\u8fd9\u76f8\u5f53\u4e8e\u544a\u8bc9\u7f16\u8bd1\u5668\uff1a\"\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5de6\u503c\u5f53\u4f5c\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff08\u53f3\u503c\uff09\u6765\u5904\u7406\u4e86\uff0c\u6211\u5141\u8bb8\u4f60\u7a83\u53d6\u5b83\u7684\u8d44\u6e90\u3002\"</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\ntemplate&lt;typename T&gt;\nclass u_ptr{\npublic:  // \u5982\u679c\u4f7f\u7528\u5173\u952e\u5b57 class \u6765\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u5176\u6210\u5458\u7684\u9ed8\u8ba4\u8bbf\u95ee\u6743\u9650\u662f private\u3002\n    explicit u_ptr(T* ptr = nullptr) : p_(ptr) {}\n    ~u_ptr() {\n        delete p_;\n    }\n\n    // copy is prohibited\n    u_ptr(const u_ptr&amp;) = delete;\n    u_ptr&amp; operator=(const u_ptr&amp;) = delete;\n\n    // move is allowed\n    u_ptr(u_ptr&amp;&amp; other) noexcept : p_(other.release()) {} \n    u_ptr&amp; operator=(u_ptr&amp;&amp; other) noexcept {  // move \u4f1a\u627e\u5230\u8fd9\u4e2a\u7248\u672c\n        reset(other.release());  // reset\uff1f\u8fd9\u662f\u8981\u5e72\u4ec0\u4e48\uff1f\n        return *this;\n    }\n\n    u_ptr&amp; operator=(u_ptr&amp;&amp; other) noexcept {\n        if (this != &amp;other) {\n            delete p_;\n        }\n    }\n\n    T&amp; operator*() const {  // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u662f T&amp;\n        return *p_;\n    }\n\n    T* operator-&gt;() const {  // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u662f T* \u5982\u679c\u662f\u5bf9\u8c61\u5c31\u8fdb\u884c\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u64cd\u4f5c\n        return p_;\n    }\n\n    T* get() const {\n        return p_;  // \u4e0e operator \u7684\u533a\u522b\u5728\u54ea\u91cc\n    }\n\n    T* release() {\n        T* ptr = p_;\n        p_ = nullptr;  // \u91ca\u653e\u7ba1\u7406\u6743\uff0c\u8fd4\u56de\u88f8\u6307\u9488\uff0c\u4ea4\u51fa\u7ba1\u7406\u6743\n        return ptr;\n    }\n    void reset(T* ptr = nullptr) {  // \u91cd\u7f6e\u7ba1\u7406\u6743\n        delete p_;\n        p_ = ptr;\n    }\n\nprivate:\n    T* p_;\n};\n\nint main(){\n    {\n        cout &lt;&lt; \"--- before move ---\" &lt;&lt; endl;\n        u_ptr&lt;Resource&gt; p1(new Resource);\n        u_ptr&lt;Resource&gt; p2(new Resource(7));\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n\n        p1 = std::move(p2);\n\n        cout &lt;&lt; \"--- after move ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        // cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n}\n</code></pre> <ul> <li> <p><code>= delete;</code> : \u8fd9\u662f\u4e00\u79cd C++11 \u7684\u7279\u6027\uff0c\u7528\u4e8e\u663e\u5f0f\u5730\u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u4e3a\u8fd9\u4e2a\u51fd\u6570\u751f\u6210\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5e76\u7981\u6b62\u4efb\u4f55\u4ee3\u7801\u8c03\u7528\u5b83\u3002\u5982\u679c\u5c1d\u8bd5\u8c03\u7528\u4e00\u4e2a\u88ab <code>= delete</code> \u7684\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002</p> </li> <li> <p>\u4e0d\u662f\u5355\u4e2a\u5bf9\u8c61\u800c\u662f\u6570\u7ec4</p> </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\ntemplate&lt;typename T&gt;\nclass u_ptr{\npublic:\n    explicit u_ptr(T* ptr = nullptr) : p_(ptr) {}\n    ~u_ptr() {\n        delete p_;\n    }\n\n    // copy is prohibited\n    u_ptr(const u_ptr&amp;) = delete;\n    u_ptr&amp; operator=(const u_ptr&amp;) = delete;\n\n    // move is allowed\n    u_ptr(u_ptr&amp;&amp; other) noexcept : p_(other.release()) {}\n    u_ptr&amp; operator=(u_ptr&amp;&amp; other) noexcept {\n        reset(other.release());\n        return *this;\n    }\n\n    T&amp; operator*() const {\n        return *p_;\n    }\n\n    T* operator-&gt;() const {\n        return p_;\n    }\n\n    T* get() const {\n        return p_;\n    }\n\n    T* release() {\n        T* ptr = p_;\n        p_ = nullptr;  // \u91ca\u653e\u7ba1\u7406\u6743\uff0c\u8fd4\u56de\u88f8\u6307\u9488\uff0c\u4ea4\u51fa\u7ba1\u7406\u6743\n        return ptr;\n    }\n\n    void reset(T* ptr = nullptr) {  // \u91cd\u7f6e\u7ba1\u7406\u6743\n        delete p_; // \u5148\u5220\u9664\u65e7\u7684\n        p_ = ptr; // \u518d\u63a5\u7ba1\u65b0\u7684\n    }\n\nprivate:\n    T* p_;\n};\n\nint main(){\n    {\n        cout &lt;&lt; \"--- before move ---\" &lt;&lt; endl;\n        u_ptr&lt;Resource&gt; p1(new Resource);\n        u_ptr&lt;Resource&gt; p2(new Resource(7));\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n\n        p1 = std::move(p2);\n\n        cout &lt;&lt; \"--- after move ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        // cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    }\n    {\n        unique_ptr&lt;Resource[]&gt; parr(new Resource[10]);\n        cout &lt;&lt; \"\\n Resource data = [ \";\n        for(int i = 0; i &lt; 10; ++i){\n            cout &lt;&lt; parr[i].data &lt;&lt; \" \";  // \u672c\u6765\u5c31\u53ef\u4ee5\u505a\uff0cunique\u5305\u4e86\u4e00\u5c42\u4e4b\u540e\u4f9d\u7136\u53ef\u4ee5\u505a\n        }\n        cout &lt;&lt; \"]\" &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u8f93\u51fa:</li> </ul> <pre><code>--- before move ---\np1 = 0x1b3c4714970\np1-&gt;data = 0\np2 = 0x1b3c47149b0\np2-&gt;data = 7\nResource destroyed, data = 0\n--- after move ---\np1 = 0x1b3c47149b0\np1-&gt;data = 7\np2 = 0\nResource destroyed, data = 7\n\nbefore quit ...\n</code></pre> <ul> <li><code>reset(...)</code>: <code>reset</code> \u6210\u5458\u51fd\u6570\u7684\u4f5c\u7528\u662f\u9996\u5148\uff0c<code>delete</code> \u5f53\u524d <code>u_ptr</code> \u5bf9\u8c61\uff08\u5373 <code>*this</code>\uff09\u6240\u62e5\u6709\u7684\u65e7\u6307\u9488 <code>p_</code>\uff08\u5982\u679c\u5b83\u4e0d\u4e3a <code>nullptr</code> \u7684\u8bdd\uff09\uff0c\u91ca\u653e\u65e7\u8d44\u6e90\u3002\u7136\u540e\uff0c\u8ba9\u5f53\u524d <code>u_ptr</code> \u5bf9\u8c61\u63a5\u7ba1\u65b0\u7684\u6307\u9488\uff08\u5373\u4ece <code>other.release()</code> \u8fd4\u56de\u7684\u6307\u9488\uff09\u3002\u6240\u4ee5\uff0c<code>reset(other.release())</code> \u8fd9\u4e00\u884c\u4ee3\u7801\u5b8c\u6574\u5730\u5b9e\u73b0\u4e86\u6240\u6709\u6743\u7684\u8f6c\u79fb\uff0c\u5f53\u524d\u5bf9\u8c61\u91ca\u653e\u65e7\u8d44\u6e90\uff0c\u7136\u540e\u63a5\u7ba1\u4ece <code>other</code> \u5bf9\u8c61\u90a3\u91cc\"\u5077\"\u6765\u7684\u65b0\u8d44\u6e90\u3002</li> <li><code>T&amp; operator*() const</code> : <code>operator*()</code> (\u89e3\u5f15\u7528\u64cd\u4f5c\u7b26) \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u5bf9 <code>u_ptr</code> \u6240\u7ba1\u7406\u7684\u5b9e\u9645\u5bf9\u8c61\u7684\u8bbf\u95ee\uff0c\u5c31\u50cf\u4f7f\u7528\u88f8\u6307\u9488\u4e00\u6837\u3002\u8fd4\u56de <code>T&amp;</code> (\u5f15\u7528) \u610f\u5473\u7740\u4f60\u5f97\u5230\u7684\u662f\u5b9e\u9645\u5bf9\u8c61\u672c\u8eab\u7684\u4e00\u4e2a\u522b\u540d\uff0c\u800c\u4e0d\u662f\u5b83\u7684\u4e00\u4efd\u62f7\u8d1d\u3002\u8fd9\u5141\u8bb8\u4f60\u8bfb\u53d6\u6216\u4fee\u6539\u6240\u7ba1\u7406\u7684\u5bf9\u8c61\uff08\u5982\u679c <code>T</code> \u672c\u8eab\u4e0d\u662f <code>const</code> \u7684\u8bdd\uff09\u3002\u5982\u679c\u8fd4\u56de <code>T</code> (\u6309\u503c\u8fd4\u56de)\uff0c\u90a3\u4e48\u6bcf\u6b21\u89e3\u5f15\u7528\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u7684\u62f7\u8d1d\uff0c\u8fd9\u4e0d\u4ec5\u6548\u7387\u4f4e\u4e0b\uff0c\u800c\u4e14\u4e5f\u8fdd\u80cc\u4e86\u6307\u9488\u89e3\u5f15\u7528\u7684\u901a\u5e38\u8bed\u4e49\uff08\u5373\u76f4\u63a5\u64cd\u4f5c\u6307\u5411\u7684\u5bf9\u8c61\uff09\u3002<code>const</code> \u5173\u952e\u5b57\u5728\u8fd9\u91cc\u8868\u793a\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539 <code>u_ptr</code> \u5bf9\u8c61\u672c\u8eab\uff08\u5373\u4e0d\u4f1a\u6539\u53d8 <code>p_</code> \u6307\u9488\u7684\u503c\uff09\uff0c\u4f46\u5b83\u8fd4\u56de\u7684\u5f15\u7528\u6240\u6307\u5411\u7684\u5bf9\u8c61\u662f\u5426\u80fd\u88ab\u4fee\u6539\uff0c\u5219\u53d6\u51b3\u4e8e <code>T</code> \u7684\u7c7b\u578b\u3002</li> <li><code>T* operator-&gt;() const</code> : <code>operator-&gt;()</code> (\u7bad\u5934\u64cd\u4f5c\u7b26) \u4f7f\u5f97\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u50cf\u88f8\u6307\u9488\u4e00\u6837\u901a\u8fc7 <code>-&gt;</code> \u8bbf\u95ee\u5176\u6240\u7ba1\u7406\u5bf9\u8c61\u7684\u6210\u5458\u3002C++ \u5bf9\u91cd\u8f7d\u7684 <code>operator-&gt;()</code> \u6709\u4e00\u4e2a\u7279\u6b8a\u89c4\u5219\uff1a\u5b83\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u88f8\u6307\u9488\uff0c\u6216\u8005\u8fd4\u56de\u4e00\u4e2a\u53e6\u4e00\u4e2a\u4e5f\u91cd\u8f7d\u4e86 <code>operator-&gt;()</code> \u7684\u5bf9\u8c61\u3002\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u91cd\u590d\u8c03\u7528 <code>operator-&gt;()</code> \u76f4\u5230\u83b7\u5f97\u4e00\u4e2a\u88f8\u6307\u9488\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u4e2a\u88f8\u6307\u9488\u8bbf\u95ee\u6210\u5458\u3002\u5728\u8fd9\u91cc\uff0c<code>u_ptr</code> \u76f4\u63a5\u7ba1\u7406\u4e00\u4e2a <code>T*</code> \u7c7b\u578b\u7684\u88f8\u6307\u9488 <code>p_</code>\uff0c\u6240\u4ee5\u6700\u76f4\u63a5\u548c\u6b63\u786e\u7684\u65b9\u5f0f\u5c31\u662f\u8fd4\u56de\u8fd9\u4e2a <code>p_</code>\u3002\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u64cd\u4f5c\uff0c\u4f46\u66f4\u51c6\u786e\u7684\u8bf4\u662f\u94fe\u5f0f\u8c03\u7528 (chaining)\u3002\u5982\u679c <code>operator-&gt;()</code> \u8fd4\u56de\u7684\u662f\u53e6\u4e00\u4e2a\u4e5f\u91cd\u8f7d\u4e86 <code>operator-&gt;()</code> \u7684\u667a\u80fd\u6307\u9488\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ee7\u7eed\u5bf9\u8fd4\u56de\u7684\u5bf9\u8c61\u8c03\u7528 <code>operator-&gt;()</code>\uff0c\u76f4\u5230\u6700\u7ec8\u83b7\u5f97\u4e00\u4e2a\u88f8\u6307\u9488\u3002</li> <li><code>T* get() const</code> \u4e0e <code>operator</code> \u7684\u533a\u522b\u5728\u4e8e : \u662f\u4e00\u4e2a\u666e\u901a\u7684\u6210\u5458\u51fd\u6570\u3002\u5b83\u663e\u5f0f\u5730\u8fd4\u56de\u5185\u90e8\u5b58\u50a8\u7684\u88f8\u6307\u9488 <code>p_</code>\u3002<code>operator-&gt;()</code>: \u662f\u4e00\u4e2a\u91cd\u8f7d\u7684\u64cd\u4f5c\u7b26\u3002\u5b83\u4e5f\u8fd4\u56de\u5185\u90e8\u5b58\u50a8\u7684\u88f8\u6307\u9488 <code>p_</code> (\u6216\u8005\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\u7684\u5bf9\u8c61)\u3002\u5b83\u4f7f\u5f97 <code>u_ptr</code> \u5bf9\u8c61\u53ef\u4ee5\u6a21\u4eff\u88f8\u6307\u9488\u7684\u8bed\u6cd5\u6765\u8bbf\u95ee\u6210\u5458\uff1a<code>p1-&gt;member</code>\u3002</li> <li>\u5bf9\u4e8e\u8fd9\u4e2a <code>unique_ptr&lt;Resource[]&gt; parr(new Resource[10]);</code> \uff0c\u6211\u4eec\u7684\u7248\u672c <code>u_ptr</code> \u8fd8\u4e0d\u80fd\u5b9e\u73b0\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u5b9e\u73b0\u6570\u7ec4\u7684\u7248\u672c\uff0c\u8fd8\u9700\u8981\u589e\u52a0\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\ntemplate&lt;typename T&gt;\nclass u_ptr{\npublic:\n    explicit u_ptr(T* ptr = nullptr) : p_(ptr) {}\n    ~u_ptr() {\n        delete p_;\n    }\n\n    // copy is prohibited\n    u_ptr(const u_ptr&amp;) = delete;\n    u_ptr&amp; operator=(const u_ptr&amp;) = delete;\n\n    // move is allowed\n    u_ptr(u_ptr&amp;&amp; other) noexcept : p_(other.release()) {}\n    u_ptr&amp; operator=(u_ptr&amp;&amp; other) noexcept {\n        reset(other.release());\n        return *this;\n    }\n\n    T&amp; operator*() const {\n        return *p_;\n    }\n\n    T* operator-&gt;() const {\n        return p_;\n    }\n\n    T* get() const {\n        return p_;\n    }\n\n    T* release() {\n        T* ptr = p_;\n        p_ = nullptr;\n        return ptr;\n    }\n    void reset(T* ptr = nullptr) {\n        delete p_;\n        p_ = ptr;\n    }\n\nprivate:\n    T* p_;\n};\n\ntemplate&lt;typename T&gt;\nclass u_ptr&lt;T[]&gt;{\n    public: \n    explicit u_ptr(T* ptr = nullptr) : p_(ptr) {}\n    ~u_ptr() {\n        delete[] p_;\n    }\n\n    // copy is prohibited\n    u_ptr(const u_ptr&amp;) = delete;\n    u_ptr&amp; operator=(const u_ptr&amp;) = delete;\n\n    // move is allowed\n    u_ptr(u_ptr&amp;&amp; other) noexcept : p_(other.release()) {}\n    u_ptr&amp; operator=(u_ptr&amp;&amp; other) noexcept {\n        reset(other.release());\n        return *this;\n    }\n\n    T&amp; operator[] (size_t index) const {\n        return p_[index];\n    }\n\n    T* get() const {\n        return p_;\n    }\n\n    T* release() {\n        T* ptr = p_;\n        p_ = nullptr;\n        return ptr;\n    }\n    void reset(T* ptr = nullptr) {\n        delete[] p_;\n        p_ = ptr;\n    }\n\nprivate:\n    T* p_;\n};\n\nint main(){\n    {\n        cout &lt;&lt; \"--- before move ---\" &lt;&lt; endl;\n        u_ptr&lt;Resource&gt; p1(new Resource);\n        u_ptr&lt;Resource&gt; p2(new Resource(7));\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n\n        p1 = std::move(p2);\n\n        cout &lt;&lt; \"--- after move ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        // cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    }\n    {\n        u_ptr&lt;Resource[]&gt; parr(new Resource[10]);\n        cout &lt;&lt; \"\\n Resource data = [ \";\n        for(int i = 0; i &lt; 10; ++i){\n            cout &lt;&lt; parr[i].data &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"]\" &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u8f93\u51fa:</li> </ul> <pre><code>--- before move ---\np1 = 0x1bc0af44970\np1-&gt;data = 0\np2 = 0x1bc0af449b0\np2-&gt;data = 7\nResource destroyed, data = 0\n--- after move ---\np1 = 0x1bc0af449b0\np1-&gt;data = 7\np2 = 0\nResource destroyed, data = 7\n\n Resource data = [ 0 0 0 0 0 0 0 0 0 0 ]\nResource destroyed, data = 0\nResource destroyed, data = 0\nResource destroyed, data = 0\nResource destroyed, data = 0\nResource destroyed, data = 0\nResource destroyed, data = 0\nResource destroyed, data = 0\nResource destroyed, data = 0\nResource destroyed, data = 0\nResource destroyed, data = 0\n\nbefore quit ...\n</code></pre> <ul> <li>\u63a5\u4e0b\u6765\u662f <code>share_ptr</code></li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\nint main(){\n    {\n        shared_ptr&lt;Resource&gt; p1(new Resource);\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        shared_ptr&lt;Resource&gt; p2(p1);\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u8f93\u51fa:</li> </ul> <pre><code>p1 = 0x1ee060a4970\np1-&gt;data = 0\np2 = 0x1ee060a4970\np2-&gt;data = 0\nResource destroyed, data = 0\n\nbefore quit ...\n</code></pre> <ul> <li><code>share_ptr&lt;Resource&gt; p2(p1);</code> \u8fd9\u91cc\u7528 p1 \u6784\u9020 p2 \u8fbe\u6210\u7684\u6548\u679c\u662f p1 \u548c p2 \u73b0\u5728\u7ba1\u7406\u540c\u4e00\u4efd\u8d44\u6e90\uff0c\u8fd9\u5c31\u662f <code>unique_ptr</code> \u505a\u4e0d\u4e86\u7684\u4e8b\u60c5\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\nint main(){\n    shared_ptr&lt;Resource&gt; p2(new Resource(7));\n    cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n    cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    {\n        shared_ptr&lt;Resource&gt; p1(new Resource);\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n\n        p2 = p1;\n\n        cout &lt;&lt; \"--- after copy ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u8f93\u51fa:</li> </ul> <pre><code>p2 = 0x1d85a5f4970\np2-&gt;data = 7\ncount: 1\np1 = 0x1d85a5f4da0\np1-&gt;data = 0\ncount: 1\nResource destroyed, data = 7\n--- after copy ---\np1 = 0x1d85a5f4da0\np1-&gt;data = 0\ncount: 2\np2 = 0x1d85a5f4da0\np2-&gt;data = 0\ncount: 2\n\nbefore quit ...\ncount: 1\nResource destroyed, data = 0\n</code></pre> <ul> <li>\u6700\u540e\u4e00\u4e2a\u7ba1\u7406\u8005\u51fa\u4e86\u751f\u547d\u5468\u671f\u65f6\u8fd9\u4e2a\u8d44\u6e90\u624d\u4f1a\u88ab\u91ca\u653e\u3002</li> <li><code>1</code> \u8bf4\u660e\u4e00\u4e2a\u7ba1\u7406\u8005\u5728\u4f7f\u7528\uff0c\u964d\u5230 <code>0</code> \u65f6\u8d44\u6e90\u5c31\u88ab\u56de\u6536\u4e86\u3002</li> <li>\u7136\u540e\u518d\u6765\u5b9e\u73b0\u4e00\u4e0b\u3002</li> <li>\u9996\u5148\u9700\u8981\u601d\u8003\u628a\u8fd9\u4e2a <code>count</code> \u5b58\u5728\u54ea\u91cc\uff1f\u9700\u8981\u662f\u975e\u4fb5\u5165\u5f0f\u7684\u8bbe\u8ba1(\u4e5f\u5c31\u662f\u4e0d\u80fd\u5728 <code>Resource</code> \u91cc\u9762\uff0c\u4e0d\u80fd\u8ba9\u7528\u6237\u81ea\u5b9a\u4e49\u8fd9\u4e2a)\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728\u5b9e\u73b0 <code>shared_point</code> \u7684\u65f6\u5019\u5c31\u628a\u8fd9\u4e2a <code>count</code> \u5b9e\u73b0\u4e86\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\ntemplate&lt;typename T&gt;\nclass s_ptr {\nprivate:\n    struct ControlBlock {\n        T* p_;\n        size_t ref_count;\n        ControlBlock(T* ptr) : p_(ptr), ref_count(1) {}\n        ~ControlBlock() {\n            delete p_;\n        }\n    };\n\n    ControlBlock* cb;\n    void add_shared(){\n        if(cb){\n            cb-&gt;ref_count++;\n        }\n    }\n    void release_shared(){\n        if(cb){\n            cb-&gt;ref_count--;\n            if(cb-&gt;ref_count == 0){\n                delete cb;\n            }\n        }\n    }\npublic:\n    explicit s_ptr(T* ptr = nullptr) {\n        if(ptr){\n            cb = new ControlBlock(ptr);\n        }else{\n            cb = nullptr;\n        }\n    }\n    ~s_ptr() {\n        release_shared();\n    }\n\n    s_ptr(const s_ptr&amp; other) : cb(other.cb) {\n        add_shared();\n    }\n\n    s_ptr&amp; operator=(const s_ptr&amp; other) {\n        if (this != &amp;other){\n            release_shared();\n            cb = other.cb;\n            add_shared();\n        }\n        return *this;\n    }\n\n    T&amp; operator*() const{\n        return *(cb-&gt;p_);\n    }\n\n    T* operator-&gt;() const{\n        return cb-&gt;p_;\n    }\n\n    // \u4e0a\u9762\u4e24\u79cd\u5728 cb \u662f nullptr \u7684\u65f6\u5019\u4f1a\u8fd0\u884c\u51fa\u9519\n\n    T* get() const{\n        return cb ? cb-&gt;p_ : nullptr;\n    }\n\n    size_t use_count() const{\n        return cb ? cb-&gt;ref_count : 0;\n    }\n};\n\n\nint main(){\n    s_ptr&lt;Resource&gt; p2(new Resource(7));\n    cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n    cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    {\n        s_ptr&lt;Resource&gt; p1(new Resource);\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n\n        p2 = p1;\n\n        cout &lt;&lt; \"--- after copy ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u8f93\u51fa:</li> </ul> <pre><code>p2 = 0x2a167904970\np2-&gt;data = 7\ncount: 1\np1 = 0x2a167904da0\np1-&gt;data = 0\ncount: 1\nResource destroyed, data = 7\n--- after copy ---\np1 = 0x2a167904da0\np1-&gt;data = 0\ncount: 2\np2 = 0x2a167904da0\np2-&gt;data = 0\ncount: 2\n\nbefore quit ...\ncount: 1\nResource destroyed, data = 0\n</code></pre> <ul> <li><code>s_ptr::cb</code> \u7c7b\u578b\u662f <code>ControlBlock*</code>\u3002\u6bcf\u4e2a <code>s_ptr</code> \u5bf9\u8c61\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5171\u4eab\u7684 <code>ControlBlock</code>\u3002\u5982\u679c <code>s_ptr</code> \u4e0d\u7ba1\u7406\u4efb\u4f55\u5bf9\u8c61\uff08\u5373\u4e3a\u7a7a\u6307\u9488\uff09\uff0c\u5219 <code>cb</code> \u4e3a <code>nullptr</code>\u3002</li> <li>\u6574\u4e2a <code>main</code> \u7684\u8fd0\u884c\u6d41\u7a0b\u3002</li> </ul> <pre><code>int main(){\n    // 1. s_ptr&lt;Resource&gt; p2(new Resource(7));\n    //    - \u8c03\u7528 s_ptr \u6784\u9020\u51fd\u6570\u3002\n    //    - new Resource(7) \u521b\u5efa\u4e00\u4e2a Resource \u5bf9\u8c61\uff0cdata = 7\u3002\n    //    - new ControlBlock(Resource(7)\u7684\u6307\u9488) \u521b\u5efa\u63a7\u5236\u5757 cb2\u3002\n    //      - cb2-&gt;p_ \u6307\u5411 Resource(7)\u3002\n    //      - cb2-&gt;ref_count = 1\u3002\n    //    - p2.cb \u6307\u5411 cb2\u3002\n    s_ptr&lt;Resource&gt; p2(new Resource(7));\n    cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n    cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n\n    { // \u8fdb\u5165\u5185\u90e8\u4f5c\u7528\u57df\n        // 2. s_ptr&lt;Resource&gt; p1(new Resource); (\u5047\u8bbe Resource() \u9ed8\u8ba4 data = 0)\n        //    - \u8c03\u7528 s_ptr \u6784\u9020\u51fd\u6570\u3002\n        //    - new Resource() \u521b\u5efa\u4e00\u4e2a Resource \u5bf9\u8c61\uff0cdata = 0\u3002\n        //    - new ControlBlock(Resource(0)\u7684\u6307\u9488) \u521b\u5efa\u63a7\u5236\u5757 cb1\u3002\n        //      - cb1-&gt;p_ \u6307\u5411 Resource(0)\u3002\n        //      - cb1-&gt;ref_count = 1\u3002\n        //    - p1.cb \u6307\u5411 cb1\u3002\n        s_ptr&lt;Resource&gt; p1(new Resource);\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n\n        // 3. p2 = p1; (\u62f7\u8d1d\u8d4b\u503c)\n        //    - \u8c03\u7528 p2.operator=(p1)\u3002\n        //    - (this != &amp;other) \u4e3a true\u3002\n        //    - p2.release_shared() \u88ab\u8c03\u7528:\n        //      - p2.cb (\u5373 cb2) \u7684 ref_count \u4ece 1 \u51cf\u4e3a 0\u3002\n        //      - delete cb2; \u6267\u884c\u3002\n        //        - cb2-&gt;~ControlBlock() \u6267\u884c\u3002\n        //          - delete cb2-&gt;p_; (\u5373 delete Resource(7) \u6307\u9488) \u6267\u884c\u3002\n        //          - \u8f93\u51fa: \"Resource destroyed, data = 7\"\n        //    - p2.cb = p1.cb; (\u73b0\u5728 p2.cb \u548c p1.cb \u90fd\u6307\u5411 cb1)\u3002\n        //    - p2.add_shared() \u88ab\u8c03\u7528:\n        //      - p2.cb (\u5373 cb1) \u7684 ref_count \u4ece 1 \u589e\u4e3a 2\u3002\n        p2 = p1;\n\n        cout &lt;&lt; \"--- after copy ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    } // \u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\n\n    // 4. p1 \u6790\u6784 (~s_ptr() \u88ab\u8c03\u7528)\n    //    - p1.release_shared() \u88ab\u8c03\u7528:\n    //      - p1.cb (\u5373 cb1) \u7684 ref_count \u4ece 2 \u51cf\u4e3a 1\u3002\n    //      - ref_count \u4e0d\u4e3a 0\uff0ccb1 \u4e0d\u4f1a\u88ab delete\u3002\n\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n} // main \u51fd\u6570\u7ed3\u675f\n\n// 5. p2 \u6790\u6784 (~s_ptr() \u88ab\u8c03\u7528)\n//    - p2.release_shared() \u88ab\u8c03\u7528:\n//      - p2.cb (\u5373 cb1) \u7684 ref_count \u4ece 1 \u51cf\u4e3a 0\u3002\n//      - delete cb1; \u6267\u884c\u3002\n//        - cb1-&gt;~ControlBlock() \u6267\u884c\u3002\n//          - delete cb1-&gt;p_; (\u5373 delete Resource(0) \u6307\u9488) \u6267\u884c\u3002\n//          - \u8f93\u51fa: \"Resource destroyed, data = 0\"\n</code></pre> <ul> <li>\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u53ef\u4ee5\u5b9e\u73b0\u7684 <code>swap</code> \uff0c\u7136\u540e\u8d4b\u503c\u8fd0\u7b97\u53ef\u4ee5\u6539\u5199\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\ntemplate&lt;typename T&gt;\nclass s_ptr {\nprivate:\n    struct ControlBlock {\n        T* p_;\n        size_t ref_count;\n        ControlBlock(T* ptr) : p_(ptr), ref_count(1) {}\n        ~ControlBlock() {\n            delete p_;\n        }\n    };\n\n    ControlBlock* cb;\n    void add_shared(){\n        if(cb){\n            cb-&gt;ref_count++;\n        }\n    }\n    void release_shared(){\n        if(cb){\n            cb-&gt;ref_count--;\n            if(cb-&gt;ref_count == 0){\n                delete cb;\n            }\n        }\n    }\npublic:\n    explicit s_ptr(T* ptr = nullptr) {\n        if(ptr){\n            cb = new ControlBlock(ptr);\n        }else{\n            cb = nullptr;\n        }\n    }\n    ~s_ptr() {\n        release_shared();\n    }\n\n    s_ptr(const s_ptr&amp; other) : cb(other.cb) {\n        add_shared();\n    }\n\n    s_ptr&amp; operator=(const s_ptr&amp; other) {\n        s_ptr(other).swap(*this);\n        return *this;\n    }\n\n    void swap(s_ptr&amp; other) noexcept{\n        std::swap(cb, other.cb);\n    }\n\n    T&amp; operator*() const{\n        return *(cb-&gt;p_);\n    }\n\n    T* operator-&gt;() const{\n        return cb-&gt;p_;\n    }\n\n    // \u4e0a\u9762\u4e24\u79cd\u5728 cb \u662f nullptr \u7684\u65f6\u5019\u4f1a\u8fd0\u884c\u51fa\u9519\n\n    T* get() const{\n        return cb ? cb-&gt;p_ : nullptr;\n    }\n\n    size_t use_count() const{\n        return cb ? cb-&gt;ref_count : 0;\n    }\n};\n\n\nint main(){\n    s_ptr&lt;Resource&gt; p2(new Resource(7));\n    cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n    cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    {\n        s_ptr&lt;Resource&gt; p1(new Resource);\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n\n        p2 = p1;\n\n        cout &lt;&lt; \"--- after copy ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u8f93\u51fa:</li> </ul> <pre><code>p2 = 0x2381f5f4970\np2-&gt;data = 7\ncount: 1\np1 = 0x2381f5f4da0\np1-&gt;data = 0\ncount: 1\nResource destroyed, data = 7\n--- after copy ---\np1 = 0x2381f5f4da0\np1-&gt;data = 0\ncount: 2\np2 = 0x2381f5f4da0\np2-&gt;data = 0\ncount: 2\n\nbefore quit ...\ncount: 1\nResource destroyed, data = 0\n</code></pre> <ul> <li>\u7b80\u5355\u6765\u8bf4\uff0c<code>this-&gt;swap(other)</code> \u4ea4\u6362\u4e86\u4e24\u4e2a <code>s_ptr</code> \u5bf9\u8c61\u6240\u7ba1\u7406\u7684\u8d44\u6e90\uff08\u5373\u5b83\u4eec\u5185\u90e8\u7684 <code>ControlBlock</code> \u6307\u9488\uff09\u3002</li> <li>\u4fee\u6539\u540e\uff0c <code>s_ptr(other)</code> \u8fd9\u4e00\u90e8\u5206\u521b\u5efa\u4e86\u4e00\u4e2a\u4e34\u65f6\u7684\u3001\u533f\u540d\u7684 <code>s_ptr</code> \u5bf9\u8c61\u3002\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u662f\u901a\u8fc7\u8c03\u7528 <code>s_ptr</code> \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570 <code>s_ptr(const s_ptr&amp; other)</code> \u6765\u521b\u5efa\u7684\uff0c\u5176\u4e2d <code>other</code> \u662f\u8d4b\u503c\u64cd\u4f5c\u7684\u6e90\u5bf9\u8c61\uff08\u7b49\u53f7\u53f3\u8fb9\u7684\u5bf9\u8c61\uff09\u3002\u5728\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e2d\u4e34\u65f6\u5bf9\u8c61\u7684 <code>cb</code> \u4f1a\u88ab\u8bbe\u7f6e\u4e3a <code>other.cb</code>\u3002\u7136\u540e\u8c03\u7528 <code>add_shared()</code>\uff0c\u4f7f\u5f97 <code>other.cb</code>\uff08\u73b0\u5728\u4e5f\u662f\u4e34\u65f6\u5bf9\u8c61\u7684 <code>cb</code>\uff09\u6240\u6307\u5411\u7684 <code>ControlBlock</code> \u7684\u5f15\u7528\u8ba1\u6570\u589e\u52a0 1\u3002\u6b64\u65f6\uff0c\u5982\u679c <code>other</code> \u6709\u6548\uff0c\u4e34\u65f6\u5bf9\u8c61\u5df2\u7ecf\u6210\u529f\u5730\u3001\u5b89\u5168\u5730\u6301\u6709\u4e86\u5bf9 <code>other</code> \u6240\u7ba1\u7406\u8d44\u6e90\u7684\u4e00\u4efd\u5171\u4eab\u6240\u6709\u6743\uff0c\u5e76\u4e14\u5f15\u7528\u8ba1\u6570\u4e5f\u5df2\u6b63\u786e\u66f4\u65b0\u3002\u521b\u5efa\u7684\u4e34\u65f6 <code>s_ptr</code> \u5bf9\u8c61\u63a5\u7740\u8c03\u7528\u5b83\u81ea\u5df1\u7684 <code>swap</code> \u6210\u5458\u51fd\u6570\uff0c\u53c2\u6570\u662f <code>*this</code>\uff08\u5373\u8d4b\u503c\u64cd\u4f5c\u7684\u76ee\u6807\u5bf9\u8c61\uff0c\u7b49\u53f7\u5de6\u8fb9\u7684\u5bf9\u8c61\uff09\u3002 <code>*this</code> \u5bf9\u8c61\uff08\u8d4b\u503c\u7684\u76ee\u6807\uff09\u73b0\u5728\u6301\u6709\u4e86\u4e34\u65f6\u5bf9\u8c61\u521a\u521a\u521b\u5efa\u5e76\u6b63\u786e\u7ba1\u7406\u7684 <code>cb</code>\uff08\u5373 <code>other</code> \u7684\u8d44\u6e90\u7684\u526f\u672c\uff0c\u5f15\u7528\u8ba1\u6570\u5df2\u6b63\u786e\uff09\u3002\u4e34\u65f6\u5bf9\u8c61\u73b0\u5728\u6301\u6709\u4e86 <code>*this</code> \u5bf9\u8c61\u539f\u6765\u7684 <code>cb</code>\u3002\u5728\u6574\u4e2a\u8868\u8fbe\u5f0f <code>s_ptr(other).swap(*this);</code> \u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u8fd9\u4e2a\u4e34\u65f6\u7684 <code>s_ptr</code> \u5bf9\u8c61\u56e0\u4e3a\u751f\u547d\u5468\u671f\u7ed3\u675f\u800c\u88ab\u9500\u6bc1\u3002\u4e34\u65f6\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570 <code>~s_ptr()</code> \u4f1a\u88ab\u8c03\u7528\u3002\u5728\u5176\u6790\u6784\u51fd\u6570\u4e2d\uff0c<code>release_shared()</code> \u4f1a\u88ab\u8c03\u7528\u3002\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u4e2a <code>release_shared()</code> \u64cd\u4f5c\u7684\u662f\u4e34\u65f6\u5bf9\u8c61\u5f53\u524d\u6301\u6709\u7684 <code>cb</code>\u2014\u2014\u4e5f\u5c31\u662f <code>*this</code> \u5bf9\u8c61\u5728\u4ea4\u6362\u4e4b\u524d\u6240\u6301\u6709\u7684\u90a3\u4e2a\u65e7\u7684 <code>cb</code>\u3002\u56e0\u6b64\uff0c<code>*this</code> \u7684\u65e7\u8d44\u6e90\uff08\u5982\u679c\u5b58\u5728\uff09\u7684\u5f15\u7528\u8ba1\u6570\u4f1a\u88ab\u6b63\u786e\u51cf\u5c11\uff0c\u5e76\u4e14\u5982\u679c\u5f15\u7528\u8ba1\u6570\u964d\u4e3a0\uff0c\u65e7\u8d44\u6e90\u548c\u5176\u63a7\u5236\u5757\u4f1a\u88ab\u6b63\u786e\u91ca\u653e\u3002\u6700\u540e\uff0c\u6309\u60ef\u4f8b\u8fd4\u56de\u5bf9 <code>*this</code> \u7684\u5f15\u7528\uff0c\u4ee5\u652f\u6301\u94fe\u5f0f\u8d4b\u503c\u3002</li> <li>\u4f7f\u7528 <code>Copy-and-Swap</code> \u7684\u597d\u5904\u662f\u5f3a\u5f02\u5e38\u5b89\u5168 (Strong Exception Guarantee): \u8fd9\u662f\u6700\u5927\u7684\u4f18\u70b9\u3002\u8d4b\u503c\u64cd\u4f5c\u8981\u4e48\u5b8c\u5168\u6210\u529f\uff0c\u8981\u4e48\u5728\u53d1\u751f\u5f02\u5e38\u65f6\u5bf9\u8c61\u72b6\u6001\u56de\u6eda\u5230\u64cd\u4f5c\u5f00\u59cb\u524d\u7684\u72b6\u6001\uff08\u5373 <code>*this</code> \u4fdd\u6301\u4e0d\u53d8\uff09\u3002\u6f5c\u5728\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u64cd\u4f5c\uff08\u4e3b\u8981\u662f\u8d44\u6e90\u83b7\u53d6\uff09\u90fd\u53d1\u751f\u5728\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u9636\u6bb5 <code>s_ptr(other)</code>\u3002\u5982\u679c\u8fd9\u4e00\u6b65\u5931\u8d25\uff0c<code>*this</code> \u6839\u672c\u6ca1\u6709\u88ab\u4fee\u6539\u3002<code>swap</code> \u64cd\u4f5c\u672c\u8eab\u662f <code>noexcept</code> \u7684\uff0c\u4fdd\u8bc1\u4e0d\u4f1a\u629b\u5f02\u5e38\u3002\u4e34\u65f6\u5bf9\u8c61\u7684\u6790\u6784\uff08\u91ca\u653e\u65e7\u8d44\u6e90\uff09\u4e5f\u662f\u5728\u6240\u6709\u5173\u952e\u64cd\u4f5c\u6210\u529f\u540e\u624d\u53d1\u751f\u3002</li> <li>\u603b\u7ed3 <code>main</code> \u51fd\u6570\u4e2d <code>p2 = p1;</code> \u7684\u6d41\u7a0b (\u4f7f\u7528 <code>Copy-and-Swap</code>)</li> </ul> <ol> <li><code>p2 = p1;</code> \u5f00\u59cb\u6267\u884c\u3002 <code>p2</code> \u5f53\u524d\u7ba1\u7406 <code>Resource(7)</code> (\u8bbe\u5176\u63a7\u5236\u5757\u4e3a <code>CB_7_old</code>\uff0c\u5f15\u7528\u8ba1\u6570\u4e3a 1)\u3002 <code>p1</code> \u5f53\u524d\u7ba1\u7406 <code>Resource(0)</code> (\u8bbe\u5176\u63a7\u5236\u5757\u4e3a <code>CB_0</code>\uff0c\u5f15\u7528\u8ba1\u6570\u4e3a 1)\u3002</li> <li><code>s_ptr temp(p1);</code> (\u6982\u5ff5\u4e0a\u7684\u4e34\u65f6\u5bf9\u8c61\u521b\u5efa)\uff0c\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 <code>s_ptr(p1)</code>\u3002<code>temp.cb</code> \u6307\u5411 <code>p1.cb</code> (\u5373 <code>CB_0</code>)\u3002<code>temp.add_shared()</code> \u6267\u884c\uff0c<code>CB_0-&gt;ref_count</code> \u4ece 1 \u53d8\u4e3a 2\u3002</li> <li><code>temp.swap(p2);</code> \uff0c <code>std::swap(temp.cb, p2.cb);</code> \uff0c <code>temp.cb</code> \u73b0\u5728\u6307\u5411 <code>p2</code> \u539f\u6765\u7684 <code>cb</code> (\u5373 <code>CB_7_old</code>\uff0c\u5176 <code>ref_count</code> \u4ecd\u4e3a 1)\u3002<code>p2.cb</code> \u73b0\u5728\u6307\u5411 <code>temp</code> \u539f\u6765\u7684 <code>cb</code> (\u5373 <code>CB_0</code>\uff0c\u5176 <code>ref_count</code> \u4e3a 2)\u3002</li> <li>\u4e34\u65f6\u5bf9\u8c61 <code>temp</code> \u9500\u6bc1 (<code>temp.~s_ptr()</code>)\uff0c <code>temp.release_shared()</code> \u88ab\u8c03\u7528\uff0c\u6b64\u65f6 <code>temp.cb</code> \u6307\u5411 <code>CB_7_old</code>\u3002<code>CB_7_old-&gt;ref_count</code> \u4ece 1 \u51cf\u4e3a 0\u3002<code>delete CB_7_old;</code> \u6267\u884c\u3002<code>CB_7_old-&gt;~ControlBlock()</code> \u6267\u884c\u3002<code>delete CB_7_old-&gt;p_;</code> (\u5373 <code>delete Resource(7)</code>) \u6267\u884c\u3002\u8f93\u51fa: \"Resource destroyed, data = 7\"\u3002</li> <li><code>operator=</code> \u8fd4\u56de <code>p2</code>\u3002\u6b64\u65f6 <code>p2.cb</code> \u6307\u5411 <code>CB_0</code>\uff0c<code>CB_0-&gt;ref_count</code> \u4e3a 2\u3002<code>p1.cb</code> \u4ecd\u7136\u6307\u5411 <code>CB_0</code>\uff0c<code>CB_0-&gt;ref_count</code> \u4e3a 2\u3002</li> </ol> <ul> <li>\u7136\u540e\u6211\u4eec\u5c1d\u8bd5 <code>move</code>\uff0c\u5148\u4f7f\u7528\u6807\u51c6\u5e93\u91cc\u9762\u7684\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\ntemplate&lt;typename T&gt;\nclass s_ptr {\nprivate:\n    struct ControlBlock {\n        T* p_;\n        size_t ref_count;\n        ControlBlock(T* ptr) : p_(ptr), ref_count(1) {}\n        ~ControlBlock() {\n            delete p_;\n        }\n    };\n\n    ControlBlock* cb;\n    void add_shared(){\n        if(cb){\n            cb-&gt;ref_count++;\n        }\n    }\n    void release_shared(){\n        if(cb){\n            cb-&gt;ref_count--;\n            if(cb-&gt;ref_count == 0){\n                delete cb;\n            }\n        }\n    }\npublic:\n    explicit s_ptr(T* ptr = nullptr) {\n        if(ptr){\n            cb = new ControlBlock(ptr);\n        }else{\n            cb = nullptr;\n        }\n    }\n    ~s_ptr() {\n        release_shared();\n    }\n\n    s_ptr(const s_ptr&amp; other) : cb(other.cb) {\n        add_shared();\n    }\n\n    s_ptr&amp; operator=(const s_ptr&amp; other) {\n        s_ptr(other).swap(*this);\n        return *this;\n    }\n\n    void swap(s_ptr&amp; other) noexcept{\n        std::swap(cb, other.cb);\n    }\n\n    T&amp; operator*() const{\n        return *(cb-&gt;p_);\n    }\n\n    T* operator-&gt;() const{\n        return cb-&gt;p_;\n    }\n\n    // \u4e0a\u9762\u4e24\u79cd\u5728 cb \u662f nullptr \u7684\u65f6\u5019\u4f1a\u8fd0\u884c\u51fa\u9519\n\n    T* get() const{\n        return cb ? cb-&gt;p_ : nullptr;\n    }\n\n    size_t use_count() const{\n        return cb ? cb-&gt;ref_count : 0;\n    }\n};\n\n\nint main(){\n    shared_ptr&lt;Resource&gt; p2(new Resource(7));\n    cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n    cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    {\n        shared_ptr&lt;Resource&gt; p1(new Resource);\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl; \n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n\n        p2 = std::move(p1);\n\n        cout &lt;&lt; \"--- after move ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        // cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl; \u8fd9\u91cc\u56e0\u4e3a\u79fb\u51fa\u53bb\u540e\u53d8\u6210 nullptr \u4e86\uff0c\u4e0d\u80fd\u518d\u8bbf\u95ee\u4e86\u3002\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u8f93\u51fa:</li> </ul> <pre><code>p2 = 0x1e843664970\np2-&gt;data = 7\ncount: 1\np1 = 0x1e843664da0\np1-&gt;data = 0\ncount: 1\nResource destroyed, data = 7\n--- after move ---\np1 = 0\ncount: 0\np2 = 0x1e843664da0\np2-&gt;data = 0\ncount: 1\n\nbefore quit ...\ncount: 1\nResource destroyed, data = 0\n</code></pre> <ul> <li>\u63a5\u4e0b\u6765\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\ntemplate&lt;typename T&gt;\nclass s_ptr {\nprivate:\n    struct ControlBlock {\n        T* p_;\n        size_t ref_count;\n        ControlBlock(T* ptr) : p_(ptr), ref_count(1) {}\n        ~ControlBlock() {\n            delete p_;\n        }\n    };\n\n    ControlBlock* cb;\n    void add_shared(){\n        if(cb){\n            cb-&gt;ref_count++;\n        }\n    }\n    void release_shared(){\n        if(cb){\n            cb-&gt;ref_count--;\n            if(cb-&gt;ref_count == 0){\n                delete cb;\n            }\n        }\n    }\npublic:\n    explicit s_ptr(T* ptr = nullptr) {\n        if(ptr){\n            cb = new ControlBlock(ptr);\n        }else{\n            cb = nullptr;\n        }\n    }\n    ~s_ptr() {\n        release_shared();\n    }\n\n    s_ptr(const s_ptr&amp; other) : cb(other.cb) {\n        add_shared();\n    }\n\n    s_ptr&amp; operator=(const s_ptr&amp; other) {\n        s_ptr(other).swap(*this);\n        return *this;\n    }\n\n    void swap(s_ptr&amp; other) noexcept{\n        std::swap(cb, other.cb);\n    }\n\n    s_ptr(s_ptr &amp;&amp;other) noexcept : cb(other.cb){\n        other.cb = nullptr;\n    }\n\n    s_ptr&amp; operator=(s_ptr&amp;&amp; other) noexcept{\n        s_ptr(std::move(other)).swap(*this);\n        return *this;\n    }\n\n    T&amp; operator*() const{\n        return *(cb-&gt;p_);\n    }\n\n    T* operator-&gt;() const{\n        return cb-&gt;p_;\n    }\n\n    // \u4e0a\u9762\u4e24\u79cd\u5728 cb \u662f nullptr \u7684\u65f6\u5019\u4f1a\u8fd0\u884c\u51fa\u9519\n\n    T* get() const{\n        return cb ? cb-&gt;p_ : nullptr;\n    }\n\n    size_t use_count() const{\n        return cb ? cb-&gt;ref_count : 0;\n    }\n};\n\n\nint main(){\n    s_ptr&lt;Resource&gt; p2(new Resource(7));\n    cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n    cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    {\n        s_ptr&lt;Resource&gt; p1(new Resource);\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl; \n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n\n        p2 = std::move(p1);\n\n        cout &lt;&lt; \"--- after move ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        // cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl; \u8fd9\u91cc\u56e0\u4e3a\u79fb\u51fa\u53bb\u540e\u53d8\u6210 nullptr \u4e86\uff0c\u4e0d\u80fd\u518d\u8bbf\u95ee\u4e86\u3002\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u8f93\u51fa:</li> </ul> <pre><code>p2 = 0x260c30f4970\np2-&gt;data = 7\ncount: 1\np1 = 0x260c30f4da0\np1-&gt;data = 0\ncount: 1\nResource destroyed, data = 7\n--- after move ---\np1 = 0\ncount: 0\np2 = 0x260c30f4da0\np2-&gt;data = 0\ncount: 1\n\nbefore quit ...\ncount: 1\nResource destroyed, data = 0\n</code></pre> <ul> <li>\u4e00\u822c\u8fd8\u6709\u4e00\u4e2a <code>reset</code> \u7684\u529f\u80fd\u4e5f\u53ef\u4ee5\u7528\u4e0a <code>swap</code>\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Resource {\n    int data;\n    Resource(int d = 0) : data(d) {}\n    ~Resource() {\n        cout &lt;&lt; \"Resource destroyed, data = \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\ntemplate&lt;typename T&gt;\nclass s_ptr {\nprivate:\n    struct ControlBlock {\n        T* p_;\n        size_t ref_count;\n        ControlBlock(T* ptr) : p_(ptr), ref_count(1) {}\n        ~ControlBlock() {\n            delete p_;\n        }\n    };\n\n    ControlBlock* cb;\n    void add_shared(){\n        if(cb){\n            cb-&gt;ref_count++;\n        }\n    }\n    void release_shared(){\n        if(cb){\n            cb-&gt;ref_count--;\n            if(cb-&gt;ref_count == 0){\n                delete cb;\n            }\n        }\n    }\npublic:\n    explicit s_ptr(T* ptr = nullptr) {\n        if(ptr){\n            cb = new ControlBlock(ptr);\n        }else{\n            cb = nullptr;\n        }\n    }\n    ~s_ptr() {\n        release_shared();\n    }\n\n    s_ptr(const s_ptr&amp; other) : cb(other.cb) {\n        add_shared();\n    }\n\n    s_ptr&amp; operator=(const s_ptr&amp; other) {\n        s_ptr(other).swap(*this);\n        return *this;\n    }\n\n    void swap(s_ptr&amp; other) noexcept{\n        std::swap(cb, other.cb);\n    }\n\n    s_ptr(s_ptr &amp;&amp;other) noexcept : cb(other.cb){\n        other.cb = nullptr;\n    }\n\n    s_ptr&amp; operator=(s_ptr&amp;&amp; other) noexcept{\n        s_ptr(std::move(other)).swap(*this);\n        return *this;\n    }\n\n    void reset(T* ptr = nullptr){\n        s_ptr(ptr).swap(*this);\n    }\n\n    T&amp; operator*() const{\n        return *(cb-&gt;p_);\n    }\n\n    T* operator-&gt;() const{\n        return cb-&gt;p_;\n    }\n\n    // \u4e0a\u9762\u4e24\u79cd\u5728 cb \u662f nullptr \u7684\u65f6\u5019\u4f1a\u8fd0\u884c\u51fa\u9519\n\n    T* get() const{\n        return cb ? cb-&gt;p_ : nullptr;\n    }\n\n    size_t use_count() const{\n        return cb ? cb-&gt;ref_count : 0;\n    }\n};\n\n\nint main(){\n    s_ptr&lt;Resource&gt; p2(new Resource(7));\n    cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n    cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    {\n        s_ptr&lt;Resource&gt; p1(new Resource);\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl; \n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n\n        p2 = std::move(p1);\n\n        cout &lt;&lt; \"--- after move ---\" &lt;&lt; endl;\n        cout &lt;&lt; \"p1 = \" &lt;&lt; p1.get() &lt;&lt; endl;\n        // cout &lt;&lt; \"p1-&gt;data = \" &lt;&lt; p1-&gt;data &lt;&lt; endl; \u8fd9\u91cc\u56e0\u4e3a\u79fb\u51fa\u53bb\u540e\u53d8\u6210 nullptr \u4e86\uff0c\u4e0d\u80fd\u518d\u8bbf\u95ee\u4e86\u3002\n        cout &lt;&lt; \"count: \" &lt;&lt; p1.use_count() &lt;&lt; endl;\n        cout &lt;&lt; \"p2 = \" &lt;&lt; p2.get() &lt;&lt; endl;\n        cout &lt;&lt; \"p2-&gt;data = \" &lt;&lt; p2-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nbefore quit ... \" &lt;&lt; endl;\n    cout &lt;&lt; \"count: \" &lt;&lt; p2.use_count() &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u8f93\u51fa:</li> </ul> <pre><code>p2 = 0x241764c4970\np2-&gt;data = 7\ncount: 1\np1 = 0x241764c4da0\np1-&gt;data = 0\ncount: 1\nResource destroyed, data = 7\n--- after move ---\np1 = 0\ncount: 0\np2 = 0x241764c4da0\np2-&gt;data = 0\ncount: 1\n\nbefore quit ...\ncount: 1\nResource destroyed, data = 0\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter14/#further-reading","title":"Further reading","text":"Effective_Modern_C++__Item-18   567 KB / 2025-05-25 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter15/","title":"Chapter 15 | Miscellaneous Topics","text":"<p> \u7ea6 3383 \u4e2a\u5b57  253 \u884c\u4ee3\u7801  7 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 20 \u5206\u949f</p>"},{"location":"Computer_Science/OOP/Chapter15/#named-casts","title":"Named casts","text":"<p>The C-style cast is:</p> <ul> <li>dangerous because it can do logically differentconversion.</li> <li>not search-friendly</li> </ul> <p>If you must cast things, use a named cast:</p> <ul> <li><code>static_cast</code> ,less likely to make mistakes</li> <li><code>dynamic_cast</code></li> <li> <p><code>reinterpret_cast</code></p> </li> <li> <p><code>static_cast</code> \u6700\u5927\u7684\u597d\u5904\u5728\u4e8e\u5b83\u80fd\u6e05\u6670\u5730\u3001\u65e0\u6b67\u4e49\u5730\u8868\u8fbe\u7a0b\u5e8f\u5458\u7684\u8f6c\u6362\u610f\u56fe\uff0c\u5e76\u4e14\u5728\u7f16\u8bd1\u65f6\u63d0\u4f9b\u4e86\u4e00\u5b9a\u7a0b\u5ea6\u7684\u7c7b\u578b\u68c0\u67e5\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3001\u53ef\u7ef4\u62a4\u6027\u548c\u5b89\u5168\u6027\u3002</p> </li> <li>\u9690\u5f0f\u8f6c\u6362 (<code>a = d;</code>)\uff1a\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8fdb\u884c\u8f6c\u6362\u3002\u867d\u7136\u65b9\u4fbf\uff0c\u4f46\u6709\u65f6\u53ef\u80fd\u9690\u85cf\u4e00\u4e9b\u4e0d\u6613\u5bdf\u89c9\u7684\u9519\u8bef\u6216\u7cbe\u5ea6\u635f\u5931\u3002\u8bfb\u8005\u53ef\u80fd\u9700\u8981\u601d\u8003\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u7c7b\u578b\u7684\u8f6c\u6362\u3002</li> <li>C\u98ce\u683c\u8f6c\u6362 (<code>(int)d</code>)\uff1a\u867d\u7136\u662f\u663e\u5f0f\u7684\uff0c\u4f46\u5b83\u8fc7\u4e8e\u5f3a\u5927\u548c\u7c97\u66b4\u3002\u5b83\u53ef\u4ee5\u6267\u884c\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u8f6c\u6362\uff08\u6bd4\u5982 <code>static_cast</code>, <code>reinterpret_cast</code> \u751a\u81f3 <code>const_cast</code> \u7684\u67d0\u4e9b\u529f\u80fd\uff09\uff0c\u8fd9\u4f7f\u5f97\u4ee3\u7801\u610f\u56fe\u4e0d\u591f\u660e\u786e\uff0c\u5e76\u4e14\u5bb9\u6613\u51fa\u9519\u3002\u6bd4\u5982\uff0c\u5b83\u53ef\u80fd\u79fb\u9664 <code>const</code> \u5c5e\u6027\uff0c\u6216\u8005\u5728\u4e0d\u76f8\u5173\u7684\u6307\u9488\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\uff0c\u8fd9\u4e9b\u90fd\u53ef\u80fd\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</li> <li><code>static_cast&lt;int&gt;(d)</code>\uff1a\u8fd9\u79cd\u5199\u6cd5\u975e\u5e38\u660e\u786e\u5730\u544a\u8bc9\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u4ee5\u53ca\u7f16\u8bd1\u5668\uff1a\"\u6211\u6253\u7b97\u5728\u8fd9\u91cc\u8fdb\u884c\u4e00\u4e2a\u9759\u6001\u7684\u3001\u7f16\u8bd1\u65f6\u53ef\u786e\u5b9a\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u5c06 <code>double</code> \u7c7b\u578b\u7684\u503c\u8f6c\u6362\u4e3a <code>int</code> \u7c7b\u578b\u3002\" \u5b83\u610f\u56fe\u660e\u786e\uff0c\u53ea\u7528\u4e8e\u90a3\u4e9b\u7f16\u8bd1\u5668\u8ba4\u4e3a\"\u5408\u7406\"\u7684\u8f6c\u6362\uff08\u4f8b\u5982\uff0c\u6570\u503c\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u6216\u8005\u5411\u4e0a/\u5411\u4e0b\u8f6c\u578b\u4f46\u6ca1\u6709\u8fd0\u884c\u65f6\u68c0\u67e5\uff09\u3002</li> </ul> <pre><code>double d=7.1;\nint a;\n\na = d; // implicit\n\na =(int)d; // explicit\n\na = static_cast&lt;int&gt;(d); // exact meaning\n</code></pre> <ul> <li>\u5bf9\u4e8e\u7b2c\u4e00\u79cd C \u98ce\u683c\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u5728\u8fd9\u91cc\u662f\"\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u7684\"\u3002\u7f16\u8bd1\u5668\u901a\u5e38\u4e0d\u4f1a\u963b\u6b62\u8fd9\u79cd\u8f6c\u6362\uff0c\u56e0\u4e3a\u5b83\u8d4b\u4e88\u4e86\u7a0b\u5e8f\u5458\u6781\u5927\u7684\u81ea\u7531\u5ea6\u3002\u867d\u7136\u7f16\u8bd1\u5668\u5141\u8bb8\u4f60\u628a <code>a</code> \u7684\u5730\u5740\u5f53\u4f5c\u4e00\u4e2a <code>double</code> \u7c7b\u578b\u6570\u636e\u7684\u5730\u5740\u6765\u5bf9\u5f85\uff0c\u4f46\u53d8\u91cf <code>a</code> \u672c\u8eab\u4ecd\u7136\u662f\u4e00\u4e2a <code>int</code>\u3002<code>a</code> \u5728\u5185\u5b58\u4e2d\u53ea\u5360\u7528\u4e86 <code>sizeof(int)</code> \u5927\u5c0f\u7684\u7a7a\u95f4\u3002\u5982\u679c\u540e\u7eed\u4ee3\u7801\u901a\u8fc7\u6307\u9488 <code>p</code> \u53bb\u89e3\u5f15\u7528\uff0c\u5c31\u4f1a\u53d1\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</li> <li>\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u3002<code>static_cast</code> \u7528\u4e8e\u5728\u76f8\u5173\u7684\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\uff0c\u4f8b\u5982\u6570\u503c\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u6216\u8005\u5728\u7c7b\u7ee7\u627f\u5c42\u6b21\u7ed3\u6784\u4e2d\u8fdb\u884c\u5411\u4e0a\u6216\u5411\u4e0b\u8f6c\u578b\uff08\u5411\u4e0b\u8f6c\u578b\u65f6\u6ca1\u6709\u8fd0\u884c\u65f6\u68c0\u67e5\uff09\u3002<code>int*</code> \u548c <code>double*</code> \u662f\u6307\u5411\u5b8c\u5168\u4e0d\u540c\u4e14\u4e0d\u76f8\u5173\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\u3002<code>static_cast</code> \u8ba4\u4e3a\u8fd9\u79cd\u8f6c\u6362\u5728\u903b\u8f91\u4e0a\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u6216\u8005\u8bf4\u4e0d\u662f\u4e00\u4e2a\u201c\u5408\u7406\u7684\u201d\u9759\u6001\u8f6c\u6362\uff0c\u56e0\u6b64\u4f1a\u7981\u6b62\u5b83\u3002\u5b83\u80fd\u9632\u6b62\u7a0b\u5e8f\u5458\u610f\u5916\u5730\u8fdb\u884c\u8fd9\u79cd\u4f4e\u7ea7\u7684\u3001\u53ef\u80fd\u7834\u574f\u7c7b\u578b\u7cfb\u7edf\u7684\u8f6c\u6362\u3002</li> <li>\u7b2c\u4e09\u79cd\u8fd9\u4e2a\u64cd\u4f5c\u7b26\u662f\u4e13\u95e8\u8bbe\u8ba1\u7528\u6765\u8fdb\u884c\u4f4e\u7ea7\u522b\u3001\u5e73\u53f0\u76f8\u5173\u7684\u6307\u9488\u7c7b\u578b\u8f6c\u6362\u7684\uff0c\u5b83\u53ef\u4ee5\u5c06\u4efb\u4f55\u6307\u9488\u7c7b\u578b\u8f6c\u6362\u4e3a\u51e0\u4e4e\u4efb\u4f55\u5176\u4ed6\u6307\u9488\u7c7b\u578b\uff0c\u6216\u8005\u5c06\u6307\u9488\u8f6c\u6362\u4e3a\u8db3\u591f\u5927\u7684\u6574\u6570\u7c7b\u578b\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u6709\u65f6\u4e3a\u4e86\u5c06\u6307\u9488\u672c\u8eab\u4f5c\u4e3a\u952e\u503c\u5b58\u50a8\u5728\u67d0\u4e9b\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6216\u8005\u8fdb\u884c\u67d0\u4e9b\u4f4d\u64cd\u4f5c\uff0c\uff08\u54c8\u5e0c\uff09\uff0c\u9700\u8981\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u6574\u6570\u3002<code>reinterpret_cast</code> \u53ef\u4ee5\u5b8c\u6210\u6307\u9488\u5230\u6574\u6570\u4ee5\u53ca\u6574\u6570\u5230\u6307\u9488\u7684\u8f6c\u6362\uff08\u524d\u63d0\u662f\u6574\u6570\u7c7b\u578b\u8db3\u591f\u5927\u4ee5\u5bb9\u7eb3\u6307\u9488\uff09\u3002\u4ee5\u53ca\u5728\u5e8f\u5217\u5316\u3001\u81ea\u5b9a\u4e49\u5185\u5b58\u7ba1\u7406\u7b49\u573a\u666f\u4e0b\uff0c\u53ef\u80fd\u9700\u8981\u5c06\u5bf9\u8c61\u7684\u539f\u59cb\u5b57\u8282\u5e8f\u5217\u89c6\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u3002\u867d\u7136 <code>reinterpret_cast</code> \u63d0\u4f9b\u4e86\u8fd9\u79cd\u80fd\u529b\uff0c\u4f46\u5b83\u672c\u8eab\u5e76\u4e0d\u4fdd\u8bc1\u8f6c\u6362\u540e\u7684\u6307\u9488\u89e3\u5f15\u7528\u662f\u5b89\u5168\u7684\u3002\u5c31\u50cf C \u98ce\u683c\u8f6c\u6362\u4e00\u6837\uff0c\u5982\u679c <code>p</code> \u6307\u5411\u7684\u5185\u5b58\uff08\u5373 <code>a</code> \u7684\u5185\u5b58\uff09\u88ab\u5f53\u4f5c <code>double</code> \u6765\u4f7f\u7528\uff0c\u4ecd\u7136\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002<code>reinterpret_cast</code> \u53ea\u662f\u5141\u8bb8\u4f60\u8fdb\u884c\u8fd9\u79cd\"\u91cd\u65b0\u89e3\u91ca\u5730\u5740\"\u7684\u64cd\u4f5c\uff0c\u540e\u7eed\u7684\u5185\u5b58\u8bbf\u95ee\u5b89\u5168\u5b8c\u5168\u7531\u7a0b\u5e8f\u5458\u81ea\u5df1\u4fdd\u8bc1\u3002</li> </ul> <pre><code>int a =7;\ndouble* p;\n\np = (double*)&amp;a; // ok(but a is not a double)\n\np = static_cast&lt;double*&gt;(&amp;a); // error\n\np = reinterpret_cast&lt;double*&gt;(&amp;a); // ok: I really mean it\n</code></pre> <ul> <li>\u5c1d\u8bd5\u5c06\u5e38\u91cf <code>c</code> \u7684\u5730\u5740 (<code>&amp;c</code>\uff0c\u7c7b\u578b\u662f <code>const int*</code>\uff0c\u5373\u6307\u5411\u5e38\u91cf\u6574\u6570\u7684\u6307\u9488) \u8d4b\u503c\u7ed9\u4e00\u4e2a\u666e\u901a\u6574\u578b\u6307\u9488 <code>q</code> (\u7c7b\u578b\u662f <code>int*</code>)\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u8fd9\u91cc\u62a5\u9519\u3002\u8fd9\u662f C++ \u7c7b\u578b\u7cfb\u7edf\u7684\u4e00\u4e2a\u57fa\u672c\u5b89\u5168\u89c4\u5219\u3002\u5982\u679c\u5141\u8bb8\u8fd9\u6837\u505a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6307\u9488 <code>q</code> \u6765\u95f4\u63a5\u4fee\u6539 <code>const</code> \u5e38\u91cf <code>c</code> \u7684\u503c\uff08\u4f8b\u5982 <code>*q = 10;</code>\uff09\uff0c\u8fd9\u5c31\u8fdd\u80cc\u4e86 <code>c</code> \u88ab\u58f0\u660e\u4e3a <code>const</code> \u7684\u521d\u8877\u3002\u7f16\u8bd1\u5668\u4f1a\u963b\u6b62\u8fd9\u79cd\u6f5c\u5728\u7684\u5bf9 <code>const</code> \u5c5e\u6027\u7684\u7834\u574f\u3002</li> <li>\u5e38\u91cf <code>c</code> \u88ab\u58f0\u660e\u4e3a <code>const</code>\u3002\u5c3d\u7ba1\u4f60\u901a\u8fc7 C \u98ce\u683c\u8f6c\u6362\u6b3a\u9a97\u4e86\u7f16\u8bd1\u5668\uff0c\u8ba9 <code>q</code> \u6307\u5411\u4e86 <code>c</code>\uff0c\u4f46 <code>c</code> \u6240\u5728\u7684\u5185\u5b58\u533a\u57df\u5728\u903b\u8f91\u4e0a\uff08\u6709\u65f6\u751a\u81f3\u662f\u7269\u7406\u4e0a\uff0c\u6bd4\u5982\u5b58\u50a8\u5728\u53ea\u8bfb\u5185\u5b58\u6bb5\uff09\u88ab\u8ba4\u4e3a\u662f\u4e0d\u53ef\u4fee\u6539\u7684\u3002\u5c1d\u8bd5\u901a\u8fc7 <code>q</code> \u4fee\u6539 <code>c</code> \u7684\u503c\uff0c\u4ecd\u7136\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</li> <li><code>static_cast</code> \u4e0d\u80fd\u7528\u6765\u79fb\u9664 <code>const</code> \u5c5e\u6027 (<code>cast away const-ness</code>)\u3002\u8fd9\u662f <code>static_cast</code> \u8bbe\u8ba1\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u65e8\u5728\u63d0\u4f9b\u6bd4 C \u98ce\u683c\u8f6c\u6362\u66f4\u5b89\u5168\u7684\u8f6c\u6362\u3002</li> <li><code>const_cast</code> \u662f C++ \u4e2d\u552f\u4e00\u4e13\u95e8\u7528\u6765\u6dfb\u52a0\u6216\u79fb\u9664 <code>const</code> (\u4ee5\u53ca <code>volatile</code>) \u4fee\u9970\u7b26\u7684\u547d\u540d\u8f6c\u6362\u3002\u6709\u4e9b\u8001\u7684 API \u53ef\u80fd\u671f\u671b\u63a5\u6536\u4e00\u4e2a\u975e <code>const</code> \u6307\u9488\uff0c\u5373\u4f7f\u5b83\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u4fee\u6539\u6240\u6307\u5411\u7684\u6570\u636e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u7a0b\u5e8f\u5458\u786e\u4fe1\u8be5\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528 <code>const_cast</code> \u6765\"\u6b3a\u9a97\" API\u3002</li> <li>\u5373\u4f7f\u4f7f\u7528\u4e86 <code>const_cast&lt;int*&gt;(&amp;c)</code> \u4f7f\u5f97 <code>q</code> \u6307\u5411\u4e86 <code>c</code> \u5e76\u4e14 <code>q</code> \u7684\u7c7b\u578b\u662f <code>int*</code>\uff0c\u5982\u679c <code>c</code> \u6700\u521d\u5c31\u88ab\u58f0\u660e\u4e3a <code>const</code> \u5bf9\u8c61 (\u50cf\u672c\u4f8b\u4e2d\u7684 <code>const int c = i;</code>)\uff0c\u90a3\u4e48\u4efb\u4f55\u901a\u8fc7 <code>q</code> \u6765\u4fee\u6539 <code>c</code> \u7684\u503c\u7684\u5c1d\u8bd5 (\u4f8b\u5982 <code>*q = 2;</code>) \u4ecd\u7136\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002<code>const_cast</code> \u53ea\u662f\u79fb\u9664\u4e86\u6307\u9488\u6216\u5f15\u7528\u4e0a\u7684 <code>const</code> \u9650\u5236\uff0c\u5b83\u5e76\u6ca1\u6709\u6539\u53d8\u5bf9\u8c61\u672c\u8eab\u7684 <code>const</code> \u5c5e\u6027\u3002\u5982\u679c\u5bf9\u8c61\u672c\u8eab\u5c31\u662f <code>const</code> \u7684\uff0c\u4fee\u6539\u5b83\u5c31\u662f\u975e\u6cd5\u7684\u3002</li> </ul> <pre><code>int i = 7;\nconst int c = i;\nint* q;\n\nq = &amp;c; // error\n\nq = (int*)&amp;c; // ok (but is *q=2 really allowed?)\n\nq = static_cast&lt;int*&gt;(&amp;c); // error\n\nq = const_cast&lt;int*&gt;(&amp;c); //I really mean it\n</code></pre> <ul> <li>\u5411\u4e0a\u9020\u578b (Upcasting) \u662f\u53ef\u4ee5\u7684\u3002\u5982\u4ee3\u7801\u4e2d <code>A *pa = new B;</code> \u6240\u793a\uff0c\u5c06\u6d3e\u751f\u7c7b\u6307\u9488 (<code>B*</code>) \u8f6c\u6362\u4e3a\u57fa\u7c7b\u6307\u9488 (<code>A*</code>) \u662f\u9690\u5f0f\u5141\u8bb8\u4e14\u7edd\u5bf9\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u6d3e\u751f\u7c7b\u5bf9\u8c61\u5305\u542b\u4e86\u57fa\u7c7b\u7684\u6240\u6709\u6210\u5458\u548c\u884c\u4e3a\u3002</li> <li>\u5411\u4e0b\u8f6c\u578b\uff08\u5c06\u57fa\u7c7b\u6307\u9488\u8f6c\u6362\u4e3a\u6d3e\u751f\u7c7b\u6307\u9488\uff09\u786e\u5b9e\u53ef\u4ee5\u4f7f\u7528 <code>static_cast</code>\uff0c\u4f46\u5b83\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u9664\u975e\u4f60\u767e\u5206\u4e4b\u767e\u786e\u5b9a\u6307\u9488\u786e\u5b9e\u6307\u5411\u7684\u662f\u76ee\u6807\u6d3e\u751f\u7c7b\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u5bf9\u4e8e\u591a\u6001\u7c7b\u578b\uff0c\u66f4\u5b89\u5168\u7684\u5411\u4e0b\u8f6c\u578b\u65b9\u5f0f\u662f\u4f7f\u7528 <code>dynamic_cast</code>\u3002\u6b64\u65f6\u5f53\u4f60\u901a\u8fc7 <code>pc1</code> (\u5b83\u88ab\u8ba4\u4e3a\u662f <code>C*</code>) \u6765\u8bbf\u95ee\u6210\u5458\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u6309\u7167 <code>C</code> \u7c7b\u7684\u5185\u5b58\u5e03\u5c40\u6765\u89e3\u91ca <code>B</code> \u5bf9\u8c61\u7684\u5185\u5b58\u3002\u5982\u679c <code>C</code> \u7c7b\u6709 <code>B</code> \u7c7b\u6ca1\u6709\u7684\u6210\u5458\uff0c\u6216\u8005\u6210\u5458\u5e03\u5c40\u4e0d\u540c\uff08\u9664\u4e86\u5171\u540c\u57fa\u7c7b <code>A</code> \u7684\u90e8\u5206\uff09\uff0c\u90a3\u4e48\u8bbf\u95ee\u8fd9\u4e9b\u6210\u5458\u5c31\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff08\u6bd4\u5982\u8bfb\u53d6\u5230\u65e0\u610f\u4e49\u7684\u6570\u636e\u3001\u5199\u5165\u4e0d\u8be5\u5199\u5165\u7684\u5185\u5b58\u533a\u57df\u3001\u7a0b\u5e8f\u5d29\u6e83\u7b49\uff09\u3002</li> <li><code>dynamic_cast</code> \u4f1a\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u68c0\u67e5 <code>pa</code> \u6240\u6307\u5411\u7684\u5bf9\u8c61\u7684\u771f\u5b9e\u7c7b\u578b\u3002\u8fd9\u4e2a\u68c0\u67e5\u4f9d\u8d56\u4e8e\u5bf9\u8c61\u7684 <code>RTTI</code> (Run-Time Type Information\uff0c\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f)\uff0c\u800c <code>RTTI</code> \u7684\u5b58\u5728\u901a\u5e38\u662f\u56e0\u4e3a\u57fa\u7c7b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u865a\u51fd\u6570\uff08\u6bd4\u5982\u8fd9\u91cc\u7684 <code>A::f()</code>\uff09\u3002\u5b83\u4f1a\u5224\u65ad <code>pa</code> \u6307\u5411\u7684\u5bf9\u8c61\uff08\u5373\u90a3\u4e2a <code>B</code> \u5bf9\u8c61\uff09\u662f\u5426\u53ef\u4ee5\u88ab\u5b89\u5168\u5730\u89c6\u4e3a\u4e00\u4e2a <code>C</code> \u5bf9\u8c61\u3002\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u88ab\u5b89\u5168\u5730\u89c6\u4e3a <code>C</code> \u5bf9\u8c61\uff0c\u610f\u5473\u7740\u5b83\u672c\u8eab\u5c31\u662f <code>C</code> \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u6216\u8005\u5b83\u662f <code>C</code> \u7684\u6d3e\u751f\u7c7b\u5bf9\u8c61\u3002\u5982\u679c\u68c0\u67e5\u6210\u529f (\u5373 <code>pa</code> \u786e\u5b9e\u6307\u5411 <code>C</code> \u5bf9\u8c61\u6216 <code>C</code> \u7684\u6d3e\u751f\u7c7b\u5bf9\u8c61)\uff0c<code>dynamic_cast</code> \u4f1a\u8fd4\u56de\u8f6c\u6362\u540e\u7684\u3001\u6307\u5411\u8be5\u5bf9\u8c61\u7684 <code>C*</code> \u6307\u9488\u3002\u5982\u679c\u68c0\u67e5\u5931\u8d25 (\u5982\u672c\u4f8b\u4e2d\uff0c<code>pa</code> \u6307\u5411\u7684\u662f <code>B</code> \u5bf9\u8c61\uff0c\u800c <code>B</code> \u548c <code>C</code> \u662f\u4e0d\u76f8\u5173\u7684\u5144\u5f1f\u7c7b)\uff0c\u5bf9\u4e8e\u6307\u9488\u7c7b\u578b\u7684 <code>dynamic_cast</code>\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6307\u9488 (<code>nullptr</code>)\u3002\u5982\u679c <code>dynamic_cast</code> \u7528\u4e8e (\u5f15\u7528&amp;) \u7c7b\u578b\u5e76\u4e14\u8f6c\u6362\u5931\u8d25\uff0c\u5b83\u4f1a\u629b\u51fa\u4e00\u4e2a <code>std::bad_cast</code> \u5f02\u5e38\u3002</li> <li>\u7531\u4e8e <code>dynamic_cast</code> \u9700\u8981\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u8fd9\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u6027\u80fd\u5f00\u9500\u3002</li> </ul> <pre><code>struct A{\n    virtual void f() {}\n};\nstruct B : public A {};\nstruct C : public A {};\n\nint main(){\n    A *pa = new B;\n    C *pc = static_cast&lt;C*&gt;(pa); // 0K: but *pa is B!\n    C *pc = dynamic_cast&lt;C*&gt;(pa); // return nullptr\n}\n</code></pre> <ul> <li><code>dynamic_cast</code> \u901a\u5e38\u9700\u8981\u4f5c\u7528\u4e8e\u591a\u6001\u7c7b\u578b\uff08\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u865a\u51fd\u6570\u7684\u7c7b\uff09\u7684\u6307\u9488\u6216\u5f15\u7528\u624d\u80fd\u6267\u884c\u5176\u8fd0\u884c\u65f6\u7684\u7c7b\u578b\u68c0\u67e5\u3002\u6b64\u65f6\u7c7b <code>A</code> \u6ca1\u6709\u865a\u51fd\u6570\u8868 (<code>vtable</code>)\uff0c\u56e0\u6b64\u6ca1\u6709\u8fd0\u884c\u65f6\u7684\u7c7b\u578b\u4fe1\u606f\u53ef\u4f9b <code>dynamic_cast</code> \u4f7f\u7528\u6765\u5b89\u5168\u5730\u8fdb\u884c\u5411\u4e0b\u8f6c\u578b\u3002</li> <li><code>static_cast</code> \u5728\u7f16\u8bd1\u65f6\u8fdb\u884c\u8f6c\u6362\uff0c\u5b83\u4e0d\u5173\u5fc3\u5bf9\u8c61\u8fd0\u884c\u65f6\u7684\u771f\u5b9e\u7c7b\u578b\uff0c\u53ea\u6839\u636e\u58f0\u660e\u7684\u7c7b\u578b\u548c\u7ee7\u627f\u5173\u7cfb\u6765\u5224\u65ad\u8f6c\u6362\u662f\u5426\"\u8868\u9762\u4e0a\"\u5408\u6cd5\u3002</li> </ul> <pre><code>struct A{\n    // virtual void f() {}\n};\nstruct B : public A {};\nstruct C : public A {};\n\nint main(){\n    A *pa = new B;\n    C *pc = static_cast&lt;C*&gt;(pa); // 0K: but *pa is B!\n    C *pc = dynamic_cast&lt;C*&gt;(pa); // ERROR\n}\n</code></pre> <ul> <li><code>reinterpret_cast</code> \u7684\u672c\u8d28\u662f\u975e\u5e38\u5e95\u5c42\u7684\u64cd\u4f5c\u3002\u5b83\u7ed5\u8fc7\u4e86 C++ \u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u76f4\u63a5\u5bf9\u5185\u5b58\u5730\u5740\u8fdb\u884c\u64cd\u4f5c\u3002<code>reinterpret_cast</code> \u544a\u8bc9\u7f16\u8bd1\u5668\uff1a\"\u628a\u8fd9\u4e2a\u6307\u9488\uff08\u6216\u5176\u6307\u5411\u7684\u5185\u5b58\u5757\u7684\u8d77\u59cb\u5730\u5740\uff09\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u76f4\u63a5\u89e3\u91ca\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u6307\u9488\uff08\u6216\u5176\u6307\u5411\u7684\u5185\u5b58\u5757\u7684\u8d77\u59cb\u5730\u5740\uff09\u3002\" \u5b83\u4e0d\u5173\u5fc3\u8fd9\u4e24\u79cd\u7c7b\u578b\u662f\u5426\u6709\u4efb\u4f55\u903b\u8f91\u4e0a\u7684\u5173\u8054\uff0c\u53ea\u8fdb\u884c\u4f4d\u6a21\u5f0f\u7684\u91cd\u65b0\u89e3\u91ca\u3002\u5b83\u4e0d\u8fdb\u884c\u4efb\u4f55\u6709\u610f\u4e49\u7684\u7c7b\u578b\u8f6c\u6362\u6216\u6570\u636e\u8c03\u6574\u3002\u5b83\u53ea\u662f\u7b80\u5355\u7c97\u66b4\u5730\u6539\u53d8\u4e86\u7f16\u8bd1\u5668\u770b\u5f85\u540c\u4e00\u5757\u5185\u5b58\u7684\u65b9\u5f0f\u3002\u56e0\u6b64\uff0c\u5176\u8bed\u4e49\u975e\u5e38\u63a5\u8fd1\u786c\u4ef6\u5c42\u9762\uff0c\u7f3a\u4e4f\u9ad8\u7ea7\u8bed\u8a00\u7684\u62bd\u8c61\u548c\u5b89\u5168\u6027\u3002</li> </ul> <pre><code>struct A{\n    // virtual void f() {}\n};\nstruct B : public A {};\nstruct C : public A {};\nstruct D {};\n\nint main(){\n    A *pa = new B;\n    D *pd = static_cast&lt;D*&gt;(pa); // Error!\n    D *pd = reinterpret_cast&lt;D*&gt;(pa); // ok: but *pa is B!\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#multiple-inheritance","title":"Multiple Inheritance","text":""},{"location":"Computer_Science/OOP/Chapter15/#mix-and-match","title":"Mix and match","text":"<pre><code>class Employee{\nprotected:\n    String name;\n    EmpID id;\n};\n\nclass MTS: public Employee {\nprotected:\n    Degrees degree_info;\n};\n\nclass Temporary{\nprotected:\n    Company employer;\n};\n\nclass Consultant:\npublic MTS,\npublic Temporary {\n /* ... */\n};\n</code></pre> <ul> <li>Consultant picks up the attributes of both <code>MTS</code> and <code>Temporary</code></li> <li>name, id, degree_info, employer</li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#mi-complicates-data-layouts","title":"MI complicates data layouts","text":""},{"location":"Computer_Science/OOP/Chapter15/#iostream-package","title":"<code>iostream</code> package","text":""},{"location":"Computer_Science/OOP/Chapter15/#vanilla-mi","title":"Vanilla MI","text":"<ul> <li>Members are duplicated</li> <li>Derived class has access to full copies of each base class</li> <li>This can be useful!</li> </ul> <ol> <li>Multiple links for lists</li> <li>Multiple streambufs for input and output</li> </ol>"},{"location":"Computer_Science/OOP/Chapter15/#more-on-mi","title":"More on MI ...","text":"<pre><code>struct B1 { int m_i; }; \nstruct D1 : public B1 {}; \nstruct D2 : public B1 {}; \nstruct M : public D1, public D2 {};\nint main() {\n    M m; // OK\n    B1* p = &amp;m; // ERROR: which B1???\n    B1* p1 = static_cast&lt;D1*&gt;(&amp;m); // OK\n    B1* p2 = static_cast&lt;D2*&gt;(&amp;m); // OK\n}\n</code></pre> <ul> <li><code>B1</code> is a replicated sub-object of <code>M</code> .</li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#replicated-bases","title":"Replicated bases","text":"<ul> <li>Normally replicated bases aren\u2019t a problem (usage of <code>B1</code> by <code>D1</code> and <code>D2</code> is an implementation detail).</li> <li>Replication becomes a problem if replicated data bring in confusing logic:</li> </ul> <pre><code>M m;\nm.m_i++; // ERROR: D1::B1.m_i or D2::B1.m_i?\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#safe-uses","title":"Safe uses","text":"<ul> <li>Protocol classes</li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#protocol-interface-classes","title":"Protocol / Interface classes","text":"<ul> <li>Abstract base class with</li> </ul> <ol> <li>All non-static member functions are pure virtual except destructor</li> <li>Virtual destructor with empty body</li> <li>No non-static member variables, inherited or otherwise</li> </ol> <ul> <li>May contain static members</li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#example-interface","title":"Example interface","text":"<ul> <li>\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u505a\u591a\u91cd\u7ee7\u627f\u4f1a\u7528\u4e0a\u63a5\u53e3\u3002\u6b64\u65f6\u591a\u7ee7\u627f\u662f\u95ee\u9898\u4e0d\u5927\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u5bf9\u5e94\u7684\u6570\u636e\u3002</li> <li>Unix character device</li> </ul> <pre><code>class CDevice{\npublic :\n    virtual ~CDevice()= default;\n\n    virtual int read(...) = 0;\n    virtual int write(...) = 0;\n    virtual int open(...) = 0;\n    virtual int close(...) = 0;\n    virtual int ioctl(...) = 0;\n};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#what-about-sharing","title":"What about sharing?","text":"<ul> <li>How do you avoid having two <code>streambufs</code> ?</li> <li> <p>Base classes can be virtual(\u95f4\u63a5)</p> <ul> <li>To C++ people, \"virtual\" means \"indirect\"</li> </ul> </li> <li> <p>Virtual member functions have dynamic binding</p> <ul> <li>They use pointer indirection</li> </ul> </li> <li> <p>Virtual base classes are represented indirectly</p> <ul> <li>They use pointer indirection</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#using-virtual-base-classes","title":"Using virtual base classes","text":"<ul> <li>Virtual base classes are shared</li> <li>Derived classes have a single copy of the virtual base</li> <li>\u76f8\u5f53\u4e8e\u662f\u4e24\u4e2a\u6307\u9488\u7684\u5171\u4eab\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#virtual-bases","title":"Virtual bases","text":"<pre><code>struct B1 { int m_i; }; \nstruct D1 : virtual public B1 {}; \nstruct D2 : virtual public B1 {}; \nstruct M : public D1, public D2 {}; \nint main() { \n    M m; // OK \n    m.m_i++; // OK, there is only one B1 in m \n    B1* p = new M; // OK \n}\n</code></pre> <ul> <li>Use of virtual base imposes some runtime and space overhead.</li> <li> <p>If replication isn\u2019t a problem then you don't need to make bases virtual.</p> <ul> <li>Abstract base classes (that hold no data except for a vptr) can be replicated with no problem \u2013virtual base can be eliminated.</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#complications-of-mi","title":"Complications of MI","text":"<ul> <li> <p>Name conflicts</p> <ul> <li>Dominance rule</li> </ul> </li> <li> <p>Order of construction</p> <ul> <li>Who constructs virtual base?</li> </ul> </li> <li> <p>Virtual bases not declared when you need them</p> </li> </ul> <p></p> <ul> <li>Code in virtual bases called more than once</li> <li>Compilers are still iffy</li> <li> <p>Moral:</p> <ul> <li>Use sparingly</li> <li>Avoid diamond patterns: expensive, hard</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#tips-for-mi","title":"TIPS for MI","text":"<ul> <li>In general, SAY NO</li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#avoiding-name-clashes","title":"Avoiding name clashes","text":"<ul> <li>Including duplicate names at global scope is a problem</li> </ul> <pre><code>// old1.h\nvoid f();\nvoid g();\n\n// old2.h\nvoid f();\nvoid h();\n</code></pre> <ul> <li>\u5728 cpp \u7684\u4e16\u754c\u91cc\uff0c\u5c3d\u91cf\u907f\u514d\u653e\u5728 global scope \u91cc\u9762\uff0c\u800c\u662f\u653e\u5728 namespace \u91cc\u9762\u3002</li> </ul> <pre><code>// old1.h\nnamespace old1 {\n    void f();\n    void g();\n}\n\n// old2.h\nnamespace old2 {\n    void f();\n    void h();\n}\n</code></pre> <ul> <li>Wrap declarations in namespaces</li> </ul> <pre><code>// old1.h\nnamespace old1 { \n    void f();\n    void g();\n}\n// old2.h\nnamespace old2 {\n    void f();\n    void g();\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#namespace","title":"Namespace","text":"<pre><code>namespace Math { \n    double abs(double); \n    double sqrt(double); \n    int trunc(double); \n    ... \n} // Note: No terminating end colon!\n</code></pre> <ul> <li>Expresses a logical grouping of classes, functions, variables, etc.</li> <li>A namespace is a scope just like a class</li> <li>Preferred when name encapsulation is needed</li> <li>\u7c7b\u4f3c\u529f\u80fd\u53ef\u4ee5\u653e\u5728\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e0b\u9762\u53bb\u3002\u903b\u8f91\u4e0a\u4f1a\u7ec4\u5408\u5728\u4e00\u8d77\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#defining-namespaces","title":"Defining namespaces","text":"<ul> <li>Place namespaces in include files:</li> <li>\u76f8\u5f53\u4e8e\u591a\u4e86\u4e00\u5c42\u5305\u88f9\uff0c\u7c7b\u3001\u51fd\u6570\u7b49\u90fd\u53ef\u4ee5\u653e\u8fdb\u53bb\u3002</li> </ul> <pre><code>// Mylib.h\nnamespace MyLib {\n    void foo();\n    class Cat {\n    public:\n        void Meow();\n    };\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#defining-namespace-functions","title":"Defining namespace functions","text":"<ul> <li>Use normal scoping to implement functions in namespaces.</li> </ul> <pre><code>// MyLib.cpp\n#include \"MyLib.h\"\nvoid MyLib::foo() {\n    cout &lt;&lt; \"foo\\n\";\n}\nvoid MyLib::Cat::Meow() {\n    cout &lt;&lt; \"meow\\n\"; \n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#using-names-from-a-namespace","title":"Using names from a namespace","text":"<ul> <li>Use scope resolution to qualify names from a namespace.</li> <li>Can be tedious and distracting.</li> </ul> <pre><code>#include \"MyLib.h\"\nint main()\n{\n    MyLib::foo(); \n    MyLib::Cat c; \n    c.Meow();\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#using-declarations","title":"using -declarations","text":"<ul> <li>Introduces a local synonym for name</li> <li>States in one place where a name comes from.</li> <li>Eliminates redundant scope qualification:</li> <li>\u8fd9\u91cc\u53ea\u653e\u51fa\u6765\u4e00\u4e2a\u4e1c\u897f <code>foo</code> \u6216 <code>Cat</code>.</li> </ul> <pre><code>int main() { \n    using MyLib::foo; \n    using MyLib::Cat; \n    foo(); \n    Cat c; \n    c.Meow(); \n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#using-directives","title":"using -directives","text":"<ul> <li>Makes all names from a namespace available.</li> <li>Can be used as a notational convenience.</li> <li>\u8fd9\u91cc\u662f\u628a <code>MyLib</code> \u4e2d\u7684\u6240\u6709\u4e1c\u897f\u90fd\u653e\u51fa\u6765\u3002\u6700\u597d\u662f\u5728\u5c40\u90e8\uff0c\u51fd\u6570\u5185\u90e8\u653e\u3002</li> </ul> <pre><code>int main() { \n    using namespace std; \n    using namespace MyLib; \n    foo(); \n    Cat c; \n    c.Meow(); \n    cout &lt;&lt; \"hello\" &lt;&lt; endl; \n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#ambiguities","title":"Ambiguities","text":"<ul> <li>using-directives may create potential ambiguities.</li> <li>Consider:</li> </ul> <pre><code>// Mylib.h \nnamespace XLib { \n    void x(); \n    void y(); \n} \nnamespace YLib { \n    void y(); \n    void z(); \n}\n</code></pre> <ul> <li>using-directives only make the names available.</li> <li>Ambiguities arise only when you make calls.</li> <li>Use scope resolution to resolve.</li> </ul> <pre><code>int main() { \n    using namespace XLib; \n    using namespace YLib; \n    x(); // OK \n    y(); // Error: ambiguous \n    XLib::y(); // OK, resolves to XLib \n    z(); // OK \n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#namespace-aliases","title":"Namespace aliases","text":"<ul> <li>Namespace names that are too short may clash</li> <li>Names that are too long are hard to work with</li> <li>Use aliasing to create workable names</li> <li>Aliasing can be used to version libraries.</li> <li>\u53ef\u4ee5\u628a\u547d\u540d\u540d\u5b57\u53d8\u77ed\u3002</li> </ul> <pre><code>namespace supercalifragilistic { \n    void f();\n} \nnamespace short_ns = supercalifragilistic; \nshort_ns::f();\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#namespace-composition","title":"Namespace composition","text":"<ul> <li>Compose new namespaces using from others.</li> <li>using-declarations can resolve potential clashes.</li> <li>Explicitly defined functions take precedence.</li> </ul> <pre><code>namespace first { \n    void x(); \n    void y(); \n} \nnamespace second { \n    void y(); \n    void z(); \n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#namespace-composition_1","title":"Namespace composition","text":"<pre><code>namespace mine { \n    using namespace first; \n    using namespace second; \n    using first::y; // resolve clashes\n    void mystuff(); \n    /* ... */\n}\nint main() {\n    mine::x();\n    mine::y(); // call first::y()\n    mine::mystuff();\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#namespace-selection","title":"Namespace selection","text":"<ul> <li>Compose namespaces by selecting a few features from other namespaces.</li> <li>Choose only the names you want rather than all.</li> <li>Changes to \"orig\" declaration become reflected in \"mine\".</li> </ul> <pre><code>namespace mine { \n    using orig::Cat; // use Cat class from orig \n    void x(); \n    void y(); \n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter15/#namespaces-are-open","title":"Namespaces are open","text":"<ul> <li> <p>Multiple namespace declarations add to the same namespace.</p> <ul> <li>Can be distributed across multiple files.</li> <li>C++ \u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u88ab\u591a\u6b21\u58f0\u660e\uff0c\u5e76\u4e14\u6bcf\u4e00\u6b21\u58f0\u660e\u90fd\u662f\u5bf9\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u8865\u5145\u548c\u6269\u5c55\uff0c\u800c\u4e0d\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u540c\u540d\u7684\u547d\u540d\u7a7a\u95f4\u3002\u8fd9\u4e9b\u58f0\u660e\u751a\u81f3\u53ef\u4ee5\u5206\u6563\u5728\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002\u6240\u6709\u8fd9\u4e9b\u58f0\u660e\u6700\u7ec8\u90fd\u4f1a\u5408\u5e76\u5230\u540c\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u8fd9\u4e2a\u7279\u6027\u975e\u5e38\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u5927\u578b\u9879\u76ee\u4e2d\u3002\u5b83\u5141\u8bb8\u4f60\u5c06\u4e00\u4e2a\u590d\u6742\u547d\u540d\u7a7a\u95f4\u7684\u4e0d\u540c\u90e8\u5206\u7ec4\u7ec7\u5230\u4e0d\u540c\u7684\u5934\u6587\u4ef6\u6216\u6e90\u6587\u4ef6\u4e2d\u3002</li> </ul> </li> </ul> <pre><code>// header1.h \nnamespace X { \n    void f(); \n} \n// header2.h \nnamespace X { \n    void g(); // X how has f() and g(); \n}\n</code></pre> <ul> <li>specialize existing standard templates</li> </ul> <pre><code>namespace mylib {\n    class Widget { /* ... */ };\n}\n// Specialize std::hash so that Widget can be used as\n// a key in std::unordered_set and std::unordered_map.\nnamespace std {\n    template&lt;&gt;\n    struct hash&lt;mylib::Widget&gt; {\n        size_t operator()(const mylib::Widget&amp; obj) const {\n        return /* ... */;\n        }\n    };\n}\n</code></pre> <ul> <li>\u4ece C++ \u8bed\u8a00\u5c42\u9762\u6765\u770b\uff0cnamespace std \u548c\u5176\u4ed6\u4efb\u4f55\u547d\u540d\u7a7a\u95f4\u4e00\u6837\uff0c\u90fd\u662f\"\u5f00\u653e\u7684\"(open)\u3002\u867d\u7136\u8bed\u6cd5\u4e0a\u5141\u8bb8\u6253\u5f00 std \u547d\u540d\u7a7a\u95f4\uff0c\u4f46 C++ \u6807\u51c6\u5bf9\u7528\u6237\u53ef\u4ee5\u5411 namespace std (\u4ee5\u53ca\u5176\u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5982 <code>std::chrono</code>) \u6dfb\u52a0\u4ec0\u4e48\u5185\u5bb9\u6709\u975e\u5e38\u4e25\u683c\u7684\u89c4\u5b9a\u3002\u6807\u51c6\u5e93\u4e2d\u6709\u5f88\u591a\u6a21\u677f\u7c7b\u548c\u6a21\u677f\u51fd\u6570\uff08\u4f8b\u5982 <code>std::hash&lt;T&gt;</code>, <code>std::formatter&lt;T&gt;</code>, <code>std::numeric_limits&lt;T&gt;</code>, <code>std::less&lt;T&gt;</code> \u7b49\uff09\u3002\u6807\u51c6\u5e93\u7684\u8bbe\u8ba1\u8005\u9884\u89c1\u5230\u7528\u6237\u53ef\u80fd\u9700\u8981\u4e3a\u81ea\u5df1\u7684\u7528\u6237\u5b9a\u4e49\u7c7b\u578b (User-Defined Types, UDTs) \u63d0\u4f9b\u8fd9\u4e9b\u6807\u51c6\u6a21\u677f\u7684\u7279\u5b9a\u884c\u4e3a\u3002\u56e0\u6b64\uff0c\u6807\u51c6\u660e\u786e\u5141\u8bb8\u7528\u6237\u4e3a\u8fd9\u4e9b\u6807\u51c6\u6a21\u677f\u9488\u5bf9\u81ea\u5df1\u7684\u7528\u6237\u5b9a\u4e49\u7c7b\u578b\u63d0\u4f9b\u5b8c\u6574\u7684\u6216\u90e8\u5206\u7684\u6a21\u677f\u7279\u5316\uff0c\u5e76\u5c06\u8fd9\u4e9b\u7279\u5316\u7248\u672c\u653e\u5728 <code>namespace std</code> \u4e2d\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter15/#further-reading","title":"Further reading","text":"Effective C++__Item-27   106 KB / 2025-05-26 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter2/","title":"Chapter 2 | A tour of cpp","text":"<p> \u7ea6 1977 \u4e2a\u5b57  433 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 15 \u5206\u949f</p> <pre><code>#include &lt;iostream&gt;\n\nvoid selection_sort(int arr[], int n){\n    for(int i = 0; i &lt; n - 1; i++){\n        int min_idx = 1;\n        for(int j = i + 1; j &lt; n; j++){\n            if(arr[j] &lt; arr[min_idx]){\n                min_idx = j;\n            }\n        }\n        if(min_idx != i){\n            int tmp = arr[min_idx];\n            arr[min_idx] = arr[i];\n            arr[i] = tmp;\n        }\n    }\n}\n\nvoid print_array(int arr[], int n){\n    for(int i = 0; i &lt; n; i++) {\n        std::cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nint main(){\n    int arr[] = {64, 25, 12, 23, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    selection_sort(arr, n);\n    print_array(arr, n);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u7136\u540e\u6211\u4eec\u5347\u7ea7\u4e00\u4e0b <code>selection_sort</code> \u51fd\u6570\uff0c\u8ba9\u5b83\u4f7f\u7528 <code>min_element</code> \u51fd\u6570\u6765\u627e\u5230\u6700\u5c0f\u5143\u7d20\u7684\u4e0b\u6807\u3002</li> </ul> <pre><code>int min_element(int arr[], int begin, int end){\n    int min_idx = begin;\n    for(int i = begin + 1; i &lt; end; i++){\n        if(arr[i] &lt; arr[min_idx]){\n            min_idx = i;\n        }\n    }\n    return min_idx;\n}\n\nvoid swap(int&amp; a, int&amp; b){\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\n\nvoid selection_sort(int arr[], int n){\n    for(int i = 0; i &lt; n - 1; i++){\n        int min_idx = min_element(arr, i, n);\n        if(min_idx != i){\n            swap(arr[i], arr[min_idx]);\n        }\n    }\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter2/#about-int","title":"about <code>int&amp;</code>","text":"<ul> <li>\u5173\u4e8e <code>swap(int&amp; a, int&amp; b)</code> \u51fd\u6570 :</li> </ul> <p>\u8fd9\u6837\u4e0b\u9762\u7684 <code>a</code> \u4e0e <code>b</code> \u4e0d\u7528\u52a0 <code>*</code>\uff0c <code>&amp;</code> \u4e3a\u5f15\u7528\u3002\u6b64\u65f6 <code>a</code> \u548c <code>b</code> \u662f <code>int&amp;</code> \u7c7b\u578b\uff0c\u5373 int \u7684\u5f15\u7528\u3002</p> <p>\u5f53\u4f60\u5199 <code>a = b</code> ; \u65f6\uff0c\u4f60\u5b9e\u9645\u4e0a\u662f\u5728\u4fee\u6539 <code>a</code> \u6240\u5f15\u7528\u7684\u539f\u59cb\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u662f\u4fee\u6539 <code>a</code> \u672c\u8eab\uff08\u56e0\u4e3a <code>a</code> \u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u5b83\u53ea\u662f\u53e6\u4e00\u4e2a\u53d8\u91cf\u7684\u522b\u540d\uff09\u3002\u540c\u6837\uff0c<code>b = tmp</code> ; \u4e5f\u662f\u76f4\u63a5\u4fee\u6539 <code>b</code> \u6240\u5f15\u7528\u7684\u539f\u59cb\u53d8\u91cf\u7684\u503c\u3002</p> <ul> <li>\u5f53\u6211\u4eec\u9700\u8981\u652f\u6301 <code>double</code> \u7c7b\u578b\u7684\u6570\u7ec4\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 <code>min_element</code> \u51fd\u6570\u4ee5\u652f\u6301 <code>double</code> \u7c7b\u578b\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n\nint min_element(double arr[], int begin, int end){\n    int min_idx = begin;\n    for(int i = begin + 1; i &lt; end; i++){\n        if(arr[i] &lt; arr[min_idx]){\n            min_idx = i;\n        }\n    }\n    return min_idx;\n}\n\nvoid swap(double&amp; a, double&amp; b){\n    double tmp = a;\n    a = b;\n    b = tmp;\n}\n\nvoid selection_sort(double arr[], int n){\n    for(int i = 0; i &lt; n - 1; i++){\n        int min_idx = min_element(arr, i, n);\n        if(min_idx != i){\n            swap(arr[i], arr[min_idx]);\n        }\n    }\n}\n\nvoid print_array(double arr[], int n){\n    for(int i = 0; i &lt; n; i++) {\n        std::cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nint main(){\n    double arr[] = {64.1, 25.3, 12.2, 23.5, 11.7};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    selection_sort(arr, n);\n    print_array(arr, n);\n\n    return 0;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter2/#about-function-overloading","title":"about function overloading","text":"<p>C++ \u4e2d\u7684 \u51fd\u6570\u91cd\u8f7d\uff08Function Overloading\uff09 \u662f\u4e00\u79cd\u5141\u8bb8\u5728\u540c\u4e00\u4f5c\u7528\u57df\u5185\u5b9a\u4e49\u591a\u4e2a\u540c\u540d\u51fd\u6570\u7684\u7279\u6027\u3002\u8fd9\u4e9b\u540c\u540d\u51fd\u6570\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p> <ol> <li>\u51fd\u6570\u540d\u76f8\u540c\u3002</li> <li>\u53c2\u6570\u5217\u8868\u4e0d\u540c\uff08\u53c2\u6570\u7684\u7c7b\u578b\u3001\u6570\u91cf\u6216\u987a\u5e8f\u4e0d\u540c\uff09\u3002</li> <li>\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u76f8\u540c\u4e5f\u53ef\u4ee5\u4e0d\u540c\uff0c\u4f46\u4ec5\u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u4e0d\u8db3\u4ee5\u6784\u6210\u91cd\u8f7d\u3002</li> </ol> <p>\u5728\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u8c03\u7528\u51fd\u6570\u65f6\u63d0\u4f9b\u7684\u53c2\u6570\u7c7b\u578b\u548c\u6570\u91cf\uff0c\u9009\u62e9\u6700\u5339\u914d\u7684\u91cd\u8f7d\u51fd\u6570\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u5339\u914d\u7684\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002</p> <ul> <li>\u5982\u679c\u51fd\u6570\u662f\u6210\u5458\u51fd\u6570\uff0c<code>const</code> \u4fee\u9970\u7b26\u53ef\u4ee5\u7528\u4e8e\u533a\u5206\u91cd\u8f7d\u51fd\u6570\u3002</li> </ul> <pre><code>void foo() const;    // \u5e38\u91cf\u6210\u5458\u51fd\u6570\nvoid foo();          // \u975e\u5e38\u91cf\u6210\u5458\u51fd\u6570\n</code></pre> <ul> <li>\u9ed8\u8ba4\u53c2\u6570\u4e0d\u4f1a\u6539\u53d8\u51fd\u6570\u7684\u7b7e\u540d\uff0c\u56e0\u6b64\u4e0d\u80fd\u7528\u4e8e\u533a\u5206\u91cd\u8f7d\u51fd\u6570\u3002</li> </ul> <pre><code>void foo(int x, int y = 10); // \u5408\u6cd5\nvoid foo(int x);             // \u9519\u8bef\uff1a\u4e0e\u4e0a\u9762\u7684\u51fd\u6570\u51b2\u7a81\n</code></pre> <ul> <li>\u81f3\u6b64\u6211\u4eec\u53d1\u73b0\uff0c\u53d8\u52a8\u70b9\u662f\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u7c7b\u578b\u53d8\u52a8\u62bd\u51fa\u6765\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u3002</li> </ul> <p>T\u53ef\u4ee5\u6362\u6210\u522b\u7684\u7b26\u53f7\u5417</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\ntemplate &lt;typename T&gt;  // T \u662f\u4e00\u4e2a\u5360\u4f4d\u7b26\uff0c\u8868\u793a\u4efb\u610f\u7c7b\u578b \nint min_element(T arr[], int begin, int end){\n    int min_idx = begin;\n    for(int i = begin + 1; i &lt; end; i++){\n        if(arr[i] &lt; arr[min_idx]){\n            min_idx = i;\n        }\n    }\n    return min_idx;\n}\n\ntemplate &lt;typename T&gt;\nvoid swap(T&amp; a, T&amp; b){\n    T tmp = a;\n    a = b;\n    b = tmp;\n}\n\ntemplate &lt;typename T&gt;\nvoid selection_sort(T arr[], int n){\n    for(int i = 0; i &lt; n - 1; i++){\n        int min_idx = min_element(arr, i, n);\n        if(min_idx != i){\n            swap(arr[i], arr[min_idx]);\n        }\n    }\n}\n\ntemplate &lt;typename T&gt;\nvoid print_array(T arr[], int n){\n    for(int i = 0; i &lt; n; i++) {\n        std::cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nint main(){\n    std::string arr[] = {\"hello\", \"world\", \"zju\", \"boys\", \"girls\"}; // \u80fd\u6bd4\u8f83\u662f\u56e0\u4e3a\u5e93\u91cc\u9762\u6709\u6bd4\u8f83\u51fd\u6570\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    selection_sort(arr, n);\n    print_array(arr, n);\n\n    return 0;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter2/#about-template","title":"about template","text":"<ul> <li>\u6a21\u677f\u662f\u6cdb\u578b\u7f16\u7a0b\u7684\u57fa\u7840\u3002\u6cdb\u578b\u7f16\u7a0b\u7684\u76ee\u7684\u662f\u7f16\u5199\u4e0e\u6570\u636e\u7c7b\u578b\u65e0\u5173\u7684\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u901a\u7528\u7684\u6392\u5e8f\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u5bf9 <code>int\u3001double\u3001string</code> \u7b49\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u800c\u4e0d\u9700\u8981\u4e3a\u6bcf\u79cd\u7c7b\u578b\u90fd\u5199\u4e00\u4e2a\u5355\u72ec\u7684\u6392\u5e8f\u51fd\u6570\u3002</li> <li>\u4f5c\u7528\u8303\u56f4\uff1a<code>template &lt;typename T&gt;</code> \u7684\u4f5c\u7528\u8303\u56f4\u4ec5\u9650\u4e8e\u7d27\u968f\u5176\u540e\u7684\u4e00\u4e2a\u51fd\u6570\u6216\u4e00\u4e2a\u7c7b\u3002\u5982\u679c\u4f60\u6709\u591a\u4e2a\u51fd\u6570\u6216\u7c7b\u9700\u8981\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u677f\u53c2\u6570 T\uff0c\u4f60\u9700\u8981\u4e3a\u6bcf\u4e2a\u51fd\u6570\u6216\u7c7b\u5355\u72ec\u58f0\u660e <code>template &lt;typename T&gt;</code>\u3002</li> </ul> <ul> <li>\u5982\u679c\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u5462\uff1f</li> </ul> <pre><code>struct Student{\n    int id;\n    std::string name;\n\n    // bool operator &lt; (const Student&amp; s){\n    //    return id &lt; s.id;\n    // }\n};\n\nbool operator &lt; (const Student&amp; s1, const Student&amp; s2){\n    return s1.id &lt; s2.id;\n}\n\n\nstd::ostream&amp; operator &lt;&lt; (std::ostream&amp; out, const Student&amp; s){\n    return out &lt;&lt; \"(\" &lt;&lt; s.id &lt;&lt; \",\" &lt;&lt; s.name &lt;&lt; \")\";\n}\n\nint main(){\n    Student arr[] = {{2011, \"Newton\"}, {2001, \"Gauss\"}, {2134,\"Euler\"}, {2067, \"Riemann\"}, {2054, \"Mozi\"}};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    selection_sort(arr, n);\n    print_array(arr, n);\n\n    return 0;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter2/#about","title":"about \u91cd\u8f7d","text":"<ul> <li><code>std::ostream&amp;</code> \u662f\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u8f93\u51fa\u6d41\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u4ee5\u652f\u6301\u94fe\u5f0f\u8c03\u7528\u3002</li> <li><code>std::ostream&amp; out</code> \u662f\u53c2\u6570\uff0c\u8868\u793a\u4f20\u5165\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u8f93\u51fa\u6d41\u5bf9\u8c61\uff0c\u7528\u4e8e\u8f93\u51fa\u6570\u636e\u3002</li> <li><code>const Student&amp;</code> \u662f\u53c2\u6570\uff0c\u8868\u793a\u4f20\u5165\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u5e38\u91cf\u5f15\u7528\uff0c\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u62f7\u8d1d\uff0c\u5e76\u4fdd\u8bc1\u4f20\u5165\u7684 <code>Student</code> \u5bf9\u8c61\u4e0d\u4f1a\u88ab\u4fee\u6539\u3002\u4f7f\u7528\u5f15\u7528\uff08<code>&amp;</code>\uff09\u907f\u514d\u62f7\u8d1d\u5bf9\u8c61\uff0c\u63d0\u9ad8\u6548\u7387\u3002</li> </ul> \u4e3a\u4ec0\u4e48\u5c06 <code>operator&lt;&lt;</code> \u5b9a\u4e49\u4e3a\u5168\u5c40\u51fd\u6570\uff1f <p><code>operator&lt;&lt;</code> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f <code>std::ostream&amp;</code> \uff0c\u800c\u4e0d\u662f Student \u5bf9\u8c61\u3002\u56e0\u6b64\uff0c\u5b83\u4e0d\u80fd\u4f5c\u4e3a Student \u7684\u6210\u5458\u51fd\u6570\uff0c\u800c\u5fc5\u987b\u5b9a\u4e49\u4e3a\u5168\u5c40\u51fd\u6570\u3002</p> <p>\u5982\u679c\u5b9a\u4e49\u4e3a\u6210\u5458\u51fd\u6570\uff0c\u8c03\u7528\u65b9\u5f0f\u4f1a\u53d8\u6210 <code>s &lt;&lt; std::cout</code> \uff0c\u8fd9\u4e0e\u5e38\u89c4\u7528\u6cd5\u76f8\u53cd\u3002</p> attention if id and name are private <p>\u5982\u679c <code>id</code> \u548c <code>nam</code>e \u662f Student \u7c7b\u7684\u79c1\u6709\u6210\u5458\uff0c<code>operator&lt;&lt;</code> \u9700\u8981\u58f0\u660e\u4e3a Student \u7684\u53cb\u5143\u51fd\u6570\u3002</p> <p>just like this:</p> <pre><code>class Student{\nprivate:\n    int id;\n    std::string name;\npublic:\n    Student(int id, const std::string&amp; name) : id(id), name(name) {}\n\n    // \u58f0\u660e\u53cb\u5143\u51fd\u6570\n    friend std::ostream&amp; operator &lt;&lt; (std::ostream&amp; out, const Student&amp; s);\n};\n</code></pre> <ul> <li>\u5982\u679c\u5c06 <code>operator &lt;</code> \u5b9a\u4e49\u5728 <code>Student</code> \u7ed3\u6784\u4f53\u5185\u90e8\uff0c\u5b83\u662f\u4e00\u4e2a\u6210\u5458\u51fd\u6570\u3002\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7ed3\u6784\u4f53\u7684\u79c1\u6709\u6210\u5458\uff08\u5982\u679c\u6709\uff09\uff0c\u5e76\u4e14\u8c03\u7528\u65f6\u9690\u542b\u4e86 <code>this</code> \u6307\u9488\u3002</li> </ul> <p>\u793a\u4f8b :</p> <pre><code>struct Student {\n    int id;\n    std::string name;\n\n    // \u6210\u5458\u51fd\u6570\u5f62\u5f0f\u7684 operator&lt;\n    bool operator &lt; (const Student&amp; s) const {\n        return id &lt; s.id;\n    }\n};\n</code></pre> <ol> <li> <p>\u9690\u542b\u7684 <code>this</code> \u6307\u9488\uff1a</p> <ul> <li>\u5728\u6210\u5458\u51fd\u6570\u4e2d\uff0c<code>id</code> \u5b9e\u9645\u4e0a\u662f <code>this-&gt;id</code> \uff0c<code>s.id</code> \u662f\u53c2\u6570\u5bf9\u8c61\u7684 <code>id</code>\u3002\u4f8b\u5982\uff0c<code>a &lt; b</code> \u4f1a\u88ab\u89e3\u91ca\u4e3a <code>a.operator&lt;(b)</code>\u3002</li> </ul> </li> <li> <p>\u8bbf\u95ee\u6743\u9650\uff1a</p> <ul> <li>\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7ed3\u6784\u4f53\u7684\u79c1\u6709\u6210\u5458\uff08\u5982\u679c\u6709\uff09\u3002</li> </ul> </li> </ol> <ul> <li>\u5982\u679c\u5c06 <code>operator&lt;</code> \u5b9a\u4e49\u5728 <code>Student</code> \u7ed3\u6784\u4f53\u5916\u90e8\uff0c\u5b83\u662f\u4e00\u4e2a\u5168\u5c40\u51fd\u6570\u3002\u5168\u5c40\u51fd\u6570\u9700\u8981\u901a\u8fc7\u53c2\u6570\u8bbf\u95ee\u7ed3\u6784\u4f53\u7684\u6210\u5458\uff0c\u56e0\u6b64\u5982\u679c\u6210\u5458\u662f\u79c1\u6709\u7684\uff0c\u9700\u8981\u5c06\u5176\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570\u3002</li> </ul> <p>\u793a\u4f8b :  </p> <pre><code>struct Student {\n    int id;\n    std::string name;\n\n    // \u58f0\u660e\u53cb\u5143\u51fd\u6570\n    friend bool operator &lt; (const Student&amp; a, const Student&amp; b);\n};\n\n// \u5168\u5c40\u51fd\u6570\u5f62\u5f0f\u7684 operator&lt;\nbool operator &lt; (const Student&amp; a, const Student&amp; b) {\n    return a.id &lt; b.id;\n}\n</code></pre> <ol> <li> <p>\u663e\u5f0f\u53c2\u6570\uff1a</p> <ul> <li>\u5168\u5c40\u51fd\u6570\u9700\u8981\u663e\u5f0f\u5730\u4f20\u9012\u4e24\u4e2a\u53c2\u6570\uff08\u5982 <code>a</code> \u548c <code>b</code>\uff09\uff0c\u800c\u4e0d\u662f\u901a\u8fc7 <code>this</code> \u6307\u9488\u3002</li> </ul> </li> <li> <p>\u8bbf\u95ee\u6743\u9650\uff1a</p> <ul> <li>\u5982\u679c\u7ed3\u6784\u4f53\u7684\u6210\u5458\u662f\u79c1\u6709\u7684\uff0c\u5168\u5c40\u51fd\u6570\u9700\u8981\u88ab\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570\uff08<code>friend</code>\uff09\uff0c\u624d\u80fd\u8bbf\u95ee\u79c1\u6709\u6210\u5458\u3002</li> </ul> </li> <li> <p>\u8c03\u7528\u65b9\u5f0f\uff1a</p> <ul> <li>\u901a\u8fc7\u53c2\u6570\u8c03\u7528\uff0c\u4f8b\u5982 <code>operator&lt;(a, b)</code> \u6216 <code>a &lt; b</code>\u3002</li> </ul> </li> </ol> <pre><code>class Rectangle{\nprivate: \n    double w, h;\n    double area, perimeter;\npublic:\n    Rectangle(double w, double h): w(w), h(h){\n        // \u6784\u9020\u51fd\u6570 constructor\n    }\n    void calc_area(){\n        area = w * h;\n    }\n    void calc_perimeter(){\n        perimeter = 2 * (w + h);\n    }\n};\n\n#include &lt;cmath&gt;\n\nclass Triangle{\nprivate:\n    double a, b, c;\npublic:\n    Triangle(double a, double b, double c): a(a), b(b), c(c){ }\n    void calc_area(){\n        double p = (a + b + c) / 2;\n        area = sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    void calc_perimeter(){\n        perimeter = a + b + c;\n    }\n};\n\nconst double PI = 3.14;\n\nclass Circle{\nprivate:\n    double r;\npublic:\n    Circle(double r): r(r){ }\n    void calc_area(){\n        area = PI * r * r;\n    }\n    void calc_perimeter(){\n        perimeter = 2 * PI * r;\n    }\n};\n\nint main(){\n    Rectangle arr[] = {Rectangle(2,3), Rectangle(5,5)};\n    Circle arr2[] = {Circle(3)};\n    Triangle arr3[] = {Triangle(2,4,5)};\n\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    for(Rectangle&amp; r : arr){  // range for loop \u751a\u81f3\u53ef\u4ee5\u5199\u6210 for(auto&amp; r : arr)\n        r.calc_area();\n        r.calc_perimeter();\n    }\n\n\n    selection_sort(arr, n);\n    print_array(arr, n);\n\n    return 0;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter2/#about-for","title":"about for","text":"<ul> <li><code>for</code> \u5faa\u73af\u7684\u8bed\u6cd5 :</li> </ul> <pre><code>for (\u5143\u7d20\u7c7b\u578b \u53d8\u91cf\u540d : \u5bb9\u5668) {\n    // \u5faa\u73af\u4f53\n}\n</code></pre> <ul> <li><code>Rectangle&amp; r</code> \u662f\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002\u4f7f\u7528 <code>Rectangle&amp; r</code> \u53ef\u4ee5\u907f\u514d\u62f7\u8d1d\u5bf9\u8c61\uff0c\u76f4\u63a5\u64cd\u4f5c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u3002</li> <li><code>auto</code> \u53ef\u4ee5\u7531\u7f16\u8bd1\u5668\u6839\u636e\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u81ea\u52a8\u63a8\u5bfc\u51fa\u7c7b\u578b\u3002</li> </ul> <pre><code>class Shape{\nprotected:\n    double area, perimeter;\npublic:\n    virtual ~Shape() = default;\n    double get_area() const { return area; }\n    double get_perimeter() const { return perimeter; }\n    virtual void calc_area() = 0;\n    virtual void calc_perimeter() = 0;\n    virtual std::string name() = 0;\n    friend ostream&amp; operator&lt;&lt;(ostream&amp; , const Shape&amp;);\n};\n\nclass Circle: public Shape{\nprivate:\n    double r;\npublic:\n    double get_area() const{ return area; }\n    double get_perimeter() const{ return perimeter; }\n    Circle(double r): r(r){ }\n    void calc_area() override{\n        area = PI * r * r;\n    }\n    void calc_perimeter() override{\n        perimeter = 2 * PI * r;\n    }\n    void name() const override{\n        return \"Circle\";\n    }\n};\n\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Shape&amp; s){\n    return out &lt;&lt; \"(\" &lt;&lt; s.name &lt;&lt; \":\" &lt;&lt; s.area &lt;&lt; \", \" &lt;&lt; s.perimeter &lt;&lt; \")\";\n}\n\n\ntemplate &lt;typename T&gt;\nvoid print_array(T* arr[], int n){\n    for(int i = 0; i &lt; n; i++){\n        cout &lt;&lt; *arr[i] &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\ntemplate &lt;typename T, typename Compare&gt;\nint min_element(T arr[], int begin, int end, Compare comp){\n    int min_idx = begin;\n\n    for(int i = begin + 1; i &lt; end; i++){\n        if(comp(arr[i], arr[min_idx])){\n            min_idx = i;\n        }\n    }\n    return min_idx;\n}\n\nbool less_shape_area(Shape* s1, Shape* s2){\n    return s1-&gt;get_area() &lt; s2-&gt;get_area();\n}\n\ntemplate &lt;typename T, typename Compare&gt;\nvoid selection_sort(T arr[], int n, Compare comp){\n    for(int i = 0; i &lt; n - 1; i++){\n        int min_idx = min_element(arr, i, n, comp);\n        if(min_idx != i){\n            swap(arr[i], arr[min_idx]);\n        }\n    }\n}\n\nint main(){\n    Shape arr[] = {Circle(3)}; \n    Shape *arr[] = {new Rectangle(2,3), new Rectangle(5,5), new Circle(3), new Triangle(2,4,5)}; \n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    for(Shape* s : arr){\n        s-&gt;calc_area();\n        s-&gt;calc_perimeter();\n    }\n\n    selection_sort(arr, n, less_shape_area);\n    selection_sort(arr, n, [](Shape* s1, Shape* s2){return s1-&gt;get_area() &lt; s2-&gt;get_area();}); \n    print_array(arr, n);\n\n    return 0;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter2/#about-encapsulation","title":"about encapsulation(\u5c01\u88c5)","text":"<ul> <li><code>private</code> : \u6307\u7528\u6237\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\uff0c\u4f8b\u5982\u5728 <code>Rectangle</code> \u4e2d\u4e0d\u80fd\u7528 <code>Rectangle.w</code> \u6765\u8bbf\u95ee</li> <li><code>class</code> \u9ed8\u8ba4\u662f private</li> </ul>"},{"location":"Computer_Science/OOP/Chapter2/#about_1","title":"about \u6790\u6784\u51fd\u6570","text":"<ul> <li>\u6790\u6784\u51fd\u6570\uff08Destructor\uff09 \u662f C++ \u4e2d\u7684\u4e00\u79cd\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u7528\u4e8e\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u6267\u884c\u6e05\u7406\u64cd\u4f5c\u3002\u5b83\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u91ca\u653e\u5bf9\u8c61\u5728\u751f\u547d\u5468\u671f\u5185\u5206\u914d\u7684\u8d44\u6e90\uff08\u5982\u52a8\u6001\u5185\u5b58\u3001\u6587\u4ef6\u53e5\u67c4\u3001\u7f51\u7edc\u8fde\u63a5\u7b49\uff09\uff0c\u907f\u514d\u8d44\u6e90\u6cc4\u6f0f\u3002</li> <li>\u6790\u6784\u51fd\u6570\u662f\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u540d\u79f0\u4e0e\u7c7b\u540d\u76f8\u540c\uff0c\u524d\u9762\u52a0\u4e0a <code>~</code>\uff0c\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff0c\u4e5f\u6ca1\u6709\u53c2\u6570\u3002</li> <li>\u5f53\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f\u65f6\uff0c\u6790\u6784\u51fd\u6570\u4f1a\u81ea\u52a8\u8c03\u7528\u3002</li> </ul> <ol> <li> <p>\u52a8\u6001\u5185\u5b58\u7ba1\u7406</p> <p>\u5982\u679c\u7c7b\u4e2d\u4f7f\u7528\u4e86\u52a8\u6001\u5185\u5b58\u5206\u914d\uff08\u5982 new\uff09\uff0c\u9700\u8981\u5728\u6790\u6784\u51fd\u6570\u4e2d\u91ca\u653e\u5185\u5b58\uff08\u5982 delete\uff09\u3002</p> </li> </ol> <pre><code>class MyClass {\nprivate:\n    int* data;\npublic:\n    MyClass(int size) {\n        data = new int[size];  // \u52a8\u6001\u5206\u914d\u5185\u5b58\n    }\n\n    ~MyClass() {\n        delete[] data;  // \u91ca\u653e\u5185\u5b58\n    }\n};\n</code></pre> <ol> <li> <p>\u786e\u4fdd\u8d44\u6e90\u91ca\u653e</p> <p>\u5373\u4f7f\u7a0b\u5e8f\u53d1\u751f\u5f02\u5e38\uff0c\u6790\u6784\u51fd\u6570\u4e5f\u4f1a\u88ab\u8c03\u7528\uff0c\u786e\u4fdd\u8d44\u6e90\u88ab\u6b63\u786e\u91ca\u653e\u3002</p> </li> <li> <p>\u865a\u6790\u6784\u51fd\u6570</p> <p>\u865a\u6790\u6784\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f\u786e\u4fdd\u5728\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u5220\u9664\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u80fd\u591f\u6b63\u786e\u8c03\u7528\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002\u5982\u679c\u6ca1\u6709\u865a\u6790\u6784\u51fd\u6570\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570\u4e0d\u88ab\u8c03\u7528\uff0c\u4ece\u800c\u5f15\u53d1\u8d44\u6e90\u6cc4\u6f0f\u6216\u5176\u4ed6\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</p> <pre><code>class Base {\npublic:\n    ~Base() {\n        std::cout &lt;&lt; \"Base destructor called!\" &lt;&lt; std::endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    ~Derived() {\n        std::cout &lt;&lt; \"Derived destructor called!\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Base* ptr = new Derived();  // \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\n    delete ptr;  // \u53ea\u8c03\u7528 Base \u7684\u6790\u6784\u51fd\u6570\uff0cDerived \u7684\u6790\u6784\u51fd\u6570\u4e0d\u4f1a\u88ab\u8c03\u7528\uff01\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa :</p> <pre><code>Base destructor called!\n</code></pre> <p>\u7531\u4e8e <code>Base</code> \u7684\u6790\u6784\u51fd\u6570\u4e0d\u662f\u865a\u51fd\u6570\uff0c<code>delete ptr</code> \u53ea\u4f1a\u8c03\u7528 <code>Base</code> \u7684\u6790\u6784\u51fd\u6570\uff0c\u800c\u4e0d\u4f1a\u8c03\u7528 <code>Derived</code> \u7684\u6790\u6784\u51fd\u6570\u3002</p> <p>\u56e0\u6b64\u9700\u8981 :</p> <pre><code>class Base {\npublic:\n    virtual ~Base() {  // \u865a\u6790\u6784\u51fd\u6570\n        std::cout &lt;&lt; \"Base destructor called!\" &lt;&lt; std::endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    ~Derived() {\n        std::cout &lt;&lt; \"Derived destructor called!\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Base* ptr = new Derived();  // \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\n    delete ptr;  // \u6b63\u786e\u8c03\u7528 Derived \u548c Base \u7684\u6790\u6784\u51fd\u6570\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa :</p> <pre><code>Derived destructor called!\nBase destructor called!\n</code></pre> <p>\u56e0\u6b64\uff0c\u865a\u6790\u6784\u51fd\u6570\u901a\u8fc7\u865a\u8868\u673a\u5236\uff0c\u786e\u4fdd\u5728\u8fd0\u884c\u65f6\u6b63\u786e\u8c03\u7528\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002\u5982\u679c\u7c7b\u53ef\u80fd\u88ab\u7ee7\u627f\uff0c\u4e14\u57fa\u7c7b\u6307\u9488\u53ef\u80fd\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\uff0c\u5e94\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002</p> <ul> <li>\u4f7f\u7528 <code>= default</code> \u53ef\u4ee5\u907f\u514d\u624b\u52a8\u5b9e\u73b0\u7a7a\u7684\u6790\u6784\u51fd\u6570\uff0c\u4fdd\u6301\u4ee3\u7801\u7b80\u6d01\u548c\u4e00\u81f4\u6027\u3002</li> </ul> </li> </ol>"},{"location":"Computer_Science/OOP/Chapter2/#about-override","title":"about <code>override</code>","text":"<ul> <li><code>override</code> \u5173\u952e\u5b57\u7528\u4e8e\u660e\u786e\u8868\u793a\u4e00\u4e2a\u6210\u5458\u51fd\u6570\u662f\u91cd\u5199\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u3002\u5982\u679c\u51fd\u6570\u6807\u8bb0\u4e3a <code>override</code>\uff0c\u4f46\u57fa\u7c7b\u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684\u865a\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002</li> <li><code>override</code> \u5173\u952e\u5b57\u53ef\u4ee5\u7701\u7565\u3002\u53ea\u8981\u51fd\u6570\u7b7e\u540d\u4e0e\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u5339\u914d\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u8ba4\u4e3a\u8fd9\u662f\u91cd\u5199\u3002</li> <li>\u7136\u800c\uff0c\u5982\u679c\u51fd\u6570\u7b7e\u540d\u4e0e\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u4e0d\u5339\u914d\uff08\u4f8b\u5982\u62fc\u5199\u9519\u8bef\u6216\u53c2\u6570\u7c7b\u578b\u4e0d\u540c\uff09\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u62a5\u9519\uff0c\u800c\u662f\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u884c\u4e3a\u4e0d\u7b26\u5408\u9884\u671f\uff0c\u4e14\u96be\u4ee5\u8c03\u8bd5\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter2/#about-const","title":"about const","text":"<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Shape&amp; s){\n    return out &lt;&lt; \"(\" &lt;&lt; s.name &lt;&lt; \":\" &lt;&lt; s.area &lt;&lt; \", \" &lt;&lt; s.perimeter &lt;&lt; \")\";\n}\n</code></pre> <p>\u6b64\u5904\u5fc5\u987b\u8981\u52a0\u4e0a <code>const</code> \uff0c\u56e0\u4e3a\u5728 <code>Shape</code> \u91cc\u9762\u5b58\u5728</p> <pre><code>void name() const override{\n    return \"Circle\";\n}\n</code></pre> <p>const \u5bf9\u8c61\u548c const \u6210\u5458\u51fd\u6570</p> <ul> <li>\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u662f <code>const</code> \u7684\uff08\u5982 <code>const Shape&amp; s</code>\uff09\uff0c\u53ea\u80fd\u8c03\u7528\u5b83\u7684 <code>const</code> \u6210\u5458\u51fd\u6570\u3002</li> <li>\u5982\u679c\u4e00\u4e2a\u6210\u5458\u51fd\u6570\u6ca1\u6709\u6807\u8bb0\u4e3a <code>const</code>\uff0c\u7f16\u8bd1\u5668\u4f1a\u8ba4\u4e3a\u5b83\u53ef\u80fd\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u56e0\u6b64\u4e0d\u5141\u8bb8\u5728 <code>const</code> \u5bf9\u8c61\u4e0a\u8c03\u7528\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter2/#about-slicing","title":"about slicing","text":"<pre><code>Shape arr[] = {Circle(3)}; \nShape *arr[] = {new Rectangle(2,3), new Rectangle(5,5), new Circle(3), new Triangle(2,4,5)}; \n</code></pre> <ul> <li>\u5bf9\u8c61\u5207\u7247\u662f\u6307\u5c06\u6d3e\u751f\u7c7b\u5bf9\u8c61\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6d3e\u751f\u7c7b\u5bf9\u8c61\u7684\u7279\u6709\u90e8\u5206\uff08\u5373\u6d3e\u751f\u7c7b\u65b0\u589e\u7684\u6210\u5458\u53d8\u91cf\u548c\u51fd\u6570\uff09\u4f1a\u88ab\"\u5207\u6389\"\uff0c\u53ea\u4fdd\u7559\u57fa\u7c7b\u90e8\u5206\u3002\u8fd9\u662f\u56e0\u4e3a\u57fa\u7c7b\u5bf9\u8c61\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u6765\u5b58\u50a8\u6d3e\u751f\u7c7b\u7684\u989d\u5916\u6570\u636e\u3002</li> <li><code>Shape* arr[]</code> \u662f\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f <code>Shape*</code> \u7c7b\u578b\u7684\u6307\u9488\u3002\u7531\u4e8e\u6307\u9488\u53ef\u4ee5\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\uff08\u5982 <code>Rectangle</code>\u3001<code>Circle</code>\u3001<code>Triangle</code> \u7b49\uff09\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter2/#about-lambda","title":"about <code>lambda</code>","text":"<pre><code>selection_sort(arr, n, [](Shape* s1, Shape* s2){return s1-&gt;get_area() &lt; s2-&gt;get_area();});\n</code></pre> <p>Lambda \u8868\u8fbe\u5f0f\u7684\u57fa\u672c\u8bed\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>[\u6355\u83b7\u5217\u8868](\u53c2\u6570\u5217\u8868) -&gt; \u8fd4\u56de\u7c7b\u578b { \u51fd\u6570\u4f53 }\n</code></pre> <ul> <li>\u6355\u83b7\u5217\u8868\uff1a\u7528\u4e8e\u6355\u83b7\u5916\u90e8\u53d8\u91cf\uff0c\u53ef\u4ee5\u662f\u503c\u6355\u83b7\u3001\u5f15\u7528\u6355\u83b7\u6216\u9690\u5f0f\u6355\u83b7\u3002</li> <li>\u53c2\u6570\u5217\u8868\uff1a\u4e0e\u666e\u901a\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u7c7b\u4f3c\u3002</li> <li>\u8fd4\u56de\u7c7b\u578b\uff1a\u53ef\u4ee5\u7701\u7565\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u63a8\u5bfc\u3002</li> <li>\u51fd\u6570\u4f53\uff1aLambda \u8868\u8fbe\u5f0f\u7684\u5b9e\u73b0\u4ee3\u7801\u3002</li> </ul> <p>\u793a\u4f8b :</p> <pre><code>auto lambda = [](int x, int y) -&gt; bool { return x &lt; y; };\nbool result = lambda(3, 5);  // \u8c03\u7528 Lambda \u8868\u8fbe\u5f0f\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter2/#lambda","title":"Lambda \u8868\u8fbe\u5f0f\u7684\u7075\u6d3b\u6027","text":"<ul> <li>Lambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u901a\u8fc7\u6355\u83b7\u5217\u8868\u8bbf\u95ee\u5916\u90e8\u53d8\u91cf\uff1a</li> </ul> <ol> <li>\u503c\u6355\u83b7\uff1a[x, y]\uff0c\u6355\u83b7\u5916\u90e8\u53d8\u91cf\u7684\u503c\u3002</li> <li>\u5f15\u7528\u6355\u83b7\uff1a[&amp;x, &amp;y]\uff0c\u6355\u83b7\u5916\u90e8\u53d8\u91cf\u7684\u5f15\u7528\u3002</li> <li>\u9690\u5f0f\u6355\u83b7\uff1a[=]\uff08\u503c\u6355\u83b7\u6240\u6709\u53d8\u91cf\uff09\u6216 [&amp;]\uff08\u5f15\u7528\u6355\u83b7\u6240\u6709\u53d8\u91cf\uff09\u3002</li> </ol> <pre><code>int threshold = 10;\nauto lambda = [threshold](Shape* s) { return s-&gt;get_area() &gt; threshold; };\n</code></pre> <ul> <li>Lambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u9012\uff0c\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter3/","title":"Chapter 3 | STL","text":"<p> \u7ea6 1793 \u4e2a\u5b57  205 \u884c\u4ee3\u7801  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 12 \u5206\u949f</p> <p>STL = Standard Template Library</p> <ul> <li>Part of the ISO Standard C++ Library</li> <li>Data Structures and algorithms for C++</li> </ul> <p>Why should I use STL?</p> <ul> <li>Reduced development time<ul> <li>Utilities well designed and written.</li> </ul> </li> <li>Code Readability<ul> <li>More meaningful stuff filled in one page.</li> </ul> </li> <li>Robustness<ul> <li>Thoroughly used and tested.</li> </ul> </li> <li>Portable code</li> <li>Maintainable code</li> </ul>"},{"location":"Computer_Science/OOP/Chapter3/#three-parts-of-stl","title":"Three parts of STL","text":"<ul> <li>Containers<ul> <li>class templates, common data structures.</li> </ul> </li> <li>Algorithms<ul> <li>Functions that operate on ranges of elements.</li> </ul> </li> <li>Iterators<ul> <li>Generalization of pointers, access elements in a uniform manner.</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter3/#containers","title":"Containers","text":"<p>A personal notebook</p> <ul> <li>It allows notes to be stored.</li> <li>It has no limit on the number of notes it can store.</li> <li>It will show individual notes.</li> <li>It will tell us how many notes it is currently storing.</li> <li>Array can not be used here.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter3/#sequential","title":"Sequential","text":"<ul> <li><code>array</code> (static) as \"array\"</li> <li><code>vector</code> (dynamic) variable array</li> <li><code>deque</code> (double-ended queue) dual-end queue</li> <li><code>forward_list</code> (singly-linked) as it</li> <li><code>list</code> (doubly-linked) double-linked-list</li> <li><code>string</code> char.array</li> </ul>"},{"location":"Computer_Science/OOP/Chapter3/#vector","title":"<code>vector</code>","text":"<ul> <li>Constructor / Destructor</li> <li>Element access<ul> <li><code>at</code> , <code>operator[]</code> , <code>front</code> , <code>back</code> , <code>data</code></li> </ul> </li> <li>Iterators<ul> <li><code>begin</code> , <code>end</code> , <code>cbegin</code> , <code>cend</code></li> </ul> </li> <li>Capacity<ul> <li><code>empty</code> , <code>size</code> , <code>reserve</code> , <code>capacity</code></li> </ul> </li> <li>Modifiers<ul> <li><code>clear</code> , <code>insert</code> , <code>erase</code> , <code>push_back</code></li> </ul> </li> </ul> <p>From cppreference:</p> <p><code>vector</code> \u7684\u5b58\u50a8\u662f\u81ea\u52a8\u7ba1\u7406\u7684\uff0c\u6309\u9700\u6269\u5f20\u6536\u7f29\u3002</p> <p><code>vector</code> \u6240\u7528\u7684\u65b9\u5f0f\u4e0d\u5728\u6bcf\u6b21\u63d2\u5165\u5143\u7d20\u65f6\uff0c\u800c\u53ea\u5728\u989d\u5916\u5185\u5b58\u8017\u5c3d\u65f6\u8fdb\u884c\u91cd\u5206\u914d\u3002\u5206\u914d\u7684\u5185\u5b58\u603b\u91cf\u53ef\u7528 <code>capacity()</code> \u51fd\u6570\u67e5\u8be2\u3002</p> <ul> <li>Element access</li> </ul> <pre><code>std::vector&lt;int&gt; data{1, 2, 4, 5, 5, 6};\ndata.at(1) = 88;\ndata[0] = 5;\ndata.front() = 10;  // data.front() \u7b49\u4ef7\u4e8e *data.begin()\ndata.back() = 20;  // data.back() \u7b49\u4ef7\u4e8e *std::prev(data.end())\n\npointer_func(data.data(), data.size());\n// \u8fd4\u56de\u6307\u5411\u4f5c\u4e3a\u5143\u7d20\u5b58\u50a8\u5de5\u4f5c\u7684\u5e95\u5c42\u6570\u7ec4\u7684\u6307\u9488\u3002\n// \u8fd4\u56de\u7684\u6307\u9488\u4f7f\u5f97\u8303\u56f4 [data(), data() + size()) \u59cb\u7ec8\u662f\u6709\u6548\u8303\u56f4\uff0c\u5373\u4f7f\u5bb9\u5668\u4e3a\u7a7a\uff08\u6b64\u65f6 data() \u4e0d\u53ef\u89e3\u5f15\u7528\uff09\u3002\n</code></pre> <ul> <li>Iterators</li> </ul> <ol> <li><code>begin</code> \u8fd4\u56de\u6307\u5411 <code>vector</code> \u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u5982\u679c <code>vector</code> \u4e3a\u7a7a\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7b49\u4e8e <code>end()</code>\u3002</li> </ol> <p><code>begin</code> \u8fd4\u56de\u666e\u901a\u8fed\u4ee3\u5668\u6216 <code>const</code> \u8fed\u4ee3\u5668\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5bb9\u5668\u662f\u5426\u662f <code>const</code> \u7684\u3002\u9002\u7528\u4e8e\u9700\u8981\u4fee\u6539\u5bb9\u5668\u5185\u5bb9\u7684\u573a\u666f\u3002<code>cbegin</code>\uff1a\u59cb\u7ec8\u8fd4\u56de <code>const</code> \u8fed\u4ee3\u5668\uff0c\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u5185\u5bb9\u3002\u9002\u7528\u4e8e\u53ea\u8bfb\u8bbf\u95ee\u5bb9\u5668\u7684\u573a\u666f\u3002</p> <ol> <li><code>end</code> \u548c <code>cend</code> \u540c\u7406\u3002</li> </ol> <ul> <li>Capacity</li> </ul> <ol> <li><code>empty</code> \u8fd4\u56de <code>vector</code> \u662f\u5426\u4e3a\u7a7a\u3002</li> </ol> <ol> <li><code>size</code> \u8fd4\u56de <code>vector</code> \u4e2d\u5143\u7d20\u7684\u6570\u91cf\u3002</li> </ol> <ol> <li><code>capacity</code> \u8fd4\u56de\u5728\u4e0d\u91cd\u65b0\u5206\u914d\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c<code>vector</code> \u53ef\u4ee5\u5bb9\u7eb3\u7684\u5143\u7d20\u6570\u91cf\u3002</li> </ol> <ol> <li><code>reserve</code> \u8bf7\u6c42\u5206\u914d\u81f3\u5c11\u5bb9\u7eb3 <code>n</code> \u4e2a\u5143\u7d20\u7684\u5185\u5b58\u3002\u5982\u679c <code>n</code> \u5c0f\u4e8e\u5f53\u524d\u5bb9\u91cf\uff0c\u5219\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002</li> </ol> <ul> <li>Modifiers</li> </ul> <ol> <li><code>.clear()</code> \u79fb\u9664\u6240\u6709\u5143\u7d20\u3002</li> </ol> <ol> <li><code>insert</code> \u5728\u6307\u5b9a\u4f4d\u7f6e\u524d\u63d2\u5165\u5143\u7d20\u3002</li> </ol> <pre><code>iterator insert( const_iterator pos, T&amp;&amp; value );\niterator insert( const_iterator pos, size_type count, const T&amp; value );\niterator insert( const_iterator pos, InputIt first, InputIt last );\n</code></pre> <ul> <li>\u5728 <code>pos</code> \u524d\u63d2\u5165 <code>value</code></li> <li>\u5728 <code>pos</code> \u524d\u63d2\u5165 <code>count</code> \u4e2a <code>value</code></li> <li>\u5728 <code>pos</code> \u524d\u63d2\u5165\u6765\u81ea\u8303\u56f4 <code>[first, last)</code> \u7684\u5143\u7d20</li> </ul> <ol> <li><code>erase</code> \u79fb\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\u3002</li> </ol> <pre><code>iterator erase( iterator pos );\niterator erase( iterator first, iterator last );\n</code></pre> <ul> <li>\u79fb\u9664\u4f4d\u4e8e <code>pos</code> \u7684\u5143\u7d20\u3002</li> <li>\u79fb\u9664\u8303\u56f4 <code>[first, last)</code> \u4e2d\u7684\u5143\u7d20\u3002</li> <li>\u8fd4\u56de\u503c\u662f\u6700\u540e\u79fb\u9664\u5143\u7d20\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\u3002<ul> <li>\u5982\u679c <code>pos</code> \u6307\u4ee3\u672b\u5143\u7d20\uff0c\u90a3\u4e48\u8fd4\u56de <code>end()</code> \u8fed\u4ee3\u5668\u3002</li> <li>\u5982\u679c\u5728\u79fb\u9664\u524d <code>last == end()</code>\uff0c\u90a3\u4e48\u8fd4\u56de\u66f4\u65b0\u7684 <code>end()</code> \u8fed\u4ee3\u5668\u3002\u5982\u679c\u8303\u56f4 <code>[first, last)</code> \u4e3a\u7a7a\uff0c\u90a3\u4e48\u8fd4\u56de <code>last</code>\u3002</li> </ul> </li> </ul> <ol> <li><code>push_back</code> \u8ffd\u52a0\u7ed9\u5b9a\u5143\u7d20 <code>value</code> \u5230\u5bb9\u5668\u5c3e\u3002</li> </ol> <pre><code>void push_back( T&amp;&amp; value );\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main(){\n    vector&lt;int&gt; evens {2, 4, 6, 8};\n    evens.push_back(20);\n    evens.push_back(22);\n    evens.insert(evens.begin()+4, 5, 10);\n\n    for(int i = 0; i &lt; evens.size(); i++){\n        cout &lt;&lt; evens[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    for(vector&lt;int&gt;::iterator it = evens.begin(); it &lt; evens.end(); it++){  \n\n        // \u6bcf\u4e2a\u5bb9\u5668\u4e0b\u9762\u90fd\u6709\u8fd9\u4e2a\u8fed\u4ee3\u5668 iterator \n        // \u4f7f\u7528\u8981\u89e3\u5f15\u7528\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5e95\u5c42\u5c31\u662f\u7528\u6307\u9488\u5199\u7684\n\n        cout &lt;&lt; *it &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    for(int e: evens){  \n\n        // range-based for loop \u5982\u679c\u53ea\u9700\u8981\u8bbf\u95ee\u91cc\u9762\u7684\u5143\u7d20\u7684\u8bdd\n\n        cout &lt;&lt; e &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    for(auto it = evens.begin(evens); it &lt; evens.end(); it++){  \n\n        // \u4e0a\u9762\u76f8\u5f53\u4e8e\u5728\u505a\u8fd9\u4e2a\n\n        cout &lt;&lt; *it &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter3/#pitfalls-access-safety","title":"Pitfalls - access safety","text":"<p>Accessing an invalid element of a vector.</p> <pre><code>vector&lt;int&gt; v;\nv[100] = 1; // Whoops!\n</code></pre> <ul> <li>use <code>push_back()</code> for dynamic expansion.</li> <li>Preallocate with constructor.</li> <li>Reallocate with resize() .</li> </ul>"},{"location":"Computer_Science/OOP/Chapter3/#pitfalls-size-on-list","title":"Pitfalls - size() on list&lt;&gt;","text":"<ul> <li>This might cost linear time before C++11.</li> </ul> <pre><code>if (my_list.size() == 0) {\n ...\n}\n</code></pre> <ul> <li>Constant time guaranteed.</li> </ul> <pre><code>if (my_list.empty()) {\n ...\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter3/#pitfalls-invalid-iterator","title":"Pitfalls - invalid iterator","text":"<pre><code>list&lt;int&gt; L;\nlist&lt;int&gt;::iterator li;\nli = L.begin();\nL.erase(li);\n++li; // WRONG because it is a list \u94fe\u8868\u8fde\u63a5\n</code></pre> <ul> <li>Using invalid iterator.</li> <li><code>li</code> \u521d\u59cb\u6307\u5411\u94fe\u8868 L \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff08<code>L.begin()</code>\uff09\u3002</li> <li><code>L.erase(li)</code> \u5220\u9664\u4e86 <code>li</code> \u6240\u6307\u5411\u7684\u5143\u7d20\u3002</li> <li>\u5220\u9664\u64cd\u4f5c\u540e\uff0c<code>li</code> \u53d8\u4e3a\u65e0\u6548\u7684\u8fed\u4ee3\u5668\uff08\u56e0\u4e3a\u5b83\u6307\u5411\u7684\u5143\u7d20\u5df2\u7ecf\u88ab\u5220\u9664\uff09\u3002</li> <li>\u5c1d\u8bd5\u5bf9\u65e0\u6548\u7684\u8fed\u4ee3\u5668 <code>li</code> \u8fdb\u884c <code>++li</code> \u64cd\u4f5c\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u6216\u9519\u8bef\u3002</li> </ul> <pre><code>li = L.erase(li); // RIGHT\n</code></pre> <ul> <li>Use return value of <code>erase()</code> to advance.</li> <li><code>L.erase(li)</code> \u4f1a\u5220\u9664 <code>li</code> \u6240\u6307\u5411\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u6709\u6548\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</li> <li>\u5c06\u8fd4\u56de\u503c\u8d4b\u503c\u7ed9 <code>li</code>\uff0c\u8fd9\u6837 <code>li</code> \u4ecd\u7136\u662f\u4e00\u4e2a\u6709\u6548\u7684\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u5220\u9664\u64cd\u4f5c\u540e\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u53ef\u4ee5\u5b89\u5168\u5730\u7ee7\u7eed\u4f7f\u7528 <code>li</code>\u3002</li> </ul> <p>vector[] vs at()</p> <p><code>operator[]</code> \u4e0d\u8fdb\u884c\u8fb9\u754c\u68c0\u67e5\u3002\u5982\u679c\u7d22\u5f15\u8d8a\u754c\uff0c\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\u3002\u66f4\u5feb\uff0c\u56e0\u4e3a\u6ca1\u6709\u989d\u5916\u7684\u8fb9\u754c\u68c0\u67e5\u5f00\u9500\u3002</p> <p><code>at()</code> \u8fdb\u884c\u8fb9\u754c\u68c0\u67e5\u3002\u5982\u679c\u7d22\u5f15\u8d8a\u754c\uff0c\u629b\u51fa std::out_of_range \u5f02\u5e38\u3002\u7a0d\u6162\uff0c\u56e0\u4e3a\u9700\u8981\u8fdb\u884c\u8fb9\u754c\u68c0\u67e5\u3002</p>"},{"location":"Computer_Science/OOP/Chapter3/#stdvector","title":"<code>std::vector</code> \u7684\u8fed\u4ee3\u5668","text":"<p>\u7c7b\u578b\uff1a<code>std::vector</code> \u7684\u8fed\u4ee3\u5668\u662f\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff08Random Access Iterator\uff09\u3002</p> <ol> <li>\u652f\u6301\u7684\u64cd\u4f5c\uff1a</li> </ol> <ul> <li>\u5411\u524d\u904d\u5386\uff08<code>++p</code>\uff09\u3002</li> <li>\u5411\u540e\u904d\u5386\uff08<code>--p</code>\uff09\u3002</li> <li>\u968f\u673a\u8bbf\u95ee\uff08<code>p + n</code> \u6216 <code>p - n</code>\uff09\u3002</li> <li>\u6bd4\u8f83\u5927\u5c0f\uff08<code>p1 &lt; p2</code> \u6216 <code>p1 &gt; p2</code>\uff09\u3002</li> </ul> <p>\u539f\u56e0\uff1a <code>std::vector</code> \u7684\u5e95\u5c42\u5b9e\u73b0\u662f\u52a8\u6001\u6570\u7ec4\uff0c\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u662f\u8fde\u7eed\u5b58\u50a8\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u7b97\u672f\u5feb\u901f\u8bbf\u95ee\u4efb\u610f\u4f4d\u7f6e\u7684\u5143\u7d20\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff09\u3002</p>"},{"location":"Computer_Science/OOP/Chapter3/#list","title":"<code>list</code>","text":""},{"location":"Computer_Science/OOP/Chapter3/#stdlist-bidirectional-iterator","title":"<code>std::list</code> \u7684\u8fed\u4ee3\u5668\u662f\u53cc\u5411\u8fed\u4ee3\u5668\uff08Bidirectional Iterator\uff09\u3002","text":"<ol> <li>\u652f\u6301\u7684\u64cd\u4f5c\uff1a</li> </ol> <ul> <li>\u5411\u524d\u904d\u5386\uff08++p\uff09\u3002</li> <li>\u5411\u540e\u904d\u5386\uff08--p\uff09\u3002</li> <li>\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\uff08p1 == p2 \u6216 p1 != p2\uff09\u3002</li> </ul> <ol> <li>\u4e0d\u652f\u6301\u7684\u64cd\u4f5c\uff1a</li> </ol> <ul> <li>\u968f\u673a\u8bbf\u95ee\uff08<code>p + n</code> \u6216 <code>p - n</code>\uff09\u3002</li> <li>\u6bd4\u8f83\u5927\u5c0f\uff08<code>p1 &lt; p2</code> \u6216 <code>p1 &gt; p2</code>\uff09\u3002</li> </ul> <p>\u539f\u56e0\uff1a<code>std::list</code> \u7684\u5e95\u5c42\u5b9e\u73b0\u662f\u53cc\u5411\u94fe\u8868\uff0c\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u4e0d\u662f\u8fde\u7eed\u5b58\u50a8\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u901a\u8fc7\u7b80\u5355\u7684\u6307\u9488\u7b97\u672f\u5feb\u901f\u8bbf\u95ee\u4efb\u610f\u4f4d\u7f6e\u7684\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/OOP/Chapter3/#associative","title":"Associative","text":"<ul> <li><code>set</code> (collection of unique keys)</li> <li><code>map</code> (collection of key-value pairs)</li> <li><code>multiset</code> , <code>multimap</code></li> </ul>"},{"location":"Computer_Science/OOP/Chapter3/#map","title":"<code>map</code>","text":"<ul> <li>Collection of key-value pairs.</li> <li>Lookup by key, and retrieve a value.</li> <li>Example: a telephone book, <code>map&lt;string,string&gt;</code></li> </ul> <p><code>std::map</code> \u662f\u4e00\u79cd\u6709\u5e8f\u5173\u8054\u5bb9\u5668\uff0c\u5b83\u5305\u542b\u5177\u6709\u552f\u4e00\u952e\u7684\u952e\u503c\u5bf9\u3002\u952e\u4e4b\u95f4\u4ee5\u6bd4\u8f83\u51fd\u6570 <code>Compare</code> \u6392\u5e8f\u3002\u641c\u7d22\u3001\u79fb\u9664\u548c\u63d2\u5165\u64cd\u4f5c\u62e5\u6709\u5bf9\u6570\u590d\u6742\u5ea6\u3002<code>map</code> \u901a\u5e38\u5b9e\u73b0\u4e3a\u7ea2\u9ed1\u6811\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main(){\n    map&lt;string, int&gt; price;\n    price[\"apple\"] = 3;\n    price[\"orange\"] = 5;\n    price[\"banana\"] = 1;\n\n    for(const auto &amp;pair: price){\n        cout &lt;&lt; \"{\" &lt;&lt; pair.first &lt;&lt; \" : \" &lt;&lt; pair.second &lt;&lt; \"} \";  \n\n        // \u5176\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u662f pair&lt;string, int&gt;\n    }\n    cout &lt;&lt; endl;\n\n    string item;\n    int total = 0;\n    while(cin &gt;&gt; item){\n        total += price[item];\n    }\n    cout &lt;&lt; total &lt;&lt; endl;\n\n    while(cin &gt;&gt; item){\n        if(price.contains(item)){\n            total += price[item];\n        }else{\n            cout &lt;&lt; \"No such item: \" &lt;&lt; item &lt;&lt; endl;\n        }\n    }\n}\n</code></pre> <p>\u5173\u4e8e map \u7684\u8bbf\u95ee</p> <ol> <li>\u4f7f\u7528 <code>operator[]</code> \u8bbf\u95ee</li> </ol> <p>\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c<code>std::map</code> \u4f1a\u81ea\u52a8\u63d2\u5165\u8be5\u952e\uff0c\u5e76\u5c06\u5176\u503c\u521d\u59cb\u5316\u4e3a\u9ed8\u8ba4\u503c\uff08\u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b\uff0c\u5982 <code>int</code>\uff0c\u9ed8\u8ba4\u503c\u4e3a <code>0</code>\uff1b\u5bf9\u4e8e\u7c7b\u7c7b\u578b\uff0c\u8c03\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff09\u3002\u518d\u8fd4\u56de\u8be5\u952e\u5bf9\u5e94\u7684\u503c\u7684\u5f15\u7528\u3002</p> <ol> <li>\u4f7f\u7528 <code>at()</code> \u8bbf\u95ee</li> </ol> <p>\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c<code>at()</code> \u4f1a\u629b\u51fa <code>std::out_of_range</code> \u5f02\u5e38\u3002\u4e0d\u4f1a\u4fee\u6539 <code>std::map</code>\u3002</p> <ol> <li>\u4f7f\u7528 <code>find()</code> \u8bbf\u95ee</li> </ol> <p>\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c<code>find()</code> \u8fd4\u56de <code>std::map::end()</code>\uff0c\u8868\u793a\u672a\u627e\u5230\u3002\u4e0d\u4f1a\u4fee\u6539 <code>std::map</code>\u3002</p>"},{"location":"Computer_Science/OOP/Chapter3/#_1","title":"\u7ed3\u6784\u5316\u7ed1\u5b9a","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main(){\n    map&lt;string, int&gt; word_map;\n    for(const auto&amp; w : {\"we\", \"are\", \"not\", \"humans\", \"we\", \"are\", \"robots\", \"!!\"}){\n        ++word_map[w];\n    }\n\n    for(const auto&amp; [word, count] : word_map){  // [] \u662f\u7ed3\u6784\u5316\u7684\u7ed1\u5b9a\n        cout &lt;&lt; word &lt;&lt; \" occurs \" &lt;&lt; count &lt;&lt; \" times\" &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li><code>word_map</code> \u662f\u4e00\u4e2a <code>std::map&lt;std::string, int&gt;</code>\uff0c\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u662f <code>std::pair&lt;const std::string, int&gt;</code>\u3002</li> <li><code>const auto&amp; [word, count]</code> \u662f\u7ed3\u6784\u5316\u7ed1\u5b9a\uff1a<ul> <li><code>word</code> \u7ed1\u5b9a\u5230 <code>std::pair</code> \u7684\u7b2c\u4e00\u4e2a\u6210\u5458\uff08\u5373\u952e\uff0c<code>std::string</code> \u7c7b\u578b\uff09\u3002</li> <li><code>count</code> \u7ed1\u5b9a\u5230 <code>std::pair</code> \u7684\u7b2c\u4e8c\u4e2a\u6210\u5458\uff08\u5373\u503c\uff0c<code>int</code> \u7c7b\u578b\uff09\u3002</li> <li>\u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 <code>word</code> \u548c <code>count</code>\uff0c\u800c\u4e0d\u9700\u8981\u901a\u8fc7 <code>pair.first</code> \u548c <code>pair.second</code> \u6765\u8bbf\u95ee\u3002</li> </ul> </li> </ul> name phone \"Charles Nguyen\" \"(531) 9392 4587\" \"Lisa Jones\" \"(402) 4536 4674\" \"William H. Smith\" \"(998) 5488 0123\""},{"location":"Computer_Science/OOP/Chapter3/#pitfalls-silent-insertion","title":"Pitfalls - silent insertion","text":"<ul> <li>Inadvertently inserting into <code>map&lt;&gt;</code></li> </ul> <pre><code>if (foo[\"bob\"] == 1) // create an entry \"bob\" silently\n</code></pre> <ul> <li>Use <code>count()</code> , or <code>contains()</code> , to check for a key without creating a new entry.</li> </ul> <pre><code>if (foo.count(\"bob\"))\nif (foo.contains(\"bob\")) // introduced in C++20\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter3/#unordered-associative","title":"Unordered associative","text":"<ul> <li>hashed by keys</li> <li><code>unordered_set</code> , <code>unordered_map</code></li> <li><code>unordered_multiset</code> , <code>unordered_multimap</code></li> </ul>"},{"location":"Computer_Science/OOP/Chapter3/#adaptors","title":"Adaptors","text":"<ul> <li><code>stack</code> , <code>queue</code> , <code>priority_queue</code></li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;deque&gt;\nusing namespace std;\n\ntemplate &lt;typename T&gt; \nclass Stack{\npublic:\n    virtual ~Stack() = default;\n    virtual T&amp; top() = 0;\n    virtual bool empty() const = 0;\n    virtual size_t size() const = 0;\n    virtual void push(const T&amp; value) = 0;\n    virtual void pop() = 0;\n};\n\ntemplate &lt;typename T, typename Container = std::deque&lt;T&gt;&gt;\nclass c_stack : public Stack&lt;T&gt;{\npubulic:\n    T&amp; top() override{ return c.back();}\n    bool empty() const override{ return c.empty();}\n    size_t size() const override{ return c.size();}\n    void push(const T&amp; value) override{ c.push_back(value);}\n    void pop() override{ c.pop_back();}\nPrivate:\n    Container c;\n};\n\nbool is_balanced(const string&amp; s){\n    c_stack&lt;char, list&lt;char&gt;&gt; st;\n\n    for(char c : s){\n        if(c == '(' || c == '{' || c == '['){\n            st.push(c);\n        }else if(c == ')' || c == '}' || c == ']'){\n            if(st.empty()) return false;\n            char top = st.top();\n            st.pop();\n            if((c == ')' &amp;&amp; top != '(') || (c == '}' &amp;&amp; top != '{') || (c == ']' &amp;&amp; top != '[')){\n                return false;\n            }\n        }\n    }\n\n    return st.empty();\n}\n\nint main(){\n    string test1 = \"a(b{c[d]e}f)g\";\n    string test2 = \"x(y{z[)}}\";\n\n    cout &lt;&lt; \"Test 1: \" &lt;&lt; (is_balanced(test1) ? \"Balanced\" : \"Unbalanced\") &lt;&lt; endl;\n    cout &lt;&lt; \"Test 2: \" &lt;&lt; (is_balanced(test2) ? \"Balanced\" : \"Unbalanced\") &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <ul> <li>\u7eaf\u865a\u51fd\u6570</li> </ul> <p>\u5c06\u6210\u5458\u51fd\u6570\u58f0\u660e\u4e3a \u7eaf\u865a\u51fd\u6570(\u5373\u4f7f\u7528 = 0)\u7684\u76ee\u7684\u662f\u5b9a\u4e49\u4e00\u4e2a \u62bd\u8c61\u57fa\u7c7b(\u63a5\u53e3\u7c7b)\uff0c\u5f3a\u5236\u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u8fd9\u4e9b\u51fd\u6570\u3002\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u8981\u6c42\u6240\u6709\u6d3e\u751f\u7c7b\u5fc5\u987b\u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0\u3002\u8fd9\u76f8\u5f53\u4e8e\u5b9a\u4e49\u4e86\u4e00\u4e2a \u63a5\u53e3\u89c4\u8303\uff0c\u5f3a\u5236\u6240\u6709\u5b50\u7c7b\u9075\u5faa\u7edf\u4e00\u7684\u63a5\u53e3\u8bbe\u8ba1\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;infix_iterator.h&gt;\n\nint main(){\n    vector&lt;int&gt; v = {1, 2, 3, 5};\n    vector&lt;int&gt; u;\n\n    reverse(v.begin(), v.end());\n    copy(v.begin(), v.end(), u.begin()); // \u8fd9\u4f1a\u8dd1\u5d29\n    copy(v.begin(), v.end(), back_inserter(u));\n\n    copy(u.begin(),u.end(),ostream_iterator&lt;int&gt;(cout, \",\")); // 5,3,2,1,\n    cout &lt;&lt; endl;\n\n    list&lt;int&gt; l;\n    copy(v.begin(), v.end(), front_inserter(l));\n    copy(l.begin(), l.end(), ostream_iterator&lt;int&gt;(cout, \",\")); // 1,2,3,5,\n    cout &lt;&lt; endl;\n\n    copy(v.begin(), v.end(), infix_ostream_iterator&lt;int&gt;(cout, \",\"));  // 1,2,3,5\n    cout &lt;&lt; endl;\n}\n</code></pre> <ul> <li><code>copy(v.begin(), v.end(), u.begin());</code> </li> </ul> <p><code>u</code> \u662f\u4e00\u4e2a\u7a7a\u5411\u91cf\uff0c<code>u.begin()</code> \u6307\u5411\u65e0\u6548\u5185\u5b58\u4f4d\u7f6e\u3002<code>copy</code> \u8bd5\u56fe\u5411\u672a\u5206\u914d\u5185\u5b58\u7684\u4f4d\u7f6e\u5199\u5165\u6570\u636e\uff0c\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff08\u7a0b\u5e8f\u5d29\u6e83\u6216\u6570\u636e\u635f\u574f\uff09\u3002</p> <ul> <li><code>std::back_inserter</code></li> </ul> <p>\u63d2\u5165\u8fed\u4ee3\u5668\u9002\u914d\u5668\uff0c\u901a\u8fc7 <code>push_back</code> \u5411\u5bb9\u5668\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\u3002</p> <ul> <li><code>std::copy(u.begin(), u.end(), std::ostream_iterator&lt;int&gt;(std::cout, \",\"));</code></li> </ul> <p>\u8f93\u51fa\u8fed\u4ee3\u5668\uff0c\u5c06\u5143\u7d20\u5199\u5165\u8f93\u51fa\u6d41\uff08\u5982 std::cout\uff09\u3002\u53ef\u4ee5\u4e0d\u7528\u5faa\u73af\u3002</p> <p>\u8f93\u51fa\uff1a5,3,2,1,\uff08\u6ce8\u610f\u672b\u5c3e\u591a\u4f59\u7684\u9017\u53f7\uff09\u3002</p> <ul> <li><code>copy(v.begin(), v.end(), front_inserter(l));</code></li> </ul> <p>\u63d2\u5165\u8fed\u4ee3\u5668\u9002\u914d\u5668\uff0c\u901a\u8fc7 <code>push_front</code> \u5411\u5bb9\u5668\u5934\u90e8\u6dfb\u52a0\u5143\u7d20\u3002</p> <p><code>std::copy</code> \u6309\u539f\u987a\u5e8f\u590d\u5236\u5143\u7d20\uff0c\u4f46 <code>front_inserter</code> \u4f1a\u9006\u5e8f\u63d2\u5165\uff08\u56e0\u4e3a\u6bcf\u6b21\u63d2\u5165\u5230\u5934\u90e8\uff09\u3002</p> <ul> <li><code>copy(v.begin(), v.end(), infix_ostream_iterator&lt;int&gt;(cout, \",\"));</code></li> </ul> <p>\u4ec5\u5728\u5143\u7d20\u4e4b\u95f4\u63d2\u5165\u5206\u9694\u7b26\uff08\u907f\u514d\u672b\u5c3e\u591a\u4f59\u7684\u5206\u9694\u7b26\uff09\u3002</p>"},{"location":"Computer_Science/OOP/Chapter3/#algorithms","title":"Algorithms","text":"<p>Note</p> <p>\u6709\u5173 Algorithms \u7684\u8be6\u7ec6\u5185\u5bb9\uff0c\u53ef\u4ee5\u770b 105 STL Algorithmsin Less Than an Hour</p>"},{"location":"Computer_Science/OOP/Chapter3/#iterators","title":"Iterators","text":""},{"location":"Computer_Science/OOP/Chapter3/#typedefs","title":"Typedefs","text":"<ul> <li>Annoying to type long names<ul> <li><code>map&lt;Name,list&lt;PhoneNum&gt;&gt; phonebook ;</code></li> <li><code>map&lt;Name,list&lt;PhoneNum&gt;&gt;::iterator finger ;</code></li> </ul> </li> <li>Simplify with typedef<ul> <li><code>typedef map&lt;Name,list&lt;PhoneNum&gt;&gt; PB ;</code></li> <li><code>PB phonebook ;</code></li> <li><code>PB::iterator finger ;</code></li> </ul> </li> <li>C++11: <code>auto</code> , <code>using</code></li> </ul> <p>Using your own classes</p> <ul> <li>Might need:<ul> <li>assignment operator, <code>operator=()</code></li> <li>default constructor</li> </ul> </li> <li>For sorted types, like <code>set</code> , <code>map</code> , ...<ul> <li>less-than operator, <code>operator&lt;()</code></li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter3/#further-reading","title":"Further reading","text":"introducing-the-stl   93 KB / 2025-03-03 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter4/","title":"Chapter 4 | Memory Model","text":"<p> \u7ea6 2645 \u4e2a\u5b57  332 \u884c\u4ee3\u7801  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 17 \u5206\u949f</p> <pre><code>int i;  // global vars\nstatic int j;  // static global vars\n\nvoid f(){\n    int k;  // local vars\n    static int l;  // static local vars\n\n    int *p = malloc(sizeof(int));  // allocated vars\n}\n</code></pre> <ul> <li><code>p</code> \u5176\u5b9e\u4e5f\u662f local variable\uff0c\u4f46\u662f <code>p</code> \u91cc\u9762\u5b58\u4e86\u4e00\u4e2a <code>malloc</code> \u51fa\u6765\u7684\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u5730\u5740\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#what-are-they-in-memory","title":"What are they in memory?","text":"<p>\u53ef\u6267\u884c\u6587\u4ef6\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002</p> <p>\u7cfb\u7edf\u5206\u914d\u4e86\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\u7ed9\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <ul> <li><code>bss segment</code> <ul> <li>\u5b58\u653e\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf(\u4e5f\u5373\u9690\u5f0f\u521d\u59cb\u5316)\u3002</li> </ul> </li> <li><code>data segment</code> <ul> <li>\u5b58\u653e\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u3002</li> <li>\u6570\u636e\u6bb5\u5c5e\u4e8e\u9759\u6001\u5185\u5b58\u5206\u914d,\u53ef\u4ee5\u5206\u4e3a\u53ea\u8bfb\u6570\u636e\u6bb5\u548c\u8bfb\u5199\u6570\u636e\u6bb5\u3002</li> </ul> </li> <li><code>code segment / text segment</code> <ul> <li>\u5b58\u653e\u4ee3\u7801\u3002</li> <li>\u8fd9\u90e8\u5206\u533a\u57df\u7684\u5927\u5c0f\u5728\u7a0b\u5e8f\u8fd0\ufa08\u524d\u5c31\u5df2\u7ecf\u786e\u5b9a,\u5e76\u4e14\u5185\u5b58\u533a\u57df\u901a\u5e38\u5c5e\u4e8e\u53ea\u8bfb, \u5728\u4ee3\u7801\u6bb5\u4e2d,\u4e5f\u6709\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u53ea\u8bfb\u7684\u5e38\u6570\u53d8\uf97e,\u4f8b\uf9b5\u5982\u5b57\u7b26\uf905\u5e38\uf97e\u7b49,\u4f46\u4e00\u822c\u90fd\u662f\u653e\u5728\u53ea\u8bfb\u6570\u636e\u6bb5\u4e2d\u3002</li> </ul> </li> <li><code>heap</code> <ul> <li>\u5b58\u653e\u8fdb\u7a0b\u8fd0\ufa08\u4e2d\u88ab\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u6bb5\u3002</li> <li>\u5b83\u7684\u5927\u5c0f\u5e76\uf967\u56fa\u5b9a,\u53ef\u52a8\u6001\u6269\u5f20\u6216\u7f29\u51cf\u3002</li> </ul> </li> <li><code>stack</code> <ul> <li>local vars</li> <li>\u662f\u7528\u6237\u5b58\u653e\u7a0b\u5e8f\u4e34\u65f6\u521b\u5efa\u7684\u5c40\u90e8\u53d8\uf97e,\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u51fd\u6570\u62ec\u5f27\"{}\" \u4e2d\u5b9a\u4e49\u7684\u53d8\uf97e(\u4f46\u4e0d\uf967\u5305\u62ec <code>static</code> \u58f0\u660e\u7684\u53d8\uf97e, <code>static</code> \u610f\u5473\u7740\u5728\u6570\u636e\u6bb5\u4e2d\u5b58\u653e\u53d8\uf97e)\u3002</li> <li>\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e5f\u4f1a\u88ab\u5b58\u653e\u56de\u6808\u4e2d\u3002\u7531\u4e8e\u6808\u7684\u5148\u8fdb\u5148\u51fa\u7279\u70b9,\u6240\u4ee5\u6808\u7279\u522b\u65b9\uf965\u7528\u6765\u4fdd\u5b58/\u6062\u590d\u8c03\u7528\u73b0\u573a\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bb2,\u6211\u4eec\u53ef\u4ee5\u628a\u5806\u6808\u770b\u6210\u4e00\u4e2a\u5bc4\u5b58\u3001\u4ea4\u6362\u4e34\u65f6\u6570\u636e\u7684\u5185\u5b58\u533a\u3002</li> </ul> </li> </ul> <pre><code>#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint globalx = 10;\n\nint main(){\n    static int staticx = 3;\n    int localx = 5;\n    int *px = (int*)malloc(sizeof(int));\n\n    cout &lt;&lt; \"&amp;globalx = \" &lt;&lt; &amp;globalx &lt;&lt; endl;  // &amp;globalx = 0x7ff70c4b9010 \u5168\u5c40\u6570\u636e\u533a\n    cout &lt;&lt; \"&amp;staticx = \" &lt;&lt; &amp;staticx &lt;&lt; endl;  // &amp;staticx = 0x7ff70c4b9014 \u5168\u5c40\u6570\u636e\u533a\n    cout &lt;&lt; \"&amp;localx = \" &lt;&lt; &amp;localx &lt;&lt; endl;  // &amp;localx = 0xdeca3ff82c  \u6808\n    cout &lt;&lt; \"&amp;px = \" &lt;&lt; &amp;px &lt;&lt; endl;  // &amp;px = 0xdeca3ff820 \u6808\n    cout &lt;&lt; \"px = \" &lt;&lt; px &lt;&lt; endl;   // px = 0x28b3e831570 \u5206\u914d\u7684\u6307\u5411\u7684\u4e1c\u897f\u7684\u5730\u5740 \u5806\n\n    return 0;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter4/#global-vars","title":"Global vars","text":"<ul> <li>vars defined outside any function</li> <li>can be shared btw .cpp files</li> <li> <p>extern</p> </li> <li> <p><code>another.cpp</code></p> </li> </ul> <pre><code>int globalx = 10;\ndouble pi(){\n    return 3.14;\n}\n</code></pre> <ul> <li><code>main.cpp</code></li> </ul> <pre><code>#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nextern int globalx;\ndouble pi();\n\nint main(){\n    cout &lt;&lt; \"globalx = \" &lt;&lt; globalx &lt;&lt; endl;\n    cout &lt;&lt; \"pi = \" &lt;&lt; pi() &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u5728\u7f16\u8bd1\u65f6\u9700\u8981\u4f7f\u7528 <code>g++ main.cpp another.cpp</code>\uff0c\u5426\u5219\u4f1a\u62a5\u9519 <code>undefined reference to 'globalx'</code>\u3002</li> <li>\u5bf9\u4e8e\u53d8\u91cf\u3001\u51fd\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6709\u5b9a\u4e49\u6709\u58f0\u660e\u624d\u80fd\u4f7f\u7528\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#extern","title":"Extern","text":"<ul> <li>extern is a declaration says there will be such a variable somewhere in the whole program</li> <li>\"such a\" means the type/name of the variable</li> <li>global variable is a definition, the storage place for that variable</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#static","title":"Static","text":"<ul> <li>static global variable inhibits the access outside its .cpp file</li> <li>so as the static function</li> </ul> <pre><code>static int globalx = 10;\n\nstatic double pi(){\n    return 3.14;\n}\n</code></pre> <ul> <li>\u6b64\u65f6 <code>g++ main.cpp another.cpp</code> \u4f1a\u62a5\u9519 <code>undefined symbols</code></li> <li>\u56e0\u4e3a <code>static</code> \u5173\u952e\u5b57\u52a0\u4e86\u4ee5\u540e\u8bf4\u660e\u6211\u73b0\u5728\u5b9a\u4e49\u7684\u4e1c\u897f\u7684\u4f5c\u7528\u57df\u662f\u672c\u6587\u4ef6\u5355\u5143\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#static-local-vars","title":"Static local vars","text":"<ul> <li>static local variable keeps its state in between multiple calls to its function</li> <li> <p>is initialized at its first access</p> </li> <li> <p>key properties:</p> <ul> <li>restricted access scope \u4f5c\u7528\u57df\u9650\u5236</li> <li>persistent storage \u5b58\u50a8\u6c38\u4e45\u6027</li> </ul> </li> </ul> <pre><code>void access_count(){\n    static int count = 0;\n\n    cout &lt;&lt; \"access count: \" &lt;&lt; ++count &lt;&lt; endl;\n}\n\nint main(){\n    for(int i = 0; i &lt; 10; ++i){\n        access_count();\n    }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>access count: 1\naccess count: 2\naccess count: 3\naccess count: 4\naccess count: 5\naccess count: 6\naccess count: 7\naccess count: 8\naccess count: 9\naccess count: 10\n</code></pre> <ul> <li>\u653e\u5728\u5168\u5c40\u6570\u636e\u533a\uff0c\u6301\u4e45\u6027\u5b58\u50a8\uff0c\u662f\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u72b6\u6001\u7684\uff0c\u591a\u6b21\u8c03\u7528\uff0c\u53ef\u4ee5\u4fdd\u6301\u4f4f\u8fd9\u4e2a\u72b6\u6001\u3002</li> <li>\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u533a\u57df\u51b3\u5b9a\u4e86\u5982\u4f55\u53bb\u7528\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#pointers-to-objects","title":"Pointers to objects","text":"<pre><code>string s = \"hello\";  // \u521d\u59cb\u5316\nstring *ps = &amp;s;  // \u6307\u9488\u6307\u5411\u4e1c\u897f\u7684\u7c7b\u578b\u662f string\uff0c\u521d\u59cb\u5316\u7ed1\u4e86\u4e00\u4e2a\u5bf9\u8c61 s \u7684\u5730\u5740\n</code></pre> <ul> <li>get the address <code>ps = &amp;s;</code></li> <li>get the object <code>(*ps).length();</code></li> <li> <p>call the function <code>ps-&gt;length();</code></p> </li> <li> <p><code>string s;</code></p> <ul> <li><code>s</code> is the object itself</li> <li>At this line, a string object is created and initialized</li> </ul> </li> <li><code>string *ps;</code><ul> <li><code>ps</code> is a pointer to an object</li> <li>the object <code>ps</code> points to is not known yet</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#assignment","title":"Assignment","text":"<pre><code>string s1, s2;\ns1 = s2;  // s1 is assigned the value of s2\n\nstring *ps1, *ps2;\nps1 = ps2;  // ps1 is assigned the address of what ps2 points to\n</code></pre> <ul> <li><code>s1 = s2</code> \u662f\u505a\u4e86\u4e00\u4e2a\u62f7\u8d1d\u3002</li> <li><code>ps1 = ps2</code> \u662f\u5730\u5740\u7684 copy ,\u4e5f\u5c31\u662f\u5f62\u6210\u4e86\u4e00\u79cd\u5171\u4eab\uff0c\u540c\u65f6\u6307\u5411\u4e00\u4e2a\u4e1c\u897f\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#defining-references","title":"Defining references","text":"<ul> <li>References are a new data type in C++</li> </ul> <pre><code>char c;  // a character\nchar *p = &amp;c;  // a pointer to a character\nchar &amp;r = c;  // a reference to a character\n</code></pre> <ul> <li>\u8fd9\u6837\u7ed1\u5b9a\u4e4b\u540e,\u6b64\u65f6 <code>r</code> \u548c <code>c</code> \u5728\u8bed\u4e49\u4e0a\u5c31\u662f\u540c\u4e00\u4e2a\u4e1c\u897f\u3002</li> <li><code>type&amp; refname = name;</code><ul> <li>For ordinary variable definition</li> <li>An initial value is required</li> </ul> </li> <li> <p><code>type&amp; refname</code></p> <ul> <li>\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\u53ef\u4ee5\u7701\u7565: In parameter list or member variables</li> <li>\u51fd\u6570\u7684\u53c2\u6570\u8868\u4ee5\u53ca class \u5b57\u6bb5</li> </ul> <pre><code>// \u51fd\u6570\u53c2\u6570\u4e2d\u7684\u5f15\u7528\u5728\u8c03\u7528\u65f6\u7531\u5b9e\u53c2\u521d\u59cb\u5316\uff0c\u65e0\u9700\u663e\u5f0f\u521d\u59cb\u5316\u3002\nvoid modify(int&amp; ref) {\n    ref += 10; // ref \u7ed1\u5b9a\u5230\u8c03\u7528\u65f6\u4f20\u5165\u7684\u5b9e\u53c2\n}\n\nint main() {\n    int y = 20;\n    modify(y); // ref \u5728\u8c03\u7528\u65f6\u88ab\u521d\u59cb\u5316\u4e3ay\u7684\u522b\u540d\n    return 0;\n}\n\n// \u7c7b\u7684\u6210\u5458\u5f15\u7528\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u4e0d\u521d\u59cb\u5316\uff0c\u4f46\u5fc5\u987b\u901a\u8fc7\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u521d\u59cb\u5316\u3002\nclass MyClass {\npublic:\n    int&amp; ref; // \u58f0\u660e\u65f6\u672a\u521d\u59cb\u5316\n    MyClass(int&amp; r) : ref(r) {} // \u5fc5\u987b\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u521d\u59cb\u5316\n};\n\nint main() {\n    int x = 5;\n    MyClass obj(x); // obj.ref \u7ed1\u5b9a\u5230x\n    return 0;\n}\n</code></pre> <ul> <li>\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u4e1c\u897f\u521d\u59cb\u5316\u7684\u65f6\u673a\u4e0d\u662f\u5728\u5199\u8fd9\u53e5\u8bdd\u7684\u65f6\u5019\uff1a\u51fd\u6570\u8c03\u7528\u624d\u662f\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6784\u9020\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u624d\u662f\u521d\u59cb\u5316\u7684\u65f6\u5019\u3002</li> </ul> </li> </ul> <pre><code>int X = 47;\n// Y is a reference to X, X and Y now refer to the same variable\nint &amp;Y = X;\n\ncout &lt;&lt; \"Y = \" &lt;&lt; Y &lt;&lt; endl;  // prints Y = 47\nY = 18;\ncout &lt;&lt; \"X = \" &lt;&lt; X &lt;&lt; endl;  // prints X = 18\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter4/#rules-of-references","title":"Rules of references","text":"<ul> <li>References must be initialized when created</li> <li> <p>Initialization establishes a binding</p> <ul> <li>In definition</li> </ul> <pre><code>int x = 3;\nint&amp; y = x;\nconst int&amp; z = x;\n</code></pre> <ul> <li>As a function argument</li> </ul> <pre><code>void f(int&amp; x) ;\nf(y);  // initialized when function is called\n</code></pre> <p>\u4f8b\u5982:</p> <pre><code>#include &lt;iostream&gt;\n\nvoid f(int&amp; x) {\n    x = x + 10;\n}\n\nint main() {\n    int y = 5;\n    std::cout &lt;&lt; \"Before calling f(y), y = \" &lt;&lt; y &lt;&lt; std::endl;\n\n    f(y);\n\n    std::cout &lt;&lt; \"After calling f(y), y = \" &lt;&lt; y &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>Before calling f(y), y = 5\nAfter calling f(y), y = 15\n</code></pre> </li> <li> <p>Cannot rebind, unlike pointers (references \u662f\u4e0d\u80fd\u91cd\u7ed1\u7684)</p> </li> <li>Assignment changes the referred object</li> </ul> <pre><code>int&amp; y = x;\ny = z;  // Copy the value of z to y\n</code></pre> <pre><code>void f(int* x){\n    (*x)++;\n}\n\nvoid g(int&amp; x){\n    x++;  // Same effect as in f()\n}\n\nint x;\n\nint&amp; h(){\n    int q;\n    // ! return q;  // Error\n    return x;  // Safe, x lives outside this scope\n}\n\nint main(){\n    int a = 0;\n    f(&amp;a);  // Ugly (but explicit)\n    g(a);  // Clean (but hidden)\n    h() = 16;\n}\n</code></pre> <ul> <li>The target of a non-const reference must be an lvalue.</li> <li>\u5de6\u503c\uff1a\u6709\u660e\u786e\u5185\u5b58\u5730\u5740\u7684\u5bf9\u8c61\uff08\u4f8b\u5982\u53d8\u91cf\u3001\u6570\u7ec4\u5143\u7d20\u3001\u89e3\u5f15\u7528\u6307\u9488\u7b49\uff09\u3002</li> <li>\u53f3\u503c\uff1a\u4e34\u65f6\u5bf9\u8c61\u6216\u5b57\u9762\u91cf\uff08\u4f8b\u5982\u8868\u8fbe\u5f0f\u7ed3\u679c\u3001\u5b57\u9762\u503c\u3001\u51fd\u6570\u8fd4\u56de\u7684\u4e34\u65f6\u5bf9\u8c61\u7b49\uff09\u3002</li> </ul> <pre><code>void func(int &amp;);\nfunc (i * 3);  // Warning or Error!\n</code></pre> <ul> <li>\u53f3\u503c\uff08\u5982 <code>i * 3</code>\uff09\u662f\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u751f\u547d\u5468\u671f\u4ec5\u5b58\u5728\u4e8e\u8868\u8fbe\u5f0f\u6c42\u503c\u671f\u95f4\u3002\u5982\u679c\u5141\u8bb8\u975econst\u5f15\u7528\u7ed1\u5b9a\u5230\u53f3\u503c\uff0c\u4fee\u6539\u8fd9\u4e2a\u5f15\u7528\u6307\u5411\u7684\u503c\u65f6\uff0c\u4fee\u6539\u7684\u662f\u4e34\u65f6\u5bf9\u8c61\u7684\u503c\u3002\u7136\u800c\uff0c\u4e34\u65f6\u5bf9\u8c61\u4f1a\u7acb\u5373\u88ab\u9500\u6bc1\uff0c\u4fee\u6539\u540e\u7684\u503c\u65e0\u6cd5\u88ab\u540e\u7eed\u4ee3\u7801\u4f7f\u7528\uff0c\u5bfc\u81f4\u903b\u8f91\u9519\u8bef\u3002</li> <li><code>const</code>\u5f15\u7528\uff08\u5982 <code>const int&amp;</code>\uff09\u53ef\u4ee5\u7ed1\u5b9a\u5230\u53f3\u503c\uff0c\u56e0\u4e3a\u5b83\u627f\u8bfa\u4e0d\u4f1a\u4fee\u6539\u5f15\u7528\u7684\u5bf9\u8c61\uff0c\u4ece\u800c\u907f\u514d\u4e86\u4e0a\u8ff0\u95ee\u9898\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0cC++\u6807\u51c6\u89c4\u5b9a\uff1a\u5f53 <code>const</code> \u5f15\u7528\u7ed1\u5b9a\u5230\u53f3\u503c\u65f6\uff0c\u4e34\u65f6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u4f1a\u88ab\u5ef6\u957f\u5230\u8be5\u5f15\u7528\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u3002</li> </ul> <pre><code>void func(const int &amp;x) {\n    // \u53ef\u4ee5\u8bfb\u53d6x\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\n    std::cout &lt;&lt; x;  // \u5408\u6cd5\n}\n\nint main() {\n    func(i * 3);  // \u5408\u6cd5\uff1aconst\u5f15\u7528\u53ef\u4ee5\u7ed1\u5b9a\u5230\u53f3\u503c\n}\n</code></pre> <ul> <li>\u6b64\u65f6\uff0c<code>i * 3</code> \u751f\u6210\u7684\u4e34\u65f6\u5bf9\u8c61\u4f1a\u5b58\u6d3b\u5230 <code>func</code> \u51fd\u6570\u6267\u884c\u5b8c\u6bd5\uff0c\u907f\u514d\u60ac\u5782\u5f15\u7528(\u4e34\u65f6\u5bf9\u8c61\u5728\u8868\u8fbe\u5f0f\u7ed3\u675f\u540e\u7acb\u5373\u9500\u6bc1\u3002\u5982\u679c\u975e <code>const</code> \u5f15\u7528\u7ed1\u5b9a\u5230\u5df2\u9500\u6bc1\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u540e\u7eed\u901a\u8fc7\u5f15\u7528\u8bbf\u95ee\u8be5\u5bf9\u8c61\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff08UB\uff09\u3002)\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#type-restriction","title":"Type restriction","text":"<ul> <li>No references to references<ul> <li>\u5f15\u7528\u4e0d\u662f\u4e00\u4e2a\u5065\u5168\u7684\u53d8\u91cf\uff0c\u4e0d\u662f\u4e00\u4e2a\u72ec\u7acb\u5b58\u5728\u7684\uff0c\u8981\u4f9d\u8d56\u4e8e\u522b\u4eba\u3002\u56e0\u6b64\u53cc\u91cd\u5f15\u7528\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002</li> </ul> </li> <li>No pointers to references, but reference to pointer is ok</li> <li>No arrays of references</li> </ul> <pre><code>int&amp;* p;  // illegal\nvoid f(int*&amp; p);  // ok\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter4/#pointers-vs-references","title":"Pointers vs. References","text":"Pointers References independent of the bound object, can be uninitialized dependent on the bound object, just an alias, must be initialized can be bound to a different object can't be rebound can be set to null can't be null"},{"location":"Computer_Science/OOP/Chapter4/#dynamic-memory-allocation","title":"Dynamic memory allocation","text":""},{"location":"Computer_Science/OOP/Chapter4/#new-and-delete","title":"<code>new</code> and <code>delete</code>","text":"<ul> <li>new expression<ul> <li><code>new int</code> returns a pointer to a newly allocated object of type <code>int</code></li> <li><code>new Stash</code> returns a pointer to a newly allocated object of type <code>Stash</code></li> <li><code>new int[10]</code> returns a pointer to a newly allocated array of 10 objects of type <code>int</code></li> </ul> </li> <li> <p>delete expression</p> <ul> <li><code>delete p</code> deallocates the object pointed to by <code>p</code></li> <li><code>delete[] p</code> deallocates the array of objects pointed to by <code>p</code></li> </ul> </li> <li> <p>Similar to <code>malloc</code>, <code>new</code> is the way to allocate memory as a program runs. Pointers become the only access to that memory.</p> </li> <li>Similar to <code>free</code>, <code>delete</code> enables you to return memory to the memory pool when you are finished with it.</li> <li>Besides that, <code>new</code> and <code>delete</code> ensure the right calling of Ctor/Dtor for objects.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#dynamic-arrays","title":"Dynamic arrays","text":"<ul> <li>The <code>new</code> operator returns the address of the first element of the block.</li> </ul> <p><code>int *psome = new int[10];</code></p> <ul> <li>The presence of the brackets tells the program that it should free the whole array, not just the element.</li> </ul> <p><code>delete[] psome;</code></p>"},{"location":"Computer_Science/OOP/Chapter4/#tips-for-new-and-delete","title":"Tips for new and delete","text":"<ul> <li>Don't mix-use <code>new/delete</code> and <code>malloc/free</code> .</li> <li>Don't <code>delete</code> the same block of memory twice.</li> <li>Use <code>delete</code> (no brackets) if you've used <code>new</code> to allocate a single entity.</li> <li>Use <code>delete[]</code> if you've used <code>new[]</code> .</li> <li><code>delete</code> the null pointer is safe (nothing happens).</li> </ul> <pre><code>int *pa = new int(100);\ncout &lt;&lt; *pa &lt;&lt; endl;\n\nint *parr = new int[100];\nfor(itn i = 0; i &lt; 10; ++i){\n    parr[i] = i;\n}\n\nfor(int i = 0; i &lt; 10; ++i){\n    cout &lt;&lt; parr[i] &lt;&lt; endl;\n}\ndelete pa;\ndelete[] parr;\n</code></pre> <pre><code>struct Student{\n    int id;\n    Student(){\n        id = 0;\n        cout &lt;&lt; \"Student::Student(): id = \" &lt;&lt; id &lt;&lt; endl;\n    }\n    ~Student(){\n        cout &lt;&lt; \"Student::~Student(): id = \" &lt;&lt; id &lt;&lt; endl;\n    }\n};\n\nStudent *ps1 = (Student*)malloc(sizeof(Student));\ncout &lt;&lt; \"ps1-&gt;id = \" &lt;&lt; ps1-&gt;id &lt;&lt; endl;\nStudent *ps2 = new Student();\ncout &lt;&lt; \"ps2-&gt;id = \" &lt;&lt; ps2-&gt;id &lt;&lt; endl;\nfree(ps1);\ndelete ps2;\n\nStudent *psarr = new Student[5];\nfor(int i = 0; i &lt; 5; ++i){\n    psarr[i].id = i;\n}\ndelete[] psarr;\n</code></pre> <ul> <li>\u6b64\u65f6\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u4e86\uff0c\u6790\u6784\u51fd\u6570\u88ab\u8c03\u7528\u4e86\u3002\u81ea\u52a8\u89e6\u53d1\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u7684\u89e6\u53d1\u3002</li> <li>new \u548c delete \u76f8\u5f53\u4e8e\u591a\u505a\u4e86\u4e00\u6b65\u3002</li> <li>\u6784\u9020\u548c\u6790\u6784\u7684\u987a\u5e8f\u662f\u76f8\u53cd\u7684\u3002 \u4e2d\u7684\u5c40\u90e8\u5bf9\u8c61\u901a\u5e38\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u800c\u6808\u662f\u4e00\u79cd\u201c\u540e\u8fdb\u5148\u51fa\u201d\uff08LIFO\uff09\u7684\u6570\u636e\u7ed3\u6784\u3002\u6700\u540e\u6784\u9020\u7684\u5bf9\u8c61\u4f1a\u6700\u5148\u88ab\u6790\u6784\uff0c\u56e0\u4e3a\u5b83\u5728\u6808\u7684\u9876\u90e8\u3002</li> <li>\u5982\u679c\u5728 <code>delete[] psarr;</code> \u4f7f\u7528\u7684\u662f <code>delete</code>\uff0c\u90a3\u4e48\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u7528\u6570\u7ec4\u521d\u59cb\u5316\u548c\u4e0d\u662f\u6570\u7ec4\u521d\u59cb\u5316\u65f6\u5b58\u7684\u4e1c\u897f\u4e0d\u4e00\u6837\u3002\u7528 <code>delete</code> \u5728\u8c03\u7528\u7b2c\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u540e\u5c31\u4f1a\u62a5\u9519\u3002</li> </ul> <pre><code>int * a = new int[10];\ndelete[] a;\ndelete[] a;\n</code></pre> <ul> <li>\u6bcf\u5757\u5185\u5b58\u7684\u201c\u6240\u6709\u6743\u201d\u5e94\u660e\u786e\uff0c\u91ca\u653e\u540e\u7684\u5185\u5b58\u4e0d\u518d\u5c5e\u4e8e\u7a0b\u5e8f\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u7834\u574f\u5185\u5b58\u7ba1\u7406\u5668\u7684\u5185\u90e8\u6570\u636e\u7ed3\u6784\u3002\u5806\u7ba1\u7406\u5668\u65e0\u6cd5\u8bc6\u522b\u8fd9\u5757\u5185\u5b58\u662f\u5426\u6709\u6548\uff0c\u5bfc\u81f4\u53cc\u91cd\u91ca\u653e\uff08double free\uff09\u9519\u8bef\uff0c\u53ef\u80fd\u5f15\u53d1\u7a0b\u5e8f\u5d29\u6e83\u6216\u5185\u5b58\u635f\u574f\u3002</li> </ul> <pre><code>int * a = new int[10];\ndelete[] a;\na = 0;  // or a = nullptr;\ndelete[] a;\n</code></pre> <ul> <li><code>delete[]</code> \u7684\u6267\u884c\u6b65\u9aa4:<ol> <li>\u68c0\u67e5\u6307\u9488\u662f\u5426\u4e3a\u7a7a\uff1a<ul> <li>\u5982\u679c\u6307\u9488\u662f <code>nullptr</code>\uff08\u5982 <code>a = 0</code>\uff09\uff0c<code>delete[]</code> \u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002</li> <li>\u5982\u679c\u6307\u9488\u975e\u7a7a\uff0c\u7ee7\u7eed\u6267\u884c\u91ca\u653e\u903b\u8f91\u3002</li> </ul> </li> <li>\u8c03\u7528\u6790\u6784\u51fd\u6570\uff08\u4ec5\u5bf9\u7c7b\u5bf9\u8c61\uff09\u3002</li> <li>\u8c03\u7528\u6790\u6784\u51fd\u6570\uff08\u4ec5\u5bf9\u7c7b\u5bf9\u8c61\uff09\u3002</li> <li>\u6807\u8bb0\u5185\u5b58\u4e3a\u201c\u672a\u5206\u914d\u201d\uff1a\u5806\u7ba1\u7406\u5668\u66f4\u65b0\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff0c\u6807\u8bb0\u8be5\u5185\u5b58\u5757\u53ef\u91cd\u7528\u3002</li> </ol> </li> </ul> My question about \u4e3a\u4ec0\u4e48 delete \u4e4b\u540e\u8fd8\u80fd\u4f7f\u7528 a \u5e76\u4e3a a \u8d4b\u503c <p>\u6307\u9488\u53d8\u91cf <code>a</code> \u662f\u4e00\u4e2a\u666e\u901a\u7684\u53d8\u91cf\uff0c\u5b83\u7684\u751f\u547d\u5468\u671f\u548c\u4f5c\u7528\u57df\u7531\u58f0\u660e\u7684\u4f4d\u7f6e\u51b3\u5b9a\u3002<code>delete</code> \u91ca\u653e\u7684\u662f <code>a</code> \u6307\u5411\u7684\u5185\u5b58\uff0c\u800c\u4e0d\u662f\u6307\u9488 <code>a</code> \u672c\u8eab\u3002\u6307\u9488\u53d8\u91cf <code>a</code> \u4ecd\u7136\u53ef\u4ee5\u50cf\u5176\u4ed6\u53d8\u91cf\u4e00\u6837\u88ab\u8bfb\u53d6\u3001\u8d4b\u503c\u6216\u4fee\u6539\u3002</p> <p>\u8fd9\u4e0d\u662f\u6807\u51c6\u5b9a\u4e49\u7684\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;thread&gt;\n\nusing namespace std;\n\nstruct A {\n    A() {cout &lt;&lt; \"A()\" &lt;&lt; endl; }\n    ~A() {cout &lt;&lt; \"~A()\" &lt;&lt; endl;}\n    int i;\n};\n\nint main(int argc, char ** argv){\n    int size = 0;\n    if (argc &gt; 1) {\n        size = atoi(argv[1]);\n    }\n    cout &lt;&lt; \"allocating \" &lt;&lt; size &lt;&lt; \" objects\" &lt;&lt; endl;\n    A * pa = new A[size];\n\n    size_t *pc = (size_t*)pa;\n    cout &lt;&lt; \"Aha! ** \" &lt;&lt; *(pc - 1) &lt;&lt; \" ** guys hidden here!\" &lt;&lt; endl;\n\n    delete[] pa;\n}\n</code></pre> <p>\u8f93\u5165:</p> <ol> <li><code>./a.exe</code></li> <li><code>./a.exe 5</code></li> </ol> <p>\u8f93\u51fa:</p> <ol> <li></li> </ol> <pre><code>allocating 0 objects\nAha! ** 0 ** guys hidden here!\n</code></pre> <ol> <li></li> </ol> <pre><code>allocating 5 objects\nA()\nA() \nA()\nA()\nA()\nAha! ** 5 ** guys hidden here!\n~A()\n~A()\n~A()\n~A()\n~A()\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter4/#constant","title":"Constant","text":"<ul> <li>declares a variable to have a constant value</li> </ul> <pre><code>const int x = 123;\nx = 27; // illegal!\nx++; // illegal!\nint y = x; // ok, copy const to non-const\ny = x; // ok, same thing\nconst int z = y; // ok, const is safer\n</code></pre> <ul> <li>Constants are like variables  \u4f5c\u7528\u57df\u4e0e\u666e\u901a\u53d8\u91cf\u76f8\u540c<ul> <li>Observe scoping rules</li> <li>Declared with <code>const</code> type modifier</li> </ul> </li> <li> <p>A const in C++ defaults to internal linkage         - C++ \u4e2d\u7684\u5e38\u91cf\u9ed8\u8ba4\u5177\u6709\u5185\u90e8\u94fe\u63a5\u6027\uff08internal linkage\uff09\uff0c\u8fd9\u610f\u5473\u7740\uff1a\u5e38\u91cf\u4ec5\u5728\u5b9a\u4e49\u5b83\u7684\u6587\u4ef6\u5185\u53ef\u89c1\u4e14\u5176\u4ed6\u6587\u4ef6\u65e0\u6cd5\u8bbf\u95ee\u8be5\u5e38\u91cf\u3002</p> <pre><code>```cpp\n// File1.cpp\nconst int x = 10; // \u5185\u90e8\u94fe\u63a5\u6027\uff0c\u4ec5\u5728 File1.cpp \u4e2d\u53ef\u89c1\n\n// File2.cpp\nextern const int x; // \u9519\u8bef\uff01x \u5728 File2.cpp \u4e2d\u4e0d\u53ef\u89c1\n```\n</code></pre> <ul> <li>the compiler tries to avoid creating storage for a const, holding the value in its symbol table. <ul> <li>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff1a\u5e38\u91cf\u901a\u5e38\u4e0d\u4f1a\u5206\u914d\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u662f\u5c06\u5176\u503c\u76f4\u63a5\u5b58\u50a8\u5728\u7b26\u53f7\u8868\u4e2d\u3002</li> </ul> </li> <li> <p>extern forces storage to be allocated</p> <ul> <li>\u5982\u679c\u9700\u8981\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u5171\u4eab\u5e38\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 extern \u5173\u952e\u5b57\uff1a\u5f3a\u5236\u7f16\u8bd1\u5668\u4e3a\u5e38\u91cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u5c06\u5176\u94fe\u63a5\u6027\u6539\u4e3a\u5916\u90e8\u94fe\u63a5\u6027\u3002</li> </ul> <pre><code>// Constants.h\nextern const int globalConst; // \u58f0\u660e\n\n// Constants.cpp\nextern const int globalConst = 42; // \u5b9a\u4e49\n\n// Main.cpp\n#include \"Constants.h\"\nint main() {\n    std::cout &lt;&lt; globalConst &lt;&lt; std::endl; // \u8f93\u51fa 42\n    return 0;\n}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#compile-time-constants","title":"Compile time constants","text":"<ul> <li>Compile time constants are entries in compiler symbol table, not really variables.</li> </ul> <p><code>const int bufsize = 1024;</code></p> <ul> <li>Value must be initialized</li> <li>Unless you make an explicit extern declaration</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#run-time-constants","title":"Run-time constants","text":"<ul> <li>const value can be exploited</li> </ul> <pre><code>const int class_size = 12;\nint finalGrade[class_size]; // ok\nint x;\ncin &gt;&gt; x;\nconst int size = x;  // \u8fd9\u91cc\u53ea\u6709\u8fd0\u884c\u8f93\u5165\u540e\u624d\u77e5\u9053\uff0c\u56e0\u6b64\ndouble classAverage[size]; // error\n</code></pre> <ul> <li>\u5bf9\u4e8e <code>const int size = x;</code> \u8fd9\u91cc\u53ea\u6709\u8fd0\u884c\u8f93\u5165\u540e\u624d\u77e5\u9053\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u53d8\u91cf\u662f\u5206\u4e86\u4e00\u5757\u5b58\u50a8\u7a7a\u95f4\u7684\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#pointers-with-const","title":"Pointers with <code>const</code>","text":"<p><code>p: 0xaffefado</code> ==&gt; <code>a: [53,54,55]</code></p> <pre><code>int a[] = {53,54,55};\nint * const p = a; // p is const\n*p = 20; // OK\np++; // ERROR\nconst int *p = a; // (*p) is const\n*p = 20; // ERROR!\np++; // OK\n</code></pre> <ul> <li><code>p</code> is const\uff0c\u6307\u9488\u672c\u8eab\uff0c\u5373\u6307\u5411\u7684\u5730\u5740\u4e0d\u53d8\uff0c\u4f46\u662f\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u53ef\u4ee5\u53d8</li> <li><code>*p</code> is const\uff0c\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u662f\u5e38\u91cf\uff0c\u5373\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u4e0d\u80fd\u53d8</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#what-are-these","title":"What are these?","text":"<pre><code>string s( \"Fred\" );\nconst string* p = &amp;s;\nstring const* p = &amp;s;\nstring *const p = &amp;s;\n</code></pre> <ul> <li>\u7b2c\u4e00\u79cd\u4e0e\u7b2c\u4e8c\u79cd\u662f\u610f\u4e49\u7684\uff0c\u90fd\u662f\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488</li> <li>\u7b2c\u4e09\u79cd\u662f\u5e38\u91cf\u6307\u9488\uff0c\u5373\u6307\u9488\u672c\u8eab\u662f\u5e38\u91cf\uff0c\u6307\u5411\u7684\u5bf9\u8c61\u53ef\u4ee5\u53d8</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#pointers-and-constants","title":"Pointers and constants","text":"<pre><code>int i;\nconst int ci = 3;\nint* ip;\nconst int* cip;\nip = &amp;i;\nip = &amp;ci; // Error\ncip = &amp;i;\ncip = &amp;ci;\n*ip = 54; // always legal\n*cip = 54; // never legal\n</code></pre> <ul> <li>\u53d8\u91cf\u6307\u9488\u53ef\u4ee5\u7ed1\u53d8\u91cf</li> <li>\u53d8\u91cf\u6307\u9488\u4e0d\u80fd\u7ed1\u5e38\u91cf</li> <li>\u5e38\u91cf\u6307\u9488\u53ef\u4ee5\u7ed1\u53d8\u91cf</li> <li>\u5e38\u91cf\u6307\u9488\u53ef\u4ee5\u7ed1\u5e38\u91cf</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#string-literals","title":"String literals","text":"<pre><code>char s[] = \"Hello, world!\";\ncout &lt;&lt; s &lt;&lt; endl;  // Hello, world!\n\ns[0] = 'B';\ncout &lt;&lt; s &lt;&lt; endl;  // Bello, world!\n\nchar *s = \"Hello, world!\";\ncout &lt;&lt; s &lt;&lt; endl;  // Hello, world!\n\ns[0] = 'B'; // Error!\n</code></pre> <ul> <li><code>s</code> is a pointer initialized to point to a string constant</li> <li>This is actually a <code>const char* s</code> but compiler accepts it without the const<ul> <li>\u56e0\u4e3a\u5176\u5b9e\u8fd9\u4e2a <code>s</code> \u662f\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4ee3\u7801\u6bb5\uff0c\u4ee3\u7801\u6bb5\u662f\u53ea\u8bfb\u7684</li> </ul> </li> <li>Don't try to change the character values (undefined behavior)</li> </ul> <pre><code>int main(){\n    const char *s1 = \"Hello, world!\";\n    const char *s2 = \"Hello, world!\";\n    char s3[] = \"Hello, world!\";\n\n    cout &lt;&lt; (void*)s1 &lt;&lt; endl;  // 0x10aa50f78\n    cout &lt;&lt; (void*)s2 &lt;&lt; endl;  // 0x10aa50f78\n    cout &lt;&lt; (void*)s3 &lt;&lt; endl;  // 0x7ff7b54b229a\n    cout &lt;&lt; (void*)main &lt;&lt; endl;  // 0x10aa58ce0\n}\n</code></pre> <ul> <li>\u53ef\u4ee5\u770b\u5230\u540c\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u7f16\u8bd1\u5668\u4f1a\u5206\u914d\u76f8\u540c\u7684\u5185\u5b58\u5730\u5740</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#conversions","title":"Conversions","text":"<ul> <li>Can always treat a non-const value as const</li> </ul> <pre><code>void f(const int* x); \nint a = 15;\nf(&amp;a); // ok\nconst int b = a;\nf(&amp;b); // ok\nb = a + 1; // Error!\n</code></pre> <ul> <li>You cannot treat a <code>constant</code> object as <code>nonconstant</code> without an explicit cast <code>const_cast</code></li> <li>\u5728 C++ \u4e2d\uff0c<code>const_cast</code> \u662f\u4e00\u79cd\u7528\u4e8e\u4fee\u6539\u5bf9\u8c61\u7684 <code>const</code> \u6216 <code>volatile</code> \u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u3002\u5b83\u7684\u4e3b\u8981\u7528\u9014\u662f\u79fb\u9664\u6216\u6dfb\u52a0 <code>const</code> \u6216 <code>volatile</code> \u9650\u5b9a\u7b26\u3002</li> </ul> <ol> <li>\u79fb\u9664 <code>const</code> \u9650\u5b9a\u7b26</li> </ol> <pre><code>const int x = 10;\nint* y = const_cast&lt;int*&gt;(&amp;x); // \u79fb\u9664 const \u9650\u5b9a\u7b26\n*y = 20; // \u672a\u5b9a\u4e49\u884c\u4e3a\uff01\u4fee\u6539 const \u5bf9\u8c61\u7684\u503c\n</code></pre> <p>ATTENTION</p> <p>\u867d\u7136\u8bed\u6cd5\u4e0a\u5141\u8bb8\uff0c\u4f46\u4fee\u6539 const \u5bf9\u8c61\u7684\u503c\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\uff08UB\uff09\uff0c\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u6216\u6570\u636e\u635f\u574f\u3002</p> <ol> <li>\u6dfb\u52a0 <code>const</code> \u9650\u5b9a\u7b26</li> </ol> <pre><code>int x = 10;\nconst int* y = const_cast&lt;const int*&gt;(&amp;x); // \u6dfb\u52a0 const \u9650\u5b9a\u7b26\n// *y = 20;         // \u9519\u8bef\uff01\u4e0d\u80fd\u901a\u8fc7 const \u6307\u9488\u4fee\u6539\u503c\n</code></pre> <p>Passing by const value?</p> <pre><code>void f1 (const int i) {\n i++; // illegal: compile-time error\n}\n</code></pre> <p>Returning by const value?</p> <pre><code>int f3() { return 1; }\nconst int f4() { return 1; }\nint main() {\n const int j = f3(); // works fine\n int k = f4(); // this works fine too\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter4/#passing-addresses","title":"Passing addresses","text":"<ul> <li>Passing large objects are expensive.</li> <li>Better to pass by address, using a pointer or a reference.</li> <li>Make it <code>const</code> whenever possible to prevent unexpected modification.</li> </ul> <p>```cpp struct Student{     int id;     char address[1000]; };</p> <p>void foo1(Student s);</p> <p>void foo2(const Student* ps){     cout &lt;&lt; ps-&gt;id &lt;&lt; endl; }</p> <p>void bar(const Student&amp; s){     cout &lt;&lt; s.id &lt;&lt; endl; }</p> <p>int main();</p> <ul> <li>\u5bf9\u4e8e <code>foo1</code> \u4f20\u9012\u7684\u4ee3\u4ef7\u5f88\u5927\uff0c\u56e0\u4e3a\u662f <code>copy</code> \u4f20\u9012\uff0c\u8981\u4f20\u9012\u4e00\u4e2a <code>int</code> \u4e0e \u4e00\u4e2a <code>char</code> \u3002</li> <li>\u5bf9\u4e8e <code>foo2</code> \u7528\u6307\u9488\u4f20\u9012\uff0c\u52a0\u4e0a <code>const</code> \u9650\u5b9a\u7b26\uff0c\u9632\u6b62\u610f\u5916\u4fee\u6539\u3002\u4ee3\u4ef7\u5f88\u5c0f\uff0c\u56e0\u4e3a\u6307\u9488\u5c31\u662f 8 \u4e2a\u5b57\u8282\u7684\u5927\u5c0f\u3002</li> <li>\u5bf9\u4e8e <code>bar</code> \u7528\u5f15\u7528\u4f20\u9012\uff0c\u52a0\u4e0a <code>const</code> \u9650\u5b9a\u7b26\uff0c\u9632\u6b62\u610f\u5916\u4fee\u6539\u3002\u4ee3\u4ef7\u4e0a\u4e0e\u6307\u9488\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u4f46\u53ef\u4ee5\u66f4\u65b9\u4fbf\u7684\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter4/#further-reading","title":"Further reading","text":"Effective C++__Item-16   96 KB / 2025-03-12 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter5/","title":"Chapter 5 | Class","text":"<p> \u7ea6 2068 \u4e2a\u5b57  260 \u884c\u4ee3\u7801  10 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 14 \u5206\u949f</p> <p>Class \u662f OOP \u91cc\u9762\u6700\u57fa\u672c\u7684\u8bbe\u8ba1\u5355\u5143\uff0c\u5b83\u5c06\u6570\u636e\u548c\u65b9\u6cd5\u5c01\u88c5\u5728\u4e00\u8d77\uff0c\u4ece\u800c\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint px,py;\n\nint main(){\n    px = 2, py = 3;\n    cout &lt;&lt; \"Point at [\" &lt;&lt; px &lt;&lt; \",\" &lt;&lt; py &lt;&lt; \"]\" &lt;&lt; endl;\n\n    px += 5, py += 5;\n    cout &lt;&lt; \"Point at [\" &lt;&lt; px &lt;&lt; \",\" &lt;&lt; py &lt;&lt; \"]\" &lt;&lt; endl;\n}\n</code></pre> <p>\u8fd9\u4e2a\u80cc\u540e\u5176\u5b9e\u5df2\u7ecf\u6709\u5f88\u591a\u62bd\u8c61\u5728\u91cc\u9762\u3002</p> <p>machine code(memory, register, ALU) -&gt; circuit(\u96c6\u6210\u7535\u8def\uff0c\u786c\u4ef6\u4e0a\u7684\u5b9e\u73b0)</p> <p>\u6bcf\u4e00\u5c42\u90fd\u662f Abstraction Barrier\uff0c\u6bcf\u4e00\u5c42\u90fd\u5c4f\u853d\u4e86\u4e0b\u4e00\u5c42\u7684\u7ec6\u8282\uff0c\u53ea\u66b4\u9732\u51fa\u81ea\u5df1\u9700\u8981\u7684\u63a5\u53e3\u3002</p>"},{"location":"Computer_Science/OOP/Chapter5/#encapsulation-in-c","title":"Encapsulation in C","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Point;\n// Point* point_create();\nvoid point_init(Point *p, int ix, int iy);\nvoid point_print(Point *p);\nvoid point_move(Point *p, int dx, int dy);\n\n// ----------------------------------------\n\nstruct Point{\n    int x,y;\n};\n\nvoid point_init(Point *p, int ix, int iy){\n    p-&gt;x = ix;\n    p-&gt;y = iy;\n}\n\nvoid point_print(Point *p){\n    cout &lt;&lt; \"Point at [\" &lt;&lt; p-&gt;x &lt;&lt; \",\" &lt;&lt; p-&gt;y &lt;&lt; \"]\" &lt;&lt; endl;\n}\n\nvoid point_move(Point *p, int dx, int dy){\n    p-&gt;x += dx;\n    p-&gt;y += dy;\n}\n\nint main(){\n    Point p;\n    point_init(&amp;p, 2, 3);\n    point_print(&amp;p);\n    point_move(&amp;p, 5, 5);\n    point_print(&amp;p);\n}\n</code></pre> <ul> <li>\u5206\u5272\u7ebf\u4e0a\u9762\u7684\u4e1c\u897f\u662f\u548c\u7528\u6237\u6253\u4ea4\u9053\u7684\u63a5\u53e3\uff0c\u5206\u5272\u7ebf\u4e0b\u9762\u7684\u4e1c\u897f\u5c5e\u4e8e\u5b9e\u8df5\u7ec6\u8282</li> <li>\u6570\u636e\u548c\u64cd\u4f5c\u7ed1\u5728\u4e00\u5757\u5c31\u662f\u5c01\u88c5\uff0c\u4e5f\u5c31\u662f OOP</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#c-version","title":"C++ version","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Point{\nprivate:\n    int x,y;\npublic:\n    void init(int ix, int iy){\n        x = ix;\n        y = iy;\n    }\n    void print(){\n        cout &lt;&lt; \"Point at [\" &lt;&lt; x &lt;&lt; \",\" &lt;&lt; y &lt;&lt; \"]\" &lt;&lt; endl;\n    }\n    void move(int dx, int dy){\n        x += dx;\n        y += dy;\n    }\n};\n\nint main(){\n    Point p;\n    p.init(2, 3);\n    p.print();\n    p.move(5, 5);\n    p.print();\n}\n</code></pre> <ol> <li>\u9690\u542b\u7684 <code>this</code> \u6307\u9488<ul> <li>\u5728C++\u4e2d\uff0c\u6210\u5458\u51fd\u6570\uff08\u7c7b\u6216\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\uff09\u9690\u542b\u4e86\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u5bf9\u8c61\u7684\u6307\u9488\u53c2\u6570 this\u3002</li> <li>\u5f53\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\uff08\u4f8b\u5982 <code>p.move(2, 3)</code>\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u8c03\u7528\u5bf9\u8c61\u7684\u5730\u5740\uff08\u5373 <code>&amp;p</code>\uff09\u4f5c\u4e3a\u9690\u5f0f\u53c2\u6570 <code>this</code> \u4f20\u9012\u7ed9\u51fd\u6570\u3002\u5728\u51fd\u6570\u5185\u90e8\uff0c\u6240\u6709\u5bf9\u6210\u5458\u53d8\u91cf\uff08\u5982 <code>x</code>\u3001<code>y</code>\uff09\u7684\u8bbf\u95ee\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7 <code>this-&gt;x</code> \u548c <code>this-&gt;y</code> \u5b9e\u73b0\u7684\uff0c\u4f46\u4ee3\u7801\u4e2d\u53ef\u4ee5\u76f4\u63a5\u7b80\u5199\u4e3a <code>x</code> \u548c <code>y</code>\u3002</li> </ul> </li> <li><code>private</code> \u8bf4\u660e\u5bf9\u6570\u636e\u8fdb\u884c\u79c1\u6709\u5316\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u8bbf\u95ee\uff0c\u53ea\u80fd\u901a\u8fc7 <code>public</code> \u5f00\u653e\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee\u5904\u7406\u3002\u53ef\u4ee5\u7ef4\u62a4\u6570\u636e\u7684\u5b89\u5168\u6027\u3002<ul> <li>\u6b64\u65f6 <code>p.x = 3;</code> \u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a <code>x</code> \u662f <code>private</code> \u7684\u3002</li> </ul> </li> <li><code>data member</code> \u548c <code>member function</code> \u662f\u7ed1\u5b9a\u5728\u4e00\u8d77\u7684\u3002</li> </ol>"},{"location":"Computer_Science/OOP/Chapter5/#about-protected-and-private","title":"about <code>protected</code> and <code>private</code>","text":"<ol> <li> <p><code>private</code>\u6210\u5458\uff1a    - \u4ec5\u80fd\u88ab\u672c\u7c7b\u7684\u6210\u5458\u51fd\u6570\u548c\u53cb\u5143\u8bbf\u95ee\u3002    - \u6d3e\u751f\u7c7b\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u57fa\u7c7b\u7684<code>private</code>\u6210\u5458\u3002</p> </li> <li> <p><code>protected</code>\u6210\u5458\uff1a    - \u5141\u8bb8\u672c\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3001\u53cb\u5143\uff0c\u4ee5\u53ca\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\u8bbf\u95ee\u3002    - \u6d3e\u751f\u7c7b\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u57fa\u7c7b\u7684<code>protected</code>\u6210\u5458\uff0c\u4f46\u65e0\u6cd5\u8bbf\u95ee\u5176\u4ed6\u4e0d\u76f8\u5173\u5bf9\u8c61\u7684<code>protected</code>\u6210\u5458\u3002</p> </li> </ol> <p>Example:</p> <pre><code>class Base {\nprivate:\n    int a;      // \u4ec5Base\u5185\u90e8\u53ef\u8bbf\u95ee\nprotected:\n    int b;      // Base\u53ca\u5176\u6d3e\u751f\u7c7b\u53ef\u8bbf\u95ee\npublic:\n    int c;      // \u5b8c\u5168\u516c\u5f00\n};\n\nclass Derived : public Base {\n    void func() {\n        // a = 1;  // \u9519\u8bef\uff1a\u57fa\u7c7bprivate\u6210\u5458\u4e0d\u53ef\u8bbf\u95ee\n        b = 2;    // \u6b63\u786e\uff1a\u57fa\u7c7bprotected\u6210\u5458\u53ef\u8bbf\u95ee\n        c = 3;    // \u6b63\u786e\uff1a\u57fa\u7c7bpublic\u6210\u5458\u53ef\u8bbf\u95ee\n    }\n};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter5/#_1","title":"\u5173\u952e\u7ec6\u8282","text":"<ul> <li>\u7ee7\u627f\u65b9\u5f0f\u7684\u5f71\u54cd\uff1a</li> <li>\u82e5\u4f7f\u7528<code>private</code>\u6216<code>protected</code>\u7ee7\u627f\uff0c\u57fa\u7c7b\u7684<code>public</code>\u548c<code>protected</code>\u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u7684\u8bbf\u95ee\u6743\u9650\u4f1a\u88ab\u964d\u7ea7\uff1a     <pre><code>class Derived : private Base {\n    // Base\u7684public\u548cprotected\u6210\u5458\u5728\u6b64\u53d8\u4e3aprivate\n};\n</code></pre></li> <li>\u4f46<code>protected</code>\u548c<code>private</code>\u672c\u8eab\u7684\u533a\u522b\u4ecd\u4e0d\u53d8\uff1a\u57fa\u7c7b\u7684<code>private</code>\u6210\u5458\u59cb\u7ec8\u5bf9\u6d3e\u751f\u7c7b\u4e0d\u53ef\u89c1\u3002</li> <li>\u5916\u90e8\u7c7b\u548c\u5bf9\u8c61\uff1a</li> <li>\u975e\u53cb\u5143\u7684\u5916\u90e8\u7c7b\u6216\u51fd\u6570\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee<code>protected</code>\u6216<code>private</code>\u6210\u5458\u3002</li> <li>\u6d3e\u751f\u7c7b\u53ea\u80fd\u8bbf\u95ee\u81ea\u8eab\u7ee7\u627f\u7684<code>protected</code>\u6210\u5458\uff0c\u4e0d\u80fd\u901a\u8fc7\u5176\u4ed6\u57fa\u7c7b\u5bf9\u8c61\u8bbf\u95ee\uff1a     <pre><code>void Derived::modify(Base&amp; other) {\n    other.b = 10; // \u9519\u8bef\uff1a\u4e0d\u80fd\u8bbf\u95ee\u5176\u4ed6\u5bf9\u8c61\u7684protected\u6210\u5458\n}\n</code></pre></li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;random&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nstruct Point{\nprivate:\n    int x,y;\npublic:\n    void init(int ix, int iy){\n        x = ix;\n        y = iy;\n    }\n    void print(){\n        cout &lt;&lt; \"Point at [\" &lt;&lt; x &lt;&lt; \",\" &lt;&lt; y &lt;&lt; \"]\" &lt;&lt; endl;\n    }\n    void serialize(){\n        cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl;\n    }\n    void move(int dx, int dy){\n        x += dx;\n        y += dy;\n    }\n};\n\nint main(){\n    const double PI = 3.14;\n    default_random_engine gen;\n    uniform_real_distribution&lt;double&gt; dis;\n\n    for(int i = 0; i &lt; 100; i++){\n        Point p;\n        p.init(0, 0);\n\n        double a = 2 * PI * dis(gen);\n        double r = 100;\n        p.move(r * cos(a), r * sin(a));\n        p.serialize();\n    }\n}\n</code></pre> <ul> <li>\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 <code>g++ main.cpp; ./a.exe &gt; points.txt</code>\uff0c\u5c06\u6570\u636e\u5199\u5165 <code>points.txt</code> \u6587\u4ef6\u4e2d\u3002</li> <li>\u518d\u8fdb\u884c\u53ef\u89c6\u5316\u3002</li> </ul> <pre><code>import matplotlib.pyplot as plt\n\nx_coords = []\ny_coords = []\n\nwith open(\"points.txt\", \"r\") as file:\n    for line in file:\n        x, y = map(int, line.strip().split())\n        x_coords.append(int(x))\n        y_coords.append(int(y))\n\nplt.scatter(x_coords, y_coords, alpha=0.5)\nplt.axis('equal')\nplt.show()\n</code></pre> <ul> <li>\u505a\u51fa\u4e00\u767e\u4e2a\u70b9\uff0c\u628a\u5b83\u4eec\u968f\u673a\u6d12\u5230\u4e0d\u540c\u4f4d\u7f6e\u3002</li> <li><code>default_random_engine gen</code> \u9ed8\u8ba4\u968f\u673a\u6570\u5f15\u64ce\uff0c\u7528\u4e8e\u751f\u6210\u968f\u673a\u6570\u79cd\u5b50\u3002</li> <li><code>uniform_real_distribution&lt;double&gt; dis</code> \u5747\u5300\u5206\u5e03\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u751f\u6210 <code>[0, 1)</code> \u8303\u56f4\u5185\u7684\u6d6e\u70b9\u6570\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#objects-attributes-services","title":"Objects = Attributes + Services","text":"<ul> <li>Data: the properties, or status</li> <li>Operations: the functions</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#class-diagram-object-diagram","title":"Class Diagram &amp; Object Diagram","text":""},{"location":"Computer_Science/OOP/Chapter5/#_2","title":"\u7c7b\u56fe","text":"<p>\u7c7b\u56fe\u662f UML\uff08\u7edf\u4e00\u5efa\u6a21\u8bed\u8a00\uff09 \u4e2d\u7684\u4e00\u79cd\u7ed3\u6784\u56fe\uff0c\u7528\u4e8e\u63cf\u8ff0\u7cfb\u7edf\u4e2d\u7684\u7c7b\uff08Class\uff09\u3001\u63a5\u53e3\uff08Interface\uff09\u3001\u534f\u4f5c\uff08Collaboration\uff09\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684 \u9759\u6001\u5173\u7cfb\u3002</p> <ul> <li>\u6838\u5fc3\u5143\u7d20\uff1a<ul> <li>\u7c7b\uff1a\u7528\u77e9\u5f62\u6846\u8868\u793a\uff0c\u5305\u542b\u7c7b\u540d\u3001\u5c5e\u6027\uff08\u6210\u5458\u53d8\u91cf\uff09\u548c\u65b9\u6cd5\uff08\u6210\u5458\u51fd\u6570\uff09\u3002</li> </ul> </li> </ul> <p></p> <ul> <li>\u6700\u4e0a\u9762\u662f\u7c7b\u7684\u540d\u5b57\u3002</li> <li>\u4e0a\u534a\u90e8\u5206\u662f\u6570\u636e\u5b57\u6bb5\u3002</li> <li>\u4e0b\u534a\u90e8\u5206\u662f\u64cd\u4f5c\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#_3","title":"\u5bf9\u8c61\u56fe","text":"<p>\u5bf9\u8c61\u56fe\u662f\u7c7b\u56fe\u7684\u5b9e\u4f8b\u5316\uff0c\u5c55\u793a\u7cfb\u7edf\u5728\u67d0\u4e00\u65f6\u523b\u7684\u5bf9\u8c61\uff08Object\uff09\u53ca\u5176\u4e4b\u95f4\u7684\u94fe\u63a5\uff08Link\uff09\uff0c\u662f\u7c7b\u56fe\u7684\u8fd0\u884c\u65f6\u5feb\u7167\u3002</p> <ul> <li>\u6838\u5fc3\u5143\u7d20\uff1a<ul> <li>\u5bf9\u8c61\uff1a\u7528\u77e9\u5f62\u6846\u8868\u793a\uff0c\u683c\u5f0f\u4e3a \u5bf9\u8c61\u540d: \u7c7b\u540d\uff08\u5982 student1: Student\uff09\u3002</li> <li>\u5c5e\u6027\u503c\uff1a\u5bf9\u8c61\u7684\u5177\u4f53\u72b6\u6001\uff08\u5982 name = \"Alice\"\uff09\u3002</li> <li>\u94fe\u63a5\uff1a\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u8054\u5b9e\u4f8b\u3002</li> </ul> </li> </ul> <p></p>"},{"location":"Computer_Science/OOP/Chapter5/#turn-it-into-code","title":"Turn it into code","text":"<pre><code>class TicketMachine {\npublic:\n    void showPrompt();\n    void getMoney();\n    void printTicket();\n    void showBalance();\n    void printError();\nprivate:\n    const int PRICE;\n    int balance;\n    int total;\n};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter5/#object-vs-class","title":"Object vs. Class","text":"<ul> <li>Objects (cat)<ul> <li>Represent things, events \u5bf9\u8c61\u662f\u5bf9\u73b0\u5b9e\u4e16\u754c\u5b9e\u4f53\uff08\u5982\u4e00\u53ea\u732b\u3001\u4e00\u6b21\u7528\u6237\u64cd\u4f5c\uff09\u7684\u62bd\u8c61\u3002</li> <li>Respond to messages at run-time \u5bf9\u8c61\u901a\u8fc7\u65b9\u6cd5\uff08\u6210\u5458\u51fd\u6570\uff09\u54cd\u5e94\u5916\u90e8\u64cd\u4f5c\uff08\u6d88\u606f\uff09\u3002</li> </ul> </li> <li>Classes (cat class)<ul> <li>Define properties of instances \u7c7b\u89c4\u5b9a\u4e86\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\uff08\u6210\u5458\u53d8\u91cf\uff09\u548c\u529f\u80fd\uff08\u6210\u5458\u51fd\u6570\uff09\u3002</li> <li>Act like native-types in C++ \u7c7b\u53ef\u4ee5\u50cf <code>int</code>\u3001<code>double</code> \u7b49\u539f\u751f\u7c7b\u578b\u4e00\u6837\u58f0\u660e\u53d8\u91cf\u3001\u4f20\u53c2\u6216\u4f5c\u4e3a\u8fd4\u56de\u503c\u3002</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#definition-of-a-class","title":"Definition of a Class","text":"<ul> <li>In C++, separated header and source files are used to define one class.</li> <li>Class declaration and member function prototypes are in the <code>.h</code> header file.</li> <li>All the function bodies (implementations) are in the <code>.cpp</code> source file.</li> <li>PImpl technique(https://en.wikipedia.org/wiki/Opaque_pointer#C++) : debatable, hides private members and removes compilation dependency. \u628a\u79c1\u6709\u7684\u4e1c\u897f\u8fdb\u4e00\u6b65\u85cf\u6389\u3002</li> </ul> <ul> <li><code>point.h</code></li> </ul> <pre><code>#ifndef __POINT_H__\n#define __POINT_H__\n\nstruct Point{\nprivate:\n    int x,y;\npublic:\n    void init(int ix, int iy);\n    void print();\n    void move(int dx, int dy);\n};\n\n#endif\n</code></pre> <ul> <li><code>point.cpp</code></li> </ul> <pre><code>#include \"point.h\"\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid Point::init(int ix, int iy){\n    x = ix;\n    y = iy;\n}\n\nvoid Point::print(){\n    cout &lt;&lt; \"Point at [\" &lt;&lt; x &lt;&lt; \",\" &lt;&lt; y &lt;&lt; \"]\" &lt;&lt; endl;\n}\n\nvoid Point::move(int dx, int dy){\n    x += dx;\n    y += dy;\n}\n</code></pre> <p>ATTENTION</p> <p>\u5982\u679c\u4e0d\u52a0 <code>Point::</code> \u524d\u7f00\uff0c\u7f16\u8bd1\u5668\u4f1a\u8ba4\u4e3a\u8fd9\u4e09\u4e2a\u51fd\u6570\u662f\u5168\u5c40\u51fd\u6570\uff0c\u800c\u4e0d\u662f <code>Point</code> \u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002\u52a0\u4e86 <code>Point::</code> \u524d\u7f00\uff0c\u8868\u793a\u8fd9\u662f <code>Point</code> \u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u51fd\u6570\u3002</p> <ul> <li><code>main.cpp</code></li> </ul> <pre><code>#include \"point.h\"\n\nint main(){\n    point p;\n    p.init(2, 3);\n    p.print();\n    p.move(5, 5);\n    p.print();\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter5/#resolver","title":":: resolver","text":"<ul> <li><code>&lt;Class Name&gt;::&lt;function name&gt;</code></li> <li><code>::&lt;function name&gt;</code></li> </ul> <pre><code>void S::f() {\n    ::f(); // Would be recursive otherwise!\n    ::a++; // Select the global 'a'\n    a--; // The 'a' at class scope\n}\n</code></pre> <ul> <li><code>::f();</code> \u8868\u793a\u8c03\u7528\u5168\u5c40\u51fd\u6570 <code>f()</code></li> <li><code>f();</code> \u9ed8\u8ba4\u662f\u9012\u5f52\u8c03\u7528\uff0c\u5373\u8c03\u7528 <code>S::f()</code></li> <li><code>::a++;</code> \u8868\u793a\u8c03\u7528\u5168\u5c40\u53d8\u91cf <code>a</code></li> <li><code>a--;</code> \u8868\u793a\u8c03\u7528\u7c7b <code>S</code> \u7684\u6210\u5458\u53d8\u91cf <code>a</code></li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#compilation-unit","title":"Compilation unit","text":"<ul> <li>A <code>.cpp</code> file is a compile unit<ul> <li>The compiler sees only one <code>.cpp</code> file and generates a corresponding <code>.obj</code> file.</li> </ul> </li> <li>The linker links all <code>.obj</code> files into one executable file.</li> <li>To provide information across <code>.cpp</code> files, use <code>.h</code> file.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#header-interface","title":"Header = interface","text":"<ul> <li>The header is a contract between the author and the user of the code.<ul> <li>declaration of functions, classes, variables, etc.</li> <li>all definitions go to .cpp files.</li> </ul> </li> <li>The compiler enforces the contract.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#include","title":"<code>#include</code>","text":"<ul> <li><code>#include</code> is to insert the content of header file into the <code>.cpp</code> file, right at where the <code>#include</code> statement is.<ul> <li><code>#include \"xx.h\"</code> : usually search in the current directory, implementation defined</li> <li><code>#include &lt;xx.h&gt;</code> : search in the specified directories, depending on your development environment.</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#header-guard","title":"Header guard","text":"<ul> <li><code>point.h</code> \u4e2d\u6dfb\u52a0</li> </ul> <pre><code>int global = 3;\n</code></pre> <p>\u5219\u4f1a\u51fa\u73b0 dupicate definition \u9519\u8bef\uff0c\u56e0\u4e3a <code>global</code> \u88ab\u5b9a\u4e49\u4e86\u4e24\u6b21\uff0c\u4e00\u6b21\u5728 <code>point.h</code> \u4e2d\uff0c\u4e00\u6b21\u5728 <code>main.cpp</code> \u4e2d\u3002</p> <ul> <li><code>point.h</code> \u6539\u6210\u8fd9\u6837\u5373\u53ef\u3002</li> </ul> <pre><code>extern int global;\n</code></pre> <ul> <li><code>point.cpp</code></li> </ul> <pre><code>int global = 3;\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter5/#standard-header-file-structure","title":"Standard header file structure","text":"<ul> <li><code>LineSegment.h</code></li> </ul> <pre><code>#ifndef __LINESEGMENT_H__\n#define __LINESEGMENT_H__\n\n#include \"point.h\"\n\nstruct LineSegment{\nprivate:\n    Point begin, end;\n};\n\n#endif\n</code></pre> <ul> <li><code>main.cpp</code></li> </ul> <pre><code>#include \"point.h\"\n#include \"LineSegment.h\"\n\nint main(){\n    point p;\n    p.init(2, 3);\n    p.print();\n    p.move(5, 5);\n    p.print();\n}\n</code></pre> <ul> <li>\u5f53\u6ca1\u6709\u52a0\u4e0a <code>#ifndef</code> \u548c <code>#endif</code> \u65f6\uff0c<code>LineSegment.h</code> \u548c <code>main.cpp</code> \u4e2d\u90fd\u5b9a\u4e49\u4e86 <code>Point</code>\uff0c\u4f1a\u51fa\u73b0 <code>redefinition of Point</code> \u9519\u8bef\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#tips-for-header","title":"Tips for header","text":"<ul> <li>One class declaration per header file</li> <li>Same name with the .cpp file.</li> <li>Contents surrounded by the safe guard.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#cmake","title":"Cmake","text":"<ul> <li>The CMake utility<ul> <li>cross-platform, free, and open-source</li> <li>build automation, testing, packaging and installation</li> <li>it is not a build system itself; it generates another system's build files.</li> </ul> </li> </ul> <p>\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165</p> <pre><code>vim CMakeLists.txt\n</code></pre> <ul> <li><code>CMakeLists.txt</code></li> </ul> <pre><code>cmake_minimum_required(VERSION 2.8.9)\nproject(hello)\nadd_executable(hello main.cpp point.cpp)\n</code></pre> <ul> <li>\u518d\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165</li> </ul> <pre><code>mkdir build\ncd build\ncmake ..\n</code></pre> <ul> <li><code>cmake ..</code> \u4f1a\u5728 <code>build</code> \u6587\u4ef6\u5939\u4e2d\u751f\u6210 <code>Makefile</code> \u6587\u4ef6\u3001<code>CMakeCache.txt</code> \u6587\u4ef6\u548c <code>CMakeFiles</code> \u6587\u4ef6\u5939\u3002</li> <li><code>cmake</code> \u5176\u5b9e\u662f\u66f4\u4e0a\u4e00\u5c42\u7684\u6784\u5efa\uff0c\u4f1a\u5e2e\u4f60\u751f\u6210\u53ef\u4ee5\u7f16\u8bd1\u7684 <code>Makefile</code> \u6587\u4ef6\u3002</li> <li>\u63a5\u7740\uff0c\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165</li> </ul> <pre><code>make\n</code></pre> <ul> <li><code>make</code> \u4f1a\u6839\u636e <code>Makefile</code> \u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\uff0c\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 <code>hello</code>\u3002</li> <li>\u8fd0\u884c <code>./hello</code>\uff0c\u5373\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\u7ed3\u679c</li> <li>\u9879\u76ee\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 <code>CMakeLists.txt</code> \u6587\u4ef6\u6765\u7ba1\u7406\u9879\u76ee\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#oop-characteristics","title":"OOP Characteristics","text":"<ul> <li>Everything is an object.</li> <li>A program is a bunch of objects telling each other what to do by sending messages.</li> <li>Each object has its own memory made up of other objects.</li> <li>Every object has a type.</li> <li>All objects of a particular type can receive the same messages.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#object-oriented-programming","title":"Object-oriented programming","text":"<ul> <li>Objects (agents) send and receive messages!</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#message-communication","title":"Message communication","text":"<ul> <li>Messages are<ul> <li>Composed by the sender</li> <li>Interpreted by the receiver</li> </ul> </li> <li>Messages<ul> <li>May return results</li> <li>May cause receiver to change state, i.e., side effects</li> </ul> </li> <li>Implemented as method calls</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#encapsulation","title":"Encapsulation","text":"<ul> <li>Bundle data and methods together</li> <li>Hide the details of dealing with the data</li> <li>Restrict access only to the publicized methods</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#abstraction","title":"Abstraction","text":"<ul> <li>Abstraction is the ability to ignore details of parts to focus on high-level problems.</li> <li>Modularization is the process of dividing a whole into parts that can be built separately and interact in well-defined ways.</li> </ul> <p>e.g. Clock display</p> <p></p> <ul> <li>Modularizing the clock display</li> </ul> <p></p> <ul> <li>Objects &amp; Classes</li> </ul> <p></p> <ul> <li>Class diagram</li> </ul> <p></p>"},{"location":"Computer_Science/OOP/Chapter5/#ctor-and-dtor","title":"Ctor and Dtor","text":"<ul> <li>\u5bf9\u4e8e <code>main.cpp</code> \u4e2d\u7684 <code>p.init()</code> \u662f\u9700\u8981\u663e\u793a\u8c03\u7528\u7684\u521d\u59cb\u5316\uff0c\u5f88\u5bb9\u6613\u88ab\u7528\u6237\u5fd8\u8bb0\u3002\u5982\u679c\u5fd8\u8bb0\u4e86\uff0c\u90a3\u4e48 <code>p</code> \u91cc\u9762\u7684\u6570\u636e\u5c31\u4f1a\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u5341\u5206 random\u3002</li> <li>\u5bf9\u4e8e <code>VC6</code>\uff0c\u4f1a\u5728\u6ca1\u6709\u521d\u59cb\u5316\u7684\u53d8\u91cf\u4e2d\u81ea\u52a8\u586b\u5199\u4e00\u4e9b\u503c\u3002\u6ca1\u6709\u521d\u59cb\u5316\u7684\u5185\u5b58\u4f1a\u88ab\u81ea\u52a8\u586b\u5199\uff0c\u5806\u4e0a\u4e3a <code>0xCC</code>\uff0c\u6808\u4e0a\u4e3a <code>0xCD</code> \u3002</li> </ul> <pre><code>b'\\xcc\\xcc'.decode('gbk')\n</code></pre> <ul> <li>\u4f1a\u5f97\u5230 <code>\u70eb</code></li> </ul> <pre><code>(b'\\xcc'*100).decode('gbk')\n</code></pre> <ul> <li>\u4f1a\u5f97\u5230 <code>\u70eb\u70eb...\u70eb</code></li> </ul> <pre><code>(b'\\xcd'*100).decode('gbk')\n</code></pre> <ul> <li>\u4f1a\u5f97\u5230 <code>\u5c6f\u5c6f...\u5c6f</code></li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#guaranteed-initialization","title":"Guaranteed initialization","text":"<ul> <li>With a constructor (ctor)<ul> <li>the compiler ensures its call when an object is created.</li> <li>use the name as the class.</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#how-does-a-ctor-work","title":"How does a ctor work?","text":"<pre><code>class X {\n    int i;\npublic:\n    X(); // constructor\n};\n\nvoid f(){\n    X a; // a.X() is called\n}\n</code></pre> <ul> <li>\u6784\u9020\u51fd\u6570\uff08Constructor\uff09<ul> <li>\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u81ea\u52a8\u8c03\u7528\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u3002</li> <li>\u786e\u4fdd\u5bf9\u8c61\u5728\u521b\u5efa\u540e\u5904\u4e8e\u5408\u6cd5\u3001\u53ef\u7528\u7684\u521d\u59cb\u72b6\u6001\u3002</li> <li>\u547d\u540d\u4e0e\u7c7b\u540d\u76f8\u540c\uff0c\u65e0\u8fd4\u56de\u7c7b\u578b\uff08\u5305\u62ec <code>void</code>\uff09\u3002</li> <li>\u53ef\u4ee5\u91cd\u8f7d\uff08\u652f\u6301\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u53c2\u6570\u4e0d\u540c\uff09\u3002</li> </ul> </li> <li>\u6790\u6784\u51fd\u6570\uff08Destructor\uff09<ul> <li>\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u81ea\u52a8\u8c03\u7528\uff0c\u7528\u4e8e\u91ca\u653e\u5bf9\u8c61\u5360\u7528\u7684\u8d44\u6e90\uff08\u5982\u5185\u5b58\u3001\u6587\u4ef6\u53e5\u67c4\u7b49\uff09\u3002</li> <li>\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f\u6216\u8d44\u6e90\u672a\u91ca\u653e\u3002</li> <li>\u547d\u540d\u683c\u5f0f\u4e3a <code>~\u7c7b\u540d</code>\uff0c\u65e0\u8fd4\u56de\u7c7b\u578b\u548c\u53c2\u6570\u3002</li> <li>\u4e0d\u53ef\u91cd\u8f7d\uff08\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\uff09\u3002</li> <li>\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u901a\u5e38\u58f0\u660e\u4e3a <code>virtual</code>\uff08\u786e\u4fdd\u591a\u6001\u5bf9\u8c61\u6b63\u786e\u91ca\u653e\uff09\u3002</li> <li><code>return</code> \u65f6\uff0c\u6790\u6784\u51fd\u6570\u4f1a\u81ea\u52a8\u8c03\u7528\u3002</li> </ul> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Y {int i ; float f; Y(int a){i = a}};\n\nint main(){\n    Y y1[] = {Y(2), Y(1)}; // legal\n    Y y1[3] = {Y(2), Y(3)}; // illegal, no matching initialization of initializer list\n}\n</code></pre> <ul> <li>\u53ef\u4ee5\u7406\u89e3\u4e3a\u7f16\u8bd1\u5668\u81ea\u52a8\u586b\u5199\u4e3a <code>Y y1[3] = {Y(2), Y(3), Y()};</code></li> <li>\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u4e0d\u5e26\u53c2\u6570\u7684\u7248\u672c <code>struct Y {int i ; float f; Y(int a){i = a} Y(){} };</code></li> <li>\u4e00\u4e2a\u6784\u9020\u5668\u90fd\u6ca1\u6709\u7684\u65f6\u5019\uff0c\u4f8b\u5982\u8fd9\u6837 <code>struct Y {int i ; float f; };</code> \uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5199\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u5668\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter5/#further-reading","title":"Further reading","text":"Opaque pointer - Wikipedia   405 KB / 2025-03-17 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter6/","title":"Chapter 6 | Ctor/Dtor &amp;&amp; Composition &amp; Inheritance","text":"<p> \u7ea6 1387 \u4e2a\u5b57  396 \u884c\u4ee3\u7801  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 12 \u5206\u949f</p> <ul> <li>\u5168\u5c40\u53d8\u91cf: \u5728 main \u5f00\u59cb\u5148\u5c31\u6267\u884c\u4e86 constructor\uff0c main \u7ed3\u675f\u624d\u6267\u884c destructor</li> <li>\u9759\u6001\u53d8\u91cf: \u4f7f\u7528\u65f6\u624d\u6267\u884c constructor \uff0c main \u7ed3\u675f\u624d\u6267\u884c destructor</li> <li>\u5c40\u90e8\u53d8\u91cf: \u5728\u51fd\u6570\u8c03\u7528\u65f6\u624d\u6267\u884c constructor \uff0c\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u624d\u6267\u884c destructor</li> <li>\u52a8\u6001\u53d8\u91cf: \u5728 new \u65f6\u624d\u6267\u884c constructor \uff0c\u5728 delete \u65f6\u624d\u6267\u884c destructor</li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#raii","title":"RAII","text":"<ul> <li>Resource acquisition is initialization <ul> <li>Build the life cycle of a resource to the lifetimeof an object</li> <li>Acquire resources in Ctor</li> <li>Release resources in Dtor</li> </ul> </li> </ul> <p>\u628a\u8d44\u6e90\u7684\u751f\u547d\u5468\u671f\u548c\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u56e0\u4e3a\u624b\u52a8\u7ba1\u7406\u8d44\u6e90\u5bb9\u6613\u51fa\u9519\u3002</p> <pre><code>std::mutex m;\n\nvoid bad(){\n    m.lock();\n    if(!everything_ok()){\n        return; // early return without mutex release\n    }\n    m.unlock();\n}\n\nvoid good(){\n    std::lock_guard&lt;std::mutex&gt; lk(m);\n    if(!everything_ok()){\n        return; // unlock() called automatically\n    }\n} // unlock() called automatically\n</code></pre> <ul> <li>\u6709\u5173\u6587\u4ef6\u7684\u8bfb\u53d6\uff1aofstream \u4f1a\u81ea\u5df1\u5173\u95ed\u6587\u4ef6\uff0c\u8fd9\u4e5f\u662f RAII \u7684\u4e00\u4e2a\u4f8b\u5b50</li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#initializer-list","title":"Initializer list","text":"<ul> <li>\u771f\u6b63\u7684\u521d\u59cb\u5316\u65f6\u673a\u5176\u5b9e\u662f\u5728\u521d\u59cb\u5316\u5217\u8868\u91cc\u9762\u7684</li> </ul> <pre><code>class Point {\nprivate:\n    const float x, y;\npublic:\n    Point(float xa, float ya): y(ya), x(xa) {}\n};\n</code></pre> <ul> <li>Do not perform assignment within ctor's body</li> <li>Order of initialization is order of declaration<ul> <li>Not the order in the initializer list!</li> <li>Destroyed in the reverse order.</li> </ul> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct X {\n    int y;\n    X(){\n        y = 10;\n        cout &lt;&lt; \"X::X()\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    X x;\n}\n</code></pre> <ul> <li>\u4e0b\u9762\u8fd9\u4e2a\u662f\u521d\u59cb\u5316\u5217\u8868\uff0c\u52a0\u4e0a\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Y {\n    int i;\n    Y(int ii){\n        i = ii;\n        cout &lt;&lt; \"Y::Y(int)\" &lt;&lt; endl;\n    }\n};\n\nstruct X {\n    Y y;\n    X() : y(10) {\n        cout &lt;&lt; \"X::X()\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    X x;  // Y::Y(int) X::X()\n}\n</code></pre> <ul> <li>\u4f46\u662f\u5982\u679c\u6539\u6210</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Y {\n    int i;\n    Y(int ii){\n        i = ii;\n        cout &lt;&lt; \"Y::Y(int)\" &lt;&lt; endl;\n    }\n};\n\nstruct X {\n    Y y;\n    X() {\n    //X() : y(10) {\n        y = 10;\n        cout &lt;&lt; \"X::X()\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    X x;\n}\n</code></pre> <ul> <li>\u5c31\u4f1a\u62a5\u9519\uff0c\u62a5\u9519\u539f\u56e0\u662f y \u6ca1\u6709\u4e00\u4e2a default constructor.</li> <li>\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u6765\u8bf4 <code>y=10</code> \u8fd9\u53e5\u8bdd\u5df2\u7ecf\u4e0d\u662f\u521d\u59cb\u5316\u4e86\uff0c\u800c\u662f\u8d4b\u503c\u3002</li> <li>\u5b83\u771f\u6b63\u7684\u521d\u59cb\u5316\u662f\u5728\u521d\u59cb\u5316\u5217\u8868\uff0c\u4e5f\u5373 <code>X()</code> \u8fd9\u53e5\u8bdd\u8fd9\u91cc\uff0c\u76f8\u5f53\u4e8e\u5728\u505a <code>X() : y()</code> \uff0c\u800c y \u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u62a5\u9519\u3002</li> <li>\u53ef\u4ee5\u50cf\u5982\u4e0b\u8fd9\u6837\u66f4\u6539\u3002\u4e5f\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6b63\u5e38\u521d\u59cb\u5316\u4e86\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Y {\n    int i;\n    Y(int ii){\n        i = ii;\n        cout &lt;&lt; \"Y::Y(int)\" &lt;&lt; endl;\n    }\n    Y(){\n        cout &lt;&lt; \"Y::Y()\" &lt;&lt; endl;\n    }\n};\n\nstruct X {\n    Y y;\n    X() {\n        y = 10; // \u76f8\u5f53\u4e8e\u9690\u5f0f\u6784\u9020Y\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u8d4b\u503c\u3002\u4e5f\u5373 y = Y(10);\n        cout &lt;&lt; \"X::X()\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    X x;  // Y::Y() Y::Y(int) X::X()\n}\n</code></pre> <ul> <li>\u56e0\u4e3a\u662f\u5355\u53c2\u6570\uff0c\u53ef\u4ee5\u9690\u5f0f\u6784\u9020\uff0c\u5982\u679c\u4e0d\u60f3\u9690\u5f0f\u6784\u9020\u53ef\u4ee5\u663e\u5f0f\u6784\u9020\uff0c\u5982\u4e0b\u6240\u793a\u3002\u8fd9\u6837\u5c31\u4f1a\u62a5\u9519\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Y {\n    int i;\n    explicit Y(int ii){\n        i = ii;\n        cout &lt;&lt; \"Y::Y(int)\" &lt;&lt; endl;\n    }\n    Y(){\n        cout &lt;&lt; \"Y::Y()\" &lt;&lt; endl;\n    }\n};\n\nstruct X {\n    Y y;\n    X() {\n        y = 10;\n        cout &lt;&lt; \"X::X()\" &lt;&lt; endl;\n    }\n};\n\nint main(){\n    X x;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter6/#initialization-vs-assignment","title":"Initialization vs. assignment","text":"<ul> <li><code>Student::Student(string s) : name(s) {}</code><ul> <li>initialization before constructor body</li> <li>explicit initialization</li> </ul> </li> <li><code>Student::Student(string s) { name = s; }</code><ul> <li>assignment inside constructor body</li> <li>implicit initialization + assignment</li> <li>string must have a default constructor</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#local-variable-vs-field","title":"Local variable vs. Field","text":"<pre><code>int TicketMachine::refundBalance() {\n    int amountToRefund;\n    amountToRefund = balance;\n    balance = 0;\n    return amountToRefund;\n}\n</code></pre> <p>Lifetime:</p> <ul> <li><code>amountToRefund</code> is with the function call</li> <li><code>balance</code> is with the object, i.e., object state</li> </ul> <p>But how is the access to balance achieved?</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct X {\n    int i;\n    double d;\n    void foo(){\n        cout &lt;&lt; \"&amp;i = \" &lt;&lt; &amp;i &lt;&lt; endl;\n        cout &lt;&lt; \"&amp;d = \" &lt;&lt; &amp;d &lt;&lt; endl;\n    }\n};\n\nint main(){\n    X x1;\n    X x2;\n    cout &lt;&lt; \"&amp;x1 = \" &lt;&lt; &amp;x1 &lt;&lt; endl;\n    x1.foo();\n    cout &lt;&lt; \"&amp;x2 = \" &lt;&lt; &amp;x2 &lt;&lt; endl;\n    x2.foo();\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>&amp;x1 = 0xaba37ffc30\n&amp;i = 0xaba37ffc30\n&amp;d = 0xaba37ffc38\n&amp;x2 = 0xaba37ffc20\n&amp;i = 0xaba37ffc20\n&amp;d = 0xaba37ffc28\n</code></pre> <ul> <li><code>int</code> \u662f\u56db\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u504f\u79fb\u4e86\u516b\u4e2a\u5b57\u8282\uff0c\u662f\u56e0\u4e3a <code>double</code> \u662f\u516b\u4e2a\u5b57\u8282\uff0c\u6d89\u53ca\u5230\u5185\u5b58\u5bf9\u9f50\u7684\u95ee\u9898\uff0c\u8981\u53d6\u6700\u5c0f\u516c\u500d\u6570\u3002</li> </ul> <p>\u90a3\u4e48\u8fd9\u91cc\u5b83\u662f\u5982\u4f55\u77e5\u9053\u662f <code>x1</code> \u7684 <code>i</code> \u8fd8\u662f <code>x2</code> \u7684 <code>i</code> \u5462\uff1f</p> <ul> <li>\u56e0\u4e3a\u8fd9\u91cc\u5176\u5b9e\u662f <code>void foo(X * this)</code>.</li> <li><code>foo()</code> \u51fd\u6570\u7684 <code>this</code> \u6307\u9488\u6307\u5411 <code>x1</code> \u548c <code>x2</code> \u7684\u5730\u5740\uff0c\u6240\u4ee5 <code>&amp;i</code> \u548c <code>&amp;d</code> \u7684\u5730\u5740\u662f\u76f8\u5bf9\u4e8e <code>this</code> \u6307\u9488\u7684\u504f\u79fb\u91cf\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct X {\n    int i;\n    double d;\n    void foo(){\n        cout &lt;&lt; \"&amp;this = \" &lt;&lt; this &lt;&lt; endl;\n        cout &lt;&lt; \"&amp;i = \" &lt;&lt; &amp;this-&gt;i &lt;&lt; endl;\n        cout &lt;&lt; \"&amp;d = \" &lt;&lt; &amp;this-&gt;d &lt;&lt; endl;\n    }\n};\n\nint main(){\n    X x1;\n    X x2;\n    cout &lt;&lt; \"&amp;x1 = \" &lt;&lt; &amp;x1 &lt;&lt; endl;\n    x1.foo();\n    cout &lt;&lt; \"&amp;x2 = \" &lt;&lt; &amp;x2 &lt;&lt; endl;\n    x2.foo();\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>&amp;x1 = 0x4a42fffd00\n&amp;this = 0x4a42fffd00\n&amp;i = 0x4a42fffd00\n&amp;d = 0x4a42fffd08\n&amp;x2 = 0x4a42fffcf0\n&amp;this = 0x4a42fffcf0\n&amp;i = 0x4a42fffcf0\n&amp;d = 0x4a42fffcf8\n</code></pre> <p>\u5b57\u6bb5\uff08Fields\uff09\uff0c\u4e5f\u79f0\u4e3a\u6570\u636e\u6210\u5458\uff0c\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u7c7b\u7684\u6838\u5fc3\u7ec4\u6210\u90e8\u5206\uff0c\u7528\u4e8e\u63cf\u8ff0\u5bf9\u8c61\u7684\u5c5e\u6027\u548c\u72b6\u6001\u3002</p>"},{"location":"Computer_Science/OOP/Chapter6/#1","title":"1. \u5b9a\u4e49\u4f4d\u7f6e\uff1a\u5728\u6784\u9020\u5668\u548c\u65b9\u6cd5\u4e4b\u5916\u58f0\u660e","text":"<ul> <li>\u5b57\u6bb5\u76f4\u63a5\u5728\u7c7b\u7684\u5185\u90e8\u5b9a\u4e49\uff0c\u4e0d\u5728\u4efb\u4f55\u65b9\u6cd5\u3001\u6784\u9020\u5668\u6216\u4ee3\u7801\u5757\u5185\u90e8\u3002\u4f8b\u5982\uff1a      <pre><code>public class Person {\n    // \u5b57\u6bb5\u58f0\u660e\u5728\u7c7b\u5185\u90e8\uff0c\u65b9\u6cd5/\u6784\u9020\u5668\u5916\u90e8\n    private String name; // \u5b57\u6bb5\n    private int age;    // \u5b57\u6bb5\n\n    public Person(String name, int age) { // \u6784\u9020\u5668\n        this.name = name;\n        this.age = age;\n    }\n\n    public void celebrateBirthday() { // \u65b9\u6cd5\n        this.age++; // \u8bbf\u95ee\u5b57\u6bb5\n    }\n}\n</code></pre></li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#2","title":"2. \u4f5c\u7528\uff1a\u5b58\u50a8\u5bf9\u8c61\u7684\u6301\u4e45\u5316\u6570\u636e","text":"<ul> <li>\u5b57\u6bb5\u4fdd\u5b58\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u5176\u6570\u636e\u5728\u5bf9\u8c61\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u5185\uff08\u4ece\u521b\u5efa\u5230\u9500\u6bc1\uff09\u6301\u7eed\u5b58\u5728\u3002  </li> <li>\u4f8b\u5982\uff0c<code>Person</code> \u5bf9\u8c61\u7684 <code>name</code> \u548c <code>age</code> \u5b57\u6bb5\u4f1a\u4e00\u76f4\u8bb0\u5f55\u8be5\u4eba\u7684\u59d3\u540d\u548c\u5e74\u9f84\uff0c\u76f4\u5230\u5bf9\u8c61\u88ab\u9500\u6bc1\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#3-class-scope","title":"3. \u7c7b\u4f5c\u7528\u57df\uff08Class Scope\uff09","text":"<ul> <li>\u5728\u6574\u4e2a\u7c7b\u4e2d\u53ef\u8bbf\u95ee\uff1a\u7c7b\u7684\u4efb\u4f55\u65b9\u6cd5\u3001\u6784\u9020\u5668\u6216\u5176\u4ed6\u4ee3\u7801\u5757\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b57\u6bb5\uff08\u53d7\u8bbf\u95ee\u4fee\u9970\u7b26\u9650\u5236\uff09\u3002  </li> <li>\u4e0e\u5c40\u90e8\u53d8\u91cf\u7684\u533a\u522b\uff1a\u5c40\u90e8\u53d8\u91cf\u5728\u65b9\u6cd5\u5185\u5b9a\u4e49\uff0c\u4ec5\u5728\u8be5\u65b9\u6cd5\u6267\u884c\u671f\u95f4\u5b58\u5728\uff1b\u5b57\u6bb5\u5c5e\u4e8e\u5bf9\u8c61\uff0c\u751f\u547d\u5468\u671f\u4e0e\u5bf9\u8c61\u4e00\u81f4\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#4-vs","title":"4. \u5b57\u6bb5 vs \u5c40\u90e8\u53d8\u91cf","text":"\u7279\u6027 \u5b57\u6bb5\uff08Field\uff09 \u5c40\u90e8\u53d8\u91cf\uff08Local Variable\uff09 \u58f0\u660e\u4f4d\u7f6e \u7c7b\u5185\u90e8\uff0c\u65b9\u6cd5/\u6784\u9020\u5668\u5916\u90e8 \u65b9\u6cd5\u3001\u6784\u9020\u5668\u6216\u4ee3\u7801\u5757\u5185\u90e8 \u751f\u547d\u5468\u671f \u4e0e\u5bf9\u8c61\u5171\u5b58\u4ea1 \u968f\u65b9\u6cd5/\u4ee3\u7801\u5757\u6267\u884c\u7ed3\u675f\u800c\u9500\u6bc1 \u521d\u59cb\u5316 \u81ea\u52a8\u8d4b\u4e88\u9ed8\u8ba4\u503c\uff08\u5982int\u4e3a0\uff09 \u5fc5\u987b\u663e\u5f0f\u521d\u59cb\u5316\u540e\u624d\u80fd\u4f7f\u7528 \u4f5c\u7528\u57df \u6574\u4e2a\u7c7b\u5185\u90e8 \u4ec5\u9650\u4e8e\u58f0\u660e\u5b83\u7684\u65b9\u6cd5/\u4ee3\u7801\u5757\u5185"},{"location":"Computer_Science/OOP/Chapter6/#const-member-functions","title":"Const member functions","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nStruct X{\n    void foo(){\n        cout &lt;&lt; \"This is foo\" &lt;&lt; endl;\n    }\n    void foo() const{\n        cout &lt;&lt; \"This is foo const\" &lt;&lt; endl;\n    }\n};\n\n\nint main(){\n    X x;\n    x.foo();\n    const X cx;\n    cx.foo();\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>This is foo\nThis is foo const\n</code></pre> <ul> <li>Cannot modify the objects</li> </ul> <pre><code>void Date::set_day(int d) {\n    day = d; // ok, non-const so can modify\n}\nint Date::get_day() const {\n    day++; // ERROR: modifies data member\n    set_day(12); // ERROR: calls non-const member\n    return day;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter6/#constant-members-in-class","title":"Constant members in class","text":"<ul> <li>has to be initialized in the ctor's initializer list.</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct X{\n    const int i;\n    X(){\n        i = 0; // ERROR: can't modify const\n    }\n};\n\nint main(){\n    X x;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter6/#static-members","title":"Static members","text":"<pre><code>struct X{\n    static void f(); // declaration\n    static int n; // declaration\n};\n\nint X::n = 7; // definition\n\nvoid x::f(){ // definition\n    n = 1; //X::n is accessible\n}\n</code></pre> <ul> <li>\u5b9a\u4e49\u51fd\u6570\u7684\u65f6\u5019\u4e0d\u7528\u52a0 static \u5173\u952e\u8bcd\uff0c\u5199\u5728\u5916\u9762\u5c31\u884c\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A{\n    int data;\n    A(){ data = 0;}\n    void setdata(int i){ data = i;}\n    int print(){ cout &lt;&lt; data &lt;&lt; endl;}\n};\n\nint main(){\n    A a,b;\n    a.setdata(20);\n    a.print();\n    b.print();\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>20\n0\n</code></pre> <ul> <li>\u5f53\u52a0\u4e0a static \u540e</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A{\n    int mi;\n    static int data;\n    A(){ data = 0;}\n    void setdata(int i){ data = i;}\n    int print(){ cout &lt;&lt; data &lt;&lt; endl;}\n    static void foo(int ii){ cout &lt;&lt; ii &lt;&lt; \",\" &lt;&lt; data &lt;&lt; endl; }\n    static void foo1(int ii){ cout &lt;&lt; ii &lt;&lt; \",\" &lt;&lt; mi &lt;&lt; endl; } // ERROR: can't access non-static member\n};\n\nint A::data = 0;\n\nint main(){\n    A a,b;\n    a.setdata(20);\n    a.print();\n    b.print();\n\n    cout &lt;&lt; A::data &lt;&lt; endl;\n\n    A::foo(30);\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>20\n20\n20\n30,20\n</code></pre> <ul> <li>static \u7684\u4e1c\u897f\u662f\u5168\u5c40\u6570\u636e\u5c40\u7684\uff0c\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002\u8fd9\u4e2a data \u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u5bf9\u8c61\u3002</li> <li><code>mi</code> \u76f8\u5f53\u4e8e\u662f <code>this-&gt;mi</code> \uff0c\u4f46\u662f static function \u6ca1\u6709 this\uff0c\u4e0d\u8ddf\u4efb\u4f55\u5bf9\u8c61\u7ed1\u5b9a\uff0c\u4e5f\u5c31\u6ca1\u6709 this \u6307\u9488\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#inline","title":"Inline","text":"<ul> <li>An inline function is expanded in place, like a preprocessor macro in C, so the overhead of the function call is eliminated.</li> <li>Much safer than macro. It checks the types of the parameters, and has no dangerous side effect.</li> </ul> <pre><code>// original\ninline int f(int i) {\n    return i * 2;\n}\nint main() {\n    int a = 4;\n    int b = f(a);\n}\n\n/* ------------------ */\n\n// expanded\n\nint main() {\n    int a = 4;\n    int b = a + a;\n}\n</code></pre> <ul> <li>Trade off : Expand the code size but deduces the function call overhead, so it gains speed at the expenses of space.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#inline-or-not","title":"Inline or not?","text":"<ul> <li>inline<ul> <li>small functions, 2 or 3 lines</li> <li>frequently called functions, e.g. inside loops</li> </ul> </li> <li>not inline?<ul> <li>very large functions, say, more than 20 lines</li> <li>recursive functions</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#inline-may-not-in-line","title":"Inline may not in-line","text":"<ul> <li>The compiler does not have to honor yourrequest to make a function inline.</li> <li>It might decide the function is too large or noticethat it calls itself, or the feature might not be implemented for your particular compiler.</li> <li>Nowadays, the keyword inline for functions comes to mean \"multiple definitions are permitted\" rather than \"inlining is preferred\".</li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#inline-inside-class","title":"Inline inside class","text":"<p>Any function you define inside a class declaration is automatically an inline.</p> <pre><code>class Cup {\n    rgb color;\npublic:\n    rgb getColor() { return color; }\n    void setColor(rgb color) { this-&gt;color = color; }\n};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter6/#inline-functions-in-header-file","title":"Inline functions in header file","text":"<ul> <li>Put inline function\u2019s body in header file.Then <code>#include</code> it where the function is needed.</li> <li>Never be afraid of multi-definition of inline functions.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#composition","title":"Composition","text":"<ul> <li>Ways of composition<ul> <li>Direct, owns</li> <li>By reference, shares</li> </ul> </li> <li>The relationship of has-a</li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#example","title":"Example","text":"<pre><code>class Person { \u2026 };\nclass Currency { \u2026 };\nclass SavingsAccount {\npublic:\n    SavingsAccount(\n    const string&amp; name,\n    const string&amp; address,\n    int cents);\n    ~SavingsAccount();\n    void print();\nprivate:\n    Person m_saver;\n    Currency m_balance;\n};\n\nSavingsAccount::SavingsAccount(\nconst string&amp; name, const string&amp; address, int cents): m_saver(name, address),  m_balance(0, cents) {}\n\nvoid SavingsAccount::print()\n{\n    m_saver.print();\n    m_balance.print();\n}\n</code></pre> <ul> <li>Initializer list on Constructor<ul> <li>any number of objects separated by commas</li> <li>provide arguments to sub-constructors</li> </ul> </li> <li>Must be initialized<ul> <li>The default constructor is called if no explicit initialization</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter6/#a-nonobvious-problem","title":"A nonobvious problem","text":"<ul> <li>default constructors would be called.</li> </ul> <pre><code>SavingsAccount::SavingsAccount(\nconst string&amp; name, const string&amp; address, int cents) {\n    m_saver.set_name( name );\n    m_saver.set_address( address );\n    m_balance.set_cents( cents );\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter6/#inheritance","title":"Inheritance","text":"<ul> <li>Inheritance: clone an existing class and extend it.</li> <li> <p>The relationship of is-a</p> </li> <li> <p>An essential component of the OO design methodology.</p> </li> <li>Allows sharing of design for<ul> <li>data members</li> <li>member functions</li> <li>interfaces</li> </ul> </li> </ul> <p></p>"},{"location":"Computer_Science/OOP/Chapter6/#difference-between-composition-and-inheritance","title":"Difference between Composition and Inheritance","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A{\n    int x, y;\n};\n\nstruct B{\n    A a;\n};\n\nstruct C : public A{\n};\n\nint main(){\n    B b;\n    b.a.x; // \u8981\u8bbf\u95eeA\u7684\u6210\u5458\uff0c\u5fc5\u987b\u901a\u8fc7A\u7684\u5f15\u7528\n    C c;\n    c.x; // \u76f4\u63a5\u8bbf\u95eeA\u7684\u6210\u5458\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter6/#scopes-and-access-in-c","title":"Scopes and access in C++","text":"<pre><code>struct Base{\npublic:\n    Base() : data(10) { cout &lt;&lt; \"Base::Base()\" &lt;&lt; endl; }\n    ~Base() { cout &lt;&lt; \"Base::~Base()\" &lt;&lt; endl; }\n    void print(){ cout &lt;&lt; \"Base::print(): \" &lt;&lt; data &lt;&lt; endl; }\n    void setdata(int i) { data = i; }\nprivate:\n    int data;\n}\n\nstruct Derived : public Base{\n    void foo(){ setdata(30); print(); }  // legal\n    // void foo(){ setdata(30); data * = 2; print(); }  // illegal\n}\n\nint main(){\n    Derived d;\n    d.setdata(20);\n    d.print();\n}\n</code></pre> <ul> <li>\u5728 base class \u4e2d private \u7684\u4e1c\u897f\uff0c\u5230\u4e86 derived class \u4e2d\uff0c\u4e00\u6837\u662f private \u7684</li> <li>\u5982\u679c\u8981\u628a data \u6539\u6210\u5728\u5916\u754c\u4e0d\u80fd\u7528\uff0c\u53ea\u5728\u81ea\u5df1\u548c\u6d3e\u751f\u7c7b\u4e2d\u7528\uff0c\u90a3\u4e48\u53ef\u4ee5\u6539\u6210 protected</li> </ul> specifiers within same class in derived class outside the class private Yes No No protected Yes Yes No public Yes Yes Yes"},{"location":"Computer_Science/OOP/Chapter6/#further-reading","title":"Further reading","text":"Effective C++__Item-38   92 KB / 2025-04-01 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter7/","title":"Chapter 7 | Polymorphism","text":"<p> \u7ea6 2831 \u4e2a\u5b57  739 \u884c\u4ee3\u7801  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 23 \u5206\u949f</p>"},{"location":"Computer_Science/OOP/Chapter7/#more-on-constructors","title":"More on constructors","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Base{\npublic:\n    Base (int i) : data(i) {cout &lt;&lt; \"Base::Base()\" &lt;&lt; endl;}\n    ~Base() {cout &lt;&lt; \"Base::~Base()\" &lt;&lt; endl;}\n    void print() {cout &lt;&lt; \"Base::print():\" &lt;&lt; data &lt;&lt; endl;}\nprotected:\n    void setdata(int i) {data = i;}\nprivate:\n    int data;\n};\n\nclass C{\npublic:\n    C(int i) {cout &lt;&lt; \"C::C()\" &lt;&lt; endl;}\n    ~C() {cout &lt;&lt; \"C::~C()\" &lt;&lt; endl;}\n}\n\nstruct Derived : public Base{\npublic:\n    Derived(): c(20), Base(10) {\n        cout &lt;&lt; \"Derived::Derived()\" &lt;&lt; endl;\n    }\n    ~Derived() {cout &lt;&lt; \"Derived::~Derived()\" &lt;&lt; endl;}\n\nprivate:\n    C c;\n};\n\nint main(){\n    Derived d;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Base::Base()\nC::C()\nDerived::Derived()\nDerived::~Derived()\nC::~C()\nBase::~Base()\n</code></pre> <ul> <li>Base class is always constructed first.</li> <li>If no explicit arguments are passed to base class, the default constructor will be called.</li> <li>Destructors are called in exactly the reverse order of the constructors.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#name-hiding","title":"Name hiding","text":"<ul> <li>If you redefine a member function in the derived class, all the other overloaded functions in the base class are inaccessible.</li> <li>We'll see how the keyword virtual affects function overloading next time.</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#class-vs-struct","title":"class vs. struct","text":"<ul> <li><code>class</code> defaults to <code>private</code></li> <li><code>struct</code> defaults to <code>public</code></li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#access-protection-friend","title":"Access protection\uff1a <code>friend</code>","text":"<ul> <li>Grant access explicitly</li> <li>The class itself controls the access</li> <li>A friend can be:<ul> <li>a free function</li> <li>a member function of another classo or even an entire class</li> </ul> </li> </ul> <pre><code>struct X;\n\nstruct Y{\n    void f(X*);\n};\n\nstruct X{\nprivate:\n    int i;\npublic:\n    void initialize();\n    friend void g(X*, int); // global friend\n    friend void h();\n    friend void Y::f(X*); // struct member friend\n    friend struct Z; // entire struct friend\n};\n\nvoid X::initialize(){\n    i = 0;\n}\n\nvoid g(X* x, int i){\n    x-&gt;i = i;\n}\n\nvoid h(){\n    X x;\n    x.i = 100; // Direct data manipulation\n}\n\nvoid Y::f(X* x){\n    x-&gt;i = 47;\n}\n\nstruct Z{\nprivate:\n    int j;\npublic:\n    void initialize();\n    void g(X* x);\n};\n\nvoid Z::initialize(){\n    j = 99;\n}\n\nvoid Z::g(X* x){\n    x-&gt;i += j;\n};\n\nint main(){\n    X x;\n    Z z;\n}\n</code></pre> <ul> <li>\u4e00\u822c\u6765\u8bf4\u5f88\u5c11\u7528\u5230 <code>friend</code> \u5173\u952e\u5b57\uff0c\u9664\u4e86\u4f8b\u5982 operators overloading \u7684\u65f6\u5019\uff0c\u4f1a\u7528\u5230 <code>friend</code> \u5173\u952e\u5b57\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#access-protection-private","title":"Access protection\uff1a <code>private</code>","text":"<ul> <li><code>private</code> is to class, not to object</li> <li>A secret detour:<ul> <li>`private members can be accessed</li> <li>indirect read/write by pointers</li> </ul> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Base{\npublic:\n    Base (int i) : data(i) {cout &lt;&lt; \"Base::Base()\" &lt;&lt; endl;}\n    ~Base() {cout &lt;&lt; \"Base::~Base()\" &lt;&lt; endl;}\n    void print() {cout &lt;&lt; \"Base::print():\" &lt;&lt; data &lt;&lt; endl;}\n    void foo(Base *other) {cout &lt;&lt; \"Base::foo(), other -&gt; data = \" &lt;&lt; other-&gt;data &lt;&lt; endl;}\nprotected:\n    void setdata(int i) {data = i;}\nprivate:\n    int data;\n};\n\nint main(){\n    Base b1(11), b2(12);\n    b1.foo(&amp;b2);\n}\n</code></pre> <ul> <li><code>private</code> \u7684\u8bbf\u95ee\u6743\u9650\u662f\u57fa\u4e8e\u7c7b\uff08class\uff09\u7684\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u5bf9\u8c61\uff08instance\uff09\u7684\u3002</li> <li>\u5728 <code>foo()</code> \u5185\u90e8\uff0c\u901a\u8fc7 <code>other-&gt;data</code> \u8bbf\u95ee <code>b2</code> \u7684\u79c1\u6709\u6210\u5458 <code>data</code> \uff0c\u8fd9\u5c5e\u4e8e\u7c7b\u5185\u90e8\u7684\u5408\u6cd5\u8bbf\u95ee\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Base{\npublic:\n    int data;\n    Base() : data(10) {}\n};\n\nstruct Derived : public Base{  \nprivate:\n    int i;\npublic:\n    Derived() : i(30) {}\n    void printi() {cout &lt;&lt; \"Derived::i = \" &lt;&lt; i &lt;&lt; endl;}\n};\n\nint main(){\n    Base b;\n    Derived d;\n\n    cout &lt;&lt; b.data &lt;&lt; \", \" &lt;&lt; d.data &lt;&lt; endl;  // 10, 10\n    cout &lt;&lt; sizeof(b) &lt;&lt; \", \" &lt;&lt; sizeof(d) &lt;&lt; endl;  // 4, 8\n\n    int *p = (int*)&amp;b;\n    cout &lt;&lt; *p &lt;&lt; \", \" &lt;&lt; *p &lt;&lt; endl; // 0xd438fff8e4, 10\n\n    p = (int*)&amp;d;\n    cout &lt;&lt; *p &lt;&lt; \", \" &lt;&lt; *p &lt;&lt; endl; // 0xd438fff8e0, 10\n\n    *p = 200;\n    cout &lt;&lt; d.data &lt;&lt; endl;  // 200\n\n    d.printi();  // Derived::i = 30\n\n    p++;\n    cout &lt;&lt; *p &lt;&lt; \", \" &lt;&lt; *p &lt;&lt; endl; // 0xd438fff8e4\n    *p = 50;\n    d.printi();  // Derived::i = 50\n}\n</code></pre> <ul> <li>\u5c3d\u7ba1 <code>i</code> \u662f\u79c1\u6709\u5b57\u6bb5\uff0c\u4f46\u662f\u8fd8\u662f\u5728\u5916\u9762\u88ab\u6539\u6389\u4e86</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#access-protection","title":"Access protection","text":"<ul> <li>Inheritance</li> </ul> <pre><code>class Derived1 : public Base {}\nclass Derived2 : protected Base {}\nclass Derived3 : private Base {}\n</code></pre> <ul> <li>\u4e09\u4e2a\u5173\u952e\u8bcd\u5728\u7ee7\u627f\u65f6\u4e5f\u53ef\u4ee5\u7528</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#how-inheritance-affects-access","title":"How inheritance affects access","text":"<ul> <li>Suppose class B is derived from class A.</li> </ul> inheritance type (B is) public members protected members private members : private A private in B private in B not accessible : protected A protected in B protected in B not accessible : public A public in B protected in B not accessible"},{"location":"Computer_Science/OOP/Chapter7/#conversions","title":"Conversions","text":"<ul> <li>Public Inheritance should imply substitution:<ul> <li>If B is-a A, you can use a B anywhere an A can be used.</li> <li>if B is-a A, then everything that is true for A is also true of B.</li> <li>Liskov\u2019s Substitution Principle</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#upcasting","title":"Upcasting","text":"<ul> <li>Regard an object of the derived class as an object of the base class<ul> <li>only valid for reference or pointer.</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#upcasting-examples","title":"Upcasting examples","text":"<pre><code>Manager pete(\"Pete\", \"444-55-6666\", \"Bakery\");\nEmployee * ep = &amp;pete; // Upcast\nEmployee &amp; er = pete; // Upcast\n</code></pre> <ul> <li>Lose type information about the object:</li> </ul> <pre><code>ep-&gt;print(cout); // base class version of print\n</code></pre> <ul> <li>\u5982\u679c\u60f3\u8981\u5728\u6253\u5370\u65f6\u4f9d\u65e7\u4fdd\u7559 Manager \u7684\u4fe1\u606f\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u5230\u591a\u6001\u4e86\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#polymorphism","title":"Polymorphism","text":""},{"location":"Computer_Science/OOP/Chapter7/#virtual-destructors","title":"Virtual destructors","text":"<ul> <li>Make destructors virtual if they might be inherited</li> </ul> <pre><code>Shape *p = new Ellipse(100.0F, 200.0F);\n...\ndelete p; // which dtor?\n</code></pre> <ul> <li><code>Shape::~Shape()</code> is invoked if not virtual!</li> <li>Want <code>Ellipse::~Ellipse()</code> to be called:<ul> <li>Must declare <code>virtual Shape::~Shape()</code> , which is implicitly called inside <code>Ellipse::~Ellipse()</code> .</li> </ul> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Shape{\npublic:\n    void move(){\n        cout &lt;&lt; \"Shape::move()\" &lt;&lt; endl;\n    }\n    virtual void render(){\n        cout &lt;&lt; \"Shape::render()\" &lt;&lt; endl;\n    }\n};\n\nclass Ellipse : public Shape{\npublic:\n    void render(){\n        cout &lt;&lt; \"Ellipse::render()\" &lt;&lt; endl;\n    }\n};\n\nclass Circle : public Ellipse{\npublic:\n    void render(){\n        cout &lt;&lt; \"Circle::render()\" &lt;&lt; endl;\n    }\n};\n\nvoid foo(Shape *p){\n    p-&gt;move();\n    p-&gt;render();\n}\n\nint main(){\n    Ellipse e;\n    Circle c;\n    foo(&amp;e);\n    foo(&amp;c);\n}\n</code></pre> <ul> <li>\u5982\u679c\u6ca1\u6709\u7528 <code>virtual</code> \u5173\u952e\u5b57\uff0c\u90a3\u4e48\u8f93\u51fa\u5c06\u4f1a\u662f\uff1a</li> </ul> <pre><code>Shape::move()\nShape::render()\nShape::move()\nShape::render()\n</code></pre> <ul> <li>\u5982\u679c\u52a0\u4e0a <code>virtual</code> \u5173\u952e\u5b57\uff0c\u90a3\u4e48\u8f93\u51fa\u5c06\u4f1a\u662f\uff1a</li> </ul> <pre><code>Shape::move()\nEllipse::render()\nShape::move()\nCircle::render()\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Shape{\npublic:\n    virtual ~Shape() {};\n    void move(){\n        cout &lt;&lt; \"Shape::move()\" &lt;&lt; endl;\n    }\n    virtual void render(){\n        cout &lt;&lt; \"Shape::render()\" &lt;&lt; endl;\n    }\n};\n\nclass Ellipse : public Shape{\npublic:\n    ~Ellipse(){\n        cout &lt;&lt; \"Ellipse::~Ellipse()\" &lt;&lt; endl;\n    }\n    void render(){\n        cout &lt;&lt; \"Ellipse::render()\" &lt;&lt; endl;\n    }\n};\n\nclass Circle : public Ellipse{\npublic:\n    ~Circle(){\n        cout &lt;&lt; \"Circle::~Circle()\" &lt;&lt; endl;\n    }\n    void render(){\n        cout &lt;&lt; \"Circle::render()\" &lt;&lt; endl;\n    }\n};\n\nvoid foo(Shape *p){\n    p-&gt;move();\n    p-&gt;render();\n}\n\nvoid move_and_render(std::vector&lt;Shape*&gt; &amp;shapes){\n    for(auto p : shapes){\n        foo(p);\n    }\n}\n\nint main(){\n    std::vector&lt;Shape*&gt; all_shapes;\n    all_shapes.push_back(new Circle);\n    all_shapes.push_back(new Ellipse);\n\n    move_and_render(all_shapes);\n\n    delete all_shapes[0];\n    delete all_shapes[1];\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Shape::move()\nCircle::render()\nShape::move()\nEllipse::render()\n</code></pre> <ul> <li>delete \u65f6\u4f1a\u53d1\u73b0\u8fd9\u4e24\u8005\u7684\u6790\u6784\u51fd\u6570\u6ca1\u6709\u88ab\u8c03\u7528\u3002</li> <li>\u8fd9\u662f\u56e0\u4e3a\uff0c\u5728 C++ \u4e2d\uff0c\u6790\u6784\u51fd\u6570\u9ed8\u8ba4\u662f\u975e\u865a\u51fd\u6570\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u4e0d\u4f1a\u81ea\u52a8\u5730\u88ab\u6d3e\u751f\u7c7b\u91cd\u5199\u3002\u56e0\u6b64\uff0c\u5f53\u4f7f\u7528\u57fa\u7c7b\u6307\u9488\u5220\u9664\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u53ea\u4f1a\u8c03\u7528\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u800c\u4e0d\u4f1a\u8c03\u7528\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8d44\u6e90\u6cc4\u6f0f\u6216\u5176\u4ed6\u95ee\u9898\u3002</li> <li>\u6b64\u65f6\u9700\u8981\u7ed9 Shape \u52a0\u4e0a\u4e00\u4e2a <code>virtual ~Shape() {}</code>\uff0c\u8fd9\u6837\u5728 delete \u65f6\u5c31\u4f1a\u8c03\u7528\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570\u4e86\u3002\u6b64\u65f6\u7684\u8f93\u51fa\u662f\uff1a</li> </ul> <pre><code>Shape::move()\nCircle::render()\nShape::move()\nEllipse::render()\nCircle::~Circle()\nEllipse::~Ellipse()\nEllipse::~Ellipse()\n</code></pre> <ul> <li>\u8fd9\u91cc\u4f1a\u6709\u4e24\u4e2a <code>Ellipse::~Ellipse()</code>\uff0c\u8fd9\u662f\u56e0\u4e3a Circle \u662f\u7ee7\u627f\u81ea Ellipse \u7684\uff0c\u6240\u4ee5 Circle \u7684\u6790\u6784\u51fd\u6570\u4f1a\u5148\u8c03\u7528 Ellipse \u7684\u6790\u6784\u51fd\u6570\uff0c\u7136\u540e\u518d\u8c03\u7528\u81ea\u5df1\u7684\u6790\u6784\u51fd\u6570\u3002</li> <li>\u5982\u679c\u662f\u7ed9 Shape \u52a0\u4e0a <code>virtual ~Shape() = 0;</code>\uff0c\u5c31\u4f1a\u62a5\u9519\u3002</li> <li>\u539f\u56e0\u662f\u5f53\u6d3e\u751f\u7c7b\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\uff0c\u4f1a\u9690\u5f0f\u8c03\u7528\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002\u5982\u679c\u57fa\u7c7b\u7684\u7eaf\u865a\u6790\u6784\u51fd\u6570\u6ca1\u6709\u5b9e\u73b0\uff0c\u94fe\u63a5\u5668\u5c06\u65e0\u6cd5\u627e\u5230\u5176\u5b9a\u4e49\uff0c\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002\u56e0\u4e3a Shape \u7684\u7eaf\u865a\u6790\u6784\u51fd\u6570\u53ea\u6709\u58f0\u660e\uff0c\u6ca1\u6709\u5b9e\u73b0\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base{\npublic:\n    Base() : data(10) {}\n    void foo() { cout &lt;&lt; \"Base::foo(): data = \" &lt;&lt; data &lt;&lt; endl; }\nprivate:\n    int data;\n};\n\nint main(){\n    Base b;\n    b.foo();\n\n    cout &lt;&lt; \"size of b is: \" &lt;&lt; sizeof(b) &lt;&lt; endl;\n}\n\n\u8f93\u51fa\uff1a\n\n```bash\nBase::foo(): data = 10\nsize of b is: 4\n</code></pre> <ul> <li>\u63a5\u7740\u52a0\u5165\u4e00\u4e2a <code>bar()</code> \u51fd\u6570</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base{\npublic:\n    Base() : data(10) {}\n    void foo() { cout &lt;&lt; \"Base::foo(): data = \" &lt;&lt; data &lt;&lt; endl; }\n    virtual void bar() { cout &lt;&lt; \"Base::bar()\" &lt;&lt; endl; }\nprivate:\n    int data;\n};\n\nint main(){\n    Base b;\n    b.foo();\n    b.bar();\n\n    cout &lt;&lt; \"size of b is: \" &lt;&lt; sizeof(b) &lt;&lt; endl;\n\n    int *p = (int *)&amp;b;\n    cout &lt;&lt; *p &lt;&lt; endl;\n    p++;\n    cout &lt;&lt; *p &lt;&lt; endl;\n    p++;\n    cout &lt;&lt; *p &lt;&lt; endl;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Base::foo(): data = 10\nBase::bar()\nsize of b is: 16\n58290032\n32758\n10\n</code></pre> <pre><code>|------------------|\n| vptr (8 bytes)   |  // \u865a\u51fd\u6570\u8868\u6307\u9488\n|------------------|\n| data (4 bytes)   |  // int data = 10\n| padding (4 bytes)|  // \u586b\u5145\u5bf9\u9f50\n|------------------|\n</code></pre> <p>\u64cd\u4f5c\u5206\u6790\uff1a</p> <ol> <li><code>&amp;b</code> \u83b7\u53d6\u5bf9\u8c61\u8d77\u59cb\u5730\u5740\uff08\u6307\u5411 <code>vptr</code>\uff09\u3002</li> <li><code>(int *)&amp;b</code> \u5c06\u5730\u5740\u5f3a\u5236\u8f6c\u6362\u4e3a <code>int*</code>\uff0c\u6b64\u65f6 <code>p</code> \u6307\u5411 <code>vptr</code> \u7684\u9996 4 \u5b57\u8282\u3002</li> <li><code>(void**)p</code> \u5c06 <code>p</code> \u8f6c\u6362\u4e3a <code>void**</code>\uff0c\u5373\u6307\u5411 <code>void*</code> \u7684\u6307\u9488\uff0c\u6b64\u65f6 <code>pp</code> \u6307\u5411 <code>vptr</code> \u7684\u8d77\u59cb\u4f4d\u7f6e\u3002</li> <li><code>*pp</code> \u89e3\u5f15\u7528\u83b7\u53d6 <code>vptr</code> \u7684\u503c\uff08\u5373\u865a\u51fd\u6570\u8868\u7684\u5730\u5740\uff09\u3002</li> </ol> <ul> <li> <p>\u6307\u9488\u7684\u52a0\u51cf\u64cd\u4f5c\u662f\u57fa\u4e8e\u6307\u9488\u7c7b\u578b\u7684\u5927\u5c0f\u8fdb\u884c\u504f\u79fb\u7684\u3002</p> <ul> <li>\u82e5 <code>p</code> \u662f <code>int*</code> \u7c7b\u578b\uff0c<code>p += 1</code> \u4f1a\u5c06\u6307\u9488\u79fb\u52a8 <code>sizeof(int)</code> \u5b57\u8282\uff08\u901a\u5e38 4 \u5b57\u8282\uff09\u3002</li> <li>\u82e5 <code>p</code> \u662f <code>char*</code> \u7c7b\u578b\uff0c<code>p += 1</code> \u4ec5\u79fb\u52a8 1 \u5b57\u8282\u3002</li> </ul> </li> <li> <p>Shape \u7684\u6790\u6784\u51fd\u6570\u505a\u6210 virtual \u4e4b\u540e\uff0c\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570\u4f1a\u4e0e\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u5f62\u6210\u8986\u76d6\u5173\u7cfb\u3002</p> <ul> <li>\u5f53\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u88ab\u58f0\u660e\u4e3a virtual \u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u8be5\u7c7b\u751f\u6210\u4e00\u4e2a\u865a\u51fd\u6570\u8868\uff0c\u8868\u4e2d\u8bb0\u5f55\u4e86\u865a\u51fd\u6570\u7684\u5730\u5740\u3002</li> <li>\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570\u4f1a\u9690\u5f0f\u7ee7\u627f\u57fa\u7c7b\u7684\u865a\u6790\u6784\u51fd\u6570\u5c5e\u6027\uff0c\u5e76\u81ea\u52a8\u6210\u4e3a\u865a\u51fd\u6570\uff08\u5373\u4f7f\u672a\u663e\u5f0f\u6dfb\u52a0 virtual \u5173\u952e\u5b57\uff09\u3002</li> <li>\u6b64\u65f6\uff0c\u6d3e\u751f\u7c7b\u6790\u6784\u51fd\u6570\u5728\u865a\u51fd\u6570\u8868\u4e2d\u8986\u76d6\u4e86\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740\u3002</li> <li>\u9500\u6bc1\u65f6\u7684\u52a8\u6001\u7ed1\u5b9a<ul> <li>\u5f53\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u5220\u9664\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u7f16\u8bd1\u5668\u901a\u8fc7\u865a\u51fd\u6570\u8868\u627e\u5230\u5b9e\u9645\u5bf9\u8c61\u7c7b\u578b\u5bf9\u5e94\u7684\u6790\u6784\u51fd\u6570\u3002</li> <li>\u8c03\u7528\u987a\u5e8f\u4e3a\uff1a\u6d3e\u751f\u7c7b\u6790\u6784\u51fd\u6570 \\(\\rightarrow\\) \u57fa\u7c7b\u6790\u6784\u51fd\u6570\uff08\u81ea\u5e95\u5411\u4e0a\uff09\u3002</li> </ul> </li> </ul> </li> </ul> <ul> <li>\u5176\u5b9e 10 \u524d\u9762\u7684\u516b\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5916\u9762</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base{\npublic:\n    Base() : data(10) {}\n    void foo() { cout &lt;&lt; \"Base::foo(): data = \" &lt;&lt; data &lt;&lt; endl; }\n    virtual void bar() { cout &lt;&lt; \"Base::bar()\" &lt;&lt; endl; }\nprivate:\n    int data;\n};\n\nint main(){\n    Base b;\n    b.foo();\n    b.bar0();\n\n    cout &lt;&lt; \"size of b is: \" &lt;&lt; sizeof(b) &lt;&lt; endl;\n\n    int *p = (int *)&amp;b; // \u5c06\u5bf9\u8c61\u5730\u5740\u5f3a\u5236\u8f6c\u6362\u4e3a int*\n    void* *pp = (void* *)p; // \u518d\u8f6c\u6362\u4e3a void**\uff08\u7b49\u4ef7\u4e8e\u6307\u5411\u865a\u51fd\u6570\u8868\u7684\u6307\u9488\uff09\n    void* vptr = *pp; // \u83b7\u53d6\u865a\u51fd\u6570\u8868\u5730\u5740\n    cout &lt;&lt; vptr &lt;&lt; endl; // \u8f93\u51fa\u865a\u51fd\u6570\u8868\u5730\u5740\n    p += 2;\n    cout &lt;&lt; *p &lt;&lt; endl;\n\n    Base b2;\n    void *vptr2 = *((void**)&amp;b2);\n\n    cout &lt;&lt; (void*)main &lt;&lt; endl;\n    cout &lt;&lt; vptr &lt;&lt; endl;\n    cout &lt;&lt; vptr2 &lt;&lt; endl;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Base::foo(): data = 10\nBase::bar()\nsize of b is: 16\n0x7ff6a9d46f70\n10\n0x7ff6a9c81540\n0x7ff6a9d46f70\n0x7ff6a9d46f70\n</code></pre> <ul> <li>\u53ef\u4ee5\u770b\u5230\u5176\u5b9e\u6bd4\u8f83\u63a5\u8fd1\u3002\u6240\u4ee5\u5176\u5b9e\u662f\u4e00\u4e2a\u4ee3\u7801\u6bb5\u7684\u4e1c\u897f\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base{\npublic:\n    Base() : data(10) {}\n    void foo() { cout &lt;&lt; \"Base::foo(): data = \" &lt;&lt; data &lt;&lt; endl; }\n    virtual void bar0() { cout &lt;&lt; \"Base::bar0()\" &lt;&lt; endl; }\n    virtual void bar1() { cout &lt;&lt; \"Base::bar1()\" &lt;&lt; endl; }\nprivate:\n    int data;\n};\n\nclass Derived : public Base{\npublic:\n    void bar0() { cout &lt;&lt; \"Derived::bar0()\" &lt;&lt; endl; }\n    void bar1() { cout &lt;&lt; \"Derived::bar1()\" &lt;&lt; endl; }\n};\n\nint main(){\n    Base b;\n    b.foo();\n\n    cout &lt;&lt; \"size of b is: \" &lt;&lt; sizeof(b) &lt;&lt; endl;\n\n    int *p = (int *)&amp;b;\n    void* *pp = (void* *)p;\n    void* vptr = *pp;\n    cout &lt;&lt; vptr &lt;&lt; endl;\n    p += 2;\n    cout &lt;&lt; *p &lt;&lt; endl;\n\n    Base b2;\n    void *vptr2 = *((void**)&amp;b2);\n    cout &lt;&lt; vptr2 &lt;&lt; endl;\n\n    Derived d;\n    void *vptrd = *((void**)&amp;d);\n    cout &lt;&lt; vptrd &lt;&lt; endl;\n\n    void* *vfuncs = (void* *)vptr;\n    void* f0 = vfuncs[0];\n    cout &lt;&lt; \"f0:\" &lt;&lt; f0 &lt;&lt; endl;\n    void* f1 = vfuncs[1];\n    cout &lt;&lt; \"f1:\" &lt;&lt; f1 &lt;&lt; endl;\n\n    void* *vfuncsd = (void* *)vptrd;\n    void* f0d = vfuncsd[0];\n    cout &lt;&lt; \"f0d:\" &lt;&lt; f0d &lt;&lt; endl;\n    void* f1d = vfuncsd[1];\n    cout &lt;&lt; \"f1d:\" &lt;&lt; f1d &lt;&lt; endl;\n\n    cout &lt;&lt; \"f0 == f0d: \" &lt;&lt; ((f0 == f0d) ? \"True\" : \"False\") &lt;&lt; endl;\n    cout &lt;&lt; \"f1 == f1d: \" &lt;&lt; ((f1 == f1d) ? \"True\" : \"False\") &lt;&lt; endl;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Base::foo(): data = 10\nsize of b is: 16\n0x7ff66b866ff0\n10\n0x7ff66b866ff0\n0x7ff66b867010\nf0:0x7ff66b7c25a0\nf1:0x7ff66b7c25e0\nf0d:0x7ff66b7c2680\nf1d:0x7ff66b7c26c0\nf0 == f0d: False\nf1 == f1d: False\n</code></pre> <ul> <li>\u56e0\u4e3a\u6bcf\u4e2a\u7c7b\uff08\u5305\u542b\u865a\u51fd\u6570\u6216\u7ee7\u627f\u81ea\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\uff09\u4f1a\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u865a\u51fd\u6570\u8868\u3002\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u7684\u865a\u51fd\u6570\u8868\u662f\u72ec\u7acb\u7684\u3002</li> </ul> <p>Base \u7c7b\u7684\u865a\u51fd\u6570\u8868</p> <pre><code>|------------------|\n| &amp;Base::bar0()    |  // \u7b2c\u4e00\u4e2a\u865a\u51fd\u6570\u5730\u5740\n|------------------|\n| &amp;Base::bar1()    |  // \u7b2c\u4e8c\u4e2a\u865a\u51fd\u6570\u5730\u5740\n|------------------|\n</code></pre> <p>Derived \u7c7b\u7684\u865a\u51fd\u6570\u8868</p> <pre><code>|---------------------|\n| &amp;Derived::bar0()    |  // \u8986\u76d6\u57fa\u7c7b\u7684 bar0()\n|---------------------|\n| &amp;Derived::bar1()    |  // \u8986\u76d6\u57fa\u7c7b\u7684 bar1()\n|---------------------|\n</code></pre> <ul> <li>\u82e5\u6d3e\u751f\u7c7b\u672a\u91cd\u5199\u865a\u51fd\u6570\uff0c\u5730\u5740\u4f1a\u76f8\u540c\uff1a</li> </ul> <pre><code>class Derived : public Base {\n    // \u4e0d\u91cd\u5199 bar0() \u548c bar1()\n};\n</code></pre> <p>\u6b64\u65f6\u8f93\u51fa\uff1a</p> <pre><code>f0 == f0d: True\nf1 == f1d: True\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base{\npublic:\n    Base() : data(10) {}\n    void foo() { cout &lt;&lt; \"Base::foo(): data = \" &lt;&lt; data &lt;&lt; endl; }\n    virtual void bar0() { cout &lt;&lt; \"Base::bar0()\" &lt;&lt; endl; }\n    virtual void bar1() { cout &lt;&lt; \"Base::bar1()\" &lt;&lt; endl; }\nprivate:\n    int data;\n};\n\nclass Derived : public Base{\npublic:\n    void bar0() { cout &lt;&lt; \"Derived::bar0()\" &lt;&lt; endl; }\n    void bar1(int a) { cout &lt;&lt; \"Derived::bar1(int): datad + a = \" &lt;&lt; datad + a &lt;&lt; endl; }\nprivate:\n    int datad;\n};\n\nint main(){\n    Base b;\n    b.foo();\n\n    cout &lt;&lt; \"size of b is: \" &lt;&lt; sizeof(b) &lt;&lt; endl;\n\n    int *p = (int *)&amp;b;\n    void* *pp = (void* *)p;\n    void* vptr = *pp;\n    cout &lt;&lt; vptr &lt;&lt; endl;\n    p += 2;\n    cout &lt;&lt; *p &lt;&lt; endl;\n\n    Base b2;\n    void *vptr2 = *((void**)&amp;b2);\n    cout &lt;&lt; vptr2 &lt;&lt; endl;\n\n    Derived d;\n    void *vptrd = *((void**)&amp;d);\n    cout &lt;&lt; vptrd &lt;&lt; endl;\n\n    void* *vfuncs = (void* *)vptr;\n    void* f0 = vfuncs[0];\n    cout &lt;&lt; \"f0:\" &lt;&lt; f0 &lt;&lt; endl;\n    void* f1 = vfuncs[1];\n    cout &lt;&lt; \"f1:\" &lt;&lt; f1 &lt;&lt; endl;\n\n    void* *vfuncsd = (void* *)vptrd;\n    void* f0d = vfuncsd[0];\n    cout &lt;&lt; \"f0d:\" &lt;&lt; f0d &lt;&lt; endl;\n    void* f1d = vfuncsd[1];\n    cout &lt;&lt; \"f1d:\" &lt;&lt; f1d &lt;&lt; endl;\n\n    cout &lt;&lt; \"f0 == f0d: \" &lt;&lt; ((f0 == f0d) ? \"True\" : \"False\") &lt;&lt; endl;\n    cout &lt;&lt; \"f1 == f1d: \" &lt;&lt; ((f1 == f1d) ? \"True\" : \"False\") &lt;&lt; endl;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Base::foo(): data = 10\nsize of b is: 16\n0x7ff77a256ff0\n10\n0x7ff77a256ff0\n0x7ff77a257010\nf0:0x7ff77a1b2630\nf1:0x7ff77a1b2670\nf0d:0x7ff77a1b2710\nf1d:0x7ff77a1b2670\nf0 == f0d: False\nf1 == f1d: True\n</code></pre> <ul> <li>\u6d3e\u751f\u7c7b\u8981\u8986\u76d6\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff0c\u5fc5\u987b\u6ee1\u8db3\u51fd\u6570\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4\uff08\u5305\u62ec\u53c2\u6570\u7c7b\u578b\u3001\u6570\u91cf\u3001const \u4fee\u9970\u7b26\u7b49\uff09\u3002</li> <li><code>Derived::bar1(int)</code> \u7684\u7b7e\u540d\u4e0e <code>Base::bar1()</code> \u4e0d\u5339\u914d\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u8986\u76d6\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff0c\u800c\u662f\u6210\u4e3a\u6d3e\u751f\u7c7b\u4e2d\u7684\u4e00\u4e2a\u65b0\u51fd\u6570\uff08\u4e0e\u57fa\u7c7b\u865a\u51fd\u6570\u5171\u5b58\uff09\u3002</li> <li>\u5176\u5b9e\u662f\u8981\u7528 <code>override</code> \u4f46\u662f\u5728\u4e0a\u8ff0\u7b7e\u540d\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#_1","title":"\u591a\u6001\u5b9e\u73b0\u7684\u6d41\u7a0b","text":"<ol> <li>\u58f0\u660e\u865a\u51fd\u6570</li> </ol> <p>\u5728\u57fa\u7c7b\u4e2d\u7528 <code>virtual</code> \u5173\u952e\u5b57\u58f0\u660e\u9700\u8981\u591a\u6001\u884c\u4e3a\u7684\u51fd\u6570\u3002</p> <ol> <li>\u751f\u6210\u865a\u51fd\u6570\u8868\uff08vtable\uff09</li> </ol> <ul> <li>\u7f16\u8bd1\u5668\u4e3a\u6bcf\u4e2a\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\u751f\u6210\u4e00\u4e2a\u865a\u51fd\u6570\u8868\u3002</li> <li><code>vtable</code> \u6309\u58f0\u660e\u987a\u5e8f\u5b58\u50a8\u8be5\u7c7b\u6240\u6709\u865a\u51fd\u6570\u7684\u5730\u5740\u3002</li> </ul> <ol> <li>\u5206\u914d\u865a\u8868\u6307\u9488\uff08vptr\uff09</li> </ol> <ul> <li>\u6bcf\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u9690\u5f0f\u5305\u542b\u4e00\u4e2a\u6307\u5411\u5176\u6240\u5c5e\u7c7b vtable \u7684\u6307\u9488\uff08vptr\uff09\u3002</li> <li>\u5bf9\u8c61\u6784\u9020\u65f6\uff0cvptr \u88ab\u521d\u59cb\u5316\u4e3a\u6307\u5411\u5f53\u524d\u7c7b\u7684 vtable\u3002</li> </ul> <ol> <li>\u6d3e\u751f\u7c7b\u8986\u76d6\u865a\u51fd\u6570</li> </ol> <ul> <li>\u6d3e\u751f\u7c7b\u91cd\u5199\uff08override\uff09\u57fa\u7c7b\u865a\u51fd\u6570\u65f6\uff0c\u5176 vtable \u4e2d\u5bf9\u5e94\u6761\u76ee\u66ff\u6362\u4e3a\u6d3e\u751f\u7c7b\u51fd\u6570\u7684\u5730\u5740\u3002</li> </ul> <ol> <li>\u52a8\u6001\u7ed1\u5b9a</li> </ol> <p>\u901a\u8fc7\u57fa\u7c7b\u6307\u9488/\u5f15\u7528\u8c03\u7528\u865a\u51fd\u6570\u65f6\uff1a</p> <pre><code>- \u901a\u8fc7\u5bf9\u8c61\u7684 vptr \u627e\u5230\u5bf9\u5e94\u7684 vtable\u3002\n- \u6839\u636e\u51fd\u6570\u58f0\u660e\u987a\u5e8f\uff0c\u4ece vtable \u4e2d\u53d6\u51fa\u76ee\u6807\u51fd\u6570\u7684\u5730\u5740\u3002\n- \u8c03\u7528\u8be5\u5730\u5740\u7684\u51fd\u6570\uff08\u5b9e\u9645\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u73b0\uff09\u3002\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base{\npublic:\n    Base() : data(10) {}\n    void foo() { cout &lt;&lt; \"Base::foo(): data = \" &lt;&lt; data &lt;&lt; endl; }\n    virtual void bar0() { cout &lt;&lt; \"Base::bar0()\" &lt;&lt; endl; }\n    virtual void bar1(int) { cout &lt;&lt; \"Base::bar1(int)\" &lt;&lt; endl; }\nprivate:\n    int data;\n};\n\nclass Derived : public Base{\npublic:\n    void bar0() { cout &lt;&lt; \"Derived::bar0()\" &lt;&lt; endl; }\n    void bar1(int a) { cout &lt;&lt; \"Derived::bar1(int): datad + a = \" &lt;&lt; datad + a &lt;&lt; endl; }\nprivate:\n    int datad;\n};\n\nint main(){\n    Base b;\n    b.foo();\n\n    cout &lt;&lt; \"size of b is: \" &lt;&lt; sizeof(b) &lt;&lt; endl;\n\n    int *p = (int *)&amp;b;\n    void* *pp = (void* *)p;\n    void* vptr = *pp;\n    cout &lt;&lt; vptr &lt;&lt; endl;\n    p += 2;\n    cout &lt;&lt; *p &lt;&lt; endl;\n\n    Base b2;\n    void *vptr2 = *((void**)&amp;b2);\n    cout &lt;&lt; vptr2 &lt;&lt; endl;\n\n    Derived d;\n    void *vptrd = *((void**)&amp;d);\n    cout &lt;&lt; vptrd &lt;&lt; endl;\n\n    void* *vfuncs = (void* *)vptr;\n    void* f0 = vfuncs[0];\n    cout &lt;&lt; \"f0:\" &lt;&lt; f0 &lt;&lt; endl;\n    void* f1 = vfuncs[1];\n    cout &lt;&lt; \"f1:\" &lt;&lt; f1 &lt;&lt; endl;\n\n    void* *vfuncsd = (void* *)vptrd;\n    void* f0d = vfuncsd[0];\n    cout &lt;&lt; \"f0d:\" &lt;&lt; f0d &lt;&lt; endl;\n    void* f1d = vfuncsd[1];\n    cout &lt;&lt; \"f1d:\" &lt;&lt; f1d &lt;&lt; endl;\n\n    cout &lt;&lt; \"f0 == f0d: \" &lt;&lt; ((f0 == f0d) ? \"True\" : \"False\") &lt;&lt; endl;\n    cout &lt;&lt; \"f1 == f1d: \" &lt;&lt; ((f1 == f1d) ? \"True\" : \"False\") &lt;&lt; endl;\n\n    void (*vf)(Derived*, int) = (void (*)(Derived*, int))f1d;\n    vf(&amp;d, 20);\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Base::foo(): data = 10\nsize of b is: 16\n0x7ff649c17010\n10\n0x7ff649c17010\n0x7ff649c17030\nf0:0x7ff649b72650\nf1:0x7ff649b72690\nf0d:0x7ff649b72730\nf1d:0x7ff649b72770\nf0 == f0d: False\nf1 == f1d: False\nDerived::bar1(int): datad + a = 20\n</code></pre> <ul> <li><code>Derived::bar1(int)</code> \u662f\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u5176\u8c03\u7528\u9700\u8981\u9690\u5f0f\u7684 <code>this</code> \u6307\u9488\u3002</li> <li>\u5982\u679c\u662f <code>void (*vf)(int)</code> \u5219\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\uff0c\u56e0\u4e3a <code>vf</code> \u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u6307\u9488\uff0c\u800c\u4e0d\u662f\u6210\u5458\u51fd\u6570\u6307\u9488\u3002</li> <li>\u5b9e\u9645\u4e0a\u6210\u5458\u51fd\u6570\u6307\u9488\u7684\u7c7b\u578b\u5e94\u4e3a <code>void (Derived::*)(int)</code>\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#what-happens-if","title":"What happens if","text":"<pre><code>Ellipse elly(20f, 40f);\nCircle circ(60f);\nelly = circ;\n</code></pre> <ul> <li>Area of <code>circ</code> is sliced off<ul> <li>only the part of <code>circ</code> fits in <code>elly</code> gets copied</li> </ul> </li> <li>The <code>vptr</code> from <code>circ</code> is ignored<ul> <li><code>vptr</code> in <code>elly</code> still points to the <code>Ellipse vtable</code></li> </ul> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base {\npublic:\n    Base() : data(10) {}\n    virtual void bar() { cout &lt;&lt; \"Base::bar(): data = \" &lt;&lt; data &lt;&lt; endl; }\nprotected:\n    int data;\n};\n\nclass Derived : public Base {\npublic:\n    Derived() : datad(100) {data = 7;} \n    void bar() override { cout &lt;&lt; \"Derived::bar(): data = \" &lt;&lt; data &lt;&lt; \", datad = \" &lt;&lt; datad &lt;&lt; endl; }\nprivate:\n    int datad;\n};\n\nint main(){\n    Base b;\n    b.bar();  // \u9759\u6001\u7ed1\u5b9a\n\n    Derived d;\n    Base *p = &amp;d;\n    p-&gt;bar();  // \u52a8\u6001\u7ed1\u5b9a\n\n    b = d;\n    b.bar();\n    p = &amp;b;\n    p-&gt;bar();\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>Base::bar(): data = 10\nDerived::bar(): data = 7, datad = 100\nBase::bar(): data = 7\nBase::bar(): data = 7\n</code></pre> <ul> <li>\u5c06 <code>Derived</code> \u5bf9\u8c61 <code>d</code> \u8d4b\u503c\u7ed9 <code>Base</code> \u5bf9\u8c61 <code>b</code> \u65f6\uff0c\u53ea\u4f1a\u590d\u5236 <code>Base</code> \u90e8\u5206\u7684\u6210\u5458\uff08<code>data = 7</code>\uff09\uff0c<code>Derived</code> \u7279\u6709\u7684\u6210\u5458\uff08<code>datad</code>\uff09\u88ab\u4e22\u5f03\u3002</li> <li>\u6b64\u65f6\u9759\u6001\u7ed1\u5b9a <code>b</code> \u4ecd\u7136\u662f <code>Base</code> \u7c7b\u578b\u5bf9\u8c61\uff0c\u8c03\u7528 <code>Base::bar()</code>\uff0c\u8f93\u51fa\u4fee\u6539\u540e\u7684 <code>data = 7</code>\u3002</li> <li>\u52a8\u6001\u7ed1\u5b9a\u4f46\u65e0\u591a\u6001\uff0c\u867d\u7136\u901a\u8fc7\u6307\u9488\u8c03\u7528\u865a\u51fd\u6570\uff0c\u4f46 <code>p</code> \u6b64\u65f6\u6307\u5411\u7684\u662f <code>Base</code> \u5bf9\u8c61 <code>b</code>\uff0c\u56e0\u6b64\u8c03\u7528 <code>Base::bar()</code>\u3002data \u4ecd\u4e3a 7\uff08\u4e0a\u4e00\u6b65\u8d4b\u503c\u540e\u7684\u503c\uff09\u3002</li> <li>\u53ef\u4ee5\u770b\u51fa\u8d4b\u503c\u4e4b\u540e\uff0c\u8fd9\u4e2a <code>b</code> \u5bf9\u8c61\u7684 <code>vptr</code> \u6307\u5411\u7684\u662f <code>Base</code> \u7684\u865a\u51fd\u6570\u8868\uff0c\u800c\u4e0d\u662f <code>Derived</code> \u7684\u865a\u51fd\u6570\u8868\u3002\u8bf4\u660e\uff0c\u8d4b\u503c\u64cd\u4f5c\u4e0d\u4f1a\u6539\u53d8 <code>vptr</code> \u7684\u6307\u5411\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#vptr","title":"\u5982\u679c\u8fdb\u884c\u4eba\u4e3a\u5730\u66f4\u6539 <code>vptr</code>","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base {\npublic:\n    Base() : data(10) {}\n    virtual void bar() { cout &lt;&lt; \"Base::bar(): data = \" &lt;&lt; data &lt;&lt; endl; }\nprotected:\n    int data;\n};\n\nclass Derived : public Base {\npublic:\n    Derived() : datad(100) {data = 7;} \n    void bar() override { cout &lt;&lt; \"Derived::bar(): data = \" &lt;&lt; data &lt;&lt; \", datad = \" &lt;&lt; datad &lt;&lt; endl; }\nprivate:\n    int datad;\n};\n\nint main(){\n    Base b;\n    b.bar();  // \u9759\u6001\u7ed1\u5b9a\n\n    Derived d;\n    Base *p = &amp;d;\n    p-&gt;bar();  // \u52a8\u6001\u7ed1\u5b9a\n\n    b = d;\n\n    void* *pb = (void* *)&amp;b;\n    void* *pd = (void* *)&amp;d;\n    *pb = *pd;\n\n    b.bar();\n    p = &amp;b;\n    p-&gt;bar();\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>Base::bar(): data = 10\nDerived::bar(): data = 7, datad = 100\nBase::bar(): data = 7\nDerived::bar(): data = 7, datad = 32759\n</code></pre> <ul> <li>\u56e0\u4e3a <code>b</code> \u662f\u4e00\u4e2a <code>Base</code> \u5bf9\u8c61\uff0c\u6240\u4ee5 <code>b.bar()</code> \u4ecd\u7136\u662f\u9759\u6001\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u786e\u5b9a\u662f <code>Base</code> \u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u4f1a\u8c03\u7528 <code>Base::bar()</code>\u3002</li> <li>\u56e0\u4e3a <code>vptr</code> \u88ab copy \u8fc7\uff0c\u6b64\u65f6\u6307\u5411\u7684\u662f <code>Derived</code> \u7684\u865a\u51fd\u6570\u8868\u3002</li> <li>\u4f46\u662f\u6b64\u65f6 <code>datad</code> \u7684\u503c\u662f <code>b</code> \u7684 <code>data</code> \u503c\u518d\u4e0b\u9762\uff0c\u4e5f\u5c31\u662f\u7531 <code>b</code> \u7684\u5b58<code>vptr</code> \u7684\u5730\u65b9\u52a0\u4e0a\u504f\u79fb\u91cf\u7b97\u51fa\u6765\u7684\u5185\u5b58\u4e2d\u4e00\u4e2a\u672a\u77e5\u7684\u503c\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#private-vs-protected","title":"private v.s. protected","text":"\u7279\u6027 private protected \u672c\u7c7b\u5185\u90e8 \u2714\ufe0f \u53ef\u8bbf\u95ee \u2714\ufe0f \u53ef\u8bbf\u95ee \u6d3e\u751f\u7c7b \u274c \u4e0d\u53ef\u8bbf\u95ee \u2714\ufe0f \u53ef\u8bbf\u95ee \u53cb\u5143\u51fd\u6570/\u7c7b \u2714\ufe0f \u53ef\u8bbf\u95ee \u2714\ufe0f \u53ef\u8bbf\u95ee \u5916\u90e8\u4ee3\u7801 \u274c \u4e0d\u53ef\u8bbf\u95ee \u274c \u4e0d\u53ef\u8bbf\u95ee \u5178\u578b\u7528\u9014 \u9690\u85cf\u5b9e\u73b0\u7ec6\u8282 \u4e3a\u6d3e\u751f\u7c7b\u63d0\u4f9b\u6269\u5c55\u63a5\u53e3 <ul> <li>\u4f18\u5148\u4f7f\u7528 <code>private</code>\uff1a\u9075\u5faa\u6700\u5c0f\u66b4\u9732\u539f\u5219\uff0c\u51cf\u5c11\u8026\u5408\u3002</li> <li>\u8c28\u614e\u4f7f\u7528 <code>protected</code>\uff1a\u4ec5\u5728\u660e\u786e\u9700\u8981\u6d3e\u751f\u7c7b\u6269\u5c55\u65f6\u4f7f\u7528\uff0c\u907f\u514d\u8fc7\u5ea6\u66b4\u9732\u5185\u90e8\u903b\u8f91\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#what-happens-with-pointers","title":"What happens with pointers?","text":"<pre><code>Ellipse *elly = new Ellipse(20f, 40f);\nCircle *circ = new Circle(60f);\nelly = circ;\n</code></pre> <ul> <li>Well, the original <code>Ellipse</code> for <code>elly</code> is lost...<ul> <li>\u5982\u679c\u4e0d <code>delete</code> \u5219\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f</li> </ul> </li> <li><code>elly</code> and <code>circ</code> point to the same <code>Circle</code> object!<ul> <li><code>elly-&gt;render(); // Circle::render()</code></li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#virtual-and-reference-arguments","title":"Virtual and reference arguments","text":"<pre><code>void func(Ellipse&amp; elly) {\n    elly.render();\n}\nCircle circ(60F);\nfunc(circ);\n</code></pre> <ul> <li>References act like pointers</li> <li><code>Circle::render()</code> is called</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#calls-up-the-chain","title":"Calls up the chain","text":"<ul> <li>You can still call the overridden function for reuse</li> </ul> <pre><code>void Derived::func() {\n    cout &lt;&lt; \"In Derived::func()!\";\n    Base::func(); // call to base class\n}\n</code></pre> <ul> <li>This is a common way to add new functionality</li> <li>No need to copy the old stuff!</li> <li>\u8fd9\u4e2a function \u4e5f\u53ef\u4ee5\u662f virtual \u7684\u3002</li> <li>\u5728 <code>Base::func()</code> \u4e2d\u5c31\u4e0d\u662f\u52a8\u6001\u7ed1\u5b9a\u4e86\uff0c\u800c\u662f\u9759\u6001\u7ed1\u5b9a\u4e86\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#vs","title":"\u52a8\u6001\u7ed1\u5b9a v.s. \u9759\u6001\u7ed1\u5b9a","text":"<ul> <li> <p>\u9759\u6001\u7ed1\u5b9a\uff1a\u7f16\u8bd1\u65f6\u786e\u5b9a\uff0c\u9ad8\u6548\u4f46\u7f3a\u4e4f\u591a\u6001\u652f\u6301\u3002</p> </li> <li> <p>\u52a8\u6001\u7ed1\u5b9a\uff1a\u8fd0\u884c\u65f6\u786e\u5b9a\uff0c\u901a\u8fc7\u865a\u51fd\u6570\u5b9e\u73b0\u591a\u6001\uff0c\u662f\u9762\u5411\u5bf9\u8c61\u7684\u6838\u5fc3\u7279\u6027\u4e4b\u4e00\u3002</p> </li> </ul> <pre><code>Derived d;\nd.func();           // \u9759\u6001\u7ed1\u5b9a\uff08\u76f4\u63a5\u901a\u8fc7\u5bf9\u8c61\u8c03\u7528\uff09\nBase&amp; ref = d;     \nref.func();         // \u52a8\u6001\u7ed1\u5b9a\uff08\u901a\u8fc7\u5f15\u7528\u8c03\u7528\u865a\u51fd\u6570\uff09\nBase* ptr = &amp;d;    \nptr-&gt;func();        // \u52a8\u6001\u7ed1\u5b9a\uff08\u901a\u8fc7\u6307\u9488\u8c03\u7528\u865a\u51fd\u6570\uff09\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter7/#_2","title":"\u52a8\u6001\u7ed1\u5b9a\u7684\u89e6\u53d1\u6761\u4ef6","text":"<p>\u5fc5\u987b\u540c\u65f6\u6ee1\u8db3\uff1a</p> <ol> <li>\u901a\u8fc7\u6307\u9488\u6216\u5f15\u7528\u8c03\u7528\uff1a\u76f4\u63a5\u901a\u8fc7\u5bf9\u8c61\u5b9e\u4f8b\u8c03\u7528\u65f6\uff0c\u5373\u4f7f\u51fd\u6570\u662f\u865a\u51fd\u6570\uff0c\u4e5f\u4f7f\u7528\u9759\u6001\u7ed1\u5b9a\u3002</li> <li>\u8c03\u7528\u865a\u51fd\u6570\uff1a\u975e\u865a\u51fd\u6570\u4e0d\u53c2\u4e0e\u52a8\u6001\u7ed1\u5b9a\u3002</li> </ol>"},{"location":"Computer_Science/OOP/Chapter7/#relaxation-example","title":"Relaxation example","text":"<pre><code>class Expr {\npublic:\n    virtual Expr* newExpr();\n    virtual Expr&amp; clone();\n    virtual Expr self();\n};\nclass BinaryExpr : public Expr {\npublic:\n    virtual BinaryExpr* newExpr(); // ok\n    virtual BinaryExpr&amp; clone(); // ok\n    virtual BinaryExpr self(); // Error!\n};\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter7/#_3","title":"\u534f\u53d8\u8fd4\u56de\u7c7b\u578b\u662f\u4ec0\u4e48\uff1f","text":"<ul> <li>\u5b9a\u4e49\uff1a\u5f53\u6d3e\u751f\u7c7b\u91cd\u5199\u57fa\u7c7b\u865a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u57fa\u7c7b\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662f\u57fa\u7c7b\u6307\u9488/\u5f15\u7528\uff0c\u6d3e\u751f\u7c7b\u53ef\u4ee5\u5c06\u8fd4\u56de\u7c7b\u578b\u6539\u4e3a\u6d3e\u751f\u7c7b\u6307\u9488/\u5f15\u7528\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#_4","title":"\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u534f\u53d8\u8fd4\u56de\u7c7b\u578b\uff1f","text":"<ol> <li>\u7c7b\u578b\u5b89\u5168\uff1a\u907f\u514d\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u76f4\u63a5\u8fd4\u56de\u5177\u4f53\u7c7b\u578b\u7684\u6307\u9488/\u5f15\u7528\u3002</li> <li>\u4ee3\u7801\u7b80\u6d01\u6027\uff1a\u65e0\u9700\u624b\u52a8\u5411\u4e0b\u8f6c\u578b\uff08<code>dynamic_cast</code>\uff09\uff0c\u51cf\u5c11\u9519\u8bef\u3002</li> <li>\u591a\u6001\u652f\u6301\uff1a\u4fdd\u6301\u63a5\u53e3\u7edf\u4e00\uff0c\u540c\u65f6\u5141\u8bb8\u5b9e\u73b0\u7ec6\u8282\u5dee\u5f02\u3002</li> </ol> <ul> <li>\u5728C++\u4e2d\uff0c\u865a\u51fd\u6570\u7684\u91cd\u5199\u9700\u8981\u6ee1\u8db3\u4e25\u683c\u7684\u534f\u53d8\u8fd4\u56de\u7c7b\u578b\uff08covariant return type\uff09\u89c4\u5219\u3002</li> <li>\u534f\u53d8\u8fd4\u56de\u7c7b\u578b\u5141\u8bb8\u6d3e\u751f\u7c7b\u91cd\u5199\u865a\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u662f\u57fa\u7c7b\u8fd4\u56de\u7c7b\u578b\u7684\u6d3e\u751f\u7c7b\uff0c\u4f46\u9700\u6ee1\u8db3\uff1a</li> <li>\u8fd4\u56de\u7c7b\u578b\u4e3a \u6307\u9488 \u6216 \u5f15\u7528\u3002</li> <li>\u6d3e\u751f\u7c7b\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e\u57fa\u7c7b\u7684\u8fd4\u56de\u7c7b\u578b\u5177\u6709\u7ee7\u627f\u5173\u7cfb\uff08\u5373 <code>BinaryExpr</code> \u662f <code>Expr</code> \u7684\u5b50\u7c7b\uff09\u3002</li> <li>\u534f\u53d8\u8fd4\u56de\u7c7b\u578b\u4ec5\u9002\u7528\u4e8e \u6307\u9488\u6216\u5f15\u7528\uff0c\u800c <code>self()</code> \u8fd4\u56de\u7684\u662f\u5bf9\u8c61\uff08\u503c\u7c7b\u578b\uff09\u3002</li> <li>\u6b64\u65f6\uff0c\u6d3e\u751f\u7c7b\u5fc5\u987b\u4e25\u683c\u4fdd\u6301\u8fd4\u56de\u7c7b\u578b\u4e0e\u57fa\u7c7b\u4e00\u81f4\uff08\u5373 <code>Expr</code>\uff09\uff0c\u5426\u5219\u89c6\u4e3a\u51fd\u6570\u7b7e\u540d\u4e0d\u540c\uff0c\u5bfc\u81f4\u91cd\u5199\u5931\u8d25\u3002</li> <li>\u5b9e\u9645\u884c\u4e3a\uff1a</li> <li><code>BinaryExpr self()</code> \u4f1a\u88ab\u89c6\u4e3a\u4e00\u4e2a\u65b0\u7684\u865a\u51fd\u6570\uff0c\u800c\u975e\u5bf9\u57fa\u7c7b <code>Expr self()</code> \u7684\u91cd\u5199\u3002</li> <li> <p>\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1a\u51fd\u6570\u7b7e\u540d\u4e0d\u4e00\u81f4\uff08\u8fd4\u56de\u7c7b\u578b\u4e0d\u517c\u5bb9\uff09\u3002</p> </li> <li> <p>\u53ef\u6539\u5199\u4e3a:</p> </li> </ul> <pre><code>// \u57fa\u7c7b\u4fee\u6539\nvirtual Expr* self();  // \u6216 virtual Expr&amp; self();\n\n// \u6d3e\u751f\u7c7b\u91cd\u5199\nvirtual BinaryExpr* self() override;  // \u6216 virtual BinaryExpr&amp; self() override;\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter7/#_5","title":"\u5173\u952e\u89c4\u5219","text":"<ol> <li> <p>\u534f\u53d8\u8fd4\u56de\u7c7b\u578b\uff1a    - \u53ea\u5141\u8bb8\u6307\u9488\u6216\u5f15\u7528\u3002    - \u6d3e\u751f\u7c7b\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u662f\u57fa\u7c7b\u8fd4\u56de\u7c7b\u578b\u7684\u76f4\u63a5\u6216\u95f4\u63a5\u5b50\u7c7b\u3002</p> </li> <li> <p>\u5bf9\u8c61\u8fd4\u56de\u7c7b\u578b\uff1a    - \u91cd\u5199\u65f6\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u4e0e\u57fa\u7c7b\u4e25\u683c\u4e00\u81f4\u3002    - \u82e5\u4e0d\u4e00\u81f4\uff0c\u89c6\u4e3a\u51fd\u6570\u7b7e\u540d\u4e0d\u540c\uff0c\u5bfc\u81f4\u91cd\u5199\u5931\u8d25\u3002</p> </li> </ol>"},{"location":"Computer_Science/OOP/Chapter7/#_6","title":"\u793a\u4f8b\uff1a\u514b\u9686\u6a21\u5f0f","text":"<ul> <li>\u57fa\u7c7b\u5b9a\u4e49</li> </ul> <pre><code>class Animal {\npublic:\n    virtual Animal* clone() {  // \u8fd4\u56de\u57fa\u7c7b\u6307\u9488\n        return new Animal(*this);\n    }\n};\n</code></pre> <ul> <li>\u6d3e\u751f\u7c7b\u91cd\u5199</li> </ul> <pre><code>class Dog : public Animal {\npublic:\n    virtual Dog* clone() override {  // \u534f\u53d8\u8fd4\u56de\u7c7b\u578b\uff1a\u8fd4\u56de\u6d3e\u751f\u7c7b\u6307\u9488\n        return new Dog(*this);\n    }\n};\n</code></pre> <ul> <li>\u4f7f\u7528\u573a\u666f</li> </ul> <pre><code>Dog* myDog = new Dog();\nAnimal* animalPtr = myDog;          // \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\n\nDog* clonedDog = animalPtr-&gt;clone(); // \u76f4\u63a5\u5f97\u5230Dog*\uff0c\u65e0\u9700\u5f3a\u5236\u8f6c\u6362\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter7/#example-interface","title":"Example interface","text":"<pre><code>class CDevice {\npublic:\n    virtual ~CDevice() {}\n    virtual int read(...) = 0;\n    virtual int write(...) = 0;\n    virtual int open(...) = 0;\n    virtual int close(...) = 0;\n    virtual int ioctl(...) = 0;\n}\n</code></pre> <ul> <li>\u8fd9\u6837\u7684\u63a5\u53e3\u7c7b\u91cc\u9762\u662f\u6ca1\u6709\u53d8\u91cf\u7684\uff0c\u53ea\u6709\u7a0b\u5e8f\u7684\u51fd\u6570\u3002</li> <li>\u63a5\u53e3\u7c7b\u4e0d\u4f1a\u6709\u591a\u91cd\u7ee7\u627f\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u63a5\u53e3\u7c7b\u91cc\u9762\u6ca1\u6709\u6570\u636e\u5b58\u50a8\u3002</li> <li>\u53ef\u4ee5\u5b9a\u4e49\u5f88\u591a\u63a5\u53e3\u7c7b\uff0c\u7136\u540e\u901a\u8fc7\u591a\u91cd\u7ee7\u627f\u5404\u79cd\u63a5\u53e3\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter7/#further-reading","title":"Further reading","text":"Design Patterns - Abstract Factory   552 KB / 2025-04-01 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter8/","title":"Chapter 8 | Design","text":"<p> \u7ea6 734 \u4e2a\u5b57  395 \u884c\u4ee3\u7801  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 9 \u5206\u949f</p>"},{"location":"Computer_Science/OOP/Chapter8/#newtons-method","title":"Newton's method","text":"<ul> <li>Just a few iterations</li> </ul> <p>\\(x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}\\)</p> <p>e.g. \\(f(x) = x^2 - 2, f'(x) = 2x\\)</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint main(){\n    int k = 0;\n    double x = 1.0;\n    std::cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; std::endl;\n\n    while((std::fabs(x * x - 2) &gt; 1e-12) &amp;&amp; (k++ &lt; 30)){\n        x = x - (x * x - 2) / (2 * x);\n        std::cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; std::endl;\n    }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>k = 0, x = 1\nk = 1, x = 1.5\nk = 2, x = 1.41667\nk = 3, x = 1.41422\nk = 4, x = 1.41421\nk = 5, x = 1.41421\n</code></pre> <ul> <li><code>cout</code> \u8f93\u51fa\u7684\u65f6\u5019\u9ed8\u8ba4\u662f <code>6</code> \u4f4d\u5c0f\u6570\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter8/#a","title":"\u6539\u6210\u53c2\u6570\u4e3a <code>a</code> \u7684\u51fd\u6570\uff1a","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint main(){\n    double a = 2;\n    double tolerance = 1e-12;\n    int max_iter = 30;\n\n    int k = 0;\n    double x = 1.0;\n    std::cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; std::endl;\n\n    while((std::fabs(x * x - a) &gt; tolerance) &amp;&amp; (k++ &lt; max_iter)){\n        x = x - (x * x - a) / (2 * x);\n        std::cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; std::endl;\n    }\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter8/#_1","title":"\u63a5\u4e0b\u6765\u505a\u4e00\u4e2a\u5c01\u88c5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nclass NewtonSolver{\nprivate:\n    double a;\n    double tolerance;\n    int max_iter;\n    int k;\n    double x;\npublic:\n    NewtonSolver(double a, double tolerance, int max_iter): a(a), tolerance(tolerance), max_iter(max_iter){\n    }\n    void print_info(){\n        std::cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; std::endl;\n    }\n    double f(double x){\n        return x * x - a;\n    }\n    double df(double x){\n        return 2 * x;\n    }\n    bool is_close(double x){\n        return std::fabs(f(x)) &lt; tolerance;\n    }\n    void improve(double x0){\n        k = 0;\n        x = x0;\n        print_info();\n\n        while(!is_close(x) &amp;&amp; (k++ &lt; max_iter)){\n            x = x - (f(x)) / (df(x));\n            print_info();\n        }\n    }\n};\nint main(){\n    NewtonSolver solver(2, 1e-6, 100);\n    solver.improve(1.0);\n    return 0;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter8/#_2","title":"\u66f4\u52a0\u62bd\u8c61\u7684\u5c01\u88c5","text":"<ul> <li>\u5bf9\u4e8e OOP \u6765\u8bf4\uff0c\u8981\u505a\u5f97\u66f4\u62bd\u8c61\uff0c\u4e5f\u5373\u66f4\u5173\u6ce8\u725b\u987f\u8fed\u4ee3\u6cd5\u672c\u8eab\u7684\u903b\u8f91</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nclass NewtonSolver{\nprivate:\n    double tolerance;\n    int max_iter;\n    int k;\n    double x;\npublic:\n    NewtonSolver(double tolerance = 1e-12, int max_iter=30): tolerance(tolerance), max_iter(max_iter){\n    }\n    void improve(double x0){\n        k = 0;\n        x = x0;\n        print_info();\n\n        while(!is_close(x) &amp;&amp; (k++ &lt; max_iter)){\n            x = x - (f(x)) / (df(x));\n            print_info();\n        }\n    }\nprivate: \n    // implement the following functions for your problem.\n    virtual double f(double x) = 0;\n    virtual double df(double x) = 0;\n\n    void print_info(){\n        std::cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; \", f(x) = \" &lt;&lt; f(x) &lt;&lt; std::endl;\n    }\n    bool is_close(double x){\n        return std::fabs(f(x)) &lt; tolerance;\n    }\n\n};\n\nclass SqrtSolver: public NewtonSolver{\nprivate:\n    double a;\npublic:\n    SqrtSolver(double a): a(a){\n    }\nprivate:\n    double f(double x) override{\n        return x * x - a;\n    }\n    double df(double x) override{\n        return 2 * x;\n    }\n};\n\nint main(){\n    SqrtSolver solver(612.0);\n    solver.improve(1.0);\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>k = 0, x = 1, f(x) = -611\nk = 1, x = 306.5, f(x) = 93330.2        \nk = 2, x = 154.248, f(x) = 23180.6      \nk = 3, x = 79.108, f(x) = 5646.08       \nk = 4, x = 43.4221, f(x) = 1273.48      \nk = 5, x = 28.7582, f(x) = 215.032      \nk = 6, x = 25.0195, f(x) = 13.9773      \nk = 7, x = 24.7402, f(x) = 0.0780241    \nk = 8, x = 24.7386, f(x) = 2.48651e-06  \nk = 9, x = 24.7386, f(x) = 1.13687e-13\n</code></pre> \u5982\u679c\u57fa\u7c7b\u6784\u9020\u53c2\u6570\u65e0\u9ed8\u8ba4\u503c <p>\u90a3\u4e48\uff0c\u6d3e\u751f\u7c7b\u5fc5\u987b\u663e\u5f0f\u4f20\u9012\u57fa\u7c7b\u53c2\u6570\u3002</p> <pre><code>SqrtSolver(double a) : NewtonSolver(1e-12, 30), a(a) {}\n</code></pre> <p>about \u7eaf\u865a\u51fd\u6570</p> <p>\u5728C++\u4e2d\uff0c\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\u7684\u573a\u666f\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u5b9a\u4e49\u63a5\u53e3\u89c4\u8303 \u5f53\u57fa\u7c7b\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u901a\u7528\u63a5\u53e3\uff0c\u5f3a\u5236\u6240\u6709\u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u8be5\u51fd\u6570\u65f6\uff0c\u53ef\u5c06\u51fd\u6570\u58f0\u660e\u4e3a\u7eaf\u865a\u3002\u4f8b\u5982\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u5f62\u72b6\u57fa\u7c7b<code>Shape</code>\u65f6\uff0c\u5176\u8ba1\u7b97\u9762\u79ef\u7684<code>area()</code>\u65b9\u6cd5\u5e94\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u56e0\u4e3a\u4e0d\u540c\u5b50\u7c7b\uff08\u5982<code>Circle</code>\u3001<code>Rectangle</code>\uff09\u9700\u5404\u81ea\u5b9e\u73b0\u5177\u4f53\u903b\u8f91\u3002</p> </li> <li> <p>\u57fa\u7c7b\u65e0\u6cd5\u63d0\u4f9b\u9ed8\u8ba4\u5b9e\u73b0 \u82e5\u57fa\u7c7b\u65e0\u6cd5\u7ed9\u51fa\u5408\u7406\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u800c\u5fc5\u987b\u7531\u5b50\u7c7b\u6839\u636e\u81ea\u8eab\u7279\u6027\u5b9e\u73b0\uff0c\u5e94\u4f7f\u7528\u7eaf\u865a\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u52a8\u7269\u57fa\u7c7b<code>Animal</code>\u7684<code>speak()</code>\u65b9\u6cd5\uff0c\u4e0d\u540c\u52a8\u7269\u53eb\u58f0\u4e0d\u540c\uff0c\u57fa\u7c7b\u65e0\u6cd5\u7edf\u4e00\u5b9e\u73b0\u3002</p> </li> <li> <p>\u5f3a\u5236\u62bd\u8c61\u7c7b \u82e5\u5e0c\u671b\u7c7b\u65e0\u6cd5\u88ab\u5b9e\u4f8b\u5316\uff08\u53ea\u80fd\u4f5c\u4e3a\u57fa\u7c7b\uff09\uff0c\u53ef\u4e3a\u5176\u6dfb\u52a0\u81f3\u5c11\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u62bd\u8c61\u7c7b<code>AbstractDevice</code>\u58f0\u660e\u7eaf\u865a\u51fd\u6570<code>initialize()</code>\uff0c\u786e\u4fdd\u6240\u6709\u8bbe\u5907\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0\u521d\u59cb\u5316\u903b\u8f91\u3002</p> </li> <li> <p>\u63a5\u53e3\u7c7b\u8bbe\u8ba1 \u5f53\u7c7b\u4ec5\u7528\u4e8e\u5b9a\u4e49\u63a5\u53e3\uff08\u7c7b\u4f3cJava\u7684<code>interface</code>\uff09\uff0c\u6240\u6709\u65b9\u6cd5\u5747\u53ef\u8bbe\u4e3a\u7eaf\u865a\u3002\u4f8b\u5982\uff0c<code>IReadable</code>\u63a5\u53e3\u58f0\u660e\u7eaf\u865a\u7684<code>read()</code>\u65b9\u6cd5\uff0c\u5f3a\u5236\u5b9e\u73b0\u7c7b\u63d0\u4f9b\u8bfb\u53d6\u529f\u80fd\u3002</p> </li> </ol> <p>\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li>\u7eaf\u865a\u51fd\u6570\u53ef\u5b9e\u73b0\uff1aC++\u5141\u8bb8\u7eaf\u865a\u51fd\u6570\u6709\u5b9e\u73b0\uff08\u9700\u5728\u7c7b\u5916\u5b9a\u4e49\uff09\uff0c\u4f46\u5b50\u7c7b\u4ecd\u5fc5\u987b\u8986\u76d6\u5b83\u3002\u57fa\u7c7b\u5b9e\u73b0\u53ef\u901a\u8fc7<code>Base::function()</code>\u5728\u5b50\u7c7b\u4e2d\u8c03\u7528\u3002</li> <li>\u6790\u6784\u51fd\u6570\u7279\u6b8a\u5904\u7406\uff1a\u82e5\u58f0\u660e\u7eaf\u865a\u6790\u6784\u51fd\u6570\uff0c\u5fc5\u987b\u63d0\u4f9b\u5b9e\u73b0\uff08\u5426\u5219\u5bfc\u81f4\u94fe\u63a5\u9519\u8bef\uff09\u3002\u4f8b\u5982\uff1a</li> </ul> <pre><code>class AbstractBase {\npublic:\n    virtual ~AbstractBase() = 0; // \u58f0\u660e\u4e3a\u7eaf\u865a\n};\nAbstractBase::~AbstractBase() {} // \u5fc5\u987b\u63d0\u4f9b\u5b9a\u4e49\n</code></pre> <p>\u4f55\u65f6\u4e0d\u5b9c\u4f7f\u7528\u7eaf\u865a\u51fd\u6570\uff1f</p> <ul> <li>\u57fa\u7c7b\u80fd\u63d0\u4f9b\u5408\u7406\u9ed8\u8ba4\u5b9e\u73b0\uff1a\u82e5\u57fa\u7c7b\u65b9\u6cd5\u6709\u901a\u7528\u903b\u8f91\uff0c\u5b50\u7c7b\u53ef\u9009\u62e9\u662f\u5426\u8986\u76d6\uff0c\u5e94\u4f7f\u7528\u666e\u901a\u865a\u51fd\u6570\u800c\u975e\u7eaf\u865a\u3002</li> <li>\u975e\u591a\u6001\u9700\u6c42\uff1a\u82e5\u65e0\u9700\u8fd0\u884c\u65f6\u591a\u6001\uff0c\u6216\u7c7b\u76f4\u63a5\u5b9e\u4f8b\u5316\u6709\u610f\u4e49\uff0c\u5219\u65e0\u9700\u7eaf\u865a\u51fd\u6570\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter8/#n","title":"\u6dfb\u52a0n\u65b9\u6839","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nclass NewtonSolver{\nprivate:\n    double tolerance;\n    int max_iter;\n    int k;\n    double x;\npublic:\n    NewtonSolver(double tolerance = 1e-12, int max_iter=30): tolerance(tolerance), max_iter(max_iter){\n    }\n    void improve(double x0){\n        k = 0;\n        x = x0;\n        print_info();\n\n        while(!is_close(x) &amp;&amp; (k++ &lt; max_iter)){\n            x = x - (f(x)) / (df(x));\n            print_info();\n        }\n    }\nprivate: \n    // implement the following functions for your problem.\n    virtual double f(double x) = 0;\n    virtual double df(double x) = 0;\n\n    void print_info(){\n        std::cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; \", f(x) = \" &lt;&lt; f(x) &lt;&lt; std::endl;\n    }\n    bool is_close(double x){\n        return std::fabs(f(x)) &lt; tolerance;\n    }\n\n};\n\nclass SqrtSolver: public NewtonSolver{\nprivate:\n    double a;\npublic:\n    SqrtSolver(double a): a(a){\n    }\nprivate:\n    double f(double x) override{\n        return x * x - a;\n    }\n    double df(double x) override{\n        return 2 * x;\n    }\n};\n\n// f(x) = x^n - a\n// df(x) = n*x^(n-1)\n\nclass NthRootSolver: public NewtonSolver{\nprivate:\n    double a;\n    int n;\npublic:\n    NthRootSolver(double a, int n): a(a), n(n){\n    }\nprivate:\n    double f(double x) override{\n        return std::pow(x, n) - a;\n    }\n    double df(double x) override{\n        return n * std::pow(x, n-1);\n    }\n};\n\nint main(){\n    NthRootSolver solver(64.0, 2);\n    solver.improve(1.0);\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>k = 0, x = 1, f(x) = -63\nk = 1, x = 32.5, f(x) = 992.25\nk = 2, x = 17.2346, f(x) = 233.032\nk = 3, x = 10.474, f(x) = 45.7054\nk = 4, x = 8.29219, f(x) = 4.76044\nk = 5, x = 8.00515, f(x) = 0.0823941\nk = 6, x = 8, f(x) = 2.64846e-05\nk = 7, x = 8, f(x) = 2.72848e-12\nk = 8, x = 8, f(x) = 0\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter8/#_3","title":"\u518d\u6dfb\u52a0\u4e09\u89d2\u51fd\u6570","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nclass NewtonSolver{\nprivate:\n    double tolerance;\n    int max_iter;\n    int k;\n    double x;\npublic:\n    NewtonSolver(double tolerance = 1e-12, int max_iter=30): tolerance(tolerance), max_iter(max_iter){\n    }\n    void improve(double x0){\n        k = 0;\n        x = x0;\n        print_info();\n\n        while(!is_close(x) &amp;&amp; (k++ &lt; max_iter)){\n            x = x - (f(x)) / (df(x));\n            print_info();\n        }\n    }\nprivate: \n    // implement the following functions for your problem.\n    virtual double f(double x) = 0;\n    virtual double df(double x) = 0;\n\n    void print_info(){\n        std::cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; \", f(x) = \" &lt;&lt; f(x) &lt;&lt; std::endl;\n    }\n    bool is_close(double x){\n        return std::fabs(f(x)) &lt; tolerance;\n    }\n\n};\n\nclass SqrtSolver: public NewtonSolver{\nprivate:\n    double a;\npublic:\n    SqrtSolver(double a): a(a){\n    }\nprivate:\n    double f(double x) override{\n        return x * x - a;\n    }\n    double df(double x) override{\n        return 2 * x;\n    }\n};\n\n// f(x) = x^n - a\n// df(x) = n*x^(n-1)\n\nclass NthRootSolver: public NewtonSolver{\nprivate:\n    double a;\n    int n;\npublic:\n    NthRootSolver(double a, int n): a(a), n(n){\n    }\nprivate:\n    double f(double x) override{\n        return std::pow(x, n) - a;\n    }\n    double df(double x) override{\n        return n * std::pow(x, n-1);\n    }\n};\n\n// f(x) = cos(x) - x^3\n// df(x) = -sin(x) - 3x^2\n\nclass CosSolver: public NewtonSolver{\nprivate:\n    double f(double x) override{\n        return std::cos(x) - std::pow(x, 3);\n    }\n    double df(double x) override{\n        return -std::sin(x) - 3 * std::pow(x, 2);\n    }\n};\n\nint main(){\n    CosSolver solver;\n    solver.improve(1.0);\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>k = 0, x = 1, f(x) = -0.459698\nk = 1, x = 0.880333, f(x) = -0.0453512\nk = 2, x = 0.865684, f(x) = -0.000632313\nk = 3, x = 0.865474, f(x) = -1.2892e-07\nk = 4, x = 0.865474, f(x) = -5.21805e-15\n</code></pre>"},{"location":"Computer_Science/OOP/Chapter8/#_4","title":"\u62bd\u8c61\u6709\u5f88\u591a\u79cd\u505a\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n#include &lt;functional&gt;\nusing fn = std::function&lt;double(double)&gt;;\n\nvoid print_info(int k, double x, double fx){\n    std::cout &lt;&lt; \"k = \" &lt;&lt; k &lt;&lt; \", x = \" &lt;&lt; x &lt;&lt; \", f(x) = \" &lt;&lt; fx &lt;&lt; std::endl;\n}\n\nbool is_close(double fx, double tolerance){\n    return std::fabs(fx) &lt; tolerance;\n}\n\ndouble newton_solve(fn f, fn df, double x0, double tolerance=1e-12, int max_iter=30){\n    int k = 0;\n    double x = x0;\n    print_info(k, x, f(x));\n\n    while(!is_close(f(x), tolerance) &amp;&amp; (k++ &lt; max_iter)){\n        x = x - (f(x)) / (df(x));\n        print_info(k, x, f(x));\n    }\n    return x;\n}\n\ndouble sqrt_newton(double a, double x0 = 1.0){\n    auto f = [a](double x){ return x * x - a; };\n    auto df = [](double x){ return 2 * x; };\n    return newton_solve(f, df, x0);\n}\n\ndouble nth_root_newton(double a, int n, double x0 = 1.0){\n    auto f = [a, n](double x){ return std::pow(x, n) - a; };\n    auto df = [n](double x){ return n * std::pow(x, n - 1); };\n    return newton_solve(f, df, x0);\n}\n\ndouble cos_newton(double x0 = 1.0){\n    auto f = [](double x){ return std::cos(x) - std::pow(x, 3); };\n    auto df = [](double x){ return -std::sin(x) - 3 * std::pow(x, 2); };\n    return newton_solve(f, df, x0);\n}\n\nint main(){\n    sqrt_newton(2.0);\n    nth_root_newton(64, 6);\n    cos_newton();\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>k = 0, x = 1, f(x) = -1\nk = 1, x = 1.5, f(x) = 0.25\nk = 2, x = 1.41667, f(x) = 0.00694444\nk = 3, x = 1.41422, f(x) = 6.0073e-06\nk = 4, x = 1.41421, f(x) = 4.51061e-12\nk = 5, x = 1.41421, f(x) = 4.44089e-16\nk = 0, x = 1, f(x) = -63\nk = 1, x = 11.5, f(x) = 2.313e+06\nk = 2, x = 9.58339, f(x) = 774601\nk = 3, x = 7.98629, f(x) = 259395\nk = 4, x = 6.65557, f(x) = 86854.2\nk = 5, x = 5.54712, f(x) = 29070.5\nk = 6, x = 4.62463, f(x) = 9718.82\nk = 7, x = 3.8589, f(x) = 3238.05\nk = 8, x = 3.22822, f(x) = 1067.82\nk = 9, x = 2.72061, f(x) = 341.503\nk = 10, x = 2.33874, f(x) = 99.6394\nk = 11, x = 2.1014, f(x) = 22.1086\nk = 12, x = 2.01147, f(x) = 2.23449\nk = 13, x = 2.00016, f(x) = 0.0311752\nk = 14, x = 2, f(x) = 6.32365e-06\nk = 15, x = 2, f(x) = 2.55795e-13\nk = 0, x = 1, f(x) = -0.459698\nk = 1, x = 0.880333, f(x) = -0.0453512\nk = 2, x = 0.865684, f(x) = -0.000632313\nk = 3, x = 0.865474, f(x) = -1.2892e-07\nk = 4, x = 0.865474, f(x) = -5.21805e-15\n</code></pre> <ul> <li><code>std::function&lt;double(double)&gt;</code> \u8868\u793a\u4e00\u4e2a\u63a5\u53d7 <code>double</code> \u7c7b\u578b\u53c2\u6570\u5e76\u8fd4\u56de <code>double</code> \u7c7b\u578b\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u901a\u8fc7 <code>fn</code> \u522b\u540d\uff0c\u540e\u7eed\u53ef\u4ee5\u76f4\u63a5\u7528 <code>fn</code> \u4ee3\u66ff\u5197\u957f\u7684 <code>std::function&lt;double(double)&gt;</code>\uff0c\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\u3002</li> <li><code>f</code> \u901a\u8fc7 <code>[a]</code> \u6355\u83b7\u5916\u90e8\u7684 <code>a</code>\uff0c\u786e\u4fdd\u5728\u65b9\u7a0b\u4e2d\u4f7f\u7528\u6b63\u786e\u7684\u76ee\u6807\u503c\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter8/#further-reading","title":"Further reading","text":"Design Patterns - Observer   603 KB / 2025-04-07 <p> \u4e0b\u8f7d</p>  Software Engineering__CH-12.3   471 KB / 2025-04-07 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/Chapter9/","title":"Chapter 9 | Copy","text":"<p> \u7ea6 1887 \u4e2a\u5b57  453 \u884c\u4ee3\u7801  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 15 \u5206\u949f</p> <ul> <li> <p>Create a new object from an existing one</p> <ul> <li>e.g., when calling a function</li> </ul> </li> </ul> <pre><code>// Currency as pass-by-value argument \nvoid func(Currency p) { \n cout &lt;&lt; \"X = \" &lt;&lt; p.dollars(); \n} \n... \nCurrency bucks(100, 0); \nfunc(bucks); // bucks is copied into p\n</code></pre> <ul> <li>func \u9700\u8981\u4e00\u4e2a\u53c2\u6570 Currency p\uff0c\u4f46\u662f\u8fd9\u4e2a\u53c2\u6570\u662f\u901a\u8fc7 pass-by-value \u4f20\u9012\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cfunc \u4f1a\u521b\u5efa\u4e00\u4e2a Currency \u7c7b\u578b\u7684\u5bf9\u8c61 p\uff0c\u5e76\u5c06\u53c2\u6570 bucks \u7684\u503c\u62f7\u8d1d\u7ed9 p\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#code-version-1","title":"code version 1","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nstatic int objectCount = 0;\nvoid print(const string &amp;msg) {\n    cout &lt;&lt; msg &lt;&lt; \": \";\n    cout &lt;&lt; \"objectCount = \" &lt;&lt; objectCount &lt;&lt; endl;\n}\n\nclass Howmany {\npublic:\n    Howmany() {\n        objectCount++;\n        print(\"Howmany()\");\n    }\n    ~Howmany() {\n        objectCount--;\n        print(\"~Howmany()\");\n    }\n};\n\n// Pass and return by VALUE:\nHowmany f(Howmany x) {\n    print(\"x argument inside f()\");\n    return x;\n}\n\nint main() {\n    Howmany h;\n    print(\"after construction of h\");\n    Howmany h2 = f(h);\n    print(\"after call to f()\");\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Howmany(): objectCount = 1\nafter construction of h: objectCount = 1\nx argument inside f(): objectCount = 1\n~Howmany(): objectCount = 0\nafter call to f(): objectCount = 0\n~Howmany(): objectCount = -1\n~Howmany(): objectCount = -2\n</code></pre> <ul> <li>\u51fa\u73b0\u4e86\u8d1f\u6570\u3002\u53ef\u4ee5\u770b\u5230\u6709\u4e09\u4e2a destructor \u88ab\u8c03\u7528\uff0c\u8bf4\u660e\u6709\u4e09\u4e2a\u5bf9\u8c61\u3002\u4f46\u662f\u6211\u4eec\u7684\u8ba1\u6570\u53ea\u8bb0\u4e86\u4e00\u4e2a\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#code-version-2","title":"code version 2","text":"<ul> <li>\u5982\u679c\u5c06\u4e0a\u8ff0 <code>Howmany h2 = f(h);</code> \u6539\u4e3a <code>Howmany h2 = h;</code> \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u8f93\u51fa\uff1a</li> </ul> <pre><code>Howmany(): objectCount = 1\nafter construction of h: objectCount = 1\nafter call to f(): objectCount = 1\n~Howmany(): objectCount = 0\n~Howmany(): objectCount = -1\n</code></pre> <ul> <li>\u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c<code>Howmany h2 = f(h);</code> \u8fd9\u91cc\u5c31\u5df2\u7ecf\u5b58\u5728\u95ee\u9898\u4e86\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#code-version-3","title":"code version 3","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nstatic int objectCount = 0;\nvoid print(const string &amp;msg) {\n    cout &lt;&lt; msg &lt;&lt; \": \";\n    cout &lt;&lt; \"objectCount = \" &lt;&lt; objectCount &lt;&lt; endl;\n}\n\nclass Howmany {\npublic:\n    Howmany() {\n        objectCount++;\n        print(\"Howmany()\");\n    }\n    Howmany(int i) {\n        objectCount++;\n        print(\"Howmany(int)\");\n    }\n    ~Howmany() {\n        objectCount--;\n        print(\"~Howmany()\");\n    }\n};\n\n// Pass and return by VALUE:\nHowmany f(Howmany x) {\n    print(\"x argument inside f()\");\n    return x;\n}\n\nint main() {\n    Howmany h;\n    print(\"after construction of h\");\n    Howmany h2(20);\n    print(\"after call to f()\");\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>Howmany(): objectCount = 1\nafter construction of h: objectCount = 1\nHowmany(int): objectCount = 2\nafter call to f(): objectCount = 2\n~Howmany(): objectCount = 1\n~Howmany(): objectCount = 0\n</code></pre> <ul> <li>\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u53d8\u6210 0 \u4e86\u3002</li> <li><code>Howmany h2(20);</code> \u4e0e <code>Howmany h2 = 20;</code> \u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u5176\u8d4b\u503c\u7ed9 <code>h2</code>\u3002</li> </ul> <p>\u9690\u5f0f\u8f6c\u6362</p> <p><code>Howmany(int)</code> \u662f\u4e00\u4e2a\u5355\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e14\u672a\u88ab\u6807\u8bb0\u4e3a <code>explicit</code> \u3002\u56e0\u6b64\uff0c\u7f16\u8bd1\u5668\u5141\u8bb8\u901a\u8fc7\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u5c06 <code>int</code> \u8f6c\u6362\u4e3a <code>Howmany</code> \u5bf9\u8c61\u3002</p> <p><code>Howmany h2 = 20;</code> \u662f\u62f7\u8d1d\u521d\u59cb\u5316\uff08copy-initialization\uff09\u7684\u8bed\u6cd5\u5f62\u5f0f\u3002\u6839\u636e C++ \u89c4\u5219\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c1d\u8bd5\u5c06\u53f3\u4fa7\u7684 20 \u8f6c\u6362\u4e3a <code>Howmany</code> \u7c7b\u578b\uff0c\u518d\u901a\u8fc7\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316 <code>h2</code>\u3002\u4f46\u7531\u4e8e\u62f7\u8d1d\u7701\u7565\uff08copy elision\uff09\u4f18\u5316\uff0c\u7f16\u8bd1\u5668\u4f1a\u76f4\u63a5\u8c03\u7528 <code>Howmany(int)</code> \u6784\u9020\u51fd\u6570\u6784\u9020 h2\uff0c\u8df3\u8fc7\u4e86\u4e34\u65f6\u5bf9\u8c61\u7684\u521b\u5efa\u548c\u62f7\u8d1d\u6784\u9020\u6b65\u9aa4\u3002</p> <p>\u4e24\u79cd\u5199\u6cd5\u6700\u7ec8\u90fd\u76f4\u63a5\u8c03\u7528 <code>Howmany(int)</code> \u6784\u9020\u51fd\u6570\uff0c\u6ca1\u6709\u4e34\u65f6\u5bf9\u8c61\u7684\u989d\u5916\u5f00\u9500\u3002</p> <ul> <li>\u6240\u4ee5\u5176\u5b9e <code>Howmany h2 = h;</code> \u5b9e\u9645\u4e0a\u662f <code>Howmany h2(h);</code>\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u518d\u5c06\u5176\u8d4b\u503c\u7ed9 <code>h2</code>\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#code-version-4","title":"code version 4","text":"<ul> <li>\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u662f <code>Howmany</code> \u7684\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u4f7f\u7528\u7684\u51fd\u6570\u7b7e\u540d\u662f <code>Howmany f(Howmany hm);</code> \u65f6\u4f9d\u65e7\u6700\u540e\u4e0d\u662f 0 \u3002\u56e0\u4e3a\u8fd9\u4f1a\u662f\u4e00\u4e2a\u4f20\u503c\u7684\uff0c\u4f1a\u518d\u53d1\u751f copy \u7684\u884c\u4e3a\uff0c\u5c31\u4f1a\u518d\u53bb\u627e\u5bf9\u5e94\u7684\u6784\u9020\u51fd\u6570\u3002</li> <li>\u6240\u4ee5\u6211\u4eec\u7684 copy constructor \u5403\u8fdb\u6765\u662f\u4e00\u4e2a\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u9700\u8981\u628a\u7c7b\u578b\u5199\u6210 <code>const &amp;</code> \u3002</li> <li>\u8fd9\u91cc\u7684 <code>const</code> \u662f\u56e0\u4e3a\u4e0d\u4f1a\u66f4\u6539\uff0c\u53ea\u662f\u62ff\u4e00\u4e2a\u5bf9\u8c61\u8fdb\u6765\uff0c\u7136\u540e\u7528\u5b83\u8d4b\u503c\u4e00\u4efd\u65b0\u7684\u5bf9\u8c61\uff0c\u53ea\u662f\u9700\u8981\u503c\u3002\u800c <code>&amp;</code> \u8bf4\u660e\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u4e0d\u9700\u8981 copy \u3002</li> </ul> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nstatic int objectCount = 0;\nvoid print(const string &amp;msg) {\n    cout &lt;&lt; msg &lt;&lt; \": \";\n    cout &lt;&lt; \"objectCount = \" &lt;&lt; objectCount &lt;&lt; endl;\n}\n\nclass Howmany {\npublic:\n    Howmany() {\n        objectCount++;\n        print(\"Howmany()\");\n    }\n    Howmany(int i) {\n        objectCount++;\n        print(\"Howmany(int)\");\n    }\n    Howmany(const Howmany &amp;hm) {\n        objectCount++;\n        print(\"Howmany(const Howmany &amp;)\");\n    }\n    ~Howmany() {\n        objectCount--;\n        print(\"~Howmany()\");\n    }\n};\n\n// Pass and return by VALUE:\nHowmany f(Howmany x) {\n    print(\"x argument inside f()\");\n    return x;\n}\n\nint main() {\n    Howmany h;\n    print(\"after construction of h\");\n    Howmany h2(h);\n    print(\"after call to f()\");\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Howmany(): objectCount = 1\nafter construction of h: objectCount = 1\nHowmany(const Howmany &amp;): objectCount = 2\nafter call to f(): objectCount = 2\n~Howmany(): objectCount = 1\n~Howmany(): objectCount = 0\n</code></pre> <ul> <li>\u6b64\u65f6\u7684\u8f93\u51fa\u4e5f\u5c31\u6b63\u786e\u4e86\u3002</li> <li>\u6b64\u65f6\u5c31\u7b97 <code>Howmany h2(h);</code> \u6539\u4e3a\u6700\u521d\u7684 <code>Howmany h2 = f(h);</code>\uff0c\u8f93\u51fa\u4e5f\u662f\u6b63\u786e\u7684\u3002</li> <li>\u7136\u800c\u8981\u77e5\u9053\u7684\u662f\u5e76\u4e0d\u662f\u5bf9\u8c61\u6570\u76ee\u6ca1\u6709\u5bf9\u4e0a\uff0c\u5b9e\u9645\u4e0a\u662f\u6211\u4eec\u6253\u5370\u7684\u8ba1\u6570\u6570\u76ee\u6ca1\u6709\u5bf9\u4e0a\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#the-copy-constructor","title":"The copy constructor","text":"<ul> <li>Implements the copy behavior</li> <li>Has the unique signature: <code>T::T(const T &amp;t);</code></li> <li>C++ creates a copy ctor for you if you don't provide one...<ul> <li>\u7f16\u8bd1\u5668\u81ea\u52a8\u505a\u7684\u662f Member-wise copy \uff0c\u4f1a\u5bf9\u6bcf\u4e00\u4e2a\u5b57\u6bb5\u8fdb\u884c\u62f7\u8d1d\u7684\u884c\u4e3a<ul> <li>Good for numbers and objects</li> <li>Pointer data become shared!</li> </ul> </li> </ul> </li> </ul> <p>\u5982\u679c\u6309\u7167 Member-wise copy : </p> <p>\u5f53\u5b57\u6bb5\u6709\u6307\u9488\u65f6\uff0c\u4f8b\u5982\u4e0b\u56fe\u4e00\u4e2a\u5bf9\u8c61(\u7eff\u8272\u7684\u5757)\uff0c\u5b58\u5728\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e32\u5b57\u7b26\u4e32\u3002</p> <p>\u5728 copy \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6307\u9488\u662f copy-by-value \u7684\uff0c\u6240\u4ee5\u5730\u5740\u88ab\u590d\u5236\u4e86\u4e00\u4efd\uff0c\u6240\u4ee5\u4e24\u4e2a\u5bf9\u8c61\u5176\u5b9e\u662f\u6307\u5411\u540c\u4e00\u4efd\u6570\u636e\u7684\u3002\u4f46\u662f\u4f60\u60f3\u8981\u7684\u53ef\u80fd\u4e0d\u662f\u4e24\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u6570\u636e\uff0c\u800c\u662f\u6307\u5411\u4e00\u7247\u65b0\u7684\u533a\u57df\uff0c\u8fd9\u4e2a\u533a\u57df\u7684\u5185\u5bb9\u662f\u62f7\u8d1d\u8fc7\u6765\u7684\uff0c\u4e5f\u5373\u6df1\u5ea6\u7684\u62f7\u8d1d\u3002</p> <p>\u63a5\u4e0b\u6765\u5c31\u7528\u4ee3\u7801\u6765\u5b9e\u73b0\u770b\u770b\u3002</p> <pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Person {\n    char *name;\n    Person(const char *s) {\n        name = new char[strlen(s) + 1]; // +1 for '\\0'\n        strcpy(name, s);\n    }\n    ~Person() {\n        delete[] name;\n    }\n};\n\nint main() {\n    Person p1(\"Trump\");\n    Person p2 = p1; // \u62f7\u8d1d\u6784\u9020\u884c\u4e3a\n\n    cout &lt;&lt; (void*)p1.name &lt;&lt; endl;  //0x2d17bae17f0\n    cout &lt;&lt; (void*)p2.name &lt;&lt; endl;  //0x2d17bae17f0\n}\n</code></pre> <ul> <li>\u6b64\u65f6\uff0cp1 \u548c p2 \u7684 name \u6307\u9488\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\uff0c\u7531\u4e8e p2 \u5148\u88ab\u9500\u6bc1\uff0c\u5f53 p2 \u88ab\u9500\u6bc1\u65f6\uff0c\u8fd9\u5757\u5185\u5b58\u88ab\u5220\u9664\uff0cp1 \u7684 name \u6307\u9488\u5c31\u53d8\u6210\u4e86\u60ac\u7a7a\u6307\u9488\uff0c\u8bbf\u95ee\u5b83\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</li> <li>\u56e0\u6b64\uff0c\u5728\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u5e94\u8be5\u4e3a\u65b0\u7684\u5bf9\u8c61\u5206\u914d\u65b0\u7684\u5185\u5b58\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u5730\u590d\u5236\u6307\u9488\u3002\u4e5f\u5c31\u662f\u7f16\u8bd1\u5668\u81ea\u5df1\u751f\u6210\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u53ea\u662f\u590d\u5236\u6307\u9488\uff0c\u5e76\u6ca1\u6709\u5206\u914d\u65b0\u7684\u5185\u5b58\uff0c\u5e76\u4e0d\u5408\u683c\u3002\u6240\u4ee5\u5176\u5b9e\u5f53\u4f60\u6709\u6307\u9488\u5b57\u6bb5\u65f6\uff0c\u5fc5\u987b\u81ea\u5df1\u5199\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002</li> <li>\u8fd9\u4e2a destructor \u4e0d\u5199\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\uff0c\u4f46\u662f\u8fd9\u4e2a\u81ea\u52a8\u751f\u6210\u7684 destructor \u53ea\u4f1a\u5220\u9664\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\uff0c\u5e76\u4e0d\u4f1a\u5220\u9664\u6307\u9488\u672c\u8eab\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u60ac\u7a7a\u6307\u9488\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u4f1a\u5f15\u8d77\u5185\u5b58\u6cc4\u6f0f\u3002</li> </ul> <pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Person {\n    char *name;\n    Person(const char *s) {\n        name = new char[strlen(s) + 1];\n        strcpy(name, s);\n    }\n    Person(const Person &amp;other) {\n        name = new char[strlen(other.name) + 1];\n        strcpy(name, other.name);  // \u8fd9\u6837\u4fbf\u662f\u6df1\u5ea6\u62f7\u8d1d\n    }\n    ~Person() {\n        delete[] name; \n    }\n};\n\nint main() {\n    Person p1(\"Trump\");\n    Person p2 = p1;\n\n    cout &lt;&lt; (void*)p1.name &lt;&lt; endl;  //0x2e7c80e17f0\n    cout &lt;&lt; (void*)p2.name &lt;&lt; endl;  //0x2e7c80e1830\n}\n</code></pre> <ul> <li>\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u5185\u5bb9\u7684\u62f7\u8d1d\uff0cp1 \u548c p2 \u5c31\u4f1a\u6709\u5404\u81ea\u7684\u5185\u5b58\uff0c\u5373\u4f7f p2 \u5148\u88ab\u9500\u6bc1\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5230 p1\u3002</li> <li>\u5176\u5b9e\u5f53\u9700\u8981\u5199 destructor \u65f6\uff0c\u5c31\u6307\u793a\u51fa\u9700\u8981\u81ea\u5df1\u5199 copy constructor\u3002</li> <li>No return value\u3002\u6240\u6709\u7684 copy constructor \u662f\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#what-if-the-name-was-a-string-not-a-char","title":"What if the name was a string (not a char* )","text":"<pre><code>#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Person {\n    string name;\n    Person(const char *s) : name(s) {}  // \u56e0\u4e3a string \u6709\u81ea\u5df1\u7684 copy constructor\n    Person(const Person &amp;other) : name(other.name) {} // \u5982\u679c\u4e00\u5b9a\u8981\u81ea\u5df1\u5199\n};\n\nint main() {\n    Person p1(\"Trump\");\n    Person p2 = p1; \n\n    cout &lt;&lt; (void*)p1.name.data() &lt;&lt; endl;  //0x1436dffcf0\n    cout &lt;&lt; (void*)p2.name.data() &lt;&lt; endl;  //0x1436dffcd0\n}\n</code></pre> <ul> <li>string \u4e5f\u6709\u81ea\u5df1\u7684 copy constructor\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u81ea\u5df1\u5199\u3002\u5728 <code>Person p2 = p1;</code> \u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8c03\u7528 string \u7684 copy constructor\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u6df1\u62f7\u8d1d\u3002</li> <li>\u4e0d\u9700\u8981\u6790\u6784\u51fd\u6570\u3002</li> <li>\u5982\u679c\u5b57\u6bb5\u91cc\u90fd\u662f class member\uff0c\u90a3\u4e48\u5176\u5b9e\u4e0d\u9700\u8981\u5199 copy constructor\u3002</li> <li>\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u751f\u6210 <code>T()</code> , <code>~T()</code> , <code>T(const T&amp;)</code> \u548c <code>T&amp; operator=(const T&amp;)</code>, \u8981\u4e48\u90fd\u4e0d\u7528\u5199\uff0c\u8981\u4e48\u540e\u9762\u4e09\u4e2a\u90fd\u8981\u5199\u3002\u4e5f\u5c31\u662f Rule of Three\u3002</li> </ul> <pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Person {\n    char *name;\n    void init(const char *s) {\n        name = new char[strlen(s) + 1];\n        strcpy(name, s);\n    }\n    Person(const char *s) {\n        init(s);\n    }\n    Person(const Person &amp;other) {\n        init(other.name);\n    }\n    ~Person() {\n        delete[] name; \n    }\n    /*Person&amp; operator=(const Person &amp;other) {\n        name = other.name;\n    }\n    \u8fd9\u662f\u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u7684\uff0c\u7c7b\u4f3c\u4e8e\u5b9e\u73b0\u4e0a\u8ff0\uff0c\u4f46\u8fd9\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u5bf9\u8c61\u6307\u5411\u540c\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\uff0c\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\u5c31\u4f1a\u53d8\u6210\u60ac\u7a7a\u6307\u9488\u3002\n    \u6240\u4ee5\u5176\u5b9e\u4e0d\u4ec5\u51fa\u9519\u5e76\u4e14\u5185\u5b58\u6cc4\u6f0f\u3002\n    */\n    Person&amp; operator=(const Person &amp;other) {\n        if (this != &amp;other) { // \u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\uff0c\u81ea\u8d4b\u503c\u4f1a\u51fa\u73b0\u95ee\u9898\n            delete[] name;\n            init(other.name);\n        }\n        cout &lt;&lt; \"op=(&amp;)\" &lt;&lt; endl;\n        return *this;\n    }\n};\n\nint main() {\n    Person p1(\"Trump\");\n    Person p2 = p1;\n    p2 = p1;  // \u8fd9\u91cc\u662f assignment \u800c\u4e0d\u662f copy constructor\n\n    cout &lt;&lt; (void*)p1.name &lt;&lt; endl;  \n    cout &lt;&lt; (void*)p2.name &lt;&lt; endl;\n    cout &lt;&lt; p1.name &lt;&lt; endl;\n    cout &lt;&lt; p2.name &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <ul> <li>\u4e5f\u5c31\u662f Rule of Three</li> <li>\u5f53\u5b57\u6bb5\u662f string \u6216\u8005 vector \u7b49\u5bb9\u5668\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u751f\u6210 copy constructor \u548c assignment operator\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u81ea\u5df1\u5199\u3002</li> <li>Default copy ctor: memberwise initialization<ul> <li>Calling the copy ctors for each class-type member (and the base part), recursively</li> <li>Doing a plain assignment for each non-class type member (e.g., int or pointer).</li> </ul> </li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#when-are-copy-ctors-called","title":"When are copy ctors called?","text":"<ul> <li>Initialization</li> </ul> <pre><code>Person baby_a(\"Fred\"); \nPerson baby_b = baby_a; // not an assignment \nPerson baby_c( baby_a ); // not an assignment\n</code></pre> <ul> <li>Call by value(\u76f8\u5f53\u4e8e\u8d4b\u503c\uff0c\u521d\u59cb\u5316\u90a3\u4e2a\u53c2\u6570)</li> </ul> <pre><code>void roster( Person ) {\n    ...\n}\nPerson child( \"Ruby\" ); // create object \nroster( child ); // call function, copy ctor called\n</code></pre> <ul> <li>Function return</li> </ul> <pre><code>Person captain() {\n    Person player(\"George\");\n    return player; \n}\nPerson who = captain();\n</code></pre> <ul> <li>return \u51fa\u53bb\u7684\u65f6\u5019\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e5f\u8c03\u7528\u4e86 copy ctor</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#copies-and-overhead","title":"Copies and overhead","text":"<ul> <li>Compilers can eliminate copies when it's safe!</li> <li>Programmers need to<ul> <li>Program for dumb compilers</li> <li>Be ready to look for optimizations</li> </ul> </li> </ul> <pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Person {\n    string name;\n    Person(const char *s) {\n        cout &lt;&lt; \"Person(const char*)\" &lt;&lt; endl;\n    }\n    Person(const Person &amp;p) {\n        cout &lt;&lt; \"Person(&amp;)\" &lt;&lt; endl;\n        name = p.name;\n    }\n};\n\nPerson foo(Person p) {\n    cout &lt;&lt; \"in foo()\" &lt;&lt; endl;\n    return p;\n}\n\nPerson bar(const char *s) {\n    cout &lt;&lt; \"in bar()\" &lt;&lt; endl;\n    return Person(s);\n}\n\nint main() {\n    Person p1 = foo(\"Trump\");\n    cout &lt;&lt; \"-----------------------------\" &lt;&lt; endl;\n    Person p2 = bar(\"Biden\");\n\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Person(const char*)\nin foo()\nPerson(&amp;)\n-----------------------------\nin bar()\nPerson(const char*)\n</code></pre> <ul> <li>\u53ef\u4ee5\u770b\u5230 <code>foo</code> \u51fd\u6570\u4e2d\u5b58\u5728\u62f7\u8d1d\u6784\u9020\uff0c\u4f46\u662f <code>bar</code> \u51fd\u6570\u4e2d\u4e0d\u5b58\u5728\u62f7\u8d1d\u6784\u9020\u3002</li> <li>\u76f8\u5f53\u4e8e \"Trump\" \u76f4\u63a5\u6784\u9020 <code>p</code> \u5e76\u6ca1\u6709\u62f7\u8d1d</li> <li>\u5bf9\u4e8e <code>bar</code> \u51fd\u6570\u662f\u6784\u9020\u4e00\u4e2a\u4e34\u65f6\u7684 <code>Person</code> \u5bf9\u8c61\uff0c\u7136\u540e\u8fd4\u56de\u3002\u7528\u4e34\u65f6\u5bf9\u8c61\u6784\u9020 <code>p2</code>\uff0c\u4e0d\u5b58\u5728\u62f7\u8d1d\u6784\u9020\uff0c\u76f4\u63a5\u628a\u4e34\u65f6\u5bf9\u8c61\u7684\u53c2\u6570\u62ff\u8fc7\u6765\u76f4\u63a5\u6784\u9020 <code>p2</code> \u5c31\u884c\u4e86\u3002\u8fd9\u5176\u5b9e\u662f\u7531\u7f16\u8bd1\u5668\u76f4\u63a5\u4f18\u5316\u4e86\u7684\u3002</li> <li>\u53ef\u4ee5\u901a\u8fc7 <code>g++ main.cpp -fno-elide-constructors</code> \u6765\u5173\u95ed\u7f16\u8bd1\u5668\u7684\u4f18\u5316\uff0c\u4ece\u800c\u770b\u5230\u62f7\u8d1d\u6784\u9020\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#pay-attention-to-efficiency","title":"Pay attention to efficiency","text":"<ul> <li>Example: using the <code>vector&lt;T&gt;</code> container<ul> <li>Estimate and preserve the memory</li> <li>Avoid extra copies</li> </ul> </li> </ul> <pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Point{\n    Point(int x, int y) : x(x), y(y) {\n        cout &lt;&lt; \"Point(int, int)\" &lt;&lt; endl;\n    }\n    Point(const Point &amp;p) : x(p.x), y(p.y) {\n       cout &lt;&lt; \"copy a Point\" &lt;&lt; endl;\n    }\n    int x, y;\n};\n\nostream&amp; operator&lt;&lt;(ostream &amp;out, const Point &amp;p) {\n    return out &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \", \" &lt;&lt; p.y &lt;&lt; \")\";\n}\n\nint main(){\n    vector&lt;Point&gt; pts;\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl; // capacity \u662f\u5185\u5b58\u653e\u4e86\u591a\u5c11\u4e2a\uff0csize \u662f\u5b9e\u9645\u653e\u4e86\u591a\u5c11\u4e2a\n    pts.push_back(Point(1, 2));\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n    pts.push_back(Point(3, 4));\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n    pts.push_back(Point(5, 6));\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n\n    for(const Point &amp;p : pts){\n        cout &lt;&lt; p &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>0\nPoint(int, int)\ncopy a Point\n1\nPoint(int, int)\ncopy a Point\ncopy a Point\n2\nPoint(int, int)\ncopy a Point\ncopy a Point\ncopy a Point\n4\n(1, 2)\n(3, 4)\n(5, 6)\n</code></pre> <ul> <li>\u6bcf\u6b21 push_back \u90fd\u4f1a\u68c0\u67e5\u5bb9\u91cf\u662f\u5426\u8db3\u591f\uff0c\u4e0d\u591f\u7684\u8bdd\u4f1a\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff0c\u5e76\u628a\u539f\u6765\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u91ca\u653e\u539f\u6765\u7684\u5185\u5b58\u3002</li> </ul> <pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Point{\n    Point(int x, int y) : x(x), y(y) {\n        cout &lt;&lt; \"Point(int, int)\" &lt;&lt; endl;\n    }\n    Point(const Point &amp;p) : x(p.x), y(p.y) {\n       cout &lt;&lt; \"copy a Point\" &lt;&lt; endl;\n    }\n    int x, y;\n};\n\nostream&amp; operator&lt;&lt;(ostream &amp;out, const Point &amp;p) {\n    return out &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \", \" &lt;&lt; p.y &lt;&lt; \")\";\n}\n\nint main(){\n    vector&lt;Point&gt; pts;\n    pts.reserve(3);\n\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n    pts.push_back(Point(1, 2));\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n    pts.push_back(Point(3, 4));\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n    pts.push_back(Point(5, 6));\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n\n    for(const Point &amp;p : pts){\n        cout &lt;&lt; p &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>3\nPoint(int, int)\ncopy a Point\n3\nPoint(int, int)\ncopy a Point\n3\nPoint(int, int)\ncopy a Point\n3\n(1, 2)\n(3, 4)\n(5, 6)\n</code></pre> <ul> <li>\u5f53\u7ed9\u4e86\u4e00\u4e2a <code>reserve</code> \u5927\u5c0f\u540e\uff0c<code>push_back</code> \u4e0d\u4f1a\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u5f53\u5bb9\u91cf\u4e0d\u591f\u65f6\uff0c\u4f1a\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff0c\u5e76\u628a\u539f\u6765\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u91ca\u653e\u539f\u6765\u7684\u5185\u5b58\u3002</li> </ul> <pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Point{\n    Point(int x, int y) : x(x), y(y) {\n        cout &lt;&lt; \"Point(int, int)\" &lt;&lt; endl;\n    }\n    Point(const Point &amp;p) : x(p.x), y(p.y) {\n       cout &lt;&lt; \"copy a Point\" &lt;&lt; endl;\n    }\n    int x, y;\n};\n\nostream&amp; operator&lt;&lt;(ostream &amp;out, const Point &amp;p) {\n    return out &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \", \" &lt;&lt; p.y &lt;&lt; \")\";\n}\n\nint main(){\n    vector&lt;Point&gt; pts;\n    pts.reserve(3);\n\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n    pts.emplace_back(1, 2);\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n    pts.emplace_back(3, 4);\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n    pts.emplace_back(5, 6);\n    cout &lt;&lt; pts.capacity() &lt;&lt; endl;\n\n    for(const Point &amp;p : pts){\n        cout &lt;&lt; p &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>3\nPoint(int, int)\n3\nPoint(int, int)\n3\nPoint(int, int)\n3\n(1, 2)\n(3, 4)\n(5, 6)\n</code></pre> <ul> <li>\u8c03\u7528 <code>emplace_back</code>\uff0c\u5c06\u6570\u636e\u8f6c\u53d1\uff0c\u77e5\u9053\u6784\u9020\u5668\u53ef\u4ee5\u5403\u8fdb\u53bb\u8fd9\u4e9b\u53c2\u6570\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u53c2\u6570\u7ec4\u76f4\u63a5\u4f20\u8fdb\u53bb\uff0c\u5728\u9884\u7559\u7684\u5185\u5b58\u91cc\u76f4\u63a5\u6784\u9020\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u53d1\u751f\u62f7\u8d1d\u548c\u79fb\u52a8\u3002</li> <li>\u5982\u679c\u662f <code>pts.emplace_back(Point(5, 6));</code> \u90a3\u4e48\u8fd8\u662f\u4f1a\u6709 <code>copy a Point</code>\uff0c\u56e0\u4e3a <code>Point(5, 6)</code> \u662f\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u9700\u8981\u62f7\u8d1d\u6784\u9020\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#construction-vs-assignment","title":"Construction vs. assignment","text":"<ul> <li>Every object is constructed once</li> <li>Every object should be destroyed once</li> <li>Once an object is constructed, it can be the target of multiple assignments</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#copy-ctor-guidelines","title":"Copy ctor guidelines","text":"<ol> <li>In most cases, you don\u2019t have to write anything.</li> </ol> <ul> <li>Rule of zero</li> </ul> <ol> <li>Be explicit when necessary, e.g., managing raw pointers.</li> </ol> <ul> <li>create your own copy ctor</li> <li>Rule of three</li> </ul> <ol> <li>If you want to forbid the copy behavior(\u4f8b\u5982\u4ee3\u4ef7\u592a\u5927\uff0c\u4e0d\u60f3copy)</li> </ol> <ul> <li>declare the copy ctor private without body (until C++11)(\u58f0\u660e\u5373\u53ef)</li> <li>define the copy ctor as = delete , e.g., Person(const Person &amp;rhs) = delete; (since C++11)</li> <li>\u4f46\u662f\u7981\u6b62\u4e4b\u540e\uff0c\u4f8b\u5982\u548c\u5bb9\u5668\u914d\u5408\u65f6\u5bb9\u6613\u51fa\u73b0\u5f88\u591a\u95ee\u9898\u3002</li> </ul>"},{"location":"Computer_Science/OOP/Chapter9/#further-reading","title":"Further reading","text":"Effective C++__Item-5   96 KB / 2025-04-18 <p> \u4e0b\u8f7d</p>"},{"location":"Computer_Science/OOP/homework/","title":"Homework","text":"<p> \u7ea6 1404 \u4e2a\u5b57  614 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 15 \u5206\u949f</p> <p>Abstract</p> <p>\u6211\u628a PTA \u4e0a\u5e03\u7f6e\u7684\u9898\u76ee\u6574\u7406\u8bb0\u5f55\u4e00\u4e0b\uff0c\u4fbf\u4e8e\u671f\u672b\u590d\u4e60\u5427\u3002</p>"},{"location":"Computer_Science/OOP/homework/#0015","title":"001.5","text":""},{"location":"Computer_Science/OOP/homework/#question-1","title":"Question 1","text":"<p>Adam is implementing a representation class for complex numbers. In Adam's <code>Complex</code> class design, the real and imaginary parts of a complex number are explicitly stored as the data members. Please help him to finish the job.</p> <p>Note that Adam's implementation is not the only choice for representing complex numbers. But with a suitable set of methods (a.k.a., member functions) made public, other developers could easily write stable code by leveraging the abstraction barrier of the <code>Complex</code> class.</p> <p>Compared with the \"Complex II\" problem, you could notice that the user code is the same, although Eve implements the class differently from Adam. That means once the prototypes of the public methods (i.e., the interface) are stable, you could readily change the underlying implementation details without affecting the users of the class.</p> <pre><code>#include &lt;cmath&gt;\n#include &lt;iostream&gt;\n\n// ------------------------------------------------------------------\n// Adam's class design starts from here.\n//\n\nclass Complex\n{\nprivate:\n  double re, im;\n  Complex() {}\npublic:\n  double real() const { return re; }\n  double imaginary() const { return im; }\n  double magnitude() const { [                              ]; }\n  double angle() const { return atan2(im, re); }\npublic:\n  static Complex from_cartesian(double real, double imag)\n  {\n    Complex c;\n    c.re = real;\n    c.im = imag;\n    return c;\n  }\n  static Complex from_polar(double magnitude, double angle)\n  {\n    Complex c;\n    c.re = [                                               ];\n    c.im = magnitude * sin(angle);\n    return c;\n  }\n};\n\n//\n// Adam's class design ends here.\n// ------------------------------------------------------------------\n// The following code is written by the user of the Complex class.\n//\n\nComplex add_complex(const Complex&amp; c1, const Complex&amp; c2)\n{\n  double real = c1.real() + c2.real();\n  double imag = c1.imaginary() + c2.imaginary();\n  return Complex::from_cartesian(real, imag);\n}\n\nComplex multiply_complex(const Complex&amp; c1, const Complex&amp; c2)\n{\n  double magnitude = c1.magnitude() * c2.magnitude();\n  double angle = c1.angle() + c2.angle();\n  return Complex::from_polar(magnitude, angle);\n}\n\nvoid print_complex(const Complex&amp; c)\n{\n  std::cout &lt;&lt; c.real() &lt;&lt; \" + \" &lt;&lt; c.imaginary() &lt;&lt; \"i\" &lt;&lt; std::endl;\n}\n\nint main()\n{ \n  Complex c1 = Complex::from_cartesian(3, 4);\n  Complex c2 = Complex::from_cartesian(5, 12);\n\n  print_complex(add_complex(c1, c2));\n  print_complex(multiply_complex(c1, c2));\n}\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#answer","title":"Answer","text":"<pre><code>return std::sqrt(re*re+im*im)\nmagnitude * cos(angle)\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#question-2","title":"Question 2","text":"<p>Eve is implementing a representation class for complex numbers. In Eve's <code>Complex</code> class design, the magnitude and angle parts of a complex number (in the polar coordinate system) are explicitly stored as the data members. Please help her to finish the job.</p> <p>Note that Eve's implementation is not the only choice for representing complex numbers. But with a suitable set of methods (a.k.a., member functions) made public, other developers could easily write stable code by leveraging the abstraction barrier of the <code>Complex</code> class.</p> <p>Compared with the \"Complex I\" problem, you could notice that the user code is the same, although Adam implements the class differently from Eve. That means once the prototypes of the public methods (i.e., the interface) are stable, you could readily change the underlying implementation details without affecting the users of the class.</p> <pre><code>#include &lt;cmath&gt;\n#include &lt;iostream&gt;\n\n// ------------------------------------------------------------------\n// Eve's class design starts from here.\n//\n\nclass Complex\n{\nprivate:\n  double mag, ang;\n  Complex() {}\npublic:\n  double real() const { [                                     ]; }\n  double imaginary() const { return mag * sin(ang); }\n  double magnitude() const { return mag; }\n  double angle() const { return ang; }\npublic:\n  static Complex from_cartesian(double real, double imag)\n  {\n    Complex c;\n    c.mag = [                                                   ];\n    c.ang = atan2(imag, real);\n    return c;\n  }\n  static Complex from_polar(double magnitude, double angle)\n  {\n    Complex c;\n    c.mag = magnitude;\n    c.ang = angle;\n    return c;\n  }\n};\n\n//\n// Eve's class design ends here.\n// ------------------------------------------------------------------\n// The following code is written by the user of the Complex class.\n//\n\nComplex add_complex(const Complex&amp; c1, const Complex&amp; c2)\n{\n  double real = c1.real() + c2.real();\n  double imag = c1.imaginary() + c2.imaginary();\n  return Complex::from_cartesian(real, imag);\n}\n\nComplex multiply_complex(const Complex&amp; c1, const Complex&amp; c2)\n{\n  double magnitude = c1.magnitude() * c2.magnitude();\n  double angle = c1.angle() + c2.angle();\n  return Complex::from_polar(magnitude, angle);\n}\n\nvoid print_complex(const Complex&amp; c)\n{\n  std::cout &lt;&lt; c.real() &lt;&lt; \" + \" &lt;&lt; c.imaginary() &lt;&lt; \"i\" &lt;&lt; std::endl;\n}\n\nint main()\n{ \n  Complex c1 = Complex::from_cartesian(3, 4);\n  Complex c2 = Complex::from_cartesian(5, 12);\n\n  print_complex(add_complex(c1, c2));\n  print_complex(multiply_complex(c1, c2));\n}\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#answer_1","title":"Answer","text":"<pre><code>return mag * cos(ang)\nstd::sqrt(real * real + imag * imag)\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#0025","title":"002.5","text":""},{"location":"Computer_Science/OOP/homework/#question-1_1","title":"Question 1","text":"<p>How to create a dynamic array of 20 pointers to integers using the new operator in C++?</p> <p>A. <code>int *arr = new int *[20];</code></p> <p>B. <code>int *arr = new int [20];</code></p> <p>C. <code>int **arr = new int *[20];</code></p> <p>D. Impossible</p>"},{"location":"Computer_Science/OOP/homework/#answer_2","title":"Answer","text":"<p>\u6b63\u786e\u7b54\u6848\u662f\uff1a</p> <p>C. <code>int **arr = new int *[20];</code></p> <p>\u89e3\u91ca\uff1a</p> <ul> <li>\u8981\u521b\u5efa\u4e00\u4e2a\u5305\u542b 20 \u4e2a\u6307\u5411\u6574\u6570\u7684\u6307\u9488\u7684\u52a8\u6001\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5206\u914d\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff08<code>int*</code>\uff09\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff08<code>int</code>\uff09\u3002</li> <li><code>int **arr</code> \u662f\u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff0c\u9002\u5408\u7528\u6765\u5b58\u50a8\u4e00\u4e2a\u6307\u5411\u6574\u6570\u6307\u9488\u6570\u7ec4\u7684\u5730\u5740\u3002</li> <li><code>new int *[20]</code> \u5206\u914d\u4e86\u4e00\u4e2a\u5305\u542b 20 \u4e2a\u6307\u5411\u6574\u6570\u7684\u6307\u9488\u7684\u6570\u7ec4\u3002</li> </ul>"},{"location":"Computer_Science/OOP/homework/#question-2_1","title":"Question 2","text":"<p>Which of the following is TRUE about <code>new</code> when compared with <code>malloc</code>?</p> <ol> <li><code>new</code> is an operator, while <code>malloc</code> is a function.</li> <li><code>new</code> calls an appropriate constructor for object allocation, while <code>malloc</code> doesn't.</li> <li><code>new</code> returns a pointer with the appropriate type, while <code>malloc</code> only returns a <code>void *</code> pointer that needs to be typecasted to the appropriate type.</li> </ol> <p>A. 1 and 2</p> <p>B. 2 and 3</p> <p>C. 1 and 3</p> <p>D. All 1, 2 and 3</p>"},{"location":"Computer_Science/OOP/homework/#answer_3","title":"Answer","text":"<p>\u6b63\u786e\u7b54\u6848\u662f\uff1a</p> <p>D. All 1, 2 and 3</p> <p>\u89e3\u91ca\uff1a</p> <ol> <li><code>new</code> \u662f\u8fd0\u7b97\u7b26\uff0c\u800c <code>malloc</code> \u662f\u51fd\u6570\u3002 </li> </ol> <ul> <li>\u5728 C++ \u4e2d\uff0c<code>new</code> \u662f\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u7528\u4e8e\u52a8\u6001\u5206\u914d\u5185\u5b58\uff0c\u800c <code>malloc</code> \u662f C \u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\u3002</li> </ul> <ol> <li><code>new</code> \u4f1a\u8c03\u7528\u9002\u5f53\u7684\u6784\u9020\u51fd\u6570\u6765\u5206\u914d\u5bf9\u8c61\uff0c\u800c <code>malloc</code> \u4e0d\u4f1a\u3002 </li> </ol> <ul> <li>\u5f53\u4f7f\u7528 <code>new</code> \u5206\u914d\u5bf9\u8c61\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u8c03\u7528\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u3002\u800c <code>malloc</code> \u53ea\u662f\u5206\u914d\u4e00\u5757\u5185\u5b58\uff0c\u4e0d\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002</li> </ul> <ol> <li><code>new</code> \u8fd4\u56de\u4e00\u4e2a\u9002\u5f53\u7c7b\u578b\u7684\u6307\u9488\uff0c\u800c <code>malloc</code> \u53ea\u8fd4\u56de\u4e00\u4e2a <code>void *</code> \u6307\u9488\uff0c\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u4e3a\u9002\u5f53\u7c7b\u578b\u3002 </li> </ol> <ul> <li><code>new</code> \u76f4\u63a5\u8fd4\u56de\u4e0e\u5206\u914d\u7c7b\u578b\u5339\u914d\u7684\u6307\u9488\uff08\u4f8b\u5982 <code>int*</code>\u3001<code>MyClass*</code> \u7b49\uff09\uff0c\u800c <code>malloc</code> \u8fd4\u56de\u7684\u662f <code>void*</code>\uff0c\u9700\u8981\u624b\u52a8\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002</li> </ul>"},{"location":"Computer_Science/OOP/homework/#0035","title":"003.5","text":""},{"location":"Computer_Science/OOP/homework/#question","title":"Question","text":"<p>Please show the output of the following program.</p> <pre><code>#include &lt;iostream&gt;\n\nstruct X {\n    X() {\n        std::cout &lt;&lt; \"X::X()\" &lt;&lt; std::endl;\n    }\n    ~X() {\n        std::cout &lt;&lt; \"X::~X()\" &lt;&lt; std::endl;\n    }\n};\n\nstruct Y {\n    Y() {\n        std::cout &lt;&lt; \"Y::Y()\" &lt;&lt; std::endl;\n    }\n    ~Y() {\n        std::cout &lt;&lt; \"Y::~Y()\" &lt;&lt; std::endl;\n    }\n};\n\nstruct Parent {\n    Parent() {\n        std::cout &lt;&lt; \"Parent::Parent()\" &lt;&lt; std::endl;\n    }\n    ~Parent() {\n        std::cout &lt;&lt; \"Parent::~Parent()\" &lt;&lt; std::endl;\n    }\n    X x;\n};\n\nstruct Child : public Parent {\n    Child() {\n        std::cout &lt;&lt; \"Child::Child()\" &lt;&lt; std::endl;\n    }\n    ~Child() {\n        std::cout &lt;&lt; \"Child::~Child()\" &lt;&lt; std::endl;\n    }\n    Y y;\n};\n\nint main() {\n    Child c;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#answer_4","title":"Answer","text":"<pre><code>Line 1: X::X()\nLine 2: Parent::Parent()\nLine 3: Y::Y()\nLine 4: Child::Child()\nLine 5: Child::~Child()\nLine 6: Y::~Y()\nLine 7: Parent::~Parent()\nLine 8: X::~X()\n</code></pre> <p>\u89e3\u91ca:</p> <p>\u6784\u9020\u987a\u5e8f\uff08\u4ece\u5185\u5230\u5916\uff0c\u81ea\u4e0b\u800c\u4e0a\uff09</p> <ol> <li>\u57fa\u7c7b\u7684\u6210\u5458\u6784\u9020,<code>Parent</code> \u662f\u57fa\u7c7b\uff0c\u5176\u6210\u5458\u53d8\u91cf <code>X x</code> \u4f1a\u4f18\u5148\u6784\u9020\uff0c\u8c03\u7528 <code>X::X()</code>\u3002</li> <li>\u57fa\u7c7b\u6784\u9020\u51fd\u6570,\u57fa\u7c7b <code>Parent</code> \u7684\u6784\u9020\u51fd\u6570\u4f53 <code>Parent::Parent()</code> \u6267\u884c\u3002</li> <li>\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u6784\u9020, <code>Child</code> \u662f\u6d3e\u751f\u7c7b\uff0c\u5176\u6210\u5458\u53d8\u91cf <code>Y y</code> \u968f\u540e\u6784\u9020\uff0c\u8c03\u7528 <code>Y::Y()</code>\u3002</li> <li>\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570, \u6700\u540e\u6267\u884c\u6d3e\u751f\u7c7b <code>Child</code> \u7684\u6784\u9020\u51fd\u6570\u4f53 <code>Child::Child()</code>\u3002</li> </ol> <p>\u6790\u6784\u987a\u5e8f\uff08\u4e0e\u6784\u9020\u987a\u5e8f\u5b8c\u5168\u76f8\u53cd\uff0c\u4ece\u5916\u5230\u5185\uff0c\u81ea\u4e0a\u800c\u4e0b\uff09\u3002</p> <p>\u6838\u5fc3\u539f\u7406\uff1a</p> <p>\u786e\u4fdd\u6d3e\u751f\u7c7b\u6784\u9020\u65f6\u57fa\u7c7b\u5df2\u5b8c\u6574\u521d\u59cb\u5316\uff0c\u6790\u6784\u65f6\u6d3e\u751f\u7c7b\u8d44\u6e90\u5148\u91ca\u653e\uff0c\u907f\u514d\u4f9d\u8d56\u57fa\u7c7b\u5df2\u9500\u6bc1\u7684\u8d44\u6e90\u3002</p>"},{"location":"Computer_Science/OOP/homework/#0045","title":"004.5","text":""},{"location":"Computer_Science/OOP/homework/#question_1","title":"Question","text":"<p>Please show the output of the following program.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A\n{\npublic:\n  A(int i) : mi(i) {}\n  A(const A&amp; rhs) : mi(rhs.mi)\n  {\n    cout &lt;&lt; \"A::A(&amp;)\" &lt;&lt; endl;\n  }\n  A&amp; operator=(const A&amp;rhs)\n  {\n    mi = rhs.mi;\n    cout &lt;&lt; \"A::operator=()\" &lt;&lt; endl;\n    return *this;\n  }\n  virtual void f()\n  {\n    cout &lt;&lt; \"A::f(), \" &lt;&lt; mi &lt;&lt; endl;\n  }\nprotected:\n  int mi;\n};\n\nclass B : public A\n{\npublic:\n  B(int i, int j) : A(i), mj(j) {}\n  void f() override\n  {\n    cout &lt;&lt; \"B::f(), \" &lt;&lt; mi &lt;&lt; \", \" &lt;&lt; mj &lt;&lt; endl;\n  }\nprivate:\n  int mj;\n};\n\nint main()\n{\n  A a1(1);\n  B b(3,4);\n\n  A&amp; ra = b;\n  ra.f();\n  ra = a1;\n  ra.f();\n\n  A a2 = b;\n  a2.f();\n}\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#answer_5","title":"Answer","text":"<pre><code>B::f(), 3, 4\nA::operator=()\nB::f(), 1, 4\nA::A(&amp;)\nA::f(), 1\n</code></pre> <p>\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a</p> <pre><code>B::f(), 3, 4\nA::operator=()\nB::f(), 1, 4\nA::A(&amp;)\nA::f(), 1\n</code></pre> <ol> <li> <p><code>ra.f()</code> \u7b2c\u4e00\u6b21\u8c03\u7528\uff1a    - <code>ra</code> \u662f <code>A</code> \u7684\u5f15\u7528\uff0c\u4f46\u6307\u5411 <code>B</code> \u7c7b\u5bf9\u8c61 <code>b</code>\u3002    - \u7531\u4e8e <code>f()</code> \u662f\u865a\u51fd\u6570\uff0c\u89e6\u53d1\u591a\u6001\uff0c\u8c03\u7528 <code>B::f()</code>\u3002    - \u8f93\u51fa\uff1a<code>B::f(), 3, 4</code>\uff08<code>mi=3</code> \u7ee7\u627f\u81ea <code>A</code>\uff0c<code>mj=4</code> \u662f <code>B</code> \u7684\u6210\u5458\uff09\u3002</p> </li> <li> <p><code>ra = a1</code> \u8d4b\u503c\u64cd\u4f5c\uff1a    - <code>ra</code> \u5b9e\u9645\u6307\u5411 <code>b</code> \u7684 <code>A</code> \u90e8\u5206\u3002    - \u8c03\u7528 <code>A</code> \u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u5c06 <code>a1</code> \u7684 <code>mi=1</code> \u8d4b\u503c\u7ed9 <code>b</code> \u7684 <code>A</code> \u90e8\u5206\u3002    - \u8f93\u51fa\uff1a<code>A::operator=()</code>\u3002</p> </li> <li> <p><code>ra.f()</code> \u7b2c\u4e8c\u6b21\u8c03\u7528\uff1a    - <code>ra</code> \u4ecd\u6307\u5411 <code>b</code>\uff08\u5b9e\u9645\u7c7b\u578b\u662f <code>B</code>\uff09\uff0c\u865a\u51fd\u6570\u8c03\u7528\u4ecd\u4e3a <code>B::f()</code>\u3002    - \u6b64\u65f6 <code>b</code> \u7684 <code>mi</code> \u5df2\u88ab\u4fee\u6539\u4e3a 1\uff0c<code>mj</code> \u4fdd\u6301 4\u3002    - \u8f93\u51fa\uff1a<code>B::f(), 1, 4</code>\u3002</p> </li> <li> <p><code>A a2 = b</code> \u5bf9\u8c61\u521d\u59cb\u5316\uff1a    - \u7528 <code>B</code> \u7c7b\u5bf9\u8c61 <code>b</code> \u521d\u59cb\u5316 <code>A</code> \u7c7b\u5bf9\u8c61 <code>a2</code>\uff0c\u53d1\u751f\u5bf9\u8c61\u5207\u7247\u3002    - \u8c03\u7528 <code>A</code> \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u53ea\u590d\u5236 <code>B</code> \u90e8\u5206\u7684 <code>mi=1</code>\uff09\u3002    - \u8f93\u51fa\uff1a<code>A::A(&amp;)</code>\u3002</p> </li> <li> <p><code>a2.f()</code> \u8c03\u7528\uff1a    - <code>a2</code> \u662f\u7eaf <code>A</code> \u7c7b\u5bf9\u8c61\uff0c\u8c03\u7528 <code>A::f()</code>\u3002    - \u8f93\u51fa\uff1a<code>A::f(), 1</code>\uff08<code>mi=1</code> \u6765\u81ea\u62f7\u8d1d\u6784\u9020\uff09\u3002</p> </li> </ol> <p>\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26</p> <pre><code>A&amp; operator=(const A&amp; rhs)\n</code></pre> <ul> <li>\u4f5c\u7528\uff1a\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26 <code>=</code>\uff0c\u7528\u4e8e\u5c06\u4e00\u4e2a <code>A</code> \u7c7b\u5bf9\u8c61\u7684\u503c\u8d4b\u7ed9\u53e6\u4e00\u4e2a <code>A</code> \u7c7b\u5bf9\u8c61\u3002</li> <li>\u53c2\u6570\uff1a</li> <li><code>const A&amp; rhs</code>\uff1a\u4e00\u4e2a\u5e38\u91cf\u5f15\u7528\uff0c\u8868\u793a\u8d4b\u503c\u64cd\u4f5c\u53f3\u4fa7\uff08Right-Hand Side\uff09\u7684\u5bf9\u8c61\u3002</li> <li>\u8fd4\u56de\u503c\uff1a</li> <li>\u8fd4\u56de\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528\uff08<code>A&amp;</code>\uff09\uff0c\u652f\u6301\u94fe\u5f0f\u8d4b\u503c\uff08\u5982 <code>a = b = c</code>\uff09\u3002</li> </ul> <pre><code>{\n  mi = rhs.mi;          // \u5c06\u53f3\u4fa7\u5bf9\u8c61\u7684 mi \u8d4b\u503c\u7ed9\u5f53\u524d\u5bf9\u8c61\u7684 mi\n  cout &lt;&lt; \"A::operator=()\" &lt;&lt; endl; // \u8f93\u51fa\u63d0\u793a\u4fe1\u606f\n  return *this;         // \u8fd4\u56de\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528\n}\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#0055","title":"005.5","text":""},{"location":"Computer_Science/OOP/homework/#question_2","title":"Question","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass vec3 {\npublic:\n    vec3(int x=0, int y=0, int z=0){\n        v[0] = x;\n        v[1] = y;\n        v[2] = z;\n    }\n    int operator[]         \n    {\n        return v[index];\n    }\n    vec3&amp; operator+=(const vec3&amp; rhs){\n    for (int i = 0; i &lt; 3; ++i)\n                    ;\n                    ;\n    }\nprivate:\n    int v[3];\n};\n\nvec3 operator+(const vec3&amp; v1, const vec3&amp; v2)\n{\n    return                              ;\n};\n\n        operator&lt;&lt;(ostream&amp; out, const vec3&amp; v)\n{\n    out &lt;&lt; '(' &lt;&lt; v[0] &lt;&lt; ' ' &lt;&lt; v[1] &lt;&lt; ' ' &lt;&lt; v[2] &lt;&lt; ')';\n              ;\n}\n\nint main()\n{\n    vec3 v1(1,2,3), v2(4,5,6);\n    vec3 v = v1 + v2;\n    v += v2;\n    cout &lt;&lt; v &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#answer_6","title":"Answer","text":"<pre><code>(int index) const\nv[i] += rhs.v[i]\nreturn *this\nvec3(v1[0]+v2[0], v1[1]+v2[1], v1[2]+v2[2])\nostream&amp;\nreturn out\n</code></pre> <ol> <li><code>operator[]</code> \u91cd\u8f7d: \u6dfb\u52a0 <code>int index</code> \u53c2\u6570\u548c <code>const</code> \u4fee\u9970\u7b26\uff0c\u4f7f\u5176\u80fd\u6b63\u786e\u8bbf\u95ee\u5143\u7d20\u5e76\u652f\u6301\u5e38\u91cf\u5bf9\u8c61\u3002</li> <li><code>operator+=</code> \u91cd\u8f7d: \u5728\u5faa\u73af\u4e2d\u5c06\u6bcf\u4e2a\u5206\u91cf\u4e0e\u53f3\u64cd\u4f5c\u6570\u5bf9\u5e94\u5206\u91cf\u76f8\u52a0\uff0c\u5e76\u8fd4\u56de <code>*this</code> \u4ee5\u5b9e\u73b0\u94fe\u5f0f\u64cd\u4f5c\u3002</li> <li><code>operator+</code> \u91cd\u8f7d: \u901a\u8fc7 <code>vec3</code> \u6784\u9020\u51fd\u6570\u76f4\u63a5\u521b\u5efa\u65b0\u5bf9\u8c61\uff0c\u5176\u5206\u91cf\u4e3a\u4e24\u4e2a\u64cd\u4f5c\u6570\u5bf9\u5e94\u5206\u91cf\u4e4b\u548c\u3002</li> <li><code>operator&lt;&lt;</code> \u91cd\u8f7d: \u6dfb\u52a0 <code>ostream&amp;</code> \u8fd4\u56de\u7c7b\u578b\uff0c\u5e76\u5728\u8f93\u51fa\u5b8c\u6210\u540e\u8fd4\u56de\u6d41\u5bf9\u8c61\u4ee5\u652f\u6301\u8fde\u7eed\u8f93\u51fa\u3002</li> </ol>"},{"location":"Computer_Science/OOP/homework/#0065","title":"006.5","text":""},{"location":"Computer_Science/OOP/homework/#question_3","title":"Question","text":"<p>The function template <code>min_elem()</code> finds the smallest element in the range <code>[first, last)</code> and returns the iterator to the smallest element. The way how smallest is understood can be customized.</p> <pre><code>#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n#include &lt;string&gt;\n#include &lt;list&gt;\n#include &lt;vector&gt;\n\ntemplate&lt;class ForwardIt, class Compare&gt;\nForwardIt min_elem(ForwardIt first, ForwardIt last,                 comp)\n{\n  if (first == last)\n    return                      ;\n\n  ForwardIt smallest = first++;\n  for (;                   ; ++first) {\n    if (comp(*first, *smallest)) {\n      smallest = first;\n    }\n  }\n  return                        ;\n}\n\ntemplate&lt;class ForwardIt&gt;\nForwardIt min_elem(ForwardIt first, ForwardIt last)\n{\n  return min_elem(first, last, std::less&lt;                     std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;());\n}\n\nstruct Student {\n  int id;\n  std::string name;\n  bool                                 (const Student&amp; s2) const {\n    return id &lt; s2.id;\n  }\n};\n\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Student&amp; s)\n{\n  out &lt;&lt; s.name &lt;&lt; s.id;\n  return out;\n}\n\nint main()\n{\n  std::vector&lt;int&gt; v = { 3, 1, 4, 2, 5, 9 };\n  std::cout &lt;&lt; \"min element is: \" &lt;&lt; *min_elem(std::begin(v), std::end(v)) &lt;&lt; std::endl;\n\n  std::list&lt;double&gt; l = { 3.1, 1.2, 4.3, 2.4, 5.5, 9.7 };\n  std::cout &lt;&lt; \"min element is: \" &lt;&lt; *min_elem(std::begin(l), std::end(l), std::greater&lt;double&gt;()) &lt;&lt; std::endl;\n\n  Student s[] = { {30, \"Curry\"}, {23, \"Lebron\"}, {35, \"Durant\"} };\n  std::cout &lt;&lt; \"min element is: \" &lt;&lt; *min_elem(std::begin(s), std::end(s)) &lt;&lt; std::endl;\n}\n</code></pre> <p>The above program outputs:</p> <pre><code>min element is: 1\nmin element is: 9.7\nmin element is: Lebron23\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#answer_7","title":"Answer","text":"<pre><code>Compare\nlast\nfirst != last\nsmallest\ntypename\noperator&lt;\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#0075","title":"007.5","text":""},{"location":"Computer_Science/OOP/homework/#question_4","title":"Question","text":"<p>The struct Buffer is a simple container that encapsulates fixed-size arrays. Please fill in the blanks to finish its design.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;\n\nclass BufferIndexError : public\u00a0\n\n{\n\nprivate:\n\n\u00a0 int index;\n\npublic:\n\n\u00a0 BufferIndexError(int idx) : std::out_of_range(\"\"), index(idx) {}\n\n\u00a0 int getIndex() const { return index; }\n\n};\n\n\ntemplate &lt;typename T, int N&gt;\n\nstruct Buffer\n\n{\n\n\u00a0 int size() const\n\n\u00a0 {\n\n\u00a0 \u00a0                 ;\n\n\u00a0 }\n\n\u00a0 bool empty() const\n\n\u00a0 {\n\n\u00a0 \u00a0                   ;\n\n\u00a0 }\n\n\u00a0 const T&amp; operator[](int i) const\n\n\u00a0 {\n\n\u00a0 \u00a0 if (             )\n\n\u00a0 \u00a0 \u00a0 return elems[i];\n\n\u00a0 \u00a0 \u00a0                BufferIndexError(i);\n\n\u00a0 }\n\n\u00a0 const T&amp; front() const\n\n\u00a0 {\n\n\u00a0 \u00a0                   ;\n\n\u00a0 }\n\n\u00a0 const T&amp; back() const\n\n\u00a0 {\n\n\u00a0 \u00a0                   ;\n\n\u00a0 }\n\n\n\n\u00a0 \u00a0            elems[             ];\n\n};\n\n\n\n\n\n\u00a0             operator&lt;&lt;(std::ostream &amp;out, const Buffer&lt;T, N&gt; &amp;buf)\n\n{\n\n\u00a0 for (int i = 0; i &lt; N; ++i)\n\n\u00a0 \u00a0               ;\n\n\u00a0 return out;\n\n}\n\n\n\nint main()\n\n{\n\n\u00a0 Buffer&lt;int, 4&gt; numbers = {1, 3, 1, 4};\n\n\u00a0 Buffer&lt;int, 0&gt; no_numbers;\n\n\u00a0 std::cout &lt;&lt; \"numbers.empty(): \" &lt;&lt; numbers.empty() &lt;&lt; '\\n';\n\n\u00a0 std::cout &lt;&lt; \"no_numbers.empty(): \" &lt;&lt; no_numbers.empty() &lt;&lt; '\\n';\n\n\n\n\u00a0 Buffer&lt;char, 16&gt; letters = {\n\n\u00a0 \u00a0 'D','o',' ','n','o','t',' ','a','n','s','w','e','r','!','!','!'\n\n\u00a0 };\n\n\u00a0 if (!letters.empty())\n\n\u00a0 {\n\n\u00a0 \u00a0 std::cout &lt;&lt; \"The first character is: \" &lt;&lt; letters.front() &lt;&lt; '\\n';\n\n\u00a0 \u00a0 std::cout &lt;&lt; \"The last character is: \" &lt;&lt; letters.back() &lt;&lt; '\\n';\n\n\u00a0 }\n\n\u00a0 std::cout &lt;&lt; letters &lt;&lt; '\\n';\n\n\n\n\u00a0\u00a0\n\n\u00a0                 {\n\n\u00a0 \u00a0 int k = 0;\n\n\u00a0 \u00a0 while (true)\n\n\u00a0 \u00a0 \u00a0 std::cout &lt;&lt; letters[k++];\n\n\u00a0 }\n\n\u00a0\u00a0\n\n\u00a0 {\n\n\u00a0 \u00a0 std::cout &lt;&lt; \"\\nBuffer index is out of range: \" &lt;&lt; ex.() &lt;&lt; std::endl;\n\n\u00a0 }\n\n}\n</code></pre> <p>The above program outputs:</p> <pre><code>numbers.empty(): 0\nno_numbers.empty(): 1\nThe first character is: D\nThe last character is: !\nDo not answer!!!\nDo not answer!!!\nBuffer index is out of range: 16\n</code></pre>"},{"location":"Computer_Science/OOP/homework/#answer_8","title":"Answer","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;stdexcept&gt; // \u9700\u8981\u5305\u542b &lt;stdexcept&gt; \u4ee5\u4f7f\u7528 std::out_of_range\n\n// BufferIndexError \u7c7b\u5b9a\u4e49\uff0c\u7ee7\u627f\u81ea std::out_of_range\nclass BufferIndexError : public std::out_of_range // \u586b\u51451: \u57fa\u7c7b\n{\nprivate:\n    int index;\npublic:\n    // \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u57fa\u7c7b\u548c\u6210\u5458\u53d8\u91cf\n    BufferIndexError(int idx) : std::out_of_range(\"Buffer index out of range\"), index(idx) {}\n    // \u83b7\u53d6\u9519\u8bef\u7d22\u5f15\u7684\u65b9\u6cd5\n    int getIndex() const { return index; }\n};\n\n// Buffer \u7ed3\u6784\u4f53\u6a21\u677f\u5b9a\u4e49\ntemplate &lt;typename T, int N&gt;\nstruct Buffer\n{\n    // \u83b7\u53d6\u7f13\u51b2\u533a\u5927\u5c0f\u7684\u65b9\u6cd5\n    int size() const\n    {\n        return N; // \u586b\u51452: \u8fd4\u56de\u6a21\u677f\u53c2\u6570 N\n    }\n\n    // \u5224\u65ad\u7f13\u51b2\u533a\u662f\u5426\u4e3a\u7a7a\u7684\u65b9\u6cd5\n    bool empty() const\n    {\n        return N == 0; // \u586b\u51453: \u5f53 N \u4e3a 0 \u65f6\u4e3a\u7a7a\n    }\n\n    // \u91cd\u8f7d\u4e0b\u6807\u8fd0\u7b97\u7b26 (const \u7248\u672c)\n    const T&amp; operator[](int i) const\n    {\n      // \u68c0\u67e5\u7d22\u5f15\u662f\u5426\u5728\u6709\u6548\u8303\u56f4\u5185\n      if (i &gt;= 0 &amp;&amp; i &lt; N) // \u586b\u51454: \u7d22\u5f15\u6709\u6548\u6761\u4ef6\n          return elems[i];\n      // \u5982\u679c\u7d22\u5f15\u65e0\u6548\uff0c\u5219\u629b\u51fa\u81ea\u5b9a\u4e49\u5f02\u5e38\n      throw BufferIndexError(i); // \u4fee\u6b63/\u586b\u51455: \u629b\u51fa\u5f02\u5e38\n    }\n\n    // \u83b7\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528 (const \u7248\u672c)\n    const T&amp; front() const\n    {\n        // \u6ce8\u610f\uff1a\u66f4\u5065\u58ee\u7684\u5b9e\u73b0\u4f1a\u68c0\u67e5 N &gt; 0\n        // if (empty()) throw std::out_of_range(\"front() called on empty buffer\");\n        return elems[0]; // \u586b\u51456: \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\n    }\n\n    // \u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528 (const \u7248\u672c)\n    const T&amp; back() const\n    {\n        // \u6ce8\u610f\uff1a\u66f4\u5065\u58ee\u7684\u5b9e\u73b0\u4f1a\u68c0\u67e5 N &gt; 0\n        // if (empty()) throw std::out_of_range(\"back() called on empty buffer\");\n        return elems[N-1]; // \u586b\u51457: \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n    }\n\n    T elems[N]; // \u586b\u51458: \u58f0\u660e\u5b9a\u957f\u6570\u7ec4\u6210\u5458\uff0c\u7c7b\u578b\u4e3a T\uff0c\u5927\u5c0f\u4e3a N\n};\n\n// \u91cd\u8f7d\u8f93\u51fa\u6d41\u8fd0\u7b97\u7b26\uff0c\u7528\u4e8e\u6253\u5370 Buffer \u5185\u5bb9\ntemplate &lt;typename T, int N&gt; // \u586b\u51459: operator&lt;&lt; \u7684\u6a21\u677f\u58f0\u660e\u548c\u8fd4\u56de\u7c7b\u578b\nstd::ostream&amp; operator&lt;&lt;(std::ostream &amp;out, const Buffer&lt;T, N&gt; &amp;buf)\n{\n    for (int i = 0; i &lt; N; ++i) // \u4f7f\u7528 N \u6216 buf.size()\n        out &lt;&lt; buf[i]; // \u586b\u514510: \u8f93\u51fa\u5f53\u524d\u7d22\u5f15\u7684\u5143\u7d20\n    return out; // \u586b\u514511: \u8fd4\u56de\u8f93\u51fa\u6d41\u5bf9\u8c61\n}\n\nint main()\n{\n    Buffer&lt;int, 4&gt; numbers = {1, 3, 1, 4};\n    Buffer&lt;int, 0&gt; no_numbers;\n    std::cout &lt;&lt; \"numbers.empty(): \" &lt;&lt; numbers.empty() &lt;&lt; '\\n';\n    std::cout &lt;&lt; \"no_numbers.empty(): \" &lt;&lt; no_numbers.empty() &lt;&lt; '\\n';\n\n    Buffer&lt;char, 16&gt; letters = {\n        'D','o',' ','n','o','t',' ','a','n','s','w','e','r','!','!','!'\n    };\n    if (!letters.empty())\n    {\n        std::cout &lt;&lt; \"The first character is: \" &lt;&lt; letters.front() &lt;&lt; '\\n';\n        std::cout &lt;&lt; \"The last character is: \" &lt;&lt; letters.back() &lt;&lt; '\\n';\n    }\n    std::cout &lt;&lt; letters &lt;&lt; '\\n';\n\n    try // \u586b\u514511: try \u5757\u5f00\u59cb\n    {\n        int k = 0;\n        while (true) // \u8fd9\u4e2a\u5faa\u73af\u4f1a\u65e0\u9650\u6267\u884c\uff0c\u76f4\u5230 letters[k++] \u629b\u51fa\u5f02\u5e38\n            std::cout &lt;&lt; letters[k++];\n    } catch (const BufferIndexError&amp; ex) // \u586b\u514512: catch \u5757\uff0c\u6355\u83b7 BufferIndexError \u7c7b\u578b\u7684\u5f02\u5e38\n    {\n        // \u8f93\u51fa\u9519\u8bef\u4fe1\u606f\uff0c\u5305\u62ec\u8d85\u51fa\u8303\u56f4\u7684\u7d22\u5f15\u503c\n        std::cout &lt;&lt; \"\\nBuffer index is out of range: \" &lt;&lt; ex.getIndex() &lt;&lt; std::endl; // \u586b\u514513: \u8c03\u7528 getIndex() \u83b7\u53d6\u7d22\u5f15\n    }\n    return 0; // \u826f\u597d\u7684 main \u51fd\u6570\u5e94\u8be5\u6709\u8fd4\u56de\u503c\n}\n</code></pre>"},{"location":"Computer_Science/OOP/test_from_wk/","title":"WK's \u8bfe\u524d\u5c0f\u6d4b","text":"<p> \u7ea6 7150 \u4e2a\u5b57  49 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 36 \u5206\u949f</p> <p>Abstract</p> <p>wk \u8001\u5e08\u73ed\u4f3c\u4e4e\u662f\u6709\u8bfe\u524d\u6d4b\u8bd5\u7684\uff0c\u6211\u5728\u667a\u4e91\u4e0a\u6252\u4e0b\u6765\uff0c\u6574\u7406\u8bb0\u5f55\u4e00\u4e0b\uff0c\u4fbf\u4e8e\u671f\u672b\u590d\u4e60\u5427\u3002</p>"},{"location":"Computer_Science/OOP/test_from_wk/#w2","title":"W2 \u8bfe\u524d\u5c0f\u6d4b","text":"Question <p>Given two string variables strA = \"apple\" and strB = \"banana\", which of the following operations will result in a string \"applebanana\"?</p> <p>A. <code>strA - strB;</code></p> <p>B. <code>strA * strB;</code></p> <p>C. <code>strA + strB;</code></p> <p>D. <code>strA / strB;</code></p> answer <pre><code>strA + strB\n</code></pre> Question <p>If you have a string variable s* \"programming\" and you want to change the first character to 'P', which code snippet should you use?</p> <p>A. <code>s[1] = 'P';</code></p> <p>B. <code>s(0) = 'P';</code></p> <p>C. <code>s[0] = 'P';</code></p> <p>D. <code>s{0} = 'P';</code></p> answer <pre><code>s[0] = 'P';\n</code></pre> <p>\u6216\u8005\u53ef\u4ee5\u4f7f\u7528</p> <pre><code>s.at(0) = 'P';\n</code></pre> Question <p>You have a string variable str = \"hello\" and a pointer ps to this string. How do you call the length() function using the pointer?</p> <p>A. <code>*ps.length();</code></p> <p>B. <code>ps.length();</code></p> <p>C. <code>ps-&gt;length();</code></p> <p>D. <code>&amp;ps.length();</code></p> answer <pre><code>ps-&gt;length();\n</code></pre> <p><code>ps</code> \u662f\u4e00\u4e2a\u6307\u5411 <code>std::string</code> \u5bf9\u8c61\u7684\u6307\u9488\uff0c\u901a\u8fc7\u6307\u9488\u8bbf\u95ee\u5bf9\u8c61\u7684\u6210\u5458\u51fd\u6570\u65f6\uff0c\u9700\u8981\u4f7f\u7528 <code>-&gt;</code> \u64cd\u4f5c\u7b26\u3002</p> <p>A. <code>*ps.length()</code> \u7684\u4f18\u5148\u7ea7\u4f1a\u5bfc\u81f4 <code>ps.length()</code> \u5148\u88ab\u8ba1\u7b97\uff0c\u800c <code>ps</code> \u662f\u6307\u9488\u7c7b\u578b\uff0c\u6ca1\u6709 <code>length()</code> \u6210\u5458\u51fd\u6570\u3002\u5982\u679c <code>ps</code> \u662f <code>std::string*</code> \u7c7b\u578b\uff0c<code>ps.length()</code> \u672c\u8eab\u5c31\u4f1a\u62a5\u9519\u3002</p> <p>B. <code>ps</code> \u662f\u6307\u9488\u7c7b\u578b\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 <code>.</code> \u64cd\u4f5c\u7b26\u8c03\u7528\u6210\u5458\u51fd\u6570\u3002</p> <p>D. <code>&amp;ps.length()</code> \u8bd5\u56fe\u83b7\u53d6 <code>length()</code> \u51fd\u6570\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f\u8c03\u7528\u5b83\u3002</p> Question <p>Suppose you have two string variables strX and strY, and you want to assign the value of strY to strX. Which statement is correct?</p> <p>A. <code>strX == strY;</code></p> <p>B. <code>strX = strY;</code></p> <p>C. <code>strX &amp; strY;</code></p> <p>D. <code>strX + strY;</code></p> answer <pre><code>strX = strY;\n</code></pre> Question <p>If you want to read a whole line of input into a string variable named line, which code should you use?</p> <p>A. <code>cin &gt;&gt; line;</code></p> <p>B. <code>cout &lt;&lt; line;</code></p> <p>C. <code>getline(cin, line);</code></p> <p>D. <code>line = cin;</code></p> answer <pre><code>std::getline(std::cin, line);\n</code></pre>"},{"location":"Computer_Science/OOP/test_from_wk/#w3","title":"W3 \u8bfe\u524d\u5c0f\u6d4b","text":"Question <p>You have a list of integers 'lst' and you want to remove all elements that are divisibleby 3. Which of the following code snippets would achieve this?</p> <p>A. <code>for (auto it = lst.begin(); it!= lst.end(); ++it){ if (*it % 3 == 0) lst.erase(it);}</code></p> <p>B. <code>auto it = lst.begin(); while (it!= lst.end()){ if (*it % 3 == 0)it = lst.erase(it); else ++it; }</code></p> <p>C. <code>for (inti=0;i&lt; lst.size();i++){ if (lst[i] % 3 == 0)Ist.erase(i);}</code></p> answer <p>B. <code>auto it = lst.begin(); while (it!= lst.end()){ if (*it % 3 == 0)it = lst.erase(it); else ++it; }</code></p> Question <p>You have a map 'm' of type <code>map&lt;string, int&gt;</code> and you want to check if the key 'apple' exists in the map. If it does, you want to print its value; otherwise, you want to print 'Not found' Which of the following code snippets would you use?</p> <p>A. <code>if (m['apple\"]!= 0) cout &lt;&lt; m['apple']; else cout &lt;&lt; 'Not found';</code></p> <p>B. <code>if (m.count('apple')) cout &lt;&lt; m['apple']; else cout &lt;&lt;'Not found';</code></p> <p>C. <code>if (m.find('apple') == m.end()) cout &lt;&lt; m['apple']; else cout &lt;&lt; 'Not found';</code></p> answer <p>B. <code>if (m.count('apple')) cout &lt;&lt; m['apple']; else cout &lt;&lt;'Not found';</code></p> <p>A \u8fd9\u4e2a\u9009\u9879\u7684\u95ee\u9898\u5728\u4e8e\uff0c<code>m['apple']</code> \u4f1a\u76f4\u63a5\u8bbf\u95ee\u952e <code>'apple'</code>\uff0c\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c<code>std::map</code> \u4f1a\u81ea\u52a8\u63d2\u5165\u4e00\u4e2a\u9ed8\u8ba4\u6784\u9020\u7684\u503c\uff08\u5bf9\u4e8e <code>int</code> \u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c\u662f <code>0</code>\uff09\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u952e <code>'apple'</code> \u4e0d\u5b58\u5728\uff0c<code>m['apple']</code> \u4e5f\u4f1a\u8fd4\u56de <code>0</code>\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u903b\u8f91\u9519\u8bef\uff0c\u65e0\u6cd5\u6b63\u786e\u5224\u65ad\u952e\u662f\u5426\u5b58\u5728\u3002</p> <p>C \u8fd9\u4e2a\u9009\u9879\u7684\u903b\u8f91\u662f\u9519\u8bef\u7684\u3002<code>m.find('apple')</code> \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u952e\u5b58\u5728\uff0c\u8fed\u4ee3\u5668\u6307\u5411\u8be5\u952e\u503c\u5bf9\uff1b\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u8fed\u4ee3\u5668\u7b49\u4e8e <code>m.end()</code>\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u903b\u8f91\u5e94\u8be5\u662f <code>if (m.find('apple') != m.end())</code>\uff0c\u8868\u793a\u952e\u5b58\u5728\u3002\u5f53\u524d\u4ee3\u7801\u7684\u903b\u8f91\u662f\u53cd\u7684\uff0c\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u7ed3\u679c\u3002</p> Question <p>You have a vector 'v' of integers and you want to print all elements in reverse order.</p> <p>Which of the following code snippets would you use?</p> <p>A. <code>for (int i= 0; i&lt; v.size(); i++) cout &lt;&lt; v[v.size()-i-1] &lt;&lt; '';</code></p> <p>B. <code>for (auto it = v.begin(); it!= v.end(); ++it) cout &lt;&lt; *it &lt;&lt;'';</code></p> <p>C. <code>for (int i = v.size(); i &gt; 0; i--) cout &lt;&lt; v[i] &lt;&lt;'';</code></p> <p>D. <code>for (auto it = v.end(); it!= v.begin(); --it) cout &lt;&lt; *it &lt;&lt;'';</code></p> answer <p>A. <code>for (int i= 0; i&lt; v.size(); i++) cout &lt;&lt; v[v.size()-i-1] &lt;&lt; '';</code></p> <p>B. \u8fd9\u4e2a\u9009\u9879\u662f\u9519\u8bef\u7684\u3002\u5b83\u4f7f\u7528\u6b63\u5411\u8fed\u4ee3\u5668 <code>it</code>\uff0c\u4ece <code>v.begin()</code> \u5f00\u59cb\u904d\u5386\u5230 <code>v.end()</code>\uff0c\u6253\u5370\u7684\u662f\u5143\u7d20\u7684\u539f\u59cb\u987a\u5e8f\uff0c\u800c\u4e0d\u662f\u9006\u5e8f\u3002</p> <p>C. \u8fd9\u4e2a\u9009\u9879\u662f\u9519\u8bef\u7684\u3002<code>i</code> \u7684\u521d\u59cb\u503c\u662f <code>v.size()</code>\uff0c\u800c <code>vector</code> \u7684\u7d22\u5f15\u662f\u4ece <code>0</code> \u5230 <code>v.size() - 1</code>\u3002\u76f4\u63a5\u4f7f\u7528 <code>v[i]</code> \u4f1a\u5bfc\u81f4\u8d8a\u754c\u8bbf\u95ee\uff08\u8bbf\u95ee <code>v[v.size()]</code> \u662f\u672a\u5b9a\u4e49\u884c\u4e3a\uff09\u3002\u6b64\u5916\uff0c\u5faa\u73af\u6761\u4ef6\u5e94\u4e3a <code>i &gt;= 0</code>\uff0c\u5426\u5219\u4f1a\u8df3\u8fc7\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>D. \u8fd9\u4e2a\u9009\u9879\u662f\u9519\u8bef\u7684\u3002<code>v.end()</code> \u6307\u5411\u7684\u662f\u5bb9\u5668\u672b\u5c3e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\u76f4\u63a5\u89e3\u5f15\u7528 <code>v.end()</code> \u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u6b64\u5916\uff0c\u5faa\u73af\u6761\u4ef6 <code>it != v.begin()</code> \u4f1a\u5bfc\u81f4\u8df3\u8fc7\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u5373\u4f7f\u4fee\u6b63\u4e3a <code>it != v.begin() - 1</code>\uff0c\u4e5f\u9700\u8981\u5c0f\u5fc3\u5904\u7406\u8fed\u4ee3\u5668\u7684\u8fb9\u754c\u3002</p> Question <p>You have a list 'L' of strings and you want to insert a new string 'new_str' in alphabetical order. Which of the following code snippets would you use?</p> <p>A. <code>auto it = L.begin(); while (it!= L.end()&amp;&amp; *it &lt; 'new_str') ++it; L.insert(it, 'new_str');</code></p> <p>B. <code>auto it = L.end(); while (it!= L.begin()&amp;&amp; *it&gt;'new_str')--it; L.insert(it, 'new_str');</code></p> <p>C.  <code>for (auto it = L.begin(); it!= L.end();++it){if (*it &gt; 'new_str') L.insert(it, 'new_str'); break;}</code></p> <p>D. L.push_back('new_str'); L.sort();</p> answer <p>A. <code>auto it = L.begin(); while (it!= L.end()&amp;&amp; *it &lt; 'new_str') ++it; L.insert(it, 'new_str');</code></p> <p>B. \u8fd9\u4e2a\u9009\u9879\u662f\u9519\u8bef\u7684\u3002<code>it</code> \u4ece <code>L.end()</code> \u5f00\u59cb\uff0c\u4f46 <code>L.end()</code> \u6307\u5411\u7684\u662f\u5bb9\u5668\u672b\u5c3e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u76f4\u63a5\u89e3\u5f15\u7528 <code>*it</code>\u3002\u6b64\u5916\uff0c\u5373\u4f7f\u4fee\u6b63\u4e3a <code>--it</code> \u540e\u518d\u89e3\u5f15\u7528\uff0c\u903b\u8f91\u4e5f\u4e0d\u5982\u9009\u9879 A \u76f4\u89c2\u548c\u9ad8\u6548\u3002</p> <p>C. \u8fd9\u4e2a\u9009\u9879\u662f\u9519\u8bef\u7684\u3002<code>break</code> \u8bed\u53e5\u4f1a\u5bfc\u81f4\u5faa\u73af\u5728\u7b2c\u4e00\u6b21\u6ee1\u8db3 <code>*it &gt; 'new str'</code> \u65f6\u7acb\u5373\u9000\u51fa\uff0c\u5373\u4f7f\u540e\u9762\u8fd8\u6709\u66f4\u5c0f\u7684\u5143\u7d20\u9700\u8981\u68c0\u67e5\u3002</p> <p>D. \u8fd9\u4e2a\u9009\u9879\u867d\u7136\u53ef\u4ee5\u5b9e\u73b0\u76ee\u6807\uff0c\u4f46\u6548\u7387\u8f83\u4f4e\u3002<code>push_back</code> \u5c06 <code>'new_str'</code> \u6dfb\u52a0\u5230\u5217\u8868\u672b\u5c3e\uff0c\u7136\u540e\u8c03\u7528 <code>sort</code> \u5bf9\u6574\u4e2a\u5217\u8868\u91cd\u65b0\u6392\u5e8f\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f &amp;O(N \\log N)$\uff0c\u800c\u76f4\u63a5\u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u5e76\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(N)\\)\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u63a8\u8350\u3002</p> <p>Info</p> <p>\u770b\u5230 <code>end()</code> \u65f6\u5c31\u8981\u65f6\u523b\u8c28\u614e\uff0c\u8981 <code>end() - 1</code>\u3002</p>"},{"location":"Computer_Science/OOP/test_from_wk/#w4","title":"W4 \u8bfe\u524d\u5c0f\u6d4b","text":"Question <p>\u5728C++\u4e2d\uff0c\u6807\u51c6\u5934\u6587\u4ef6\u7ed3\u6784\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 #ifndef\u3001#define \u548c #endif?</p> <p>A. \u4e3a\u4e86\u63d0\u9ad8\u5934\u6587\u4ef6\u7684\u7f16\u8bd1\u901f\u5ea6</p> <p>B. \u4e3a\u4e86\u9632\u6b62\u5934\u6587\u4ef6\u88ab\u91cd\u590d\u5305\u542b\uff0c\u907f\u514d\u7f16\u8bd1\u9519\u8bef</p> <p>C. \u4e3a\u4e86\u8ba9\u5934\u6587\u4ef6\u7684\u5185\u5bb9\u66f4\u52a0\u6e05\u6670\u6613\u8bfb</p> <p>D. \u4e3a\u4e86\u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf</p> answer <p>B. \u4e3a\u4e86\u9632\u6b62\u5934\u6587\u4ef6\u88ab\u91cd\u590d\u5305\u542b\uff0c\u907f\u514d\u7f16\u8bd1\u9519\u8bef</p> Question <p>\u4e3a\u4ec0\u4e48\u5728C++\u4e2d\uff0c\u7c7b\u7684\u58f0\u660e\u548c\u6210\u5458\u51fd\u6570\u7684\u539f\u578b\u8981\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u800c\u6210\u5458\u51fd\u6570\u7684\u5b9a\u4e49\u8981\u653e\u5728\u6e90\u6587\u4ef6\u4e2d?</p> <p>A. \u4e3a\u4e86\u8ba9\u7f16\u8bd1\u5668\u80fd\u540c\u65f6\u5904\u7406\u591a\u4e2a\u6587\u4ef6\uff0c\u63d0\u9ad8\u7f16\u8bd1\u6548\u7387</p> <p>B. \u56e0\u4e3a\u5934\u6587\u4ef6\u53ea\u80fd\u5305\u542b\u58f0\u660e\uff0c\u6e90\u6587\u4ef6\u53ea\u80fd\u5305\u542b\u5b9a\u4e49</p> <p>C. \u8fd9\u6837\u505a\u53ef\u4ee5\u5c06\u63a5\u53e3(\u5934\u6587\u4ef6)\u548c\u5b9e\u73b0(\u6e90\u6587\u4ef6)\u5206\u79bb,\u4fbf\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u548c\u590d\u7528</p> <p>D. \u4e3a\u4e86\u8ba9\u4ee3\u7801\u770b\u8d77\u6765\u66f4\u6574\u9f50</p> answer <p>C. \u8fd9\u6837\u505a\u53ef\u4ee5\u5c06\u63a5\u53e3(\u5934\u6587\u4ef6)\u548c\u5b9e\u73b0(\u6e90\u6587\u4ef6)\u5206\u79bb,\u4fbf\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u548c\u590d\u7528</p> Question <p>\u6784\u9020\u51fd\u6570\u7684\u4f5c\u7528\u662f\u4ec0\u4e48?</p> <p>A. \u6784\u9020\u51fd\u6570\u7528\u4e8e\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u8fdb\u884c\u6e05\u7406\u5de5\u4f5c</p> <p>B. \u6784\u9020\u51fd\u6570\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u65f6\u81ea\u52a8\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u786e\u4fdd\u5bf9\u8c61\u5728\u4f7f\u7528\u524d\u5177\u6709\u6b63\u786e\u7684\u521d\u59cb\u503c</p> <p>C. \u6784\u9020\u51fd\u6570\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u7c7b\u578b</p> <p>D. \u6784\u9020\u51fd\u6570\u7528\u4e8e\u8c03\u7528\u5176\u4ed6\u6210\u5458\u51fd\u6570</p> answer <p>B. \u6784\u9020\u51fd\u6570\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u65f6\u81ea\u52a8\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u786e\u4fdd\u5bf9\u8c61\u5728\u4f7f\u7528\u524d\u5177\u6709\u6b63\u786e\u7684\u521d\u59cb\u503c</p> Question <p>\u4e3a\u4ec0\u4e48\u6210\u5458\u51fd\u6570\u4e2d\u53ef\u4ee5\u4f7f\u7528 this \u6307\u9488?</p> <p>A. this\u6307\u9488\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528</p> <p>B. this\u6307\u9488\u662f\u6210\u5458\u51fd\u6570\u7684\u9690\u85cf\u53c2\u6570\uff0c\u6307\u5411\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5bf9\u8c61\uff0c\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528</p> <p>C. this\u6307\u9488\u662f\u7f16\u8bd1\u5668\u81ea\u52a8\u521b\u5efa\u7684\uff0c\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u5bf9\u8c61</p> <p>D. this\u6307\u9488\u662f\u4e3a\u4e86\u5728\u6210\u5458\u51fd\u6570\u4e2d\u8c03\u7528\u5176\u4ed6\u6210\u5458\u51fd\u6570\u800c\u5b58\u5728\u7684</p> answer <p>B. this\u6307\u9488\u662f\u6210\u5458\u51fd\u6570\u7684\u9690\u85cf\u53c2\u6570\uff0c\u6307\u5411\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5bf9\u8c61\uff0c\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528</p> <p>this\u6307\u9488\u662fC++\u4e2d\u7684\u4e00\u79cd\u7279\u6b8a\u6307\u9488\uff0c\u7528\u4e8e\u6307\u5411\u5f53\u524d\u5bf9\u8c61\u7684\u5730\u5740\u3002\u5728\u6210\u5458\u51fd\u6570\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528this\u6307\u9488\u6765\u8bbf\u95ee\u5f53\u524d\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u3002this\u6307\u9488\u662f\u9690\u542b\u7684\uff0c\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u58f0\u660e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u6210\u5458\u51fd\u6570\u4e2d\u4f7f\u7528\u3002</p> Question <p>\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u7279\u70b9\u662f\u4ec0\u4e48?</p> <p>A. \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u6709\u53c2\u6570</p> <p>B. \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u662f\u5728\u7c7b\u6ca1\u6709\u4efb\u4f55\u6784\u9020\u51fd\u6570\u65f6\uff0c\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u521b\u5efa\u7684</p> <p>C. \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u662f\u53ef\u4ee5\u5728\u6ca1\u6709\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u88ab\u8c03\u7528\u7684\u6784\u9020\u51fd\u6570</p> <p>D. \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u540d\u79f0\u4e0e\u7c7b\u540d\u4e0d\u540c</p> answer <p>C. \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u662f\u53ef\u4ee5\u5728\u6ca1\u6709\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u88ab\u8c03\u7528\u7684\u6784\u9020\u51fd\u6570</p> <p>\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u4e0d\u662f\u7f16\u8bd1\u5668\u81ea\u52a8\u7ed9\u7684\u6784\u9020\u51fd\u6570\u3002</p> <p>\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u5b9a\u4e49\u662f\u53c2\u6570\u8868\u4e3a\u7a7a\u7684\u6784\u9020\u51fd\u6570\u3002</p> <p>\u81ea\u5df1\u5199\u7684\u53c2\u6570\u8868\u4e3a\u7a7a\u7684\u6784\u9020\u51fd\u6570\u662f\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002</p> <p>\u6ca1\u6709\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u7ed9\u7684\u53eb\u505a\u81ea\u52a8\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u662f\u4ec0\u4e48\u90fd\u4e0d\u5e72\u7684\u3002</p>"},{"location":"Computer_Science/OOP/test_from_wk/#ifndef-endif","title":"ifndef \u548c #endif \u662f\u9884\u5904\u7406\u6307\u4ee4\uff0c\u7528\u4e8e\u9632\u6b62\u5934\u6587\u4ef6\u88ab\u91cd\u590d\u5305\u542b\u3002\u5f53\u7f16\u8bd1\u5668\u7b2c\u4e00\u6b21\u9047\u5230\u5934\u6587\u4ef6\u65f6\uff0c\u5b83\u4f1a\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u5b9a\u4e49\u4e86\u67d0\u4e2a\u7279\u5b9a\u7684\u5b8f\u3002\u5982\u679c\u6ca1\u6709\u5b9a\u4e49\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u5b9a\u4e49\u8fd9\u4e2a\u5b8f\uff0c\u5e76\u7ee7\u7eed\u7f16\u8bd1\u5934\u6587\u4ef6\u7684\u5185\u5bb9\u3002\u5982\u679c\u5df2\u7ecf\u5b9a\u4e49\u4e86\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u5934\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u907f\u514d\u4e86\u91cd\u590d\u5305\u542b\u7684\u95ee\u9898\u3002","text":"<p>\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u5934\u6587\u4ef6\u7684\u5185\u5bb9\u53ea\u88ab\u7f16\u8bd1\u4e00\u6b21\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u7f16\u8bd1\u901f\u5ea6\u5e76\u907f\u514d\u4e86\u7f16\u8bd1\u9519\u8bef\u3002</p>"},{"location":"Computer_Science/OOP/test_from_wk/#w5","title":"W5 \u8bfe\u524d\u5c0f\u6d4b","text":"Question <p>What does the 'private' keyword mean in the context of class members?</p> <p>A. All member declarations that follow are available to everyone.</p> <p>B. No one can access that member except inside function members of that type.</p> <p>C. It explicitly grants access to a function that isn't a member of the structure.</p> <p>D. It means the member has a global scope and can be accessed from anywhere.</p> answer <p>B. No one can access that member except inside function members of that type.</p> <p>\u5728\u7c7b\u7684\u6210\u5458\u4e0a\u4e0b\u6587\u4e2d\uff0c<code>private</code> \u5173\u952e\u5b57\u7684\u4f5c\u7528\u662f\u9650\u5236\u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\u3002</p> <p>\u9009\u9879A\u9519\u8bef\uff0c\u56e0\u4e3a <code>private</code> \u7684\u4f5c\u7528\u662f\u9650\u5236\u800c\u975e\u5f00\u653e\u8bbf\u95ee\u6743\u9650\uff08\u5f00\u653e\u6743\u9650\u5bf9\u5e94\u7684\u662f <code>public</code>\uff09\u3002</p> <p>\u9009\u9879B\u6b63\u786e\uff0c<code>private</code> \u6210\u5458\u53ea\u80fd\u88ab\u540c\u4e00\u7c7b\u5185\u90e8\u7684\u6210\u5458\u51fd\u6570\u8bbf\u95ee\uff0c\u5916\u90e8\u4ee3\u7801\u6216\u5176\u4ed6\u7c7b\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u3002</p> <p>\u9009\u9879C\u9519\u8bef\uff0c<code>private</code> \u672c\u8eab\u4e0d\u4e3b\u52a8\u6388\u4e88\u6743\u9650\uff1b\u82e5\u9700\u5141\u8bb8\u5916\u90e8\u8bbf\u95ee\uff0c\u9700\u901a\u8fc7\u53cb\u5143\uff08<code>friend</code>\uff09\u673a\u5236\u663e\u5f0f\u58f0\u660e\uff0c\u4f46\u8fd9\u4e0e <code>private</code> \u7684\u5173\u952e\u5b57\u529f\u80fd\u65e0\u5173\u3002</p> <p>\u9009\u9879D\u9519\u8bef\uff0c<code>private</code> \u6210\u5458\u7684\u4f5c\u7528\u57df\u4ec5\u9650\u4e8e\u7c7b\u5185\u90e8\uff0c\u800c\u975e\u5168\u5c40\u3002</p> Question <p>What is the difference between a 'class' and a 'struct' in terms of access control?</p> <p>A. A class defaults to public, while a struct defaults to private.</p> <p>B. Both class and struct default to public.</p> <p>C. A class defaults to private, while a struct defaults to public.</p> <p>D. Both class and struct default to private.</p> answer <p>C. A class defaults to private, while a struct defaults to public.</p> <p>\u5728C++\u4e2d\uff0c<code>class</code> \u548c <code>struct</code> \u5728\u8bbf\u95ee\u63a7\u5236\u4e0a\u7684\u6838\u5fc3\u533a\u522b\u662f\uff1a</p> <ul> <li> <p><code>class</code> \u7684\u9ed8\u8ba4\u6210\u5458\u8bbf\u95ee\u6743\u9650\u662f <code>private</code>\uff08\u79c1\u6709\uff09\u3002</p> </li> <li> <p><code>struct</code> \u7684\u9ed8\u8ba4\u6210\u5458\u8bbf\u95ee\u6743\u9650\u662f <code>public</code>\uff08\u516c\u5f00\uff09\u3002</p> </li> </ul> <p>\u9664\u8bbf\u95ee\u6743\u9650\u5916\uff0c\u4e8c\u8005\u7684\u9ed8\u8ba4\u7ee7\u627f\u65b9\u5f0f\u4e5f\u4e0d\u540c\uff1a</p> <p><code>class</code> \u9ed8\u8ba4 <code>private</code> \u7ee7\u627f\u3002</p> <p><code>struct</code> \u9ed8\u8ba4 <code>public</code> \u7ee7\u627f\u3002</p> about private and public inheritance <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// \u57fa\u7c7b\nclass Base {\npublic:\n    void publicMethod()   { cout &lt;&lt; \"Base::publicMethod\" &lt;&lt; endl; }\nprotected:\n    void protectedMethod() { cout &lt;&lt; \"Base::protectedMethod\" &lt;&lt; endl; }\nprivate:\n    void privateMethod()  { cout &lt;&lt; \"Base::privateMethod\" &lt;&lt; endl; }\n};\n\n// \u9ed8\u8ba4\u7ee7\u627f\u65b9\u5f0f\uff1aclass \u4f7f\u7528 private \u7ee7\u627f\nclass DerivedClass : Base {  // \u7b49\u4ef7\u4e8e class DerivedClass : private Base\npublic:\n    void test() {\n        publicMethod();     // \u53ef\u8bbf\u95ee\uff1aBase\u7684public\u6210\u5458\u5728DerivedClass\u4e2d\u53d8\u4e3aprivate\n        protectedMethod();  // \u53ef\u8bbf\u95ee\uff1aBase\u7684protected\u6210\u5458\u5728DerivedClass\u4e2d\u53d8\u4e3aprivate\n        // privateMethod(); // \u9519\u8bef\uff1aBase\u7684private\u6210\u5458\u59cb\u7ec8\u4e0d\u53ef\u8bbf\u95ee\n    }\n};\n\n// \u9ed8\u8ba4\u7ee7\u627f\u65b9\u5f0f\uff1astruct \u4f7f\u7528 public \u7ee7\u627f\nstruct DerivedStruct : Base {  // \u7b49\u4ef7\u4e8e struct DerivedStruct : public Base\n    void test() {\n        publicMethod();     // \u53ef\u8bbf\u95ee\uff1aBase\u7684public\u6210\u5458\u4fdd\u6301public\n        protectedMethod();  // \u53ef\u8bbf\u95ee\uff1aBase\u7684protected\u6210\u5458\u4fdd\u6301protected\n        // privateMethod(); // \u9519\u8bef\uff1aBase\u7684private\u6210\u5458\u4e0d\u53ef\u8bbf\u95ee\n    }\n};\n\nint main() {\n    DerivedClass dc;\n    // dc.publicMethod();   // \u9519\u8bef\uff1aDerivedClass\u4e2dpublicMethod\u662fprivate\uff08\u56e0private\u7ee7\u627f\uff09\n    dc.test();              // \u6b63\u786e\uff1a\u901a\u8fc7\u6d3e\u751f\u7c7b\u7684public\u65b9\u6cd5\u95f4\u63a5\u8bbf\u95ee\u57fa\u7c7b\u6210\u5458\n\n    DerivedStruct ds;\n    ds.publicMethod();      // \u6b63\u786e\uff1aDerivedStruct\u4e2dpublicMethod\u4fdd\u6301public\uff08\u56e0public\u7ee7\u627f\uff09\n    ds.test();\n\n    return 0;\n}\n</code></pre> <p>\u5efa\u8bae\u663e\u5f0f\u5199\u51fa\u7ee7\u627f\u65b9\u5f0f\uff08\u5982 <code>class Derived : public Base</code>\uff09\uff0c\u907f\u514d\u4f9d\u8d56\u9ed8\u8ba4\u884c\u4e3a\u5bfc\u81f4\u6b67\u4e49\u3002</p> Question <p>What is the lifetime of a local variable?</p> <p>A. It persists only for the period that a constructor or method executes.</p> <p>B. It lasts as long as the object lasts.</p> <p>C. It has a global lifetime, starting before main() andending after main() exits.</p> <p>D. It is constructed once and destroyed on exit from the program.</p> answer <p>A. It persists only for the period that a constructor or method executes.</p> <p>\u9009\u9879A\u6b63\u786e\u3002\u5c40\u90e8\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u4ec5\u9650\u4e8e\u5176\u6240\u5728\u7684\u4ee3\u7801\u5757\uff08\u5982\u51fd\u6570\u3001\u6784\u9020\u51fd\u6570\u3001\u65b9\u6cd5\u6216 {} \u5305\u56f4\u7684\u4f5c\u7528\u57df\uff09\u6267\u884c\u671f\u95f4\u3002\u5f53\u4ee3\u7801\u5757\u6267\u884c\u5b8c\u6bd5\uff08\u6216\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff09\uff0c\u5c40\u90e8\u53d8\u91cf\u4f1a\u88ab\u81ea\u52a8\u9500\u6bc1\u3002</p> <p>\u9009\u9879B\u9519\u8bef\u3002\u5c40\u90e8\u53d8\u91cf\u4e0e\u5bf9\u8c61\u751f\u547d\u5468\u671f\u65e0\u5173\uff0c\u5b83\u4ec5\u5b58\u5728\u4e8e\u4ee3\u7801\u5757\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u800c\u975e\u5bf9\u8c61\u5b58\u5728\u7684\u6574\u4e2a\u5468\u671f\u3002</p> <p>\u9009\u9879C\u9519\u8bef\u3002\u5168\u5c40\u751f\u547d\u5468\u671f\u5c5e\u4e8e\u5168\u5c40\u53d8\u91cf\u6216\u9759\u6001\u53d8\u91cf\uff0c\u800c\u975e\u5c40\u90e8\u53d8\u91cf\u3002</p> <p>\u9009\u9879D\u9519\u8bef\u3002\u5c40\u90e8\u53d8\u91cf\u5728\u6bcf\u6b21\u8fdb\u5165\u4f5c\u7528\u57df\u65f6\u6784\u9020\uff0c\u79bb\u5f00\u65f6\u9500\u6bc1\uff0c\u800c\u975e\u7a0b\u5e8f\u9000\u51fa\u65f6\u624d\u9500\u6bc1\uff08\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u4f8b\u5916\uff0c\u4f46\u9898\u76ee\u672a\u7279\u6307\uff09\u3002</p> Question <p>What does a static member function mean in C++?</p> <p>A. It has an implicit receiver(this) and can access member variables.</p> <p>B. It is shared by instances,can only access static member variables, and has no implicit receiver(this).</p> <p>C. It is a function with internal linkage and can be dynamically overridden.</p> <p>D. It is a function that is called only once during the program execution.</p> answer <p>B. It is shared by instances,can only access static member variables, and has no implicit receiver(this).</p> <p>\u5728C++\u4e2d\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\uff08static member function\uff09 \u7684\u6838\u5fc3\u7279\u6027\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u5c5e\u4e8e\u7c7b\u672c\u8eab\uff0c\u800c\u975e\u7c7b\u7684\u5b9e\u4f8b\uff1a\u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u7c7b\u7684\u5b9e\u4f8b\u65e0\u5173\uff0c\u53ef\u76f4\u63a5\u901a\u8fc7\u7c7b\u540d\u8c03\u7528\uff08\u65e0\u9700\u521b\u5efa\u5bf9\u8c61\uff09\u3002</p> </li> <li> <p>\u65e0\u9690\u5f0f this \u6307\u9488\uff1a\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709\u9690\u5f0f\u4f20\u9012\u7684 this \u6307\u9488\uff0c\u56e0\u6b64 \u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\u6216\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u3002</p> </li> <li> <p>\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\uff1a\u9759\u6001\u6210\u5458\u51fd\u6570\u4ec5\u80fd\u8bbf\u95ee\u7c7b\u7684\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u5176\u4ed6\u9759\u6001\u6210\u5458\u51fd\u6570\uff08\u56e0\u4e3a\u9759\u6001\u6210\u5458\u5c5e\u4e8e\u7c7b\uff0c\u800c\u975e\u7279\u5b9a\u5b9e\u4f8b\uff09\u3002</p> </li> <li> <p>\u5171\u4eab\u6027\uff1a\u6240\u6709\u7c7b\u7684\u5b9e\u4f8b\u5171\u4eab\u540c\u4e00\u4e2a\u9759\u6001\u6210\u5458\u51fd\u6570\u3002</p> </li> </ol> <p>C. \u9519\u8bef\u3002\u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u94fe\u63a5\u5c5e\u6027\u4e0e\u666e\u901a\u51fd\u6570\u7c7b\u4f3c\uff08\u9ed8\u8ba4\u5916\u90e8\u94fe\u63a5\uff09\uff0c\u4e14\u4e0d\u80fd\u662f\u865a\u51fd\u6570\uff08\u65e0\u6cd5\u52a8\u6001\u8986\u76d6\uff09\u3002</p> <p>D. \u9519\u8bef\u3002\u9759\u6001\u6210\u5458\u51fd\u6570\u53ef\u88ab\u591a\u6b21\u8c03\u7528\uff0c\u5176\u8c03\u7528\u6b21\u6570\u4e0d\u53d7\u9650\u5236\u3002</p> Question <p>When is the constructor of a global object called?</p> <p>A. When the object is first accessed in the program.</p> <p>B. Before main() is entered.</p> <p>C. At the end of the program execution.</p> <p>D. When the function containing the object definition is called.</p> answer <p>B. Before main() is entered.</p> <p>\u9009\u9879A\u9519\u8bef\u3002\u5168\u5c40\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u4e0e\u662f\u5426\u88ab\u8bbf\u95ee\u65e0\u5173\u3002\u5373\u4f7f\u4ece\u672a\u88ab\u4f7f\u7528\uff0c\u6784\u9020\u51fd\u6570\u4ecd\u4f1a\u5728\u7a0b\u5e8f\u542f\u52a8\u65f6\u8c03\u7528\uff08\u4e0d\u540c\u4e8e\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u9996\u6b21\u8bbf\u95ee\u65f6\u624d\u521d\u59cb\u5316\uff09\u3002</p> <p>\u9009\u9879B\u6b63\u786e\u3002\u5168\u5c40\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u5728\u7a0b\u5e8f\u542f\u52a8\u9636\u6bb5\u3001main() \u51fd\u6570\u6267\u884c\u4e4b\u524d\u5b8c\u6210\u521d\u59cb\u5316\u3002\u8fd9\u662f\u4e3a\u4e86\u786e\u4fdd\u5168\u5c40\u5bf9\u8c61\u5728\u7a0b\u5e8f\u903b\u8f91\u5f00\u59cb\u524d\u5df2\u5c31\u7eea\u3002</p> <p>\u9009\u9879C\u9519\u8bef\u3002C\u63cf\u8ff0\u7684\u662f\u6790\u6784\u51fd\u6570\u7684\u8c03\u7528\u65f6\u673a\uff0c\u800c\u975e\u6784\u9020\u51fd\u6570\u3002\u5168\u5c40\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u5728 main() \u7ed3\u675f\u540e\u3001\u7a0b\u5e8f\u9000\u51fa\u524d\u8c03\u7528\u3002</p> <p>\u9009\u9879D\u9519\u8bef\u3002D\u63cf\u8ff0\u7684\u662f\u5c40\u90e8\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u8c03\u7528\u65f6\u673a\uff08\u5982\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u53d8\u91cf\uff09\uff0c\u4e0e\u5168\u5c40\u5bf9\u8c61\u65e0\u5173\u3002</p>"},{"location":"Computer_Science/OOP/test_from_wk/#w6","title":"W6 \u8bfe\u524d\u5c0f\u6d4b","text":"Question <p>What is the main difference between a reference and a pointer in C++?</p> <p>A. References can be null, while pointers cannot.</p> <p>B. References are independent of existing variables, while pointers are aliases for variables.</p> <p>C. References can't change to a new \"address\" location, while pointers can.</p> <p>D. References can change to point to a different address, while pointers cannot.</p> answer <p>C. References can't change to a new \"address\" location, while pointers can.</p> <p>\u5728 C++ \u4e2d\uff0c\u5f15\u7528\uff08Reference\uff09 \u548c \u6307\u9488\uff08Pointer\uff09 \u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u7684\u521d\u59cb\u5316\u3001\u53ef\u53d8\u6027\u548c\u7a7a\u503c\u7279\u6027\uff1a</p> \u7279\u6027 \u5f15\u7528 \u6307\u9488 \u521d\u59cb\u5316 \u5fc5\u987b\u521d\u59cb\u5316\uff08\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5bf9\u8c61\uff09\uff0c\u4e0d\u80fd\u4e3a <code>null</code> \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316\uff08\u4f46\u5e94\u907f\u514d\u91ce\u6307\u9488\uff09\u6216\u8bbe\u4e3a <code>nullptr</code> \u53ef\u53d8\u6027 \u4e00\u65e6\u7ed1\u5b9a\u540e\uff0c\u4e0d\u53ef\u91cd\u65b0\u7ed1\u5b9a\u5230\u5176\u4ed6\u5bf9\u8c61 \u53ef\u4ee5\u968f\u65f6\u6307\u5411\u4e0d\u540c\u7684\u5730\u5740\uff08\u91cd\u65b0\u8d4b\u503c\uff09 \u5185\u5b58\u5360\u7528 \u65e0\u72ec\u7acb\u5185\u5b58\u5730\u5740\uff08\u662f\u5bf9\u8c61\u7684\u522b\u540d\uff09 \u6709\u72ec\u7acb\u5185\u5b58\u5730\u5740\uff08\u5b58\u50a8\u6307\u5411\u7684\u5730\u5740\u503c\uff09 \u8bed\u6cd5\u64cd\u4f5c \u76f4\u63a5\u8bbf\u95ee\u5bf9\u8c61\uff08\u65e0\u9700\u89e3\u5f15\u7528\uff09 \u9700\u8981\u89e3\u5f15\u7528\uff08<code>*ptr</code>\uff09\u624d\u80fd\u8bbf\u95ee\u5bf9\u8c61 Question <p>Which of the following statements about right-value references is correct?</p> <p>A. A right-value reference can be initialized by a left-value. </p> <p>B. Once a right-value reference is initialized, it remains a right-value.</p> <p>C. A right-value reference can extend the lifetime of a right value.</p> <p>D. A right-value reference can be declared without initialization.</p> answer <p>C. A right-value reference can extend the lifetime of a right value.</p> <p>A. \u9519\u8bef\u3002\u53f3\u503c\u5f15\u7528\u4e0d\u80fd\u76f4\u63a5\u7531\u5de6\u503c\u521d\u59cb\u5316\u3002\u53f3\u503c\u5f15\u7528(&amp;&amp;)\u53ea\u80fd\u7ed1\u5b9a\u5230\u53f3\u503c\u3002\u5982\u679c\u8981\u5c06\u5de6\u503c\u8f6c\u6362\u4e3a\u53f3\u503c\u5f15\u7528\uff0c\u9700\u8981\u4f7f\u7528std::move()\u51fd\u6570\u3002</p> <p>B. \u9519\u8bef\u3002\u4e00\u65e6\u53f3\u503c\u5f15\u7528\u88ab\u521d\u59cb\u5316\uff0c\u5b83\u5b9e\u9645\u4e0a\u53d8\u6210\u4e86\u4e00\u4e2a\u5de6\u503c\uff0c\u56e0\u4e3a\u5b83\u6709\u540d\u5b57\u4e14\u53ef\u4ee5\u53d6\u5730\u5740\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\"\u5f15\u7528\u6298\u53e0\"\u73b0\u8c61\u3002</p> <p>C. \u6b63\u786e\u3002\u8fd9\u662f\u53f3\u503c\u5f15\u7528\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u3002\u901a\u8fc7\u5c06\u4e34\u65f6\u5bf9\u8c61(\u53f3\u503c)\u7ed1\u5b9a\u5230\u53f3\u503c\u5f15\u7528\uff0c\u53ef\u4ee5\u5ef6\u957f\u8be5\u4e34\u65f6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\uff0c\u4f7f\u5176\u6301\u7eed\u5230\u5f15\u7528\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u3002</p> <p>D. \u9519\u8bef\u3002\u53f3\u503c\u5f15\u7528\u5fc5\u987b\u5728\u58f0\u660e\u65f6\u521d\u59cb\u5316\uff0c\u5c31\u50cf\u666e\u901a\u5f15\u7528\u4e00\u6837\u3002\u4e0d\u80fd\u58f0\u660e\u4e00\u4e2a\u672a\u521d\u59cb\u5316\u7684\u5f15\u7528\u3002</p> Question <p>What is the purpose of using const in C++?</p> <p>A. To make a variable mutable.</p> <p>B. To declare a variable with a constant value that cannot be changed.</p> <p>C. To allow a variable to be assigned a new value at anytime.</p> <p>D. To make a variable have external linkage by default.</p> answer <p>B. To declare a variable with a constant value that cannot be changed.</p> <p>A. \u9519\u8bef\u3002const\u7684\u4f5c\u7528\u6070\u6070\u76f8\u53cd\uff0c\u5b83\u4f7f\u53d8\u91cf\u4e0d\u53ef\u53d8(immutable)\u800c\u4e0d\u662f\u53ef\u53d8(mutable)\u3002C++\u4e2d\u6709mutable\u5173\u952e\u5b57\uff0c\u5176\u4f5c\u7528\u662f\u5141\u8bb8\u5728const\u6210\u5458\u51fd\u6570\u4e2d\u4fee\u6539\u88ab\u6807\u8bb0\u4e3amutable\u7684\u6210\u5458\u53d8\u91cf\u3002</p> <p>B. \u6b63\u786e\u3002const\u7684\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u58f0\u660e\u4e00\u4e2a\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\u5e38\u91cf\u3002\u4e00\u65e6\u521d\u59cb\u5316\u540e\uff0cconst\u53d8\u91cf\u7684\u503c\u5c31\u4e0d\u80fd\u518d\u88ab\u6539\u53d8\u3002</p> <p>C. \u9519\u8bef\u3002\u8fd9\u4e0econst\u7684\u76ee\u7684\u5b8c\u5168\u76f8\u53cd\u3002const\u9632\u6b62\u53d8\u91cf\u5728\u521d\u59cb\u5316\u540e\u88ab\u91cd\u65b0\u8d4b\u503c\u3002</p> <p>D. \u9519\u8bef\u3002\u5728C++\u4e2d\uff0cconst\u53d8\u91cf\u9ed8\u8ba4\u5177\u6709\u5185\u90e8\u94fe\u63a5(internal linkage)\uff0c\u800c\u4e0d\u662f\u5916\u90e8\u94fe\u63a5(external linkage)\u3002\u8fd9\u4e0eC\u8bed\u8a00\u4e2d\u7684\u884c\u4e3a\u4e0d\u540c\u3002\u5728C++\u4e2d\uff0c\u5982\u679c\u9700\u8981\u4f7fconst\u53d8\u91cf\u5177\u6709\u5916\u90e8\u94fe\u63a5\uff0c\u9700\u8981\u663e\u5f0f\u4f7f\u7528extern\u5173\u952e\u5b57\u3002</p> Question <p>What is the role of a const member function in a class?</p> <p>A. It can modify the object's data members.</p> <p>B. It can call non-const member functions</p> <p>C. It cannot modify the object's data members and is safe for const objects.</p> <p>D. It can only be called by non-const objects.</p> answer <p>C. It cannot modify the object's data members and is safe for const objects.</p> <p>A. \u9519\u8bef\u3002const\u6210\u5458\u51fd\u6570\u7684\u4e3b\u8981\u7279\u70b9\u5c31\u662f\u5b83\u4e0d\u80fd\u4fee\u6539\u5bf9\u8c61\u7684\u6570\u636e\u6210\u5458\uff08\u9664\u975e\u8fd9\u4e9b\u6210\u5458\u88ab\u58f0\u660e\u4e3amutable\uff09\u3002\u8fd9\u662fconst\u6210\u5458\u51fd\u6570\u7684\u57fa\u672c\u9650\u5236\u3002</p> <p>B. \u9519\u8bef\u3002const\u6210\u5458\u51fd\u6570\u4e0d\u80fd\u8c03\u7528\u975econst\u6210\u5458\u51fd\u6570\uff0c\u56e0\u4e3a\u975econst\u6210\u5458\u51fd\u6570\u53ef\u80fd\u4f1a\u4fee\u6539\u5bf9\u8c61\u72b6\u6001\uff0c\u8fd9\u8fdd\u53cd\u4e86const\u6210\u5458\u51fd\u6570\u7684\u627f\u8bfa\u3002</p> <p>C. \u6b63\u786e\u3002const\u6210\u5458\u51fd\u6570\u4e0d\u80fd\u4fee\u6539\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\u7684\u6570\u636e\u6210\u5458\uff0c\u8fd9\u4fdd\u8bc1\u4e86\u5bf9\u8c61\u7684\u72b6\u6001\u4e0d\u53d8\u3002\u56e0\u6b64\uff0cconst\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528const\u6210\u5458\u51fd\u6570\uff0c\u56e0\u4e3a\u975econst\u6210\u5458\u51fd\u6570\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u4fee\u6539\u5bf9\u8c61\u3002</p> <p>D. \u9519\u8bef\u3002const\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u88abconst\u5bf9\u8c61\u548c\u975econst\u5bf9\u8c61\u8c03\u7528\u3002\u4e8b\u5b9e\u4e0a\uff0cconst\u6210\u5458\u51fd\u6570\u7684\u4e00\u4e2a\u4e3b\u8981\u7528\u9014\u5c31\u662f\u5141\u8bb8const\u5bf9\u8c61\u8c03\u7528\u7c7b\u7684\u65b9\u6cd5\u3002</p>"},{"location":"Computer_Science/OOP/test_from_wk/#w7","title":"W7 \u8bfe\u524d\u5c0f\u6d4b","text":"Question <p>What is the main purpose of using delegating constructors?</p> <p>A. To reduce code duplication in overloaded constructors</p> <p>B. To increase the number of constructors in a class</p> <p>C. To make the constructor calls more complex</p> <p>D. To avoid using initialization lists</p> answer <p>The main purpose of using delegating constructors is A. To reduce code duplication in overloaded constructors.</p> <p>\u59d4\u6258\u6784\u9020\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f A. \u51cf\u5c11\u91cd\u8f7d\u6784\u9020\u51fd\u6570\u4e2d\u7684\u4ee3\u7801\u91cd\u590d\u3002</p> <p>\u5728\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u4f1a\u5b9a\u4e49\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff08\u91cd\u8f7d\u6784\u9020\u51fd\u6570\uff09\uff0c\u5b83\u4eec\u53ef\u80fd\u63a5\u53d7\u4e0d\u540c\u6570\u91cf\u6216\u7c7b\u578b\u7684\u53c2\u6570\u6765\u521d\u59cb\u5316\u5bf9\u8c61\u7684\u4e0d\u540c\u90e8\u5206\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u4e0d\u540c\u7684\u6784\u9020\u51fd\u6570\u901a\u5e38\u4f1a\u5305\u542b\u4e00\u4e9b\u5171\u540c\u7684\u521d\u59cb\u5316\u903b\u8f91\u3002</p> <p>\u4f7f\u7528\u59d4\u6258\u6784\u9020\u51fd\u6570\u5141\u8bb8\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u8c03\u7528\u540c\u4e00\u4e2a\u7c7b\u4e2d\u7684\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u6765\u6267\u884c\u8fd9\u90e8\u5206\u5171\u540c\u7684\u521d\u59cb\u5316\u4ee3\u7801\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u201c\u4e3b\u201d\u6784\u9020\u51fd\u6570\u4e2d\u7f16\u5199\u8fd9\u4e9b\u5171\u540c\u7684\u521d\u59cb\u5316\u903b\u8f91\uff0c\u5176\u4ed6\u7684\u6784\u9020\u51fd\u6570\u53ea\u9700\u8981\u59d4\u6258\u7ed9\u8fd9\u4e2a\u201c\u4e3b\u201d\u6784\u9020\u51fd\u6570\u5373\u53ef\uff0c\u4ece\u800c\u907f\u514d\u4e86\u5728\u6bcf\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u90fd\u7f16\u5199\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u663e\u8457\u51cf\u5c11\u4e86\u4ee3\u7801\u7684\u5197\u4f59\uff0c\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\u548c\u53ef\u8bfb\u6027\u3002</p> <p>B. \u59d4\u6258\u6784\u9020\u51fd\u6570\u672c\u8eab\u5e76\u4e0d\u4f1a\u76f4\u63a5\u589e\u52a0\u7c7b\u4e2d\u6784\u9020\u51fd\u6570\u7684\u6570\u91cf\u3002\u5b83\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u7ec4\u7ec7\u548c\u7ba1\u7406\u5df2\u6709\u7684\u6784\u9020\u51fd\u6570\u3002</p> <p>C. \u59d4\u6258\u6784\u9020\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4e3a\u4e86\u7b80\u5316\u6784\u9020\u51fd\u6570\u7684\u903b\u8f91\uff0c\u800c\u4e0d\u662f\u4f7f\u5176\u66f4\u590d\u6742\u3002\u901a\u8fc7\u5c06\u5171\u540c\u7684\u521d\u59cb\u5316\u903b\u8f91\u96c6\u4e2d\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u53ef\u4ee5\u4f7f\u6bcf\u4e2a\u5355\u72ec\u7684\u6784\u9020\u51fd\u6570\u8c03\u7528\u66f4\u52a0\u6e05\u6670\u548c\u7b80\u6d01\u3002</p> <p>D. \u59d4\u6258\u6784\u9020\u51fd\u6570\u548c\u521d\u59cb\u5316\u5217\u8868\u662f\u4e0d\u540c\u7684\u6982\u5ff5\uff0c\u5b83\u4eec\u53ef\u4ee5\u4e00\u8d77\u4f7f\u7528\u3002\u521d\u59cb\u5316\u5217\u8868\u7528\u4e8e\u76f4\u63a5\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\uff0c\u800c\u59d4\u6258\u6784\u9020\u51fd\u6570\u7528\u4e8e\u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u3002\u59d4\u6258\u7684\u6784\u9020\u51fd\u6570\u5185\u90e8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u3002</p> Question <p>What is a key property of default arguments?</p> <p>A. They are defined in the function head</p> <p>B. They are declared in the prototype and the compiler inserts them if no value is provided in the function call</p> <p>C. They can be added from left to right in the argument list</p> <p>D. They cannot be used in constructors</p> answer <ul> <li>\u9996\u5148\u8981\u6ce8\u610f\u7684\u662f\uff0cargument \u662f\u51fd\u6570\u8c03\u7528\u65f6\u4f20\u8fc7\u53bb\u7684\u503c\uff0c\u800c parameter \u662f\u51fd\u6570\u63a5\u6536\u503c\u7684\u90a3\u4e2a\u53c2\u6570\u3002</li> </ul> <p>The key property of default arguments is B. They are declared in the prototype and the compiler inserts them if no value is provided in the function call.</p> <p>A. \u5f53\u4f60\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u4f60\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u4e2d\u4e3a\u67d0\u4e9b\u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u9ed8\u8ba4\u503c\u3002\u5982\u679c\u5728\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u6ca1\u6709\u4e3a\u8fd9\u4e9b\u53c2\u6570\u63d0\u4f9b\u5b9e\u9645\u7684\u503c\uff0c\u90a3\u4e48\u51fd\u6570\u5c06\u4f7f\u7528\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u6307\u5b9a\u7684\u9ed8\u8ba4\u503c\u3002\u9996\u5148\u8fd9\u91cc\u662f\u58f0\u660e\u800c\u4e0d\u662f\u5b9a\u4e49\uff0c\u6240\u4ee5 <code>define</code> \u662f\u9519\u7684\u3002\u5176\u6b21 <code>function head</code> \u65e2\u53ef\u4ee5\u7528\u6765\u6307 <code>propertype</code> \u4e5f\u53ef\u4ee5\u7528\u6765\u6307\u51fd\u6570\u5b9a\u4e49\u65f6\u7684\u51fd\u6570\u7684\u5934\u90e8\uff0c\u6240\u4ee5\u4e0d\u662f\u4e00\u4e2a\u51c6\u786e\u7684\u7b54\u6848\u3002</p> <p>B. \u5728\u67d0\u4e9b\u8bed\u8a00\uff08\u5982 C++\uff09\u4e2d\uff0c\u51fd\u6570\u539f\u578b\u53ef\u4ee5\u5305\u542b\u9ed8\u8ba4\u53c2\u6570\u3002\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u5904\u7406\u9ed8\u8ba4\u53c2\u6570\u7684\u7f3a\u5931\u60c5\u51b5\uff0c\u4f46\u9ed8\u8ba4\u503c\u672c\u8eab\u662f\u5728\u51fd\u6570\u5b9a\u4e49\u65f6\u786e\u5b9a\u7684\u3002</p> <p>C. \u8fd9\u662f\u9519\u8bef\u7684\u3002\u9ed8\u8ba4\u53c2\u6570\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u9650\u5236\uff1a\u4e00\u65e6\u4f60\u5728\u53c2\u6570\u5217\u8868\u4e2d\u4e3a\u4e00\u4e2a\u53c2\u6570\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u503c\uff0c\u90a3\u4e48\u5b83\u53f3\u8fb9\u7684\u6240\u6709\u53c2\u6570\u90fd\u5fc5\u987b\u4e5f\u63d0\u4f9b\u9ed8\u8ba4\u503c\u3002\u4f60\u4e0d\u80fd\u5728\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u540e\u9762\u5b9a\u4e49\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u3002</p> <p>D. \u8fd9\u662f\u9519\u8bef\u7684\u3002\u9ed8\u8ba4\u53c2\u6570\u53ef\u4ee5\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u8fd9\u4e3a\u521b\u5efa\u5bf9\u8c61\u63d0\u4f9b\u4e86\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u67d0\u4e9b\u53c2\u6570\u6709\u9ed8\u8ba4\u503c\uff0c\u8fd9\u6837\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u53ef\u4ee5\u53ea\u63d0\u4f9b\u5fc5\u8981\u7684\u90e8\u5206\u4fe1\u606f\u3002</p> Question <p>What is the main advantage of using inline functions?</p> <p>A. They always reduce the code size</p> <p>B. They eliminate the overhead of function calls</p> <p>C. They can be used for recursive functions</p> <p>D. They don't need to be declared in the header file</p> answer <p>The main advantage of using inline functions is B. They eliminate the overhead of function calls.</p> <p>\u4f7f\u7528\u5185\u8054\u51fd\u6570\u7684\u4e3b\u8981\u4f18\u70b9\u662f B. \u5b83\u4eec\u6d88\u9664\u4e86\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u3002</p> <p>B. \u8fd9\u662f\u5185\u8054\u51fd\u6570\u6700\u6838\u5fc3\u7684\u4f18\u52bf\u3002\u5f53\u7f16\u8bd1\u5668\u9047\u5230\u5bf9\u5185\u8054\u51fd\u6570\u7684\u8c03\u7528\u65f6\uff0c\u5b83\u4e0d\u4f1a\u50cf\u666e\u901a\u51fd\u6570\u90a3\u6837\u751f\u6210\u51fd\u6570\u8c03\u7528\u7684\u6307\u4ee4\uff08\u4f8b\u5982\uff0c\u5c06\u53c2\u6570\u538b\u5165\u5806\u6808\u3001\u8df3\u8f6c\u5230\u51fd\u6570\u5730\u5740\u3001\u6267\u884c\u51fd\u6570\u4f53\u3001\u8fd4\u56de\u7b49\uff09\u3002\u76f8\u53cd\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c06\u5185\u8054\u51fd\u6570\u7684\u4ee3\u7801\u76f4\u63a5\u63d2\u5165\u5230\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5730\u65b9\uff0c\u5c31\u50cf\u90a3\u90e8\u5206\u4ee3\u7801\u672c\u6765\u5c31\u5728\u90a3\u91cc\u4e00\u6837\u3002\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u51fd\u6570\u8c03\u7528\u65f6\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5f00\u9500\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387\uff0c\u5c24\u5176\u5bf9\u4e8e\u9891\u7e41\u8c03\u7528\u7684\u5c0f\u578b\u51fd\u6570\u6765\u8bf4\u6548\u679c\u66f4\u660e\u663e\u3002</p> <p>A. \u8fd9\u662f\u9519\u8bef\u7684\u3002\u867d\u7136\u5185\u8054\u5c55\u5f00\u53ef\u4ee5\u63d0\u9ad8\u6267\u884c\u6548\u7387\uff0c\u4f46\u5982\u679c\u4e00\u4e2a\u5185\u8054\u51fd\u6570\u5728\u591a\u4e2a\u5730\u65b9\u88ab\u8c03\u7528\uff0c\u90a3\u4e48\u5b83\u7684\u4ee3\u7801\u4f1a\u88ab\u590d\u5236\u591a\u6b21\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u589e\u5927\u3002\u56e0\u6b64\uff0c\u5185\u8054\u51fd\u6570\u5e76\u4e0d\u603b\u662f\u80fd\u51cf\u5c0f\u4ee3\u7801\u5927\u5c0f\uff0c\u6709\u65f6\u53cd\u800c\u4f1a\u589e\u5927\u3002</p> <p>C. \u8fd9\u662f\u9519\u8bef\u7684\u3002\u7406\u8bba\u4e0a\u53ef\u4ee5\u5c06\u9012\u5f52\u51fd\u6570\u58f0\u660e\u4e3a\u5185\u8054\u7684\uff0c\u4f46\u7f16\u8bd1\u5668\u901a\u5e38\u4f1a\u5ffd\u7565\u5bf9\u9012\u5f52\u51fd\u6570\u7684\u5185\u8054\u8bf7\u6c42\u3002\u56e0\u4e3a\u9012\u5f52\u7684\u672c\u8d28\u662f\u51fd\u6570\u81ea\u8eab\u7684\u91cd\u590d\u8c03\u7528\uff0c\u5982\u679c\u6bcf\u6b21\u8c03\u7528\u90fd\u8fdb\u884c\u5185\u8054\u5c55\u5f00\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4ee3\u7801\u65e0\u9650\u81a8\u80c0\uff0c\u800c\u4e14\u4e5f\u65e0\u6cd5\u771f\u6b63\u6d88\u9664\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u3002</p> <p>D. \u8fd9\u662f\u9519\u8bef\u7684\u3002\u4e3a\u4e86\u8ba9\u7f16\u8bd1\u5668\u5728\u8c03\u7528\u5185\u8054\u51fd\u6570\u7684\u5730\u65b9\u80fd\u591f\u8fdb\u884c\u5185\u8054\u5c55\u5f00\uff0c\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\u3002\u56e0\u6b64\uff0c\u901a\u5e38\u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\uff08\u5305\u62ec\u51fd\u6570\u4f53\uff09\u9700\u8981\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u4ee5\u4fbf\u5728\u5305\u542b\u8be5\u5934\u6587\u4ef6\u7684\u6240\u6709\u6e90\u6587\u4ef6\u4e2d\u90fd\u53ef\u89c1\u3002</p> Question <p>What is the key difference between a delegating constructor and a targetconstructor?</p> <p>A. A delegating constructor can have other members initialized in its own initialization list, while a target constructor cannot</p> <p>B. The execution of the target constructor precedes that of the delegating constructor</p> <p>C. A target constructor can delegate to another constructor, while a delegating constructor cannot</p> <p>D. A delegating constructor is always private, while a targetconstructor is always public</p> answer <p>The key difference between a delegating constructor and a target constructor is B. The execution of the target constructor precedes that of the delegating constructor.</p> <p>\u59d4\u6258\u6784\u9020\u51fd\u6570 (delegating constructor) \u548c\u76ee\u6807\u6784\u9020\u51fd\u6570 (target constructor) \u4e4b\u95f4\u7684\u5173\u952e\u533a\u522b\u5728\u4e8e B. \u76ee\u6807\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u5148\u4e8e\u59d4\u6258\u6784\u9020\u51fd\u6570\u3002</p> <ul> <li> <p>\u59d4\u6258\u6784\u9020\u51fd\u6570 (Delegating Constructor): \u8fd9\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5b83\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u8c03\u7528\u540c\u4e00\u4e2a\u7c7b\u4e2d\u7684\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u6765\u5b8c\u6210\u90e8\u5206\u6216\u5168\u90e8\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002\u5b83\u5c06\u81ea\u8eab\u7684\u521d\u59cb\u5316\u804c\u8d23\u59d4\u6258\u7ed9\u4e86\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u3002</p> </li> <li> <p>\u76ee\u6807\u6784\u9020\u51fd\u6570 (Target Constructor): \u8fd9\u662f\u88ab\u59d4\u6258\u6784\u9020\u51fd\u6570\u8c03\u7528\u7684\u90a3\u4e2a\u6784\u9020\u51fd\u6570\u3002\u5b83\u5305\u542b\u4e86\u5b9e\u9645\u6267\u884c\u521d\u59cb\u5316\u903b\u8f91\u7684\u4ee3\u7801\u3002</p> </li> </ul> <p>\u56e0\u6b64\uff0c\u5f53\u4e00\u4e2a\u59d4\u6258\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u7684\u6267\u884c\u6d41\u7a0b\u662f\u8fd9\u6837\u7684\uff1a</p> <ol> <li>\u59d4\u6258\u6784\u9020\u51fd\u6570\u9996\u5148\u5728\u5176\u521d\u59cb\u5316\u5217\u8868\u4e2d\u8c03\u7528\u76ee\u6807\u6784\u9020\u51fd\u6570\u3002</li> <li>\u76ee\u6807\u6784\u9020\u51fd\u6570\u9996\u5148\u6267\u884c\u5176\u5168\u90e8\u7684\u4ee3\u7801\uff0c\u5b8c\u6210\u4e00\u90e8\u5206\u6216\u5168\u90e8\u7684\u6210\u5458\u53d8\u91cf\u521d\u59cb\u5316\u3002</li> <li>\u53ea\u6709\u5728\u76ee\u6807\u6784\u9020\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u59d4\u6258\u6784\u9020\u51fd\u6570\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u5176\u81ea\u8eab\u7684\u4ee3\u7801\uff08\u5982\u679c\u6709\u7684\u8bdd\uff0c\u901a\u5e38\u5176\u51fd\u6570\u4f53\u4e3a\u7a7a\u6216\u53ea\u5305\u542b\u4e00\u4e9b\u989d\u5916\u7684\u3001\u5728\u76ee\u6807\u6784\u9020\u51fd\u6570\u4e4b\u540e\u624d\u9700\u8981\u6267\u884c\u7684\u903b\u8f91\uff09\u3002</li> </ol> <p>A. \u8fd9\u662f\u9519\u8bef\u7684\u3002\u65e0\u8bba\u662f\u59d4\u6258\u6784\u9020\u51fd\u6570\u8fd8\u662f\u76ee\u6807\u6784\u9020\u51fd\u6570\uff0c\u90fd\u53ef\u4ee5\u5728\u5176\u81ea\u8eab\u7684\u521d\u59cb\u5316\u5217\u8868\u4e2d\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u3002\u59d4\u6258\u6784\u9020\u51fd\u6570\u9664\u4e86\u53ef\u4ee5\u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u5916\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u521d\u59cb\u5316\u4e00\u4e9b\u81ea\u8eab\u7684\u6210\u5458\u3002</p> <p>C. \u8fd9\u662f\u9519\u8bef\u7684\u3002\u59d4\u6258\u5173\u7cfb\u662f\u5355\u5411\u7684\u3002\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u59d4\u6258\u7ed9\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6210\u4e3a\u59d4\u6258\u6784\u9020\u51fd\u6570\u3002\u88ab\u59d4\u6258\u7684\u6784\u9020\u51fd\u6570\uff08\u76ee\u6807\u6784\u9020\u51fd\u6570\uff09\u4e0d\u80fd\u518d\u59d4\u6258\u7ed9\u5176\u4ed6\u7684\u6784\u9020\u51fd\u6570\uff0c\u4ee5\u907f\u514d\u65e0\u9650\u5faa\u73af\u7684\u59d4\u6258\u8c03\u7528\u3002</p> <p>D. \u8fd9\u662f\u9519\u8bef\u7684\u3002\u59d4\u6258\u6784\u9020\u51fd\u6570\u548c\u76ee\u6807\u6784\u9020\u51fd\u6570\u7684\u8bbf\u95ee\u4fee\u9970\u7b26\uff08public, private, protected\uff09\u53d6\u51b3\u4e8e\u7c7b\u7684\u8bbe\u8ba1\u9700\u6c42\uff0c\u5e76\u6ca1\u6709\u5f3a\u5236\u7684\u89c4\u5b9a\u3002\u4e00\u4e2a\u516c\u6709\u7684\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u59d4\u6258\u7ed9\u53e6\u4e00\u4e2a\u516c\u6709\u7684\u6216\u79c1\u6709\u7684\u6784\u9020\u51fd\u6570\u3002</p>"},{"location":"Computer_Science/OOP/test_from_wk/#w8","title":"W8 \u8bfe\u524d\u5c0f\u6d4b","text":"Question <p>What does the concept of 'composition' in object-oriented programming refer to?</p> <p>A. It refers to the relationship where one class inherits from another.</p> <p>B. It refers to the relationship where one class \"has-a\" instance of another class as a member variable.</p> <p>C. It refers to the process of modularizing code into separate files.</p> answer <p>B. It refers to the relationship where one class \"has-a\" instance of another class as a member variable.</p> Question <p>Which statement best describes the difference between 'fully' and 'by reference' inclusion in composition?</p> <p>A. 'Fully' means the object is part of the parent object, while 'by reference' means it exists elsewhere and isreferenced.</p> <p>B. 'Fully' indicates the object is destroyed manually, whereas 'by reference' means automatic destruction.</p> <p>C. 'Fully' and 'by reference' both imply that constructors are called automatically.</p> <p>D. 'By reference' means the object is embedded within theparent okject, while 'fully\u2018 implies referencing anexternal object.</p> answer <p>A. 'Fully' means the object is part of the parent object, while 'by reference' means it exists elsewhere and isreferenced.</p> Question <p>What happens if you do not provide arguments for embedded objects in the constructor initialization list?</p> <p>A. The default constructor for the embedded object will be called automatically if it exists.</p> <p>B. The program will throw a runtime error.</p> <p>C. The embedded object will remain uninitialized until explicitly assigned.</p> <p>D. The destructor for the embedded object will be called instead.</p> answer <p>A. The default constructor for the embedded object will be called automatically if it exists.</p> Question <p>Why might embedded objects typically be declared private in a class?</p> <p>A. To allow full access to their public interface from outside the class.</p> <p>B. Because they are considered part of the underlying implementation details.</p> <p>C. To ensure that the constructors and destructors are called automatically.</p> <p>D. Private objects cannot be initialized or destroyed automatically.</p> answer <p>B. Because they are considered part of the underlying implementation details.</p> Question <p>How does an initializer list differ from assignment inside a constructor's body?</p> <p>A. Initializer lists perform assignments after the constructor has been called.</p> <p>B.Initializer lists initialize members before the constructor body executes.</p> <p>C. Assignment inside the constructor's body initializes const members.</p> <p>D. There is no difference; both perform the same function.</p> answer <p>B. Initializer lists initialize members before the constructor body executes.</p>"},{"location":"Computer_Science/OOP/test_from_wk/#w9","title":"W9 \u8bfe\u524d\u5c0f\u6d4b","text":"Question <p>What does inheritance in Object-Oriented Programming allow a class to do?</p> <p>A. It allows a class to define its behavior as a superset of another class.</p> <p>B. It allows a class to completely replace another class's behavior.</p> <p>C. It allows a class to only reuse private data from another class.</p> <p>D. It allows a class to hide all member functions from another class</p> answer <p>A. It allows a class to define its behavior as a superset of another class.</p> Question <p>What advantage does using inheritance provide when designing classes like CD and DVD?</p> <p>A. It avoids code duplication and makes maintenance easier.</p> <p>B. It increases the amount of code needed for each new class.</p> <p>C. It prevents any changes to the superclass once subclasses are created.</p> <p>D. It ensures that subclasses cannot add their own attributes.</p> answer <p>A. It avoids code duplication and makes maintenance easier.</p> Question <p>Which of the following statements about member access in C++ inheritance is correct?</p> <p>A. Private member variables of the base class are not accessible directly in the derived class but are still present within it.</p> <p>B. Private member variables of the base class are fully accessible in the derived class.</p> <p>C. Protected members of the base class are not accessible in the derived class.</p> <p>D. Static members of the base class lose their class-wide property in the derived class.</p> answer <p>A. Private member variables of the base class are not accessible directly in the derived class but are still present within it.</p> Question <p>What does the term 'ls-A' relationship refer to in the context of inheritance?</p> <p>A. It refers to the relationship where one class inherits from another, indicating a subtype relationship.</p> <p>B. It describes a situation where two classes share the same interface but have no connection.</p> <p>C. It indicates that two classes are completely unrelated.</p> <p>D. It means that one class can be composed of multiple instances of another class.</p> answer <p>A. It refers to the relationship where one class inherits from another, indicating a subtype relationship.</p>"},{"location":"Computer_Science/OOP/test_from_wk/#w10","title":"W10 \u8bfe\u524d\u5c0f\u6d4b","text":"Question <p>What does subtyping allow in object-oriented programming?</p> <p>A. It allows objects of subclasses to be used where objecis of supertypes are required.</p> <p>B. It restricts objects of subclasses from being used where objects of supertypes are required.</p> <p>C. It prevents any conversion between different types of objects.</p> <p>D. It forces all subclasses to redefine their parent class methods.</p> answer <p>A. It allows objects of subclasses to be used where objects of supertypes are required.</p> Question <p>Which statement best describes upcasting in the context of polymorphism?</p> <p>A. Upcasting involves converting a base class reference or pointer to a derived class reference or pointer.</p> <p>B. Upcasting is the act of converting from a derived class reference or pointer to a base class reference orpointer.</p> <p>C. Upcasting refers to the process of slicing off the extra features of a subclass when assigning it to a superclass variable.</p> <p>D. Upcasting is the dynamic binding of functions runtime.</p> answer <p>B. Upcasting is the act of converting from a derived class reference or pointer to a base class reference orpointer.</p> Question <p>What happens when an overridden function calls its base class version using <code>Base::func()</code> inside <code>Derived::func()</code>?</p> <p>A. It creates a compile-time error because you cannot call the base class function from a derived class</p> <p>B. It calls the base class version of the function, allowing reuse of existing functionality.</p> <p>C. It overrides the base class function completely, making the base class version inaccessible.</p> <p>D. It causes a runtime exception due to conflicting function definitions.</p> answer <p>B. It calls the base class version of the function, allowing reuse of existing functionality.</p>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/","title":"Python","text":"<p> \u7ea6 3505 \u4e2a\u5b57  208 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 20 \u5206\u949f</p> <p>Abstract</p> <p>\u8fd9\u662f\u6211\u5728\u5b66\u4e60 \"CS50P Introduction to Programming with Python\" \u65f6\u6240\u505a\u7684\u7b14\u8bb0 (\u8fd9\u91cc\u6307\u8defB\u7ad9\u94fe\u63a5\ud83d\udd17) \uff0c\u96be\u514d\u4e0d\u5168\u3002\u7b14\u8005\u4e4b\u540e\u6709\u8ba1\u5212\u7ee7\u7eed\u8fdb\u4e00\u6b65\u5b66\u4e60python\uff0c\u56e0\u6b64\u4ecd\u4f1a\u66f4\u65b0\u3002</p>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#print-and-main","title":"print and main","text":"<pre><code>print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\n</code></pre> <ul> <li>print\u51fd\u6570\uff1a\u8f93\u51fa\u591a\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5206\u9694\u7b26\u3001\u7ed3\u675f\u7b26\u7b49</li> </ul> <pre><code>print(f\"Hello, your name is {name}!\")\n</code></pre> <ul> <li>\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a\u5c06\u53d8\u91cf\u63d2\u5165\u5b57\u7b26\u4e32\u4e2d\uff0c\u4f7f\u7528f\u5f00\u5934\uff0c\u5927\u62ec\u53f7\u4e2d\u63d2\u5165\u53d8\u91cf\u540d</li> </ul> <pre><code>if __name__ == \"__main__\":\n</code></pre> <ul> <li>\u5224\u65ad\u5f53\u524d\u811a\u672c\u662f\u5426\u4e3a\u4e3b\u7a0b\u5e8f\u6267\u884c</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#change-string","title":"change string","text":"<pre><code>str.strip([chars])\n\n#e.g.\nname = name.strip()\n</code></pre> <ul> <li>chars\uff08\u53ef\u9009\uff09\uff1a\u6307\u5b9a\u8981\u79fb\u9664\u7684\u5b57\u7b26\u96c6\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u79fb\u9664\u7a7a\u767d\u5b57\u7b26\u3002</li> </ul> <pre><code>name = name.capitalize()\n</code></pre> <ul> <li>\u5c06\u5b57\u7b26\u4e32\u7684\u9996\u5b57\u6bcd\u5927\u5199</li> </ul> <pre><code>name = name.upper()\n</code></pre> <ul> <li>\u5c06\u5b57\u7b26\u4e32\u5168\u90e8\u8f6c\u6362\u4e3a\u5927\u5199</li> </ul> <pre><code>name = name.lower()\n</code></pre> <ul> <li>\u5c06\u5b57\u7b26\u4e32\u5168\u90e8\u8f6c\u6362\u4e3a\u5c0f\u5199</li> </ul> <p><pre><code>name = name.title()\n</code></pre> - \u5c06\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199</p> <pre><code>str.split(separator, maxsplit)\n\n# e.g.\nname = name.split('')\n</code></pre> <ul> <li> <p>\u6309\u6307\u5b9a\u5b57\u7b26\u62c6\u5206\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5217\u8868\u3002</p> </li> <li> <p>separator\uff08\u53ef\u9009\uff09\uff1a\u6307\u5b9a\u5206\u9694\u7b26\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u4efb\u4f55\u7a7a\u767d\u5b57\u7b26\uff08\u7a7a\u683c\u3001\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u7b49\uff09\u90fd\u4f1a\u88ab\u89c6\u4e3a\u5206\u9694\u7b26\u3002</p> </li> <li> <p>maxsplit\uff08\u53ef\u9009\uff09\uff1a\u6307\u5b9a\u6700\u5927\u62c6\u5206\u6b21\u6570\uff0c\u5206\u5272\u540e\u7684\u5b50\u5b57\u7b26\u4e32\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7 maxsplit\u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u5206\u5272\u6240\u6709\u53ef\u80fd\u7684\u5730\u65b9\u3002</p> </li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#print-numbers","title":"print numbers","text":"<pre><code>print(f\"{z:,}\")\n</code></pre> <ul> <li> <p>\u683c\u5f0f\u5316\u8f93\u51fa\u6570\u5b57\uff0c\u6dfb\u52a0\u5343\u4f4d\u5206\u9694\u7b26\u3002</p> </li> <li> <p>\u4f8b\u5982\uff0c\u5982\u679cz\u7684\u503c\u662f1234567\uff0c\u90a3\u4e48\u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\u5c06\u662f\"1,234,567\"\u3002</p> </li> </ul> <pre><code>print(f\"{z:.2f}\")\n</code></pre> <ul> <li>\u683c\u5f0f\u5316\u8f93\u51fa\u6570\u5b57\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570</li> </ul> <pre><code>print(f\"{z:,.2f}\")\n</code></pre> <ul> <li>\u683c\u5f0f\u5316\u8f93\u51fa\u6570\u5b57\uff0c\u6dfb\u52a0\u5343\u4f4d\u5206\u9694\u7b26\u5e76\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570</li> </ul> <pre><code>round(number[, ndigits])\n</code></pre> <ul> <li> <p>\u5bf9\u6570\u5b57\u8fdb\u884c\u56db\u820d\u4e94\u5165\u3002</p> </li> <li> <p>number\uff1a\u9700\u8981\u56db\u820d\u4e94\u5165\u7684\u6570\u5b57\u3002</p> </li> <li> <p>ndigits\uff08\u53ef\u9009\uff09\uff1a\u6307\u5b9a\u5c0f\u6570\u70b9\u540e\u4fdd\u7559\u7684\u4f4d\u6570\u3002\u5982\u679c\u4e0d\u63d0\u4f9b\u8fd9\u4e2a\u53c2\u6570\uff0c\u51fd\u6570\u5c06\u8fd4\u56de\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002</p> </li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#match","title":"match","text":"<pre><code>match name:\n    case \"Alice\":\n        print(\"Hello, Alice!\")\n    case \"Bob\":\n        print(\"Hello, Bob!\")\n    case _:\n        print(\"Hello, stranger!\")\n</code></pre> <ul> <li>\u6709\u70b9\u7c7b\u4f3c C \u91cc\u9762\u7684 <code>switch-case</code> \u8bed\u53e5</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#random","title":"random","text":"<p>Info</p> <p>\u8981\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff0c\u9700\u8981 <code>import random</code></p> <pre><code>number = random.randint(1, 10)\n</code></pre> <ul> <li>\u751f\u6210\u4e00\u4e2a1\u523010\u4e4b\u95f4\u7684\u968f\u673a\u6574\u6570</li> </ul> <pre><code>number = random.random()\n</code></pre> <ul> <li>\u751f\u6210\u4e00\u4e2a0\u52301\u4e4b\u95f4\u7684\u968f\u673a\u6d6e\u70b9\u6570</li> </ul> <pre><code>number = random.uniform(1, 10)\n</code></pre> <ul> <li>\u751f\u6210\u4e00\u4e2a1\u523010\u4e4b\u95f4\u7684\u968f\u673a\u6d6e\u70b9\u6570</li> </ul> <pre><code>choice = random.choice([\"apple\", \"banana\", \"cherry\"])\n</code></pre> <ul> <li>\u4ece\u5217\u8868\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20</li> </ul> <pre><code>random.shuffle(my_list)\n</code></pre> <ul> <li>\u968f\u673a\u6253\u4e71\u5217\u8868\u4e2d\u7684\u5143\u7d20</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#statistics","title":"statistics","text":"<p>Info</p> <p>\u8981\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff0c\u9700\u8981 <code>import statistics</code></p> <pre><code>mean = statistics.mean(my_list)\n</code></pre> <ul> <li>\u8ba1\u7b97\u5217\u8868\u4e2d\u5143\u7d20\u7684\u5747\u503c</li> </ul> <pre><code>median = statistics.median(my_list)\n</code></pre> <ul> <li>\u8ba1\u7b97\u5217\u8868\u4e2d\u5143\u7d20\u7684\u4e2d\u4f4d\u6570</li> </ul> <pre><code>mode = statistics.mode(my_list)\n</code></pre> <ul> <li>\u8ba1\u7b97\u5217\u8868\u4e2d\u5143\u7d20\u7684\u4f17\u6570</li> </ul> <pre><code>std_dev = statistics.stdev(my_list)\n</code></pre> <ul> <li>\u8ba1\u7b97\u5217\u8868\u4e2d\u5143\u7d20\u7684\u6807\u51c6\u5dee</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#sys","title":"sys","text":"<p>Info</p> <p>\u8981\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff0c\u9700\u8981 <code>import sys</code></p> <ul> <li><code>sys</code>\uff1a\u7528\u4e8e\u4e0ePython\u89e3\u91ca\u5668\u4ea4\u4e92\uff0c\u63d0\u4f9b\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u3001\u7a0b\u5e8f\u9000\u51fa\u7b49\u529f\u80fd\u3002</li> </ul> <pre><code>print(sys.argv)\n</code></pre> <ul> <li>\u8f93\u51fa\u547d\u4ee4\u884c\u53c2\u6570</li> </ul> <pre><code>print(sys.argv[0])\n</code></pre> <ul> <li>\u8f93\u51fa\u7b2c\u4e00\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u901a\u5e38\u662f\u811a\u672c\u540d\u79f0</li> </ul> <pre><code>print(sys.argv[1:-1])\n</code></pre> <ul> <li>\u8f93\u51fa\u547d\u4ee4\u884c\u53c2\u6570\u4e2d\u7684\u4e2d\u95f4\u90e8\u5206</li> </ul> <pre><code>sys.exit(\"Exiting the program\")\n</code></pre> <ul> <li>\u9000\u51fa\u7a0b\u5e8f\uff0c\u5e76\u8f93\u51fa\u6307\u5b9a\u7684\u6d88\u606f</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#cowsay","title":"cowsay","text":"<p>Info</p> <p>\u8981\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff0c\u9700\u8981 <code>import cowsay</code></p> <pre><code>cowsay.cow(\"Hello, world!\")\n</code></pre> <ul> <li>\u4f7f\u7528cowsay\u6253\u5370\u4e00\u4e2a\u725b\u8bf4\u7684\u201cHello, world!\u201d</li> </ul> <pre><code>cowsay.trex(\"Hello, world!\")\n</code></pre> <ul> <li>\u4f7f\u7528cowsay\u6253\u5370\u4e00\u4e2a\u6050\u9f99\u8bf4\u7684\u201cHello, world!\u201d</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#requests-and-json","title":"requests and json","text":"<p>Info</p> <p>\u8981\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff0c\u9700\u8981 <code>import requests</code> \u548c <code>import json</code></p> <pre><code>response = requests.get(\"https://www.google.com\")\n</code></pre> <ul> <li>requests.get \u65b9\u6cd5\u901a\u8fc7\u6784\u9020\u4e00\u4e2a HTTP GET \u8bf7\u6c42\uff0c\u5411\u6307\u5b9a\u7684 URL \u53d1\u9001\u8bf7\u6c42\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a Response \u5bf9\u8c61\u3002\u8fd9\u4e2a\u5bf9\u8c61\u5305\u542b\u4e86\u670d\u52a1\u5668\u54cd\u5e94\u7684\u6240\u6709\u4fe1\u606f\uff0c\u5982\u72b6\u6001\u7801\u3001\u54cd\u5e94\u5934\u3001\u54cd\u5e94\u4f53\u7b49\u3002</li> </ul> <pre><code>print(response.status_code)\n</code></pre> <ul> <li>\u6253\u5370\u54cd\u5e94\u7684\u72b6\u6001\u7801</li> </ul> <p>Note</p> <p>\u5728HTTP\u534f\u8bae\u4e2d\uff0c\u72b6\u6001\u7801\u662f\u4e00\u4e2a\u4e09\u4f4d\u6570\u7684\u6574\u6570\uff0c\u7528\u4e8e\u8868\u793a\u670d\u52a1\u5668\u5bf9\u8bf7\u6c42\u7684\u5904\u7406\u7ed3\u679c\u3002\u72b6\u6001\u7801\u5206\u4e3a\u4e94\u5927\u7c7b\uff0c\u5206\u522b\u662f\uff1a</p> <ol> <li> <p>1xx\uff08\u4fe1\u606f\u6027\u72b6\u6001\u7801\uff09\uff1a\u8868\u793a\u8bf7\u6c42\u5df2\u63a5\u6536\uff0c\u7ee7\u7eed\u5904\u7406\u3002</p> </li> <li> <p>2xx\uff08\u6210\u529f\u72b6\u6001\u7801\uff09\uff1a\u8868\u793a\u8bf7\u6c42\u5df2\u6210\u529f\u63a5\u6536\u3001\u7406\u89e3\u548c\u63a5\u53d7\u3002</p> </li> <li> <p>3xx\uff08\u91cd\u5b9a\u5411\u72b6\u6001\u7801\uff09\uff1a\u8868\u793a\u9700\u8981\u5ba2\u6237\u7aef\u91c7\u53d6\u8fdb\u4e00\u6b65\u64cd\u4f5c\u624d\u80fd\u5b8c\u6210\u8bf7\u6c42\u3002</p> </li> <li> <p>4xx\uff08\u5ba2\u6237\u7aef\u9519\u8bef\u72b6\u6001\u7801\uff09\uff1a\u8868\u793a\u8bf7\u6c42\u5305\u542b\u8bed\u6cd5\u9519\u8bef\u6216\u65e0\u6cd5\u88ab\u6267\u884c\u3002</p> </li> <li> <p>5xx\uff08\u670d\u52a1\u5668\u9519\u8bef\u72b6\u6001\u7801\uff09\uff1a\u8868\u793a\u670d\u52a1\u5668\u5728\u5904\u7406\u8bf7\u6c42\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u9519\u8bef\u3002</p> </li> </ol> <pre><code>print(response.content)\n</code></pre> <ul> <li>\u6253\u5370\u54cd\u5e94\u7684\u5185\u5bb9\u3002\u4e0a\u8ff0\u7684 <code>response.content</code> \u662fHTTP\u54cd\u5e94\u5bf9\u8c61\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5b83\u5305\u542b\u4e86\u670d\u52a1\u5668\u8fd4\u56de\u7684\u5b9e\u9645\u5185\u5bb9\u3002\u8fd9\u4e2a\u5185\u5bb9\u662f\u4ee5\u5b57\u8282\u5f62\u5f0f\u5b58\u50a8\u7684\u3002</li> </ul> <pre><code>print(response.headers)\n</code></pre> <ul> <li>\u6253\u5370\u54cd\u5e94\u7684\u5934\u90e8\u4fe1\u606f\u3002\u4e0a\u8ff0\u7684 <code>response.headers</code> \u662fHTTP\u54cd\u5e94\u5bf9\u8c61\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5b83\u5305\u542b\u4e86\u670d\u52a1\u5668\u8fd4\u56de\u7684\u6240\u6709\u5934\u90e8\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u662f\u4ee5\u5b57\u5178\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u8bbf\u95ee\u3002</li> </ul> <p>Note</p> <p>HTTP\u5934\u90e8\u4fe1\u606f\u662fHTTP\u534f\u8bae\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4f20\u9012\u989d\u5916\u7684\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5305\u62ec\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u5143\u6570\u636e\uff0c\u5982\u5185\u5bb9\u7c7b\u578b\u3001\u5185\u5bb9\u957f\u5ea6\u3001\u670d\u52a1\u5668\u7c7b\u578b\u7b49\u3002</p> <pre><code>print(response.json())\n</code></pre> <ul> <li>\u6253\u5370\u54cd\u5e94\u7684JSON\u6570\u636e\uff0c<code>.json()</code> \u65b9\u6cd5\u5c06\u54cd\u5e94\u7684\u5185\u5bb9\u89e3\u6790\u4e3aPython\u7684\u5b57\u5178\u6216\u5217\u8868\uff0c\u5177\u4f53\u53d6\u51b3\u4e8eJSON\u6570\u636e\u7684\u7ed3\u6784\u3002</li> </ul> <pre><code>print(json.dumps(response.json(), indent=4))\n</code></pre> <ul> <li> <p><code>json.dumps</code> \u51fd\u6570\u5c06Python\u5bf9\u8c61\u8f6c\u6362\u4e3aJSON\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002</p> </li> <li> <p><code>indent=4</code> \u53c2\u6570\u6307\u5b9a\u4e86\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u5e94\u8be5\u4f7f\u75284\u4e2a\u7a7a\u683c\u8fdb\u884c\u7f29\u8fdb\uff0c\u4f7f\u5f97\u8f93\u51fa\u7684JSON\u5b57\u7b26\u4e32\u66f4\u52a0\u6613\u8bfb\u3002</p> </li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#assert","title":"assert","text":"<pre><code>assert 1 == 2, \"1 is not equal to 2\"\n</code></pre> <ul> <li>\u65ad\u8a001\u7b49\u4e8e2\uff0c\u5982\u679c\u4e0d\u7b49\u5219\u629b\u51fa\u5f02\u5e38\u5e76\u6253\u5370\u6d88\u606f\u3002</li> </ul> <p>Info</p> <p><code>assert</code> \u8bed\u53e5\u901a\u5e38\u7528\u4e8e\u5f00\u53d1\u548c\u6d4b\u8bd5\u9636\u6bb5\uff0c\u7528\u4e8e\u68c0\u67e5\u4ee3\u7801\u4e2d\u7684\u5047\u8bbe\u662f\u5426\u6210\u7acb\u3002\u5982\u679c\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u7a0b\u5e8f\u4f1a\u7acb\u5373\u505c\u6b62\u6267\u884c\uff0c\u5e76\u7ed9\u51fa\u9519\u8bef\u4fe1\u606f\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898\u3002</p>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#file-io","title":"file I/O","text":"<pre><code>with open(\"file.txt\", \"w\") as f:\n    f.write(\"Hello, world!\")\n</code></pre> <ul> <li>\u5199\u5165\u6587\u4ef6\uff08\u4f1a\u8986\u76d6\u539f\u6587\u4ef6\u5185\u5bb9\uff09</li> </ul> <pre><code>with open(\"file.txt\", \"a\") as f:\n    f.write(\"Hello, world!\")\n\n    # or\n    name = input(\"Enter your name: \")\n    f.write(f\"{name}\\n\")\n</code></pre> <ul> <li>\u5199\u5165\u6587\u4ef6\uff08\u4f1a\u8ffd\u52a0\u5185\u5bb9\u5230\u6587\u4ef6\u672b\u5c3e\uff09</li> </ul> <pre><code>with open(\"file.txt\", \"r\") as f:\n    content = f.readlines()\n\n    # or\n    for line in f:\n        print(line, end=\"\")\n\n        # or \u53bb\u9664\u6bcf\u884c\u672b\u5c3e\u7684\u6362\u884c\u7b26\n        print(line,rstrip())\n</code></pre> <ul> <li>\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9</li> </ul> <pre><code>with open(\"file.txt\") as f:\n    for line in sorted(f):\n        print(line, end=\"\")\n</code></pre> <ul> <li> <p>\u6392\u5e8f\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9</p> </li> <li> <p><code>sorted(iterable, key=None, reverse=False)</code></p> <ul> <li><code>iterable</code> \uff1a\u8981\u6392\u5e8f\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5982\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\u7b49\u3002</li> <li><code>key</code>\uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u4ece\u6bcf\u4e2a\u5143\u7d20\u4e2d\u63d0\u53d6\u6bd4\u8f83\u952e\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u8868\u793a\u76f4\u63a5\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002</li> <li><code>reverse</code>\uff1a\u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u5219\u964d\u5e8f\u6392\u5e8f\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a  False \uff0c\u5219\u5217\u8868\u5143\u7d20\u5c06\u88ab\u5347\u5e8f\u6392\u5e8f\u3002\u9ed8\u8ba4\u4e3a False \u3002</li> </ul> </li> </ul> <p>further for key</p> <p><code>key</code> \u53ef\u4ee5\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u5982\u679c <code>key</code> \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u5b83\u5c06\u88ab\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684\u952e\u3002\u5982\u679c <code>key</code> \u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u90a3\u4e48\u5b83\u5c06\u88ab\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684\u952e\u3002</p> <ul> <li> <p>\u5982\u679c <code>key</code> \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u5b83\u5c06\u88ab\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684\u952e\u3002\u4f8b\u5982\uff0c\u5982\u679c <code>key</code> \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u90a3\u4e48 <code>sorted</code> \u51fd\u6570\u5c06\u6839\u636e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6392\u5e8f\u3002</p> </li> <li> <p>\u5982\u679c <code>key</code> \u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u90a3\u4e48\u5b83\u5c06\u88ab\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684\u952e\u3002\u4f8b\u5982\uff0c<code>sorted_people = sorted(people, key=lambda person: person[\"age\"])</code> \u5c06\u6839\u636e\u6bcf\u4e2a\u4eba\u7684\u5e74\u9f84\u5bf9 <code>people</code> \u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002</p> </li> </ul> <p>\u8fd9\u4e2a <code>lambda</code> \u51fd\u6570\u662f\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 <code>lambda arguments: expression</code> \u3002</p> <pre><code>- `arguments` : \u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff0c\u7528\u9017\u53f7\u5206\u9694\u3002\n- `expression` : \u51fd\u6570\u7684\u8868\u8fbe\u5f0f\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u5c31\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\n</code></pre> <p>Note</p> <p><code>with</code> \u8bed\u53e5\u7528\u4e8e\u7ba1\u7406\u6587\u4ef6\u7684\u4e0a\u4e0b\u6587\uff0c\u5f53 <code>with</code> \u8bed\u53e5\u5757\u7ed3\u675f\u65f6\uff0c\u65e0\u8bba\u662f\u5426\u53d1\u751f\u5f02\u5e38\uff0c\u6587\u4ef6\u5bf9\u8c61\u90fd\u4f1a\u88ab\u6b63\u786e\u5173\u95ed\u3002</p>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#csv","title":"csv","text":"<p>Info</p> <p>\u8981\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff0c\u9700\u8981 <code>import csv</code> \u3002</p> <p>Note</p> <p><code>csv</code> \u6a21\u5757\u7528\u4e8e\u8bfb\u5199 CSV\uff08Comma-Separated Values\uff0c\u9017\u53f7\u5206\u9694\u503c\uff09\u6587\u4ef6\u3002CSV \u6587\u4ef6\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u6587\u672c\u6587\u4ef6\u683c\u5f0f\uff0c\u7528\u4e8e\u5b58\u50a8\u8868\u683c\u6570\u636e\u3002\u6bcf\u884c\u6570\u636e\u7531\u591a\u4e2a\u5b57\u6bb5\u7ec4\u6210\uff0c\u5b57\u6bb5\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002</p> <pre><code>with open(\"file.csv\", \"r\") as f:\n    reader = csv.reader(f)\n    for row in reader:\n        print(row[0])\n</code></pre> <ul> <li>\u8bfb\u53d6CSV\u6587\u4ef6\uff0c\u81ea\u52a8\u8bc6\u522b\u5206\u9694\u7b26</li> </ul> <pre><code>reader = csv.DictReader(f)\nfor row in reader:\n    print(row[\"name\"])\n</code></pre> <ul> <li>\u8bfb\u53d6CSV\u6587\u4ef6\uff0c\u7b2c\u4e00\u884c\u662f\u5217\u540d</li> </ul> <pre><code>with open(\"file.csv\", \"a\", newline=\"\") as f:\n    writer = csv.writer(f)\n    writer.writerow([\"Name\", \"Age\", \"City\"])\n</code></pre> <ul> <li>\u5199\u5165CSV\u6587\u4ef6\uff0c\u6307\u5b9a\u5217\u540d</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#re","title":"re","text":"<p>Info</p> <p>\u8981\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff0c\u9700\u8981 <code>import re</code> \u3002</p> <p>Note</p> <p><code>re</code> \u6a21\u5757\u7528\u4e8e\u5728\u5b57\u7b26\u4e32\u4e2d\u641c\u7d22\u548c\u66ff\u6362\u6a21\u5f0f\u3002\u5b83\u63d0\u4f9b\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u64cd\u4f5c\u7684\u5404\u79cd\u51fd\u6570\uff0c\u5982\u641c\u7d22\u3001\u5339\u914d\u3001\u66ff\u6362\u7b49\u3002</p> <pre><code>re.search(pattern, string, flags=0)\n</code></pre> <ul> <li> <p>\u7528\u4e8e\u5728\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u4e2d\u641c\u7d22\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u5339\u914d\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5339\u914d\u5bf9\u8c61\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56de None\u3002</p> </li> <li> <p><code>pattern</code> : \u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\uff0c\u7528\u4e8e\u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\u3002</p> </li> <li> <p><code>string</code> : \u8981\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u3002</p> </li> <li> <p><code>flags</code> : \u53ef\u9009\u53c2\u6570\uff0c\u7528\u4e8e\u4fee\u6539\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5339\u914d\u884c\u4e3a\u3002\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u8868\u793a\u4e0d\u4f7f\u7528\u4efb\u4f55\u6807\u5fd7\u3002</p> </li> </ul> about pattern <p>\".\" \u5339\u914d\u9664\u6362\u884c\u7b26\u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26 \"^\" \u5339\u914d\u5b57\u7b26\u4e32\u7684\u5f00\u5934 \"$\" \u5339\u914d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e \"*\" \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u591a\u6b21 \"+\" \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u4e00\u6b21\u6216\u591a\u6b21 \"?\" \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u4e00\u6b21 \"{n}\" \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0fn\u6b21 \"{n,}\" \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u81f3\u5c11n\u6b21 \"{n,m}\" \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u81f3\u5c11n\u6b21,\u81f3\u591am\u6b21 \"[...]\" \u5339\u914d\u65b9\u62ec\u53f7\u5185\u7684\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 \"[^...]\" \u5339\u914d\u4e0d\u5728\u65b9\u62ec\u53f7\u5185\u7684\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 \"\\d\" \u5339\u914d\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26 \"\\D\" \u5339\u914d\u4e00\u4e2a\u975e\u6570\u5b57\u5b57\u7b26 \"\\s\" \u5339\u914d\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26 \"\\S\" \u5339\u914d\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26 \"\\w\" \u5339\u914d\u4e00\u4e2a\u5b57\u6bcd\u6216\u6570\u5b57\u5b57\u7b26 \"\\W\" \u5339\u914d\u4e00\u4e2a\u975e\u5b57\u6bcd\u6216\u6570\u5b57\u5b57\u7b26 \"(A|B)\" \u5339\u914dA\u6216B \"()\" \u5339\u914d\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f</p> about flags <p><code>re.I</code> | <code>re.IGNORECASE</code> \u5ffd\u7565\u5927\u5c0f\u5199</p> <p><code>re.M</code> | <code>re.MULTILINE</code> \u591a\u884c\u6a21\u5f0f,\u6539\u53d8 <code>^</code> \u548c <code>$</code> \u7684\u884c\u4e3a, <code>^</code> \u548c <code>$</code> \u53ef\u4ee5\u5339\u914d\u6bcf\u884c\u7684\u5f00\u59cb\u548c\u7ed3\u675f\uff09</p> <p><code>re.S</code> \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>.</code> \u5b57\u7b26\u5728\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u5339\u914d\u9664\u6362\u884c\u7b26\u4ee5\u5916\u7684\u4efb\u4f55\u5b57\u7b26\u3002\u4f7f\u7528 <code>re.S</code> | <code>re.DOTALL</code> \u53ef\u4f7f <code>.</code> \u5b57\u7b26\u5c06\u5339\u914d\u4efb\u4f55\u5b57\u7b26\uff0c\u5305\u62ec\u6362\u884c\u7b26\u3002</p>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#example","title":"example","text":"<pre><code>    email = input(\"Enter your email: \").strip()\n    re.research(r\".+@.+\\.edu\",email)\n</code></pre> <ul> <li> <p><code>r</code> \u8868\u793a\u5b57\u7b26\u4e32\u662f\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u4e0d\u4f1a\u5bf9\u53cd\u659c\u6760\u8fdb\u884c\u8f6c\u4e49\uff0c\u4e5f\u5373\u4e0d\u9700\u8981\u89e3\u91ca\u5668\u518d\u6b21\u8fdb\u884c\u8f6c\u4e49\u3002</p> </li> <li> <p><code>\\.edu</code> \u8868\u793a\u5339\u914d\u5b57\u7b26 <code>.edu</code> \u3002\u7531\u4e8e <code>.</code> \u5728\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u662f\u4e00\u4e2a\u7279\u6b8a\u5b57\u7b26\uff0c\u8868\u793a\u4efb\u610f\u5b57\u7b26\uff0c\u6240\u4ee5\u9700\u8981\u7528 <code>\\</code> \u8fdb\u884c\u8f6c\u4e49\uff0c\u8868\u793a\u5339\u914d\u5b57\u7b26 <code>.</code> \u3002</p> </li> <li> <p>\u8fd9\u6bb5\u4ee3\u7801\u7684\u7528\u9014\u662f\u68c0\u67e5\u4e00\u4e2a\u7ed9\u5b9a\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u662f\u5426\u5305\u542b <code>@</code> \u7b26\u53f7\uff0c\u5e76\u4e14\u57df\u540d\u90e8\u5206\u662f\u5426\u4ee5 <code>.edu</code> \u7ed3\u5c3e\u3002</p> </li> </ul> <pre><code>matches = re.research(r\"^(.+), (.+)$\", name)\nif matches:\n    last, first = matches.groups()\nprint(f\"Last name: {last}, First name: {first}\")\n\n# or\nif matches:\n    last = matches.group(1) \n    first = matches.group(2)\nprint(f\"Last name: {last}, First name: {first}\")\n</code></pre> <ul> <li> <p><code>^</code> \u5339\u914d\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e</p> </li> <li> <p><code>(.+)</code> \u5339\u914d\u4e00\u4e2a\u6216\u591a\u4e2a\u4efb\u610f\u5b57\u7b26\uff0c\u5e76\u5c06\u5176\u6355\u83b7\u4e3a\u4e00\u4e2a\u7ec4</p> </li> <li> <p><code>,</code> \u5339\u914d\u4e00\u4e2a\u9017\u53f7\u548c\u4e00\u4e2a\u7a7a\u683c</p> </li> <li> <p><code>(.+)</code> \u5339\u914d\u4e00\u4e2a\u6216\u591a\u4e2a\u4efb\u610f\u5b57\u7b26\uff0c\u5e76\u5c06\u5176\u6355\u83b7\u4e3a\u53e6\u4e00\u4e2a\u7ec4</p> </li> <li> <p><code>$</code> \u5339\u914d\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e</p> </li> <li> <p><code>matches.groups()</code> \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u6355\u83b7\u7ec4\u7684\u5143\u7ec4\uff0c\u5143\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u6355\u83b7\u7ec4\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>matches.groups()</code> \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f <code>last</code>\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f <code>first</code>\u3002</p> </li> </ul> <pre><code>url = input(\"Enter URL: \").strip()\n\nusername = url.replace(\"http://\", \"\")\n# or\nusername = url.removeprefix(\"http://\")\n\nusername = re.sub(r\"^(https?://)?(www\\.)?twitter\\.com/\", \"\", url)\n\n# attention: group(0) is the whole match and group(1) is the first group (www\\.)\nmatches = re.search(r\"https?://(www\\.)?twitter\\.com/(.+)\", url,re.IGNORECASE).group(2)\n</code></pre> <ul> <li>\u627e\u51fa <code>url</code> \u4e2d\u7684 <code>twitter</code> \u7528\u6237\u540d\uff0c\u5ffd\u7565\u5927\u5c0f\u5199</li> </ul> <p>Note</p> <p><code>re.sub(pattern, repl, string, count=0, flags=0)</code></p> <ul> <li> <p><code>pattern</code> \uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\uff0c\u7528\u4e8e\u5339\u914d\u8981\u66ff\u6362\u7684\u5b50\u4e32\u3002</p> </li> <li> <p><code>repl</code> \uff1a\u66ff\u6362\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u66ff\u6362\u5339\u914d\u5230\u7684\u5b50\u4e32\u3002</p> </li> <li> <p><code>string</code> \uff1a\u8981\u641c\u7d22\u548c\u66ff\u6362\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u3002</p> </li> <li> <p><code>count</code> \uff1a\u53ef\u9009\u53c2\u6570\uff0c\u6307\u5b9a\u66ff\u6362\u7684\u6700\u5927\u6b21\u6570\u3002\u9ed8\u8ba4\u4e3a 0\uff0c\u8868\u793a\u66ff\u6362\u6240\u6709\u5339\u914d\u7684\u5b50\u4e32\u3002</p> </li> <li> <p><code>flags</code> \uff1a\u53ef\u9009\u53c2\u6570\uff0c\u7528\u4e8e\u4fee\u6539\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5339\u914d\u884c\u4e3a\u3002\u4f8b\u5982\uff0c<code>re.IGNORECASE</code> \u8868\u793a\u5ffd\u7565\u5927\u5c0f\u5199\u3002</p> </li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#class","title":"class","text":"<p>Info</p> <p>\u8fd8\u6ca1\u6574\u7406\u5b8c\uff0c\u5f85\u7eed\u3002\u4f30\u8ba1\u4f1a\u7b49\u5230 cpp \u6574\u7406\u5b8c\u518d\u6574\u7406\u3002(\u5495\u5495\u5495)</p> <pre><code>class Student:\n    def __init__(self, name, house=None):\n        # \u5982\u679c house \u6ca1\u6709\u4f20\u5165\u503c\uff0c\u5219\u9ed8\u8ba4\u4e3a None\n\n        if not name:\n            raise ValueError(\"Name is required\")\n        self.name = name\n        self.house = house\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n    @property\n    def house(self):\n        return self._house\n\n    @house.setter\n    def house(self, value):\n        if not value:\n            raise ValueError(\"House is required\")\n        self._house = value\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#set","title":"set","text":"<pre><code>numbers = {1, 2, 3, 4}\n</code></pre> <ul> <li>\u521b\u5efa\u96c6\u5408\uff0c\u5982\u679c\u96c6\u5408\u4e2d\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u5219\u53ea\u4f1a\u4fdd\u7559\u4e00\u4e2a\u3002</li> </ul> <p>Note</p> <p>\u96c6\u5408\u662f\u65e0\u5e8f\u7684\uff0c\u4e0d\u80fd\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\u5143\u7d20\u3002\u96c6\u5408\u7684\u5143\u7d20\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\uff08\u5982\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\u7b49\uff09\uff0c\u4e0d\u80fd\u662f\u5217\u8868\u3001\u5b57\u5178\u6216\u96c6\u5408\u7b49\u53ef\u53d8\u7c7b\u578b\u3002</p> <pre><code>numbers.add(5)\nnumbers.remove(3)\n</code></pre> <ul> <li> <p><code>add()</code> \u65b9\u6cd5\u7528\u4e8e\u5411\u96c6\u5408\u4e2d\u6dfb\u52a0\u5143\u7d20\u3002</p> </li> <li> <p><code>remove()</code> \u65b9\u6cd5\u7528\u4e8e\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\u3002\u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u5f15\u53d1 <code>KeyError</code> \u5f02\u5e38\u3002</p> </li> </ul> <pre><code>numbers1 = {1, 2, 3}\nnumbers2 = {2, 3, 4}\n\nintersection = numbers1 &amp; numbers2\nunion = numbers1 | numbers2\ndifference = numbers1 - numbers2\n</code></pre> <ul> <li> <p><code>&amp;</code> \u8fd0\u7b97\u7b26\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\u3002</p> </li> <li> <p><code>|</code> \u8fd0\u7b97\u7b26\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6\u3002</p> </li> <li> <p><code>-</code> \u8fd0\u7b97\u7b26\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u96c6\u5408\u7684\u5dee\u96c6\u3002</p> </li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#argparse","title":"argparse","text":"<p>Info</p> <p>\u8981\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff0c\u9700\u8981 <code>import argparse</code>\u3002</p> <pre><code>parser = argparse.ArgumentParser(description=\"\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u811a\u672c\")\n</code></pre> <ul> <li>\u521b\u5efaArgumentParser\u5bf9\u8c61</li> </ul> <pre><code>parser.add_argument('input_file', type=str, help='\u8f93\u5165\u6587\u4ef6\u7684\u8def\u5f84')\nparser.add_argument('-o', '--output_file', type=str, default='output.txt', help='\u8f93\u51fa\u6587\u4ef6\u7684\u8def\u5f84')\nparser.add_argument('-n', '--number', type=int, default=10, help='\u8981\u5904\u7406\u7684\u6570\u91cf')\n</code></pre> <ul> <li>\u6dfb\u52a0\u53c2\u6570\uff0c<code>add_argument()</code> \u65b9\u6cd5\u7528\u4e8e\u6dfb\u52a0\u547d\u4ee4\u884c\u53c2\u6570\u3002\u53c2\u6570\u7684\u540d\u79f0\u3001\u7c7b\u578b\u548c\u9ed8\u8ba4\u503c\u90fd\u53ef\u4ee5\u6307\u5b9a\u3002</li> </ul> <pre><code>args = parser.parse_args()\n</code></pre> <ul> <li>\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u5728 <code>args</code> \u5bf9\u8c61\u4e2d\u3002</li> </ul> <pre><code>print(f\"Name: {args.name}, Age: {args.age}\")\n</code></pre> <ul> <li>\u4f7f\u7528 <code>args</code> \u5bf9\u8c61\u7684\u5c5e\u6027\u8bbf\u95ee\u547d\u4ee4\u884c\u53c2\u6570\u7684\u503c\uff0c\u5e76\u6253\u5370\u51fa\u6765\u3002</li> </ul> example <pre><code>import argparse\n\nparser = argparse.ArgumentParser(description=\"\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u811a\u672c\")\n\nparser.add_argument('input_file', type=str, help='\u8f93\u5165\u6587\u4ef6\u7684\u8def\u5f84')\n\nparser.add_argument('-o', '--output_file', type=str, default='output.txt', help='\u8f93\u51fa\u6587\u4ef6\u7684\u8def\u5f84')\n\nparser.add_argument('-n', '--number', type=int, default=10, help='\u8981\u5904\u7406\u7684\u6570\u91cf')\n\nargs = parser.parse_args()\n\nprint(f\"Name: {args.name}, Age: {args.age}\")\n</code></pre> output <pre><code>$ python example.py input.txt -o output.txt -n 5\n</code></pre> <p>\u8f93\u5165\u6587\u4ef6: input.txt</p> <p>\u8f93\u51fa\u6587\u4ef6: output.txt</p> <p>\u6570\u91cf: 5</p> you can see them by typing --help <pre><code>$ python example.py --help\n</code></pre> <p>\u6b64\u65f6\u4f1a\u51fa\u73b0</p> <pre><code>usage: your_script.py [-h] [-o OUTPUT_FILE] [-n NUMBER] input_file\n\n\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u811a\u672c\n\npositional arguments:\ninput_file            \u8f93\u5165\u6587\u4ef6\u7684\u8def\u5f84\n\noptional arguments:\n-h, --help            show this help message and exit\n-o OUTPUT_FILE, --output_file OUTPUT_FILE\n                        \u8f93\u51fa\u6587\u4ef6\u7684\u8def\u5f84\n-n NUMBER, --number NUMBER\n                        \u8981\u5904\u7406\u7684\u6570\u91cf\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#unpacking","title":"unpacking","text":"<p>Note</p> <p>unpacking \u662f\u6307\u5c06\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u5982\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\u7b49\uff09\u4e2d\u7684\u5143\u7d20\u89e3\u5305\u4e3a\u591a\u4e2a\u53d8\u91cf\u3002<code>*</code> \u8fd0\u7b97\u7b26\u7528\u4e8e\u5c06\u5217\u8868\u6216\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u89e3\u5305\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u3002</p> <pre><code>def totall(yuan, jiao, fen):\n    total = yuan * 100 + jiao * 10 + fen\n\ncoins = [1, 1, 1]\n\nprint(totall(*coins))\n</code></pre> <ul> <li>\u4f7f\u7528\u89e3\u5305\u64cd\u4f5c\u7b26 <code>*</code> \u5c06 <code>coins</code> \u5217\u8868\u7684\u5143\u7d20\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9  <code>totall</code> \u51fd\u6570\u3002\u5982\u679c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u53c2\u6570\u6570\u91cf\u4e0d\u5339\u914d\uff0cPython \u4f1a\u629b\u51fa\u4e00\u4e2a <code>TypeError</code> \u5f02\u5e38\uff0c\u5e76\u663e\u793a\u4e00\u6761\u9519\u8bef\u6d88\u606f\u3002</li> </ul> <pre><code>package = {\"yuan\": 1, \"jiao\": 1, \"fen\": 1}\n\nprint(totall(**package))\n</code></pre> <ul> <li>\u4f7f\u7528\u89e3\u5305\u64cd\u4f5c\u7b26 <code>**</code> \u5c06 <code>package</code> \u5b57\u5178\u4e2d\u7684\u952e\u503c\u5bf9\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u7ed9 <code>totall</code> \u51fd\u6570\u3002</li> </ul> <pre><code>def f(*args, **kwargs):\n    print(args)\n    print(kwargs)  \n\n# e.g.\nf(1, 2, 3, a=4, b=5)\n</code></pre> <ul> <li>\u793a\u4f8b\u7ed3\u679c\uff1a</li> </ul> <pre><code>(1, 2, 3)\n{'a': 4, 'b': 5}\n</code></pre> <ul> <li> <p><code>*args</code>\uff1a\u7528\u4e8e\u5c06\u53ef\u53d8\u6570\u91cf\u7684\u4f4d\u7f6e\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002<code>args</code> \u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u6240\u6709\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u4f4d\u7f6e\u53c2\u6570\u3002</p> </li> <li> <p><code>**kwargs</code>\uff1a\u7528\u4e8e\u5c06\u53ef\u53d8\u6570\u91cf\u7684\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002<code>kwargs</code> \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002</p> </li> </ul> <p>Attention</p> <p><code>*args</code> \u548c <code>**kwargs</code> \u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\uff0c\u4f46 <code>*args</code> \u5fc5\u987b\u5728 <code>**kwargs</code> \u4e4b\u524d\uff0c\u5426\u5219\u4f1a\u5f15\u53d1\u8bed\u6cd5\u9519\u8bef\u3002</p>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#map","title":"map","text":"<pre><code>numbers = [1, 2, 3, 4]\nsquared = list(map(lambda x: x**2, numbers))\n</code></pre> <ul> <li><code>map()</code>\uff1a\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5e8f\u5217\u3002\u51fd\u6570\u7528\u4e8e\u5904\u7406\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#filter","title":"filter","text":"<pre><code>numbers = [1, 2, 3, 4, 5]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n</code></pre> <ul> <li><code>filter()</code>\uff1a\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5e8f\u5217\u3002\u51fd\u6570\u7528\u4e8e\u6d4b\u8bd5\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u51fd\u6570\u8fd4\u56de True\uff0c\u5219\u8be5\u5143\u7d20\u4f1a\u88ab\u5305\u542b\u5728\u7ed3\u679c\u4e2d\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#enumerate","title":"enumerate","text":"<pre><code>for idx, value in enumerate(['a', 'b', 'c']):\n    print(f\"Index {idx}: {value}\")\n</code></pre> <ul> <li><code>enmuerate(iterable, start)</code> \u51fd\u6570\u7528\u4e8e\u904d\u5386\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u6bcf\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u548c\u503c\u3002\u5176\u4e2d\uff0c <code>iterable</code> \u662f\u8981\u904d\u5386\u7684\u5e8f\u5217\uff0c<code>start</code> \u662f\u7d22\u5f15\u7684\u8d77\u59cb\u503c\uff0c\u9ed8\u8ba4\u4e3a 0\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#yield","title":"yield","text":"<pre><code>def countdown(n):\n    while n &gt; 0:\n        yield n\n        n -= 1\n\nfor i in countdown(5):\n    print(i)\n\n# or\ngen = countdown(5)\nwhile True:\n    try:\n        print(next(gen))\n    except StopIteration:\n        break\n</code></pre> <p>Note</p> <p>If it is return, when the n is too large, it will cause memory error.</p> <p>If it is yield, it will not cause memory error.</p> <p>\u5b83\u4f1a\u7ed9\u4e00\u4e2a\u8f93\u51fa\u518d\u7ed9\u4e00\u4e2a\u8f93\u51fa\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u8f93\u51fa</p>"},{"location":"Computer_Science/Programming_Language/python/CS50P_python/#pyttsx3","title":"pyttsx3","text":"<p>Info</p> <p>\u8981\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff0c\u9700\u8981 <code>import pyttsx3</code> \u3002</p> <p>Note</p> <p><code>pyttsx3</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u8bed\u97f3\u7684 Python \u5e93\u3002</p> <pre><code>engine = pyttsx3.init()\n</code></pre> <ul> <li>\u521d\u59cb\u5316\u8bed\u97f3\u5f15\u64ce</li> </ul> <pre><code>engine.setProperty('rate', 150)\n</code></pre> <ul> <li>\u8bbe\u7f6e\u8bed\u901f</li> </ul> <pre><code>engine.setProperty('volume', 1)\n</code></pre> <ul> <li>\u8bbe\u7f6e\u97f3\u91cf</li> </ul> <pre><code>engine.say(\"Hello, this is an example of pyttsx3.\")\n</code></pre> <ul> <li>\u8ba9\u5f15\u64ce\u53d1\u51fa\u8bed\u97f3</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/","title":"Python-100-Days","text":"<p> \u7ea6 3949 \u4e2a\u5b57  266 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 23 \u5206\u949f</p> <p>Abstract</p> <p>\u8fd9\u662f\u6211\u5728\u5b66\u4e60 \"Python-100-Days\" \u65f6\u6240\u505a\u7684\u7b14\u8bb0 (\u8fd9\u91cc\u6307\u8defGitHub\u94fe\u63a5\ud83d\udd17) </p>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day03","title":"Day03 \u53d8\u91cf","text":""},{"location":"Computer_Science/Programming_Language/python/python100days/#_1","title":"\u68c0\u67e5\u53d8\u91cf\u7c7b\u578b","text":"<ul> <li><code>type()</code></li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/#python","title":"\u901a\u8fc7 Python \u5185\u7f6e\u7684\u51fd\u6570\u6765\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b","text":"<ul> <li><code>ord()</code> \uff1a \u5c06\uff08\u4e00\u4e2a\u5b57\u7b26\u7684\uff09\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u6574\u6570\uff08\u5b57\u7b26\u7f16\u7801\uff09\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day04","title":"Day04 \u8fd0\u7b97\u7b26","text":""},{"location":"Computer_Science/Programming_Language/python/python100days/#_2","title":"\u8d4b\u503c\u8fd0\u7b97\u7b26 <code>:=</code>","text":"\u7b26\u53f7 \u7c7b\u578b \u4f5c\u7528 \u4f7f\u7528\u573a\u666f = \u8d4b\u503c\u8bed\u53e5 \u5c06\u53f3\u4fa7\u7684\u503c\u8d4b\u7ed9\u5de6\u4fa7\u7684\u53d8\u91cf \u53ea\u80fd\u5728\u72ec\u7acb\u7684\u8bed\u53e5\u4e2d\u4f7f\u7528 := \u8868\u8fbe\u5f0f \u5728\u8868\u8fbe\u5f0f\u5185\u90e8\u8d4b\u503c\u5e76\u8fd4\u56de\u503c \u6761\u4ef6\u5224\u65ad\u3001\u5faa\u73af\u3001\u63a8\u5bfc\u5f0f\u7b49\u8868\u8fbe\u5f0f\u5185 \u7b26\u53f7 \u8bed\u8a00 \u4f5c\u7528 \u5e38\u89c1\u8bef\u7528\u573a\u666f = C \u8d4b\u503c\u8d4b\u503c\uff08\u8fd4\u56de\u88ab\u8d4b\u7684\u503c\uff09 \u5728\u6761\u4ef6\u4e2d\u8bef\u7528 = \u4ee3\u66ff == == C \u6bd4\u8f83\u662f\u5426\u76f8\u7b49 \u65e0 = Python \u8d4b\u503c\uff08\u4e0d\u8fd4\u56de\u503c\uff0c\u662f\u8bed\u53e5\uff09 \u4e0d\u80fd\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528 := Python \u8868\u8fbe\u5f0f\u5185\u8d4b\u503c\uff08\u8fd4\u56de\u88ab\u8d4b\u7684\u503c\uff09 \u9700\u6ce8\u610f\u4f5c\u7528\u57df\u548c\u53ef\u8bfb\u6027 <p>example code to show the difference between = and :=</p> <pre><code>print((a := 10))  # 10\nprint(a)          # 10\na = 10\n# print(a = 11) # 'a' is an invalid keyword argument for print()\n</code></pre> <pre><code>#include&lt;stdio.h&gt;\n\nint main(){\n    int a = 10;\n    printf(\"%d\\n\", a = 11);\n    printf(\"%d\\n\", a);\n    return 0;\n}\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_3","title":"\u4f18\u5148\u7ea7","text":"<ul> <li>\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u8d4b\u503c\u8fd0\u7b97\u7b26</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_4","title":"\u5360\u4f4d\u7b26","text":"<pre><code>\"\"\"\n\u5c06\u534e\u6c0f\u6e29\u5ea6\u8f6c\u6362\u4e3a\u6444\u6c0f\u6e29\u5ea6\n\"\"\"\nf = float(input('\u8bf7\u8f93\u5165\u534e\u6c0f\u6e29\u5ea6: '))\nc = (f - 32) / 1.8\nprint('%.1f\u534e\u6c0f\u5ea6 = %.1f\u6444\u6c0f\u5ea6' % (f, c))\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5bf9 <code>print</code> \u51fd\u6570\u8f93\u51fa\u7684\u5185\u5bb9\u8fdb\u884c\u4e86\u683c\u5f0f\u5316\u5904\u7406\uff0c <code>print</code> \u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u4e2d\u6709\u4e24\u4e2a <code>%.1f</code> \u5360\u4f4d\u7b26\uff0c\u8fd9\u4e24\u4e2a\u5360\u4f4d\u7b26\u4f1a\u88ab <code>%</code> \u4e4b\u540e\u7684 <code>(f, c)</code> \u4e2d\u7684\u4e24\u4e2a <code>float</code> \u7c7b\u578b\u7684\u53d8\u91cf\u503c\u7ed9\u66ff\u6362\u6389\uff0c\u6d6e\u70b9\u6570\u5c0f\u6570\u70b9\u540e\u4fdd\u75591\u4f4d\u6709\u6548\u6570\u5b57\u3002\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u6709 <code>%d</code> \u5360\u4f4d\u7b26\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u7528 <code>int</code> \u7c7b\u578b\u7684\u503c\u66ff\u6362\u6389\u5b83\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u6709 <code>%s</code> \u5360\u4f4d\u7b26\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab <code>str</code> \u7c7b\u578b\u7684\u503c\u66ff\u6362\u6389\u3002</p> <p>Python \u4e2d\u8fd8\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u529e\u6cd5\u6765\u683c\u5f0f\u5316\u8f93\u51fa\uff0c\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u5e26\u5360\u4f4d\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u524d\u9762\u7684 <code>f</code> \u8868\u793a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u9700\u8981\u683c\u5f0f\u5316\u5904\u7406\u7684\uff0c\u5176\u4e2d\u7684 <code>{f:.1f}</code> \u548c <code>{c:.1f}</code> \u53ef\u4ee5\u5148\u770b\u6210\u662f <code>{f}</code> \u548c <code>{c}</code> \uff0c\u8868\u793a\u8f93\u51fa\u65f6\u4f1a\u7528\u53d8\u91cf <code>f</code> \u548c\u53d8\u91cf <code>c</code> \u7684\u503c\u66ff\u6362\u6389\u8fd9\u4e24\u4e2a\u5360\u4f4d\u7b26\uff0c\u540e\u9762\u7684 <code>:.1f</code> \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u5c0f\u6570\u70b9\u540e\u4fdd\u75591\u4f4d\u6709\u6548\u6570\u5b57\u3002</p> <pre><code>\"\"\"\n\u5c06\u534e\u6c0f\u6e29\u5ea6\u8f6c\u6362\u4e3a\u6444\u6c0f\u6e29\u5ea6\n\"\"\"\nf = float(input('\u8bf7\u8f93\u5165\u534e\u6c0f\u6e29\u5ea6: '))\nc = (f - 32) / 1.8\nprint(f'{f:.1f}\u534e\u6c0f\u5ea6 = {c:.1f}\u6444\u6c0f\u5ea6')\n</code></pre> <p>\u5176\u5b9e\u8fd8\u6709\u4e00\u79cd\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u65b9\u5f0f\uff0c\u662f Python 3.8 \u4e2d\u589e\u52a0\u7684\u65b0\u7279\u6027\u3002\u8fd9\u79cd\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u65b9\u5f0f\u4f1a\u540c\u65f6\u8f93\u51fa\u53d8\u91cf\u540d\u548c\u53d8\u91cf\u503c\u3002</p> <pre><code>\"\"\"\n\u8f93\u5165\u534a\u5f84\u8ba1\u7b97\u5706\u7684\u5468\u957f\u548c\u9762\u79ef\n\"\"\"\nimport math\n\nradius = float(input('\u8bf7\u8f93\u5165\u5706\u7684\u534a\u5f84: '))  # \u8f93\u5165: 5.5\nperimeter = 2 * math.pi * radius\narea = math.pi * radius ** 2\nprint(f'{perimeter = :.2f}')  # \u8f93\u51fa\uff1aperimeter = 34.56\nprint(f'{area = :.2f}')       # \u8f93\u51fa\uff1aarea = 95.03\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day05","title":"Day05 \u5206\u652f\u7ed3\u6784","text":""},{"location":"Computer_Science/Programming_Language/python/python100days/#match","title":"match \u8bed\u53e5","text":"<ul> <li>\u7c7b\u4f3c\u4e8e <code>switch</code> \u8bed\u53e5\u3002</li> <li>\u5176\u4e2d <code>_</code> \u8868\u793a\u9ed8\u8ba4\u60c5\u51b5\uff0c\u7c7b\u4f3c\u4e8e <code>switch</code> \u8bed\u53e5\u4e2d\u7684 <code>default</code> \u3002</li> </ul> <pre><code>status_code = int(input('\u54cd\u5e94\u72b6\u6001\u7801: '))\nmatch status_code:\n    case 400: description = 'Bad Request'\n    case 401: description = 'Unauthorized'\n    case 403: description = 'Forbidden'\n    case 404: description = 'Not Found'\n    case 405: description = 'Method Not Allowed'\n    case 418: description = 'I am a teapot'\n    case 429: description = 'Too many requests'\n    case _: description = 'Unknown Status Code'\nprint('\u72b6\u6001\u7801\u63cf\u8ff0:', description)\n</code></pre> <ul> <li>\u8fd8\u6709\u5408\u5e76\u7248\u672c</li> </ul> <pre><code>status_code = int(input('\u54cd\u5e94\u72b6\u6001\u7801: '))\nmatch status_code:\n    case 400 | 405: description = 'Invalid Request'\n    case 401 | 403 | 404: description = 'Not Allowed'\n    case 418: description = 'I am a teapot'\n    case 429: description = 'Too many requests'\n    case _: description = 'Unknown Status Code'\nprint('\u72b6\u6001\u7801\u63cf\u8ff0:', description)\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day06","title":"Day06 \u5faa\u73af\u7ed3\u6784","text":""},{"location":"Computer_Science/Programming_Language/python/python100days/#range","title":"range","text":"<ul> <li>\u6309\u7167 Python \u7684\u7f16\u7a0b\u60ef\u4f8b\uff0c\u6211\u4eec\u901a\u5e38\u628a\u5faa\u73af\u53d8\u91cf\u547d\u540d\u4e3a <code>_</code> \uff0c\u8868\u793a\u8fd9\u4e2a\u53d8\u91cf\u5728\u5faa\u73af\u4e2d\u4e0d\u4f1a\u88ab\u7528\u5230\u3002</li> </ul> <pre><code>import time\n\nfor _ in range(10):\n    print('\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u5b66 Python')\n    time.sleep(1)\n</code></pre> <p>\u540c\u6837\u7684\uff0c<code>range()</code> \u51fd\u6570\u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8d77\u59cb\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7ec8\u6b62\u503c\uff0c\u524d\u95ed\u540e\u5f00\u533a\u95f4\uff0c\u5373\u5305\u542b\u8d77\u59cb\u503c\uff0c\u4e0d\u5305\u542b\u7ec8\u6b62\u503c\u3002</p> <pre><code># range(start, stop, step)\nrange(0, 10, 2)  # [0, 2, 4, 6, 8]\nrange(10, 0, -2)  # [10, 8, 6, 4, 2]\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day08","title":"Day08 \u5217\u8868","text":"<p>\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c<code>[]</code> \u7684\u5143\u7d20\u4f4d\u7f6e\u53ef\u4ee5\u662f 0 \u5230 N - 1 \u7684\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f -1 \u5230 -N \u7684\u6574\u6570\uff0c\u5206\u522b\u79f0\u4e3a\u6b63\u5411\u7d22\u5f15\u548c\u53cd\u5411\u7d22\u5f15\uff0c\u5176\u4e2d N \u4ee3\u8868\u5217\u8868\u5143\u7d20\u7684\u4e2a\u6570\u3002\u5bf9\u4e8e\u6b63\u5411\u7d22\u5f15\uff0c<code>[0]</code> \u53ef\u4ee5\u8bbf\u95ee\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c<code>[N - 1]</code> \u53ef\u4ee5\u8bbf\u95ee\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1b\u5bf9\u4e8e\u53cd\u5411\u7d22\u5f15\uff0c<code>[-1]</code> \u53ef\u4ee5\u8bbf\u95ee\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c<code>[-N]</code> \u53ef\u4ee5\u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002</p>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_5","title":"\u5207\u7247","text":"<ul> <li>\u5982\u679c\u5e0c\u671b\u4e00\u6b21\u6027\u8bbf\u95ee\u5217\u8868\u4e2d\u7684\u591a\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u8fd0\u7b97\u3002</li> <li><code>[start:end:strride]</code> \u662f\u524d\u95ed\u540e\u5f00\u7684\uff0c\u4e5f\u5373 <code>[start, end)</code> \u3002</li> <li>\u5982\u679c <code>start</code> \u503c\u7b49\u4e8e 0\uff0c\u90a3\u4e48\u5728\u4f7f\u7528\u5207\u7247\u8fd0\u7b97\u7b26\u65f6\u53ef\u4ee5\u5c06\u5176\u7701\u7565\uff1b\u5982\u679c <code>end</code> \u503c\u7b49\u4e8e N\uff0cN \u4ee3\u8868\u5217\u8868\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u5728\u4f7f\u7528\u5207\u7247\u8fd0\u7b97\u7b26\u65f6\u53ef\u4ee5\u5c06\u5176\u7701\u7565\uff1b\u5982\u679c <code>stride</code> \u503c\u7b49\u4e8e 1\uff0c\u90a3\u4e48\u5728\u4f7f\u7528\u5207\u7247\u8fd0\u7b97\u7b26\u65f6\u4e5f\u53ef\u4ee5\u5c06\u5176\u7701\u7565\u3002</li> <li>\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5207\u7247\u64cd\u4f5c\u4fee\u6539\u5217\u8868\u4e2d\u7684\u5143\u7d20\u3002\u5e76\u4e14\u5207\u7247\u66ff\u6362\u7684\u5143\u7d20\u4e2a\u6570\u53ef\u4ee5\u4e0e\u539f\u5207\u7247\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u540c\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_6","title":"\u5143\u7d20\u7684\u904d\u5386","text":"<ul> <li>\u5728\u5faa\u73af\u7ed3\u6784\u4e2d\u901a\u8fc7\u7d22\u5f15\u8fd0\u7b97\uff0c\u904d\u5386\u5217\u8868\u5143\u7d20\u3002</li> </ul> <pre><code>languages = ['Python', 'Java', 'C++', 'Kotlin']\nfor index in range(len(languages)):\n    print(languages[index])\n</code></pre> <ul> <li>\u76f4\u63a5\u5bf9\u5217\u8868\u505a\u5faa\u73af\uff0c\u5faa\u73af\u53d8\u91cf\u5c31\u662f\u5217\u8868\u5143\u7d20\u7684\u4ee3\u8868\u3002</li> </ul> <pre><code>languages = ['Python', 'Java', 'C++', 'Kotlin']\nfor language in languages:\n    print(language)\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_7","title":"\u66f4\u6539\u5217\u8868\u5143\u7d20","text":""},{"location":"Computer_Science/Programming_Language/python/python100days/#_8","title":"\u6dfb\u52a0","text":"<ul> <li><code>append()</code> \u65b9\u6cd5\u53ef\u4ee5\u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u3002</li> <li><code>insert(index, element)</code> \u65b9\u6cd5\u53ef\u4ee5\u5728\u5217\u8868\u7684\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u3002</li> </ul> <pre><code>languages = ['Python', 'Java', 'C++']\nlanguages.append('JavaScript')\nprint(languages)  # ['Python', 'Java', 'C++', 'JavaScript']\nlanguages.insert(1, 'SQL')\nprint(languages)  # ['Python', 'SQL', 'Java', 'C++', 'JavaScript']\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_9","title":"\u5220\u9664","text":"<ul> <li><code>remove(element)</code> \u65b9\u6cd5\u53ef\u4ee5\u5220\u9664\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u5143\u7d20\u3002\u5982\u679c\u8981\u5220\u9664\u7684\u5143\u7d20\u5e76\u4e0d\u5728\u5217\u8868\u4e2d\uff0c\u4f1a\u5f15\u53d1 <code>ValueError</code> \u9519\u8bef\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u6240\u4ee5\u8981\u5148\u505a\u5224\u65ad\u3002\u5f53\u8981\u5220\u9664\u7684\u5143\u7d20\u5728\u5217\u8868\u4e2d\u5b58\u5728\u591a\u4e2a\u65f6\uff0c\u53ea\u4f1a\u5220\u9664\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u5143\u7d20\u3002</li> <li><code>pop(index)</code> \u65b9\u6cd5\u53ef\u4ee5\u5220\u9664\u5217\u8868\u4e2d\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u8be5\u5143\u7d20\u3002\u9ed8\u8ba4\u5220\u9664\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u7d22\u5f15\u7684\u503c\u8d85\u51fa\u4e86\u8303\u56f4\uff0c\u4f1a\u5f15\u53d1 <code>IndexError</code> \u5f02\u5e38\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002</li> <li><code>clear()</code> \u65b9\u6cd5\u53ef\u4ee5\u6e05\u7a7a\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002</li> <li><code>del</code> \u8bed\u53e5\u53ef\u4ee5\u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u8bed\u6cd5\u4e0e <code>pop()</code> \u65b9\u6cd5\u7c7b\u4f3c\u3002</li> </ul> <pre><code>languages = ['Python', 'SQL', 'Java', 'C++', 'JavaScript']\nif 'Java' in languages:\n    languages.remove('Java')\nif 'Swift' in languages:\n    languages.remove('Swift')\nprint(languages)  # ['Python', 'SQL', C++', 'JavaScript']\nlanguages.pop() # now languages = ['Python', 'SQL', C++']\ntemp = languages.pop(1)\nprint(temp)       # SQL\nlanguages.append(temp)\nprint(languages)  # ['Python', C++', 'SQL']\nlanguages.clear()\nprint(languages)  # []\nitems = ['Python', 'Java', 'C++']\ndel items[1]\nprint(items)  # ['Python', 'C++']\n</code></pre> <p><code>del</code> \u5bf9\u5e94\u7684\u5e95\u5c42\u5b57\u8282\u7801\u6307\u4ee4\u662f<code>DELETE_SUBSCR</code>\uff0c\u800c <code>pop</code> \u5bf9\u5e94\u7684\u5e95\u5c42\u5b57\u8282\u7801\u6307\u4ee4\u662f <code>CALL_METHOD</code> \u548c <code>POP_TOP</code> \uff0c\u524d\u8005\u5728\u6027\u80fd\u4e0a\u66f4\u4f18\u3002</p>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_10","title":"\u5143\u7d20\u4f4d\u7f6e\u548c\u9891\u6b21","text":"<p>\u5217\u8868\u7684 <code>index</code> \u65b9\u6cd5\u53ef\u4ee5\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u5982\u679c\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u5143\u7d20\uff0c<code>index</code> \u65b9\u6cd5\u4f1a\u5f15\u53d1 <code>ValueError</code> \u9519\u8bef\uff1b\u5217\u8868\u7684 <code>count</code> \u65b9\u6cd5\u53ef\u4ee5\u7edf\u8ba1\u4e00\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <pre><code>items = ['Python', 'Java', 'Java', 'C++', 'Kotlin', 'Python']\nprint(items.index('Python'))     # 0\n# \u4ece\u7d22\u5f15\u4f4d\u7f6e1\u5f00\u59cb\u67e5\u627e'Python'\nprint(items.index('Python', 1))  # 5\nprint(items.count('Python'))     # 2\n# \u4ece\u7d22\u5f15\u4f4d\u7f6e3\u5f00\u59cb\u67e5\u627e'Java'\nprint(items.index('Java', 3))    # ValueError: 'Java' is not in list\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_11","title":"\u5143\u7d20\u6392\u5e8f\u548c\u53cd\u8f6c","text":"<p>\u5217\u8868\u7684 <code>sort</code> \u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0\u5217\u8868\u5143\u7d20\u7684\u6392\u5e8f\uff0c\u800c <code>reverse</code> \u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0\u5143\u7d20\u7684\u53cd\u8f6c\u3002</p> <pre><code>items = ['Python', 'Java', 'C++', 'Kotlin', 'Swift']\nitems.sort()\nprint(items)  # ['C++', 'Java', 'Kotlin', 'Python', 'Swift']\nitems.reverse()\nprint(items)  # ['Swift', 'Python', 'Kotlin', 'Java', 'C++']\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_12","title":"\u5217\u8868\u751f\u6210\u5f0f","text":"<p>\u4f7f\u7528\u5217\u8868\u751f\u6210\u5f0f\u521b\u5efa\u5217\u8868\u4e0d\u4ec5\u4ee3\u7801\u7b80\u5355\u4f18\u96c5\uff0c\u800c\u4e14\u6027\u80fd\u4e0a\u4e5f\u4f18\u4e8e\u4f7f\u7528 <code>for-in</code> \u5faa\u73af\u548c <code>append</code> \u65b9\u6cd5\u5411\u7a7a\u5217\u8868\u4e2d\u8ffd\u52a0\u5143\u7d20\u7684\u65b9\u5f0f\u3002\u4e3a\u4ec0\u4e48\u8bf4\u751f\u6210\u5f0f\u6709\u66f4\u597d\u7684\u6027\u80fd\u5462\uff0c\u90a3\u662f\u56e0\u4e3a Python \u89e3\u91ca\u5668\u7684\u5b57\u8282\u7801\u6307\u4ee4\u4e2d\u6709\u4e13\u95e8\u9488\u5bf9\u751f\u6210\u5f0f\u7684\u6307\u4ee4\uff08<code>LIST_APPEND</code>\u6307\u4ee4\uff09\uff1b\u800c <code>for</code> \u5faa\u73af\u662f\u901a\u8fc7\u65b9\u6cd5\u8c03\u7528\uff08<code>LOAD_METHOD</code> \u548c <code>CALL_METHOD</code> \u6307\u4ee4\uff09\u7684\u65b9\u5f0f\u4e3a\u5217\u8868\u6dfb\u52a0\u5143\u7d20\uff0c\u65b9\u6cd5\u8c03\u7528\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u76f8\u5bf9\u6bd4\u8f83\u8017\u65f6\u7684\u64cd\u4f5c\u3002</p> <pre><code># \u521b\u5efa\u4e00\u4e2a\u53d6\u503c\u8303\u56f4\u57281\u523099\u4e14\u80fd\u88ab3\u6216\u80055\u6574\u9664\u7684\u6570\u5b57\u6784\u6210\u7684\u5217\u8868\u3002\nitems = [i for i in range(1, 100) if i % 3 == 0 or i % 5 == 0]\nprint(items)\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day10","title":"Day10 \u5143\u7ec4","text":"<p>\u5728 Python \u8bed\u8a00\u4e2d\uff0c\u5143\u7ec4\u4e5f\u662f\u591a\u4e2a\u5143\u7d20\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\u6784\u6210\u7684\u5e8f\u5217\u3002\u5143\u7ec4\u548c\u5217\u8868\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5143\u7ec4\u7c7b\u578b\u7684\u53d8\u91cf\u4e00\u65e6\u5b9a\u4e49\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u4e0d\u80fd\u518d\u6dfb\u52a0\u6216\u5220\u9664\uff0c\u800c\u4e14\u5143\u7d20\u7684\u503c\u4e5f\u4e0d\u80fd\u4fee\u6539\u3002\u5982\u679c\u8bd5\u56fe\u4fee\u6539\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u5c06\u5f15\u53d1 TypeError \u9519\u8bef\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002</p> <p>\u4f46\u662f\u5143\u7ec4\u53ef\u4ee5\u62fc\u63a5\uff0c\u56e0\u4e3a\u6b64\u65f6\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u5728\u4fee\u6539\u539f\u59cb\u5143\u7ec4\uff0c\u800c\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5143\u7ec4\u5bf9\u8c61\u3002</p> <pre><code>tup1 = (1, 2)\ntup2 = (3, 4)\ncombined = tup1 + tup2  # \u65b0\u5143\u7ec4 (1, 2, 3, 4)\n</code></pre> <p><code>()</code> \u8868\u793a\u7a7a\u5143\u7ec4\uff0c\u4f46\u662f\u5982\u679c\u5143\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u9700\u8981\u52a0\u4e0a\u4e00\u4e2a\u9017\u53f7\uff0c\u5426\u5219 <code>()</code> \u5c31\u4e0d\u662f\u4ee3\u8868\u5143\u7ec4\u7684\u5b57\u9762\u91cf\u8bed\u6cd5\uff0c\u800c\u662f\u6539\u53d8\u8fd0\u7b97\u4f18\u5148\u7ea7\u7684\u5706\u62ec\u53f7\uff0c\u6240\u4ee5 <code>('hello', )</code> \u548c <code>(100, )</code> \u624d\u662f\u4e00\u5143\u7ec4\uff0c\u800c <code>('hello')</code> \u548c <code>(100)</code> \u53ea\u662f\u5b57\u7b26\u4e32\u548c\u6574\u6570\u3002</p>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_13","title":"\u6253\u5305\u548c\u89e3\u5305","text":"<p>\u5f53\u6211\u4eec\u628a\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694\u7684\u503c\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u591a\u4e2a\u503c\u4f1a\u6253\u5305\u6210\u4e00\u4e2a\u5143\u7ec4\u7c7b\u578b\uff1b\u5f53\u6211\u4eec\u628a\u4e00\u4e2a\u5143\u7ec4\u8d4b\u503c\u7ed9\u591a\u4e2a\u53d8\u91cf\u65f6\uff0c\u5143\u7ec4\u4f1a\u89e3\u5305\u6210\u591a\u4e2a\u503c\u7136\u540e\u5206\u522b\u8d4b\u7ed9\u5bf9\u5e94\u7684\u53d8\u91cf\u3002</p> <pre><code># \u6253\u5305\na = (1, 2, 3)\n# \u89e3\u5305\nx, y, z = a\n</code></pre> <ul> <li>\u5728\u89e3\u5305\u65f6\uff0c\u5982\u679c\u89e3\u5305\u51fa\u6765\u7684\u5143\u7d20\u4e2a\u6570\u548c\u53d8\u91cf\u4e2a\u6570\u4e0d\u5bf9\u5e94\uff0c\u4f1a\u5f15\u53d1 <code>ValueError</code> \u5f02\u5e38\uff0c\u9519\u8bef\u4fe1\u606f\u4e3a\uff1a<code>too many values to unpack</code> \u6216 <code>not enough values to unpack</code> \u3002</li> <li>\u6709\u4e00\u79cd\u89e3\u51b3\u53d8\u91cf\u4e2a\u6570\u5c11\u4e8e\u5143\u7d20\u7684\u4e2a\u6570\u65b9\u6cd5\uff0c\u5c31\u662f\u4f7f\u7528\u661f\u53f7\u8868\u8fbe\u5f0f\u3002\u901a\u8fc7\u661f\u53f7\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u53d8\u91cf\u63a5\u6536\u591a\u4e2a\u503c\u3002</li> <li>\u9700\u8981\u6ce8\u610f\u4e24\u70b9\uff1a<ul> <li>\u7528\u661f\u53f7\u8868\u8fbe\u5f0f\u4fee\u9970\u7684\u53d8\u91cf\u4f1a\u53d8\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u6709 0 \u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002</li> <li>\u5728\u89e3\u5305\u8bed\u6cd5\u4e2d\uff0c\u661f\u53f7\u8868\u8fbe\u5f0f\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li> </ul> </li> <li>\u9700\u8981\u8bf4\u660e\u4e00\u70b9\uff0c\u89e3\u5305\u8bed\u6cd5\u5bf9\u6240\u6709\u7684\u5e8f\u5217\u90fd\u6210\u7acb\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u6211\u4eec\u4e4b\u524d\u8bb2\u7684\u5217\u8868\u3001<code>range</code>\u51fd\u6570\u6784\u9020\u7684\u8303\u56f4\u5e8f\u5217\u751a\u81f3\u5b57\u7b26\u4e32\u90fd\u53ef\u4ee5\u4f7f\u7528\u89e3\u5305\u8bed\u6cd5\u3002</li> </ul> <pre><code>a = 1, 10, 100, 1000\ni, j, *k = a\nprint(i, j, k)        # 1 10 [100, 1000]\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_14","title":"\u4ea4\u6362\u53d8\u91cf\u7684\u503c","text":"<p>\u5728 Python \u4e2d\uff0c\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf <code>a</code> \u548c <code>b</code> \u7684\u503c\u53ea\u9700\u8981\u4f7f\u7528\u5982\u4e0b\u6240\u793a\u7684\u4ee3\u7801\u3002\u4e09\u4e2a\u4e5f\u662f\u540c\u7406\u7684\u3002</p> <pre><code>a, b = b, a\na, b, c = b, c, a\n</code></pre> <ul> <li>\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u4e0a\u9762\u7684\u64cd\u4f5c\u5e76\u6ca1\u6709\u7528\u5230\u6253\u5305\u548c\u89e3\u5305\u8bed\u6cd5\uff0c<code>Python</code> \u7684\u5b57\u8282\u7801\u6307\u4ee4\u4e2d\u6709 <code>ROT_TWO</code> \u548c <code>ROT_THREE</code> \u8fd9\u6837\u7684\u6307\u4ee4\u53ef\u4ee5\u76f4\u63a5\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6548\u7387\u662f\u975e\u5e38\u9ad8\u7684\u3002\u4f46\u662f\u5982\u679c\u6709\u591a\u4e8e\u4e09\u4e2a\u53d8\u91cf\u7684\u503c\u8981\u4f9d\u6b21\u4e92\u6362\uff0c\u8fd9\u4e2a\u65f6\u5019\u662f\u6ca1\u6709\u76f4\u63a5\u53ef\u7528\u7684\u5b57\u8282\u7801\u6307\u4ee4\u7684\uff0c\u9700\u8981\u901a\u8fc7\u6253\u5305\u89e3\u5305\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u53d8\u91cf\u4e4b\u95f4\u503c\u7684\u4ea4\u6362\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_15","title":"\u5143\u7ec4\u548c\u5217\u8868\u7684\u6bd4\u8f83","text":"<ul> <li>\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4e0d\u53ef\u53d8\u7c7b\u578b\u66f4\u9002\u5408\u591a\u7ebf\u7a0b\u73af\u5883\uff0c\u56e0\u4e3a\u5b83\u964d\u4f4e\u4e86\u5e76\u53d1\u8bbf\u95ee\u53d8\u91cf\u7684\u540c\u6b65\u5316\u5f00\u9500\u3002</li> <li> <p>\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u901a\u5e38\u4e0d\u53ef\u53d8\u7c7b\u578b\u5728\u521b\u5efa\u65f6\u95f4\u4e0a\u4f18\u4e8e\u5bf9\u5e94\u7684\u53ef\u53d8\u7c7b\u578b\u3002</p> </li> <li> <p>\u5f53\u7136\uff0cPython \u4e2d\u7684\u5143\u7ec4\u548c\u5217\u8868\u7c7b\u578b\u662f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\u7684\u3002</p> </li> </ul> <pre><code>infos = ('hello', 100, True, '\u56db\u5ddd\u6210\u90fd')\nprint(list(infos))  # ['hello', 100, True, '\u56db\u5ddd\u6210\u90fd']\n\nfrts = ['apple', 'banana', 'orange']\n# \u5c06\u5217\u8868\u8f6c\u6362\u6210\u5143\u7ec4\nprint(tuple(frts))  # ('apple', 'banana', 'orange')\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day11","title":"Day11 \u5b57\u7b26\u4e32","text":"<ul> <li>Python \u4e2d\u6709\u4e00\u79cd\u4ee5 <code>r</code> \u6216 <code>R</code> \u5f00\u5934\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u79cd\u5b57\u7b26\u4e32\u88ab\u79f0\u4e3a\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u610f\u601d\u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u662f\u5b83\u672c\u6765\u7684\u542b\u4e49\uff0c\u6ca1\u6709\u6240\u8c13\u7684\u8f6c\u4e49\u5b57\u7b26\u3002</li> </ul> <pre><code>s1 = '\\it \\is \\time \\to \\read \\now'  # ead \\is         ime     o \n                                     # ow\ns2 = r'\\it \\is \\time \\to \\read \\now' # \\it \\is \\time \\to \\read \\now\nprint(s1)\nprint(s2)\n</code></pre> <ul> <li>Python \u4e2d\u8fd8\u5141\u8bb8\u5728\\\u540e\u9762\u8fd8\u53ef\u4ee5\u8ddf\u4e00\u4e2a\u516b\u8fdb\u5236\u6216\u8005\u5341\u516d\u8fdb\u5236\u6570\u6765\u8868\u793a\u5b57\u7b26\uff0c\u4f8b\u5982 <code>\\141</code> \u8868\u793a\u5c0f\u5199\u5b57\u6bcd <code>a</code>\uff0c<code>\\x61</code> \u4e5f\u8868\u793a\u5c0f\u5199\u5b57\u6bcd <code>a</code>\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_16","title":"\u5b57\u7b26\u4e32\u65b9\u6cd5","text":""},{"location":"Computer_Science/Programming_Language/python/python100days/#_17","title":"\u5927\u5c0f\u5199\u65b9\u6cd5","text":"<pre><code>s1 = 'hello, world!'\n# \u5b57\u7b26\u4e32\u9996\u5b57\u6bcd\u5927\u5199\nprint(s1.capitalize())  # Hello, world!\n# \u5b57\u7b26\u4e32\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199\nprint(s1.title())       # Hello, World!\n# \u5b57\u7b26\u4e32\u53d8\u5927\u5199\nprint(s1.upper())       # HELLO, WORLD!\ns2 = 'GOODBYE'\n# \u5b57\u7b26\u4e32\u53d8\u5c0f\u5199\nprint(s2.lower())       # goodbye\n# \u68c0\u67e5s1\u548cs2\u7684\u503c\nprint(s1)               # hello, world\nprint(s2)               # GOODBYE\n</code></pre> <p>Note</p> <p>\u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u64cd\u4f5c\u4f1a\u4ea7\u751f\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u539f\u6765\u53d8\u91cf\u7684\u503c\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\u3002\u6240\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5f53\u6211\u4eec\u6700\u540e\u68c0\u67e5 <code>s1</code> \u548c <code>s2</code> \u4e24\u4e2a\u53d8\u91cf\u7684\u503c\u65f6\uff0c <code>s1</code> \u548c <code>s2</code> \u7684\u503c\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\u3002</p>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_18","title":"\u67e5\u627e\u64cd\u4f5c","text":"<pre><code>s = 'hello, world!'\nprint(s.find('or'))      # 8\nprint(s.find('or', 9))   # -1\nprint(s.find('of'))      # -1\nprint(s.index('or'))     # 8\nprint(s.index('or', 9))  # ValueError: substring not found\n</code></pre> <ul> <li><code>find</code> \u65b9\u6cd5\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u4f1a\u8fd4\u56de -1\uff0c <code>index</code> \u65b9\u6cd5\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u4f1a\u5f15\u53d1 <code>ValueError</code> \u9519\u8bef\u3002</li> <li><code>find</code> \u548c <code>index</code> \u65b9\u6cd5\u8fd8\u6709\u9006\u5411\u67e5\u627e\uff08\u4ece\u540e\u5411\u524d\u67e5\u627e\uff09\u7684\u7248\u672c\uff0c\u5206\u522b\u662f <code>rfind</code> \u548c <code>rindex</code> \u3002</li> </ul> <pre><code>s = 'hello world!'\nprint(s.find('o'))       # 4\nprint(s.rfind('o'))      # 7\nprint(s.rindex('o'))     # 7\n# print(s.rindex('o', 8))  # ValueError: substring not found\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_19","title":"\u6027\u8d28\u5224\u65ad","text":"<pre><code>s1 = 'hello, world!'\nprint(s1.startswith('He'))   # False\nprint(s1.startswith('hel'))  # True\nprint(s1.endswith('!'))      # True\ns2 = 'abc123456'\nprint(s2.isdigit())  # False\nprint(s2.isalpha())  # False\nprint(s2.isalnum())  # True\n</code></pre> <ul> <li><code>isdigit</code>\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u5b8c\u5168\u7531\u6570\u5b57\u6784\u6210\u7684</li> <li><code>isalpha</code>\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u5b8c\u5168\u7531\u5b57\u6bcd\u6784\u6210\u7684\uff0c\u8fd9\u91cc\u7684\u5b57\u6bcd\u6307\u7684\u662f Unicode \u5b57\u7b26\u4f46\u4e0d\u5305\u542b Emoji \u5b57\u7b26</li> <li><code>isalnum</code> \u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u7531\u5b57\u6bcd\u548c\u6570\u5b57\u6784\u6210\u7684\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_20","title":"\u683c\u5f0f\u5316","text":"<pre><code>s = 'hello, world'\nprint(s.center(20, '*'))  # ****hello, world****\nprint(s.rjust(20))        #         hello, world\nprint(s.ljust(20, '~'))   # hello, world~~~~~~~~\nprint('33'.zfill(5))      # 00033\nprint('-33'.zfill(5))     # -0033\n</code></pre> <ul> <li><code>center</code> \u65b9\u6cd5\u628a\u5b57\u7b26\u4e32\u653e\u4e8e\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u4e2d\u95f4\uff0c\u4e24\u8fb9\u7528\u6307\u5b9a\u7684\u5b57\u7b26\u586b\u5145</li> <li><code>rjust</code> \u65b9\u6cd5\u628a\u5b57\u7b26\u4e32\u653e\u4e8e\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u53f3\u8fb9\uff0c\u5de6\u8fb9\u7528\u6307\u5b9a\u7684\u5b57\u7b26\u586b\u5145</li> <li><code>ljust</code> \u65b9\u6cd5\u628a\u5b57\u7b26\u4e32\u653e\u4e8e\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u5de6\u8fb9\uff0c\u53f3\u8fb9\u7528\u6307\u5b9a\u7684\u5b57\u7b26\u586b\u5145</li> <li><code>zfill</code> \u65b9\u6cd5\u628a\u5b57\u7b26\u4e32\u653e\u4e8e\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u5de6\u8fb9\uff0c\u53f3\u8fb9\u75280\u586b\u5145</li> </ul> <ol> <li>\u7528 <code>print</code> \u51fd\u6570\u8f93\u51fa\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u683c\u5f0f\u5316\u3002</li> </ol> <pre><code>a = 321\nb = 123\nprint('%d * %d = %d' % (a, b, a * b)) # 321 * 123 = 39483\n</code></pre> <ol> <li>\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u7684 <code>format</code> \u65b9\u6cd5\u6765\u5b8c\u6210\u5b57\u7b26\u4e32\u7684\u683c\u5f0f</li> </ol> <pre><code>a = 321\nb = 123\nprint('{} * {} = {}'.format(a, b, a * b)) # 321 * 123 = 39483\nprint('{1} * {0} = {2}'.format(a, b, a * b)) # 123 * 321 = 39483\nprint('{name} loves {girl}'.format(name='Tom', girl='Rose')) # Tom loves Rose\n</code></pre> <ol> <li><code>f-string</code> \u683c\u5f0f\u5316\u5b57\u7b26\u4e32</li> </ol> <ul> <li>\u5728\u8fd9\u79cd\u4ee5 <code>f</code> \u6253\u5934\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c<code>{\u53d8\u91cf\u540d}</code> \u662f\u4e00\u4e2a\u5360\u4f4d\u7b26\uff0c\u4f1a\u88ab\u53d8\u91cf\u5bf9\u5e94\u7684\u503c\u5c06\u5176\u66ff\u6362\u6389</li> </ul> <pre><code>a = 321\nb = 123\nprint(f'{a} * {b} = {a * b}') # 321 * 123 = 39483\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_21","title":"\u4fee\u526a\u64cd\u4f5c","text":"<p>\u5b57\u7b26\u4e32\u7684 <code>strip</code> \u65b9\u6cd5\u53ef\u4ee5\u5e2e\u6211\u4eec\u83b7\u5f97\u5c06\u539f\u5b57\u7b26\u4e32\u4fee\u526a\u6389\u5de6\u53f3\u4e24\u7aef\u6307\u5b9a\u5b57\u7b26\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u662f\u4fee\u526a\u7a7a\u683c\u5b57\u7b26\u3002\u8fd9\u4e2a\u65b9\u6cd5\u975e\u5e38\u6709\u5b9e\u7528\u4ef7\u503c\uff0c\u53ef\u4ee5\u7528\u6765\u5c06\u7528\u6237\u8f93\u5165\u65f6\u4e0d\u5c0f\u5fc3\u952e\u5165\u7684\u5934\u5c3e\u7a7a\u683c\u7b49\u53bb\u6389\uff0c <code>strip</code> \u65b9\u6cd5\u8fd8\u6709 <code>lstrip</code> \u548c <code>rstrip</code> \u4e24\u4e2a\u7248\u672c\u3002</p> <pre><code>s1 = '   jackfrued@126.com  '\nprint(s1.strip())      # jackfrued@126.com\ns2 = '~\u4f60\u597d\uff0c\u4e16\u754c~'\nprint(s2.lstrip('~'))  # \u4f60\u597d\uff0c\u4e16\u754c~\nprint(s2.rstrip('~'))  # ~\u4f60\u597d\uff0c\u4e16\u754c\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_22","title":"\u66ff\u6362\u64cd\u4f5c","text":"<p><code>replace</code> \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u88ab\u66ff\u6362\u7684\u5185\u5bb9\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u66ff\u6362\u540e\u7684\u5185\u5bb9\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u66ff\u6362\u7684\u6b21\u6570\u3002</p> <pre><code>s = 'hello, good world'\nprint(s.replace('o', '@'))     # hell@, g@@d w@rld\nprint(s.replace('o', '@', 1))  # hell@, good world\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_23","title":"\u62c6\u5206\u4e0e\u5408\u5e76","text":"<p>\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u7684 <code>split</code> \u65b9\u6cd5\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a\u591a\u4e2a\u5b57\u7b26\u4e32\uff08\u653e\u5728\u4e00\u4e2a\u5217\u8868\u4e2d\uff09\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u7684 <code>join</code> \u65b9\u6cd5\u5c06\u5217\u8868\u4e2d\u7684\u591a\u4e2a\u5b57\u7b26\u4e32\u8fde\u63a5\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002<code>split</code> \u65b9\u6cd5\u9ed8\u8ba4\u4f7f\u7528\u7a7a\u683c\u8fdb\u884c\u62c6\u5206\u3002</p> <pre><code>s = 'I love you'\nwords = s.split()\nprint(words)            # ['I', 'love', 'you']\nprint('~'.join(words))  # I~love~you\ns = 'I#love#you#so#much'\nwords = s.split('#')\nprint(words)  # ['I', 'love', 'you', 'so', 'much']\nwords = s.split('#', 2)\nprint(words)  # ['I', 'love', 'you#so#much']\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day13","title":"Day13 \u5b57\u5178","text":""},{"location":"Computer_Science/Programming_Language/python/python100days/#_24","title":"\u521b\u5efa\u5b57\u5178","text":"<pre><code>dict1 = {'name': 'jackfrued', 'age': 20, 'gender': 'male'} # \u76f4\u63a5\u4f7f\u7528\u5927\u62ec\u53f7\ndict2 = dict(name='jackfrued', age=20, gender='male') # \u4f7f\u7528 dict \u51fd\u6570\ndict3 = dict(zip('ABCDE', '12345')) # \u4f7f\u7528 zip \u51fd\u6570 {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5'}\ndict4 = dict(zip('ABCDE', range(1, 10))) # {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}\ndict5 = {x: x ** 3 for x in range(1, 6)} # \u7528\u5b57\u5178\u751f\u6210\u5f0f\u8bed\u6cd5\u521b\u5efa\u5b57\u5178 {'1': 1, '2': 8, '3': 27, '4': 64, '5': 125}\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day16","title":"Day16 \u51fd\u6570\u8fdb\u9636","text":""},{"location":"Computer_Science/Programming_Language/python/python100days/#lambda","title":"<code>Lambda</code> \u51fd\u6570","text":"<ul> <li><code>lambda</code> \u51fd\u6570\u53ea\u80fd\u6709\u4e00\u884c\u4ee3\u7801\uff0c\u4ee3\u7801\u4e2d\u7684\u8868\u8fbe\u5f0f\u4ea7\u751f\u7684\u8fd0\u7b97\u7ed3\u679c\u5c31\u662f\u8fd9\u4e2a\u533f\u540d\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002</li> </ul> <pre><code>import functools\nimport operator\n\n# \u7528\u4e00\u884c\u4ee3\u7801\u5b9e\u73b0\u8ba1\u7b97\u9636\u4e58\u7684\u51fd\u6570\nfac = lambda n: functools.reduce(operator.mul, range(2, n + 1), 1)\n\n# \u7528\u4e00\u884c\u4ee3\u7801\u5b9e\u73b0\u5224\u65ad\u7d20\u6570\u7684\u51fd\u6570\nis_prime = lambda x: all(map(lambda f: x % f, range(2, int(x ** 0.5) + 1)))\n\n# \u8c03\u7528Lambda\u51fd\u6570\nprint(fac(6))        # 720\nprint(is_prime(37))  # True\n</code></pre> <ul> <li><code>reduce</code> \u51fd\u6570\u662f <code>Python</code> \u6807\u51c6\u5e93 <code>functools</code> \u6a21\u5757\u4e2d\u7684\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u4e00\u7ec4\u6570\u636e\u7684\u5f52\u7ea6\u64cd\u4f5c\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4ee3\u8868\u8fd0\u7b97\u7684\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8fd0\u7b97\u7684\u6570\u636e\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u8fd0\u7b97\u7684\u521d\u59cb\u503c\u3002</li> <li>\u5224\u65ad\u7d20\u6570\u7684 <code>lambda</code> \u51fd\u6570\u901a\u8fc7 <code>range</code> \u51fd\u6570\u6784\u9020\u4e86\u4ece <code>2</code> \u5230 \\(\\sqrt{x}\\) \u7684\u8303\u56f4\uff0c\u68c0\u67e5\u8fd9\u4e2a\u8303\u56f4\u6709\u6ca1\u6709 <code>x</code> \u7684\u56e0\u5b50\u3002<code>all</code> \u51fd\u6570\u4e5f\u662f <code>Python</code> \u5185\u7f6e\u51fd\u6570\uff0c\u5982\u679c\u4f20\u5165\u7684\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u5e03\u5c14\u503c\u90fd\u662f <code>True</code>\uff0c<code>all</code> \u51fd\u6570\u8fd4\u56de <code>True</code>\uff0c\u5426\u5219 <code>all</code> \u51fd\u6570\u8fd4\u56de <code>False</code>\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_25","title":"\u504f\u51fd\u6570","text":"<ul> <li>\u504f\u51fd\u6570\u662f\u6307\u56fa\u5b9a\u51fd\u6570\u7684\u67d0\u4e9b\u53c2\u6570\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u65e0\u9700\u5728\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\u90fd\u4f20\u9012\u76f8\u540c\u7684\u53c2\u6570\u3002</li> </ul> <pre><code>import functools\n\nint2 = functools.partial(int, base=2)\nint8 = functools.partial(int, base=8)\nint16 = functools.partial(int, base=16)\n\nprint(int('1001'))    # 1001\n\nprint(int2('1001'))   # 9\nprint(int8('1001'))   # 513\nprint(int16('1001'))  # 4097\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#_26","title":"\u88c5\u9970\u5668","text":"<p>\u5728 <code>Python</code> \u4e2d\uff0c\u4f7f\u7528\u88c5\u9970\u5668\u5f88\u6709\u66f4\u4e3a\u4fbf\u6377\u7684\u8bed\u6cd5\u7cd6\uff08\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6dfb\u52a0\u7684\u67d0\u79cd\u8bed\u6cd5\uff0c\u8fd9\u79cd\u8bed\u6cd5\u5bf9\u8bed\u8a00\u7684\u529f\u80fd\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u4f7f\u7528\u66f4\u52a0\u65b9\u6cd5\uff0c\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u4e5f\u66f4\u5f3a\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e4b\u4e3a\"\u8bed\u6cd5\u7cd6\"\u6216\"\u7cd6\u8863\u8bed\u6cd5\"\uff09\uff0c\u53ef\u4ee5\u7528 <code>@\u88c5\u9970\u5668\u51fd\u6570</code> \u5c06\u88c5\u9970\u5668\u51fd\u6570\u76f4\u63a5\u653e\u5728\u88ab\u88c5\u9970\u7684\u51fd\u6570\u4e0a\uff0c\u6548\u679c\u8ddf\u4e0a\u9762\u7684\u4ee3\u7801\u76f8\u540c\u3002</p> <pre><code>import random\nimport time\n\nfrom functools import wraps\n\n\ndef record_time(func):\n\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f'{func.__name__}\u6267\u884c\u65f6\u95f4: {end - start:.2f}\u79d2')\n        return result\n\n    return wrapper\n\n\n@record_time\ndef download(filename):\n    print(f'\u5f00\u59cb\u4e0b\u8f7d{filename}.')\n    time.sleep(random.random() * 6)\n    print(f'{filename}\u4e0b\u8f7d\u5b8c\u6210.')\n\n\n@record_time\ndef upload(filename):\n    print(f'\u5f00\u59cb\u4e0a\u4f20{filename}.')\n    time.sleep(random.random() * 8)\n    print(f'{filename}\u4e0a\u4f20\u5b8c\u6210.')\n\n\n# \u8c03\u7528\u88c5\u9970\u540e\u7684\u51fd\u6570\u4f1a\u8bb0\u5f55\u6267\u884c\u65f6\u95f4\ndownload('MySQL\u4ece\u5220\u5e93\u5230\u8dd1\u8def.avi')\nupload('Python\u4ece\u5165\u95e8\u5230\u4f4f\u9662.pdf')\n# \u53d6\u6d88\u88c5\u9970\u5668\u7684\u4f5c\u7528\u4e0d\u8bb0\u5f55\u6267\u884c\u65f6\u95f4\ndownload.__wrapped__('MySQL\u5fc5\u77e5\u5fc5\u4f1a.pdf')\nupload.__wrapped__('Python\u4ece\u65b0\u624b\u5230\u5927\u5e08.pdf')\n</code></pre> <ul> <li>\u5f53\u4f60\u5728\u51fd\u6570\u5b9a\u4e49\u524d\u4f7f\u7528 <code>@record_time</code> \u65f6\uff0c\u8fd9\u4e2a\u88c5\u9970\u5668\u51fd\u6570 <code>record_time</code> \u4f1a\u63a5\u6536\u88ab\u88c5\u9970\u7684\u539f\u59cb\u51fd\u6570\uff08\u5982 <code>download</code> \u6216 <code>upload</code> \uff09\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 <code>func</code> \u53c2\u6570\u3002<code>func</code> \u53c2\u6570\u7528\u4e8e\u5728\u88c5\u9970\u5668\u5185\u90e8\u8bb0\u4f4f\u539f\u59cb\u51fd\u6570\uff0c\u4ee5\u4fbf\u540e\u7eed\u8c03\u7528\u5b83\u3002</li> <li>\u5728\u4ee3\u7801\u4e2d\uff0c<code>@record_time</code> \u8bed\u6cd5\u7cd6\u7b49\u4ef7\u4e8e\uff1a</li> </ul> <pre><code>download = record_time(download)\nupload = record_time(upload)\n</code></pre> <ul> <li>\u4f7f\u7528 <code>@wraps(func)</code> \u540e\uff0c\u88c5\u9970\u540e\u7684\u51fd\u6570\u4f1a\u4fdd\u7559 <code>__wrapped__</code> \u5c5e\u6027\uff0c\u6307\u5411\u539f\u59cb\u51fd\u6570\u3002\u901a\u8fc7 <code>__wrapped__</code> \u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u672a\u88ab\u88c5\u9970\u7684\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u907f\u514d\u89e6\u53d1\u8ba1\u65f6\u903b\u8f91\u3002</li> </ul>"},{"location":"Computer_Science/Programming_Language/python/python100days/#day67-miniconda","title":"Day67 miniconda","text":"<p>Info</p> <p>\u5176\u5b9e\u7f51\u7ad9\u4e2d\u7ed9\u7684\u662f Anaconda\uff0c\u4f46\u662f\u6211\u5b89\u88c5\u7684\u662f miniconda\uff0c\u53ea\u662f\u56e0\u4e3a\u4e4b\u524d\u88c5\u8fc7\u3002\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e0b\u4e00\u4e9b\u4f7f\u7528\u65b9\u6cd5\u3002</p> <ul> <li>\u521b\u5efa\u865a\u62df\u73af\u5883\uff0c<code>-n</code> \u662f <code>name</code> \u7684\u7f29\u5199\uff0c<code>python</code> \u4e0d\u6307\u5b9a\u7248\u672c\u5c31\u9ed8\u8ba4\u6700\u65b0\u7248</li> </ul> <pre><code>conda create -n myenv python=3.8\n</code></pre> <ul> <li>\u6fc0\u6d3b\u865a\u62df\u73af\u5883</li> </ul> <pre><code>activate myenv\n</code></pre> <ul> <li>\u9000\u51fa\u5f53\u524d\u865a\u62df\u73af\u5883</li> </ul> <pre><code>deactivate\n</code></pre> <ul> <li>\u5220\u9664\u865a\u62df\u73af\u5883</li> </ul> <pre><code>conda env remove -n myenv\n</code></pre> <ul> <li>\u67e5\u770b\u6240\u6709\u865a\u62df\u73af\u5883</li> </ul> <pre><code>conda env list\n</code></pre>"},{"location":"Computer_Science/Programming_Language/python/python100days/#jupyterlab","title":"JupyterLab \u4e2d\u7684\u5feb\u6377\u952e","text":"<p>\u547d\u4ee4\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\uff1a</p> \u5feb\u6377\u952e \u529f\u80fd\u8bf4\u660e <code>Alt</code> + <code>Enter</code> \u8fd0\u884c\u5f53\u524d\u5355\u5143\u683c\u5e76\u5728\u4e0b\u9762\u63d2\u5165\u65b0\u7684\u5355\u5143\u683c <code>Shift</code> + <code>Enter</code> \u8fd0\u884c\u5f53\u524d\u5355\u5143\u683c\u5e76\u9009\u4e2d\u4e0b\u65b9\u7684\u5355\u5143\u683c <code>Ctrl</code> + <code>Enter</code> \u8fd0\u884c\u5f53\u524d\u5355\u5143\u683c <code>j</code> / <code>k</code>\u3001<code>Shift</code> + <code>j</code> / <code>Shift</code> + <code>k</code> \u9009\u4e2d\u4e0b\u65b9/\u4e0a\u65b9\u5355\u5143\u683c\u3001\u8fde\u7eed\u9009\u4e2d\u4e0b\u65b9/\u4e0a\u65b9\u5355\u5143\u683c <code>a</code> / <code>b</code> \u5728\u4e0b\u65b9/\u4e0a\u65b9\u63d2\u5165\u65b0\u7684\u5355\u5143\u683c <code>c</code> / <code>x</code> \u590d\u5236\u5355\u5143\u683c / \u526a\u5207\u5355\u5143\u683c <code>v</code> / <code>Shift</code> + <code>v</code> \u5728\u4e0b\u65b9/\u4e0a\u65b9\u7c98\u8d34\u5355\u5143\u683c <code>dd</code> / <code>z</code> \u5220\u9664\u5355\u5143\u683c / \u6062\u590d\u5220\u9664\u7684\u5355\u5143\u683c <code>Shift</code> + <code>l</code> \u663e\u793a\u6216\u9690\u85cf\u5f53\u524d/\u6240\u6709\u5355\u5143\u683c\u884c\u53f7 <code>Space</code> / <code>Shift</code> + <code>Space</code> \u5411\u4e0b/\u5411\u4e0a\u6eda\u52a8\u9875\u9762 <p>\u7f16\u8f91\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\uff1a</p> \u5feb\u6377\u952e \u529f\u80fd\u8bf4\u660e <code>Shift</code> + <code>Tab</code> \u83b7\u5f97\u63d0\u793a\u4fe1\u606f <code>Ctrl</code> + <code>]</code>/ <code>Ctrl</code> + <code>[</code> \u589e\u52a0/\u51cf\u5c11\u7f29\u8fdb <code>Alt</code> + <code>Enter</code> \u8fd0\u884c\u5f53\u524d\u5355\u5143\u683c\u5e76\u5728\u4e0b\u9762\u63d2\u5165\u65b0\u7684\u5355\u5143\u683c <code>Shift</code> + <code>Enter</code> \u8fd0\u884c\u5f53\u524d\u5355\u5143\u683c\u5e76\u9009\u4e2d\u4e0b\u65b9\u7684\u5355\u5143\u683c <code>Ctrl</code> + <code>Enter</code> \u8fd0\u884c\u5f53\u524d\u5355\u5143\u683c <code>Ctrl</code> + <code>Left</code> / <code>Right</code> \u5149\u6807\u79fb\u5230\u884c\u9996/\u884c\u5c3e <code>Ctrl</code> + <code>Up</code> / <code>Down</code> \u5149\u6807\u79fb\u52a8\u4ee3\u7801\u5f00\u5934/\u7ed3\u5c3e\u5904 <code>Up</code> / <code>Down</code> \u5149\u6807\u4e0a\u79fb/\u4e0b\u79fb\u4e00\u884c\u6216\u79fb\u5230\u4e0a/\u4e0b\u4e00\u4e2a\u5355\u5143\u683c"},{"location":"Computer_Science/Tools/Git/","title":"Git","text":"<p> \u7ea6 2676 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f</p> <p>Abstract</p> <p>\u4ee5\u4e0b\u662f\u6211\u5728\u7f51\u7ad9\u4e0a\u7ec3\u4e60\u65f6\u6240\u505a\u7684\u68b3\u7406\u3002\u8fd9\u8fb9\u6307\u8def\u7cbe\u7b80\u7248\ud83d\udd17\u3002</p>"},{"location":"Computer_Science/Tools/Git/#git_1","title":"git \u914d\u7f6e","text":"<p>Note</p> <p>\u7b2c\u4e00\u6b21\u7528\u7684\u8bdd\u8ddf\u7740 \u83dc\u9e1f\u6559\u7a0b \u8d70\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"Computer_Science/Tools/Git/#_1","title":"\u7528\u6237\u4fe1\u606f","text":"<pre><code>$ git config --global user.name \"Melody\"\n$ git config --global user.email melody12020831@outlook.com\n</code></pre> <p>\u8fd9\u91cc\u8bbe\u7f6e\u4f60\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\uff0c\u5982\u679c\u4f7f\u7528\u4e86 <code>\u2013global</code> \u9009\u9879\uff0c\u90a3\u4e48\u8be5\u547d\u4ee4\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u6b21\uff0c\u56e0\u4e3a\u4e4b\u540e\u65e0\u8bba\u4f60\u5728\u8be5\u7cfb\u7edf\u4e0a\u505a\u4efb\u4f55\u4e8b\u60c5\uff0cGit \u90fd\u4f1a\u4f7f\u7528\u90a3\u4e9b\u4fe1\u606f\u3002</p>"},{"location":"Computer_Science/Tools/Git/#_2","title":"\u68c0\u67e5\u914d\u7f6e\u4fe1\u606f","text":"<p>\u5982\u679c\u60f3\u8981\u68c0\u67e5\u4f60\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>git config \u2013list</code> \u547d\u4ee4\u6765\u5217\u51fa\u6240\u6709 <code>Git</code> \u5f53\u65f6\u80fd\u627e\u5230\u7684\u914d\u7f6e\u3002</p> <p>\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165 <code>git config</code> \u6765\u68c0\u67e5 <code>Git</code> \u7684\u67d0\u4e00\u9879\u914d\u7f6e:</p> <pre><code>$ git config user.name\nMelody\n</code></pre>"},{"location":"Computer_Science/Tools/Git/#_3","title":"\u83b7\u53d6\u5e2e\u52a9","text":"<p>\u6709\u4e09\u79cd\u67e5\u9605\u65b9\u5f0f\uff1a</p> <pre><code>$ git help &lt;verb&gt;\n$ git &lt;verb&gt; --help\n$ man git-&lt;verb&gt;\n</code></pre>"},{"location":"Computer_Science/Tools/Git/#git_2","title":"\u83b7\u53d6 <code>git</code> \u4ed3\u5e93","text":"<pre><code>$ git init\n</code></pre> <p>\u8be5\u547d\u4ee4\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a .git \u7684\u5b50\u76ee\u5f55\uff0c\u8fd9\u4e2a\u5b50\u76ee\u5f55\u542b\u6709\u4f60\u521d\u59cb\u5316\u7684 Git \u4ed3\u5e93\u4e2d\u6240\u6709\u7684\u5fc5\u987b\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u662f Git \u4ed3\u5e93\u7684\u9aa8\u5e72\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u83b7\u5f97\u4e00\u4efd\u5df2\u7ecf\u5b58\u5728\u4e86\u7684 Git \u4ed3\u5e93\u7684\u62f7\u8d1d\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>git clone</code></p> <pre><code>$ git clone https://github.com/melody12020831/Notebook/\n</code></pre> <p>\u6216\u8005\u4e0b\u9762\u8fd9\u6761\u8fd9\u5c06\u6267\u884c\u4e0e\u4e0a\u4e00\u4e2a\u547d\u4ee4\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u5728\u672c\u5730\u521b\u5efa\u7684\u4ed3\u5e93\u540d\u5b57\u53d8\u4e3a <code>myrepository</code> \u3002</p> <pre><code>$ git clone https://github.com/melody12020831/Notebook/ myrepository\n</code></pre>"},{"location":"Computer_Science/Tools/Git/#ssh","title":"\u751f\u6210\u65b0 SSH \u5bc6\u94a5","text":"<p>Tip</p> <p>\u6709\u5173\u8fd9\u90e8\u5206\u53ef\u4ee5\u79fb\u6b65 \u5b98\u65b9\u6587\u6863</p> <pre><code>$ ssh-keygen -t ed25519 -C \"melody12020831@outlook.com\"\n</code></pre> <p>\u8fd9\u5c06\u4ee5\u63d0\u4f9b\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u4e3a\u6807\u7b7e\u521b\u5efa\u65b0 SSH \u5bc6\u94a5\u3002</p> <pre><code>&gt; Generating public/private ALGORITHM key pair.\n</code></pre> <p>\u5f53\u7cfb\u7edf\u63d0\u793a\u60a8\u201cEnter a file in which to save the key\uff08\u8f93\u5165\u8981\u4fdd\u5b58\u5bc6\u94a5\u7684\u6587\u4ef6\uff09\u201d\u65f6\uff0c\u53ef\u4ee5\u6309 Enter \u952e\u63a5\u53d7\u9ed8\u8ba4\u6587\u4ef6\u4f4d\u7f6e\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4ee5\u524d\u521b\u5efa\u4e86 SSH \u5bc6\u94a5\uff0c\u5219 ssh-keygen \u53ef\u80fd\u4f1a\u8981\u6c42\u91cd\u5199\u53e6\u4e00\u4e2a\u5bc6\u94a5\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5efa\u8bae\u521b\u5efa\u81ea\u5b9a\u4e49\u547d\u540d\u7684 SSH \u5bc6\u94a5\u3002 \u4e3a\u6b64\uff0c\u8bf7\u952e\u5165\u9ed8\u8ba4\u6587\u4ef6\u4f4d\u7f6e\uff0c\u5e76\u5c06 id_ALGORITHM \u66ff\u6362\u4e3a\u81ea\u5b9a\u4e49\u5bc6\u94a5\u540d\u79f0\u3002(\u76f4\u63a5 <code>Enter</code> )</p> <pre><code>Enter file in which to save the key (/c/Users/YOU/.ssh/id_ALGORITHM):[Press enter]\n</code></pre> <p>\u5728\u63d0\u793a\u7b26\u4e0b\uff0c\u952e\u5165\u5b89\u5168\u5bc6\u7801\u3002(\u53ef\u4ee5\u76f4\u63a5\u4e24\u4e2a <code>Enter</code> )</p> <pre><code>&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]\n&gt; Enter same passphrase again: [Type passphrase again]\n</code></pre> <p>\u6700\u540e\u5f97\u5230\u4e86\u4e24\u4e2a\u6587\u4ef6\uff1aid_rsa\u548cid_rsa.pub\u6587\u4ef6\u5df2\u7ecf\u751f\u6210\u3002\u5e76\u4e14\u751f\u6210\u7684\u8def\u5f84\u4e5f\u5df2\u663e\u793a\u3002</p> <ul> <li><code>id_rsa</code> \u6587\u4ef6\u662f\u79c1\u94a5\uff0c\u8981\u4fdd\u5b58\u597d\uff0c\u653e\u5728\u672c\u5730\uff0c\u79c1\u94a5\u53ef\u4ee5\u751f\u4ea7\u516c\u94a5\uff0c\u53cd\u4e4b\u4e0d\u884c\u3002</li> <li><code>id_rsa.pub</code> \u6587\u4ef6\u662f\u516c\u94a5\uff0c\u53ef\u4ee5\u7528\u4e8e\u53d1\u9001\u5230\u5176\u4ed6\u670d\u52a1\u5668\uff0c\u6216\u8005 <code>git</code> \u4e0a</li> <li>\u7528\u8bb0\u4e8b\u672c\u4e4b\u7c7b\u7684\u8f6f\u4ef6\u6253\u5f00 <code>id_rsa.pub</code> \u6587\u4ef6\uff0c\u5e76\u4e14\u590d\u5236\u5168\u90e8\u5185\u5bb9\u3002</li> <li>\u628a\u590d\u5236\u5185\u5bb9\u653e\u8fdb <code>GitHub SSH keys</code> \u4e2d\u5373\u53ef\u3002</li> </ul> <p>\u6700\u540e\u53ef\u7528 </p> <pre><code>ssh -T git@github.com\n</code></pre> <p>\u6d4b\u8bd5\u662f\u5426\u6210\u529f\u3002</p> <p>\u4e00\u4e2a\u7ec3\u4e60 <code>git</code> \u7684\u7f51\u7ad9</p> <p>Learn Git Branching</p>"},{"location":"Computer_Science/Tools/Git/#_4","title":"\u5e38\u7528\u547d\u4ee4","text":""},{"location":"Computer_Science/Tools/Git/#_5","title":"\u63d0\u4ea4","text":"<ol> <li><code>git status</code> \u6587\u4ef6\u67e5\u770b\u5f53\u524d\u72b6\u6001</li> <li><code>git add .</code> \u6dfb\u52a0\u6240\u6709/ <code>git add &lt;file&gt;</code> \u6dfb\u52a0\u6587\u4ef6</li> <li><code>git status</code> \u67e5\u770b\u72b6\u6001</li> <li><code>git commit -m \"Your commit message\"</code></li> <li><code>git push origin main</code></li> </ol>"},{"location":"Computer_Science/Tools/Git/#_6","title":"\u521b\u5efa\u65b0\u5206\u652f","text":"<ul> <li><code>git branch xxx</code> \u521b\u5efa\u5206\u652f</li> <li><code>git checkout xxx</code> \u5207\u6362\u5230\u5206\u652f</li> <li><code>git checkout -b xxx</code> \u521b\u5efa\u540d\u4e3a <code>xxx</code> \u7684\u5206\u652f\u5e76\u5207\u6362\u5230\u8be5\u5206\u652f</li> </ul>"},{"location":"Computer_Science/Tools/Git/#git-merge","title":"<code>git merge</code>","text":"<ul> <li><code>git merge bugFix</code> \u5728 <code>main</code> \u5206\u652f\u65f6\uff0c\u6267\u884c\u8be5\u6307\u4ee4\u5f97\u5230\u6307\u5411\u65b0\u8282\u70b9\uff0c\u8be5\u65b0\u8282\u70b9\u6307\u5411 <code>bugFix</code> \u548c\u4e0a\u4e00\u4e2a <code>main</code></li> </ul>"},{"location":"Computer_Science/Tools/Git/#git-rebase","title":"<code>git rebase</code>","text":"<ul> <li><code>git rebase main bugFix</code> \u5f53\u524d\u5728 <code>main</code> \u6267\u884c\u8be5\u8bed\u53e5\u5c06 <code>bugFix</code> \u590d\u5236\u7c98\u8d34\u5230 <code>main</code> \u4e4b\u4e0b\u3002\u800c <code>bugFix</code> \u4e4b\u524d\u7684\u4e0d\u662f\u540c\u4e00\u5206\u652f\u7684\u6ca1\u6709\u88ab\u590d\u5236\u8fc7\u7684\u4e5f\u4f1a\u88ab\u590d\u5236\u8fc7\u53bb\u3002</li> </ul>"},{"location":"Computer_Science/Tools/Git/#head","title":"<code>HEAD</code>","text":"<ul> <li>\u5982\u679c\u60f3\u770b <code>HEAD</code> \u6307\u5411\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>cat .git/HEAD</code> \u67e5\u770b\u3002\u5982\u679c <code>HEAD</code> \u6307\u5411\u7684\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u8fd8\u53ef\u4ee5\u7528 <code>git symbolic -ref HEAD</code> \u67e5\u770b\u5b83\u7684\u6307\u5411\u3002</li> </ul>"},{"location":"Computer_Science/Tools/Git/#git-log","title":"<code>git log</code>","text":"<p>\u56e0\u4e3a <code>git checkout abcjhsgd</code> \u957f\u957f\u7684\u54c8\u5e0c\u503c\u5341\u5206\u4e0d\u4fbf\u3002\u56e0\u6b64\u5f15\u5165\u76f8\u5bf9\u5f15\u7528\u3002</p> <p>\u76f8\u5bf9\u5f15\u7528\u975e\u5e38\u7ed9\u529b\uff0c\u8fd9\u91cc\u6211\u4ecb\u7ecd\u4e24\u4e2a\u7b80\u5355\u7684\u7528\u6cd5\uff1a</p> <ul> <li>\u4f7f\u7528 <code>^</code> \u5411\u4e0a\u79fb\u52a8 1 \u4e2a\u63d0\u4ea4\u8bb0\u5f55</li> <li>\u4f7f\u7528 <code>~&lt;num&gt;</code> \u5411\u4e0a\u79fb\u52a8\u591a\u4e2a\u63d0\u4ea4\u8bb0\u5f55\uff0c\u5982 <code>~3</code>\u3002\u8be5\u64cd\u4f5c\u7b26\u540e\u9762\u53ef\u4ee5\u8ddf\u4e00\u4e2a\u6570\u5b57\uff08\u53ef\u9009\uff0c\u4e0d\u8ddf\u6570\u5b57\u65f6\u4e0e <code>^</code> \u76f8\u540c\uff0c\u5411\u4e0a\u79fb\u52a8\u4e00\u6b21\uff09\uff0c\u6307\u5b9a\u5411\u4e0a\u79fb\u52a8\u591a\u5c11\u6b21\u3002</li> </ul> <pre><code>git branch -f main HEAD~3\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u4f1a\u5c06 main \u5206\u652f\u5f3a\u5236\u6307\u5411 HEAD \u7684\u7b2c 3 \u7ea7 parent \u63d0\u4ea4\u3002<code>-f</code> \u5219\u5bb9\u8bb8\u6211\u4eec\u5c06\u5206\u652f\u5f3a\u5236\u79fb\u52a8\u5230\u90a3\u4e2a\u4f4d\u7f6e\u3002</p>"},{"location":"Computer_Science/Tools/Git/#_7","title":"\u64a4\u9500\u53d8\u66f4","text":"<ul> <li><code>git reset HEAD~1</code></li> </ul> <p>Git \u628a main \u5206\u652f\u79fb\u56de\u5230 <code>C1</code>\uff1b\u73b0\u5728\u6211\u4eec\u7684\u672c\u5730\u4ee3\u7801\u5e93\u6839\u672c\u5c31\u4e0d\u77e5\u9053\u6709 <code>C2</code> \u8fd9\u4e2a\u63d0\u4ea4\u4e86\u3002</p> <ul> <li><code>git revert HEAD</code></li> </ul> <p>\u4e3a\u4e86\u64a4\u9500\u66f4\u6539\u5e76\u5206\u4eab\u7ed9\u522b\u4eba\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 <code>git revert</code> \u3002\u5728\u6211\u4eec\u8981\u64a4\u9500\u7684\u63d0\u4ea4\u8bb0\u5f55\u540e\u9762\u5c45\u7136\u591a\u4e86\u4e00\u4e2a\u65b0\u63d0\u4ea4\uff01\u8fd9\u662f\u56e0\u4e3a\u65b0\u63d0\u4ea4\u8bb0\u5f55 <code>C2'</code> \u5f15\u5165\u4e86\u66f4\u6539 \u2014\u2014 \u8fd9\u4e9b\u66f4\u6539\u521a\u597d\u662f\u7528\u6765\u64a4\u9500 <code>C2</code> \u8fd9\u4e2a\u63d0\u4ea4\u7684\u3002\u4e5f\u5c31\u662f\u8bf4 <code>C2'</code> \u7684\u72b6\u6001\u4e0e <code>C1</code> \u662f\u76f8\u540c\u7684\u3002 <code>revert</code> \u4e4b\u540e\u5c31\u53ef\u4ee5\u628a\u4f60\u7684\u66f4\u6539\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\u4e0e\u522b\u4eba\u5206\u4eab\u5566\u3002</p>"},{"location":"Computer_Science/Tools/Git/#git-cherry-pick","title":"<code>git cherry-pick</code>","text":"<ul> <li><code>git cherry-pick c2 c4</code> \u5c06 <code>c2</code> \u548c <code>c4</code> \u90fd\u590d\u5236\u5230\u5f53\u524d\u5206\u652f\u4e0b\u9762\u6765\u3002\u53ea\u8981\u4e0d\u662f\u81ea\u5df1\u4e0a\u6e38\u5373\u53ef\u3002</li> </ul>"},{"location":"Computer_Science/Tools/Git/#git-rebase-i","title":"<code>git rebase -i</code>","text":"<ul> <li><code>git rebase -i HEAD~4</code> \u4ea4\u4e92\u5f0f\uff0c <code>HEAD</code> \u4e4b\u524d\u56db\u4e2a\u90fd\u53c2\u4e0e\u3002</li> </ul>"},{"location":"Computer_Science/Tools/Git/#git-tag","title":"<code>git tag</code>","text":"<ul> <li><code>git tag v0 c1</code> \u7ed9 <code>c1</code> \u4e0a <code>v0</code> \u6807\u7b7e\u3002</li> </ul>"},{"location":"Computer_Science/Tools/Git/#git-describe","title":"<code>git describe</code>","text":"<p><code>git describe</code> \u7684\u8bed\u6cd5\u662f\uff1a</p> <pre><code>git describe &lt;ref&gt;\n</code></pre> <p><code>&lt;ref&gt;</code> \u53ef\u4ee5\u662f\u4efb\u4f55\u80fd\u88ab Git \u8bc6\u522b\u6210\u63d0\u4ea4\u8bb0\u5f55\u7684\u5f15\u7528\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u6307\u5b9a\u7684\u8bdd\uff0cGit \u4f1a\u4f7f\u7528\u4f60\u76ee\u524d\u6240\u5728\u7684\u4f4d\u7f6e\uff08 <code>HEAD</code> \uff09\u3002</p> <p>\u5b83\u8f93\u51fa\u7684\u7ed3\u679c\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>&lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash&gt;\n</code></pre> <p><code>tag</code> \u8868\u793a\u7684\u662f\u79bb <code>ref</code> \u6700\u8fd1\u7684\u6807\u7b7e\uff0c <code>numCommits</code> \u662f\u8868\u793a\u8fd9\u4e2a <code>ref</code> \u4e0e <code>tag</code> \u76f8\u5dee\u6709\u591a\u5c11\u4e2a\u63d0\u4ea4\u8bb0\u5f55\uff0c <code>hash</code> \u8868\u793a\u7684\u662f\u4f60\u6240\u7ed9\u5b9a\u7684 <code>ref</code> \u6240\u8868\u793a\u7684\u63d0\u4ea4\u8bb0\u5f55\u54c8\u5e0c\u503c\u7684\u524d\u51e0\u4f4d\u3002\u5f53 <code>ref</code> \u63d0\u4ea4\u8bb0\u5f55\u4e0a\u6709\u67d0\u4e2a\u6807\u7b7e\u65f6\uff0c\u5219\u53ea\u8f93\u51fa\u6807\u7b7e\u540d\u79f0\u3002</p>"},{"location":"Computer_Science/Tools/Git/#parent","title":"\u4e24\u4e2aparent\u8282\u70b9","text":"<ul> <li><code>git checkout HEAD^2</code> \u5230\u4e0d\u662f\u81ea\u5df1\u672c\u652f\u7684\u7b2c\u4e8c\u4e2a <code>parent</code> \u8282\u70b9\u3002\u4e14\u8be5\u64cd\u4f5c\u7b26\u652f\u6301\u94fe\u5f0f\u64cd\u4f5c\u3002\u4f8b\u5982 <code>git checkout HEAD~^2~2</code> \u3002</li> </ul>"},{"location":"Computer_Science/Tools/Git/#git-fetch","title":"<code>git fetch</code>","text":"<p><code>git fetch</code> \u5e76\u4e0d\u4f1a\u6539\u53d8\u4f60\u672c\u5730\u4ed3\u5e93\u7684\u72b6\u6001\u3002\u5b83\u4e0d\u4f1a\u66f4\u65b0\u4f60\u7684 <code>main</code> \u5206\u652f\uff0c\u4e5f\u4e0d\u4f1a\u4fee\u6539\u4f60\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u3002\u6240\u4ee5, \u4f60\u53ef\u4ee5\u5c06 <code>git fetch</code> \u7684\u7406\u89e3\u4e3a\u5355\u7eaf\u7684\u4e0b\u8f7d\u64cd\u4f5c\u3002</p> <p>\u201c\u5982\u679c\u6211\u4eec\u6307\u5b9a <code>&lt;source&gt;:&lt;destination&gt;</code> \u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u201d</p> <p>\u5982\u679c\u4f60\u89c9\u5f97\u76f4\u63a5\u66f4\u65b0\u672c\u5730\u5206\u652f\u5f88\u723d\uff0c\u90a3\u4f60\u5c31\u7528\u5192\u53f7\u5206\u9694\u7684 refspec \u5427\u3002\u4e0d\u8fc7\uff0c\u4f60\u4e0d\u80fd\u5728\u5f53\u524d\u5207\u6362\u7684\u5206\u652f\u4e0a\u5e72\u8fd9\u4e2a\u4e8b\uff0c\u4f46\u662f\u5176\u5b83\u5206\u652f\u662f\u53ef\u4ee5\u7684\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u70b9\u662f\u9700\u8981\u6ce8\u610f\u7684 \u2014\u2014 <code>source</code> \u73b0\u5728\u6307\u7684\u662f\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u7684\u4f4d\u7f6e\uff0c\u800c <code>&lt;destination&gt;</code> \u624d\u662f\u8981\u653e\u7f6e\u63d0\u4ea4\u7684\u672c\u5730\u4ed3\u5e93\u7684\u4f4d\u7f6e\u3002\u5b83\u4e0e <code>git push</code> \u521a\u597d\u76f8\u53cd\uff0c\u8fd9\u662f\u53ef\u4ee5\u8bb2\u7684\u901a\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u5f80\u76f8\u53cd\u7684\u65b9\u5411\u4f20\u9001\u6570\u636e\u3002</p> <p><code>git fetch origin :bar</code> \u5982\u679c\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u6ca1\u6709 <code>bar</code> \uff0c\u5219\u662f\u5c06\u672c\u5730\u4ed3\u5e93\u4e2d\u7684 <code>bar</code> \u5220\u9664\u3002</p>"},{"location":"Computer_Science/Tools/Git/#git-pull","title":"<code>git pull</code>","text":"<p>\u5176\u5b9e\u6709\u5f88\u591a\u65b9\u6cd5\u7684 \u2014\u2014 \u5f53\u8fdc\u7a0b\u5206\u652f\u4e2d\u6709\u65b0\u7684\u63d0\u4ea4\u65f6\uff0c\u4f60\u53ef\u4ee5\u50cf\u5408\u5e76\u672c\u5730\u5206\u652f\u90a3\u6837\u6765\u5408\u5e76\u8fdc\u7a0b\u5206\u652f\u3002\u4e5f\u5c31\u662f\u8bf4\u5c31\u662f\u4f60\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4:</p> <ul> <li><code>git cherry-pick o/main</code></li> <li><code>git rebase o/main</code></li> <li><code>git merge o/main</code></li> <li>\u7b49\u7b49</li> </ul> <p><code>git pull</code> \u662f <code>git fetch</code> \u548c <code>git merge</code> \u7684\u7f29\u5199\u3002</p> <p><code>git pull --rebase</code> \u5c31\u662f fetch \u548c rebase \u7684\u7b80\u5199\uff01</p>"},{"location":"Computer_Science/Tools/Git/#git-push","title":"<code>git push</code>","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4e3a push \u6307\u5b9a\u53c2\u6570\uff0c\u8bed\u6cd5\u662f\uff1a</p> <pre><code>git push &lt;remote&gt; &lt;place&gt;\n</code></pre> <pre><code>git push origin main\n</code></pre> <p>\u628a\u8fd9\u4e2a\u547d\u4ee4\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\uff1a</p> <p>\u5207\u5230\u672c\u5730\u4ed3\u5e93\u4e2d\u7684\u201cmain\u201d\u5206\u652f\uff0c\u83b7\u53d6\u6240\u6709\u7684\u63d0\u4ea4\uff0c\u518d\u5230\u8fdc\u7a0b\u4ed3\u5e93\u201corigin\u201d\u4e2d\u627e\u5230\u201cmain\u201d\u5206\u652f\uff0c\u5c06\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u6ca1\u6709\u7684\u63d0\u4ea4\u8bb0\u5f55\u90fd\u6dfb\u52a0\u4e0a\u53bb\uff0c\u641e\u5b9a\u4e4b\u540e\u544a\u8bc9\u6211\u3002</p> <p>\u8981\u540c\u65f6\u4e3a\u6e90\u548c\u76ee\u7684\u5730\u6307\u5b9a <code>&lt;place&gt;</code> \u7684\u8bdd\uff0c\u53ea\u9700\u8981\u7528\u5192\u53f7 <code>:</code> \u5c06\u4e8c\u8005\u8fde\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\uff1a</p> <pre><code>git push origin &lt;source&gt;:&lt;destination&gt;\n</code></pre> <p>\u8fd9\u4e2a\u53c2\u6570\u5b9e\u9645\u7684\u503c\u662f\u4e2a refspec\uff0c\u201crefspec\u201d \u662f\u4e00\u4e2a\u81ea\u9020\u7684\u8bcd\uff0c\u610f\u601d\u662f Git \u80fd\u8bc6\u522b\u7684\u4f4d\u7f6e\uff08\u6bd4\u5982\u5206\u652f <code>foo</code> \u6216\u8005 <code>HEAD~1</code>\uff09</p> <p>\u4f8b\u5982 <code>git push origin foo^:main</code> \u5219\u5c06 <code>foo^</code> \u4e4b\u4e0a\u6ca1\u6709\u63a8\u9001\u8fc7\u7684\u63a8\u9001\u4e00\u904d\uff0c\u5e76\u4e3a\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u590d\u5236\u7684\u8be5\u4e00\u6bb5\u547d\u540d\u4e3a <code>main</code> \u3002</p> <p><code>git push origin :foo</code> \u901a\u8fc7\u7ed9 <code>push</code> \u4f20\u7a7a\u503c <code>source</code> \uff0c\u6210\u529f\u5220\u9664\u4e86\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u7684 <code>foo</code> \u5206\u652f\u3002</p>"},{"location":"Computer_Science/Tools/Git/#_8","title":"\u8fdc\u7a0b\u8ddf\u8e2a","text":"<p><code>git checkout -b totallyNotMain o/main</code> \u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u5206\u652f <code>totallyNotMain</code> \u4e0a\u6267\u884c <code>git push</code> \uff0c\u5c06\u5de5\u4f5c\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\u7684 <code>main</code> \u5206\u652f\u4e0a\u3002</p> <p>\u53e6\u4e00\u79cd\u8bbe\u7f6e\u8fdc\u7a0b\u8ffd\u8e2a\u5206\u652f\u7684\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\uff1a<code>git branch -u</code> \u547d\u4ee4\uff0c\u6267\u884c\uff1a</p> <pre><code>git branch -u o/main foo\n</code></pre> <p>\u8fd9\u6837 <code>foo</code> \u5c31\u4f1a\u8ddf\u8e2a <code>o/main</code> \u4e86\u3002\u5982\u679c\u5f53\u524d\u5c31\u5728 foo \u5206\u652f\u4e0a, \u8fd8\u53ef\u4ee5\u7701\u7565 foo\uff1a</p> <pre><code>git branch -u o/main\n</code></pre>"},{"location":"Computer_Science/Tools/Git/#github","title":"<code>GitHub</code>","text":"<p><code>git clone https://...</code></p> <ul> <li>\u6765<code>clone</code>\u4e00\u4e2a\u4ed3\u5e93</li> </ul>"},{"location":"Computer_Science/Tools/Git/#git_3","title":"\u4f7f\u7528 <code>git</code> \u65f6\u7684\u4e00\u4e9b\u62a5\u9519\u89e3\u51b3","text":"<p>\u7531\u4e8e\u672c\u4eba\u6c34\u5e73\u5b9e\u5728\u6709\u9650\uff0c\u521d\u59cb\u9636\u6bb5\u603b\u662f\u9047\u5230\u4e00\u4e9b\u95ee\u9898\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u6cd5\u3002</p>"},{"location":"Computer_Science/Tools/Git/#git-push-rejected","title":"<code>git push</code> \u65f6\u51fa\u73b0 <code>rejected</code>","text":"<pre><code>To https://github.com/melody12020831/Slides.git\n ! [rejected]        main -&gt; main (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/melody12020831/Slides.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. If you want to integrate the remote changes,\nhint: use 'git pull' before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n</code></pre> <p>\u51fa\u73b0\u8fd9\u4e2a\u9519\u8bef\u7684\u539f\u56e0\u662f\u4f60\u672c\u5730\u7684\u5206\u652f\u843d\u540e\u4e8e\u8fdc\u7a0b\u5206\u652f\uff0c\u5bfc\u81f4 Git \u65e0\u6cd5\u76f4\u63a5\u6267\u884c git push \u64cd\u4f5c\u3002\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u7684\u5185\u5bb9\u5df2\u7ecf\u66f4\u65b0\uff0c\u800c\u4f60\u7684\u672c\u5730\u5206\u652f\u6ca1\u6709\u5305\u542b\u8fd9\u4e9b\u66f4\u65b0\u3002</p> <p>\u89e3\u51b3\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <ol> <li>\u62c9\u53d6\u8fdc\u7a0b\u66f4\u6539</li> </ol> <pre><code>git pull origin main\n</code></pre> <ul> <li>\u5982\u679c\u6ca1\u6709\u51b2\u7a81\uff0cGit \u4f1a\u81ea\u52a8\u5c06\u8fdc\u7a0b\u5206\u652f\u7684\u66f4\u6539\u5408\u5e76\u5230\u4f60\u7684\u672c\u5730\u5206\u652f\u3002</li> <li>\u5982\u679c\u6709\u51b2\u7a81\uff0cGit \u4f1a\u63d0\u793a\u51b2\u7a81\u6587\u4ef6\uff0c\u4f60\u9700\u8981\u624b\u52a8\u89e3\u51b3\u51b2\u7a81\u540e\u518d\u7ee7\u7eed\u3002</li> </ul> <ol> <li>\u89e3\u51b3\u51b2\u7a81\uff08\u5982\u679c\u6709\uff09</li> </ol> <ul> <li>\u6253\u5f00\u51b2\u7a81\u6587\u4ef6\uff0c\u6839\u636e\u51b2\u7a81\u6807\u8bb0 (&lt;&lt;&lt;&lt;&lt;&lt;\u3001======\u3001&gt;&gt;&gt;&gt;&gt;&gt;) \u624b\u52a8\u7f16\u8f91\u6587\u4ef6\uff0c\u4fdd\u7559\u9700\u8981\u7684\u4ee3\u7801\u3002</li> <li>\u7f16\u8f91\u5b8c\u51b2\u7a81\u6587\u4ef6\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</li> </ul> <pre><code>git add &lt;\u51b2\u7a81\u6587\u4ef6&gt;\ngit commit -m \"\u89e3\u51b3\u51b2\u7a81\"\n</code></pre> <ol> <li>\u63a8\u9001\u66f4\u6539</li> </ol> <p>\u5728\u5b8c\u6210\u5408\u5e76\u6216\u89e3\u51b3\u51b2\u7a81\u540e\uff0c\u518d\u6b21\u5c1d\u8bd5\u63a8\u9001\uff1a</p> <pre><code>git push origin main\n</code></pre> <p>\u5982\u679c\u4f60\u4e0d\u60f3\u5408\u5e76\u8fdc\u7a0b\u66f4\u6539\uff0c\u800c\u662f\u76f4\u63a5\u8986\u76d6\u8fdc\u7a0b\u5206\u652f\uff0c\u53ef\u4ee5\u5f3a\u5236\u63a8\u9001\uff08\u4f46\u4e00\u822c\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\uff09\uff1a</p> <pre><code>git push origin main --force\n</code></pre> <p>Tip</p> <p>\u6ce8\u610f\uff1a \u8fd9\u4f1a\u5220\u9664\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u9002\u7528\u4e8e\u8fdc\u7a0b\u4ed3\u5e93\u6ca1\u6709\u91cd\u8981\u5185\u5bb9\u7684\u60c5\u51b5\u3002</p>"},{"location":"Computer_Science/Tools/Git/#git-pull-fatal-refusing-to-merge-unrelated-histories","title":"<code>git pull</code> \u65f6\u51fa\u73b0 <code>fatal: refusing to merge unrelated histories</code>","text":"<pre><code>git pull origin main\nFrom https://github.com/melody12020831/Slides\n * branch            main       -&gt; FETCH_HEAD\nfatal: refusing to merge unrelated histories\n</code></pre> <p>\u89e3\u51b3\u529e\u6cd5\u6709\u5982\u4e0b\u51e0\u79cd\uff1a</p> <ol> <li>\u5141\u8bb8\u5408\u5e76\u4e0d\u76f8\u5173\u7684\u5386\u53f2</li> </ol> <p>\u53ef\u4ee5\u901a\u8fc7 --allow-unrelated-histories \u53c2\u6570\u5f3a\u5236\u5408\u5e76\uff1a</p> <pre><code>git pull origin main --allow-unrelated-histories\n</code></pre> <ul> <li>Git \u4f1a\u5c06\u672c\u5730\u548c\u8fdc\u7a0b\u7684\u5386\u53f2\u5408\u5e76\uff0c\u53ef\u80fd\u9700\u8981\u624b\u52a8\u89e3\u51b3\u51b2\u7a81\uff08\u5982\u679c\u6587\u4ef6\u5185\u5bb9\u6709\u51b2\u7a81\uff09\u3002</li> </ul> <ol> <li>\u8986\u76d6\u8fdc\u7a0b\u4ed3\u5e93</li> </ol> <p>\u5f3a\u5236\u63a8\u9001\uff1a</p> <pre><code>git push origin main --force\n</code></pre> <ol> <li>\u5982\u679c\u4f60\u60f3\u4fdd\u7559\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5185\u5bb9</li> </ol> <p>\u5982\u679c\u8fdc\u7a0b\u4ed3\u5e93\u5df2\u6709\u91cd\u8981\u5185\u5bb9\uff0c\u800c\u672c\u5730\u4ed3\u5e93\u8fd8\u6ca1\u6709\u4fee\u6539\uff0c\u53ef\u4ee5\u5148\u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93\uff1a</p> <ol> <li>\u5907\u4efd\u672c\u5730\u4ed3\u5e93\u7684\u66f4\u6539\uff08\u4f8b\u5982\u590d\u5236\u5230\u5176\u4ed6\u5730\u65b9\uff09\u3002</li> <li>\u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93\uff1a</li> </ol> <pre><code>git clone https://github.com/melody12020831/Slides.git\n</code></pre> <p>\u5c06\u672c\u5730\u66f4\u6539\u624b\u52a8\u590d\u5236\u5230\u514b\u9686\u7684\u4ed3\u5e93\u76ee\u5f55\uff0c\u7136\u540e\u63d0\u4ea4\u548c\u63a8\u9001\u3002</p>"},{"location":"Computer_Science/Tools/reveal-md/","title":"\u4f7f\u7528 reveal-md \u5236\u4f5c PPT","text":"<p> \u7ea6 207 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>Abstract</p> <p>\u56e0\u4e3a\u8f6e\u5230\u4e86\u8bb2\u89e3\u9898\u76ee\uff0c\u6240\u4ee5\u5c1d\u8bd5\u4f7f\u7528 reveal-md \u5236\u4f5c PPT\u3002</p> <p>\u601d\u8003\u7740\u4e0d\u7136\u90e8\u7f72\u5230 GitHub Pages \u4e0a\uff0c\u4e8e\u662f\u6709\u4e86\u4ee5\u4e0b\u3002\u4f46\u5927\u591a\u501f\u9274\u524d\u8f88\u7ecf\u9a8c\uff0c\u6240\u4ee5\u6253\u7b97\u5495\u5495(\u653e\u5404\u79cd\u94fe\u63a5)\u3002</p> <p>\u4e0d\u8fc7\u76ee\u524d\u5c1a\u6709\u4e00\u4e9b\u4e0d\u592a\u4fbf\u5229\u7684\u5730\u65b9\uff0c\u5927\u62b5\u7b49\u6211\u4f55\u65f6\u6709\u7a7a\u6765\u5199\u4e2a\u811a\u672c\u5427\u3002</p> <p>\u4e0d\u8fc7\u90fd\u8fd9\u4e48\u8bf4\u4e86\uff0c\u6781\u5927\u53ef\u80fd\u6211\u4f1a\u5f00\u59cb \u5495\u5495(\u9003\u8dd1) \u3002</p> <p>\u53ef\u4ee5\u6309\u987a\u5e8f\u98df\u7528\ud83d\ude0b</p> <ol> <li>\u5199 slides \u5185\u5bb9\u65f6\u53ef\u4f9b\u67e5\u9605 reveal-md \u5b98\u65b9\u6587\u6863</li> <li>\u7b2c\u4e00\u6b21\u4f7f\u7528\u5feb\u6765\u770b \u4fee\u795e\u7684\u6559\u7a0b</li> <li>\u8d85\u7ea7\u5389\u5bb3\u7684\u5b66\u957f\u7684 css \u6837\u5f0f\uff01 </li> <li>\u53ef\u80fd\u6bcf\u6b21\u751f\u6210\u4e4b\u540e\u53ef\u4ee5\u4e0d\u7528\u624b\u52a8\u590d\u5236\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u518d\u90e8\u7f72\u5230 github \u4e0a\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u7b49\u6211\u4e0b\u6b21\u53c8\u8981\u7528\u5230\u7684\u65f6\u5019\u641e\u660e\u767d\u4e86\u518d\u6765\u3002(\u5495\u5495(\u9003))</li> </ol>"},{"location":"Computer_Science/Visualization/note/","title":"\u6570\u636e\u53ef\u89c6\u5316\u7b14\u8bb0","text":"<p> \u7ea6 1196 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 6 \u5206\u949f</p>"},{"location":"Computer_Science/Visualization/note/#_2","title":"\u53ef\u89c6\u5316\u7684\u53d1\u5c55","text":"<ol> <li>\u79d1\u5b66\u53ef\u89c6\u5316 \\(\\rightarrow\\) \u79d1\u5b66\u4e0e\u5de5\u7a0b\u9886\u57df \\(\\rightarrow\\)</li> </ol> <ul> <li>\u5e26\u6709\u7a7a\u95f4\u4fe1\u606f\u548c\u51e0\u4f55\u4fe1\u606f\u7684\u4e09\u7ef4\u6d4b\u91cf\u6570\u636e</li> <li>\u8ba1\u7b97\u6a21\u62df\u6570\u636e</li> <li>\u533b\u5b66\u5f71\u50cf\u6570\u636e</li> </ul> <ol> <li>\u4fe1\u606f\u53ef\u89c6\u5316 \\(\\rightarrow\\) \u975e\u7ed3\u6784\u5316\u3001\u975e\u51e0\u4f55\u7684\u62bd\u8c61\u6570\u636e</li> <li>\u53ef\u89c6\u5206\u6790 \\(\\rightarrow\\) \u4ee5\u4ea4\u4e92\u5f0f\u754c\u9762\u4e3a\u57fa\u7840\u7684\u5206\u6790\u63a8\u7406\u79d1\u5b66 \\(\\rightarrow\\) \u7ed3\u5408\u4e86\u53ef\u89c6\u5316\u3001\u4eba\u673a\u4ea4\u4e92\u4e0e\u6570\u636e\u6316\u6398 \\(\\rightarrow\\) \u89e3\u51b3\u9700\u8981\u4eba\u53c2\u4e0e\u7406\u89e3\u548c\u51b3\u7b56\u7684\u591a\u79cd\u5b9e\u9645\u95ee\u9898</li> </ol>"},{"location":"Computer_Science/Visualization/note/#_3","title":"\u79d1\u5b66\u53ef\u89c6\u5316","text":"<p>\u5448\u73b0\u5b9e\u6d4b\u6216\u4eff\u771f\u7684\u79d1\u5b66\u6570\u636e\u4e2d\u7684\u7279\u5f81\u3001\u6a21\u5f0f\u548c\u6f14\u5316\u89c4\u5f8b</p> <ol> <li>\u6807\u91cf\u573a\u53ef\u89c6\u5316(\u6570\u636e\u6765\u6e90 \\(\\rightarrow\\) \u626b\u63cf\u6216\u6d4b\u91cf\u8bbe\u5907\uff0c\u8ba1\u7b97\u673a\u6216\u673a\u5668\u4eff\u771f)</li> <li>\u5411\u91cf\u573a\u53ef\u89c6\u5316</li> <li>\u5f20\u91cf\u573a\u53ef\u89c6\u5316</li> </ol> <ul> <li>\u6807\u91cf \\(\\rightarrow\\) 0\u9636\u5f20\u91cf</li> <li>\u5411\u91cf \\(\\rightarrow\\) 1\u9636\u5f20\u91cf</li> </ul>"},{"location":"Computer_Science/Visualization/note/#_4","title":"\u4fe1\u606f\u53ef\u89c6\u5316","text":"<p>\u5448\u73b0\u62bd\u8c61\u3001\u9ad8\u7ef4\u7684\u6570\u636e</p> <ol> <li>\u65f6\u7a7a\u6570\u636e\u53ef\u89c6\u5316</li> <li>\u5c42\u6b21\u4e0e\u7f51\u7edc\u7ed3\u6784\u6570\u636e\u53ef\u89c6\u5316</li> <li>\u6587\u672c\u4e0e\u8de8\u5a92\u4f53\u6570\u636e\u53ef\u89c6\u5316</li> <li>\u591a\u53d8\u91cf\u6570\u636e\u53ef\u89c6\u5316</li> </ol>"},{"location":"Computer_Science/Visualization/note/#_5","title":"\u6570\u636e","text":""},{"location":"Computer_Science/Visualization/note/#4","title":"\u5927\u6570\u636e\u76844\u4e2a\u7279\u5f81","text":"<ol> <li>Volume \u6570\u636e\u91cf\u5de8\u5927</li> <li>Velocity \u6570\u636e\u4ea7\u751f\u548c\u589e\u957f\u901f\u5ea6\u6781\u5feb</li> <li>Variety \u6570\u636e\u7c7b\u578b\u7e41\u591a</li> <li>Value \u6570\u636e\u4ef7\u503c\u5bc6\u5ea6\u4f4e</li> </ol>"},{"location":"Computer_Science/Visualization/note/#_6","title":"\u5c5e\u6027","text":"<p>\u5c5e\u6027\u53c8\u79f0:</p> <ol> <li>\u7ef4\u5ea6 \\(\\leftarrow\\) \u6570\u5b66</li> <li>\u7279\u5f81 \\(\\leftarrow\\) \u673a\u5668\u5b66\u4e60</li> <li>\u53d8\u91cf \\(\\leftarrow\\) \u7edf\u8ba1\u5b66</li> </ol> <p>\u5c5e\u6027\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b:</p> <ol> <li>\u7c7b\u522b\u5c5e\u6027: \u4e5f\u79f0\u4e3a\"\u72b6\u6001\"\uff0c\u5b83\u7c7b\u4f3c\u4e8e\"\u4e1c\u897f\u7684\u540d\u79f0\"\u3002\u4ec5\u4ec5\u662f\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u5e76\u4e0d\u8574\u542b\u5e8f\u5217\u7684\u4fe1\u606f\uff0c\u4e5f\u4e0d\u5177\u5907\u8fd0\u7b97\u7684\u529f\u80fd\u3002</li> <li>\u5e8f\u6570\u5c5e\u6027: \u82e5\u5c5e\u6027\u80fd\u591f\u63d0\u4f9b\u5bf9\u8c61\u4e4b\u95f4\u7684\u6bd4\u8f83\u4fe1\u606f\uff0c\u8fd9\u65f6\u5c31\u79f0\u8fd9\u79cd\u5c5e\u6027\u4e3a\u5e8f\u6570\u5c5e\u6027\u3002</li> </ol> <p>2.1. \u5982\u679c\u4e00\u4e2a\u5e8f\u6570\u5c5e\u6027\u4e2d\u7684\u6570\u636e\u5728\u7b97\u6570\u8fd0\u7b97\u4e0b\u5177\u6709\u610f\u4e49\uff0c\u90a3\u4e48\u8fd9\u79cd\u66f4\u7ec6\u5206\u7684\u7c7b\u578b\u79f0\u4e3a\u6570\u503c\u5c5e\u6027\u3002  2.2.1. \u79bb\u6563\u6570\u636e\u662f\u6307\u5176\u6570\u503c\u53ea\u80fd\u7528\u6574\u6570\u5355\u4f4d\u8ba1\u7b97\u7684\u6570\u636e\u3002 2.2.2. \u8fde\u7eed\u6570\u636e\u662f\u6211\u4eec\u9700\u8981\u4f7f\u7528\u6d4b\u91cf\u6216\u8ba1\u7b97\u7684\u65b9\u6cd5\u5f97\u5230\u7684\u3002</p> <ul> <li>\u4e86\u89e3\u6570\u636e\u5206\u5e03</li> <li>\u4e86\u89e3\u6570\u636e\u5bf9\u8c61\u5173\u7cfb</li> <li>\u53bb\u9664\u5197\u4f59\u6570\u636e</li> </ul> <p>\u523b\u753b\u6570\u636e\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb: \u76f8\u4f3c\u6027\u5ea6\u91cf\uff0c\u7528\u76f8\u5f02\u6027\u77e9\u9635\u3002</p> <p>\u5176\u4e2dd(i,j) \u662f\u5bf9\u8c61i\u548c\u5bf9\u8c61j\u4e4b\u95f4\u7684\u8ddd\u79bb (distance) \u6216\u79f0\u4e3a\u76f8\u5f02\u6027\u5ea6\u91cf, \u4e00\u822c\u800c\u8a00, d(i,j) \u662f\u4e00\u4e2a\u975e\u8d1f\u503c, \u5bf9\u8c61 i,j \u9ad8\u5ea6\u76f8\u4f3c\u65f6, d(i,j) \u63a5\u8fd1\u4e8e0 , \u5373\u8ddd\u79bb\u63a5\u8fd1\u4e8e0 \u4e14 d(i,j) = d(j,i) , \u6240\u4ee5\u4e0b\u9762\u76f8\u5f02\u6027\u77e9\u9635\u53ea\u663e\u793a\u5bf9\u89d2\u7ebf\u5de6\u4e0b\u90e8\u5206\u3002</p> \\[\\left[ \\begin{matrix} 0 \\\\ d(2,1) &amp; 0 \\\\ d(3,1) &amp; d(3,2) &amp; 0 \\\\ ... &amp; ... &amp; ... \\\\ d(n,1) &amp; d(n,2) &amp; ... &amp; ... &amp; 0 \\end{matrix} \\right]\\] <ol> <li>\u5931\u914d\u6bd4: \u4e24\u4e2a\u6570\u7684\u5931\u914d\u6bd4\u5c31\u662f\u5b83\u4eec\u4e2d\u503c\u4e0d\u76f8\u7b49\u7684\u5c5e\u6027\u4e2a\u6570\u5360\u603b\u5c5e\u6027\u4e2a\u6570\u7684\u6bd4\u4f8b\u3002</li> </ol> \\[d(i,j) = \\frac{p - m}{p}\\] <ol> <li>Jaccard\u76f8\u4f3c\u7cfb\u6570: </li> </ol> 1 0 sum 1 q r q+r 0 s t s+t sum q+s r+t p \\[J(i,j) = \\frac{r+s}{q+r+s}\\] <ol> <li>\u6b27\u62c9\u8ddd\u79bb</li> </ol> \\[d(i,j) = \\sqrt{\\sum_{k=1}^{d}(P_i - Q_i)^2}\\] <ol> <li>\u66fc\u54c8\u987f\u8ddd\u79bb</li> </ol> \\[d(i,j) = \\sum_{k=1}^{d}|P_i - Q_i|\\] <ol> <li>\u95f5\u53ef\u592b\u65af\u57fa\u8ddd\u79bb</li> </ol> \\[d(i,j) = \\sqrt[p]{\\sum_{k=1}^{d}|P_i - Q_i|^p}\\]"},{"location":"Computer_Science/Visualization/note/#_7","title":"\u6570\u636e\u79d1\u5b66","text":"<ul> <li>\u7b2c\u4e00\u8303\u5f0f:\u51e0\u5343\u5e74\u524d\u8bb0\u5f55\u548c\u63cf\u8ff0\u81ea\u7136\u73b0\u8c61\u7684\u7ecf\u9a8c\u79d1\u5b66</li> <li>\u7b2c\u4e8c\u8303\u5f0f:\u7c7b\u6570\u767e\u5e74\u524d\u5229\u7528\u6a21\u578b\u5f52\u7eb3\u603b\u7ed3\u8fc7\u53bb\u8bb0\u5f55\u7684\u73b0\u8c61\u7684\u7406\u8bba\u79d1\u5b66</li> <li>\u7b2c\u4e09\u8303\u5f0f:\u5229\u7528\u79d1\u5b66\u8ba1\u7b97\u673a\u5bf9\u590d\u6742\u73b0\u8c61\u8fdb\u884c\u6a21\u62df\u4eff\u771f\u7684\u8ba1\u7b97\u79d1\u5b66</li> <li>\u7b2c\u56db\u8303\u5f0f:\u8ba1\u7b97\u673a\u5c06\u6a21\u62df\u4eff\u771f\uff0c\u8fdb\u884c\u5206\u6790\u603b\u7ed3\uff0c\u5f97\u5230\u7406\u8bba\uff0c\u5373\u6570\u636e\u5bc6\u96c6\u578b\u79d1\u5b66\u3002(2007\u5e74)</li> </ul> <p>2010 : \u4ec0\u4e48\u662f\u6570\u636e\u79d1\u5b66?</p> <ol> <li>\u83b7\u53d6\u4e0e\u9884\u5904\u7406\u6570\u636e</li> <li>\u5b58\u50a8\u4e0e\u5206\u6790\u6570\u636e</li> <li>\u5448\u73b0\u4e0e\u89e3\u91ca\u6570\u636e</li> </ol> <p>\u5229\u7528\u6570\u636e\u7684\u80fd\u529b:</p> <ol> <li>\u7406\u89e3\u6570\u636e</li> <li>\u5904\u7406\u6570\u636e</li> <li>\u63d0\u53d6\u4ef7\u503c</li> <li>\u53ef\u89c6\u5316\u6570\u636e</li> <li>\u4ea4\u6d41\u6570\u636e</li> </ol> <p>\u786e\u4fdd\u6570\u636e\u7684\u8d28\u91cf:</p> <ol> <li>\u51c6\u786e\u6027</li> <li>\u5b8c\u6574\u6027</li> <li>\u4e00\u81f4\u6027</li> <li>\u65f6\u6548\u6027</li> <li>\u53ef\u4fe1\u6027</li> <li>\u53ef\u89e3\u91ca\u6027</li> </ol> <p>\u6570\u636e\u6e05\u6d17\u53ef\u89c6\u5316:</p> <ol> <li>\u77e9\u9635\u89c6\u56fe</li> <li>\u6392\u5e8f</li> <li>\u5448\u73b0\u7f3a\u5931\u95ee\u9898</li> </ol>"},{"location":"Computer_Science/Visualization/note/#_8","title":"\u53ef\u89c6\u5316","text":"<p>\u53ef\u89c6\u5316\u65b9\u6cd5:</p> <ol> <li>\u539f\u59cb\u6570\u636e\u53ef\u89c6\u5316</li> <li>\u7edf\u8ba1\u7ed3\u679c\u53ef\u89c6\u5316</li> <li>\u591a\u534f\u540c\u89c6\u56fe</li> </ol> <p>\u6570\u636e\u8f68\u8ff9: \u662f\u4e00\u79cd\u5355\u53d8\u91cf\u6570\u636e\u5448\u73b0\u65b9\u6cd5\uff0c\u901a\u8fc7\u5c06\u81ea\u53d8\u91cf\u4e0e\u56e0\u53d8\u91cf\u5728\u56fe\u4e2d\u7528\u70b9\u5448\u73b0\u51fa\u6765\u3002\u6570\u636e\u8f68\u8ff9\u53ef\u4ee5\u76f4\u89c2\u5730\u5c55\u73b0\u6570\u636e\u5206\u5e03\u3001\u8d70\u52bf\u4ee5\u53ca\u79bb\u7fa4\u5f02\u5e38\u70b9\u3002</p>"},{"location":"Computer_Science/Visualization/note/#_9","title":"\u6570\u636e\u6316\u6398","text":"<ol> <li>\u63cf\u8ff0\u578b\u4efb\u52a1: \u76f4\u63a5\u63cf\u8ff0\u6570\u636e\u7279\u5f81 -&gt; \u6570\u636e\u96c6\u4e2d\u5173\u8054\u6027\u6216\u76f8\u5173\u6027 -&gt; \u5c06\u6570\u636e\u5206\u7c07\uff0c\u7c07\u5185\u6570\u636e\u76f8\u4f3c\uff0c\u7c07\u5916\u6570\u636e\u4e0d\u540c -&gt; \u5206\u6790\u5f02\u5e38\u6570\u636e</li> <li>\u9884\u6d4b\u578b\u4efb\u52a1: \u627e\u4e00\u4e2a\u6a21\u578b\u7b97\u6cd5\u7528\u4e8e\u9884\u6d4b\u672a\u77e5\u5bf9\u8c61\u7684\u65f6\u7a7a\u884c\u4e3a</li> </ol>"},{"location":"Computer_Science/Visualization/note/#_10","title":"\u65b9\u6cd5","text":"<ol> <li>\u7edf\u8ba1\u65b9\u6cd5: \u56de\u5f52\u5206\u6790\u3001\u53c2\u6570\u5206\u6790</li> <li>\u673a\u5668\u5b66\u4e60: \u51b3\u7b56\u6811\u3001\u795e\u7ecf\u7f51\u7edc</li> <li>\u4f20\u7edf\u7b97\u6cd5: K\u5747\u503c\u7b97\u6cd5\u3001K\u4e34\u8fd1\u7b97\u6cd5</li> </ol>"},{"location":"Math/","title":"Index","text":"<p> \u7ea6 71 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f</p> <p>      \u9b3c\u898b\uff0c\u4e0d\u80fd\u7232\u4eba\u696d\u3002          \u6545\u8056\u4eba\u8cb4\u591c\u884c\u3002       \u2014\u2014\u300a\u9da1\u51a0\u5b50\u300b\u591c\u884c\u7b2c\u4e09  </p> <p>Abstract</p> <p>\u8fd9\u662f\u6211\u5728\u6d59\u6c5f\u5927\u5b66\u5b66\u4e60\u6570\u5b66\u7684\u8bfe\u7a0b\u7b14\u8bb0\uff0c\u4f1a\u6709\u4e00\u4e9b\u4e2a\u4eba\u7406\u89e3\u3002\u5efa\u7acb\u4e4b\u521d\u7684\u76ee\u7684\u662f\u4e3a\u65e5\u540e\u65b9\u4fbf\u67e5\u627e\u3002\u5e0c\u671b\u80fd\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/","title":"\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1","text":"<p> \u7ea6 353 \u4e2a\u5b57  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>\u8bfe\u7a0b\u4fe1\u606f</p> <ul> <li>\u667a\u4e91\u94fe\u63a5\uff1a\ud83d\udd17</li> <li>\u6388\u8bfe\uff1a\u8d75\u654f\u667a</li> <li>\u6559\u6750\uff1a\u300a\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u300b\uff0c\u5f20\u5e3c\u594b\uff0c\u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e</li> <li>PPT\uff1a \ud83d\udcc1</li> <li>\u4f5c\u4e1a\uff1a\ud83d\udcdd</li> </ul> <p>Notes</p> <ul> <li> \u6982\u7387\u8bba\u7684\u57fa\u672c\u6982\u5ff5</li> <li> \u968f\u673a\u53d8\u91cf\u53ca\u5176\u6982\u7387\u5206\u5e03</li> <li> \u591a\u5143\u968f\u673a\u53d8\u91cf\u53ca\u5176\u5206\u5e03</li> <li> \u968f\u673a\u53d8\u91cf\u7684\u6570\u5b57\u7279\u5f81</li> <li> \u5927\u6570\u5b9a\u5f8b\u53ca\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406</li> <li> \u7edf\u8ba1\u91cf\u4e0e\u62bd\u6837\u5206\u5e03</li> <li> \u53c2\u6570\u4f30\u8ba1</li> <li> \u5047\u8bbe\u68c0\u9a8c</li> </ul> <p>Info</p> <p>\u6211\u628a\u8001\u7248\u6559\u6750\u653e\u5728\u8fd9\u91cc\u4e86\uff0c\u9664\u4e86\u4f5c\u4e1a\u9898\u5927\u81f4\u4e0e\u65b0\u7248\u76f8\u540c\u3002</p> <p>98 \u4e0a\u627e\u5230\u7684\uff0c\u6709\u4e00\u4e9b\u6279\u6ce8\u5df2\u5220\u9664\uff0c\u5e0c\u671b\u6211\u5220\u5b8c\u4e86\u3002</p>  \u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1   58,793 KB / 2024-12-18 <p> \u4e0b\u8f7d</p> <p>24-25 \u5b66\u671f\u79cb\u51ac\u7684\u8003\u8bd5\u8303\u56f4</p> <p>\u7b2c\u4e00\u7ae0\uff1a\u5168\u90e8</p> <p>\u7b2c\u4e8c\u7ae0\uff1a\u4e0d\u8003\u5185\u5bb92.4\uff08\u56db\uff09\u5176\u4ed6\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf</p> <p>\u7b2c\u4e09\u7ae0\uff1a\u5168\u90e8</p> <p>\u7b2c\u56db\u7ae0\uff1a\u4e0d\u8003\u5185\u5bb9\uff08\u6761\u4ef6\u6570\u5b66\u671f\u671b\u3001\u534f\u65b9\u5dee\u77e9\u9635\uff09</p> <p>\u7b2c\u4e94\u7ae0\uff1a\u4e0d\u8003\u5185\u5bb9\uff08\u9a6c\u5c14\u53ef\u592b\u4e0d\u7b49\u5f0f\u3001\u674e\u96c5\u666e\u8bfa\u592b\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\uff09</p> <p>\u7b2c\u516d\u7ae0\uff1a\u4e0d\u8003\u5185\u5bb9\uff08\u9644\u5f55\uff09</p> <p>\u7b2c\u4e03\u7ae0\uff1a\u4e0d\u8003\u5185\u5bb9\uff08\u4e24\u4e2a\u6b63\u6001\u603b\u4f53\u65b9\u5dee\u4e0d\u7b49\u672a\u77e5\u7684\u5747\u503c\u5dee\u533a\u95f4\u4f30\u8ba1\u3001\u975e\u6b63\u6001\u603b\u4f53\u53c2\u6570\u533a\u95f4\u4f30\u8ba1\uff09</p> <p>\u7b2c\u516b\u7ae0\uff1a\u4e0d\u8003\u5185\u5bb9\uff08\u4e24\u4e2a\u6b63\u6001\u65b9\u5dee\u4e0d\u7b49\uff0c\u672a\u77e5\u7684\u5747\u503c\u662f\u5426\u76f8\u7b49\u5047\u8bbe\u68c0\u9a8c\u30018.5\u8282\u62df\u5408\u4f18\u5ea6\u68c0\u9a8c\u30018.6\u8282\u5217\u8054\u8868\u7684\u72ec\u7acb\u6027\u68c0\u9a8c\uff09</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/","title":"Chapter 1 \u6982\u7387\u8bba\u7684\u57fa\u672c\u6982\u5ff5","text":"<p> \u7ea6 2838 \u4e2a\u5b57  20 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 14 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_1","title":"\u6837\u672c\u7a7a\u95f4\u4e0e\u968f\u673a\u4e8b\u4ef6","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_2","title":"\u968f\u673a\u8bd5\u9a8c\u7684\u7279\u70b9","text":"<ol> <li>\u53ef\u4ee5\u5728\u76f8\u540c\u6761\u4ef6\u4e0b\u91cd\u590d\u8fdb\u884c</li> <li>\u4e8b\u5148\u77e5\u9053\u53ef\u80fd\u51fa\u73b0\u7684\u7ed3\u679c</li> <li>\u8fdb\u884c\u8bd5\u9a8c\u524d\u5e76\u4e0d\u77e5\u9053\u54ea\u4e2a\u8bd5\u9a8c\u7ed3\u679c\u4f1a\u53d1\u751f</li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_3","title":"\u6837\u672c\u7a7a\u95f4","text":"<p>\u5b9a\u4e49\uff1a\u968f\u673a\u8bd5\u9a8c E \u7684\u6240\u6709\u7ed3\u679c\u6784\u6210\u7684\u96c6\u5408\u79f0\u4e3a E \u7684\u6837\u672c\u7a7a\u95f4\uff0c\u8bb0\u4e3a S\uff0c\u79f0 S \u4e2d\u7684\u5143\u7d20 e \u4e3a\u6837\u672c\u70b9\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_4","title":"\u968f\u673a\u4e8b\u4ef6","text":"<p>\u79f0 S \u7684\u5b50\u96c6 A \u4e3a E \u7684\u968f\u673a\u4e8b\u4ef6 A\uff0c\u7b80\u79f0\u4e8b\u4ef6 A\u3002\u5f53\u4e14\u4ec5\u5f53 A \u6240\u5305\u542b\u7684\u4e00\u4e2a\u6837\u672c\u70b9\u53d1\u751f\u79f0\u4e8b\u4ef6 A \u53d1\u751f\u3002</p> <p>\u968f\u673a\u4e8b\u4ef6\u6709\u4ee5\u4e0b\u7279\u5f81\uff1a</p> <ol> <li>\u4e8b\u4ef6 A \u662f\u76f8\u5e94\u7684\u6837\u672c\u7a7a\u95f4 S \u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5176\u5173\u7cfb\u53ef\u7528\u7ef4\u6069(Venn)\u56fe\u6765\u8868\u793a</li> <li>\u4e8b\u4ef6 A \u53d1\u751f\u5f53\u4e14\u4ec5\u5f53 A \u4e2d\u7684\u67d0\u4e00\u4e2a\u6837\u672c\u70b9\u51fa\u73b0</li> <li>\u4e8b\u4ef6 A \u7684\u8868\u793a\u53ef\u7528\u96c6\u5408\uff0c\u4e5f\u53ef\u7528\u8bed\u8a00\u6765\u8868\u793a</li> </ol> <p>\u57fa\u672c\u4e8b\u4ef6\uff1a\u7531\u4e00\u4e2a\u6837\u672c\u70b9\u7ec4\u6210\u7684\u5355\u70b9\u96c6\u3002</p> <p>\u5fc5\u7136\u4e8b\u4ef6\uff1a\u6bcf\u6b21\u8bd5\u9a8c S \u603b\u662f\u53d1\u751f\u3002</p> <p>\u4e0d\u53ef\u80fd\u4e8b\u4ef6\uff1a\u8bb0\u03a6\u4e3a\u7a7a\u96c6\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u6837\u672c\u70b9\uff0c\u5219\u6bcf\u6b21\u8bd5\u9a8c\u03a6\u90fd\u4e0d\u53d1\u751f\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_5","title":"\u4e8b\u4ef6\u7684\u76f8\u4e92\u5173\u7cfb","text":"<p>\u5305\u542b | \u548c\u4e8b\u4ef6 | \u79ef\u4e8b\u4ef6 | \u9006\u4e8b\u4ef6 | \u5dee\u4e8b\u4ef6</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_6","title":"\u4e8b\u4ef6\u7684\u8fd0\u7b97","text":"\\[A \\cup B = \\{x | x \\in A \u6216 x \\in B\\}\\] \\[A \\cap B  = A \\cdot B = AB = \\{ x| x \\in A \u4e14 x \\in B\\}\\] <ul> <li> <p>\\(\\mathop{\\cup}\\limits_{i=1}^{n} A_i: A_1,A_2,\\dots,A_n\\)\u81f3\u5c11\u6709\u4e00\u4e2a\u53d1\u751f</p> </li> <li> <p>\\(\\mathop{\\cap}\\limits_{i=1}^{n}A_i:A_1,A_2,\\dots,A_n\\)\u540c\u65f6\u53d1\u751f</p> </li> </ul> <p>\u5f53\\(AB = \\Phi\\)\u65f6\uff0c\u79f0\u4e8b\u4ef6A\u4e0eB\u662f\u4e92\u4e0d\u76f8\u5bb9\u7684\uff0c\u6216\u4e92\u65a5\u7684\u3002</p> <p>A\u7684\u9006\u4e8b\u4ef6\u8bb0\u4f5c\\(\\overline{A}\\),\\(\\begin{cases} A\\cup \\overline{A} &amp;= S \\\\ A \\overline{A} &amp;= \\emptyset \\end{cases}\\),\u82e5\\(\\begin{cases} A\\cup B &amp;= S \\\\ A B &amp;= \\emptyset \\end{cases}\\),\u79f0AB\u4e92\u9006\u3002</p> \\[A \\overline{B} = A - B = \\{ x | x \\in A \u4e14 x \\notin B\\}\\] <ul> <li>\u4ea4\u6362\u5f8b\uff1aA\u222aB = B\u222aA, A \u2229 B = B \u2229 A\uff1b</li> <li>\u7ed3\u5408\u5f8b\uff1aA\u222a(B\u222aC) = (A\u222aB)\u222aC, A(BC) = (AB)C\uff1b</li> <li>\u5206\u914d\u5f8b\uff1aA(B\u222aC) = (AB)\u222a(AC), (AB)\u222aC = (A\u222aC)(B\u222aC);</li> <li>\u5bf9\u5076\u5f8b / \u5fb7\u6469\u6839\u5b9a\u5f8b(De Morgan's law)\uff1a</li> </ul> \\[\\overline{\\mathop{\\cup}\\limits_{j=1}^n A_j} = \\mathop{\\cap}\\limits_{j=1}^n \\overline{A_j}\\] \\[\\overline{\\mathop{\\cap}\\limits_{j=1}^nA_{j}} = \\mathop{\\cup}\\limits_{j=1}^n\\overline{A_j}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_7","title":"\u9891\u7387\u4e0e\u6982\u7387","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_8","title":"\u9891\u7387","text":"<p>\u5b9a\u4e49:</p> \\[f_n(A) = \\frac{n_A}{n};\\] <p>\u79f0\u4e3aA\u5728\u8fd9n\u6b21\u8bd5\u9a8c\u4e2d\u53d1\u751f\u7684\u9891\u7387\u3002</p> <p>\u5176\u4e2d\\(n_A\\)\u200b\u2014\u2014A\u53d1\u751f\u7684\u6b21\u6570(\u9891\u6570)\uff1bn\u2014\u2014\u603b\u8bd5\u9a8c\u6b21\u6570\u3002</p> <p>\u9891\u7387\u7684\u6027\u8d28\uff1a</p> <ol> <li> \\[ 0 \\le f_n(A) \\le 1\\] </li> <li> \\[f_n(S) = 1\\] </li> <li>\u82e5\\(A_1,A_2,\\dots,A_n\\)\u4e24\u4e24\u4e92\u4e0d\u76f8\u5bb9\uff0c\u5219\\(f_n(\\mathop{\\cup}\\limits_{i=1}^k A_i) = \\sum\\limits_{i=1}^k f_n(A_i)\\)</li> <li>\\(f_n(A)\\)\u968fn\u7684\u589e\u5927\u6e10\u8d8b\u7a33\u5b9a\uff0c\u8bb0\u7a33\u5b9a\u503c\u4e3ap</li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_9","title":"\u6982\u7387","text":"<p>\u82e5\u6837\u672c\u7a7a\u95f4 S\u4e2d\u7684\u4efb\u4e00\u4e8b\u4ef6 A\uff0c\u5b9a\u4e49\u6982\u7387 P(A) \u6ee1\u8db3\u4ee5\u4e0b\u4e09\u6761\u516c\u7406\uff1a</p> <ol> <li>\u975e\u8d1f\u6027 P(A)\u22650\uff1b</li> <li>\u89c4\u8303\u6027 / \u6b63\u5219\u6027 P(S)=1\uff1b</li> <li>\u53ef\u5217\u53ef\u52a0\u6027\uff1a\u5bf9\u4e8e S \u4e2d\u4e0d\u76f8\u5bb9\u7684\u4e8b\u4ef6 \\(A_i\\)\uff0c\u6709\\(P(\\mathop{\\cup}\\limits_{i=1}^{\\infty} A_i) = \\sum\\limits_{i=1}^{\\infty} P(A_i)\\)</li> </ol> <p>\u7531\u6b64\u5f97\u5230\u5982\u4e0b\u51e0\u6761\u6982\u7387\u7684\u6027\u8d28\uff1a</p> <ol> <li>\u5bf9\u4e8e\u6709\u9650\u4e2a\u4e24\u4e24\u4e0d\u76f8\u5bb9\u7684\u4e8b\u4ef6\u7684\u548c\u4e8b\u4ef6\uff0c\u6709 \\(P(\\mathop{\\cup}\\limits_{i=1}^{n} A_i) = \\sum\\limits_{i=1}^{n} P(A_i)\\)</li> <li>\\(P(A)=1\u2212P(\\overline{A})\\); \u7279\u522b\u7684\uff0c\u53ef\u4ee5\u5f97\u5230 \\(P(\\Phi) = 0\\);</li> <li>\u5f53 A\u2283B \u65f6\uff0cP(A\u2212B)=P(A)\u2212P(B)  \u4e14 P(A) \\(\\ge\\) P(B);</li> <li>\u6982\u7387\u7684\u52a0\u6cd5\u516c\u5f0f\uff1aP(A\u222aB) = P(A)+P(B)\u2212P(AB) ; \u63a8\u5e7f\u5373\u5bb9\u65a5\u539f\u7406\uff1b</li> <li>\u52a0\u6cd5\u516c\u5f0f\u7684\u63a8\u8bba\uff1aP(A\u222aB) \\(\\le\\) P(A)+P(B);</li> </ol> <p>\u72ec\u7acb\u4e0e\u4e92\u65a5</p> <p>\u8981\u6ce8\u610f\uff0c\u72ec\u7acb\u548c\u4e92\u65a5\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u6027\u8d28\uff0c\u5b83\u4eec\u5e76\u4e0d\u76f4\u63a5\u76f8\u5173\u3002</p> <p>\u72ec\u7acb\u662f\u6307 \\(P(AB) = P(A) \\times P(B)\\)</p> <p>\u800c\u4e92\u65a5\u662f\u6307 \\(A \\cap B = \\varnothing\\) , \u6216\u8005\u8bf4 \\(P(AB) = 0\\) , \\(P(A + B) = P(A) + P(B)\\)</p> Question <p>\u7532\u4e59\u4e193\u4eba\u53bb\u53c2\u52a0\u67d0\u4e2a\u96c6\u4f1a\u7684\u6982\u7387\u5747\u4e3a0.4\uff0c\u5176\u4e2d\u81f3\u5c11\u6709\u4e24\u4eba\u53c2\u52a0\u7684\u6982\u7387\u4e3a0.3\uff0c\u90fd\u53c2\u52a0\u7684\u6982\u7387\u4e3a0.05\uff0c\u6c423\u4eba\u4e2d\u81f3\u5c11\u6709\u4e00\u4eba\u53c2\u52a0\u7684\u6982\u7387\u3002</p> Answer <p> </p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_10","title":"\u7b49\u53ef\u80fd\u6982\u578b","text":"<p>\u5982\u679c\u968f\u673a\u4e8b\u4ef6\u6ee1\u8db3\uff1a</p> <ol> <li>S \u4e2d\u6837\u672c\u70b9\u6570\u6709\u9650\uff1b</li> <li>\\(\u2200i,j\u2208{1,2,...,n},P(e_i)=P(e_j)\\)\uff0c\u5373\u7b49\u53ef\u80fd\uff1b</li> </ol> <p>\u5219\u8be5\u8bd5\u9a8c\u95ee\u9898\u4e3a\u7b49\u53ef\u80fd\u6982\u578b\uff08\u53e4\u5178\u6982\u578b\uff09 \u6709\u5982\u4e0b\u6027\u8d28\uff1a\u82e5\u603b\u4e8b\u4ef6\u4e2a\u6570\u4e3a N\uff0cA \u4e3a n \u4e2a\u57fa\u672c\u4e8b\u4ef6\u7684\u548c\u4e8b\u4ef6\uff0c\u5219 \\(P(A) = \\frac{n}{N}\\)</p> Question <p>\uff08\u914d\u5bf9\u95ee\u9898\u2b50(\u66f4\u4e00\u822c\u5730)\uff09\u4e00\u4e2a\u5c0f\u73ed\u6709n\u4e2a\u540c\u5b66\uff0c\u7f16\u53f7\u4e3a1, 2, \u2026, n \u53f7\uff0c\u4e2d\u79cb\u8282\u524d\u6bcf\u4eba\u51c6\u5907\u4e00\u4ef6\u793c\u7269\uff0c\u76f8\u5e94\u7f16\u53f7\u4e3a1,2, \u2026 ,n\u3002\u5c06\u6240\u6709\u793c\u7269\u96c6\u4e2d\u653e\u5728\u4e00\u8d77\uff0c\u7136\u540e\u6bcf\u4e2a\u540c\u5b66\u968f\u673a\u53d6\u4e00\u4ef6\uff0c\u6c42\u6ca1\u6709\u4eba\u62ff\u5230\u81ea\u5df1\u793c\u7269\u7684\u6982\u7387\u3002</p> Answer <p> </p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_11","title":"\u6761\u4ef6\u6982\u7387","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_12","title":"\u5b9a\u4e49","text":"\\[P(B|A) = \\frac{P(AB)}{P(A)}, P(A) \\ne 0\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_13","title":"\u6027\u8d28","text":"<ol> <li>\\(P(\\cdot|A)\\) \u662f\u6982\u7387</li> <li>\u975e\u8d1f\u6027\uff1a\\(P(B|A) \\ge 0\\)</li> <li>\u89c4\u8303\u6027\uff1a\\(P(S|A) = 1\\)</li> <li>\u53ef\u5217\u53ef\u52a0\u6027\uff1a \\(A_1,A_2,\\dots,A_k,\\dots\\) \u4e24\u4e24\u4e92\u65a5 \\(\\rightarrow P(\\mathop{\\cup}\\limits_{i=1}^{\\infty}A_i|A) = \\sum\\limits_{i=1}^{\\infty}P(A_i|A)\\)</li> <li>\\(P(\\cdot | A)\\) \u5177\u6709\u6982\u7387\u7684\u6240\u6709\u6027\u8d28</li> </ol> Question <p>\u5929\u6c14\u5f88\u597d,\u5c0f\u738b\u60f3\u5e26\u5bb6\u4eba\u53bb\u5343\u5c9b\u6e56\u73a9,\u53c8\u60f3\u5230\u5929\u76ee\u5c71\u73a9.\u4ed6\u6709\u4e00\u679a\u786c\u5e01,\u4f46\u4e0d\u77e5\u9053\u8fd9\u679a\u786c\u5e01\u51fa\u73b0\u6b63\u9762\u7684\u6982\u7387.\u5229\u7528\u8fd9\u679a\u786c\u5e01\u8bbe\u8ba1\u4e00\u4e2a\u8bd5\u9a8c\u5e2e\u4ed6\u505a\u51b3\u5b9a\uff0c\u4f7f\u5f97\u6700\u540e\u4ed6\u53bb\u5343\u5c9b\u6e56\u548c\u53bb\u5929\u76ee\u5c71\u7684\u6982\u7387\u76f8\u7b49.</p> Answer <p></p> Question <p>\u67d0\u5355\u4f4d\u60f3\u4ece8\u540d\u4e1a\u52a1\u5458\u4e2d\u7b49\u6982\u7387\u5730\u9009\u53d6\u4e00\u540d\u53bb\u5916\u5730\u51fa\u5dee\u4e00\u5e74.\u73b0\u6709\u4e00\u679a\u5747\u5300\u786c\u5e01.\u5229\u7528\u8fd9\u679a\u786c\u5e01\u8bbe\u8ba1\u4e00\u4e2a\u8bd5\u9a8c\u5e2e\u8fd9\u4e2a\u5355\u4f4d\u505a\u51b3\u5b9a.</p> Answer <p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_14","title":"\u4e58\u6cd5\u516c\u5f0f","text":"<p>\\(P(AB) = P(A) \\cdot P(B | A) = P(B) \\cdot P(A| B)\\)</p> <p>\\(P(ABC) = P(A) \\cdot P(B | A) \\cdot P(C | AB)\\)</p> \\[P(A_1A_2\\dots A_n ) = P(A_1)P(A_2 | A_1)P(A_3 |A_1A_2 ) \\dots P(A_n | A_1 \\dots A_{n-1})\\] Question <p>\u4e00\u76d2\u4e2d\u67095\u4e2a\u7ea2\u7403\uff0c4\u4e2a\u767d\u7403\uff0c\u91c7\u7528\u4e0d\u653e\u56de\u62bd\u6837\uff0c\u6bcf\u6b21\u53d6\u4e00\u4e2a\uff0c\u53d64\u6b21\u3002</p> <p>(1)\u5df2\u77e5\u524d\u4e24\u6b21\u4e2d\u81f3\u5c11\u6709\u4e00\u6b21\u53d6\u5230\u7ea2\u7403\uff0c\u6c42\u524d\u4e24\u6b21\u4e2d\u6070\u6709\u4e00\u6b21\u53d6\u5230\u7ea2\u7403\u7684\u6982\u7387\uff1b</p> <p>(2)\u5df2\u77e5\u7b2c4\u6b21\u53d6\u5230\u7ea2\u7403\uff0c\u6c42\u7b2c1\uff0c2\u6b21\u4e5f\u53d6\u5230\u7ea2\u7403\u7684\u6982\u7387\u3002</p> Answer <p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#bayes","title":"\u5168\u6982\u7387\u516c\u5f0f&amp;Bayes\u516c\u5f0f","text":"<p>\u5212\u5206 \uff1a \u79f0 \\(B_1,B_2,\\dots,B_n\\) \u662f\u6837\u672c\u7a7a\u95f4 \\(S\\) \u7684\u4e00\u4e2a\u5212\u5206\uff0c\u82e5</p> <ol> <li>\u4e0d\u6f0f \\(\\mathop{\\cup}\\limits_{i=1}^{n}B_i = S\\)</li> <li>\u4e0d\u91cd \\(B_iB_j = \\varnothing, i \\ne j\\)</li> </ol> <p>\u8bbe \\(B_1,B_2,\\dots,B_n\\) \u4e3a \\(S\\) \u7684\u4e00\u4e2a\u5212\u5206\u4e14 \\(P(B_i) &gt; 0, i = 1,2,\\dots,n\\) ,\u5219\u6709\u5168\u6982\u7387\u516c\u5f0f\uff1a</p> \\[P(A)=\\sum\\limits_{j=1}^nP(B_j) \\cdot P(A|B_j)\\] <p>\u5bf9 \\(P(A) &gt; 0\\) \u6709 Bayes \u516c\u5f0f \uff1a</p> \\[P(B_i|A) = \\frac{P(B_i)P(A|B_i)}{\\sum\\limits_{j=1}^{n}P(B_j)P(A|B_j)}\\] <p>\u6b64\u65f6\uff0c\u79f0 \\(P(B_i)\\) \u4e3a\u5148\u9a8c\u6982\u7387\uff0c\\(P(B_i|A)\\) \u79f0\u4e3a\u540e\u9a8c\u6982\u7387\u3002</p> Question <p>\u6839\u636e\u4ee5\u5f80\u7684\u4e34\u5e8a\u8bb0\u5f55\uff0c\u67d0\u79cd\u8bca\u65ad\u764c\u75c7\u7684\u8bd5\u9a8c\u5177\u67095%\u7684\u5047\u9633\u6027\u53ca5%\u7684\u5047\u9634\u6027\uff1a\u5373\u8bbeA={\u8bd5\u9a8c\u53cd\u5e94\u662f\u9633\u6027}\uff0cC={\u88ab\u8bca\u65ad\u60a3\u6709\u764c\u75c7}\u5219\u6709\uff1a\\(P(A |C) = 5%, P(A | C ) = 5 %\\) .\u5df2\u77e5\u67d0\u4e00\u7fa4\u4f53\\(P(C)=0.005\\)\uff0c\u95ee\u8fd9\u79cd\u65b9\u6cd5\u80fd\u5426\u7528\u4e8e\u666e\u67e5\uff1f</p> Answer <p> </p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_15","title":"\u72ec\u7acb\u6027","text":"<p>\u8bbe A,B \u4e3a\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6\uff0c\u82e5\u6709 \\(P(AB)=P(A) \\times P(B)\\)\uff0c\u5219 A,B \u76f8\u4e92\u72ec\u7acb(independent)</p> \\[\\mathop{\\Leftrightarrow}\\limits^{P(A) &gt; 0} P(B|A) = P(B)\\] \\[\\mathop{\\Leftrightarrow}\\limits^{P(\\overline{A}) &gt; 0} P(B|\\overline{A}) = P(B)\\] <p>\u76f4\u89c2\u542b\u4e49\uff1aA\u53d1\u751f\u4e0e\u5426\u90fd\u4e0d\u4f1a\u6539\u53d8B\u53d1\u751f\u7684\u6982\u7387</p> <p>\u5f53\u51fa\u73b0\u4e24\u4e2a\u4ee5\u4e0a\u7684\u968f\u673a\u4e8b\u4ef6\u65f6\uff0c\u5982\u4e09\u4e2a\u968f\u673a\u4e8b\u4ef6 A,B,C \u5f53\uff1a</p> \\[P(AB)=P(A)*P(B),P(AC)=P(A)*P(C),P(BC)=P(B)*P(C)\\] <p>\u90fd\u6210\u7acb\uff0c\u5219\u79f0\u4e8b\u4ef6 A,B,C \u4e24\u4e24\u72ec\u7acb\uff1b</p> <p>\u5982\u679c\u540c\u65f6\u8fd8\u6ee1\u8db3\uff1a\\(P(ABC)=P(A)P(B)P(C)\\) \u5219\u79f0\u4e8b\u4ef6 A,B,C\u76f8\u4e92\u72ec\u7acb\u3002</p> <ul> <li>\u6ce8\u610f: \\(\\text{\u76f8\u4e92\u72ec\u7acb} \\rightarrow \\text{\u4e24\u4e24\u72ec\u7acb}\\) ,\u4f46\u662f, \\(\\text{\u4e24\u4e24\u72ec\u7acb} \\nrightarrow \\text{\u76f8\u4e92\u72ec\u7acb}\\)</li> </ul> <p>\u66f4\u666e\u904d\u7684\uff1a</p> <p>\u5b9a\u4e49 \\(\\{A_i\\}\\) \u76f8\u4e92\u72ec\u7acb \u5f53\u4e14\u4ec5\u5f53</p> \\[\\forall i_j, P(\\prod\\limits_{j=1}^k A_{i_j}) = \\prod\\limits_{j=1}^k P(A_{i_j}),2 \\le k \\le n\\] <p>\u72ec\u7acb\u8bd5\u9a8c\uff1a\u6307\u4efb\u4e00\u6b21\u5b50\u8bd5\u9a8c\u51fa\u73b0\u7684\u7ed3\u679c\u90fd\u4e0d\u5f71\u54cd\u5176\u4ed6\u5404\u5b50\u8bd5\u9a8c\u51fa\u73b0\u7684\u7ed3\u679c\uff1b\u4f8b\u5982\u89c2\u5bdf\u5341\u671f\u5f69\u7968\u7684\u5f00\u5956\u7ed3\u679c\uff0c\u662f\u72ec\u7acb\u8bd5\u9a8c\u3002</p> <p>\u91cd\u590d\u8bd5\u9a8c\uff1a\u5982\u679c\u5404\u5b50\u8bd5\u9a8c\u662f\u5728\u76f8\u540c\u6761\u4ef6\u4e0b\u8fdb\u884c\u7684\u3002</p> Question <p>\u4e00\u888b\u4e2d\u6709\u7f16\u53f7\u4e3a1,2,3,4\u51714\u4e2a\u7403\uff0c\u91c7\u7528\u6709\u653e\u56de\u62bd\u6837\uff0c\u6bcf\u6b21\u53d6\u4e00\u7403\uff0c\u5171\u53d62\u6b21\uff0c\u8bb0\u5f55\u53f7\u7801\u4e4b\u548c\uff0c\u8fd9\u6837\u72ec\u7acb\u91cd\u590d\u8fdb\u884c\u8bd5\u9a8c\uff0c\u6c42\u201c\u548c\u7b49\u4e8e3\u201d\u51fa\u73b0\u5728\u201c\u548c\u7b49\u4e8e5\u201d\u4e4b\u524d\u7684\u6982\u7387\u3002</p> Answer <p> </p> Question <p>\u8bbe\u67d0\u5730\u6bcf\u5929\u53d1\u751f\u96fe\u973e\u7684\u6982\u7387\u4e3a0.2.\u5728\u96fe\u973e\u5929\u6c14,\u8be5\u5730\u5404\u5c45\u6c11\u72ec\u7acb\u5730\u4ee5\u6982\u73870.2\u6234\u53e3\u7f69\uff0c\u5728\u6ca1\u6709\u96fe\u973e\u7684\u65f6\u5019\u5404\u5c45\u6c11\u72ec\u7acb\u5730\u4ee5\u6982\u73870.01\u6234\u53e3\u7f69.\u67d0\u5929 <p>(1)\u5728\u8be5\u5730\u4efb\u9009\u4e00\u5c45\u6c11,\u6c42\u4ed6\u6234\u53e3\u7f69\u7684\u6982\u7387\uff1b</p> <p>(2)\u82e5\u9009n\u4eba,\u6c42\u4ed6\u4eec\u90fd\u6234\u53e3\u7f69\u7684\u6982\u7387\uff1b</p> <p>(3)\u82e5\u9009n\u4eba\u53d1\u73b0\u4ed6\u4eec\u90fd\u6234\u53e3\u7f69,\u6c42\u8fd9\u4e00\u5929\u53d1\u751f\u96fe\u973e\u7684\u6982\u7387.(\u8fd9\u91ccn\u4e3a\u6b63\u6574\u6570.)</p> Answer <p> </p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter1/#_16","title":"\u7403\u76d2\u95ee\u9898\u6574\u7406","text":"<p>\u4ee5\u4e0b\u95ee\u9898\u7684\u524d\u63d0\u4e3a \\(n\\ge m\\)</p> <ol> <li> <p>\\(n\\) \u4e2a\u76f8\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u76f8\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u4e0d\u4e3a\u7a7a\u3002\u4e5f\u5373\u5c06 \\(n\\) \u5206\u89e3\u4e3a \\(m\\) \u4e2a\u6570\u7684\u548c\u7684\u4e0d\u540c\u6570\u76ee\u3002</p> </li> <li> <p>\\(n\\) \u4e2a\u76f8\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u76f8\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u53ef\u4ee5\u4e3a\u7a7a\u3002\u4e5f\u5373\u5c06 \\(n\\) \u5206\u89e3\u4e3a \\(m,m-1,\\dots,1\\) \u4e2a\u6570\u7684\u548c\u6240\u6709\u79cd\u6570\u4e4b\u548c\u3002</p> </li> <li> <p>\\(n\\) \u4e2a\u76f8\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u4e0d\u4e3a\u7a7a\u3002\u4e5f\u5373 \\(C_{n-1}^{m-1}\\) \u3002</p> <ul> <li>\u9694\u677f\u6cd5\uff0c\u4e5f\u5373 \\(n-1\\) \u4e2a\u7a7a\u653e\u5165 \\(m-1\\) \u4e2a\u9694\u677f\u3002</li> </ul> </li> <li> <p>\\(n\\) \u4e2a\u76f8\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u53ef\u4ee5\u4e3a\u7a7a\u3002\u4e5f\u5373 \\(C_{m+n-1}^{m-1}\\) \u3002</p> <ul> <li>\u4e5f\u662f\u9694\u677f\u6cd5\uff0c\u4f46\u9700\u8981\u7a0d\u5fae\u53d8\u5f62\u3002\u95ee\u9898\u7b49\u4ef7\u4e8e \\(n+m\\) \u4e2a\u76f8\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u4e0d\u4e3a\u7a7a\u3002</li> </ul> </li> </ol> <p>$$ n_1 + n_2 + \\dots + n_m = n$$</p> <p>$$ n_1 , n_2 , \\dots, n_m \\ge 0$$</p> <p>$$ (n_1+1)+(n_2+1)+\\dots+(n_m+1)=m+n$$</p> <p>\u6b64\u65f6\u6bcf\u4e00\u9879 \\((n_1+1),(n_2+1),\\dots,(n_m+1) \\ge 1\\) \uff0c\u5373\u53ef\u4ee5\u4f7f\u7528\u9694\u677f\u6cd5\u3002(\u8fd9\u79cd\u5206\u6790\u65b9\u6cd5\u8fd8\u662f\u6bd4\u8f83\u5b9e\u7528\u7684\uff0c\u5efa\u8bae\u638c\u63e1)</p> <ol> <li> <p>\\(n\\) \u4e2a\u4e0d\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u76f8\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u4e0d\u4e3a\u7a7a\u3002</p> <ol> <li> <p>\u5148\u5217\u51fa\u5206\u6210\u4e0d\u540c\u5806\u7684\u60c5\u51b5\u3002\u4e5f\u5373\u5c06 \\(n\\) \u5206\u89e3\u4e3a \\(m\\) \u4e2a\u6570\u7684\u5206\u7c7b\u60c5\u51b5\u3002\u6b64\u65f6\u518d\u7528\u7ec4\u5408\u6570\u8ba1\u7b97\u3002\u6ce8\u610f\uff0c\u6709\u51e0\u7ec4\u5747\u5206\u5c31\u9700\u8981\u5404\u9664\u4ee5\u51e0\u7684\u9636\u4e58\u3002\u4f8b\u59828\u4e2a\u7403\u653e\u8fdb3\u4e2a\u76d2\u5b50\u65f6\u4e00\u79cd\u60c5\u51b5\u4e3a \\(1-1-6\\) , \u6b64\u65f6\u7684\u60c5\u51b5\u6570\u76ee\u4e3a \\(\\frac{C_8^1 \\cdot C_7^1 \\cdot C_6^6}{A_2^2}\\) \u3002</p> </li> <li> <p>\u8fd9\u662f\u5178\u578b\u7684\u7b2c\u4e8c\u7c7b\u65af\u7279\u7075\u6570\uff0c\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u3002</p> <p>\u8bbe \\(f[n][m]\\) \u4e3a\u6807\u51c6\u7b54\u6848\u3002</p> <p>\\(f[n][m] =f[n-1][m-1] + m \\times f[n-1][m]\\) </p> <p>\u4e5f\u5c31\u662f\u8003\u8651\u7b2c \\(n\\) \u4e2a\u6570\uff0c\u7b2c \\(n\\) \u4e2a\u6570\u5355\u72ec\u5360\u636e\u4e00\u4e2a\u76d2\u5b50\u6216\u7b2c \\(n\\) \u4e2a\u6570\u548c\u4e4b\u524d\u7684\u6570\u5171\u5360\u4e00\u4e2a\u76d2\u5b50\u3002</p> </li> </ol> </li> <li> <p>\\(n\\) \u4e2a\u4e0d\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u76f8\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u53ef\u4ee5\u4e3a\u7a7a\u3002</p> <ol> <li> <p>\u5148\u5217\u51fa\u5206\u6210\u4e0d\u540c\u5806\u7684\u60c5\u51b5\u3002\u4e5f\u5373\u5c06 \\(n\\) \u5206\u89e3\u4e3a \\(m,m-1,\\dots,1\\) \u4e2a\u6570\u7684\u548c\u6240\u6709\u79cd\u6570\u4e4b\u548c\u3002\u6b64\u65f6\u540c\u6837\u9700\u8981\u6ce8\u610f\u6709\u51e0\u7ec4\u5747\u5206\u5c31\u9700\u8981\u5404\u9664\u4ee5\u51e0\u7684\u9636\u4e58\u3002</p> </li> <li> <p>\u540c\u6837\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u3002</p> <p>\u8bbe \\(g[n][m]\\) \u4e3a\u6807\u51c6\u7b54\u6848\u3002</p> <p>\\(g[n][m] = \\sum\\limits_{i=0}^m g[n][i]\\)</p> <p>\u4e5f\u5373\u8003\u8651\u4f7f\u7528\u4e86\u591a\u5c11\u4e2a\u76d2\u5b50\u3002</p> </li> </ol> </li> <li> <p>\\(n\\) \u4e2a\u4e0d\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u4e0d\u4e3a\u7a7a\u3002\u4e5f\u5373 \\(n\\) \u4e2a\u4e0d\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u76f8\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5 \\(\\times m!\\) \u3002</p> </li> <li> <p>\\(n\\) \u4e2a\u4e0d\u540c\u7684\u7403\u653e\u5165 \\(m\\) \u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\uff0c\u4e14\u76d2\u5b50\u53ef\u4ee5\u4e3a\u7a7a\u3002\u4e5f\u5373 \\(m^n\\) \u3002</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/","title":"Chapter 2 \u968f\u673a\u53d8\u91cf\u53ca\u5176\u5206\u5e03","text":"<p> \u7ea6 1449 \u4e2a\u5b57  5 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f</p> <p>\u5b9a\u4e49\uff1a\u8bbe\u968f\u673a\u8bd5\u9a8c\u7684\u6837\u672c\u7a7a\u95f4\u4e3a\\(S = \\{e\\}\\)\uff0c\u82e5 \\(X=X(e)\\) \u4e3a\u5b9a\u4e49\u5728\u6837\u672c\u7a7a\u95f4\\(S\\)\u4e0a\u7684\u5b9e\u503c\u5355\u503c\u51fd\u6570\uff0c\u5219\u79f0 \\(X=X(e)\\) \u4e3a\u968f\u673a\u53d8\u91cf\u3002</p> <ul> <li>\u5e38\u7528\u5927\u5199\u5b57\u6bcd X,Y,Z \u6765\u8868\u793a\u968f\u673a\u53d8\u91cf</li> <li>\u7528\u5c0f\u5199\u5b57\u6bcd x,y,z \u8868\u793a\u5176\u53d6\u503c\u3002</li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_1","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf","text":"<p>\u5b9a\u4e49\uff1a\u53d6\u503c\u81f3\u591a\u53ef\u6570\u7684\u968f\u673a\u53d8\u91cf</p> <p>\u82e5\u5176\u53ef\u80fd\u53d6\u503c\u4e3a \\(\\{x_i\\}\\)\uff0c\u5219\u79f0 \\(P\\{X=x_k\\}=p_k\\) , $k=1,2,\\dots $ \u4e3a\\(X\\) \u7684\u6982\u7387\u5206\u5e03\u5f8b(probability mass function)\uff0c\u4e5f\u53ef\u4ee5\u7528\u5217\u8868\u7684\u65b9\u5f0f\u8868\u8fbe\u3002</p> <p>\u56e0\u4e3a\u6837\u672c\u7a7a\u95f4 \\(S=\\{X=x_1,X=x_2,\\dots,X=x_n \\dots \\}\\)\u4e2d\u5404\u6837\u672c\u70b9\u4e24\u4e24\u4e0d\u76f8\u5bb9\uff0c\u6240\u4ee5\uff1a</p> \\[1 = P(S) = \\sum\\limits_{i=1}^{+\\infty}P(X = x_i) = \\sum\\limits_{i=1}^{+\\infty}p_i\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#0-1","title":"0-1\u5206\u5e03/\u4e24\u70b9\u5206\u5e03","text":"<p>\u5982\u679c\u968f\u673a\u53d8\u91cf X \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a\uff1a</p> X 0 1 P p 1-p <p>\u5219\u79f0 X \u4e3a\u670d\u4ece\u53c2\u6570\u4e3a p \u7684 0\u22121\u5206\u5e03\uff0c\u4e5f\u79f0\u4e3a\u4e24\u70b9\u5206\u5e03\uff0c\u5e76\u8bb0\u4e3a \\(X \\sim B(1,p)\\) \u6216\u8005 \\(X \\sim 0\u22121(p)\\)</p> <p>\u5b83\u7684\u5206\u5e03\u5f8b\u8fd8\u53ef\u4ee5\u5199\u4e3a</p> \\[P(X = k) = p^k(1-p)^{1-k},k = 0,1\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_2","title":"\u4e8c\u9879\u5206\u5e03","text":"<p>\u5b9a\u4e49Bernoulli\u8bd5\u9a8c\uff1a\u5728 \\(n\\) \u6b21\u72ec\u7acb\u91cd\u590d\u8bd5\u9a8c\u4e2d\uff0c\u6bcf\u6b21\u53ea\u6709 \\(A\\)  \u548c \\(\\overline{A}\\) \u4e24\u79cd\u7ed3\u679c\uff0c\u4e14\u6982\u7387\u4e0d\u53d8\uff0c\u5219\u8fd9\u4e00\u7cfb\u5217\u8bd5\u9a8c\u4e3a\u4f2f\u52aa\u5229\u8bd5\u9a8c\u3002</p> <p>\u82e5\u968f\u673a\u53d8\u91cf \\(X\\) \u8868\u793a \\(n\\) \u91cd\u8d1d\u52aa\u529b\u5b9e\u9a8c\u4e2d\u4e8b\u4ef6A\u53d1\u751f\u7684\u6b21\u6570\uff0c\u5176\u6982\u7387\u5206\u5e03\u5f8b\u4e3a\uff1a</p> \\[P(X = k) = C_n^k p^k(1-p)^{n-k},k = 0,1,\\dots,n\\] <p>\u5219\u79f0 X \u4e3a\u670d\u4ece\u53c2\u6570\u4e3a \\((n,p)\\) \u7684\u4e8c\u9879\u5206\u5e03(binomial distribution)\uff0c\u5e76\u8bb0\u4e3a \\(X \\sim B(n,p)\\)</p> <p>\u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u4e8c\u9879\u5206\u5e03\u6709\u5982\u4e0b\u6027\u8d28\uff1a</p> \\[\\sum\\limits_{k=0}^n C_n^kp^k(1-p)^{n-k} = 1\\] Question <p>\u7532\u548c\u4e59\u6bd4\u8d5b,\u7532\u7684\u5b9e\u529b\u66f4\u5f3a\u4e00\u70b9\u3002\u6bcf\u4e00\u5c40\u7532\u8d62\u7684\u6982\u7387\u4e3ap,\u8fd9\u91cc\\(0.5\\le p \\le1\\)\u3002\u8bbe\u5404\u5c40\u80dc\u8d1f\u76f8\u4e92\u72ec\u7acb\u3002\u8bbek\u662f\u4e00\u6b63\u6574\u6570.\u95ee\uff1a\u5bf9\u7532\u800c\u8a00\uff0c\\(2k-1\\)\u5c40\\(k\\)\u80dc\u5236\u6709\u5229\u8fd8\u662f\\(2k+1\\)\u5c40\\(k+1\\)\u80dc\u5236\u6709\u5229\uff1f</p> Answer <p> </p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_3","title":"\u6cca\u677e\u5206\u5e03","text":"<p>\u82e5\u968f\u673a\u53d8\u91cfX\u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a</p> \\[P(X=k) = \\frac{\\lambda^k e^{-\\lambda}}{k!},k = 0,1,\\dots,\\lambda &gt; 0\\] <p>\u79f0X\u670d\u4ece\u53c2\u6570\u4e3a\u03bb\u7684\u6cca\u677e\u5206\u5e03\uff0c\u8bb0</p> \\[X \\sim P(\\lambda) \\text{\u6216} X \\sim \\pi(\\lambda)\\] <p>\u4e8c\u9879\u5206\u5e03\u4e0e\u6cca\u677e\u5206\u5e03\u6709\u4ee5\u4e0b\u8fd1\u4f3c\u516c\u5f0f\uff1a\u5f53\\(n &gt;10,p &lt;0.1\\)\u65f6\uff0c\u5176\u4e2d\uff0c\\(\\lambda = np\\)</p> \\[C_n^k p^k(1-p)^{n-k} \\approx \\frac{\\lambda^k e^{-\\lambda}}{k!}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_4","title":"\u8d85\u51e0\u4f55\u5206\u5e03","text":"<p>\u82e5\u968f\u673a\u53d8\u91cfX\u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a</p> \\[P(X = k) = \\frac{C_a^{k}C_b^{n-k}}{C_N^n},k = l_1,l_1+1,\\dots,l_2\\] <p>\u5176\u4e2d\uff0c \\(l_1 = max(0,n-b),l_2 = max(a,n)\\) \u5219\u79f0 \\(X\\) \u670d\u4ece\u8d85\u51e0\u4f55\u5206\u5e03\uff0c\u5e76\u8bb0\u4e3a \\(X \\sim H(n,a,p)\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_5","title":"\u51e0\u4f55\u5206\u5e03","text":"<p>\u82e5\u968f\u673a\u53d8\u91cfX\u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a</p> \\[P(X=k) = p(1-p)^{k-1},k = 1,2,\\dots,0&lt;p&lt;1\\] <p>\u5219\u79f0 \\(X\\) \u670d\u4ece\u53c2\u6570\u4e3a \\(p\\) \u7684\u51e0\u4f55\u5206\u5e03</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_6","title":"\u5df4\u65af\u5361\u5206\u5e03","text":"<p>\u82e5\u968f\u673a\u53d8\u91cfX\u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a</p> \\[P(X=k)=C_{k-1}^{r-1}p^r(1-p)^{k-r},k=r,r+1,\\dots,0&lt;p&lt;1\\] <p>\u5219\u79f0\\(X\\)\u670d\u4ece\u53c2\u6570\u4e3a\\((r,p)\\)\u7684\u5df4\u65af\u5361\u5206\u5e03</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_7","title":"\u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03\u51fd\u6570","text":"<p>\u5b9a\u4e49\uff1a\u968f\u673a\u53d8\u91cfX\uff0c\u82e5\u5bf9\u4efb\u610f\u5b9e\u6570x\uff0c\u51fd\u6570\\(F(x) = P(X \\le x)\\)\u79f0\u4e3aX \u7684\u5206\u5e03\u51fd\u6570\u3002</p> <p>\u5f53 \\(X\\) \u4e3a\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u65f6\uff0c\u8bbe \\(X\\) \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a \\(P\\{X=x_i\\}=p_i,i=1,2,\\dots\\) \u5219 \\(X\\)\u7684\u5206\u5e03\u51fd\u6570\u4e3a\uff1a</p> \\[F(x)=P\\{X\\le x\\}=\\sum\\limits_{x_i \\le x}P\\{X=x_i\\}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#fx","title":"\\(F(x)\\)\u7684\u6027\u8d28","text":"<ol> <li>\\(F(x)\\) \u5355\u8c03\u4e0d\u51cf\uff1b</li> <li>\\(0 \\le F(x) \\le 1\\) \u4e14 \\(F(\u2212\\infty)=0\\)\uff0c\\(F(+\\infty)=1;\\)</li> <li>\\(F(x)\\) \u53f3\u8fde\u7eed\uff0c\u5373 \\(F(x+0)=F(x)\\) , \\(F(x) - F(x-0)=P(X = x)\\) ;</li> <li>\\(P(a&lt; X \\le b)=F(b)\u2212F(a);\\)</li> <li>\u5206\u5e03\u51fd\u6570 \\(F(x)\\) \u5728 \\(x = x_k\\) \u5904\u6709\u8df3\u8dc3\uff0c\u5176\u8df3\u8dc3\u503c\u4e3a \\(p_k = P(X=x_k)\\) ;</li> <li>\u4e00\u822c\u5730\uff0c\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03\u51fd\u6570\u4e3a\u9636\u68af\u51fd\u6570\u3002</li> <li>\u8981\u6ce8\u610f\u662f\u5426\u53d6\u7b49\u7684\u5f71\u54cd \\(F(X \\le x_1) = P(X = x_1)\\) \u800c \\(F(X &lt; x_1) = 0\\) ;</li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_8","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u53ca\u5176\u5bc6\u5ea6\u51fd\u6570","text":"<p>\u5982\u679c\u5bf9\u4e8e\u968f\u673a\u53d8\u91cf \\(X\\) \uff0c\u5176\u5206\u5e03\u51fd\u6570\u4e3a \\(F(x)\\)\uff0c\u82e5\u5b58\u5728\u4e00\u4e2a\u975e\u8d1f\u7684\u5b9e\u51fd\u6570 \\(f(x)\\)\uff0c\u4f7f\u5bf9\u4e8e\u4efb\u610f\u5b9e\u6570 \\(x\\)\uff0c\u6709\uff1a</p> \\[F(x) = \\int_{-\\infty}^{+\\infty}f(x)dx = 1\\] <p>\u5219\u79f0 \\(X\\) \u4e3a\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\uff0c\u5e76\u4e14\u79f0 \\(f(x)\\) \u4e3a \\(X\\) \u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u7b80\u79f0\u4e3a\u5bc6\u5ea6\u51fd\u6570\u3002</p> <p>\u5173\u4e8e f(x) \u6709\u4ee5\u4e0b\u7ed3\u8bba\uff1a</p> <ol> <li>\\(f(x)\\ge 0\\)\uff1b</li> <li>\\(\\int_{\\infty}^{+\\infty}f(x)dx = 1\\)\uff1b</li> <li>\\(\\forall x_1,x_2 \\in R (x_1 &lt; x_2),P\\{x_1 &lt; X \\le x_2 \\} = F(x_2) - F(x_1) = \\int_{x_1}^{x_2}f(t)dt\\) ;</li> <li>\u5728 \\(f(x)\\) \u7684\u8fde\u7eed\u70b9 \\(x\\) \u5904\uff0c \\(F\u2032(x)=f(x)\\)</li> <li>\\(P\\{X=a\\}=0\\) \uff0c\u5373\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u4efb\u53d6\u4e00\u4e2a\u5b9a\u503c\u7684\u6982\u7387\u4e3a\u96f6\uff0c\u56e0\u6b64\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u843d\u5728\u5f00\u533a\u95f4\u4e0e\u76f8\u5e94\u95ed\u533a\u95f4\u4e0a\u7684\u6982\u7387\u76f8\u7b49\uff1b</li> <li>\u4e0e\u7269\u7406\u5b66\u4e2d\u7684\u8d28\u91cf\u7ebf\u5bc6\u5ea6\u7684\u5b9a\u4e49\u76f8\u7c7b\u4f3c \\(P( x &lt; X \\le x+ \\Delta x) \\approx  f( x) \\cdot x\\)</li> </ol> Question <p>\u8bbe \\(A,B\\) \u4e3a\u968f\u673a\u4e8b\u4ef6\uff0c\u82e5 \\(P(A)=1\\)\uff0c\u5219 \\(A\\)\u4e3a\u5fc5\u7136\u4e8b\u4ef6\u5417\uff1f\u82e5 \\(P(B)=0\\)\uff0c\u5219 \\(B\\) \u4e3a\u4e0d\u53ef\u80fd\u4e8b\u4ef6\u5417\uff1f\u82e5\\(P(AB) = 0\\) \uff0c\u5219 \\(A\\) \u4e0e \\(B\\) \u4e0d\u76f8\u5bb9\u5417\uff1f</p> Answer <p></p> <p><p>1. \u7a7a\u96c6\u53d1\u751f\u7684\u6982\u7387\u4e3a0\uff0c\u4f460\u6982\u7387\u4e8b\u4ef6\u4e0d\u4e00\u5b9a\u662f\u7a7a\u96c6\u3002\u4f8b\u5982\u5728(0,1)\u4e0a\u53d60.5</p> <p>2. \u4e00\u4e2a\u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387\u4e3a1\uff0c\u4f46\u4e0d\u662f\u6574\u4e2a\u6837\u672c\u7a7a\u95f4\uff08\u53bb\u63890\u6982\u7387\u90a3\u4e2a\u70b9\u5373\u53ef\uff09</p> <p>3. AB\u4e92\u65a5\u5219P(AB)= 0\uff0c\u4f46\u53cd\u4e4b\u4e0d\u6210\u7acb\u3002\u4f8b\u5982A\u4e3a\u5728(0,1)\u4e0a\u53bb\u63890.4\uff0cB\u4e3a\u5728(0,1)\u4e0a\u53d6\u51fa0.5</p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_9","title":"\u5747\u5300\u5206\u5e03","text":"<p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X\\)\u5c31\u6709\u5bc6\u5ea6\u51fd\u6570\uff1a</p> <p>\\(f(x)=\\begin{cases}\\frac{1}{b\u2212a},&amp;x\\in (a,b)\\\\0,&amp;else\\end{cases}\\)</p> <p>\u5219\u79f0 \\(X\\) \u670d\u4ece\u533a\u95f4 \\((a,b)\\)\u4e0a\u7684\u5747\u5300\u5206\u5e03\uff0c\u5e76\u8bb0\u4e3a \\(X \\sim U(a,b)\\)</p> <p>\u800c\u5f97\u5230\u5bf9\u5e94\u7684\u5206\u5e03\u51fd\u6570\u4e3a\uff1a</p> \\[F(x)=\\begin{cases}0,&amp;x&lt;a \\\\ \\frac{x\u2212a}{b\u2212a},&amp;a\\le x\\le b\\\\1,&amp;x\\ge b\\end{cases}\\] <p>\u6027\u8d28 \u5bf9\u4efb\u4f55\u533a\u95f4 \\([a,b]\\) \u7684\u5b50\u533a\u95f4 \\([c,d]\\) , \\(P(X \\in [c,d])=\\frac{d\u2212c}{b\u2212a}\\)</p> Question <p>\u676d\u5dde\u67d0\u957f\u9014\u6c7d\u8f66\u7ad9\u6bcf\u5929\u4ece\u65e9\u4e0a6\u70b9\uff08\u7b2c\u4e00\u73ed\u8f66\uff09\u5f00\u59cb\uff0c\u6bcf\u969430\u5206\u949f\u6709\u4e00\u73ed\u8f66\u5f00\u5f80\u4e0a\u6d77\u3002\u738b\u5148\u751f\u5728\u65e9\u4e0a6:20\u8fc7X\u5206\u949f\u5230\u8fbe\u8f66\u7ad9\uff0c\u8bbeX\u670d\u4ece\uff080\uff0c50\uff09\u4e0a\u7684\u5747\u5300\u5206\u5e03\uff0c</p> <p>\uff081\uff09\u6c42\u738b\u5148\u751f\u5019\u8f66\u65f6\u95f4\u4e0d\u8d85\u8fc715\u5206\u949f\u7684\u6982\u7387\uff1b</p> <p>\uff082\uff09\u5982\u679c\u738b\u5148\u751f\u4e00\u6708\u4e2d\u6709\u4e24\u6b21\u6309\u6b64\u65b9\u5f0f\u72ec\u7acb\u5730\u53bb\u5019\u8f66\uff0c\u6c42\u4ed6\u4e00\u6b21\u5019\u8f66\u4e0d\u8d85\u8fc715\u5206\u949f\uff0c\u53e6\u4e00\u6b21\u5019\u8f66\u5927\u4e8e10\u5206\u949f\u7684\u6982\u7387\u3002</p> \u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u76f8\u52a0\uff1f <p>\u4e92\u65a5\u65f6\u624d\u80fd\u76f8\u52a0\uff0c\u5f53\u8fd9\u4e24\u4e2a\u4e8b\u4ef6\u53ef\u4ee5\u540c\u65f6\u53d1\u751f\u65f6\u5c31\u8981\u6ce8\u610f\u3002</p> Answer <p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_10","title":"\u6307\u6570\u5206\u5e03","text":"<p>\u82e5\u968f\u673a\u53d8\u91cf \\(X\\) \u5177\u6709\u5bc6\u5ea6\u51fd\u6570\uff1a</p> \\[f(x) = \\begin{cases}\\lambda e^{-\\lambda x},&amp;x &gt; 0\\\\0,&amp;x \\le 0\\end{cases}\\] <p>\u5176\u4e2d \\(\\lambda &gt; 0\\)\uff0c\u5219\u79f0 \\(X\\) \u670d\u4ece\u53c2\u6570\u4e3a \\(\\lambda\\)\u7684\u6307\u6570\u5206\u5e03(exponential distribution)\uff0c\u8bb0\u4e3a \\(X \\sim E(\\lambda)\\) \u6216 \\(X \\sim Exp(\\lambda)\\)</p> <p>\u6307\u6570\u5206\u5e03\u5bf9\u5e94\u7684\u5206\u5e03\u51fd\u6570\u4e3a\uff1a</p> \\[F(x)=\\int_{-\\infty}^{x}f(t)dt=\\begin{cases}1-e^{-\\lambda x}, &amp;x&gt;0\\\\0,&amp;x \\le 0\\end{cases}\\] <p>\u6307\u6570\u5206\u5e03\u5177\u6709\u65e0\u8bb0\u5fc6\u6027\uff0c\u5373 \\(P(X&gt;s\u2223X&gt;t_0)=P(X&gt;s\u2212t_0)\\) \u3002</p> Question <p>\u67d0\u5927\u578b\u8bbe\u5907\u5728\u4efb\u4f55\u957f\u5ea6\u4e3a\\(t\\)\u7684\u533a\u95f4\u5185\u53d1\u751f\u6545\u969c\u7684\u6b21\u6570\\(N(t)\\)\u670d\u4ece\u53c2\u6570\u4e3a\\(\\lambda t\\)\u7684Poisson\u5206\u5e03\uff0c\u8bb0\u8bbe\u5907\u65e0\u6545\u969c\u8fd0\u884c\u7684\u65f6\u95f4\u4e3a \\(T\\) .</p> <p>(1)\u6c42\\(T\\) \u7684\u6982\u7387\u5206\u5e03\u51fd\u6570\uff1b</p> <p>(2)\u5df2\u77e5\u8bbe\u5907\u65e0\u6545\u969c\u8fd0\u884c10\u4e2a\u5c0f\u65f6\uff0c\u6c42\u518d\u65e0\u6545\u969c\u8fd0\u884c8\u4e2a\u5c0f\u65f6\u7684\u6982\u7387\u3002</p> Answer <p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_11","title":"\u6b63\u6001\u5206\u5e03","text":"<p>\u5982\u679c\u968f\u673a\u53d8\u91cf \\(X\\) \u5177\u6709\u5bc6\u5ea6\u51fd\u6570\uff1a</p> \\[f(x)=\\frac{1}{\\sqrt{2\\pi}\\sigma} e^{\u2212\\frac{(x\u2212\\mu)^2}{2\\sigma^2}},\u2223x\u2223&lt; +\\infty\\] <p>\u5176\u4e2d \\(\\sigma &gt; 0 ,\u2223\\mu\u2223&lt;+\\infty\\)\u4e3a\u5e38\u6570\uff0c\u5219\u79f0 \\(X\\) \u670d\u4ece\u53c2\u6570\u4e3a \\((\\mu ,\\sigma )\\) \u7684\u6b63\u6001\u5206\u5e03(normal distribution / Gauss distribution)\uff0c\u6216\u8005\u79f0 \\(X\\) \u4e3a\u6b63\u6001\u53d8\u91cf\uff0c\u8bb0\u4e3a \\(X \\sim N(\\mu ,\\sigma^2)\\)\u3002</p> <p>\u5176\u5bf9\u5e94\u7684\u5206\u5e03\u51fd\u6570\u4e3a\uff1a</p> \\[F(x) = \\int_{\u2212\\infty}^{x}\\frac{1}{\\sqrt{2\\pi}\\sigma} e^{\u2212\\frac{(t\u2212\\mu)^2}{2\\sigma^2}}dt\\] <p>\u5728\u4e0a\u9762\u51fa\u73b0\u7684\u5f0f\u5b50\u4e2d\uff0c\\(\\mu\\) \u4e3a\u4f4d\u7f6e\u53c2\u6570\uff0c\u51b3\u5b9a\u4e86\u5206\u5e03\u56fe\u50cf\u7684\u5bf9\u79f0\u8f74\u4f4d\u7f6e\uff1b\\(\\sigma\\) \u4e3a\u5c3a\u5ea6\u53c2\u6570\uff0c\u51b3\u5b9a\u4e86\u5f62\u72b6\uff0c\\(\\sigma\\)  \u8d8a\u5c0f\uff0c\u56fe\u50cf\u8d8a\u96c6\u4e2d\u3002</p> <p>\u7279\u522b\u7684\uff0c\u5f53 \\(\\mu = 0, \\sigma = 1\\)\u65f6\uff0c\u5982\u679c\u8bb0\u8fd9\u65f6\u7684\u6b63\u6001\u53d8\u91cf\u4e3a \\(Z\\)\uff0c\u5373 \\(Z\u223cN(0,1)\\) \u5219\u5b83\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03(standard normal distribution)\u3002\u5219\u5176\u5bc6\u5ea6\u51fd\u6570\u4e3a\uff1a</p> \\[\\varphi(x)=\\frac{1}{\\sqrt{2\\pi}} e^{\u2212\\frac{x^2}{2}},\u2223x\u2223&lt; +\\infty\\] <p>\u5219\u5bf9\u5e94\u7684\u5206\u5e03\u51fd\u6570\u4e3a\uff1a</p> \\[\\Phi(x) = \\int_{\u2212\\infty}^{x}\\frac{1}{\\sqrt{2\\pi}} e^{\u2212\\frac{t^2}{2}}dt\\] <ul> <li>\u5219\u663e\u7136\u6709\\(\\Phi(x) + \\Phi(-x) = 1\\)</li> </ul> <p>\u800c\u5bf9\u4e8e\u4e0d\u662f\u6807\u51c6\u6b63\u6001\u5206\u5e03\u7684\u6b63\u6001\u5206\u5e03\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6027\u53d8\u6362\uff08\u6807\u51c6\u5316\uff09\u6765\u8f6c\u6362\u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff1a</p> <ul> <li>\u82e5 \\(X\u223cN(\\mu ,\\sigma^2)\\)\uff0c\u5219 \\(P\\{a&lt;X&lt;b\\}=P\\{\\frac{a\u2212\\mu}{\\sigma}&lt; \\frac{X\u2212\\mu }{\\sigma}&lt; \\frac{b\u2212\\mu}{\\sigma} \\}= \\Phi (\\frac{b\u2212\\mu }{\\sigma})\u2212 \\Phi (\\frac{a\u2212\\mu}{\\sigma})\\)</li> <li>\u7279\u522b\u7684\uff1a\u82e5  \\(X\u223cN(\\mu ,\\sigma^2)\\)\uff0c\u5219 \\(P{\u2223X\u2212 \\mu \u2223&lt; k \\sigma }=\\Phi (k)\u2212 \\Phi (\u2212k)= 2 \\Phi (k) \u22121\\)</li> <li>\u82e5 \\(X \\sim N(\\mu ,\\sigma^2)\\)\uff0c\u5219 \\(Y=aX+b \\sim N(a\\mu +b,a^2\\sigma^2)\\)</li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter2/#_12","title":"\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u5206\u5e03","text":"<p>\u5173\u952e\u662f\u627e\u51fa\u7b49\u4ef7\u4e8b\u4ef6\u3002</p> <ol> <li>\u82e5Y\u4e3a\u79bb\u6563\u91cf</li> </ol> <p>\u5148\u5199\u51faY\u7684\u53ef\u80fd\u53d6\u503c\\(y_1,y_2,\\dots,y_j,\\dots\\)\uff0c\u518d\u627e\u51fa\\((Y = y_j)\\)\u7684\u7b49\u4ef7\u8868\u8fbe\u4e8b\u4ef6\\((X \\in D)\\)\uff0c\u5f97\\(P(Y = y_i) = P(X \\in D)\\)</p> <ol> <li>\u82e5Y\u4e3a\u8fde\u7eed\u91cf</li> </ol> <p>\u5148\u5199\u51faY\u7684\u6982\u7387\u5206\u5e03\u51fd\u6570\\(F_Y(y) = P(Y \\le y)\\)\uff0c\u627e\u51fa\\((Y\\le y)\\)\u7684\u7b49\u4ef7\u4e8b\u4ef6\\((X \\in D)\\)\uff0c\u5f97\\(F_Y(y) = P(X \\in D)\\)\uff0c\u518d\u6c42\u51faY\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\\(f_Y(y)\\)\uff1b</p> <p>\u5982\u679c\uff1a</p> <ul> <li>\u968f\u673a\u53d8\u91cf \\(Y=g(X)\\)\uff1b</li> <li>\u51fd\u6570 \\(y=g(x)\\) \u4e3a\u4e00\u4e25\u683c\u5355\u8c03\uff08\u589e/\u51cf\uff09\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u5fae\uff1b</li> </ul> <p>\u5219\u8bb0 \\(y=g(x)\\) \u7684\u53cd\u51fd\u6570\u4e3a \\(x=h(y)\\)\uff0c\u5f97\u5230 \\(Y\\)\u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a\uff1a</p> \\[f_Y(y)= \\begin{cases}f_X(h(y)) \\cdot\u2223h\u2032(y)\u2223,&amp;y \\in D\\\\ 0,&amp;y\\notin D\\end{cases}\\] <p>\u5176\u4e2d \\(D\\) \u4e3a \\(y=g(x)\\) \u7684\u503c\u57df\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/","title":"Chapter 3 \u591a\u5143\u968f\u673a\u53d8\u91cf\u53ca\u5176\u5206\u5e03","text":"<p> \u7ea6 416 \u4e2a\u5b57  6 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_1","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_2","title":"\u8054\u5408\u6982\u7387\u5206\u5e03","text":"\\[P(X = x_i,Y = y_j) = p_{ij},\\ i,j = 1,2,\\dots\\] <ul> <li>\\(P_{ij} \\ge 0, i,j=1,2,\\dots\\)</li> <li>\\(\\sum\\limits_{i=1}^{\\infty}\\sum\\limits_{j=1}^{\\infty}p_{ij} = 1\\)</li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_3","title":"\u8fb9\u9645\u5206\u5e03","text":"<p>\u8fb9\u9645\u5206\u5e03\u5f8b\uff08Marginal Mass Function\uff09\u662f\u8054\u5408\u5206\u5e03\u5f8b\u7684\u884c/\u5217\u6c42\u548c\uff1b</p> <ul> <li>\\(P(X=x_i)=P(X=x_i,Y &lt; \\infty )= \\sum\\limits_{j=1}^{\\infty}p_{ij} \\mathop{=}\\limits^{\\textbf{\u8bb0\u4e3a}}p_{i\u22c5}\\)</li> <li>\\(P(Y=y_j)=P(X&lt; \\infty,Y = y_j )= \\sum\\limits_{i=1}^{\\infty}p_{ij}\\mathop{=}\\limits^{\\textbf{\u8bb0\u4e3a}}p_{\u22c5j}\\)</li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_4","title":"\u6761\u4ef6\u5206\u5e03","text":"<p>\u6761\u4ef6\u5206\u5e03\u5f8b\uff08Conditional Mass Function\uff09</p> \\[P\\{X=x_i\u2223Y=y_j\\}=\\frac{P(X=x_i,Y=y_j)}{P(Y=y_j)}=\\frac{p_{ij}}{p\\cdot j},\\ i,j=1,2,\\dots\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_5","title":"\u8054\u5408\u5206\u5e03\u51fd\u6570","text":"<p>\\(F(x,y)=P\\{X \\le x,Y \\le y\\}\\) \u4e3a \\((X,Y)\\) \u7684\u8054\u5408\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0c\u7b80\u79f0\u8054\u5408\u5206\u5e03\u51fd\u6570\uff08Joint Distribution Function\uff09\uff0c\u5176\u5177\u6709\u5982\u4e0b\u6027\u8d28\uff1a</p> <ol> <li> <p>\u56fa\u5b9a\u5176\u4e2d\u4e00\u4e2a\u53d8\u91cf\uff0c\u5219\u8be5\u4e8c\u5143\u51fd\u6570\u5173\u4e8e\u53e6\u5916\u4e00\u4e2a\u53d8\u91cf\u5355\u8c03\u4e0d\u51cf\uff1b</p> </li> <li> <p>\\(0 \\le F(x,y) \\le1\\)\uff0c\u4e14</p> </li> </ol> \\[F(x,\u2212\\infty )=F(\u2212\\infty ,y)=F(\u2212\\infty,\u2212\\infty)=0, \\ F(+\\infty ,+\\infty ) =1;\\] <ol> <li> <p>\\(F(x,y)\\) \u5173\u4e8e \\(x\\) \u548c \\(y\\) \u5206\u522b\u53f3\u8fde\u7eed\uff08\u79bb\u6563\uff09\uff1b</p> </li> <li> <p>\\(x_1 &lt; x_2,y_1&lt;y_2\\) \u65f6\uff0c\u6709\uff1a</p> </li> </ol> \\[P\\{x_i &lt; X \\le x_2,y_1 &lt; Y \\le y_2\\} = F(x_2,y_2) - F(x_1,y_2) -F(x_2,y_1) + F(x_1,y_1);\\] <ol> <li>\u8054\u5408\u53ef\u4ee5\u51b3\u5b9a\u8fb9\u9645\uff0c\u8fb9\u9645\u4e0d\u80fd\u51b3\u5b9a\u8054\u5408\uff0c\u8fb9\u9645\u52a0\u4e0a\u6761\u4ef6\u53ef\u4ee5\u51b3\u5b9a\u8054\u5408\u3002</li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_6","title":"\u8fb9\u9645\u5206\u5e03\u51fd\u6570","text":"<p>\\(F_X(x)=P\\{X\\le x\\}=P\\{X\\le x,Y&lt;+\\infty \\}=F(x,+\\infty )=\\int_{\u2212\\infty}^{+\\infty}f(x,y)dy\\) \u4e3a\\(X\\) \u5173\u4e8e\u8054\u5408\u5206\u5e03\u51fd\u6570 \\(F(x,y)\\)\u7684\u8fb9\u9645\u5206\u5e03\u51fd\u6570\uff08Marginal Distribution Function\uff09\u3002</p> <p>\u5bf9\u4e8e\\(F_Y(y)\\)\u540c\u7406\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_7","title":"\u6761\u4ef6\u5206\u5e03\u51fd\u6570","text":"<p>\\(F_{Y\u2223X}(y\u2223x)=P\\{ Y\\le y\u2223X=x\\}=\\frac{P\\{Y\\le y,X =x\\}}{P\\{X=x\\}}\\) \u4e3a \\(\\{X=x\\}\\) \u6761\u4ef6\u4e0b \\(Y\\) \u7684\u6761\u4ef6\u5206\u5e03\u51fd\u6570\uff08Conditional Distribution Function\u3002</p> <p>\u8fdb\u4e00\u6b65\u63a8\u5e7f\uff0c\u82e5 \\(P(X=x)=0\\) \uff0c\u4f46\u5bf9\u4efb\u610f\u7ed9\u5b9a\u7684 \\(\\varepsilon\\)\uff0c\\(P(x&lt;X\\le x+ \\varepsilon ) &gt;0\\) \uff0c\u5219\u5728 \\(\\{X=x\\}\\) \u6761\u4ef6\u4e0b\uff0c\\(Y\\) \u7684\u6761\u4ef6\u5206\u5e03\u51fd\u6570\u4e3a \\(F_{Y\u2223X}(y\u2223x) = \\mathop{lim}\\limits_{\\varepsilon \\rightarrow 0^+}P\\{Y \\le y\u2223x&lt;X\\le x+ \\varepsilon \\}\\) \uff0c\u4ecd\u8bb0\u4e3a \\(P\\{Y\\le y\u2223X=x \\}\\)\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_8","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_9","title":"\u5206\u5e03\u51fd\u6570\u548c\u8054\u5408\u6982\u7387\u5bc6\u5ea6\u51fd\u6570","text":"\\[F(x,y) = \\int_{-\\infty}^{y} \\int_{-\\infty}^{x}f(u,v)dudv\\] <p>\u6027\u8d28\uff1a</p> <ol> <li>\\(f(x,y) \\ge 0\\) \uff1b</li> <li>\\(F(+\\infty ,+\\infty ) = \\int_{\u2212\\infty}^{+\\infty} \\int_{\u2212\\infty}^{+\\infty}f(u,v)dudv=1\\) \uff1b</li> <li>\u5728 \\(f(x,y)\\) \u7684\u8fde\u7eed\u70b9 \\((x,y)\\) \u4e0a\u6709 \\(\\frac{\\delta^2 F(x,y)}{\\delta x\\delta y}=f(x,y)\\) \uff1b</li> <li>\\((X,Y)\\) \u843d\u5165 \\(xOy\\) \u5e73\u9762\u4efb\u610f\u533a\u57df \\(D\\) \u7684\u6982\u7387\u4e3a\uff1a \\(P\\{(X,Y)\\in D\\}=\\int \\int f(x,y)dxdy\\) \uff1b</li> <li>\u7531\u4e8e\u5176\u51e0\u4f55\u610f\u4e49\u4e3a\u843d\u5728\u4ee5 \\(D\\) \u4e3a\u5e95\uff0c\u4ee5\u66f2\u9762 \\(z=f(x,y)\\) \u4e3a\u9876\u9762\u7684\u67f1\u4f53\u4f53\u79ef\uff0c\u6240\u4ee5\u5f53 \\(D\\) \u9762\u79ef\u4e3a 0 \u65f6\u6982\u7387\u4e3a 0\uff1b<code>eg</code>\uff1a \\(P(X=1,Y=1)=0\\) \uff0c \\(P(X+Y=1)=0\\) \uff0c \\(P(X^2+Y^2 \\le 1) \\neq 0\\) \uff1b</li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_10","title":"\u8fb9\u9645\u6982\u7387\u5bc6\u5ea6\u51fd\u6570","text":"<p>\\(f_X(x)=\\int_{\u2212\\infty}^{+\\infty}f(x,y)dy\\) \u4e3a\u8fb9\u9645\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08Marginal Probability Density Function\uff09\uff0c\u7b80\u79f0\u8fb9\u9645\u5bc6\u5ea6\u51fd\u6570\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_11","title":"\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u51fd\u6570","text":"<p>\u5728\u7ed9\u5b9a \\(\\{X=x\\}\\) \u7684\u6761\u4ef6\u4e0b\uff0c\\(Y\\) \u7684\u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08Conditional Prob-ability Density Function\uff09\u4e3a \\(f_{Y\u2223X}(y\u2223x)=\\frac{\\int_{\u2212\\infty}^{y}f(x,v)dv}{f_X(x)} = \\frac{f(x,y)}{f_X(x)},\\ f_X(x) \\neq 0\\)\uff0c\u7b80\u79f0\u6761\u4ef6\u5bc6\u5ea6\u51fd\u6570\u3002</p> <p>\u5bf9\u4e8e \\(Y\\) \u540c\u7406\u3002</p> <p>\u6761\u4ef6\u6982\u7387 \\(P(Y \\in D | X = x) = \\int_{D} f_{Y|X}(y|x) dy\\) \u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_12","title":"\u4e8c\u5143\u5747\u5300\u5206\u5e03","text":"<p>(X,Y)\u5728D\u4e0a\u670d\u4ece\u5747\u5300\u5206\u5e03\uff0c\u5177\u6709\u6982\u7387\u5bc6\u5ea6\u51fd\u6570:</p> \\[f(x,y) = \\begin{cases}\\frac{1}{D\u7684\u9762\u79ef}\uff0c&amp;(x,y) \\in D\\\\0,&amp;\u5176\u4ed6\\end{cases}\\] \\[P\\{(X,Y) \\in D\\} = \\frac{D_1\u7684\u9762\u79ef}{D\u7684\u9762\u79ef}, while\\ D_1 \\in D\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_13","title":"\u4e8c\u5143\u6b63\u6001\u5206\u5e03","text":"<p>\u8bbe\u4e8c\u5143\u968f\u673a\u53d8\u91cf\\((X,Y)\\)\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a:</p> \\[f(x,y) = \\frac{1}{2\\pi \\sigma_1 \\sigma_2 \\sqrt{1- \\rho^2}} \\times exp\\{\\frac{-[\\frac{(x- \\mu_1)^2}{\\sigma_1^2} - 2\\rho \\frac{(x - \\mu_1)(y-\\mu_2)}{\\sigma_1 \\sigma_2} + \\frac{(y-\\mu_2)^2}{\\sigma_2^2}]}{2(1-\\rho^2)}\\}\\] \\[(-\\infty &lt; x &lt; +\\infty,-\\infty &lt; y &lt; +\\infty)\\] <p>\u4e14\u6709 \\(\u2223\\mu_1\u2223&lt;+\\infty\\)\uff0c\\(\u2223\\mu_2\u2223&lt;+\\infty\\)\uff0c\\(\\sigma_1&gt;0\\)\uff0c\\(\\sigma_2&gt;0\\)\uff0c\\(\u2223\u03c1\u2223&lt;1\\) \uff0c\u5219\u79f0 \\((X,Y)\\) \u670d\u4ece\u53c2\u6570\u4e3a \\((\\mu_1,\\mu_2,\\sigma_1^2,\\sigma_2^2,\\rho)\\)\u7684 \u4e8c\u5143\u6b63\u6001\u5206\u5e03\uff08Bivariate Normal Distribution\uff09\uff0c\u8bb0\u505a \\((X,Y)\u223cN(\\mu_1,\\mu_2,,\\sigma_1^2,\\sigma_2^2,\\rho)\\)\u3002</p> <ul> <li>\u4e8c\u7ef4\u6b63\u6001\u5206\u5e03\u7684\u4e24\u4e2a\u8fb9\u9645\u5206\u5e03\u90fd\u662f\u5bf9\u5e94\u53c2\u6570\u7684\u4e00\u7ef4\u6b63\u6001\u5206\u5e03\uff0c\u4e0e \\(\\rho\\) \u65e0\u5173\u3002</li> <li>\u8054\u5408\u5bc6\u5ea6\u51fd\u6570\u53ef\u4ee5\u63a8\u51fa\u8fb9\u9645\u5bc6\u5ea6\u51fd\u6570\u3002\u8fb9\u9645\u5bc6\u5ea6\u51fd\u6570\u65e0\u6cd5\u63a8\u51fa\u8054\u5408\u5bc6\u5ea6\u51fd\u6570\u3002\u4f8b\u5982\u8054\u5408\u6b63\u6001\u5206\u5e03\uff0c\u8054\u5408\u5bc6\u5ea6\u51fd\u6570\u4e0e\\(\\rho\\)\u6709\u5173\u800c\u8fb9\u9645\u5bc6\u5ea6\u51fd\u6570\u5219\u4e0e\\(\\rho\\)\u65e0\u5173\u3002</li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_14","title":"\u968f\u673a\u53d8\u91cf\u7684\u72ec\u7acb\u6027","text":"<p>\u5b9a\u4e49:</p> <p>\u968f\u673a\u53d8\u91cf \\(X,Y\\) \u76f8\u4e92\u72ec\u7acb</p> \\[P(X \\le x,Y \\le y) = P(X \\le x)P(Y \\le y)\\] <p>\u4e5f\u5373\uff1a</p> \\[F(x,y) = F_X(x)F_Y(y)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_15","title":"\u72ec\u7acb\u6027\u7b49\u4ef7\u5224\u65ad","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_16","title":"\u79bb\u6563\u578b","text":"<p>\u7528\u5206\u5e03\u5f8b\u5224\u65ad\u3002\u5bf9\u4e00\u5207 \\(i,j\\) \u90fd\u6210\u7acb \\(p_{ij} = p_{i\u00b7} p_{\u00b7j}\\) \u3002</p> <p>\u5373</p> \\[P(X=x_i,Y=y_j) = P(X=x_i)P(Y=y_j),\\forall i,j\\] \\[\\Leftrightarrow P(Y = y_j|X = x_i) = P(Y = y_j),\\forall j\\] <p>\u5373 \\(Y\\) \u6761\u4ef6\u5206\u5e03\u5f8b\u4e0e \\(Y\\)\u7684\u8fb9\u9645\u5206\u5e03\u5f8b\u76f8\u7b49\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_17","title":"\u8fde\u7eed\u578b","text":"<p>\u7528\u5bc6\u5ea6\u51fd\u6570\u5224\u65ad\u3002\u5bf9\u5728\u5e73\u9762\u7684\u70b9 (x,y) \u51e0\u4e4e\u5904\u5904\u6210\u7acb \\(f(x,y) = f_X(x)f_Y(y)\\) \u3002</p> <p>\u5373\u5728\u5e73\u9762\u4e0a\u9664\u53bb \"\u9762\u79ef\" \u4e3a\u96f6\u7684\u96c6\u5408\u4ee5\u5916\uff0c\u4e0a\u8ff0\u7b49\u5f0f\u5904\u5904\u6210\u7acb\u3002</p> \\[\\Leftrightarrow f_{Y|X}(y|x) = f_Y(y)\\] <p>\u5373 \\(Y\\) \u7684\u6761\u4ef6\u5bc6\u5ea6\u51fd\u6570\u4e0e \\(Y\\) \u7684\u8fb9\u9645\u5bc6\u5ea6\u51fd\u6570\u76f8\u7b49\u3002</p> Question <p>\u8bbe\u968f\u673a\u53d8\u91cf\\(X \u223c P(\\lambda_1),Y \u223c P(\\lambda_2 )\\)\uff0c\u4e14\\(X\\) ,\\(Y\\)\u76f8\u4e92\u72ec\u7acb\u3002\u82e5\\(Z =X+Y\\)\uff0c\u6c42\\(Z\\)\u7684\u6982\u7387\u5206\u5e03\u5f8b\u3002</p> Answer <p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_18","title":"\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u5206\u5e03","text":"<p>\u5df2\u77e5\u968f\u673a\u53d8\u91cf \\(X\\) \u7684\u5206\u5e03, \\(Y = g(X)\\) ,\u51fd\u6570 \\(g(\u00b7)\\) \u5df2\u77e5,\u6c42 \\(Y\\) \u7684\u5206\u5e03\u3002</p> <ul> <li>\u79bb\u6563\u578b</li> </ul> <p>\u5148\u5199\u51fa \\(Y\\) \u7684\u53ef\u80fd\u53d6\u503c\uff1a \\(y_1,y_2,...,y_n\\) ,\u518d\u627e\u51fa \\(\\{Y = y_i\\}\\) \u7684\u7b49\u4ef7\u4e8b\u4ef6 \\(\\{X \\in D\\}\\) \u5f97 \\(P(Y = y_j) = P(X \\in D)\\)</p> <ul> <li>\u8fde\u7eed\u578b</li> </ul> <ol> <li>\u786e\u5b9a \\(Y\\) \u7684\u53d6\u503c\u8303\u56f4</li> <li>\u5199\u51fa \\(Y\\) \u7684\u5206\u5e03\u51fd\u6570 \\(F_Y(y) = P(Y \\le y)\\) ,\u627e\u51fa \\(\\{Y = y_i\\}\\) \u7684\u7b49\u4ef7\u4e8b\u4ef6 \\(\\{X \\in D\\}\\) \u5f97 \\(F_Y(y) = P(X \\in D)\\)</li> <li>\u5bf9 \\(F_Y(y)\\) \u6c42\u5bfc\u5f97\u5230 \\(Y\\) \u7684\u5bc6\u5ea6\u51fd\u6570 \\(f_Y(y)\\)</li> </ol> <p>\u6ce8\u610f\u7528\u5230\u590d\u5408\u51fd\u6570\u6c42\u5bfc \\(\\frac{d (F_X(h(y)))}{dy} = f_X(h(y))h'(y)\\)</p> <p>\u5b9a\u7406</p> <p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X \\sim f_X(x)\\) , \\(-\\infty &lt; x &lt; +\\infty\\) , \\(Y = g(X)\\) , \\(g'(x) &gt; 0\\) \u6216 \\((g'(x) &lt; 0)\\) ,\u5219 \\(Y\\) \u5177\u6709\u6982\u7387\u5bc6\u5ea6\u4e3a </p> \\[f_Y(y) = \\begin{cases} f_X(h(y))|h'(y)|, &amp; \\alpha &lt; y &lt; \\beta \\\\ 0, &amp; \\text{\u5176\u4ed6} \\end{cases}\\] <p>\u5176\u4e2d \\(\\alpha,\\beta\\) \u662f \\(Y\\) \u7684\u53d6\u503c\u8303\u56f4\uff0c \\(h\\) \u662f \\(g\\) \u7684\u53cd\u51fd\u6570\uff0c\u5373 $h(y) = x</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter3/#_19","title":"\u5377\u79ef\u516c\u5f0f","text":"<p>\u5f53 \\(X\\) \u4e0e \\(Y\\) \u76f8\u4e92\u72ec\u7acb\u65f6</p> \\[f_Z(z) = \\int_{-\\infty}^{+\\infty}f_X(z-y)f_Y(y)dy = \\int_{-\\infty}^{+\\infty}f_X(x)f_Y(z-x)dx\\] Question <p>\u5377\u79ef\u516c\u5f0f\u7684\u8bc1\u660e</p> Attenion <p>\u5e94\u8be5\u4f53\u73b0\u51faz\uff0c\u6216\u8005\u8bf4\uff0c\u4f53\u73b0\u51faz = x + y\u7684\u6027\u8d28</p> Answer <p></p> Question <p>\u82e5 \\(M=max\\{X,Y\\},N=min\\{X,Y\\}\\) \u3002\u8bbe \\(X\\) , \\(Y\\) \u662f\u4e24\u4e2a\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u5206\u5e03\u51fd\u6570\u5206\u522b\u4e3a \\(F_X(x)\\) \u548c \\(F_Y(y)\\) \u3002</p> <p>\u6c42 \\(M\\) , \\(N\\) \u7684\u5206\u5e03\u51fd\u6570\u5206\u522b\u4e3a \\(F_{max}(z)\\)\u548c\\(F_{min}(z)\\) \u3002</p> Answer <p> </p> Question <p>\u53d1\u9001\u673a\u53d1\u9001\u4fe1\u53f7 \\(X\\) ,\u5047\u8bbe\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u5e26\u6709\u566a\u58f0 \\(N \u223c N(0,\\sigma^2 )\\) \u4e14\u4e0e\u53d1\u9001\u4fe1\u53f7\u72ec\u7acb\u3002\u6700\u540e\u63a5\u6536\u5230\u7684\u4fe1\u53f7\u662f \\(Y=X+N\\) . \u5f53 \\(Y\\ge 0\\) \u65f6\u5224\u65ad \\(X= 1\\) ;\u5426\u5219\u5224\u65ad \\(X=-1\\) .\u5047\u8bbe \\(P(X=1)=p\\) , \\(P(X=-1)=1-p\\) , \\(0&lt; p &lt;1\\) . </p> <p>(1)\u5982\u679c \\(X=1\\) ,\u90a3\u4e48\u5224\u65ad\u51c6\u786e\u7684\u6982\u7387\uff1f</p> <p>(2)\u5982\u679c \\(Y\\ge 0\\) ,\u90a3\u4e48\u5224\u65ad\u51c6\u786e\u7684\u6982\u7387\uff1f</p> <p>(3)\u5982\u679c \\(Y &lt; 0\\) ,\u90a3\u4e48\u5224\u65ad\u51c6\u786e\u7684\u6982\u7387?</p> Answer <p> </p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/","title":"Chapter 4 \u968f\u673a\u53d8\u91cf\u7684\u6570\u5b57\u7279\u5f81","text":"<p> \u7ea6 536 \u4e2a\u5b57  7 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#_1","title":"\u6570\u5b66\u671f\u671b","text":"<p>\u6570\u5b66\u671f\u671b\u7b80\u79f0\u671f\u671b\uff0c\u53c8\u79f0\u5747\u503c\u3002</p> <ul> <li>\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\uff1a\\(E(X) = \\sum\\limits_{k=1}^{+\\infty}x_kp_k\\)\uff0c\u4e14\u8981\u6c42\\(\\sum\\limits_{k=1}^{+\\infty}|x_k|p_k &lt; \\infty\\)</li> <li>\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\uff1a\\(E(X) = \\int_{-\\infty}^{+\\infty} xf(x)dx\\)\uff0c\u4e14\u8981\u6c42\\(\\int_{-\\infty}^{+\\infty}|x|f(x)dx&lt; \\infty\\)</li> <li>\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u6570\u5b66\u671f\u671b\uff1a\u8bbe \\(Y\\) \u662f\u968f\u673a\u53d8\u91cf \\(X\\) \u7684\u51fd\u6570\uff1a\\(Y=g(X)\\)\uff08\\(g\\) \u662f\u8fde\u7eed\u51fd\u6570\uff09\u3002<ul> <li>\\(X\\) \u662f\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\uff0c\u5b83\u7684\u5206\u5e03\u5f8b\u4e3a \\(P(X=x_k)=p_k,k=1,2,\\dots\\)\uff0c\u82e5 \\(\\sum\\limits_{k=1}^{+\\infty}g(x_k)p_k\\) \u7edd\u5bf9\u6536\u655b\uff0c\u5219\u6709\uff1a\\(E(Y)=E(g(X))=\\sum\\limits_{k=1}^{+\\infty}g(x_k)p_k\\)\u3002</li> <li>\\(X\\) \u662f\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\uff0c\u5b83\u7684\u6982\u7387\u5bc6\u5ea6\u4e3a \\(f(x)\\)\uff0c\u82e5 \\(\\int_{\u2212\\infty}^{+\\infty}g(x)f(x)dx\\) \u7edd\u5bf9\u6536\u655b\uff0c\u5219\u6709\uff1a\\(E(Y)=E(g(X))=\\int_{\u2212\\infty}^{+\\infty}g(x)f(x)dx\\)\u3002</li> </ul> </li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#_2","title":"\u6027\u8d28","text":"<ol> <li> <p>\\(C\\) \u662f\u5e38\u6570\uff0c\u5219\u6709 \\(E(C)=C\\)</p> </li> <li> <p>\u8bbe \\(X\\) \u662f\u968f\u673a\u53d8\u91cf\uff0c\\(C\\)\u662f\u5e38\u6570\uff0c\\(E(CX)=CE(X)\\)</p> </li> <li> <p>\u8bbe \\(X,Y\\) \u662f\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\uff0c\\(E(X+Y) = E(X) + E(Y)\\)</p> <ul> <li> <p>\u8fd9\u4e00\u6027\u8d28\u53ef\u4ee5\u63a8\u5e7f\u5230\u4efb\u610f\u6709\u9650\u4e2a\u968f\u673a\u53d8\u91cf\u7ebf\u6027\u7ec4\u5408\u7684\u60c5\u51b5:</p> <p>\\(E(c_o + \\sum\\limits_{i=1}^nc_iX_i) = c_o + \\sum\\limits_{i=1}^nc_iE(X_i)\\)</p> </li> <li> <p>\u8fd9\u662f\u671f\u671b\u7684\u7ebf\u6027\u6027\u8d28\uff0c\u65e0\u9700\u72ec\u7acb\u3002</p> </li> </ul> </li> <li> <p>\u8bbe \\(X,Y\\) \u662f\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u53d8\u91cf\uff0c\u5219 \\(E(X \\cdot Y)=E(X) \\cdot E(Y)\\)\uff0c\u4f46\u9006\u547d\u9898\u4e0d\u6210\u7acb\uff1b</p> <ul> <li> <p>\u8fd9\u4e00\u6027\u8d28\u53ef\u4ee5\u63a8\u5e7f\u5230\u4efb\u610f\u6709\u9650\u4e2a\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u53d8\u91cf\uff1a</p> <p>\\(E(\\prod\\limits_{i=1}^nX_i) = \\prod\\limits_{i=1}^nE(X_i)\\)</p> </li> </ul> </li> </ol> Question <p>\u8ba1\u7b97\u673a\u7a0b\u5e8f\u968f\u673a\u4ea7\u751f0 ~ 9\u4e2d\u7684\u6570\u5b57. \u8bb0\\(X_i\\)\u4e3a\u7b2c\\(i\\)\u6b21\u4ea7\u751f\u7684\u6570\u5b57\uff0c\\(i=1, 2,\\dots ,n\\). \u5c06\u8fd9\\(n\\)\u4e2a\u6570\u4f9d\u6b21\u6392\u5217\uff0c\u5f97\u5230\u4e00\u6570\uff0c\u8bb0\u4e3a\\(Y\\),\u6c42\\(E(Y)\\).</p> Answer <p></p> Question <p>\u4e00\u4e13\u7528\u7535\u68af\u8f7d\u774012\u4f4d\u4e58\u5ba2\u4ece\u4e00\u5c42\u4e0a\u5347\uff0c\u6700\u9ad811\u5c42.\u5047\u8bbe\u4e2d\u9014\u6ca1\u6709\u4e58\u5ba2\u8fdb\u5165\uff0c\u6bcf\u4f4d\u4e58\u5ba2\u72ec\u7acb\u7b49\u6982\u7387\u5730\u5230\u8fbe\u5404\u5c42.\u5982\u679c\u6ca1\u6709\u4e58\u5ba2\u5230\u8fbe\u67d0\u5c42\u697c\uff0c\u7535\u68af\u5728\u8be5\u5c42\u5c31\u4e0d\u505c.\u8bb0\u7535\u68af\u505c\u7559\u6b21\u6570\u4e3aX\uff0c\u6c42E(X). (\u8bbe\u7535\u68af\u5230\u8fbe11\u5c42\u540e\u4e58\u5ba2\u5168\u90e8\u4e0b\u5b8c)</p> Answer <p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#_3","title":"\u65b9\u5dee","text":"<p>X\u7684\u65b9\u5dee\uff1a</p> \\[D(X) = Var(X) = E\\{[X-E(X)]^2\\}\\] <p>X\u7684\u6807\u51c6\u5dee\u6216\u5747\u65b9\u5dee\uff1a</p> \\[\\sigma(X) = \\sqrt{Var(X)}\\] <p>\u800c\u5176\u8ba1\u7b97\u65b9\u6cd5\u53ef\u4ee5\u5229\u7528\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u6570\u5b66\u671f\u671b\uff0c\u8bb0 \\(g(X)=(X\u2212E(X))^2\\) \uff0c\u7136\u540e\u8ba1\u7b97 \\(E(g(X))\\)\u3002</p> <ul> <li>\u79bb\u6563\u578b\uff1a\\(Var(X)=E{[X\u2212E(X)]^2}=\\sum\\limits_{i=1}^{+\\infty}[x_i\u2212E(X)]^2p_i;\\)</li> <li>\u8fde\u7eed\u578b\uff1a\\(Var(X)=E{[X\u2212E(X)]^2}=\\int_{\u2212\\infty}^{+\\infty}[x\u2212E(X)]^2f(x)dx;\\)</li> <li>\u5229\u7528\u671f\u671b\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5f97\u5230 \\(Var(X)=E(X^2)\u2212E^2(X)\\)\uff1b</li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#_4","title":"\u6027\u8d28","text":"<ol> <li> <p>\u82e5 \\(C\\) \u662f\u5e38\u6570\uff0c\u5219 \\(Var(C)=0\\)\uff1b</p> </li> <li> <p>\u8bbe \\(X\\)  \u662f\u968f\u673a\u53d8\u91cf\uff0c\\(C\\) \u662f\u5e38\u6570\uff0c\u5219 \\(Var(C \\cdot X)= C^2\\cdot Var(X)\\)\uff1b</p> </li> <li> <p>\u8bbe\\(X,Y\\) \u662f\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\uff0c\u5219</p> </li> </ol> \\[Var(X\\pm Y)=Var(X)+Var(Y) \\pm 2E{[X\u2212E(X)][Y\u2212E(Y)]}=Var(X)+Var(Y) \\pm 2Cov(X,Y);\\] <ul> <li>\u8fd9\u4e00\u6027\u8d28\u53ef\u4ee5\u63a8\u5e7f\u5230\u4efb\u610f\u6709\u9650\u4e2a\u968f\u673a\u53d8\u91cf\u4e4b\u548c\u7684\u60c5\u51b5\uff1a</li> </ul> \\[Var(\\sum_{i=1}^nX_i)=\\sum_{i=1}^nVar(X_i)+2\\sum_{1\\le i &lt; j \\le n} Cov(X_i,X_j);\\] <ul> <li> <p>\u7279\u522b\u5730\uff0c\u5982\u679c \\(X,Y\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u5219 \\(Var(X \\pm Y)=Var(X)+Var(Y)\\);</p> </li> <li> <p>\u8fdb\u4e00\u6b65\u5730\uff0c\u5982\u679c \\(X_i(i=1,2,\\dots,n)\\) \u5f7c\u6b64\u72ec\u7acb\uff0c\u5219\\(Var(c_0+\\sum\\limits_{i=1}^nc_iX_i)=\\sum\\limits_{i=1}^nc_i^2Var(X_i);\\)</p> </li> </ul> <ol> <li> <p>\\(Var(X)\\le E[(X\u2212c)^2]\\)\uff0c\u5e76\u4e14\u5f53\u4e14\u4ec5\u5f53 \\(E(X)=c\\) \u65f6\u7b49\u53f7\u6210\u7acb\uff1b</p> </li> <li> <p>\\(Var(X)=0 \\Leftrightarrow P(X=c)=1\\)  and  \\(c=E(X);\\)</p> </li> </ol> Question <p>\u8bbe\\(X \\sim N(22.40,0.03^2),Y \\sim N(22.50,0.04^2)\\)\uff0c\u4e14 \\(X\\) \u548c \\(Y\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u8ba1\u7b97 \\(P(X &lt; Y)\\)</p> Answer <p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#_5","title":"\u5e38\u89c1\u5206\u5e03\u7684\u6570\u5b66\u671f\u671b\u4e0e\u65b9\u5dee","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#_6","title":"\u534f\u65b9\u5dee\u4e0e\u76f8\u5173\u7cfb\u6570","text":"<p>\u968f\u673a\u53d8\u91cf \\(X,Y\\) \u7684\u534f\u65b9\u5dee \\(Cov(X,Y)=E{[X\u2212E(X)][Y\u2212E(Y)]}=E(XY)\u2212E(X)E(Y)\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#_7","title":"\u534f\u65b9\u5dee\u7684\u6027\u8d28","text":"<ol> <li>\\(Cov(X,Y)=Cov(Y,X)\\)\uff1b</li> <li>\\(Cov(X,Y)=E(XY)\u2212E(X)E(Y)\\)\uff1b</li> <li>\\(Cov(aX,bY)=ab*Cov(X,Y) \\ ,a,b \\in R\\)\uff1b</li> <li>\\(Cov(X+Y,Z)=Cov(X,Z)+Cov(Y,Z)\\)\uff1b</li> <li>\\(Cov(X,X)=Var(X)\\)\uff1b</li> <li>\\(Cov(c,Y)=E(cY)\u2212E(c)E(Y)=0,c \\in R;\\)</li> <li>\\(Cov(X+Y,X\u2212Y)=Cov(X,X)\u2212Cov(Y,Y);\\)</li> <li>\\(Cov(X^\u2217,Y^\u2217)=Cov(\\frac{X\u2212E(X)}{\\sqrt{Var(X)}},\\frac{Y\u2212E(Y)}{\\sqrt{Var(Y)}})=\\frac{Cov(X,Y)}{\\sqrt{Var(X)Var(Y)}}=\\rho_{XY};\\)</li> <li>\\(Cov(aX+bY,cX+dY)=ac \\cdot Var(X)+bd \\cdot Var(Y)+(ad+bc)Cov(X,Y);\\)</li> <li>\\(Cov(\\sum\\limits_{i}a_iX_i,Y) = \\sum\\limits_{i}a_iCov(X_i,Y);\\)</li> </ol> <p>\u968f\u673a\u53d8\u91cf \\(X,Y\\) \u7684\u76f8\u5173\u7cfb\u6570 \\(\\rho_{XY}= \\frac{Cov(X,Y)}{\\sqrt{Var(X)Var(Y)}}\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#_8","title":"\u76f8\u5173\u7cfb\u6570\u7684\u6027\u8d28","text":"<ol> <li> <p>\\(\u2223\\rho_{XY}\u2223\\le 1\\) ;</p> </li> <li> <p>\\(\u2223\\rho_{XY}\u2223=1 \\Leftrightarrow \\exists a,b \\in R,\\ s.t.\\ P(Y=a+bX)=1\\) ;</p> </li> </ol> <ul> <li>\\(\\rho_{XY}=+1\\)\u65f6\uff0c\\(b&gt;0\\) \uff1b</li> <li>\\(\\rho_{XY}=-1\\)\u65f6\uff0c\\(b&lt;0\\) \uff1b</li> </ul> <ol> <li>\u4e0a\u8ff0\u4e24\u6761\u6027\u8d28\u53ef\u4ee5\u5408\u5e76\u5199\u6210\uff1a    \u5f53 \\(Var(X)Var(Y) \\neq 0\\) \u65f6\uff0c\u6709 \\(Cov^2(X,Y) \\le Var(X)Var(Y)\\) \uff0c\u5176\u4e2d\u7b49\u53f7\u5f53\u4e14\u4ec5\u5f53 \\(X\\) \u4e0e \\(Y\\) \u4e4b\u95f4\u6709\u4e25\u683c\u7684\u7ebf\u6027\u5173\u7cfb\uff0c\u5373\u5b58\u5728\u5e38\u6570 \\(a,b\\) \uff0c\u4f7f \\(P(Y=a+bX)=1\\) ;</li> </ol> <p>\u76f8\u5173\u7cfb\u6570 \\(\\rho_{XY}\\) \u662f\u7528\u6765\u8868\u5f81 \\(X,Y\\) \u4e4b\u95f4\u7ebf\u6027\u5173\u7cfb\u7d27\u5bc6\u7a0b\u5ea6\u7684\u91cf\u3002</p> <p>\u6b64\u5916\uff0c\u8003\u8651\u4ee5 \\(X\\) \u7684\u7ebf\u6027\u51fd\u6570 \\(a+bX\\) \u6765\u8fd1\u4f3c\u8868\u793a \\(Y\\)\uff0c\u5747\u65b9\u8bef\u5dee \\(e(a,b)=E{[Y\u2212(a+bX)]^2}\\) \u4e5f\u53ef\u4ee5\u7528\u6765\u8861\u91cf \\(X,Y\\) \u4e4b\u95f4\u7ebf\u6027\u5173\u7cfb\u7d27\u5bc6\u7a0b\u5ea6\u3002\u5176\u4e2d\u6709\uff1a</p> \\[\\begin{cases}a_0 = E(Y)-b_0E(X)\\\\b_0=\\frac{Cov(X,Y)}{Var(X)}\\end{cases}\\] <ul> <li> <p>\\(\u2223\\rho_{XY}\u2223\\)\u6bd4\u8f83\u5927\u65f6\uff0c\u5747\u65b9\u8bef\u5dee\u8f83\u5c0f\uff0c\u8868\u793a \\(X,Y\\) \u7ebf\u6027\u5173\u7cfb\u7684\u7a0b\u5ea6\u597d\uff1b</p> </li> <li> <p>\\(\u2223\\rho_{XY}\u2223=1\\) \u65f6\uff0c\u5747\u65b9\u8bef\u5dee\u4e3a 0\uff0c\u8868\u793a \\(X,Y\\) \u4e4b\u95f4\u4ee5\u6982\u7387 1 \u5b58\u5728\u7ebf\u6027\u5173\u7cfb\uff1b</p> </li> <li> <p>\\(\u2223\\rho_{XY}\u2223\\) \u6bd4\u8f83\u5c0f\u65f6\uff0c\u5747\u65b9\u8bef\u5dee\u8f83\u5927\uff0c\u8868\u660e \\(X,Y\\) \u7ebf\u6027\u5173\u7cfb\u7684\u7a0b\u5ea6\u5dee\uff1b</p> </li> <li> <p>\\(\\rho_{XY}&gt;0\\)\u65f6\uff0c\\(X,Y\\) \u6b63\u76f8\u5173\uff1b</p> </li> <li> <p>\\(\\rho_{XY}&lt;0\\)\u65f6\uff0c\\(X,Y\\) \u8d1f\u76f8\u5173\uff1b</p> </li> <li> <p>\\(\\rho_{XY}=0\\) \u65f6\uff0c\u79f0 \\(X,Y\\) \u4e0d\u76f8\u5173\u6216\u96f6\u76f8\u5173\uff08\u4ec5\u4ec5\u5bf9\u4e8e\u7ebf\u6027\u5173\u7cfb\u6765\u8bf4\uff0c\u4e0e\u72ec\u7acb\u7684\u542b\u4e49\u4e0d\u540c\uff09\uff1b</p> <ul> <li>\\(\\rho_{XY}=0\\) \u6709\u5982\u4e0b\u7b49\u4ef7\u6761\u4ef6\uff1a<ol> <li>\\(Cov(X,Y)=0\\)\uff1b</li> <li>\\(E(XY)=E(X)E(Y)\\)\uff1b</li> <li>\\(Var(X \\pm Y)=Var(X)+Var(Y)\\)\uff1b</li> </ol> </li> </ul> </li> </ul> <p>\u7279\u522b\u5730\uff1a</p> <p>\u82e5 \\((X,Y)\\) \u670d\u4ece\u4e8c\u5143\u6b63\u6001\u5206\u5e03\uff0c\u8bb0\u4e3a \\((X,Y) \\sim N(\\mu_1,\\mu_2,\\sigma_1^2,\\sigma_2^2,\\rho)\\)</p> <p>\u6027\u8d28\uff1a</p> <ol> <li>\\(X \\sim N(\\mu_1,\\sigma_1^2)\\) , \\(Y \\sim N(\\mu_2,\\sigma_2^2)\\)</li> <li>\\(X\\) \u548c \\(Y\\) \u7684\u76f8\u5173\u7cfb\u6570 \\(\\rho_{XY} = \\rho\\) </li> <li>X\u4e0eY\u76f8\u4e92\u72ec\u7acb \\(\\Leftrightarrow \\rho = 0 \\Leftrightarrow\\) X\u4e0eY\u4e0d\u76f8\u5173</li> </ol> <p>\u6ce8\u610f\u533a\u5206\u72ec\u7acb\u6027\u548c\u76f8\u5173\u6027\uff1a</p> <ul> <li>\\(X,Y\\) \u4e92\u76f8\u72ec\u7acb \\(\\Rightarrow X,Y\\) \u4e0d\u76f8\u5173\uff1b</li> <li>\\(X,Y\\) \u4e0d\u72ec\u7acb \\(\\Leftarrow X,Y\\) \u76f8\u5173\uff1b</li> <li>\u5728\u8054\u5408\u6b63\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u72ec\u7acb\u4e0e\u4e0d\u76f8\u5173\u662f\u7b49\u4ef7\u7684\uff1b</li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#_9","title":"\u5176\u4ed6\u6570\u5b57\u7279\u5f81","text":"<ul> <li>X\u7684k\u9636(\u539f\u70b9)\u77e9\uff1a\\(E(X^k)\\)</li> <li>X\u7684k\u9636\u4e2d\u5fc3\u77e9\uff1a\\(E\\{[X-E(X)]^k\\}\\)</li> <li>X\u548cY\u7684k+l\u9636\u6df7\u5408(\u539f\u70b9)\u77e9\uff1a\\(E\\{X^kY^l\\}\\)</li> <li>X\uff0cY\u7684k+l\u9636\u6df7\u5408\u4e2d\u5fc3\u77e9\uff1a\\(E\\{[X-E(X)]^k[Y-E(Y)]^l\\}\\)</li> <li>\\(x_\\alpha\\)\u4e3a\u968f\u673a\u53d8\u91cfX\u7684\u4e0a(\u4fa7)\\(\\alpha\\)\u5206\u4f4d\u6570\uff1a\\(P\\{X &gt; x_\\alpha \\} = 1 - F(x_{\\alpha}) = \\int_{x_{\\alpha}}^{+\\infty}f(x)dx = \\alpha\\)</li> </ul> <p>n\u5143\u968f\u673a\u53d8\u91cfX\u7684\u6570\u5b66\u671f\u671b(\u5411\u91cf)\uff1a</p> \\[E(X) = (E(X_1),E(X_2),\\dots,E(X_n))^T\\] <p>\u534f\u65b9\u5dee\u77e9\u9635\uff1a</p> \\[\\left( \\begin{array}{l} Var(X_1) &amp; Cov(X_1,X_2) &amp; \\dots &amp; Cov(X_1,X_n) \\\\ Cov(X_2,X_1) &amp; Var(X_2) &amp; \\dots &amp; Cov(X_2,X_n)\\\\ \\dots &amp; \\dots &amp; \\dots &amp; \\dots \\\\ Cov(X_n,X_1) &amp; Cov(X_n,X_2) &amp; \\dots &amp; Var(X_n) \\end{array}\\right)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter4/#n","title":"n\u5143\u6b63\u6001\u53d8\u91cf\u5177\u6709\u4ee5\u4e0b\u56db\u6761\u91cd\u8981\u6027\u8d28","text":"<ol> <li>\\(n\\)\u7ef4\u6b63\u6001\u53d8\u91cf\\((X_1,X_2,...,X_n)^T\\)\u4e2d\u7684\u4efb\u610f\u5b50\u5411\u91cf \\((X_{i_1},X_{i_2},\\dots,X_{i_k})^T , \\ 1 \\le k \\le n\\)\u4e5f\u670d\u4ece\\(k\\)\u5143\u6b63\u6001\u5206\u5e03\uff1b</li> </ol> <ul> <li>\u7279\u522b\u5730\uff0c\u6bcf\u4e00\u4e2a\u5206\u91cf \\(X_i,\\ i=1,2,\\dots ,n\\)\u90fd\u662f\u6b63\u6001\u53d8\u91cf\uff1b</li> <li>\u53cd\u4e4b\uff0c\u82e5\u6bcf\u4e2a \\(X_i\\) \u90fd\u662f\u6b63\u6001\u53d8\u91cf\uff0c\u4e14\u76f8\u4e92\u72ec\u7acb\uff0c\u5219$ (X_1,X_2, \\dots,X_n)$\u662f \\(n\\)\u7ef4\u6b63\u6001\u53d8\u91cf\uff1b</li> </ul> <ol> <li> <p>\\(n\\) \u7ef4\u968f\u673a\u53d8\u91cf \\((X_1,X_2,\\dots ,X_n)\\) \u670d\u4ece \\(n\\) \u7ef4\u6b63\u6001\u5206\u5e03\u7684\u5145\u8981\u6761\u4ef6\u662f \\(X_1,X_2,\\dots ,X_n\\) \u7684\u4efb\u610f\u7ebf\u6027\u7ec4\u5408 \\(\\sum\\limits_{i=1}^nl_iX_i\\) \u670d\u4ece\u4e00\u7ef4\u6b63\u6001\u5206\u5e03\uff0c\u5176\u4e2d \\(l_1,l_2,\\dots ,l_n\\)\u4e0d\u5168\u4e3a \\(0\\)\uff1b</p> </li> <li> <p>\u82e5 \\((X_1,X_2,\\dots ,X_n)\\) \u670d\u4ece \\(n\\) \u7ef4\u6b63\u6001\u5206\u5e03\uff0c\u8bbe \\(Y_1,Y_2,\\dots ,Y_k\\) \u662f \\(X_i\\) \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5219 \\((Y_1,Y_2,\\dots,Y_k)\\) \u4e5f\u670d\u4ece\u591a\u7ef4\u6b63\u6001\u5206\u5e03\uff0c\u8fd9\u4e00\u6027\u8d28\u88ab\u79f0\u4e3a\u6b63\u6001\u53d8\u91cf\u7684\u7ebf\u6027\u53d8\u6362\u4e0d\u53d8\u6027\uff1b</p> </li> <li> <p>\u82e5 \\((X_1,X_2,\\dots ,X_n)\\) \u670d\u4ece \\(n\\) \u7ef4\u6b63\u6001\u5206\u5e03\uff0c\u5219 \\(X_1,X_2,\\dots ,X_n\\) \u4e92\u76f8\u72ec\u7acb\u7684\u5145\u8981\u6761\u4ef6\u662f \\(X_i\\) \u4e24\u4e24\u4e0d\u76f8\u5173\uff0c\u4e5f\u7b49\u4ef7\u4e8e\u534f\u65b9\u5dee\u77e9\u9635\u4e3a\u5bf9\u89d2\u77e9\u9635\uff1b</p> </li> </ol> Question <p>\u8bbe\u4e8c\u5143\u968f\u673a\u53d8\u91cf\\((X,Y)\\)\u670d\u4ece\u4e8c\u5143\u6b63\u6001\u5206\u5e03\uff0c\\(X\u223cN(0,1),Y\u223cN(1,4)\\)\uff0cX\u4e0eY\u7684\u76f8\u5173\u7cfb\u6570\\(\\rho = -\\frac{1}{2}\\)\u6c42: </p> <p>(1)\\(Var(2X-Y)\\)\uff1b</p> <p>(2)\\(P(2X &gt; Y)\\)\uff1b</p> <p>(3) \\(Z_1 = X + Y,Z_2 = X - Y\\)\uff0c\u6c42\\((Z_1,Z_2)\\)\u7684\u5206\u5e03\u3002</p> Answer <p> </p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/","title":"Chapter 5 \u5927\u6570\u5b9a\u5f8b\u548c\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406","text":"<p> \u7ea6 728 \u4e2a\u5b57  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_1","title":"\u5927\u6570\u5b9a\u5f8b","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_2","title":"\u4f9d\u6982\u7387\u6536\u655b","text":"<p>\u968f\u673a\u53d8\u91cf\u5e8f\u5217 \\(Y_1,Y_2\uff0cY_3,\\dots\\) \uff0c\u82e5\u5b58\u5728\u67d0\u5e38\u6570 \\(c\\) \uff0c\u4f7f\u5f97 \\(\\forall \\epsilon &gt; 0\\) \uff0c\u5747\u6709\uff1a\\(\\mathop{lim}\\limits_{n \\rightarrow +\\infty}P\\{|Y_n - c| \\ge \\epsilon\\} = 0\\)\uff0c\u5219\u79f0\\(\\{Y_n,n \\ge 1\\}\\)\u4f9d\u6982\u7387\u6536\u655b\u4e8e\u5e38\u6570\\(c\\)\uff0c\u8bb0\u4e3a\uff1a\u5f53\\(n \\rightarrow +\\infty\\)\u65f6\uff0c\\(Y_n \\mathop{\\rightarrow}\\limits^P c\\)</p> <p>\u6027\u8d28\uff1a</p> <p>\u82e5\\(X_n \\mathop{\\rightarrow}\\limits^P a,Y_n \\mathop{\\rightarrow}\\limits^P b,g\\)\u5728\\((a,b)\\)\u8fde\u7eed\uff0c\u5219\\(g(X_n,Y_n) \\mathop{\\rightarrow}\\limits^P g(a,b)\\)</p> <p>\u7279\u522b\u5730\uff0c\u82e5\\(X_n \\mathop{\\rightarrow}\\limits^P a,f(x)\\)\u5728\u70b9\\(a\\)\u8fde\u7eed\uff0c\u5219\u5f53\\(n \\rightarrow \\infty\\)\u65f6\uff0c\\(f(X_n) \\mathop{\\rightarrow}\\limits^P f(a)\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_3","title":"\u9a6c\u5c14\u53ef\u592b\u4e0d\u7b49\u5f0f","text":"<p>\u8bbe\u968f\u673a\u53d8\u91cf\\(Y\\)\u7684\\(k\\)\u9636\u77e9\u5b58\u5728\\((k \\ge 1)\\)\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\\(\\epsilon &gt; 0\\)\uff0c\u90fd\u6709\uff1a</p> \\[P\\{|Y| \\ge \\epsilon \\} \\le \\frac{E(|Y|^k)}{\\epsilon^k}\\] <p>\u6210\u7acb\u3002</p> <p>\u5b9a\u7406\u7684\u7b49\u4ef7\u5f62\u5f0f\u4e3a\uff1a</p> \\[P\\{|Y| &lt; \\epsilon \\} \\ge 1 - \\frac{E(|Y|^k)}{\\epsilon^k}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_4","title":"\u5207\u6bd4\u96ea\u592b\u4e0d\u7b49\u5f0f","text":"<p>\u8bbe\\(X\\)\u7684\u65b9\u5dee\\(Var(X)\\)\u5b58\u5728\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\\(\\epsilon &gt; 0\\)\uff0c\u90fd\u6709\uff1a</p> \\[P\\{|X - E(X)| \\ge \\epsilon \\} &lt;  \\frac{Var(x)}{\\epsilon^2}\\] <p>\u5b9a\u7406\u7684\u7b49\u4ef7\u5f62\u5f0f\u4e3a\uff1a</p> \\[P\\{|X - E(X)| &lt; \\epsilon \\} \\ge 1 - \\frac{Var(x)}{\\epsilon^2}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_5","title":"\u51e0\u4e2a\u5927\u6570\u5b9a\u5f8b","text":"<p>\u5927\u6570\u5b9a\u5f8b\u4e3b\u8981\u8ba8\u8bba\u4ec0\u4e48\u6761\u4ef6\u4e0b\uff0c\u968f\u673a\u53d8\u91cf\u5e8f\u5217\u7684\u7b97\u672f\u5e73\u5747\u4f9d\u6982\u7387\u6536\u655b\u5230\u4e00\u4e2a\u7a33\u5b9a\u503c\u3002</p> <p>\u8bbe \\(\\{Y_i,i \\ge 1\\}\\)\u4e3a\u4e00\u968f\u673a\u53d8\u91cf\u5e8f\u5217\uff0c\u82e5\u5b58\u5728\u5e38\u6570\u5e8f\u5217 \\(\\{c_n,n \\ge 1\\}\\)\uff0c\u4f7f\u5f97 \\(\\forall \\epsilon &gt;0\\)\uff0c\u5747\u6709\uff1a</p> \\[\\mathop{lim}\\limits_{n\\rightarrow +\\infty}P(|\\frac{1}{n} \\sum\\limits_{i=1}^n Y_i - c_n| \\ge \\epsilon) = 0\\] <p>or</p> \\[\\mathop{lim}\\limits_{n\\rightarrow +\\infty}P(|\\frac{1}{n} \\sum\\limits_{i=1}^n Y_i - c_n| &lt; \\epsilon) = 1\\] <p>\u5219\u79f0\u968f\u673a\u53d8\u91cf\u5e8f\u5217 \\(\\{Y_i,i \\ge 1\\}\\) \u670d\u4ece\u5f31\u5927\u6570\u5b9a\u7406(Weak Law of Large Numbers)\uff0c\u7b80\u79f0\u670d\u4ece\u5927\u6570\u5b9a\u5f8b\u3002</p> <p>\u7279\u522b\u5730\uff0c\u82e5 \\(c_n\\) \u4e0e \\(n\\) \u65e0\u5173\uff0c\u5219\u53ef\u4ee5\u5199\u4e3a\uff1a</p> \\[\\frac{1}{n}\\sum\\limits_{i=1}^nY_i\\mathop{\\rightarrow}\\limits^Pc, n \\rightarrow +\\infty\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_6","title":"\u5207\u6bd4\u96ea\u592b\u5927\u6570\u5b9a\u5f8b","text":"<p>\u8bbe\\(X_1,X_2,\\dots,X_n,\\dots\\)\u76f8\u4e92\u72ec\u7acb\uff0c\u5177\u6709\u76f8\u540c\u7684\u6570\u5b66\u671f\u671b\\(\\mu\\)\u548c\u76f8\u540c\u7684\u65b9\u5dee\\(\\sigma^2\\)\uff0c\u5219\u5f53\\(n \\rightarrow +\\infty\\)\u65f6\uff0c</p> \\[\\frac{1}{n}\\sum\\limits_{k=1}^nX_k\\mathop{\\rightarrow}\\limits^P\\mu\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_7","title":"\u8f9b\u94a6\u5927\u6570\u5b9a\u5f8b","text":"<p>\u8bbe\\(X_1,X_2,\\dots,X_n,\\dots\\)\u72ec\u7acb\u540c\u5206\u5e03\uff0c\\(E(X_i) = \\mu\\)\uff0c\u5219\u5f53\\(n \\rightarrow +\\infty\\)\u65f6\uff0c</p> \\[\\frac{1}{n}\\sum\\limits_{i=1}^nX_i\\mathop{\\rightarrow}\\limits^P\\mu\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_8","title":"\u8d1d\u52aa\u91cc\u5927\u6570\u5b9a\u5f8b","text":"<p>\u8bbe\\(n_A\\)\u4e3a\\(n\\)\u91cd\u8d1d\u52aa\u91cc\u8bd5\u9a8c\u4e2d\u4e8b\u4ef6\\(A\\)\u53d1\u751f\u7684\u6b21\u6570\uff0c\u5e76\u8bb0\u4e8b\u4ef6\\(A\\)\u5728\u6bcf\u6b21\u8bd5\u9a8c\u4e2d\u53d1\u751f\u7684\u6982\u7387\u4e3a\\(p\\)\uff0c\u5219\u6709\u5f53\\(n \\rightarrow +\\infty\\)\u65f6</p> \\[\\mathop{lim}\\limits_{n\\rightarrow +\\infty}P\\{|\\frac{n_A}{n} - p| \\ge \\epsilon\\} = 0\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_9","title":"\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_10","title":"\u72ec\u7acb\u540c\u5206\u5e03\u7684\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406","text":"<p>\u8bbe\\(X_1,X_2,\\dots,X_n,\\dots\\)\u72ec\u7acb\u540c\u5206\u5e03\uff0c\\(E(X_i) = \\mu,Var(X_i) = \\sigma^2\\)\uff0c\u5219\u5bf9\u4efb\u610f\u5b9e\u6570\\(x\\)\uff0c\\(\\mathop{lim}\\limits_{n\\rightarrow\\infty}P(\\frac{\\sum\\limits_{i=1}^n X_i - n\\mu}{\\sqrt{n}\\sigma} \\le x) = \\int_{-\\infty}^x\\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{t^2}{2}}dt = \\Phi(x)\\)</p> <p>\u56e0\u6b64\u5f53\\(n\\)\u5145\u5206\u5927\u65f6</p> <ul> <li>\\(\\sum\\limits_{i=1}^{n}X_i \\mathop{\\sim}\\limits^{\u8fd1\u4f3c} N(n\\mu,n\\sigma^2)\\)</li> <li>\\(\\frac{1}{n}\\sum\\limits_{i=1}^{n}X_i \\mathop{\\sim}\\limits^{\u8fd1\u4f3c} N(\\mu,\\frac{\\sigma^2}{n})\\)</li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter5/#_11","title":"\u63a8\u8bba(\u68e3\u83ab\u5f17\u2014\u2014\u62c9\u666e\u62c9\u65af\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406)","text":"<p>\u8bbe\\(n_A\\)\u4e3a\\(n\\)\u91cd\u8d1d\u52aa\u91cc\u8bd5\u9a8c\u4e2d\u4e8b\u4ef6\\(A\\)\u53d1\u751f\u7684\u6b21\u6570\uff0c\\(P(A) = p \\ (0 &lt; p &lt; 1)\\)\uff0c\u5219\u5bf9\u4efb\u4f55\u5b9e\u6570\\(x\\)\uff0c\u6709\uff1a</p> <p>\\(\\mathop{lim}\\limits_{n\\rightarrow\\infty}P(\\frac{n_A-np}{\\sqrt{np(1-p)}} \\le x) = \\int_{-\\infty}^x\\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{t^2}{2}}dt = \\Phi(x)\\)</p> <p>\u5373\uff0c\u5f53\\(n\\)\u5145\u5206\u5927\u65f6\\(B(n,p) \\mathop{\\sim}\\limits^{\u8fd1\u4f3c} N(np,np(1-p))\\)</p> <p>\u4f9d\u6982\u7387\u6536\u655b\u4e0e\u5747\u503c\u4e4b\u95f4\u7684\u5173\u7cfb\u8865\u5145</p> <p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/","title":"Chapter 6 \u6570\u7406\u7edf\u8ba1\u7684\u57fa\u672c\u6982\u5ff5","text":"<p> \u7ea6 3852 \u4e2a\u5b57  11 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 19 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_1","title":"\u968f\u673a\u6837\u672c\u4e0e\u7edf\u8ba1\u91cf","text":"<ul> <li>\u603b\u4f53\uff1a\u7814\u7a76\u5bf9\u8c61\u7684\u5168\u4f53\uff1b</li> <li>\u4e2a\u4f53\uff1a\u603b\u4f53\u4e2d\u7684\u6210\u5458\uff1b</li> <li>\u603b\u4f53\u7684\u5bb9\u91cf\uff1a\u603b\u4f53\u4e2d\u5305\u542b\u7684\u4e2a\u4f53\u6570\uff1b</li> <li>\u6709\u9650\u603b\u4f53\uff1a\u5bb9\u91cf\u6709\u9650\u7684\u603b\u4f53\uff1b</li> <li>\u65e0\u9650\u603b\u4f53\uff1a\u5bb9\u91cf\u65e0\u9650\u7684\u603b\u4f53\uff0c\u901a\u5e38\u5c06\u5bb9\u91cf\u975e\u5e38\u5927\u7684\u603b\u4f53\u4e5f\u6309\u65e0\u9650\u603b\u4f53\u5904\u7406\u3002</li> </ul> <ul> <li>\u603b\u4f53\u7684\u67d0\u4e2a\u6307\u6807 \\(X\\) : \u5bf9\u4e8e\u4e0d\u540c\u7684\u4e2a\u4f53\u6765\u8bf4\u6709\u4e0d\u540c\u7684\u53d6\u503c, \u8fd9\u4e9b\u53d6\u503c\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5206\u5e03, \u56e0\u6b64 \\(X\\) \u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u3002\u6709\u65f6\u5019\u5c31\u628a \\(X\\) \u79f0\u4e3a\u603b\u4f53\u3002\u5047\u8bbe \\(X\\) \u7684\u5206\u5e03\u51fd\u6570\u4e3a \\(F(x)\\) , \u4e5f\u79f0 \\(F(x)\\) \u4e3a\u603b\u4f53\u3002</li> <li>\u6837\u672c\uff1a\u4ece\u603b\u4f53\u4e2d\u62bd\u53d6\u7684\u4e2a\u4f53\u7ec4\u6210\u7684\u96c6\u5408\uff1b</li> <li>\u968f\u673a\u6837\u672c\uff1a\u4ece\u603b\u4f53\u4e2d\u968f\u673a\u5730\u53d6 \\(n\\) \u4e2a\u4e2a\u4f53\uff1b</li> <li>\u7b80\u5355\u968f\u673a\u6837\u672c\uff1a\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\u7684\u968f\u673a\u6837\u672c \\((X_1,X_2,\\cdots,X_n)\\) \u79f0\u4e3a\u5bb9\u91cf\u662f \\(n\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff1a<ol> <li>\u4ee3\u8868\u6027\uff1a\u6bcf\u4e2a \\(X_1\\) \u4e0e \\(X\\) \u540c\u5206\u5e03\uff1b</li> <li>\u72ec\u7acb\u6027\uff1a\\(X_1,X_2,\\cdots,X_n\\) \u662f\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u53d8\u91cf\u3002</li> </ol> </li> </ul> <p>Info</p> <p>\u540e\u9762\u63d0\u5230\u7684\u6837\u672c\u5747\u6307\u7b80\u5355\u968f\u673a\u6837\u672c\u3002</p> <p>(1)\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(n\\) \u7684\u6837\u672c \\((X_1,X_2,\\cdots,X_n)\\) \u662f\u6307 \\(n\\) \u4e2a\u72ec\u7acb\u4e0e\u603b\u4f53\u5206\u5e03\u76f8\u540c\u7684\u968f\u673a\u53d8\u91cf\u3002</p> <p>(2)\u4e00\u65e6\u5bf9\u6837\u672c\u8fdb\u884c\u89c2\u5bdf\uff0c\u5f97\u5230\u7684\u5b9e\u9645\u6570\u503c \\((x_1,x_2,\\cdots,x_n)\\) \u79f0\u4e3a\u6837\u672c\u89c2\u5bdf\u503c(\u6216\u6837\u672c\u503c)\u3002</p> <p>(3)\u4e24\u6b21\u89c2\u5bdf\uff0c\u6837\u672c\u503c\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u3002</p> <ul> <li>\u82e5\u603b\u4f53 \\(X\\) \u5177\u6709\u6982\u7387\u5bc6\u5ea6 \\(f(x)\\) , \u5219\u6837\u672c \\((X_1,X_2,\\cdots,X_n)\\) \u5177\u6709\u8054\u5408\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff1a \\(f_n(x_1,x_2,\\cdots,x_n) = \\prod\\limits_{i=1}^n f(x_i)\\) </li> </ul> \u5173\u4e8e\u4e0a\u8ff0\u8054\u5408\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 <p>\u7531\u4e8e\u6837\u672c\u4e3a\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c\u4e5f\u5373\u72ec\u7acb\u540c\u5206\u5e03\u3002\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u76f8\u4e58\u5f97\u5230\u8054\u5408\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_2","title":"\u7edf\u8ba1\u91cf\uff1a","text":"<p>\u6837\u672c\u7684\u4e0d\u542b\u4efb\u4f55\u672a\u77e5\u53c2\u6570\u7684\u51fd\u6570\u3002</p> <p>\u8bbe \\((X_1,X_2,\\dots,X_n)\\) \u4e3a\u6837\u672c\uff0c\u82e5 \\(g(X_1,X_2,\\dots,X_n)\\) \u4e0d\u542b\u4efb\u4f55\u672a\u77e5\u53c2\u6570\uff0c\u5219\u79f0 \\(g(X_1,X_2,\\dots,X_n)\\) \u4e3a\u7edf\u8ba1\u91cf\u3002</p> <p>\u5e38\u7528\u7edf\u8ba1\u91cf\uff1a</p> <ol> <li>\u6837\u672c\u5747\u503c\uff1a \\(\\overline{X} = \\frac{1}{n}\\sum\\limits_{i=1}^n X_i\\)</li> <li>\u6837\u672c\u65b9\u5dee\uff1a \\(S^2 = \\frac{1}{n-1}\\sum\\limits_{i=1}^n (X_i - \\overline{X})^2\\)</li> <li>\u6837\u672c\u6807\u51c6\u5dee\uff1a \\(S = \\sqrt{S^2}\\)</li> <li>\u6837\u672c \\(k\\) \u9636\u77e9\uff1a \\(A_k = \\frac{1}{n}\\sum\\limits_{i=1}^n X_i^k\\)</li> <li>\u6837\u672c \\(k\\) \u9636\u4e2d\u5fc3\u77e9\uff1a \\(B_k = \\frac{1}{n}\\sum\\limits_{i=1}^n (X_i - \\overline{X})^k\\ ,k=1,2,\\dots\\)</li> </ol> Question <p>\u8bbe \\(X\\) \u4e3a\u603b\u4f53\uff0c\\(X_1,X_2,\\cdots,X_n\\) \u662f\u6837\u672c\uff0c \\(E(X) = \\mu\\) \u5b58\u5728\uff0c\u5219 \\(\\overline{X} = \\mu\\) \u5bf9\u5417\uff1f</p> Answer <p>\u4e0d\u5bf9\u3002</p> <p>\\(E(X) = \\mu\\) \u662f\u4e00\u4e2a\u6570\uff0c\u53ef\u80fd\u5df2\u77e5\uff0c\u53ef\u80fd\u672a\u77e5\uff1b</p> <p>\\(\\overline{X}\\) \u662f\u968f\u673a\u53d8\u91cf\uff0c\u4f9d\u8d56\u4e8e\u6837\u672c\u503c\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u6837\u672c\u503c\uff0c\\(\\overline{X}\\) \u7684\u53d6\u503c\u53ef\u80fd\u4e0d\u4e00\u6837\u3002</p> <p>Info</p> <ol> <li> <p>\u7528\u6837\u672c\u5747\u503c\u4f30\u8ba1\u603b\u4f53\u5747\u503c\uff0c\u53ef\u80fd\u4f30\u8ba1\u8fc7\u9ad8\uff0c\u4e5f\u53ef\u80fd\u4f30\u8ba1\u8fc7\u4f4e\u3002\u6240\u6709\u6837\u672c\u5747\u503c\u7684\u5e73\u5747\u503c\u6070\u597d\u662f\u603b\u4f53\u5747\u503c\u3002(\u65e0\u504f)</p> </li> <li> <p>\u603b\u4f53\u65b9\u5dee \\(\\sigma^2\\) \u7684\u4f30\u8ba1\u53ef\u4ee5\u7528 \\(S^2\\) \uff0c\u4e5f\u53ef\u4ee5\u7528 \\(B_2\\) \u3002\u4f46\u5f53 \\(\\sigma^2 &gt; 0\\) \u65f6\uff0c\\(E(S^2) = \\sigma^2,E(B_2) \\neq \\sigma^2\\) \u6240\u4ee5 \\(S^2\\) \u662f\u65e0\u504f\u7684\uff0c \\(B_2\\) \u662f\u6709\u504f\u7684\u3002</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_3","title":"\u4e09\u5927\u5206\u5e03","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#chi2-","title":"\\(\\chi^2\\)-\u5206\u5e03/\u5361\u65b9\u5206\u5e03","text":"<p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X_1,\\dots,X_n\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u4e14\u90fd\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03 \\(N(0,1)\\) \uff0c\u5219\u79f0\u968f\u673a\u53d8\u91cf \\(\\chi^2 = \\sum\\limits_{i=1}^n X_i^2\\) (1) </p> <p>\u670d\u4ece\u81ea\u7531\u5ea6\u4e3a \\(n\\) \u7684 \\(\\chi^2\\)-\u5206\u5e03\uff0c\u8bb0\u4e3a \\(\\chi^2 \\sim \\chi^2(n)\\) \u3002</p> <p>\u81ea\u7531\u5ea6\u6307(1)\u5f0f\u53f3\u7aef\u5305\u542b\u7684\u72ec\u7acb\u53d8\u91cf\u7684\u4e2a\u6570\u3002</p> <p>\\(\\chi^2\\)-\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a(\u4e0d\u8981\u6c42)\uff1a</p> \\[f(x) = \\begin{cases} \\frac{1}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}x^{\\frac{n}{2}-1}e^{-\\frac{x}{2}} &amp; x &gt; 0 \\\\ 0 &amp; x \\leq 0 \\end{cases} \\ ,n &gt; 0\\] <p>\u5176\u4e2d \\(\\Gamma(\\alpha) = \\int_0^{+\\infty} x^{\\alpha-1}e^{-x}dx\\) \u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#chi2-_1","title":"\\(\\chi^2\\)-\u5206\u5e03\u7684\u6027\u8d28","text":"<ol> <li>\u8bbe \\(\\chi^2 \\sim \\chi^2(n)\\) \uff0c\u5219 \\(E(\\chi^2) = n\\) \uff0c \\(D(\\chi^2) = 2n\\) \u3002</li> </ol> \u8bc1\u660e <p>(1)</p> \\[E(X_i^2) =  D(X_i) + E^2(X_i) = 1\\] \\[E(\\chi^2) = E(\\sum\\limits_{i=1}^n X_i^2) = \\sum\\limits_{i=1}^n E(X_i^2) = n\\] <p>(2)</p> \\[D(\\chi_i^2) = E(\\chi_i^4) - E^2(\\chi_i^2)\\] \\[E(\\chi_i^4) = \\int_0^{+\\infty} x^4 \\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2}{2}}dx = 3\\] \\[\\therefore D(\\chi_i^2) = 2\\] \\[\\therefore D(\\chi^2) = 2n\\] <ol> <li> <p>\\(\\chi^2\\)\u5206\u5e03\u7684\u53ef\u52a0\u6027\uff1a</p> <p>\u8bbe \\(Y_1 \\sim \\chi^2(n_1)\\) \uff0c \\(Y_2 \\sim \\chi^2(n_2)\\) \uff0c\u4e14 \\(Y_1\\) \uff0c \\(Y_2\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u5219 \\(Y_1 + Y_2 \\sim \\chi^2(n_1 + n_2)\\) \u3002</p> <p>\u8bbe \\(Y_1,\\dots,Y_m\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u4e14 \\(Y_i \\sim \\chi^2(n_i)\\) \uff0c\u5219 \\(\\sum\\limits_{i=1}^m Y_i \\sim \\chi^2(\\sum\\limits_{i=1}^m n_i)\\) \u3002</p> </li> <li> <p>\\(\\chi^2_\\alpha(n)\\) \u4e3a \\(\\chi^2(n)\\)\u5206\u5e03\u7684\u4e0a \\(\\alpha\\) \u5206\u4f4d\u6570\uff0c\u5373\u7ed9\u5b9a \\(\\alpha\\) , \\(0&lt;\\alpha&lt;1\\) ,\u6ee1\u8db3 \\(P(\\chi^2 &gt; \\chi^2_\\alpha(n)) = \\alpha\\) \u3002</p> </li> </ol> $\\chi^2$ \u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 $\\chi^2$ \u5206\u5e03\u7684\u4e0a $\\alpha$ \u5206\u4f4d\u6570 $\\chi^2$ \u5206\u5e03\u7684\u4e0a $\\alpha$ \u5206\u4f4d\u6570\u8868 Question <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu,\\sigma^2)\\) \uff0c \\(\\mu , \\sigma^2\\) \u5df2\u77e5\u3002 \\(X_1,\\dots,X_n\\) \u662f\u6765\u81ea\u603b\u4f53 \\(X\\) \u7684\u6837\u672c\uff0c\u6c42\u7edf\u8ba1\u91cf \\(\\chi^2 = \\frac{1}{\\sigma^2}\\sum\\limits_{i=1}^n (X_i - \\mu)^2\\) \u7684\u5206\u5e03\u3002</p> Answer <p>\u4f5c\u53d8\u6362 \\(Y_i = \\frac{X_i - \\mu}{\\sigma}\\) \uff0c\u5219 \\(Y_i \\sim N(0,1)\\) \uff0c\u4e14 \\(Y_1,\\dots,Y_n\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u5219 \\(\\chi^2 = \\sum\\limits_{i=1}^n Y_i^2 \\sim \\chi^2(n)\\) \u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#t-","title":"\\(t\\)-\u5206\u5e03/\u5b66\u751f\u6c0f\u5206\u5e03","text":"<p>\u8bbe \\(X \\sim N(0,1)\\) \uff0c \\(Y \\sim \\chi^2(n)\\) \uff0c\u4e14 \\(X\\) \uff0c \\(Y\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u5219\u79f0\u968f\u673a\u53d8\u91cf </p> \\[T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}\\] <p>\u670d\u4ece\u81ea\u7531\u5ea6\u4e3a \\(n\\) \u7684 \\(t\\)-\u5206\u5e03\uff0c\u8bb0\u4e3a \\(T \\sim t(n)\\) \u3002</p> <p>\\(t\\)-\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a(\u4e0d\u8981\u6c42)\uff1a</p> \\[f(t,n) = \\frac{\\Gamma(\\frac{n+1}{2})}{\\sqrt{n\\pi} \\cdot \\Gamma(\\frac{n}{2})}(1+\\frac{t^2}{n})^{-\\frac{n+1}{2}} \\ ,-\\infty &lt; t &lt; +\\infty\\] <p>\u5176\u4e2d\uff0c \\(\\Gamma(\\alpha) = \\int_0^{+\\infty} x^{\\alpha-1}e^{-x}dx\\) \u3002\\(\\Gamma(\\alpha +1) = \\alpha \\Gamma(\\alpha) = \\alpha !(if \\alpha \\in Z), \\Gamma(0.5) = \\sqrt{\\pi}\\)</p> $t(n)$ \u5206\u5e03\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 $t$ \u5206\u5e03\u7684\u4e0a $\\alpha$ \u5206\u4f4d\u6570 $t$ \u5206\u5e03\u7684\u4e0a $\\alpha$ \u5206\u4f4d\u6570\u8868"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#t-_1","title":"\\(t\\)-\u5206\u5e03\u7684\u6027\u8d28","text":"<ol> <li>\u8bbe \\(T \\sim t(n)\\) \u5f53 \\(n \\ge 2\\) \u65f6\uff0c \\(E(T) = 0\\) \uff0c \\(D(T) = \\frac{n}{n-2}\\) \uff0c \\(n &gt; 2\\) \u3002</li> </ol> \u8bc1\u660e \\[E(T) = \\int_{-\\infty}^{+\\infty} t \\cdot f_T(t)dt\\] <p>\u7531\u4e8e \\(t \\cdot f_T(t)\\) \u5728 \\(-\\infty\\) \u5230 \\(+\\infty\\) \u4e0a\u662f\u5947\u51fd\u6570\uff0c\u6240\u4ee5 \\(E(T) = 0\\) \u3002</p> \\[D(T) = E(T^2) - [E(T)]^2\\] \\[E(T^2) = \\int_{-\\infty}^{+\\infty} t^2 \\cdot f_T(t)dt = \\int_{-\\infty}^{+\\infty} \\frac{\\Gamma(\\frac{n+1}{2})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}(1+\\frac{t^2}{n})^{-\\frac{n+1}{2}} \\cdot t^2dt\\] <p>\u901a\u8fc7\u7279\u6b8a\u79ef\u5206\u516c\u5f0f\u8ba1\u7b97\u5f97\u5230 \\(D(T) = E(T^2) = \\frac{n}{n-2} \\ for \\ n&gt;2\\) \u3002</p> ATTENTION <p>\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7 \\(\\frac{E(X)}{E(Y)}\\) \u6765\u8ba1\u7b97 \\(E(T)\\) , \u8fd9\u662f\u56e0\u4e3a \\(T\\) \u662f\u7531 \\(X\\) \u548c \\(Y\\) \u7684\u6bd4\u503c\u5b9a\u4e49\u7684\u968f\u673a\u53d8\u91cf\uff0c\u800c \\(X\\) \u4e0e \\(Y\\) \u662f\u975e\u7ebf\u6027\u53d8\u6362\u7684\u3002</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u80fd\u591f\u76f4\u63a5\u76f8\u9664\u7684\u60c5\u51b5\u975e\u5e38\u6709\u9650\uff0c\u9700\u8981\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\uff1a</p> <p>(1) \\(X\\) \u548c \\(Y\\) \u76f8\u4e92\u72ec\u7acb\uff1b</p> <p>(2) \\(Y\\) \u59cb\u7ec8\u975e\u96f6\uff1b</p> <p>(3) \\(X\\) \u548c \\(Y\\) \u7684\u5206\u5e03\u8db3\u591f\u7b80\u5355\uff0c\u4f8b\u5982 \\(X\\) \u548c \\(Y\\) \u90fd\u662f\u5e38\u6570\u6216\u7ebf\u6027\u76f8\u5173( <code>e.g.</code> \\(Y=aX\\) )\u7684\u60c5\u51b5\u3002</p> <ol> <li>\u5f53 \\(n \\to +\\infty\\) (\u6216 \\(n \\ge 45\\) \u65f6\u53ef\u8ba4\u4e3a)\uff0c \\(t(n) \\to N(0,1)\\) \u3002</li> </ol> \u8bc1\u660e <p>\u8fd0\u7528\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u3002</p> <p>\u7531\u4e8e \\(E(Y) = n, D(Y) = 2n\\) \u53ef\u4ee5\u5f97\u5230 \\(\\sqrt{\\frac{Y}{n}} \\xrightarrow{P} 1 \\quad \\text{\u5f53 } n \\to \\infty\\) \u3002</p> <p>\u5bf9\u4e8e\u4efb\u610f\u56fa\u5b9a\u7684 \\(Z \\sim N(0,1)\\)\uff0c\u6709\uff1a</p> \\[T_n = \\frac{Z}{\\sqrt{Y/n}} \\to Z \\quad \\text{\u5f53 } n \\to \\infty\\] <ol> <li> <p>\u8bbe \\(T \\sim t(n)\\) \uff0c \\(N \\sim N(0,1)\\) \uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u7684 \\(n \\ge 1\\) , \u90fd\u5b58\u5728 \\(a_0 &gt; 0\\) \uff0c\u4f7f\u5f97 \\(P(|T| \\ge a_0) \\ge P(|N| \\ge a_0)\\) \u3002</p> </li> <li> <p>\\(t_{\\alpha}(n)\\) \u4e3a \\(t(n)\\) \u5206\u5e03\u7684\u4e0a \\(\\alpha\\) \u5206\u4f4d\u6570\uff0c\u5373\u7ed9\u5b9a \\(\\alpha\\) , \\(0&lt;\\alpha&lt;1\\) ,\u6ee1\u8db3\u6761\u4ef6 \\(\\int_{t_{\\alpha}(n)}^{+\\infty}f(t,n)dt = \\alpha\\) \u3002</p> </li> <li> <p>\\(t_{1-\\alpha}(n) = -t_{\\alpha}(n)\\) \u3002</p> </li> </ol> \u8bc1\u660e \\[\\forall 0&lt;\\alpha &lt; 1, P(T &gt; t_{\\alpha}(n)) = \\alpha\\] \\[P(T &lt; t_{\\alpha}(n)) = 1 - \\alpha\\] <p>\u7531\u4e8e \\(t\\) \u5206\u5e03\u7684\u5bf9\u79f0\u6027\u53ef\u5f97:</p> \\[P(T &lt; -t_{\\alpha}(n)) = \\alpha\\] \\[\\because P(T &gt; t_{1- \\alpha}(n)) = 1 - \\alpha\\] \\[\\therefore P(T &lt; t_{1- \\alpha}(n)) = \\alpha\\] \\[\\therefore t_{1-\\alpha}(n) = -t_{\\alpha}(n)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#f-","title":"\\(F\\)-\u5206\u5e03","text":"<p>\u8bbe \\(X \\sim \\chi^2(n_1)\\) \uff0c \\(Y \\sim \\chi^2(n_2)\\) \uff0c\u4e14 \\(X\\) \uff0c \\(Y\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u5219\u79f0\u968f\u673a\u53d8\u91cf </p> \\[F = \\frac{\\frac{X}{n_1}}{\\frac{Y}{n_2}}\\] <p>\u670d\u4ece\u81ea\u7531\u5ea6\u4e3a \\((n_1,n_2)\\) \u7684 \\(F\\)\u5206\u5e03\uff0c\u8bb0\u4e3a \\(F \\sim F(n_1,n_2)\\) \u3002</p> <p>\u5176\u4e2d \\(n_1\\) \u79f0\u4e3a\u7b2c\u4e00\u81ea\u7531\u5ea6\uff0c \\(n_2\\) \u79f0\u4e3a\u7b2c\u4e8c\u81ea\u7531\u5ea6\u3002</p> <p>\\(F(n_1,n_2)\\)\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a(\u4e0d\u8981\u6c42)\uff1a</p> \\[f(x,n_1,n_2) = \\begin{cases} \\frac{1}{B(\\frac{n_1}{2},\\frac{n_2}{2})}n_1^{\\frac{n_1}{2}}n_2^{\\frac{n_2}{2}}x^{\\frac{n_1}{2}-1}(n_2+n_1x)^{-\\frac{n_1+n_2}{2}} &amp; x &gt; 0 \\\\ 0 &amp; x \\le 0 \\end{cases}\\] <p>\u5176\u4e2d\uff0c \\(B(\\alpha,\\beta) = \\int_0^1 x^{\\alpha-1}(1-x)^{\\beta-1}dx = \\frac{\\Gamma(\\alpha)\\Gamma(\\beta)}{\\Gamma(\\alpha+\\beta)}\\) \u3002</p>  $F$ \u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 $F$ \u5206\u5e03\u7684\u4e0a $\\alpha$ \u5206\u4f4d\u6570 $F$ \u5206\u5e03\u7684\u4e0a $\\alpha$ \u5206\u4f4d\u6570\u8868 \u5173\u4e8e \\(F\\) \u5206\u5e03\u7684\u56fe\u50cf <p>F\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08PDF\uff09\u4f9d\u8d56\u4e8e\u4e24\u4e2a\u81ea\u7531\u5ea6\u53c2\u6570\uff0c\u5206\u522b\u8bb0\u4f5c \\(n_1\\) \u548c \\(n_2\\) \uff0c\u4e5f\u79f0\u4e3a\u5206\u5b50\u81ea\u7531\u5ea6\u548c\u5206\u6bcd\u81ea\u7531\u5ea6\u3002</p> <ol> <li> <p>\u968f\u7740 \\(n_1\\) \u589e\u52a0\uff1a</p> <ul> <li>\u5f53 \\(n_1\\) \u589e\u5927\u65f6\uff0cF\u5206\u5e03\u7684\u5cf0\u503c\u4f1a\u5411\u53f3\u79fb\u52a8\uff0c\u5e76\u4e14\u5206\u5e03\u53d8\u5f97\u66f4\u52a0\u96c6\u4e2d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u968f\u7740 \\(n_1\\) \u7684\u589e\u5927\uff0c\u5206\u5e03\u7684\u504f\u659c\u6027\u51cf\u5c0f\uff0c\u56fe\u5f62\u53d8\u5f97\u66f4\u5bf9\u79f0\u3002</li> <li>\u5bf9\u4e8e\u975e\u5e38\u5927\u7684 \\(n_1\\) \uff0cF\u5206\u5e03\u8d8b\u8fd1\u4e8e\u4e00\u4e2a\u6b63\u6001\u5206\u5e03\u3002</li> </ul> </li> <li> <p>\u968f\u7740 \\(n_2\\) \u589e\u52a0\uff1a</p> <ul> <li>\u5f53 \\(n_2\\) \u589e\u5927\u65f6\uff0cF\u5206\u5e03\u7684\u53f3\u5c3e\u53d8\u8f7b\uff0c\u5373\u6781\u7aef\u503c\u51fa\u73b0\u7684\u6982\u7387\u51cf\u5c11\uff0c\u5206\u5e03\u66f4\u52a0\u96c6\u4e2d\u5728\u5747\u503c\u9644\u8fd1\u3002</li> <li>\u7c7b\u4f3c\u5730\uff0c\u5f53 \\(n_2\\) \u53d8\u5f97\u975e\u5e38\u5927\u65f6\uff0cF\u5206\u5e03\u4e5f\u4f1a\u8d8b\u8fd1\u4e8e\u4e00\u4e2a\u6b63\u6001\u5206\u5e03\u3002</li> </ul> </li> <li> <p>\u5bf9\u4e8e\u8f83\u5c0f\u7684 \\(n_1\\) \u548c \\(n_2\\) \uff1a</p> <ul> <li>F\u5206\u5e03\u901a\u5e38\u4f1a\u6709\u8f83\u957f\u7684\u53f3\u5c3e\uff0c\u8868\u793a\u8f83\u5927\u7684\u65b9\u5dee\uff0c\u5206\u5e03\u66f4\u5206\u6563\uff0c\u5177\u6709\u8f83\u9ad8\u7684\u504f\u659c\u6027\u3002</li> <li>\u5206\u5e03\u7684\u5cf0\u503c\u8f83\u4f4e\uff0c\u56e0\u4e3a\u6982\u7387\u8d28\u91cf\u5206\u5e03\u5728\u8f83\u5bbd\u7684\u8303\u56f4\u5185\u3002</li> </ul> </li> <li> <p>\u603b\u4f53\u8d8b\u52bf\uff1a</p> <ul> <li>\u603b\u4f53\u6765\u8bf4\uff0c\u968f\u7740 \\(n_1\\) \u548c \\(n_2\\) \u90fd\u589e\u52a0\uff0cF\u5206\u5e03\u8d8b\u5411\u4e8e\u66f4\u7d27\u51d1\u3001\u66f4\u5bf9\u79f0\uff0c\u5e76\u4e14\u5176\u5f62\u6001\u9010\u6e10\u63a5\u8fd1\u6b63\u6001\u5206\u5e03\u3002</li> <li>\u4e24\u4e2a\u81ea\u7531\u5ea6\u90fd\u4e3a1\u7684\u60c5\u51b5\u4e0b\uff0cF\u5206\u5e03\u7b49\u4ef7\u4e8e\u67ef\u897f\u5206\u5e03\uff0c\u5b83\u6709\u4e00\u4e2a\u7279\u522b\u957f\u7684\u5c3e\u90e8\u5e76\u4e14\u6ca1\u6709\u5b9a\u4e49\u7684\u5e73\u5747\u503c\u6216\u65b9\u5dee\u3002</li> </ul> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#f-_1","title":"\\(F\\)-\u5206\u5e03\u7684\u6027\u8d28","text":"<ol> <li> <p>\u8bbe \\(F \\sim F(n_1,n_2)\\) ,\u5219 \\(F^{-1} \\sim F(n_2,n_1)\\) \u3002</p> </li> <li> <p>\u8bbe \\(X \\sim t(n)\\) \uff0c\u5219 \\(X^2 \\sim F(1,n)\\) \u3002</p> </li> <li> <p>\\(F_{\\alpha}(n_1,n_2)\\) \u4e3a \\(F(n_1,n_2)\\) \u7684\u4e0a \\(\\alpha\\) \u5206\u4f4d\u6570\uff0c\u5373\u7ed9\u5b9a \\(\\alpha\\) , \\(0&lt;\\alpha&lt;1\\) ,\u6ee1\u8db3\u6761\u4ef6 \\(\\int_{F_{\\alpha}(n_1,n_2)}^{\\infty}f(x,n_1,n_2)dx = \\alpha\\) \u3002</p> </li> <li> <p>\\(F_{1-\\alpha}(n_1,n_2) = \\frac{1}{F_{\\alpha}(n_2,n_1)}\\) \u3002</p> </li> </ol> \u8bc1\u660e \\[F \\sim F(n_1,n_2) \\Rightarrow F^{-1} \\sim F(n_2,n_1)\\] \\[\\alpha = P(F \\ge F_{\\alpha}(n_1,n_2)) = P(F^{-1} \\le F_{\\alpha}^{-1}(n_1,n_2)) = 1 - P(F^{-1} &gt; F_{\\alpha}^{-1}(n_1,n_2))\\] \\[\\Rightarrow P(F^{-1} &gt; F_{\\alpha}^{-1}(n_1,n_2)) = 1 - \\alpha\\] \\[\\because F^{-1} \\sim F(n_2,n_1)\\] \\[\\therefore F_{1-\\alpha}(n_2,n_1) = \\frac{1}{F_{\\alpha}(n_1,n_2)}\\] \\[\\therefore F_{1-\\alpha}(n_1,n_2) = \\frac{1}{F_{\\alpha}(n_2,n_1)}\\] Question <p>\\(X,Y,Z\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u5747\u670d\u4ece \\(N(0,1)\\) \uff0c\u5219</p> <p>(1) \\(X^2+Y^2+Z^2\\) \u7684\u5206\u5e03\u662f\u4ec0\u4e48\uff1f</p> <p>(2) \\(\\frac{X}{\\sqrt{Y^2+Z^2}}\\) \u7684\u5206\u5e03\u662f\u4ec0\u4e48\uff1f</p> <p>(3) \\(\\frac{2X^2}{Y^2+Z^2}\\) \u7684\u5206\u5e03\u662f\u4ec0\u4e48\uff1f</p> Answer <p>(1) \\(X^2+Y^2+Z^2 \\sim \\chi^2(3)\\) \u3002</p> <p>(2) \\(\\frac{X}{\\frac{\\sqrt{Y^2+Z^2}}{2}} \\sim t(2)\\) \u3002</p> <p>(3) \\(\\frac{2X^2}{Y^2+Z^2} \\sim F(1,2)\\) \u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_4","title":"\u5355\u4e2a\u6b63\u6001\u603b\u4f53\u7684\u62bd\u6837\u5206\u5e03","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_5","title":"\u5b9a\u7406\u4e00","text":"<p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu,\\sigma^2)\\) \uff0c \\(X_1,X_2,\\cdots,X_n\\) \u662f\u6837\u672c\uff0c\u6837\u672c\u5747\u503c \\(\\overline{X} = \\frac{1}{n}\\sum\\limits_{i=1}^nX_i\\) , \u6837\u672c\u65b9\u5dee \\(S^2 = \\frac{1}{n-1}\\sum\\limits_{i=1}^n(X_i-\\overline{X})^2\\) \uff0c\u5219</p> <ol> <li> \\[\\overline{X} \\sim N(\\mu,\\frac{\\sigma^2}{n})\\] \\[\\frac{\\overline{X}-\\mu}{\\frac{\\sigma}{\\sqrt{n}}} \\sim N(0,1)\\] </li> <li> <p>\\(\\frac{(n-1)S^2}{\\sigma^2} \\sim \\chi^2(n-1)\\) \u4e14 \\(\\overline{X}\\) \u4e0e \\(S^2\\) \u76f8\u4e92\u72ec\u7acb\u3002</p> </li> </ol> <p>\u76f4\u89c2\u7406\u89e3</p> <p>\u8fd9\u91cc\u5c31\u6d89\u53ca\u5230\u5bf9\u81ea\u7531\u5ea6\u7684\u7406\u89e3\u4e86\u3002\u8ba9\u6211\u4eec\u5148\u770b\u770b\u5bf9\u81ea\u7531\u5ea6\u7684\u5b9a\u4e49\u3002</p> <p>\u81ea\u7531\u5ea6\uff1a\u662f\u6307\u5f53\u4ee5\u6837\u672c\u7684\u7edf\u8ba1\u91cf\u6765\u4f30\u8ba1\u603b\u4f53\u7684\u53c2\u6570\u65f6\uff0c\u6837\u672c\u4e2d\u72ec\u7acb\u6216\u80fd\u81ea\u7531\u53d8\u5316\u7684\u6570\u636e\u7684\u4e2a\u6570\uff0c\u79f0\u4e3a\u8be5\u7edf\u8ba1\u91cf\u7684\u81ea\u7531\u5ea6\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u81ea\u7531\u5ea6\u7b49\u4e8e\u72ec\u7acb\u53d8\u91cf\u51cf\u6389\u5176\u884d\u751f\u91cf\u6570\u3002\u4e5f\u80fd\u7406\u89e3\u4e3a\u81ea\u7531\u5ea6\u662f\u4e00\u4e2a\u968f\u673a\u5411\u91cf\u7684\u7ef4\u5ea6\u6570\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u5411\u91cf\u80fd\u88ab\u5b8c\u6574\u63cf\u8ff0\u6240\u9700\u7684\u6700\u5c11\u5355\u4f4d\u5411\u91cf\u6570\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u5bf9\u4e8e \\(\\sum\\limits_{i=1}^n(X_i-\\overline{X})\\) \uff0c\u53ef\u4ee5\u770b\u5230 \\(n-1\\) \u4e2a\u7ef4\u5ea6\u5373\u53ef\u63cf\u8ff0\u3002</p> <p>\u53ef\u4ee5\u60f3\u89c1\uff0c\u6837\u672c\u65b9\u5dee \\(S^2\\) \u53ea\u4f9d\u8d56\u4e8e\u6837\u672c\u6570\u636e\u7684\u504f\u5dee\u90e8\u5206\uff0c\u5373 \\((X_1-\\overline{X}),(X_2-\\overline{X}),\\cdots,(X_n-\\overline{X})\\) \uff0c\u800c\u4e0e \\(\\overline{X}\\) \u65e0\u5173\u3002\u6240\u4ee5 \\(\\overline{X}\\) \u4e0e \\(S^2\\) \u76f8\u4e92\u72ec\u7acb\u3002</p> <p>\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e0a\u8ff0\u4e24\u6761\u5b9a\u7406\u4e86\u3002</p> \u6b64\u5904\u9644\u4e0a\u8001\u5e08\u7ed9\u7684\u8bc1\u660e <p> </p> Question <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu,\\sigma^2)\\) , \\(X_1,X_2,\\cdots,X_n\\) \u662f\u6837\u672c\u3002</p> <p>(1) \\(\\frac{\\sum\\limits_{i=1}^n(X_i-\\overline{X})^2}{\\sigma^2}\\) \u670d\u4ece\u4ec0\u4e48\u5206\u5e03\uff1f</p> <p>(2) \\(\\frac{\\sum\\limits_{i=1}^n(\\overline{X}-\\mu)^2}{\\sigma^2}\\) \u670d\u4ece\u4ec0\u4e48\u5206\u5e03\uff1f</p> Answer <p>(1) \\(\\chi^2(n-1)\\)</p> <p>(2) \\(\\chi^2(n)\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_6","title":"\u5b9a\u7406\u4e8c","text":"<p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu,\\sigma^2)\\) \uff0c \\(X_1,X_2,\\cdots,X_n\\) \u662f\u6837\u672c\uff0c\u6837\u672c\u5747\u503c \\(\\overline{X} = \\frac{1}{n}\\sum\\limits_{i=1}^nX_i\\) , \u6837\u672c\u65b9\u5dee \\(S^2 = \\frac{1}{n-1}\\sum\\limits_{i=1}^n(X_i-\\overline{X})^2\\) \uff0c\u5219</p> \\[\\frac{\\overline{X} - \\mu}{\\frac{S}{\\sqrt{n}}} \\sim t(n-1)\\] \u8bc1\u660e \\[\\frac{\\overline{X} - \\mu}{\\frac{\\sigma}{\\sqrt{n}}} \\sim N(0,1)\\] \\[\\frac{(n-1)S^2}{\\sigma^2} \\sim \\chi^2(n-1)\\] \\[\\frac{\\overline{X} - \\mu}{\\frac{S}{\\sqrt{n}}} = \\frac{\\frac{\\overline{X} - \\mu}{\\frac{\\sigma}{\\sqrt{n}}}}{\\sqrt{\\frac{(n-1)S^2}{\\sigma^2}/(n-1)}} \\sim t(n-1)\\] Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u5747\u503c \\(\\mu\\) , \u65b9\u5dee \\(\\sigma^2\\) \u5b58\u5728\u3002 \\((X_1,\\dots,X_n)\\) \u662f\u53d6\u81ea\u603b\u4f53 \\(X\\) \u7684\u6837\u672c\uff0c \\(\\overline{X}\\) \u662f\u6837\u672c\u5747\u503c\uff0c \\(S^2\\) \u662f\u6837\u672c\u65b9\u5dee\u3002</p> <p>(1) \u6c42 \\(E(S^2)\\)</p> <p>(2) \u82e5 \\(X \\sim N(\\mu,\\sigma^2)\\) \uff0c\u6c42 \\(D(S^2)\\) .</p> Answer \\[\\sum\\limits_{i=1}^n(X_i-\\overline{X})^2 = \\sum\\limits_{i=1}^n(X_i^2-2X_i\\overline{X}+\\overline{X}^2) = \\sum\\limits_{i=1}^nX_i^2 - n\\overline{X}^2\\] \\[E(S^2) = E[\\frac{1}{n-1}\\sum\\limits_{i=1}^n(X_i-\\overline{X})^2] = \\frac{1}{n-1}[\\sum\\limits_{i=1}^nE(X_i^2) - nE(\\overline{X}^2)]\\] \\[= \\frac{1}{n-1}[\\sum\\limits_{i=1}^n(\\mu^2+\\sigma^2) - n(\\mu^2+\\frac{\\sigma^2}{n})] = \\sigma^2\\] \\[\\text{\u65e0\u504f\uff01}\\] <p>\u7531\u4e8e \\(\\frac{(n-1)S^2}{\\sigma^2} \\sim \\chi^2(n-1)\\) </p> \\[D[\\frac{(n-1)S^2}{\\sigma^2}] = 2(n-1)\\] \\[D(S^2) = \\frac{2\\sigma^4}{(n-1)}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_7","title":"\u4e24\u4e2a\u6b63\u6001\u603b\u4f53\u7684\u62bd\u6837\u5206\u5e03","text":"<p>\u8bbe\u6837\u672c \\((X_1,\\dots,X_{n_1})\\) \u6765\u81ea\u603b\u4f53 \\(X \\sim N(\\mu_1,\\sigma_1^2)\\) \uff0c\u6837\u672c \\((Y_1,\\dots,Y_{n_2})\\) \u6765\u81ea\u603b\u4f53 \\(Y \\sim N(\\mu_2,\\sigma_2^2)\\) \uff0c\u4e14\u4e24\u4e2a\u6837\u672c\u76f8\u4e92\u72ec\u7acb\u3002\u6837\u672c\u5747\u503c\u5206\u522b\u4e3a \\(\\overline{X}\\) , \\(\\overline{Y}\\) \uff0c\u6837\u672c\u65b9\u5dee\u5206\u522b\u4e3a \\(S_1^2\\) , \\(S_2^2\\) \u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_8","title":"\u62bd\u6837\u5206\u5e03\u4e00","text":"\\[F = \\frac{\\frac{S_1^2}{\\sigma_1^2}}{\\frac{S_2^2}{\\sigma_2^2}} = \\frac{\\frac{S_1^2}{S_2^2}}{\\frac{\\sigma_1^2}{\\sigma_2^2}} \\sim F(n_1-1,n_2-1)\\] \u8bc1\u660e \\[\\frac{S_1^2}{\\sigma_1^2} \\sim \\chi^2(n_1-1)\\] \\[\\frac{S_2^2}{\\sigma_2^2} \\sim \\chi^2(n_2-1)\\] \\[F = \\frac{\\frac{S_1^2}{\\sigma_1^2}}{\\frac{S_2^2}{\\sigma_2^2}} = \\frac{\\frac{\\chi_1^2}{n_1-1}}{\\frac{\\chi_2^2}{n_2-1}} \\sim F(n_1-1,n_2-1)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_9","title":"\u62bd\u6837\u5206\u5e03\u4e8c","text":"\\[\\frac{\\overline{X} - \\overline{Y} - (\\mu_1 - \\mu_2)}{\\sqrt{\\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}}} \\sim N(0,1)\\] \u8bc1\u660e \\[\\overline{X} - \\overline{Y} \\sim N(\\mu_1 - \\mu_2,\\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2})\\] \\[\\frac{\\overline{X} - \\overline{Y} - (\\mu_1 - \\mu_2)}{\\sqrt{\\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}}} \\sim N(0,1)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter6/#_10","title":"\u62bd\u6837\u5206\u5e03\u4e09","text":"<p>\u5f53 \\(\\sigma_1^2 = \\sigma_2^2 = \\sigma^2\\) \u65f6\uff0c</p> \\[\\frac{(\\overline{X} - \\overline{Y} - (\\mu_1 - \\mu_2))}{S_w\\sqrt{\\frac{1}{n_1} + \\frac{1}{n_2}}} \\sim t(n_1 + n_2 - 2)\\] <p>\u5176\u4e2d\uff0c \\(S_w^2 = \\frac{(n_1-1)S_1^2 + (n_2-1)S_2^2}{n_1 + n_2 - 2}\\) , \\(S_w = \\sqrt{S_w^2}\\) (\\(S_w\\) \u662f\u8054\u5408\u6837\u672c\u65b9\u5dee)</p> \u8bc1\u660e \\[\\frac{(n_1-1)S_1^2 + (n_2-1)S_2^2}{\\sigma^2} \\sim \\chi^2(n_1 + n_2 - 2)\\] \\[\\frac{(\\overline{X} - \\overline{Y} - (\\mu_1 - \\mu_2))}{\\sigma \\sqrt{\\frac{1}{n_1} + \\frac{1}{n_2}}} / \\sqrt{\\frac{(n_1-1)S_1^2 + (n_2-1)S_2^2}{\\sigma^2 (n_1 + n_2 -2)}} \\sim t(n_1 + n_2 - 2)\\] Thinking <p>\u82e5 \\(\\sigma^2\\) \u672a\u77e5\uff0c\u4e3a\u4ec0\u4e48\u7528 \\(S_w\\) \u6765\u4f30\u8ba1 \\(\\sigma^2\\) \u800c\u4e0d\u662f\u7528 \\(S_1^2\\) \u6216 \\(S_2^2\\) \u6765\u4f30\u8ba1 \\(\\sigma^2\\) \uff1f</p> \u89e3\u7b54 <p>\\(E(S_1^2) = \\sigma^2\\) , \\(E(S_2^2) = \\sigma^2\\) , \\(E(S_w^2) = \\sigma^2\\) \u90fd\u662f\u65e0\u504f\u7684\u3002</p> <p>\\(D(S_1^2) = \\frac{2\\sigma^4}{n_1-1}\\) , \\(D(S_2^2) = \\frac{2\\sigma^4}{n_2-1}\\) , \\(D(S_w^2) = \\frac{2\\sigma^4}{n_1 + n_2 - 2}\\)</p> <p>\\(D(S_w^2) &lt; D(S_1^2) , D(S_2^2)\\) \u4ece\u76f4\u89c2\u6765\u770b\uff0c \\(S_w\\) \u6bd4 \\(S_1\\) \u548c \\(S_2\\) \u5305\u542b\u66f4\u591a \\(\\sigma^2\\) \u7684\u4fe1\u606f\u3002</p> Question <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu, \\sigma^2)\\) \uff0c \\(X_1, X_2, \\cdots, X_5\\) \u662f\u6765\u53d6\u81ea \\(X\\) \u7684\u6837\u672c\uff0c \u8bbe \\(a,b\\) \u662f\u90fd\u4e0d\u4e3a\u96f6\u7684\u6570\u3002</p> <p>\u82e5 \\(a(X_1-X_2)^2 + b(2X_3 - X_4 - X_5)^2 \\sim \\chi^2(k)\\) , \u5219 \\(a,b,k\\) \u5404\u4e3a\u591a\u5c11\uff1f</p> Answer \\[\\frac{X_1 - X_2}{\\sqrt{2}\\sigma} \\sim N(0,1)\\] \\[\\frac{2X_3 - X_4 - X_5}{\\sqrt{6}\\sigma} \\sim N(0,1)\\] \\[\\therefore a = \\frac{1}{2\\sigma^2} , b = \\frac{1}{6\\sigma^2} , k = 2\\] ATTENTION <p>\u5173\u4e8e\u4e0a\u9762\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u70b9\u3002\u5176\u5b9e\u76f4\u89c2\u4e0a\u4e5f\u53ef\u4ee5\u611f\u89c9\u5f97\u5230\uff0c \\(2X_3\\) \u548c \\(X_3 + X_3\\) \u662f\u4e0d\u4e00\u6837\u7684\uff0c\u524d\u8005\u7684\u65b9\u5dee\u4f1a\u6bd4\u540e\u8005\u8981\u5927\u3002</p> Question <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu, \\sigma^2)\\) \uff0c \\(X_1, X_2, \\cdots, X_4\\) \u4e0e \\(Y_1, Y_2, \\cdots, Y_9\\) \u662f\u53d6\u81ea\u603b\u4f53 \\(X\\) \u7684\u4e24\u4e2a\u72ec\u7acb\u6837\u672c\uff0c \\(\\overline{X},S_1^2\\) \u548c \\(\\overline{Y},S_2^2\\) \u5206\u522b\u662f\u8fd9\u4e24\u4e2a\u6837\u672c\u7684\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\u3002</p> <p>\u6c42(1)\u82e5 \\(a\\frac{\\overline{X} - \\overline{Y}}{S_1} \\sim t(k)\\) , \u5219 \\(a,k\\) \u5206\u522b\u4e3a\u591a\u5c11\uff1f</p> <p>(2) \\(\\frac{\\sum\\limits_{i=1}^4 (X_i - \\mu)^2}{4S_2^2}\\) \u670d\u4ece\u4ec0\u4e48\u5206\u5e03\uff1f</p> Answer <p>(1) </p> \\[\\overline{X} - \\overline{Y} \\sim N(0,\\frac{13\\sigma^2}{36})\\] \\[\\frac{\\overline{X} - \\overline{Y}}{\\sqrt{\\frac{13\\sigma^2}{36}}} \\sim N(0,1)\\] \\[\\frac{3S_1^2}{\\sigma^2} \\sim \\chi^2(3)\\] \\[\\text{\u4e14} \\overline{X} - \\overline{Y} \\text{\u4e0e} S_1^2 \\text{\u76f8\u4e92\u72ec\u7acb}\\] \\[\\therefore a = \\pm \\frac{1}{\\sqrt{\\frac{13\\sigma^2}{36}}} , k = 3\\] <p>(2) </p> \\[\\frac{1}{\\sigma^2}\\sum\\limits_{i=1}^4 (X_i - \\mu)^2 \\sim \\chi^2(4)\\] \\[\\frac{8S_2^2}{\\sigma^2} \\sim \\chi^2(8)\\] \\[\\text{\u7531} F \\text{\u5206\u5e03\u7684\u5b9a\u4e49\u77e5}\\] \\[\\frac{\\sum\\limits_{i=1}^4 (X_i - \\mu)^2}{4S_2^2} \\sim F(4,8)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/","title":"Chapter 7 \u53c2\u6570\u4f30\u8ba1","text":"<p> \u7ea6 5714 \u4e2a\u5b57  2 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 29 \u5206\u949f</p> <p>\u8bbe\u603b\u4f53 \\(X\\) \u6709\u672a\u77e5\u53c2\u6570 \\(\\theta\\) , \\(X_1,\\dots,X_n\\) \u662f \\(X\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\u3002</p> <p>\u70b9\u4f30\u8ba1\u95ee\u9898\uff1a\u6784\u9020\u5408\u9002\u7684\u7edf\u8ba1\u91cf \\(\\hat{\\theta}=\\hat{\\theta}(X_1,\\dots,X_n)\\) \u7528\u6765\u4f30\u8ba1\u672a\u77e5\u53c2\u6570 \\(\\theta\\) \uff0c\u79f0 \\(\\hat{\\theta}\\) \u4e3a \\(\\theta\\) \u7684\u70b9\u4f30\u8ba1\u91cf\u3002</p> <p>\u5f53\u7ed9\u5b9a\u6837\u672c\u89c2\u5bdf\u503c \\(x_1,\\dots,x_n\\) \u65f6\uff0c\\(\\hat{\\theta}(x_1,\\dots,x_n)\\) \u4e3a \\(\\theta\\) \u7684\u70b9\u4f30\u8ba1\u503c\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_1","title":"\u77e9\u4f30\u8ba1\u6cd5","text":"<p>\u7edf\u8ba1\u601d\u60f3\uff1a\u7528\u6837\u672c\u77e9\u4f30\u8ba1\u603b\u4f53\u77e9\uff0c\u7528\u6837\u672c\u77e9\u7684\u51fd\u6570\u4f30\u8ba1\u603b\u4f53\u77e9\u7684\u51fd\u6570\u3002</p> <p>\u7406\u8bba\u4f9d\u636e\uff1a\u8f9b\u94a6\u5927\u6570\u5b9a\u5f8b\u548c\u4f9d\u6982\u7387\u6536\u655b\u7684\u6027\u8d28\u3002</p> <p>\u5047\u8bbe \\(\\mu_j = E(X^j)\\) \u5b58\u5728\uff0c \\(j=1,\\dots,k\\) \uff0c\u5219</p> \\[\\hat{\\mu}_j = A_j =\\frac{1}{n}\\sum_{i=1}^n X_i^j, j=1,\\dots,k\\] \\[\\hat{h}(\\mu_1,\\dots,\\mu_k) = h(A_1,\\dots,A_k)\\] <p>\u8bbe\u603b\u4f53\u6709 \\(k\\) \u4e2a\u672a\u77e5\u53c2\u6570 \\(\\theta_1,\\dots,\\theta_k\\) \uff0c \\(X_1,\\dots,X_n\\) \u662f\u6765\u81ea\u603b\u4f53\u7684\u6837\u672c\uff0c\u5047\u8bbe\u603b\u4f53\u7684\u524d \\(k\\) \u9636\u77e9\u5b58\u5728\uff0c\u77e9\u4f30\u8ba1\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u5efa\u7acb \\((\\theta_1,\\dots,\\theta_k)\\) \u4e0e \\((\\mu_1,\\dots,\\mu_k)\\) \u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u6c42\u603b\u4f53\u524d \\(k\\) \u9636\u77e9\u5173\u4e8e \\(k\\) \u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c \\(\\mu_j = E(X^i) = h_i(\\theta_1,\\dots,\\theta_k) , i=1,\\dots,k\\)</li> <li>\u6c42\u5404\u53c2\u6570\u5173\u4e8e \\(k\\) \u9636\u77e9\u7684\u53cd\u51fd\u6570\uff0c \\(\\theta_i = g_i(\\mu_1,\\dots,\\mu_k) , i=1,\\dots,k\\)</li> <li>\u4ee5\u6837\u672c\u5404\u9636\u77e9 \\(A_1,\\dots,A_k\\) \u4ee3\u66ff\u603b\u4f53\u5404\u9636\u77e9 \\(\\mu_1,\\dots,\\mu_k\\) \uff0c\u5f97\u5230\u53c2\u6570\u7684\u77e9\u4f30\u8ba1</li> </ol> \\[\\hat{\\theta}_i = g_i(A_1,\\dots,A_k) , i=1,\\dots,k\\] Question <p>\u73b0\u968f\u673a\u9009\u51fa100\u540d\u5b66\u751f,\u8ba1\u7b97\u5f97\u4ed6\u4eec\u7684\u5e73\u5747\u6210\u7ee9\u4e3a72.3\u5206,\u6807\u51c6\u5dee\u4e3a15.8\u5206.\u6c42\u603b\u4f53\u6807\u51c6\u5dee \\(\\sigma\\) \u7684\u77e9\u4f30\u8ba1\u503c.</p> Answer \\[\\begin{cases}\\mu_1 = E(X) = \\mu \\\\ \\mu_2 = E(X^2) = \\mu^2 + \\sigma^2 \\end{cases} \\Rightarrow \\begin{cases}\\mu = \\mu_1 \\\\ \\sigma = \\sqrt{\\mu_2 - \\mu_1^2} \\end{cases}\\] \\[\\because s^2 = \\frac{1}{n-1}\\sum\\limits_{i=1}^n (X_i - \\overline{X})^2, \\sigma^2 = \\frac{1}{n}\\sum\\limits_{i=1}^n (X_i - \\overline{X})^2\\] \\[\\Rightarrow \\begin{cases}\\hat{\\mu} = 72.3 \\\\ \\hat{\\sigma} = \\sqrt{A_2 - \\overline{X}^2} = \\sqrt{B_2} = \\sqrt{\\frac{99}{100} \\times 15.8^2} = 15.7 \\end{cases}\\] Question <p>\u8bbe\u603b\u4f53 \\(X \\sim B(1,p)\\) \uff0c \\(X_1,\\dots,X_n\\) \u662f\u6837\u672c\uff0c\u6c42 \\(p\\) \u7684\u77e9\u4f30\u8ba1\u91cf. (Something like \u6807\u8bb0\u91cd\u6355\u6cd5)</p> Answer \\[\\mu = E(X) = p\\] \\[\\hat{p} = \\overline{X}\\] <p>\u5373\u7528\u6837\u672c\u6bd4\u4f8b\u6765\u4f30\u8ba1\u603b\u4f53\u6bd4\u4f8b.</p> Question <p>(1) \u8bbe\u603b\u4f53\u7684\u5bc6\u5ea6\u4e3a: \\(f(x;\\theta) = \\begin{cases} \\sqrt{\\theta}x^{\\sqrt{\\theta}-1},&amp;0 \\le x \\le 1 \\\\ 0, &amp; \\text{otherwise}\\end{cases} , \\theta &gt; 0\\) \u672a\u77e5\uff0c\u5176\u4e2d \\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c\uff0c\u6c42 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u91cf.</p> <p>(2) \u82e5\u5df2\u83b7\u5f97 \\(n = 10\\) \u7684\u6837\u672c\u503c\u5982\u4e0b,</p> <p>0.43  0.01  0.30  0.04  0.54</p> <p>0.14  0.99  0.18  0.98  0.02</p> <p>\u6c42 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u503c.</p> Answer <ol> <li></li> </ol> \\[\\mu_1 = E(X) = \\int_0^1 x \\sqrt{\\theta} x^{\\sqrt{\\theta}-1} dx = \\frac{\\sqrt{\\theta}}{\\sqrt{\\theta}+1}\\] \\[\\theta = (\\frac{\\mu_1}{1 - \\mu_1})^2\\] \\[\\hat{\\theta} = (\\frac{\\overline{X}}{1-\\overline{X}})^2\\] <ol> <li></li> </ol> \\[\\overline{X} = \\frac{1}{10} \\sum\\limits_{i=1}^{10} X_i = 0.363\\] \\[\\hat{\\theta} = (\\frac{0.363}{1-0.363})^2 = 0.325\\] Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u670d\u4ece\u5747\u5300\u5206\u5e03 \\(U(a,b)\\) \uff0c\u5176\u4e2d \\(a,b\\) \u4e3a\u672a\u77e5\u53c2\u6570\uff0c \\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c\uff0c\u6c42 \\(a,b\\) \u7684\u77e9\u4f30\u8ba1\u91cf.</p> Answer <p>(1)\u6c42\u77e9\u5173\u4e8e\u53c2\u6570\u7684\u51fd\u6570</p> \\[\\mu_1 = E(X) = \\frac{a+b}{2}\\] \\[Var_2 = \\frac{(b-a)^2}{12}\\] <p>(2)\u6c42\u53c2\u6570\u5173\u4e8e\u77e9\u7684\u53cd\u51fd\u6570</p> \\[a = \\mu_1 - \\sqrt{3Var_2}\\] \\[b = \\mu_1 + \\sqrt{3Var_2}\\] <p>(3)\u4ee5\u6837\u672c\u77e9 \\(A_1 = \\overline{X}\\) \u4ee3\u66ff\u603b\u4f53\u77e9 \\(\\mu_1\\) \uff0c \\(B_2 = \\frac{1}{n}\\sum\\limits_{i=1}^{n}(X_i - \\overline{X})^2\\) \u4ee3\u66ff\u603b\u4f53\u65b9\u5dee \\(Var_2\\) \uff0c\u5f97\u5230\u53c2\u6570\u7684\u77e9\u4f30\u8ba1\u91cf</p> \\[\\hat{a} = \\overline{X} - \\sqrt{3B_2}\\] \\[\\hat{b} = \\overline{X} + \\sqrt{3B_2}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_2","title":"\u6781\u5927\u4f3c\u7136\u4f30\u8ba1","text":"<p>\u601d\u60f3:\u7528\u201c\u6700\u50cf\u201d \\(\\theta\\) \u771f\u503c\u7684\u503c\u53bb\u4f30\u8ba1 \\(\\theta\\) \u6362\u8a00\u4e4b\uff0c\u5728\u53c2\u6570\u7a7a\u95f4\u4e2d\u627e\u4e00\u4e2a \\(\\theta\\) \u4f7f\u5f97 \\(L(\\theta)\\) \u8fbe\u5230\u6700\u5927\u3002</p> <p>\u8bbe\u79bb\u6563\u578b\u603b\u4f53 \\(X \\sim p(x;\\theta)\\) \uff0c\\(\\theta \\in \\Theta\\) , \\(\\theta\\) \u672a\u77e5. \\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c\uff0c\u5176\u89c2\u5bdf\u503c\u4e3a \\(x_1,\\dots,x_n\\) \uff0c\u5219\u4e8b\u4ef6 \\(\\{X_1 = x_1 , \\dots , X_n = x_n\\}\\) \u53d1\u751f\u7684\u6982\u7387\u4e3a </p> <p>\u4f3c\u7136\u51fd\u6570 \uff1a \\(L(\\theta) = \\prod\\limits_{i=1}^{n} p(x_i;\\theta)\\) </p> <p>\u6781\u5927\u4f3c\u7136\u539f\u7406 \uff1a \\(L(\\hat{\\theta}(x_1,\\dots,x_n)) = \\max\\limits_{\\theta \\in \\Theta} L(\\theta)\\)</p> <p>\u79f0 \\(\\hat{\\theta}(x_1,\\dots,x_n)\\) \u4e3a \\(\\theta\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c\uff0c\u76f8\u5e94\u7edf\u8ba1\u91cf \\(\\hat{\\theta} = \\hat{\\theta}(X_1,\\dots,X_n)\\) \u4e3a \\(\\theta\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf(MLE).</p> <p>\u8fde\u7eed\u578b\u603b\u4f53 \\(X\\) \u6982\u7387\u5bc6\u5ea6\u4e3a \\(f(x;\\theta)\\) \uff0c\\(\\theta \\in \\Theta\\) \uff0c\\(\\theta\\) \u672a\u77e5. \\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c\uff0c\u5176\u89c2\u5bdf\u503c\u4e3a \\((x_1,\\dots,x_n)\\) \u90bb\u57df\u53d1\u751f\u7684\u6982\u7387\u4e3a</p> <p>\\(\\prod\\limits_{i=1}^{n} P(x_i &lt; X_i &lt; x_i + \\Delta x_i) \\approx \\prod\\limits_{i=1}^{n} f(x_i;\\theta) \\Delta x_i\\) , \\(\\Delta x_i\\) \u4e0e\u53c2\u6570 \\(\\theta\\) \u65e0\u5173.</p> <p>\u56e0\u6b64\uff0c\u4f3c\u7136\u51fd\u6570\u53d6\u4e3a \\(L(\\theta) = \\prod\\limits_{i=1}^{n} f(x_i;\\theta)\\)</p> <p>\u6781\u5927\u4f3c\u7136\u539f\u7406 \uff1a \\(L(\\hat{\\theta}(x_1,\\dots,x_n)) = \\max\\limits_{\\theta \\in \\Theta} L(\\theta)\\)</p> Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a:</p> \\[ \\left(\\begin{array}{cc}1&amp;2&amp;3\\\\ \\theta &amp; \\frac{\\theta}{2} &amp; 1-\\frac{3\\theta}{2}\\end{array}\\right)\\] <p>\u5176\u4e2d \\(0 &lt; \\theta &lt; \\frac{2}{3}\\) \uff0c\u73b0\u5f97\u5230\u6837\u672c\u89c2\u6d4b\u503c 2\uff0c3\uff0c2\uff0c1\uff0c3\uff0c\u6c42 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u503c\u4e0e\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c.</p> Answer <p>(1)\u77e9\u4f30\u8ba1:</p> \\[\\mu_1 = E(X) = 3 - \\frac{5\\theta}{2}\\] \\[\\hat{\\theta} = \\frac{2(3 - \\mu_1)}{5}\\] \\[\\overline{X} = 2.2 \\Rightarrow \\hat{\\theta} = 0.32\\] <p>(2)\u6781\u5927\u4f3c\u7136\u4f30\u8ba1:</p> \\[L(\\theta) = (\\frac{\\theta}{2}) \\cdot (1 - \\frac{3\\theta}{2}) \\cdot (\\frac{\\theta}{2}) \\cdot \\theta \\cdot (1-\\frac{3\\theta}{2}) = \\frac{1}{16} \\theta^3 (2 - 3 \\theta)^2\\] <p>\u53ef\u4ee5\u76f4\u63a5\u6c42\u5bfc\u6216\u662f\u53d6 \\(lnL(\\theta)\\) \u6c42\u5bfc\uff0c\u5f97\u5230 \\(\\hat{\\theta} = 0.4\\) .</p> <ul> <li> <p>\u8bf4\u660e\uff1a</p> <ol> <li> <p>\u672a\u77e5\u53c2\u6570\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a,\u8bbe\u4e3a \\(\\theta = (\\theta_1,\\dots,\\theta_k)\\) ;</p> </li> <li> <p>\u6c42 \\(L(\\theta)\\) \u7684\u6700\u5927\u503c\u65f6\uff0c\u53ef\u8f6c\u6362\u4e3a\u6c42 \\(\\ln L(\\theta)\\) \u7684\u6700\u5927\u503c, \\(\\ln L(\\theta)\\) \u79f0\u4e3a\u5bf9\u6570\u4f3c\u7136\u51fd\u6570.</p> </li> </ol> <p>\u901a\u5e38\u5229\u7528 \\(\\frac{\\partial \\ln L(\\theta)}{\\partial \\theta} = 0,i = 1,2,\\dots,k\\) \u89e3\u5f97 \\(\\hat{\\theta_i}, i = 1,2,\\dots,k\\) </p> <ol> <li> <p>\u82e5 \\(L(\\theta)\\) \u5173\u4e8e\u67d0\u4e2a \\(\\theta_i\\) \u662f\u5355\u8c03\u7684\uff0c\u5219 \\(\\theta_i\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u5728\u5176\u8fb9\u754c\u53d6\u5f97\uff1b</p> </li> <li> <p>\u82e5 \\(\\hat{\\theta}\\) \u662f \\(\\theta\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\uff0c\u5219 \\(g(\\theta)\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u4e3a \\(g(\\hat{\\theta})\\) .</p> </li> </ol> </li> </ul> Question <p>(1) \u8bbe\u603b\u4f53\u7684\u5bc6\u5ea6\u4e3a: \\(f(x;\\theta) = \\begin{cases} \\sqrt{\\theta}x^{\\sqrt{\\theta}-1},&amp;0 \\le x \\le 1 \\\\ 0, &amp; \\text{otherwise}\\end{cases} , \\theta &gt; 0\\) \u672a\u77e5\uff0c\u5176\u4e2d \\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c\uff0c\u6c42 \\(\\theta\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c.</p> <p>(2)\u82e5\u5df2\u83b7\u5f97 \\(n = 10\\) \u7684\u6837\u672c\u503c\u5982\u4e0b,</p> <p>0.43  0.01  0.30  0.04  0.54</p> <p>0.14  0.99  0.18  0.98  0.02</p> <p>\u6c42 \\(\\theta\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c</p> Answer <ol> <li></li> </ol> \\[L(\\theta) = \\prod_{i=1}^{n} f(x_i;\\theta) = \\theta^{\\frac{n}{2}} (\\prod\\limits_{i=1}^{n} x_i)^{\\sqrt{\\theta}-1}\\] \\[\\frac{\\partial \\ln L(\\theta)}{\\partial \\theta} = \\frac{n}{2} \\cdot \\frac{1}{\\theta} + \\frac{1}{2\\sqrt{\\theta}} \\sum\\limits_{i=1}^{n} \\ln x_i = 0\\] \\[\\Rightarrow \\frac{n}{\\sqrt{\\theta}} = - \\sum\\limits_{i=1}^{n} \\ln x_i\\] <p>\\(\\theta\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf\uff1a \\(\\hat{\\theta} = \\frac{n^2}{(\\sum\\limits_{i=1}^{n} \\ln x_i)^2}\\)</p> <ol> <li></li> </ol> <p>\u4ee3\u5165 \\(n = 10\\) \u7684\u6837\u672c\u503c\uff0c\u5f97 \\(\\hat{\\theta} = 0.305\\) .</p> Question <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu,\\sigma^2)\\) \uff0c\u5176\u4e2d \\(\\mu\\) \u548c \\(\\sigma^2\\) \u5747\u672a\u77e5\uff0c\\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c\uff0c\u6c42 \\(\\mu\\) \u548c \\(\\sigma^2\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c.</p> Answer <p>\u8fc7\u7a0b\u7701\u7565\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u7ed3\u679c\u3002</p> \\[\\hat{\\mu} = \\overline{X}\\] \\[\\hat{\\sigma}^2 = B_2\\] Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u670d\u4ece\u5747\u5300\u5206\u5e03 \\(U(0,\\theta)\\) \uff0c\u5176\u4e2d \\(\\theta\\) \u672a\u77e5\uff0c\\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c\uff0c\u6c42 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u548c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c.</p> Answer <p>(1) \u77e9\u4f30\u8ba1</p> \\[E(X) = \\frac{\\theta}{2}\\] \\[\\hat{\\theta} = 2\\overline{X}\\] <p>(2) \u6781\u5927\u4f3c\u7136\u4f30\u8ba1</p> <p>\u5f53 \\(0 \\le x_1, \\dots, x_n \\le \\theta\\) \u65f6\uff0c\u4f3c\u7136\u51fd\u6570\u4e3a</p> \\[L(\\theta) = \\prod_{i=1}^{n} \\frac{1}{\\theta} = \\frac{1}{\\theta^n}\\] <p>\u53ef\u4ee5\u53d1\u73b0\u5173\u4e8e \\(\\theta&gt;0\\) \u7684\u4f3c\u7136\u51fd\u6570\u662f\u5355\u8c03\u9012\u51cf\u7684</p> <p>\u800c \\(\\theta\\) \u7684\u53d6\u503c\u8303\u56f4\u662f \\(\\theta = \\max\\{x_1,\\dots,x_n\\}\\)</p> \\[\\therefore \\hat{\\theta} = \\max\\{X_1,\\dots,X_n\\}\\] Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u670d\u4ece\u5747\u5300\u5206\u5e03 \\(U(a,b)\\) \uff0c\u5176\u4e2d \\(a\\) \u548c \\(b\\) \u5747\u672a\u77e5\uff0c\\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c</p> <p>(1)\u6c42 \\(a\\) \u548c \\(b\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1.</p> <p>(2)\u6c42 \\(E(X)\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1.</p> <p>(3)\u82e5\u5df2\u83b7\u5f97 \\(n = 5\\) \u7684\u6837\u672c\u503c\u5982\u4e0b\uff0c</p> <p>0.34  0.59  0.16  0.96  0.84</p> <p>\u6c42 \\(a\\) , \\(b\\) , \\(E(X)\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c.</p> Answer <p> </p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_3","title":"\u4f30\u8ba1\u91cf\u7684\u8bc4\u4ef7\u51c6\u5219","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_4","title":"\u56db\u6761\u8bc4\u4ef7\u51c6\u5219\uff1a","text":"<ol> <li> <p>\u65e0\u504f\u6027\u51c6\u5219</p> </li> <li> <p>\u6709\u6548\u6027\u51c6\u5219 (\u4ec5\u5728\u65e0\u504f\u4f30\u8ba1\u91cf\u4e2d\u8003\u8651)</p> </li> <li> <p>\u5747\u65b9\u8bef\u5dee\u51c6\u5219</p> </li> <li> <p>\u76f8\u5408\u6027\u51c6\u5219</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_5","title":"\u65e0\u504f\u6027\u51c6\u5219","text":"<p>\u82e5\u53c2\u6570 \\(\\theta\\) \u7684\u4f30\u8ba1\u91cf \\(\\hat{\\theta} = \\hat{\\theta}(X_1,X_2,\\cdots,X_n)\\) \u6ee1\u8db3 \\(E(\\hat{\\theta}) = \\theta\\) \uff0c\u5219\u79f0 \\(\\hat{\\theta}\\) \u4e3a \\(\\theta\\) \u7684\u65e0\u504f\u4f30\u8ba1\u91cf.</p> <p>\u82e5 \\(E(\\hat{\\theta}) \\neq \\theta\\) \uff0c\u90a3\u4e48 \\(E(\\hat{\\theta}) - \\theta\\) \u79f0\u4e3a\u4f30\u8ba1\u91cf \\(\\hat{\\theta}\\) \u7684\u504f\u5dee.</p> <p>\u82e5 \\(\\mathop{lim}\\limits_{n \\to \\infty} E(\\hat{\\theta}) = \\theta\\) \uff0c\u5219\u79f0 \\(\\hat{\\theta}\\) \u4e3a \\(\\theta\\) \u7684\u6e10\u8fdb\u65e0\u504f\u4f30\u8ba1\u91cf.</p> <ul> <li>\u65e0\u504f\u6027\u7684\u7edf\u8ba1\u610f\u4e49\u662f\u6307\u5728\u5927\u91cf\u91cd\u590d\u8bd5\u9a8c\u4e0b\uff0c\u7531 \\(\\hat{\\theta}(X_1,\\cdots.X_n)\\) \u6240\u4f5c\u7684\u4f30\u8ba1\u503c\u7684\u5e73\u5747\u6070\u662f \\(\\theta\\) \uff0c\u4ece\u800c\u65e0\u504f\u6027\u4fdd\u8bc1\u4e86 \\(\\hat{\\theta}\\) \u6ca1\u6709\u7cfb\u7edf\u8bef\u5dee.</li> </ul> Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u4e00\u9636\u548c\u4e8c\u9636\u77e9\u5b58\u5728\uff0c \\(E(X) = \\mu\\) , \\(D(X) = \\sigma^2\\) </p> <p>(1)\u8bc1\u660e\uff1a \u6837\u672c\u5747\u503c \\(\\overline{X}\\) \u548c\u6837\u672c\u65b9\u5dee \\(S^2\\) \u5206\u522b\u662f \\(\\mu\\) \u548c \\(\\sigma^2\\) \u7684\u65e0\u504f\u4f30\u8ba1.</p> <p>(2)\u5224\u65ad\uff1a \\(B_2\\) \u662f\u5426\u4e3a \\(\\sigma^2\\) \u7684\u65e0\u504f\u4f30\u8ba1\uff1f\u662f\u5426\u4e3a \\(\\sigma^2\\) \u7684\u6e10\u8fdb\u65e0\u504f\u4f30\u8ba1\uff1f</p> Answer <p>(1) \u56e0\u4e3a \\(X_1,\\cdots,X_n\\) \u4e0e \\(X\\) \u540c\u5206\u5e03\uff0c\u6240\u4ee5</p> \\[E(\\overline{X}) = E\\left(\\frac{1}{n}\\sum\\limits_{i=1}^n X_i\\right) = \\frac{1}{n}\\sum\\limits_{i=1}^n E(X_i) = \\mu\\] <p>\u6545 \\(\\overline{X}\\) \u662f \\(\\mu\\) \u7684\u65e0\u504f\u4f30\u8ba1.</p> \\[E(S^2) = E\\left(\\frac{1}{n-1}\\sum\\limits_{i=1}^n (X_i - \\overline{X})^2\\right) = \\frac{1}{n-1}\\sum\\limits_{i=1}^n E((X_i - \\overline{X})^2) = \\sigma^2\\] <p>\u6545 \\(S^2\\) \u662f \\(\\sigma^2\\) \u7684\u65e0\u504f\u4f30\u8ba1.</p> <p>(2) </p> \\[B_2 = \\frac{n-1}{n}S^2\\] \\[E(B_2) = \\frac{n-1}{n}E(S^2) = \\frac{n-1}{n}\\sigma^2 \\neq \\sigma^2\\] <p>\u6545 \\(B_2\\) \u4e0d\u662f \\(\\sigma^2\\) \u7684\u65e0\u504f\u4f30\u8ba1.</p> \\[\\mathop{lim}\\limits_{n \\to \\infty} E(B_2) = \\mathop{lim}\\limits_{n \\to \\infty} \\frac{n-1}{n}\\sigma^2 = \\sigma^2\\] <p>\u6545 \\(B_2\\) \u662f \\(\\sigma^2\\) \u7684\u6e10\u8fdb\u65e0\u504f\u4f30\u8ba1.</p> Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u670d\u4ece\u5747\u5300\u5206\u5e03 \\(U(0,\\theta)\\) \uff0c \\(X_1,\\cdots,X_n\\) \u662f\u6765\u81ea \\(X\\) \u7684\u6837\u672c\uff0c\\(\\theta\\) \u662f\u672a\u77e5\u53c2\u6570</p> <p>(1)\u6c42 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\uff0c\u5224\u65ad\u662f\u5426\u65e0\u504f</p> <p>(2)\u6c42 \\(\\theta\\) \u7684\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\uff0c\u5224\u65ad\u662f\u5426\u65e0\u504f</p> Answer <p>(1) \u77e9\u4f30\u8ba1</p> \\[\\mu_1 = E(X) = \\frac{\\theta}{2}\\] \\[\\Rightarrow \\theta = 2 \\mu_1 \\Rightarrow \\hat{\\theta} = 2\\overline{X}\\] \\[E(\\hat{\\theta}) = E(2\\overline{X}) = 2E(\\overline{X}) = 2\\mu = 2\\cdot\\frac{\\theta}{2} = \\theta\\] <p>\u6545 \\(\\hat{\\theta}\\) \u662f \\(\\theta\\) \u7684\u65e0\u504f\u4f30\u8ba1.</p> <p>(2) \u6700\u5927\u4f3c\u7136\u4f30\u8ba1</p> \\[L(\\theta) = \\prod\\limits_{i=1}^n \\frac{1}{\\theta}I(0 &lt; X_i &lt; \\theta)\\] \\[\\hat{\\theta_L} = X_{(n)} = max\\{X_1,\\cdots,X_n\\}\\] \\[F_{X_{(n)}}(x) = [F_X(x)]^n = \\begin{cases} 0, &amp; x &lt; 0 \\\\ (\\frac{x}{\\theta})^n, &amp; 0 \\leq x \\leq \\theta \\\\ 1, &amp; x &gt; \\theta \\end{cases}\\] \\[f_{X_{(n)}}(x) = \\begin{cases} n\\frac{x^{n-1}}{\\theta^n} ,&amp; 0 \\leq x \\leq \\theta \\\\ 0, &amp; x &lt; 0, x &gt; \\theta \\end{cases}\\] \\[E(\\hat{\\theta_L}) = E(X_{(n)}) = \\int_0^\\theta x f_{X_{(n)}}(x) dx = \\int_0^\\theta \\frac{n}{\\theta^n} x^{n} dx = \\frac{n}{n+1}\\theta \\neq \\theta\\] <p>\u6545 \\(\\hat{\\theta_L} = X_{(n)}\\) \u662f\u6709\u504f\u7684.</p> <p>\u7ea0\u504f\u65b9\u6cd5</p> <p>\u5982\u679c \\(E(\\hat{\\theta})  = a \\theta + b\\)\uff0c \\(\\theta \\in \\Theta\\) \uff0c \u5176\u4e2d \\(a,b\\) \u662f\u5e38\u6570\uff0c\u4e14 \\(a \\neq 0\\)\uff0c\u5219 \\(\\frac{1}{a}(\\hat{\\theta} - b)\\) \u662f \\(\\theta\\) \u7684\u65e0\u504f\u4f30\u8ba1.</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_6","title":"\u6709\u6548\u6027\u51c6\u5219","text":"<p>\u5b9a\u4e49\uff1a \u8bbe \\(\\hat{\\theta}_1,\\hat{\\theta}_2\\) \u662f\u53c2\u6570 \\(\\theta\\) \u7684\u4e24\u4e2a\u65e0\u504f\u4f30\u8ba1\uff0c\u82e5 \\(D(\\hat{\\theta}_1) \\leq D(\\hat{\\theta}_2)\\) \uff0c\u5bf9\u4e00\u5207 \\(\\theta \\in \\Theta\\) \u6210\u7acb\uff0c\u4e14\u4e0d\u7b49\u53f7\u81f3\u5c11\u5bf9\u67d0\u4e00 \\(\\theta \\in \\Theta\\) \u6210\u7acb\uff0c\u5219\u79f0 \\(\\hat{\\theta}_1\\) \u6bd4 \\(\\hat{\\theta}_2\\) \u6709\u6548.</p> <p>\u4e5f\u5373\uff1a\u65b9\u5dee\u8f83\u5c0f\u7684\u65e0\u504f\u4f30\u8ba1\u91cf\u662f\u4e00\u4e2a\u66f4\u6709\u6548\u7684\u4f30\u8ba1\u91cf\u3002</p> Question <p>\u8bbe\u603b\u4f53\u4e3a \\(X\\) , \\(E(X) = \\mu\\)\uff0c\\(D(X) = \\sigma^2\\)\uff0c \\(X_1,\\cdots,X_n\\) \u662f\u6837\u672c\uff0c\u5bf9 \\(1 \\le k \\le n\\) , \\(\\hat{\\theta}_k = \\frac{1}{k} \\sum\\limits_{i=1}^k X_i\\) \uff0c\u4e3a\u524d \\(k\\) \u4e2a\u6837\u672c\u7684\u6837\u672c\u5747\u503c\uff0c\u5219 \\(\\hat{\\theta}_k\\) \u662f \\(\\mu\\) \u7684\u65e0\u504f\u4f30\u8ba1.\u5224\u65ad \\(\\hat{\\theta}_1,\\hat{\\theta}_2,\\dots, \\hat{\\theta}_n\\) \u4e2d\u54ea\u4e2a\u6700\u6709\u6548\uff1f</p> Answer \\[D(\\hat{\\theta}_k) = \\frac{1}{k^2} D(\\sum\\limits_{i=1}^k X_i) = \\frac{\\sigma^2}{k}\\] <p>\u968f\u7740 \\(k\\) \u7684\u589e\u5927\uff0c\\(D(\\hat{\\theta}_k)\\) \u8d8a\u6765\u8d8a\u5c0f\uff0c\u6545 \\(\\hat{\\theta}_n\\) \u6700\u6709\u6548.</p> Question <p>\u8bbe\u603b\u4f53 \\(X \\sim U[0,\\theta]\\)\uff0c\\(X_1,\\cdots,X_n\\) \u662f\u6837\u672c\uff0c\u5df2\u77e5 \\(\\theta\\) \u7684\u4e24\u4e2a\u65e0\u504f\u4f30\u8ba1\u4e3a \\(\\hat{\\theta}_1 = 2\\overline{X}, \\hat{\\theta}_2 = \\frac{n+1}{n}X_{(n)}\\)\uff0c\u5224\u65ad\u54ea\u4e2a\u66f4\u6709\u6548\uff1f</p> Answer \\[D(\\hat{\\theta}_1) = D(2\\overline{X}) = \\frac{4}{n} \\cdot \\frac{\\theta^2}{12} = \\frac{\\theta^2}{3n}\\] \\[f_{X_{(n)}}(x) = \\frac{n}{\\theta^n} x^{n-1} ,0&lt;x&lt;\\theta\\] \\[E(X_{(n)}^2) = \\int_0^\\theta \\frac{nx^{n+1}}{\\theta^n} dx = \\frac{n}{n+2} \\theta^2\\] <p></p> \\[D(X_{(n)}) = E(X_{(n)}^2) - [E(X_{(n)})]^2 = \\frac{n}{n+2} \\theta^2 - \\left(\\frac{n+1}{n}\\theta\\right)^2 = \\frac{\\theta^2}{n(n+2)}\\] \\[D(\\hat{\\theta}_1) &gt; D(\\hat{\\theta}_2)\\] \\[\\therefore \\hat{\\theta}_2 \\text{\u66f4\u6709\u6548.}\\] \u8fd9\u4e24\u4e2a\u65e0\u504f\u4f30\u8ba1 <p>\u7b2c\u4e00\u4e2a\u662f\u57fa\u4e8e \\(E(X_i)\\) \u5f97\u5230\u7684\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u7684\u63a8\u5bfc\u5982\u4e0b:</p> <p>\u5bf9\u4e8e\u5747\u5300\u5206\u5e03 \\(U(0, \\theta)\\)\uff0c\\(X_i\\) \u7684\u7d2f\u79ef\u5206\u5e03\u51fd\u6570 (CDF) \u4e3a\uff1a \\(F(x; \\theta) = \\frac{x}{\\theta}, \\quad 0 \\leq x \\leq \\theta\\)</p> <p>\u6700\u5927\u6b21\u5e8f\u7edf\u8ba1\u91cf \\(X_{(n)}\\) \u7684 CDF \uff1a \\(F_{X_{(n)}}(x) = P(X_{(n)} \\leq x) = P(X_1 \\leq x, X_2 \\leq x, ..., X_n \\leq x)\\)</p> <p>\u7531\u4e8e \\(X_i\\) \u72ec\u7acb\u540c\u5206\u5e03\uff0c \\(F_{X_{(n)}}(x) = [F(x)]^n = \\left(\\frac{x}{\\theta}\\right)^n, \\quad 0 \\leq x \\leq \\theta\\)</p> <p>\u4e3a\u4e86\u5f97\u5230 \\(\\hat{\\theta}_2\\)\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97 \\(X_{(n)}\\) \u7684\u671f\u671b\u503c : \\(E[X_{(n)}] = \\int_0^\\theta x f_{X_{(n)}}(x) dx\\)</p> \\[\\because f_{X_{(n)}}(x) = \\frac{d}{dx}F_{X_{(n)}}(x) = n \\left(\\frac{x}{\\theta}\\right)^{n-1} \\cdot \\frac{1}{\\theta}\\] \\[= \\frac{n}{\\theta^n}x^{n-1}, \\quad 0 \\leq x \\leq \\theta\\] \\[E[X_{(n)}] = \\int_0^\\theta x \\cdot \\frac{n}{\\theta^n}x^{n-1} dx = \\frac{n}{\\theta^n} \\int_0^\\theta x^n dx\\] \\[= \\frac{n}{\\theta^n} \\cdot \\frac{\\theta^{n+1}}{n+1} = \\frac{n}{n+1}\\theta\\] \\[\\therefore \\hat{\\theta}_2 = \\frac{n+1}{n}X_{(n)}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_7","title":"\u5747\u65b9\u8bef\u5dee\u51c6\u5219","text":"<p>\u5b9a\u4e49 \uff1a</p> <p>\u8bbe \\(\\hat{\\theta}\\) \u662f \\(\\theta\\) \u7684\u70b9\u4f30\u8ba1\uff0c\u65b9\u5dee\u5b58\u5728\uff0c\u5219\u79f0 \\(E(\\hat{\\theta} - \\theta)^2\\) \u4e3a\u4f30\u8ba1\u91cf \\(\\hat{\\theta}\\) \u7684\u5747\u65b9\u8bef\u5dee\uff08Mean Square Error\uff0cMSE\uff09\uff0c\u8bb0\u4e3a \\(Mse(\\hat{\\theta})\\).</p> <p>\u82e5 \\(\\hat{\\theta}\\) \u662f \\(\\theta\\) \u7684\u65e0\u504f\u4f30\u8ba1\uff0c\u5219 \\(Mse(\\hat{\\theta}) = D(\\hat{\\theta})\\).</p> <p>Info</p> <p>\u5728\u5b9e\u9645\u5e94\u7528\u4e2d,\u5747\u65b9\u8bef\u5dee\u51c6\u5219\u6bd4\u65e0\u504f\u6027\u51c6\u5219\u66f4\u91cd\u8981.</p> Question <p>\u5229\u7528\u5747\u65b9\u8bef\u5dee\u51c6\u5219\uff0c\u5bf9\u7528\u6837\u672c\u65b9\u5dee \\(S^2\\) \u548c\u6837\u672c\u4e8c\u9636\u4e2d\u5fc3\u77e9 \\(B_2\\) \u5206\u522b\u4f30\u8ba1\u6b63\u6001\u603b\u4f53\u65b9\u5dee \\(\\sigma^2\\) \u65f6\u8fdb\u884c\u8bc4\u4ef7.</p> Answer <p>\u5728\u6b63\u6001\u603b\u4f53\u4e0b\uff0c</p> \\[\\frac{(n-1)S^2}{\\sigma^2} \\sim \\chi^2(n-1)\\] <p>\u53c8\u56e0\u4e3a \\(S^2\\) \u662f \\(\\sigma^2\\) \u7684\u65e0\u504f\u4f30\u8ba1\uff0c\u6240\u4ee5 </p> \\[Mse(S^2) = D(S^2) = \\frac{2\\sigma^4}{n-1}\\] <p>\u800c\u5bf9\u4e8e \\(B_2\\)\uff0c\u6709</p> \\[Mse(B_2) = E[(B_2 - \\sigma^2)^2] = D(B_2 - \\sigma^2) + [E(B_2) - \\sigma^2]^2 = D(B_2) + [E(B_2) - \\sigma^2]^2\\] \\[= D(\\frac{n-1}{n}S^2) + [E(\\frac{n-1}{n}S^2) - \\sigma^2]^2 = \\frac{2n-1}{n^2} \\sigma^4\\] <p>\u5f53 \\(n &gt; 1\\) \u65f6\u6709 \\(Mse(S^2) &gt; Mse(B_2)\\)</p> <p>\u56e0\u6b64\u5728\u5747\u65b9\u8bef\u5dee\u51c6\u5219\u4e0b\uff0c \\(B_2\\) \u4f18\u4e8e \\(S^2\\).</p> <p>Conclusion \uff1a\u5728\u6b63\u6001\u5206\u5e03\u4e0b\uff0c\\(D(S^2) = \\frac{2\\sigma^4}{n-1}\\)</p> \u8bc1\u660e \\[\\frac{(n-1)S^2}{\\sigma^2} \\sim \\chi^2(n-1)\\] \\[D(\\frac{(n-1)S^2}{\\sigma^2}) = 2(n-1)\\] \\[\\therefore D(S^2) = \\frac{2\\sigma^4}{n-1}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_8","title":"\u76f8\u5408\u6027\u51c6\u5219","text":"<p>\u5b9a\u4e49\uff1a\u8bbe \\(\\hat{\\theta}(X_1,\\cdots,X_n)\\) \u4e3a\u53c2\u6570 \\(\\theta\\) \u7684\u4f30\u8ba1\u91cf\uff0c\u82e5\u5bf9\u4e8e\u4efb\u610f \\(\\theta \\in \\Theta\\)\uff0c\u5f53 \\(n \\rightarrow +\\infty\\) \u65f6</p> \\[\\hat{\\theta_n} \\mathop{\\rightarrow}\\limits^p \\theta\\] <p>\u5373 \\(\\forall \\varepsilon &gt; 0\\)\uff0c\u6709 \\(\\mathop{lim}\\limits_{n \\rightarrow +\\infty} P(|\\hat{\\theta_n} - \\theta| \\ge \\varepsilon) = 0\\)\uff0c\u5219\u79f0 \\(\\hat{\\theta_n}\\) \u4e3a \\(\\theta\\) \u7684\u76f8\u5408\u4f30\u8ba1\u91cf\u6216\u4e00\u81f4\u4f30\u8ba1\u91cf.</p> <ul> <li>\u4e00\u81f4\u6027 \u968f\u7740\u6837\u672c\u5bb9\u91cf\u7684\u589e\u5927\uff0c\u4f30\u8ba1\u91cf\u8d8a\u6765\u8d8a\u63a5\u8fd1\u88ab\u4f30\u8ba1\u7684\u603b\u4f53\u53c2\u6570</li> </ul> <p>\\(A_1,\\dots,A_k\\) \u662f \\(\\mu_1,\\dots,\\mu_k\\) \u7684\u76f8\u5408\u4f30\u8ba1,\u5373 \\(A_i \\mathop{\\rightarrow}\\limits^p \\mu_i\\) \uff0c\u4e14 \\(g(\\mu_1,\\dots,\\mu_k)\\) \u662f\u8fde\u7eed\u51fd\u6570\uff0c\u5219</p> \\[g(A_1,\\dots,A_k) \\mathop{\\rightarrow}\\limits^p g(\\mu_1,\\dots,\\mu_k)\\] <p>\u5373 \\(g(A_1,\\dots,A_k)\\) \u4e5f\u662f \\(g(\\mu_1,\\dots,\\mu_k)\\) \u7684\u76f8\u5408\u4f30\u8ba1.</p> <p>\u6211\u5bf9\u65e0\u504f\u6027\u548c\u76f8\u5408\u6027\u7684\u7406\u89e3</p> <ul> <li> <p>\u65e0\u504f\u6027\u786e\u4fdd\u4e86\u5e73\u5747\u6765\u8bf4\uff0c\u4f30\u8ba1\u91cf\u4e0d\u4f1a\u7cfb\u7edf\u5730\u9ad8\u4f30\u6216\u4f4e\u4f30\u771f\u5b9e\u53c2\u6570\u503c\u3002\u5b83\u53cd\u6620\u4e86\u4f30\u8ba1\u91cf\u7684\u4e2d\u5fc3\u8d8b\u52bf\u662f\u5426\u6b63\u786e\u3002</p> </li> <li> <p>\u76f8\u5408\u6027\u4fdd\u8bc1\u4e86\u968f\u7740\u6211\u4eec\u6536\u96c6\u66f4\u591a\u7684\u6570\u636e\uff0c\u4f30\u8ba1\u91cf\u4f1a\u8d8a\u6765\u8d8a\u63a5\u8fd1\u771f\u5b9e\u53c2\u6570\u503c\uff0c\u6700\u7ec8\u51e0\u4e4e\u80af\u5b9a\u4f1a\u5f97\u5230\u6b63\u786e\u7684\u4f30\u8ba1\u3002</p> </li> <li> <p>\u65e0\u504f\u6027\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u76f8\u5408\u6027\uff1a\u4e00\u4e2a\u4f30\u8ba1\u91cf\u53ef\u4ee5\u662f\u65e0\u504f\u7684\uff0c\u4f46\u5982\u679c\u5176\u65b9\u5dee\u4e0d\u968f\u6837\u672c\u91cf\u589e\u5927\u800c\u51cf\u5c0f\uff0c\u5219\u5b83\u53ef\u80fd\u4e0d\u662f\u76f8\u5408\u7684\u3002\u4f8b\u5982\uff0c\u67d0\u4e9b\u56fa\u5b9a\u6837\u672c\u5927\u5c0f\u4e0b\u7684\u65e0\u504f\u4f30\u8ba1\u53ef\u80fd\u5177\u6709\u8f83\u5927\u7684\u65b9\u5dee\uff0c\u8fd9\u4f7f\u5f97\u5373\u4f7f\u6837\u672c\u91cf\u5f88\u5927\uff0c\u4f30\u8ba1\u4e5f\u53ef\u80fd\u504f\u79bb\u771f\u5b9e\u503c\u3002</p> </li> <li> <p>\u76f8\u5408\u6027\u4e5f\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u65e0\u504f\u6027\uff1a\u4e00\u4e2a\u4f30\u8ba1\u91cf\u53ef\u4ee5\u662f\u76f8\u5408\u7684\u4f46\u6709\u504f\u3002\u8fd9\u610f\u5473\u7740\u867d\u7136\u4f30\u8ba1\u91cf\u7684\u504f\u5dee\u53ef\u80fd\u4f1a\u968f\u7740\u6837\u672c\u91cf\u7684\u589e\u52a0\u800c\u51cf\u5c11\uff0c\u4f46\u5728\u6709\u9650\u6837\u672c\u60c5\u51b5\u4e0b\uff0c\u5b83\u4ecd\u7136\u53ef\u80fd\u7cfb\u7edf\u5730\u504f\u5411\u4e8e\u771f\u5b9e\u503c\u7684\u4e00\u4fa7\u3002\u7136\u800c\uff0c\u5f88\u591a\u5e38\u89c1\u7684\u76f8\u5408\u4f30\u8ba1\u91cf\u5728\u5927\u6837\u672c\u6761\u4ef6\u4e0b\u4e5f\u662f\u6e10\u8fd1\u65e0\u504f\u7684\uff0c\u5373\u968f\u7740\u6837\u672c\u91cf\u7684\u589e\u52a0\uff0c\u504f\u5dee\u8d8b\u4e8e\u96f6\u3002</p> </li> </ul> Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u7684 \\(k\\) \u9636\u77e9 \\(E(X^k) = \\mu_k(k \\ge 2)\\) \u5b58\u5728\uff0c \\(X_1,\\cdots,X_n\\) \u662f\u6765\u81ea \\(X\\) \u7684\u6837\u672c\uff0c\u8bc1\u660e\uff1a</p> <p>(1)\\(A_l = \\frac{1}{n}\\sum\\limits_{i=1}^n X_i^l\\) \u662f \\(\\mu_l\\) \u7684\u76f8\u5408\u4f30\u8ba1\uff0c \\(l = 1,\\cdots,k\\)</p> <p>(2) \\(B_2,S^2\\) \u662f \\(D(X) = \\sigma^2\\) \u7684\u76f8\u5408\u4f30\u8ba1</p> <p>(3) \\(S\\) \u662f \\(\\sigma\\) \u7684\u76f8\u5408\u4f30\u8ba1</p> Answer <p>(1) \u7531\u8f9b\u94a6\u5927\u6570\u5b9a\u5f8b\u77e5\uff0c\u5bf9 \\(l = 1,\\cdots,k\\)\uff0c\u6709</p> \\[A_l = \\frac{1}{n}\\sum\\limits_{i=1}^n X_i^l \\mathop{\\rightarrow}\\limits^p \\mu_l = E(X^l)\\] <p>\u7279\u522b\u5730, \\(\\overline{X}\\) \u662f \\(\\mu_1 = E(X)\\) \u7684\u76f8\u5408\u4f30\u8ba1\uff0c \\(A_2\\) \u662f \\(\\mu_2 = E(X^2)\\) \u7684\u76f8\u5408\u4f30\u8ba1.</p> <p>(2)</p> \\[\\because D(X) = \\sigma^2 = \\mu_2 - (\\mu_1)^2 \\ , \\ B_2 = \\frac{1}{n} \\sum\\limits_{i=1}^n (X_i - \\overline{X})^2 = A_2 - (\\overline{X})^2\\] \\[\\therefore B_2 = A_2 - (\\overline{X})^2 \\ , \\ S^2 = \\frac{n}{n-1}B_2 \\text{\u90fd\u662f} \\sigma^2 \\text{\u7684\u76f8\u5408\u4f30\u8ba1}\\] <p>(3)</p> \\[S = \\sqrt{S^2} \\text{\u662f} \\sigma \\text{\u7684\u76f8\u5408\u4f30\u8ba1}\\] Question <p>\u8bbe\u603b\u4f53 \\(X \\sim U[0,\\theta]\\)\uff0c \\(X_1,\\cdots,X_n\\) \u662f\u6765\u81ea \\(X\\) \u7684\u6837\u672c\uff0c\u8bc1\u660e \\(\\hat{\\theta_1} = 2\\overline{X}\\) \u548c \\(\\hat{\\theta_2} = \\frac{n+1}{n}\\overline{X}\\) \u90fd\u662f \\(\\theta\\) \u7684\u76f8\u5408\u4f30\u8ba1</p> Answer \\[\\hat{\\theta_1} = 2\\overline{X} = \\mathop{\\rightarrow}\\limits^p 2E(X) = \\theta\\] \\[\\therefore \\hat{\\theta_1} \\text{\u662f} \\theta \\text{\u7684\u76f8\u5408\u4f30\u8ba1}\\] \\[E(\\hat{\\theta_2}) = \\theta,D(\\hat{\\theta_2}) = \\frac{\\theta^2}{n(n+2)}\\] <p>(\u5173\u4e8e \\(D(\\hat{\\theta_2})\\) \u5df2\u5728\u524d\u6587\u8bc1\u660e\u8fc7\uff0c\u5982\u679c\u5fd8\u8bb0\u4e86\u53ef\u4ee5\u79fb\u6b65\u8fd9\u91cc)</p> <p>\u7531\u5207\u6bd4\u96ea\u592b\u4e0d\u7b49\u5f0f\uff0c \\(\\forall \\varepsilon &gt; 0\\)\uff0c \u5f53 \\(n \\to \\infty\\) \u65f6\uff0c\u6709</p> \\[P(|\\hat{\\theta_2} - \\theta| \\geq \\varepsilon) \\leq \\frac{D(\\hat{\\theta_2})}{\\varepsilon^2}  = \\frac{\\theta^2}{n(n+2)\\varepsilon^2} \\to 0\\] \\[\\text{\u6240\u4ee5} \\hat{\\theta_2} \\text{\u4e5f\u662f} \\theta \\text{\u7684\u76f8\u5408\u4f30\u8ba1}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_9","title":"\u7f6e\u4fe1\u533a\u95f4, \u7f6e\u4fe1\u9650","text":"<p>\u8bbe \\(X\\) \u662f\u603b\u4f53\uff0c \\(X_1,\\cdots,X_n\\) \u662f\u6765\u81ea \\(X\\) \u7684\u6837\u672c\uff0c \u533a\u95f4\u4f30\u8ba1\u7684\u76ee\u7684\u662f\u627e\u5230\u4e24\u4e2a\u7edf\u8ba1\u91cf\uff1a</p> \\[\\hat{\\theta_1} = \\theta_1(X_1,\\cdots,X_n),\\hat{\\theta_2} = \\theta_2(X_1,\\cdots,X_n)\\] <p>\u4f7f\u968f\u673a\u533a\u95f4 \\((\\hat{\\theta_1},\\hat{\\theta_2})\\) \u4ee5\u4e00\u5b9a\u53ef\u9760\u7a0b\u5ea6\u76d6\u4f4f \\(\\theta\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_10","title":"\u5b9a\u4e49\u4e00","text":"<p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u5206\u5e03\u51fd\u6570 \\(F(x;\\theta)\\) \\(\\theta\\) \u672a\u77e5\uff0c\u5bf9\u7ed9\u5b9a\u503c \\(\\alpha\\) ( \\(0 &lt; \\alpha &lt; 1\\) )\uff0c\u6709\u4e24\u4e2a\u7edf\u8ba1\u91cf \\(\\theta_L = \\theta_L(X_1,\\cdots,X_n)\\) \u548c \\(\\theta_U = \\theta_U(X_1,\\cdots,X_n)\\)\uff0c\u4f7f\u5f97</p> \\[P\\{(\\theta_L(X_1,\\cdots,X_n)) &lt; \\theta &lt; \\theta_U(X_1,\\cdots,X_n)\\} \\ge 1 - \\alpha\\] <p>\u79f0 \\((\\theta_L,\\theta_U)\\) \u4e3a \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4\uff0c \\(\\theta_L\\) \u548c \\(\\theta_U\\) \u5206\u522b\u79f0\u4e3a\u53cc\u4fa7\u7f6e\u4fe1\u4e0b\u9650\u548c\u53cc\u4fa7\u7f6e\u4fe1\u4e0a\u9650.</p> <p>\u8bf4\u660e\uff1a</p> <ol> <li> <p>\\(\\theta\\) \u662f\u786e\u5b9a\u7684\u503c\uff0c\u672a\u77e5\u3002</p> </li> <li> <p>\\(\\theta_L\\) \u548c \\(\\theta_U\\) \u662f\u7edf\u8ba1\u91cf\uff0c\u968f\u673a\u7684\uff0c\u4f9d\u8d56\u4e8e\u6837\u672c.</p> </li> <li> <p>\u7f6e\u4fe1\u533a\u95f4 \\((\\theta_L,\\theta_U)\\) \u662f\u968f\u673a\u7684\uff0c\u4f9d\u8d56\u4e8e\u6837\u672c\u3002\u6837\u672c\u4e0d\u540c\uff0c\u7b97\u51fa\u7684\u533a\u95f4\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002</p> </li> <li> <p>\u5bf9\u4e8e\u6709\u4e9b\u6837\u672c\u89c2\u5bdf\u503c,\u533a\u95f4\u8986\u76d6 \\(\\theta\\) \uff0c\u4f46\u5bf9\u4e8e\u4e8e\u53e6\u4e00\u4e9b\u6837\u672c\u89c2\u5bdf\u503c,\u533a\u95f4\u5219\u4e0d\u80fd\u8986\u76d6 \\(\\theta\\) .</p> </li> </ol> Example <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu,4)\\) , \\(\\mu\\) \u672a\u77e5\uff0c \\(X_1,\\cdots,X_4\\) \u662f\u6837\u672c\uff0c\u5219 \\(\\overline{X} \\sim N(\\mu,1)\\)</p> \\[P(\\overline{X} - 2 &lt; \\mu &lt; \\overline{X} + 2) = P(|\\overline{X} - \\mu| &lt; 2) = 2 \\Phi(2) - 1 = 0.9544\\] <p>\\(\\Rightarrow (\\overline{X} - 2,\\overline{X} + 2)\\) \u662f \\(\\mu\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(0.95\\) \u7684\u7f6e\u4fe1\u533a\u95f4</p> <p>\u5982\u679c \\(P\\{\\hat{\\theta_L}(X_1,\\dots,X_n) &lt; \\theta &lt; \\hat{\\theta_U}(X_1,\\dots,X_n)\\} = 1 - \\alpha\\)\uff0c\u5219\u7f6e\u4fe1\u533a\u95f4 \\((\\hat{\\theta_L},\\hat{\\theta_U})\\) \u7684\u542b\u4e49\u4e3a\uff1a</p> <p>\u53cd\u590d\u62bd\u6837\u591a\u6b21(\u5404\u6b21\u6837\u672c\u5bb9\u91cf\u90fd\u4e3a n ).\u6bcf\u4e2a\u6837\u672c\u503c\u786e\u5b9a\u4e00\u4e2a\u533a\u95f4 \\((\\hat{\\theta_L},\\hat{\\theta_U})\\) .\u6bcf\u4e2a\u8fd9\u6837\u7684\u533a\u95f4\u6216\u5305\u542b \\(\\theta\\) \u7684\u771f\u503c\uff0c\u6216\u4e0d\u5305\u542b \\(\\theta\\) \u7684\u771f\u503c. \u6309\u7167\u4f2f\u52aa\u5229\u5927\u6570\u5b9a\u5f8b\uff0c\u5728\u8fd9\u4e9b\u533a\u95f4\u4e2d\uff0c\u5305\u542b \\(\\theta\\) \u771f\u503c\u7684\u6bd4\u4f8b\u7ea6\u4e3a \\(1-\\alpha\\).</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_11","title":"\u5b9a\u4e49\u4e8c","text":"<p>\u5982\u679c \\(P\\{\\hat{\\theta_L}(X_1,\\dots,X_n) &lt; \\theta \\} \\ge 1 - \\alpha\\) \uff0c\u5219\u79f0 \\(\\hat{\\theta_L}\\) \u662f\u53c2\u6570\u4e3a \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0b\u9650.</p> <p>\u5982\u679c \\(P\\{\\theta &lt; \\hat{\\theta_U}(X_1,\\dots,X_n)\\} \\ge 1 - \\alpha\\) \uff0c\u5219\u79f0 \\(\\hat{\\theta_U}\\) \u662f\u53c2\u6570\u4e3a \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0a\u9650.</p> <p>\u5355\u4fa7\u7f6e\u4fe1\u9650\u548c\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4\u7684\u5173\u7cfb</p> <p>\u8bbe \\(\\theta_L\\) \u662f \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha_1\\) \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0b\u9650\uff0c \\(\\theta_U\\) \u662f \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha_2\\) \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0a\u9650\uff0c\u5219 \\((\\theta_L,\\theta_U)\\) \u662f \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha_1-\\alpha_2\\) \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4.</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_12","title":"\u5b9a\u4e49\u4e09","text":"<p>\u79f0\u7f6e\u4fe1\u533a\u95f4 \\([\\hat{\\theta_L},\\hat{\\theta_U}]\\) \u7684\u5e73\u5747\u957f\u5ea6 \\(E(\\hat{\\theta_U} - \\hat{\\theta_L})\\) \u4e3a\u533a\u95f4\u7684\u7cbe\u786e\u5ea6\uff0c\u7cbe\u786e\u5ea6\u7684\u4e00\u534a\u4e3a\u8bef\u5dee\u9650\u3002</p> <ul> <li>\u5728\u7ed9\u5b9a\u7684\u6837\u672c\u5bb9\u91cf\u4e0b,\u7f6e\u4fe1\u6c34\u5e73\u548c\u7cbe\u786e\u5ea6\u662f\u76f8\u4e92\u5236\u7ea6\u7684\u3002</li> </ul>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#neyman","title":"Neyman\u539f\u5219","text":"<p>\u5728\u7f6e\u4fe1\u6c34\u5e73\u8fbe\u5230 \\(1-\\alpha\\) \u7684\u7f6e\u4fe1\u533a\u95f4\u4e2d\uff0c\u9009\u7cbe\u786e\u5ea6\u5c3d\u53ef\u80fd\u9ad8\u7684\u7f6e\u4fe1\u533a\u95f4.</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_13","title":"\u67a2\u8f74\u91cf\u6cd5","text":"<p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u5206\u5e03\u6709\u672a\u77e5\u53c2\u6570 \\(\\theta\\) \uff0c \\(X_1,\\dots,X_n\\) \u662f\u6765\u81ea \\(X\\) \u7684\u6837\u672c\uff0c \u5982\u4f55\u7ed9\u51fa \\(\\theta\\) \u7684\u7f6e\u4fe1\u5ea6\u4e3a \\(1-\\alpha\\) \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4\uff1f</p> <ol> <li> <p>\u627e\u4e00\u4e2a\u91cf \\(G\\) ,\u4f7f \\(G\\) \u5206\u5e03\u5df2\u77e5</p> </li> <li> <p>\u627e \\(a &lt; b\\) ,\u4f7f \\(P(a &lt; G(X_1,\\dots,X_n) &lt; b) \\ge 1-\\alpha\\)</p> </li> </ol> <p>\u56e0\u4e3a\u8981\u6c42 \\(\\theta\\) \u7684\u533a\u95f4\u4f30\u8ba1\uff0c\u6240\u4ee5 \\(G\\) \u5e94\u8be5\u662f \\(\\theta\\) \u548c\u6837\u672c \\(X_1,\\dots,X_n\\) \u7684\u51fd\u6570\uff0c\u800c\u8981\u6c42\u6700\u5c0f\u7684\u533a\u95f4\u957f\u5ea6\u65f6\u57fa\u672c\u4e0a\u662f\u7b49\u4e8e\u65f6\u53d6\u5f97\u3002</p> <ol> <li>\u4ece \\(a &lt; G &lt; b\\) \u89e3\u51fa \\(\\theta_L &lt; \\theta &lt; \\theta_U\\)</li> </ol> <p>\\((\\theta_L,\\theta_U)\\) \u5c31\u662f \\(\\theta\\) \u7684\u7f6e\u4fe1\u5ea6\u4e3a \\(1-\\alpha\\) \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_14","title":"\u5b9a\u4e49\u4e00","text":"<p>\u8bbe\u603b\u4f53 \\(X\\) \u6709\u6982\u7387\u5bc6\u5ea6(\u6216\u5206\u5e03\u5f8b) \\(f(x;\\theta)\\) \uff0c\u5176\u4e2d \\(\\theta\\) \u662f\u5f85\u4f30\u7684\u672a\u77e5\u53c2\u6570.</p> <p>\u8bbe \\(X_1,\\dots,X_n\\) \u662f\u6765\u81ea \\(X\\) \u7684\u6837\u672c\uff0c\u79f0\u6837\u672c\u548c\u672a\u77e5\u53c2\u6570 \\(\\theta\\) \u7684\u51fd\u6570 \\(G(X_1,\\dots,X_n;\\theta)\\) \u4e3a\u67a2\u8f74\u91cf\u3002</p> <p>\u5982\u679c \\(G\\) \u7684\u5206\u5e03\u5df2\u77e5\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u672a\u77e5\u53c2\u6570 \\(\\theta\\) .</p> <p>\u67a2\u8f74\u91cf\u548c\u7edf\u8ba1\u91cf\u7684\u533a\u522b</p> <p>(1)\u67a2\u8f74\u91cf\u662f\u6837\u672c\u548c\u5f85\u4f30\u53c2\u6570\u7684\u51fd\u6570\uff0c\u5176\u5206\u5e03\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u672a\u77e5\u53c2\u6570\uff1b</p> <p>(2)\u7edf\u8ba1\u91cf\u53ea\u662f\u6837\u672c\u7684\u51fd\u6570\uff0c\u5176\u5206\u5e03\u5e38\u4f9d\u8d56\u4e8e\u672a\u77e5\u53c2\u6570\u3002</p> Question <p>\u603b\u4f53 \\(X \\sim N(\\mu,\\sigma^2)\\) \uff0c\\(\\mu,\\sigma^2\\) \u4e3a\u672a\u77e5\u53c2\u6570\uff0c\\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c\uff0c\u5bf9 \\(\\mu\\) \u8fdb\u884c\u533a\u95f4\u4f30\u8ba1.\u4e0b\u9762\u4e09\u4e2a\u91cf\u4e2d\u54ea\u4e9b\u662f\u7edf\u8ba1\u91cf\uff1f\u54ea\u4e9b\u662f\u67a2\u8f74\u91cf\uff1f</p> <p>\\(\\overline{X},\\frac{\\overline{X} - \\mu}{\\sigma/\\sqrt{n}},\\frac{\\overline{X} - \\mu}{S/\\sqrt{n}}\\)</p> Answer <p>(1) \\(\\overline{X}\\) \u662f\u7edf\u8ba1\u91cf\uff0c\u56e0\u4e3a\u5b83\u662f\u6837\u672c\u7684\u51fd\u6570\uff1b</p> <p>(2) \\(\\frac{\\overline{X} - \\mu}{\\sigma/\\sqrt{n}}\\) \u4e0d\u662f\u7edf\u8ba1\u91cf\u4e5f\u4e0d\u662f\u67a2\u8f74\u91cf\uff0c\u56e0\u4e3a\u5b83\u542b\u6709\u9664\u4e86 \\(\\mu\\) \u4e4b\u5916\u7684\u672a\u77e5\u53c2\u6570 \\(\\sigma\\)</p> <p>(3) \\(\\frac{\\overline{X} - \\mu}{S/\\sqrt{n}}\\) \u662f\u67a2\u8f74\u91cf\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f\u6837\u672c\u548c \\(\\mu\\) \u7684\u51fd\u6570\uff0c\u670d\u4ece \\(t(n-1)\\) \u5206\u5e03.</p> <p>\u5bf9\u67a2\u8f74\u91cf \\(G\\) \uff0c\u6ee1\u8db3 \\(P(a&lt;G&lt;b) \\ge 1 - \\alpha\\) \u7684 \\(a,b\\) \u53ef\u80fd\u6709\u5f88\u591a\uff0c\u90a3\u4e48\u9009\u62e9\u54ea\u4e2a\u5462\uff1f</p> <ol> <li> <p>\u6839\u636e Neyman \u539f\u5219\uff1a\u6c42 \\(a\\) \u548c \\(b\\) \u4f7f\u5f97\u533a\u95f4\u957f\u5ea6\u6700\u77ed\uff1b</p> </li> <li> <p>\u5982\u679c\u6700\u4f18\u89e3\u4e0d\u5b58\u5728\u6216\u6bd4\u8f83\u590d\u6742,\u5bf9\u8fde\u7eed\u578b\u603b\u4f53,\u5e38\u53d6 \\(a,b\\) \u6ee1\u8db3\uff1a</p> </li> </ol> \\[P(G(X_1,\\dots,X_n;\\theta) \\le a) = P(G(X_1,\\dots,X_n;\\theta) \\ge b) = \\frac{\\alpha}{2}\\] <p>\u5bf9\u4e8e(2),\u6784\u9020\u7f6e\u4fe1\u533a\u95f4\u4e09\u6b65\u9aa4\u4e5f\u5341\u5206\u7c7b\u4f3c:</p> <ol> <li> <p>\u6784\u9020\u67a2\u8f74\u91cf \\(G(X_1,\\cdots,X_n;\\theta)\\)</p> </li> <li> <p>\u5bf9\u8fde\u7eed\u578b\u603b\u4f53,\u627e \\(a&lt;b\\) \u6ee1\u8db3 \\(P(G \\le a) = P(G \\ge b) = \\frac{\\alpha}{2}\\)</p> </li> <li> <p>\u4ece \\(a&lt;G&lt;b\\) \u89e3\u51fa \\(\\theta_L &lt; \\theta &lt; \\theta_U\\)</p> </li> </ol> <p>\u90a3\u4e48 \\((\\theta_L,\\theta_U)\\) \u5c31\u662f\u7f6e\u4fe1\u5ea6\u4e3a \\(1-\\alpha\\) \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4\uff0c</p> <p>\\(\\theta_L\\) \u662f \\(\\theta\\) \u7684\u7f6e\u4fe1\u5ea6\u4e3a \\(1-\\frac{\\alpha}{2}\\) \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0b\u9650\uff0c</p> <p>\\(\\theta_U\\) \u662f \\(\\theta\\) \u7684\u7f6e\u4fe1\u5ea6\u4e3a \\(1-\\frac{\\alpha}{2}\\) \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0a\u9650.</p> <p>Info</p> <p>\u67a2\u8f74\u91cf \\(G(X_1,\\cdots,X_n;\\theta)\\) \u7684\u6784\u9020\uff0c\u901a\u5e38\u4ece \\(\\theta\\) \u7684\u70b9\u4f30\u8ba1 \\(\\hat{\\theta}\\) (\u5982\u6781\u5927\u4f3c\u7136\u4f30\u8ba1,\u77e9\u4f30\u8ba1\u7b49)\u51fa\u53d1\uff0c\u6839\u636e \\(\\hat{\\theta}\\) \u7684\u5206\u5e03\u8fdb\u884c\u6539\u9020\u800c\u5f97.</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_15","title":"\u5355\u4e2a\u6b63\u6001\u603b\u4f53\u5747\u503c\u7684\u533a\u95f4\u4f30\u8ba1","text":"<p>\u8bbe\u603b\u4f53 \\(X\\sim N(\\mu,\\sigma^2)\\) \uff0c \\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c, \\(\\overline{X}\\) \u548c \\(S^2\\) \u5206\u522b\u662f\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee.\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) </p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#mu","title":"\u5747\u503c \\(\\mu\\) \u7684\u7f6e\u4fe1\u533a\u95f4","text":"<ol> <li>\\(\\sigma^2\\) \u5df2\u77e5</li> </ol> <p>\\(\\overline{X}\\) \u662f \\(\\mu\\) \u7684\u65e0\u504f\u4f30\u8ba1\uff0c\u53d6\u67a2\u8f74\u91cf \\(\\frac{\\overline{X} - \\mu}{\\sigma/\\sqrt{n}} \\sim N(0,1)\\)</p> <p>\u8bbe\u5e38\u6570 \\(a&lt;b\\) \u6ee1\u8db3\uff1a \\(P(a &lt; \\frac{\\overline{X} - \\mu}{\\sigma/\\sqrt{n}} &lt; b) = 1-\\alpha\\) </p> <p>\u7b49\u4ef7\u4e8e \\(P\\{\\overline{X} - b\\frac{\\sigma}{\\sqrt{n}},\\overline{X} - a\\frac{\\sigma}{\\sqrt{n}}\\} \\ge 1 - \\alpha\\)</p> <p>\u533a\u95f4\u957f\u5ea6 \\((b-a)\\frac{\\sigma}{\\sqrt{n}}\\) ,\u4e5f\u5373\u6211\u4eec\u9700\u8981\u4f7f\u5f97 \\((b-a)\\) \u5c3d\u53ef\u80fd\u5c0f</p> <p>\u7531\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u6027\u8d28\u53ef\u77e5\uff0c \\(a = -b = -Z_{\\frac{\\alpha}{2}}\\) \u65f6\uff0c\u533a\u95f4\u7684\u957f\u5ea6\u8fbe\u5230\u6700\u77ed\u3002</p> <p>\u6240\u4ee5 \\(\\mu\\) \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4\u4e3a\uff1a (\\(\\overline{X} - \\frac{\\sigma}{\\sqrt{n}}Z_{\\frac{\\alpha}{2}} , \\overline{X} + \\frac{\\sigma}{\\sqrt{n}}Z_{\\frac{\\alpha}{2}}\\))</p> <p>\u5355\u4fa7\u7f6e\u4fe1\u4e0b\u9650\u4e3a (\u628a \\(\\frac{\\alpha}{2}\\) \u6539\u4e3a \\(\\alpha\\) ) : \\(\\overline{X} - \\frac{\\sigma}{\\sqrt{n}}Z_{\\alpha}\\)</p> <p>\u5355\u4fa7\u7f6e\u4fe1\u4e0a\u9650\u4e3a\uff1a \\(\\overline{X} + \\frac{\\sigma}{\\sqrt{n}}Z_{\\alpha}\\)</p> <ol> <li>\\(\\sigma^2\\) \u672a\u77e5</li> </ol> <p>\u6b64\u65f6\u6211\u4eec\u7528 \\(S^2\\) \u4f30\u8ba1 \\(\\sigma^2\\) \u5f97\u67a2\u8f74\u91cf \\(G = \\frac{\\overline{X} - \\mu}{S/\\sqrt{n}} \\sim t(n-1)\\)</p> <p>\u540c\u7406\u53ef\u5f97\uff0c \\(\\mu\\) \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4\u4e3a\uff1a (\\(\\overline{X} - \\frac{S}{\\sqrt{n}}t_{\\frac{\\alpha}{2}}(n-1) , \\overline{X} + \\frac{S}{\\sqrt{n}}t_{\\frac{\\alpha}{2}}(n-1)\\))</p> <p>\u5355\u4fa7\u7f6e\u4fe1\u4e0a\u9650\u4e3a\uff1a \\(\\overline{X} + \\frac{S}{\\sqrt{n}}t_{\\alpha}(n-1)\\)</p> <p>\u5355\u4fa7\u7f6e\u4fe1\u4e0b\u9650\u4e3a\uff1a \\(\\overline{X} - \\frac{S}{\\sqrt{n}}t_{\\alpha}(n-1)\\)</p> \u7b80\u5355\u8bc1\u660e\u4e00\u4e0b G \u670d\u4ece t(n-1) \\[Z = \\frac{\\overline{X} - \\mu}{\\sigma / \\sqrt{n}} \\sim N(0, 1)\\] \\[\\frac{(n-1) S^2}{\\sigma^2} \\sim \\chi^2(n-1)\\] \\[\\frac{S}{\\sigma} = \\sqrt{\\frac{\\frac{(n-1) S^2}{\\sigma^2}}{n-1}} \\sim \\sqrt{\\frac{\\chi^2(n-1)}{n-1}}\\] \\[G = \\frac{\\frac{\\overline{X} - \\mu}{\\sigma / \\sqrt{n}}}{\\frac{S}{\\sigma}} = \\frac{\\overline{X} - \\mu}{S / \\sqrt{n}} \\sim t(n-1)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_16","title":"\u6210\u5bf9\u6570\u636e\u5747\u503c\u5dee","text":"<p>\u4f8b\uff1a\u4e3a\u8003\u5bdf\u67d0\u79cd\u964d\u538b\u836f\u7684\u964d\u538b\u6548\u679c\uff0c\u6d4b\u8bd5\u4e86 n \u4e2a\u9ad8\u8840\u538b\u75c5\u4eba\u5728\u670d\u836f\u524d\u540e\u7684\u8840\u538b\uff08\u6536\u7f29\u538b\uff09\u5206\u522b\u4e3a \\((X_1,Y_1),\\dots,(X_n,Y_n)\\) \uff0c\u7531\u4e8e\u4e2a\u4eba\u4f53\u8d28\u7684\u5dee\u5f02\uff0c \\(X_1,\\dots,X_n\\) \u4e0d\u80fd\u770b\u6210\u6765\u81ea\u540c\u4e00\u4e2a\u6b63\u6001\u603b\u4f53\u7684\u6837\u672c\uff0c\u5373 \\(X_1,\\dots,X_n\\) \u662f\u76f8\u4e92\u72ec\u7acb\u4f46\u4e0d\u540c\u5206\u5e03\u7684\u6837\u672c\uff0c \\(Y_1,\\dots,Y_n\\) \u4e5f\u662f.\u53e6\u5916\u5bf9\u540c\u4e00\u4e2a\u4e2a\u4f53\uff0c \\(X_i\\) \u548c \\(Y_i\\) \u4e5f\u662f\u4e0d\u72ec\u7acb\u7684.</p> <p>\u4f5c\u5dee\u503c \\(D_i = X_i - Y_i,i=1,\\dots,n\\) \u5219\u53d6\u6d88\u4e86\u4e2a\u4f53\u7684\u5dee\u5f02\uff0c\u4ec5\u4e0e\u964d\u538b\u836f\u7684\u4f5c\u7528\u6709\u5173,\u56e0\u6b64\u53ef\u4ee5\u5c06 \\(D_1,\\dots,D_n\\) \u770b\u4f5c\u6765\u81ea\u540c\u4e00\u6b63\u6001\u603b\u4f53 \\(N(\\mu_D,\\sigma_D^2)\\) \u7684\u6837\u672c\uff0c\u4e14\u76f8\u4e92\u72ec\u7acb\u3002</p> <p>\\(\\mu_d\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) \u7684\u7f6e\u4fe1\u533a\u95f4\u4e3a\uff1a \\((\\overline{D} - t_{\\frac{\\alpha}{2}}(n-1)\\frac{S_D}{\\sqrt{n}},\\overline{D} + t_{\\frac{\\alpha}{2}}(n-1)\\frac{S_D}{\\sqrt{n}})\\)</p> <p>\u5176\u4e2d \\(\\overline{D} = \\overline{X} - \\overline{Y}\\) \uff0c \\(S_D^2 = \\frac{1}{n-1}\\sum_{i=1}^n (D_i - \\overline{D})^2\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#sigma2","title":"\u65b9\u5dee \\(\\sigma^2\\) \u7684\u7f6e\u4fe1\u533a\u95f4","text":"<p>\\(\\mu\\) \u672a\u77e5</p> <p>\u8bbe\u603b\u4f53 \\(X\\sim N(\\mu,\\sigma^2)\\) \uff0c \\(X_1,\\dots,X_n\\) \u4e3a\u6837\u672c, \\(\\overline{X}\\) \u548c \\(S^2\\) \u5206\u522b\u662f\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee.\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) </p> <p>\u7531 \\(\\sigma^2\\) \u7684\u65e0\u504f\u4f30\u8ba1 \\(S^2\\) \u60f3\u5230\u67a2\u8f74\u91cf \\(\\frac{(n-1)S^2}{\\sigma^2} \\sim \\chi^2(n-1)\\)</p> \\[\\therefore \\frac{(n-1)S^2}{\\chi^2_{\\alpha/2}(n-1)} &lt; \\sigma^2 &lt; \\frac{(n-1)S^2}{\\chi^2_{1-\\alpha/2}(n-1)}\\] <p>Attention</p> <p>\u4e0a\u8ff0\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4\u4f30\u8ba1\u4e0d\u662f\u6700\u4f18\u89e3</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_17","title":"\u4e24\u4e2a\u6b63\u6001\u603b\u4f53\u53c2\u6570\u7684\u533a\u95f4\u4f30\u8ba1","text":"<p>\u8bbe\u6837\u672c \\((X_1,\\dots,X_n)\\) \u548c \\((Y_1,\\dots,Y_m)\\) \u5206\u522b\u6765\u81ea\u603b\u4f53 \\(X\\sim N(\\mu_1,\\sigma^2_1)\\) \u548c \\(Y\\sim N(\\mu_2,\\sigma^2_2)\\) ,\u5e76\u4e14\u5b83\u4eec\u76f8\u4e92\u72ec\u7acb. \u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\u5206\u522b\u4e3a \\(\\overline{X}\\) , \\(\\overline{Y}\\) , \\(S^2_1\\) , \\(S^2_2\\) . \u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#mu_1-mu_2","title":"\\(\\mu_1 - \\mu_2\\) \u7684\u7f6e\u4fe1\u533a\u95f4","text":"<ol> <li>\\(\\sigma^2_1 , \\sigma^2_2\\) \u5df2\u77e5</li> </ol> <p>\u7531 \\(\\mu_1 - \\mu_2\\) \u7684\u4f30\u8ba1 \\(\\overline{X} - \\overline{Y}\\) \u60f3\u5230\u67a2\u8f74\u91cf:</p> \\[\\frac{(\\overline{X} - \\overline{Y}) - (\\mu_1 - \\mu_2)}{\\sqrt{\\frac{\\sigma^2_1}{n} + \\frac{\\sigma^2_2}{m}}} \\sim N(0,1)\\] <p>\u5f97\u7f6e\u4fe1\u533a\u95f4: </p> \\[(\\overline{X} - \\overline{Y} \\pm z_{\\frac{\\alpha}{2}}\\sqrt{\\frac{\\sigma^2_1}{n} + \\frac{\\sigma^2_2}{m}})\\] <ol> <li>\\(\\sigma^2_1 = \\sigma^2_2\\) \u672a\u77e5</li> </ol> <p>\u5173\u4e8e(\ud83d\udcdd\u4e3a\u4ec0\u4e48\u4f7f\u7528 \\(S_w^2\\))</p> <p>\u4ee5 \\(S_w^2 = \\frac{(n_1-1)S_1^2+(n_2-1)S_2^2}{n_1+n_2-2}\\) \u4ee3\u66ff \\(\\sigma^2\\) \u5f97\u5230\u67a2\u8f74\u91cf:</p> \\[\\frac{(\\overline{X} - \\overline{Y}) - (\\mu_1 - \\mu_2)}{S_w\\sqrt{\\frac{1}{n_1} + \\frac{1}{n_2}}} \\sim t(n_1+n_2-2)\\] <p>\u5f97\u7f6e\u4fe1\u533a\u95f4:</p> \\[((\\overline{X} - \\overline{Y}) \\pm t_{\\frac{\\alpha}{2}}(n_1+n_2-2)S_w\\sqrt{\\frac{1}{n_1} + \\frac{1}{n_2}})\\] <ol> <li>\\(\\sigma^2_1 \\neq \\sigma^2_2\\) \u672a\u77e5</li> </ol> <p>\u4ee5 \\(S_1^2\\) \u4f30\u8ba1 \\(\\sigma^2_1\\) , \\(S_2^2\\) \u4f30\u8ba1 \\(\\sigma^2_2\\) \u5f97\u5230\u67a2\u8f74\u91cf</p> <ul> <li>\u5f53\u6837\u672c\u91cf \\(n_1,n_2\\) \u90fd\u5145\u5206\u5927\u65f6(\u4e00\u822c\u8981&gt;30)</li> </ul> \\[\\frac{(\\overline{X} - \\overline{Y}) - (\\mu_1 - \\mu_2)}{\\sqrt{\\frac{S_1^2}{n_1} + \\frac{S_2^2}{n_2}}} \\mathop{\\sim}\\limits^{\\text{\u8fd1\u4f3c}} N(0,1)\\] <p>\u5f97\u7f6e\u4fe1\u533a\u95f4:</p> \\[(\\overline{X} - \\overline{Y} \\pm z_{\\frac{\\alpha}{2}}\\sqrt{\\frac{S_1^2}{n_1} + \\frac{S_2^2}{n_2}})\\] <ul> <li>\u5f53\u6837\u672c\u91cf \\(n_1,n_2\\) \u5c0f\u65f6</li> </ul> \\[\\frac{(\\overline{X} - \\overline{Y}) - (\\mu_1 - \\mu_2)}{\\sqrt{\\frac{S_1^2}{n_1} + \\frac{S_2^2}{n_2}}} \\mathop{\\sim}\\limits^{\\text{\u8fd1\u4f3c}} t(k)\\] <p>\u5176\u4e2d \\(k \\approx min(n_1-1,n_2-1)\\)</p> <p>\u5f97\u8fd1\u4f3c\u7f6e\u4fe1\u533a\u95f4:</p> \\[(\\overline{X} - \\overline{Y} \\pm t_{\\frac{\\alpha}{2}}(k)\\sqrt{\\frac{S_1^2}{n_1} + \\frac{S_2^2}{n_2}})\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#fracsigma_12sigma_22","title":"\\(\\frac{\\sigma_1^2}{\\sigma_2^2}\\) \u7684\u7f6e\u4fe1\u533a\u95f4","text":"<p>\u7531 \\(\\frac{\\sigma_1^2}{\\sigma_2^2}\\) \u7684\u4f30\u8ba1 \\(\\frac{S_1^2}{S_2^2}\\) \u5f97\u67a2\u8f74\u91cf:</p> \\[\\frac{\\frac{S_1^2}{S_2^2}}{\\frac{\\sigma_1^2}{\\sigma_2^2}} \\sim F(n_1-1,n_2-1)\\] \\[\\because F_{1 - \\frac{\\alpha}{2}}(n_1-1,n_2-1) \\leq \\frac{\\frac{S_1^2}{S_2^2}}{\\frac{\\sigma_1^2}{\\sigma_2^2}} \\leq F_{\\frac{\\alpha}{2}}(n_1-1,n_2-1)\\] <p>\u5f97\u7f6e\u4fe1\u533a\u95f4:</p> \\[(\\frac{S_1^2}{S_2^2} \\frac{1}{F_{\\frac{\\alpha}{2}}(n_1-1,n_2-1)} , \\frac{S_1^2}{S_2^2} \\frac{1}{F_{1 - \\frac{\\alpha}{2}}(n_1-1,n_2-1)})\\] \u9700\u8981\u7b80\u5355\u8bc1\u660e\u5417\ud83e\udd7a \\[\\frac{(n_1-1)S_1^2}{\\sigma_1^2} \\sim \\chi^2(n_1-1)\\] \\[\\frac{(n_2-1)S_2^2}{\\sigma_2^2} \\sim \\chi^2(n_2-1)\\] \\[\\frac{\\frac{(n_1-1)S_1^2}{\\sigma_1^2 \\cdot (n_1 - 1)}}{\\frac{(n_2-1)S_2^2}{\\sigma_2^2 \\cdot (n_2-1)}} = \\frac{\\frac{S_1^2}{\\sigma_1^2}}{\\frac{S_2^2}{\\sigma_2^2}} \\sim F(n_1-1,n_2-1)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#conclusion-for","title":"Conclusion for \u6b63\u6001\u603b\u4f53\u4e0b\u5e38\u89c1\u67a2\u8f74\u91cf","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_18","title":"\u5355\u4e2a\u6b63\u6001\u603b\u4f53","text":"\\[N(\\mu,\\sigma^2)\\] \\[\\mu \\text{\u7684\u67a2\u8f74\u91cf} \\begin{cases} \\frac{\\overline{X} - \\mu}{\\frac{\\sigma}{\\sqrt{n}}} \\sim N(0,1) ,&amp; (\\sigma \\text{\u5df2\u77e5}) \\\\ \\frac{\\overline{X} - \\mu}{\\frac{S}{\\sqrt{n}}} \\sim t(n-1) ,&amp; (\\sigma^2 \\text{\u672a\u77e5}) \\end{cases}\\] \\[\\sigma^2 \\text{\u7684\u67a2\u8f74\u91cf} \\frac{(n-1)S^2}{\\sigma^2} \\sim \\chi^2(n-1) ,(\\mu \\text{\u672a\u77e5})\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_19","title":"\u4e24\u4e2a\u6b63\u6001\u603b\u4f53","text":"<p>\\(N(\\mu_1,\\sigma_1^2)\\) \u548c \\(N(\\mu_2,\\sigma_2^2)\\)</p> \\[\\mu_1 - \\mu_2 \\text{\u7684\u67a2\u8f74\u91cf} \\begin{cases} \\frac{(\\overline{X}-\\overline{Y}) - (\\mu_1 - \\mu_2)}{\\sqrt{\\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}}} \\sim N(0,1),&amp; \\sigma_1^2 , \\sigma_2^2 \\text{\u5df2\u77e5} \\\\ \\frac{(\\overline{X}-\\overline{Y}) - (\\mu_1 - \\mu_2)}{S_w\\sqrt{\\frac{1}{n_1} + \\frac{1}{n_2}}} \\sim t(n_1 + n_2 - 2) ,&amp; \\sigma_1^2 = \\sigma_2^2 \\text{\u672a\u77e5} \\end{cases}\\] \\[\\frac{\\sigma_1^2}{\\sigma_2^2} \\text{\u7684\u67a2\u8f74\u91cf} \\frac{\\frac{S_1^2}{S_2^2}}{\\frac{\\sigma_1^2}{\\sigma_2^2}} \\sim F(n_1-1,n_2-1) ,(\\mu_1,\\mu_2 \\text{\u672a\u77e5})\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter7/#_20","title":"\u7f6e\u4fe1\u533a\u95f4\u4f8b\u9898\u6c47\u603b","text":"\u4f8b\u9898 1 <p>\u67d0\u888b\u88c5\u98df\u54c1\u91cd\u91cf(\u5355\u4f4d\uff1a\u514b) \\(X\\sim N(\\mu,9)\\) \u73b0\u4ece\u4e00\u5927\u6279\u8be5\u4ea7\u54c1\u4e2d\u968f\u673a\u62bd\u53d6 10 \u4ef6,\u79f0\u5f97\u91cd\u91cf\u4e3a\uff1a</p> <p>101.3 99.6 100.4 98.8 96.4 99.1 102.3 97.5 105.4 100.2</p> <p>\u6c42 \\(\\mu\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4.</p> Answer <p>\u8ba1\u7b97\u5f97 \\(\\overline{X} = 100.1\\)</p> <p>\u6240\u4ee5\uff0c \u6837\u672c\u5747\u503c\u670d\u4ece \\(N(100.1,\\frac{9}{10})\\)</p> <p>\u67e5\u8868\u5f97 \\(z_{0.025} = 1.96\\)</p> \\[\\therefore (\\overline{X} - z_{0.025}\\sqrt{\\frac{9}{10}},\\overline{X} + z_{0.025}\\sqrt{\\frac{9}{10}}) = (98.24,101.96)\\] \u4f8b\u9898 2 <p>\u8bbe\u65b0\u751f\u513f\u4f53\u91cd(\u5355\u4f4d\uff1a\u514b) \\(X \\sim N(\\mu,\\sigma^2)\\) \uff0c \\(\\mu,\\sigma^2\\) \u672a\u77e5\uff0c \u73b0\u4ece\u67d0\u5987\u4ea7\u533b\u9662\u968f\u673a\u62bd\u67e5 16 \u540d\u65b0\u751f\u513f,\u79f0\u5f97\u91cd\u91cf\u4e3a\uff1a</p> <p>3200 3050 2600 3530 3840 4450 2900 4180 </p> <p>2150 2650 2750 3450 2830 3730 3620 2270</p> <p>\u6c42 \\(\\mu\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4.</p> Answer <p>\u8ba1\u7b97\u5f97 \\(\\overline{X} = 3165\\) \uff0c \\(s = 665.48\\)</p> <p>\u67e5\u8868\u5f97 \\(t_{0.025}(15) = 2.1315\\)</p> \\[\\therefore (\\overline{X} - t_{0.025}(15)\\sqrt{\\frac{665.48^2}{16}},\\overline{X} + t_{0.025}(15)\\sqrt{\\frac{665.48^2}{16}}) = (2845.4,3554.6)\\] \u4f8b\u9898 3 <p>\u67d0\u79cd\u4ea7\u54c1\u7684\u5bff\u547d(\u5355\u4f4d\uff1a\u5343\u5c0f\u65f6) \\(X \\sim N(\\mu,\\sigma^2)\\) \uff0c \\(\\mu,\\sigma^2\\) \u672a\u77e5\uff0c \u73b0\u968f\u673a\u62bd\u67e5 10 \u4ef6\u4ea7\u54c1\u8fdb\u884c\u5bff\u547d\u8bd5\u9a8c\uff0c\u6d4b\u5f97\uff1a\u6837\u672c\u5747\u503c \\(\\overline{X} = 5.78\\) ,\u6837\u672c\u6807\u51c6\u5dee \\(s = 0.92\\) . \u6c42 \\(\\mu\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0b\u9650.</p> Answer <p>\u67e5\u8868\u5f97 \\(t_{0.05}(9) = 1.8331\\)</p> <p>$\\(\\therefore \\mu_{L} = \\overline{X} - t_{0.05}(9)\\sqrt{\\frac{s^2}{n}} = 5.25\\)</p> \u4f8b\u9898 4 <p>\u67d0\u5e02\u968f\u673a\u62bd\u53d6 1500 \u4e2a\u5bb6\u5ead\uff0c\u8c03\u67e5\u77e5\u9053\u5176\u4e2d\u6709 375 \u5bb6\u62e5\u6709\u79c1\u5bb6\u8f66.\u8bd5\u6839\u636e\u6b64\u8c03\u67e5\u7ed3\u679c\uff0c\u6c42\u8be5\u5e02\u62e5\u6709\u79c1\u5bb6\u8f66\u6bd4\u4f8b p \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u8fd1\u4f3c\u7f6e\u4fe1\u533a\u95f4.</p> Answer <p>\u8ba1\u7b97\u5f97 \\(\\hat{p} = \\overline{x} = \\frac{375}{1500} = 0.25\\) , \\(s^2 = \\hat{p}(1-\\hat{p}) = 0.1875\\)</p> \\[\\therefore (\\overline{x} - z_{0.025}\\sqrt{\\frac{s^2}{n}},\\overline{x} + z_{0.025}\\sqrt{\\frac{s^2}{n}}) = (0.228,0.272)\\] \u4f8b\u9898 5 \u6210\u5bf9\u6570\u636e\u60c5\u5f62 <p>\u4e3a\u8bc4\u4ef7\u67d0\u79cd\u8bad\u7ec3\u65b9\u6cd5\u662f\u5426\u80fd\u6709\u6548\u63d0\u9ad8\u5927\u5b66\u751f\u7684\u7acb\u5b9a\u8df3\u8fdc\u6210\u7ee9,\u5728\u67d0\u5927\u5b66\u968f\u673a\u9009\u4e2d 16 \u540d\u5b66\u751f\uff0c\u6d4b\u91cf\u4ed6\u4eec\u7684\u7acb\u5b9a\u8df3\u8fdc\u6210\u7ee9(\u4e09\u6b21\u4e2d\u6700\u597d\u6210\u7ee9)\uff0c\u7ecf\u8fc7\u4e09\u4e2a\u6708\u8bad\u7ec3\u540e\u518d\u6d4b\u91cf\u4ed6\u4eec\u7684\u6210\u7ee9\u3002\u5b9e\u9a8c\u6570\u636e\u5982\u4e0b.</p> \u7f16\u53f7 1 2 3 4 5 6 7 8 \u8bad\u7ec3\u524d 189 193 230 210 198 230 210 198 \u8bad\u7ec3\u540e 220 195 234 231 225 228 238 240 \u6570\u636e\u5dee 31 2 4 21 27 13 4 16 \u7f16\u53f7 9 10 11 12 13 14 15 16 \u8bad\u7ec3\u524d 209 220 195 211 228 216 212 231 \u8bad\u7ec3\u540e 221 218 214 236 248 248 230 245 \u6570\u503c\u5dee 12 -2 19 25 20 32 18 14 <p>\u5047\u8bbe\u8bad\u7ec3\u524d\u540e\u6210\u7ee9\u5dee \\(D\\sim N(\\mu_D, \\sigma^2_D)\\) \uff0c\u6c42 \\(\\mu_D\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4.</p> Answer <p>\u8ba1\u7b97\u5f97 \\(\\overline{D} = 16\\) , \\(s_d = 10.24\\)</p> <p>\u67e5\u8868\u5f97 \\(t_{0.025}(15) = 2.1315\\)</p> \\[\\therefore (\\overline{D} - t_{0.025}(15)\\sqrt{\\frac{s^2_D}{n}},\\overline{D} + t_{0.025}(15)\\sqrt{\\frac{s^2_D}{n}}) = (10.5,21.5)\\] \u4f8b\u9898 6 <p>\u4e00\u4e2a\u56ed\u827a\u79d1\u5b66\u5bb6\u6b63\u5728\u57f9\u517b\u4e00\u4e2a\u65b0\u54c1\u79cd\u7684\u82f9\u679c\u8fd9\u79cd\u82f9\u679c\u9664\u4e86\u53e3\u611f\u597d\u548c\u989c\u8272\u9c9c\u8273\u4ee5\u5916\uff0c\u53e6\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\u662f\u5355\u4e2a\u91cd\u91cf\u5dee\u5f02\u4e0d\u5927.\u4e3a\u4e86\u8bc4\u4f30\u65b0\u82f9\u679c\uff0c\u5979\u968f\u673a\u6311\u9009\u4e86 25 \u4e2a\u6d4b\u8bd5\u91cd\u91cf (\u5355\u4f4d\uff1a\u514b) \u5176\u6837\u672c\u65b9\u5dee\u4e3a \\(s^2 = 4.25\\) \u8bd5\u6c42 \\(\\sigma^2\\) \u7684\u7f6e\u4fe1\u5ea6\u4e3a 95% \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4\u548c\u5355\u4fa7\u7f6e\u4fe1\u4e0a\u9650.</p> Answer <p>\u67e5\u8868\u5f97 \\(\\chi^2_{0.025}(24) = 39.4, \\chi^2_{0.975}(24) = 12.4, \\chi^2_{0.95}(24) = 13.85\\)</p> \\[\\therefore (\\frac{(n-1)s^2}{\\chi^2_{0.025}(n-1)}, \\frac{(n-1)s^2}{\\chi^2_{0.975}(n-1)}) = (2.59,8.23)\\] \\[\\therefore \\frac{(n-1)s^2}{\\chi^2_{0.95}(n-1)} = 7.36\\] \u4f8b\u9898 7 <p>\u4e24\u53f0\u673a\u5e8a\u751f\u4ea7\u540c\u4e00\u578b\u53f7\u6eda\u73e0.\u4ece\u7532\u673a\u5e8a\u751f\u4ea7\u7684\u6eda\u73e0\u4e2d\u53d6 8 \u4e2a\uff0c\u4ece\u4e59\u673a\u5e8a\u751f\u4ea7\u7684\u6eda\u73e0\u7684\u4e2d\u53d6 9 \u4e2a.\u6d4b\u5f97\u8fd9\u4e9b\u6eda\u73e0\u7684\u76f4\u5f84\uff08\u5355\u4f4d\uff1a\u6beb\u7c73\uff09\u5982\u4e0b\uff1a</p> <p>\u7532\u673a\u5e8a: 15.0 14.8 15.2 15.4 14.9 15.1 15.2 14.8</p> <p>\u4e59\u673a\u5e8a: 15.2 15.0 14.8 15.1 14.6 14.8 15.1 14.5 15.0</p> <p>\u8bbe\u4e24\u673a\u5e8a\u751f\u4ea7\u7684\u6eda\u73e0\u76f4\u5f84\u5206\u522b\u4e3a \\(X\\) \u548c \\(Y\\) \uff0c\u4e14 \\(X \\sim N(\\mu_1, \\sigma^2_1), Y \\sim N(\\mu_2, \\sigma^2_2)\\) \uff0c\u6c42\u7f6e\u4fe1\u6c34\u5e73\u4e3a 0.9 \u7684\u53cc\u4fa7\u7f6e\u4fe1\u533a\u95f4.</p> <p>(1) \\(\\sigma_1 = 0.18, \\sigma_2 = 0.24\\) \u6c42 \\(\\mu_1 - \\mu_2\\) \u7684\u7f6e\u4fe1\u533a\u95f4</p> <p>(2) \u82e5 \\(\\sigma_1 = \\sigma_2\\) \u4e14\u672a\u77e5\uff0c\u6c42 \\(\\mu_1 - \\mu_2\\) \u7684\u7f6e\u4fe1\u533a\u95f4</p> <p>(3) \u82e5 \\(\\sigma_1 \\neq \\sigma_2\\) \u4e14\u672a\u77e5\uff0c\u6c42 \\(\\mu_1 - \\mu_2\\) \u7684\u7f6e\u4fe1\u533a\u95f4</p> <p>(4) \u82e5 \\(\\mu_1, \\mu_2\\) \u5747\u672a\u77e5\uff0c\u6c42 \\(\\frac{\\sigma_1^2}{\\sigma_2^2}\\) \u7684\u7f6e\u4fe1\u533a\u95f4</p> Answer <p>\u8ba1\u7b97\u5f97 \\(\\overline{X} = 15.05, S_1^2 = 0.0457, \\overline{Y} = 14.9 , S_2^2 = 0.0575\\)</p> <ol> <li>\u67e5\u8868\u5f97 \\(z_{0.05} = 1.645\\)</li> </ol> \\[\\therefore (\\overline{X} - \\overline{Y} \\pm z_{\\frac{\\alpha}{2}}\\sqrt{\\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}}) = (-0.018,0.318)\\] <ol> <li>\u67e5\u8868\u5f97 \\(t_{0.05}(15) = 1.7531\\)</li> </ol> <p>\u8ba1\u7b97\u5f97 \\(S_w = 0.228\\)</p> \\[\\therefore (\\overline{X} - \\overline{Y} \\pm t_{\\frac{\\alpha}{2}}(n_1+n_2-2)\\sqrt{\\frac{S_w^2}{n_1} + \\frac{S_w^2}{n_2}}) = (-0.044,0.344)\\] <ol> <li>\\(k = min(n_1-1, n_2-1) = 7\\)</li> </ol> <p>\u67e5\u8868\u5f97 \\(t_{0.05}(7) = 1.895\\)</p> \\[\\therefore (\\overline{X} - \\overline{Y} \\pm t_{\\frac{\\alpha}{2}}(k)\\sqrt{\\frac{S_1^2}{n_1} + \\frac{S_2^2}{n_2}}) = (-0.058,0.358)\\] <ol> <li>\u67e5\u8868\u5f97 \\(F_{0.05}(7,8) = 3.50, F_{0.95}(7,8) = 0.268\\)</li> </ol> \\[\\therefore \\left(\\frac{\\S_1^2}{\\S_2^2} \\frac{1}{F_{\\frac{\\alpha}{2}}(n_1-1, n_2-1)} , \\frac{\\S_1^2}{\\S_2^2} \\frac{1}{F_{1-\\frac{\\alpha}{2}}(n_1-1, n_2-1)}\\right) = (0.227,2.965)\\] <p>Info</p> <p>\u7531(1)\u3001\uff082\uff09\u548c\uff083\uff09\u6c42\u5f97\u7684\u4e09\u4e2a\u533a\u95f4\u90fd\u5305\u542b\u4e86 0 \uff0c\u8bf4\u660e\u4e24\u673a\u5e8a\u751f\u4ea7\u7684\u6eda\u73e0\u7684\u5e73\u5747\u76f4\u5f84\u6ca1\u6709\u663e\u8457\u5dee\u5f02.</p> <p>(4)\u4e2d\u6240\u6c42\u7f6e\u4fe1\u533a\u95f4\u5305\u542b 1 ,\u8bf4\u660e\u4e24\u673a\u5e8a\u751f\u4ea7\u7684\u6eda\u73e0\u76f4\u5f84\u7684\u65b9\u5dee\u6ca1\u6709\u663e\u8457\u5dee\u5f02.</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/","title":"Chapter 8 \u5047\u8bbe\u68c0\u9a8c","text":"<p> \u7ea6 3701 \u4e2a\u5b57  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 19 \u5206\u949f</p> <p>\u7edf\u8ba1\u63a8\u65ad\u7684\u53e6\u4e00\u7c7b\u91cd\u8981\u95ee\u9898\u662f\u5047\u8bbe\u68c0\u9a8c\u95ee\u9898\u3002\u5b83\u5305\u62ec</p> <ol> <li> <p>[\u53c2\u6570\u68c0\u9a8c] \u5df2\u77e5\u603b\u4f53\u5206\u5e03\u7684\u5f62\u5f0f\uff0c\u9700\u5bf9\u5176\u4e2d\u7684\u672a\u77e5\u53c2\u6570\u7ed9\u51fa\u5047\u8bbe\u68c0\u9a8c</p> </li> <li> <p>[\u975e\u53c2\u6570\u68c0\u9a8c]\u603b\u4f53\u7684\u5206\u5e03\u5f62\u5f0f\u5b8c\u5168\u672a\u77e5\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u603b\u4f53\u7684\u5206\u5e03\u6216\u6570\u5b57\u7279\u5f81\u8fdb\u884c\u5047\u8bbe\u68c0\u9a8c</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_1","title":"\u5047\u8bbe","text":"<p>\u539f\u5047\u8bbe(\u96f6\u5047\u8bbe) \\(H_0\\) \uff0c \u5907\u62e9\u5047\u8bbe(\u5bf9\u7acb\u5047\u8bbe) \\(H_1\\) \u5173\u4e8e\u603b\u4f53\u53c2\u6570 \\(\\theta\\) \u7684\u5047\u8bbe\uff1a</p> \\[H_0:\\theta \\ge \\theta_0 , H_1:\\theta &lt; \\theta_0 \\text{(\u5de6\u8fb9\u68c0\u9a8c)}\\] \\[H_0:\\theta \\le \\theta_0 , H_1:\\theta &gt; \\theta_0 \\text{(\u53f3\u8fb9\u68c0\u9a8c)}\\] \\[H_0:\\theta = \\theta_0 , H_1:\\theta \\ne \\theta_0 \\text{(\u53cc\u8fb9\u68c0\u9a8c)}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_2","title":"\u68c0\u9a8c\u7edf\u8ba1\u91cf\u548c\u62d2\u7edd\u57df","text":"<p>\u5982\u679c\u7edf\u8ba1\u91cf \\(T = T(X_1, \\cdots, X_n)\\) \u7684\u53d6\u503c\u5927\u5c0f\u548c\u539f\u5047\u8bbe \\(H_0\\) \u662f\u5426\u6210\u7acb\u6709\u5bc6\u5207\u7ec3\u4e60\uff0c\u53ef\u5c06\u4e4b\u79f0\u4e3a\u5bf9\u5e94\u5047\u8bbe\u95ee\u9898\u7684 \u68c0\u9a8c\u7edf\u8ba1\u91cf\u3002</p> <p>\u5bf9\u5e94\u4e8e\u62d2\u7edd\u539f\u5047\u8bbe \\(H_0\\) \u65f6\uff0c\u6837\u672c\u503c\u7684\u8303\u56f4\u6210\u4e3a \u62d2\u7edd\u57df\uff0c \u8bb0\u4e3a \\(W\\) \uff0c \u5176\u8865\u96c6 \\(\\overline{W}\\) \u79f0\u4e3a \u63a5\u53d7\u57df\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_3","title":"\u4e24\u7c7b\u9519\u8bef","text":"<p>\u7531\u4e8e\u6837\u672c\u7684\u968f\u673a\u6027\uff0c\u4efb\u4e00\u68c0\u9a8c\u89c4\u5219\u5728\u5e94\u7528\u65f6\uff0c\u90fd\u6709\u53ef\u80fd\u53d1\u751f\u9519\u8bef\u7684\u5224\u65ad\u3002</p> \u539f\u5047\u8bbe\u4e3a\u771f \u539f\u5047\u8bbe\u4e3a\u5047 \u6839\u636e\u6837\u672c\u62d2\u7edd\u539f\u5047\u8bbe \u7b2c\u4e00\u7c7b\u9519\u8bef \u6b63\u786e\u51b3\u7b56 \u6839\u636e\u6837\u672c\u63a5\u53d7\u539f\u5047\u8bbe \u6b63\u786e\u51b3\u7b56 \u7b2c\u4e8c\u7c7b\u9519\u8bef <ul> <li> <p>\u7b2c\u4e00\u7c7b\u9519\u8bef\uff1a \u62d2\u7edd\u771f\u5b9e\u7684\u539f\u5047\u8bbe(\u5f03\u771f)</p> </li> <li> <p>\u7b2c\u4e8c\u7c7b\u9519\u8bef\uff1a \u63a5\u53d7\u9519\u8bef\u7684\u539f\u5047\u8bbe(\u53d6\u4f2a)</p> </li> </ul> <p>\u72af\u7b2c\u4e00\u7c7b\u9519\u8bef\u7684\u6982\u7387</p> \\[\\alpha = P\\{\\text{\u62d2\u7edd} H_0 | H_0 \\text{\u4e3a\u771f}\\} = P_{H_0}\\{\\text{\u62d2\u7edd}\\}H_0\\] <p>\u72af\u7b2c\u4e8c\u7c7b\u9519\u8bef\u7684\u6982\u7387</p> \\[\\beta = P\\{\\text{\u63a5\u53d7} H_0 | H_0 \\text{\u4e3a\u5047}\\} = P_{H_1}\\{\\text{\u63a5\u53d7}\\}H_0\\] <p>\u4f8b\u5982 \u8bbe\u67d0\u79cd\u6e05\u6f06\u76849\u4e2a\u6837\u54c1\uff0c\u5176\u5e72\u71e5\u65f6\u95f4\uff08\u4ee5\u5c0f\u65f6\u8ba1\uff09\u5206\u522b\u4e3a\uff1a 6.0 5.7 5.5 6.5 7.0 5.8 5.2 6.1 5.0 \u6839\u636e\u4ee5\u5f80\u7ecf\u9a8c\uff0c\u5e72\u71e5\u65f6\u95f4\u7684\u603b\u4f53\u670d\u4ece\u6b63\u6001\u5206\u5e03 N(6.0, 0.36)\uff0c \u73b0\u6839\u636e\u6837\u672c\u68c0\u9a8c\u5747\u503c\u662f\u5426\u4e0e\u4ee5\u5f80\u6709\u663e\u8457\u5dee\u5f02\uff1f (\u6837\u672c\u5747\u503c\u4e3a6.4)</p> <ul> <li>\u6b64\u65f6\u72af\u7b2c\u4e00\u7c7b\u9519\u8bef\u7684\u6982\u7387 </li> </ul> <p>\\(\\alpha(C) = P\\{\\text{\u62d2\u7edd} H_0 | H_0 \\text{\u4e3a\u771f}\\} = P\\{|\\overline{X}-6.0| \\ge C | \\mu = 6.0\\}\\)</p> <p>\\(= P\\{\\frac{|\\overline{X}-6.0|}{\\sqrt{\\frac{\\sigma^2}{n}}} \\ge \\frac{C}{\\sqrt{\\frac{\\sigma^2}{n}}} | \\mu = 6.0\\}\\)</p> <p>\u7531\u4e8e\u5f53 \\(H_0\\) \u6210\u7acb\u65f6\uff0c\u5373 \\(\\mu = 6.0\\) \uff0c \\(\\frac{\\overline{X}-6.0}{\\sqrt{\\frac{\\sigma^2}{n}}} \\sim N(0, 1)\\) \uff0c \u6240\u4ee5</p> <p>\\(\\alpha(C) = 2 - 2\\Phi(\\frac{C}{\\sqrt{\\frac{\\sigma^2}{n}}})\\)</p> <p>\u5173\u4e8e C \u662f\u5355\u8c03\u51cf\u51fd\u6570</p> <ul> <li>\u6b64\u65f6\u72af\u7b2c\u4e8c\u7c7b\u9519\u8bef\u7684\u6982\u7387</li> </ul> <p>\\(\\beta(C) = P\\{\\text{\u63a5\u53d7} H_0 | H_0 \\text{\u4e3a\u5047}\\} = P\\{|\\overline{X}-6.0| &lt; C | \\mu \\ne 6.0\\}\\)</p> <p>\\(= P\\{\\frac{6.0-C-\\mu}{\\sqrt{\\frac{\\sigma^2}{n}}} \\le \\frac{\\overline{X}-\\mu}{\\sqrt{\\frac{\\sigma^2}{n}}} \\le \\frac{6.0+C-\\mu}{\\sqrt{\\frac{\\sigma^2}{n}}} | \\mu \\ne 6.0\\}\\)</p> <p>\\(= \\Phi\\{\\frac{6.0+C-\\mu}{\\sqrt{\\frac{\\sigma^2}{n}}}\\} - \\Phi\\{\\frac{6.0-C-\\mu}{\\sqrt{\\frac{\\sigma^2}{n}}}\\},\\mu \\ne 6.0\\)</p> <p>\u5173\u4e8e C \u662f\u5355\u8c03\u589e\u51fd\u6570</p> <p>\u6240\u4ee5\uff0c\u72af\u4e24\u7c7b\u9519\u8bef\u7684\u6982\u7387\u76f8\u4e92\u5236\u7ea6\uff01</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#neyman-pearson","title":"Neyman-Pearson \u539f\u5219","text":"<p>\u9996\u5148\u63a7\u5236\u72af\u7b2c\u4e00\u7c7b\u9519\u8bef\u7684\u6982\u7387\u4e0d\u8d85\u8fc7\u67d0\u4e2a\u5e38\u6570 \\(\\alpha \\in (0,1)\\) ,\u518d\u5bfb\u627e\u68c0\u9a8c\uff0c\u4f7f\u5f97\u72af\u7b2c\u4e8c\u7c7b\u9519\u8bef\u7684\u6982\u7387\u5c3d\u53ef\u80fd\u5c0f\u3002</p> <p>\u5176\u4e2d\u7684\u5e38\u6570 \\(\\alpha\\) \u79f0\u4e3a\u663e\u8457\u6c34\u5e73\u3002</p> <p>\u5e38\u53d6 \\(\\alpha = 0.01,0.05,0.10\\) \u7b49\u3002</p> \u7ee7\u7eed\u4e0a\u9762\u7684\u4f8b\u9898 <p>\u5f53 \\(H_0\\) \u6210\u7acb\u65f6: </p> \\[Z = \\frac{\\overline{X}-6.0}{\\sqrt{\\frac{0.6^2}{9}}} \\sim N(0,1)\\] \\[\\Rightarrow P(\\frac{|\\overline{X}-6.0|}{0.6/3} \\ge z_{\\alpha/2}) = \\alpha\\] \\[\\Rightarrow \\text{\u62d2\u7edd\u6761\u4ef6\u4e3a:} \\frac{|\\overline{X} - 6.0|}{0.2} \\ge z_{\\alpha / 2}\\] <p>\u82e5\u53d6 \\(\\alpha = 0.05\\) ,\u5219\u62d2\u7edd\u57df\u4e3a \\(\\{|\\overline{X} - 6| \\ge 0.392|\\}\\)</p> <p>\\(\\because \\overline{x} = 6.4,|\\overline{x}-6|=0.4 &gt; 0.392\\)</p> <p>\u5373 \\(\\overline{x}\\) \u843d\u5728\u62d2\u7edd\u57df\u5185\uff0c \\(\\overline{x}\\) \u4e0e \\(\\mu = 6\\) \u7684\u5dee\u5f02\u663e\u8457\uff0c\u56e0\u6b64\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u8ba4\u4e3a\u5e72\u71e5\u65f6\u95f4\u7684\u5747\u503c\u4e0e\u4ee5\u5f80\u6709\u663e\u8457\u5dee\u5f02\u3002</p> <p>\u72af\u7b2c1\u7c7b\u9519\u8bef\u7684\u6982\u7387 \\(\\alpha(0.392)=0.05\\)</p> <p>\u72af\u7b2c2\u7c7b\u9519\u8bef\u7684\u6982\u7387 \\(\\beta(0.392) = P\\{\\text{\u63a5\u53d7}H_0|H_0\\text{\u662f\u5047\u7684}\\} = P\\{|\\overline{X}-6.0|&lt;0.392 | \\mu \\neq 6.0\\}\\)</p> <p>\\(= P\\{5.608 &lt; \\overline{X} &lt; 6.392| \\mu \\neq 6.0\\} = \\Phi\\{\\frac{6.392-\\mu}{0.2}\\} - \\Phi\\{\\frac{5.608-\\mu}{0.2}\\},\\mu \\neq 6.0\\)</p> <p>\u4f8b\u5f53 \\(\\mu = 5.4\\) \u65f6\uff0c</p> <p>\\(\\beta = \\Phi\\{\\frac{6.392-5.4}{0.2}\\} - \\Phi\\{\\frac{5.608-5.4}{0.2}\\} \\approx 0.15\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#p_","title":"P_ \u503c\u4e0e\u7edf\u8ba1\u663e\u8457\u6027","text":"<p>P_ \u503c: \u5f53\u539f\u5047\u8bbe\u6210\u7acb\u65f6\uff0c\u68c0\u9a8c\u7edf\u8ba1\u91cf\u53d6\u6bd4\u89c2\u5bdf\u5230\u7684\u7ed3\u679c\u66f4\u4e3a\u6781\u7aef\u7684\u6570\u503c\u7684\u6982\u7387.</p> \u4f8b1\u4e2dP_ \u503c\u7684\u8ba1\u7b97 <p>P_ = \\(P_{H_0}(|\\overline{X}-6.0| \\ge 0.4) = P_{H_0}(|\\frac{\\overline{X}-6.0}{0.2}| \\ge 2) = 2 - 2\\Phi(2) = 0.046 &lt; 0.05\\)</p> <p>\\(|\\overline{X}-6.0| &gt; 0.4\\) \u662f\u5c0f\u6982\u7387\u4e8b\u4ef6.\u4f5c\u51fa\u62d2\u7edd\u539f\u5047\u8bbe\u7684\u5224\u65ad.</p> <p>P_ \u503c\u4e0e\u663e\u8457\u6c34\u5e73 \\(\\alpha\\) \u7684\u5173\u7cfb:</p> <p>\u82e5 P_ \\(\\le \\alpha\\) ,\u5219\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u6b64\u65f6\u79f0\u68c0\u9a8c\u7ed3\u679c\u5728\u6c34\u5e73 \\(\\alpha\\) \u4e0b\u662f\u7edf\u8ba1\u663e\u8457\u7684.</p> <p>\u82e5 P_ \\(&gt; \\alpha\\) ,\u5219\u63a5\u53d7\u539f\u5047\u8bbe\uff0c\u6b64\u65f6\u79f0\u68c0\u9a8c\u7ed3\u679c\u5728\u6c34\u5e73 \\(\\alpha\\) \u4e0b\u662f\u7edf\u8ba1\u4e0d\u663e\u8457.</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_4","title":"\u5904\u7406\u5047\u8bbe\u68c0\u9a8c\u95ee\u9898\u7684\u57fa\u672c\u6b65\u9aa4","text":"<p>(1) \u6839\u636e\u5b9e\u9645\u95ee\u9898\u63d0\u51fa\u539f\u5047\u8bbe\u548c\u5907\u62e9\u5047\u8bbe\uff1b</p> <p>(2) \u63d0\u51fa\u68c0\u9a8c\u7edf\u8ba1\u91cf\u548c\u62d2\u7edd\u57df\u7684\u5f62\u5f0f\uff1b</p> <p>(3) \u5728\u7ed9\u5b9a\u7684\u663e\u8457\u6c34\u5e73 \\(\\alpha\\) \u4e0b\uff0c\u6839\u636e Neyman-Pearson \u539f\u5219\u6c42\u51fa\u62d2\u7edd\u57df\u7684\u4e34\u754c\u503c\u3002</p> <p>(4) \u6839\u636e\u5b9e\u9645\u6837\u672c\u89c2\u6d4b\u503c\u4f5c\u51fa\u5224\u65ad\u3002</p> <p>(3') \u8ba1\u7b97\u68c0\u9a8c\u7edf\u8ba1\u91cf\u7684\u89c2\u6d4b\u503c\u4e0e P_ \u503c\uff1b</p> <p>(4') \u6839\u636e\u7ed9\u5b9a\u7684\u663e\u8457\u6c34\u5e73 \\(\\alpha\\) ,\u4f5c\u51fa\u5224\u65ad.</p> <p>[\u6ce8\uff1a] \\(H_0\\) \u4e0e \\(H_1\\) \u5730\u4f4d\u4e0d\u7b49</p> <p>\u7531\u4e8e\u63a7\u5236\u72af\u7b2c1\u7c7b\u9519\u8bef\uff0c\u56e0\u6b64\u9519\u8bef\u62d2\u7edd \\(H_0\\) \u662f\u5c0f\u6982\u7387\u4e8b\u4ef6,\u4e5f\u5c31\u662f\u8bf4 \\(H_0\\) \u4e0d\u4f1a\u8f7b\u6613\u88ab\u62d2\u7edd\u6389\u3002\u56e0\u6b64\u5982\u679c\u843d\u5728\u62d2\u7edd\u57df\uff0c\u5219\u8bf4\u660e\u5df2\u6709\u4e86\u663e\u8457\u7684\u5dee\u5f02\uff0c\u4ece\u800c\u62d2\u7edd \\(H_0\\)</p> <p>\\(H_0\\) \u9009\u53d6: \u4e0d\u80fd\u8f7b\u6613\u62d2\u7edd\u7684\uff0c\u540e\u679c\u4e25\u91cd\u7684\uff0c\u6216\u7ef4\u6301\u73b0\u72b6\u7684</p> <p>\u5982: \\(H_0\\) : \u65b0\u6280\u672f\u672a\u63d0\u9ad8\u6548\u76ca \\(\\leftrightarrow H_1\\) : \u65b0\u6280\u672f\u63d0\u9ad8\u6548\u76ca</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_5","title":"\u5355\u4e2a\u6b63\u6001\u603b\u4f53\u53c2\u6570\u7684\u5047\u8bbe\u68c0\u9a8c","text":"<p>\u8bbe\u6837\u672c \\(X_1,X_2,\\dots,X_n\\) \u6765\u81ea\u6b63\u6001\u603b\u4f53 \\(N(\\mu,\\sigma^2)\\) , \\(\\overline{X}\\) \u548c \\(S^2\\) \u5206\u522b\u4e3a\u6837\u672c\u5747\u503c\u548c\u65b9\u5dee\uff0c\u663e\u8457\u6027\u6c34\u5e73\u4e3a \\(\\alpha\\)</p> \u6709\u5173\u5747\u503c \\(\\mu\\) \u7684\u68c0\u9a8c <p>\\(\\sigma^2\\) \u5df2\u77e5\u65f6\u2014\u2014Z\u68c0\u9a8c</p> <p>\u53cc\u8fb9\u5047\u8bbe\u95ee\u9898 \\(H_0 : \\mu = \\mu_0,H_1 : \\mu \\neq \\mu_0\\)</p> <p>\u53d6\u68c0\u9a8c\u7edf\u8ba1\u91cf\u4e3a \\(Z = \\frac{\\overline{X} - \\mu_0}{\\sigma / \\sqrt{n}}\\)</p> <p>\u5728 \\(H_0\\) \u4e3a\u771f\u65f6\uff0c \\(Z \\sim N(0,1)\\)</p> <p>\u6839\u636e Neyman-Pearson \u539f\u5219\uff0c\u68c0\u9a8c\u7684\u62d2\u7edd\u57df\u4e3a \\(W = \\{|z| = |\\frac{\\overline{x}-\\mu_0}{\\sigma / \\sqrt{n}}| \\ge z_{\\alpha / 2}\\}\\)</p> <p>P_ \u503c\u7684\u8ba1\u7b97 \u5bf9\u7ed9\u5b9a\u7684\u6837\u672c\u89c2\u5bdf\u503c \\(x_1,\\dots,x_n\\) ,\u8bb0\u68c0\u9a8c\u7edf\u8ba1\u91cf Z \u7684\u53d6\u503c\u4e3a \\(z_0 = \\frac{\\overline{x} - \\mu_0}{\\sigma / \\sqrt{n}}\\) \u5219\u6709</p> <p>P_ \\(= P_{H_0} \\{ |Z| \\ge |z_0| \\} = 2(1 - \\Phi (|z_0|))\\)</p> <p>\u5f53 P_ \u5c0f\u4e8e\u663e\u8457\u6c34\u5e73 \\(\\alpha\\) \u65f6\uff0c\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u5426\u5219\uff0c\u63a5\u53d7\u539f\u5047\u8bbe.</p> <p>\u53f3\u8fb9\u68c0\u9a8c \\(H_0 : \\mu \\le \\mu_0,H_1 : \\mu &gt; \\mu_0\\)</p> <p>\u68c0\u9a8c\u7edf\u8ba1\u91cf\u4e3a \\(\\overline{X}\\) , \u68c0\u9a8c\u62d2\u7edd\u57df\u7684\u5f62\u5f0f\u4e3a \\(\\overline{X} - \\mu_0 \\ge k\\)</p> <p>\u5f53 \\(\\mu \\in H_0\\) ,\u5373 \\(\\mu \\le \\mu_0\\) \u65f6</p> <p>\\(\\because \\overline{X} \\sim N(\\mu,\\frac{\\sigma^2}{n})\\)</p> <p>\\(\\therefore \\text{\u72af\u7b2c\u4e00\u7c7b\u9519\u8bef\u6982\u7387\u4e3a} P_{\\mu}\\{\\overline{X} - \\mu_0 \\ge k\\} = 1 - \\Phi(\\frac{k+\\mu_0 - \\mu}{\\sigma / \\sqrt{n}}) = \\Phi(\\frac{\\mu - \\mu_0 - k}{\\sigma / \\sqrt{n}}) \\text{\u662f} \\mu \\text{\u7684\u589e\u51fd\u6570}\\)</p> <p>\\(\\therefore \\text{\u5f53} \\mu = \\mu_0 \\text{\u65f6,\u72af\u7b2c\u4e00\u7c7b\u9519\u8bef\u6982\u7387\u6700\u5927.}\\)</p> <p>\u6545\u53ea\u8981 \\(\\Phi(\\frac{-k}{\\sigma / \\sqrt{n}}) = \\alpha\\) ,\u5373 \\(\\frac{-k}{\\sigma / \\sqrt{n}} = -z_{\\alpha}\\) \u4fbf\u53ef</p> <p>\u56e0\u6b64\uff0c\u62d2\u7edd\u57df\u4e3a\uff1a \\(\\{z = \\frac{\\overline{x} - \\mu_0}{\\sigma / \\sqrt{n}} \\ge z_{\\alpha} \\}\\)</p> <p>P_ \u503c\u7684\u8ba1\u7b97 P_ = \\(\\mathop{sup}\\limits_{\\mu \\le \\mu_0} P_{H_0} \\{Z \\ge z_0 \\} = P\\{Z \\ge z_0 | \\mu = \\mu_0 \\} = 1 - \\Phi (z_0)\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_6","title":"\u7ed3\u8bba","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#1-sigma2-mu-z","title":"1 \\(\\sigma^2\\) \u5df2\u77e5\u68c0\u9a8c \\(\\mu\\) (Z \u68c0\u9a8c\u6cd5)","text":"<p>\\(z_0 = \\frac{\\overline{x} - \\mu_0}{\\sigma / \\sqrt{n}}\\) ,\u5f53 \\(\\mu = \\mu_0\\) \u65f6\uff0c \\(Z = \\frac{\\overline{X} - \\mu_0}{\\sigma / \\sqrt{n}} \\sim N(0,1)\\)</p> <p>(1) \\(H_0 : \\mu = \\mu_0 \\leftrightarrow H_1 : \\mu \\ne \\mu_0\\) </p> <p>\u62d2\u7edd\u57df : \\(|Z| \\ge z_{\\alpha / 2}\\)</p> <p>P_ = \\(P_{\\mu_0} \\{|Z| \\ge |z_0| \\} = 2(1 - \\Phi(|z_0|))\\)</p> <p>(2) \\(H_0 : \\mu \\le \\mu_0 \\leftrightarrow H_1 : \\mu &gt; \\mu_0\\) </p> <p>\u62d2\u7edd\u57df : \\(Z \\ge z_{\\alpha}\\)</p> <p>P_ = \\(P_{\\mu_0} \\{Z \\ge z_0 \\} = 1 - \\Phi(z_0)\\)</p> <p>(3) \\(H_0 : \\mu \\ge \\mu_0 , H_1 : \\mu &lt; \\mu_0\\)</p> <p>\u62d2\u7edd\u57df : \\(Z \\le -z_{\\alpha}\\)</p> <p>P_ = \\(P_{\\mu_0} \\{Z \\le z_0 \\} = \\Phi(z_0)\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#2-sigma2-mu-t","title":"2 \\(\\sigma^2\\) \u672a\u77e5\u68c0\u9a8c \\(\\mu\\) (t \u68c0\u9a8c\u6cd5)","text":"<p>\\(t_0 = \\frac{\\overline{x} - \\mu_0}{s / \\sqrt{n}}\\) ,\u5f53 \\(\\mu = \\mu_0\\) \u65f6\uff0c \\(t = \\frac{\\overline{X} - \\mu_0}{s / \\sqrt{n}} \\sim t(n-1)\\)</p> <p>(1) \\(H_0 : \\mu = \\mu_0 \\leftrightarrow H_1 : \\mu \\ne \\mu_0\\) </p> <p>\u62d2\u7edd\u57df : \\(|t| \\ge t_{\\alpha / 2}(n-1)\\)</p> <p>P_ = \\(P_{\\mu_0} \\{|t| \\ge |t_0| \\} = 2P(t(n-1) \\ge |t_0|)\\)</p> <p>(2) \\(H_0 : \\mu \\le \\mu_0 \\leftrightarrow H_1 : \\mu &gt; \\mu_0\\) </p> <p>\u62d2\u7edd\u57df : \\(t \\ge t_{\\alpha}(n-1)\\)</p> <p>P_ = \\(P_{\\mu_0} \\{t \\ge t_0 \\} = P(t(n-1) \\ge t_0)\\)</p> <p>(3) \\(H_0 : \\mu \\ge \\mu_0 , H_1 : \\mu &lt; \\mu_0\\)</p> <p>\u62d2\u7edd\u57df : \\(t \\le -t_{\\alpha}(n-1)\\)</p> <p>P_ = \\(P_{\\mu_0} \\{t \\le t_0 \\} = P(t(n-1) \\le t_0)\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#3-mu-sigma2-chi2","title":"3 \\(\\mu\\) \u672a\u77e5\u68c0\u9a8c \\(\\sigma^2\\) (\\(\\chi^2\\) \u68c0\u9a8c\u6cd5)","text":"<p>\u5f53 \\(\\sigma^2 = \\sigma_0^2\\) \u65f6\uff0c \\(\\chi^2 = \\frac{(n-1)s^2}{\\sigma_0^2} \\sim \\chi^2(n-1)\\)</p> <p>(1) \\(H_0 : \\sigma^2 = \\sigma_0^2 \\leftrightarrow H_1 : \\sigma^2 \\ne \\sigma_0^2\\)</p> <p>\u62d2\u7edd\u57df : \\(\\chi^2 \\le \\chi^2_{1-\\alpha / 2}(n-1) \\text{ \u6216 } \\chi^2 \\ge \\chi^2_{\\alpha / 2}(n-1)\\)</p> <p>(2) \\(H_0 : \\sigma^2 \\le \\sigma_0^2 \\leftrightarrow H_1 : \\sigma^2 &gt; \\sigma_0^2\\)</p> <p>\u62d2\u7edd\u57df : \\(\\chi^2 \\ge \\chi^2_{\\alpha}(n-1)\\)</p> <p>(3) \\(H_0 : \\sigma^2 \\ge \\sigma_0^2 \\leftrightarrow H_1 : \\sigma^2 &lt; \\sigma_0^2\\)</p> <p>\u62d2\u7edd\u57df : \\(\\chi^2 \\le \\chi^2_{1-\\alpha}(n-1)\\)</p> <p>P_ \u503c\u8ba1\u7b97\uff1a</p> <p>\u8bbe \\(p = P_{\\sigma_0^2} \\{\\frac{(n-1)S^2}{\\sigma_0^2} \\le \\frac{(n-1)s^2}{\\sigma_0^2} \\} = P\\{\\chi^2(n-1) \\le \\chi^2_0 \\}\\)</p> <p>\u5176\u4e2d\uff0c\u5bf9\u6837\u672c\u89c2\u5bdf\u503c \\(x_1, x_2, \\cdots, x_n\\)\uff0c\\(s^2 = \\frac{1}{n-1}\\sum\\limits_{i=1}^n (x_i - \\overline{x})^2\\) , \\(\\chi_0^2 = \\frac{(n-1)s^2}{\\sigma_0^2}\\)</p> <ol> <li> <p>\u5bf9\u4e8e\u53cc\u8fb9\u68c0\u9a8c</p> <p>\u62d2\u7edd\u57df : \\(\\frac{(n-1)S^2}{\\sigma_0^2} \\ge \\chi^2_{\\alpha / 2}(n-1) \\text{ \u6216 } \\frac{(n-1)S^2}{\\sigma_0^2} \\le \\chi^2_{1-\\alpha / 2}(n-1)\\)</p> <p>P_ = 2min(p,1-p)</p> <p>\u5f53 P_ \\(\\le \\alpha\\) , \u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u5f53 P_ \\(&gt; \\alpha\\) , \u63a5\u53d7\u539f\u5047\u8bbe</p> </li> <li> <p>\u7c7b\u4f3c\u7684\uff0c\u5bf9\u4e8e\u5de6\u8fb9\u68c0\u9a8c</p> <p>\\(H_0 : \\sigma^2 \\ge \\sigma_0^2 , H_1 : \\sigma^2 &lt; \\sigma_0^2\\)</p> <p>\u62d2\u7edd\u57df : \\(\\frac{(n-1)S^2}{\\sigma_0^2} \\le \\chi^2_{1-\\alpha}(n-1)\\)</p> <p>P_ = p = \\(\\mathop{sup} P_{H_0} \\{\\frac{(n-1)S^2}{\\sigma_0^2} \\le \\frac{(n-1)s^2}{\\sigma_0^2} \\} = P\\{\\chi^2(n-1) \\le \\chi^2_0 \\}\\)</p> <p>\u5f53 P_ \\(\\le \\alpha\\) , \u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u5f53 P_ \\(&gt; \\alpha\\) , \u63a5\u53d7\u539f\u5047\u8bbe</p> </li> <li> <p>\u7c7b\u4f3c\u7684\uff0c\u5bf9\u4e8e\u53f3\u8fb9\u68c0\u9a8c</p> <p>\\(H_0 : \\sigma^2 \\le \\sigma_0^2 , H_1 : \\sigma^2 &gt; \\sigma_0^2\\)</p> <p>\u62d2\u7edd\u57df : \\(\\frac{(n-1)S^2}{\\sigma_0^2} \\ge \\chi^2_{\\alpha}(n-1)\\)</p> <p>P_ = 1-p = \\(\\mathop{sup} P_{H_0} \\{\\frac{(n-1)S^2}{\\sigma_0^2} \\ge \\frac{(n-1)s^2}{\\sigma_0^2} \\} = P\\{\\chi^2(n-1) \\ge \\chi^2_0 \\}\\)</p> <p>\u5f53 P_ \\(\\le \\alpha\\) , \u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u5f53 P_ \\(&gt; \\alpha\\) , \u63a5\u53d7\u539f\u5047\u8bbe</p> </li> </ol> Question <p>\u67d0\u79cd\u5143\u4ef6\u7684\u5bff\u547d X\uff08\u4ee5\u5c0f\u65f6\u8bb0\uff09\u670d\u4ece\u6b63\u6001\u5206\u5e03 \\(N(\\mu, \\sigma^2)\\) \uff0c\u5176\u4e2d \\(\\mu\\) \u548c \\(\\sigma^2\\) \u5747\u672a\u77e5\u3002\u73b0\u6d4b\u5f9716\u53ea\u5143\u4ef6\u7684\u5bff\u547d\u5982\u4e0b\uff1a</p> <p>159 280 101 212 224 379 179 264</p> <p>222 362 168 250 149 260 485 170</p> <p>\u95ee\u662f\u5426\u6709\u7406\u7531\u8ba4\u4e3a\u5143\u4ef6\u7684\u5e73\u5747\u5bff\u547d\u5927\u4e8e225\uff08\u5c0f\u65f6\uff09\uff1f\uff08\u53d6\u663e\u8457\u6027\u6c34\u5e73\u4e3a0.05\uff09</p> Answer <p>\u6309\u9898\u610f\u9700\u68c0\u9a8c</p> <p>\\(H_0 : \\mu \\le \\mu_0 = 225 , H_1 : \\mu &gt; \\mu_0 = 225\\)</p> <p>\u62d2\u7edd\u57df\u4e3a : \\(T = \\frac{\\overline{X} - \\mu_0}{S/\\sqrt{n}} &gt; t_{\\alpha}(n-1)\\)</p> <p>\\(n = 16 , t_{0.05}(15) = 1.7531. \\overline{x} = 241.5,s = 98.7259\\)</p> <p>\u8ba1\u7b97\u5f97 : \\(t_0 = \\frac{\\overline{x} - \\mu_0}{s/\\sqrt{n}} = 0.6685 &lt; 1.7531\\)</p> <p>\u6ca1\u6709\u843d\u5728\u62d2\u7edd\u57df\u5185\uff0c\u6545\u4e0d\u80fd\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u8ba4\u4e3a\u5143\u4ef6\u7684\u5e73\u5747\u5bff\u547d\u4e0d\u5927\u4e8e225\u5c0f\u65f6\u3002</p> <p>P_ = \\(P_{H_0} \\{T &gt; t_0 \\} = P\\{t(15) &gt; 0.6685 \\} \\approx 0.257 &gt; 0.05\\)</p> <p>\u56e0\u6b64\u63a5\u53d7\u539f\u5047\u8bbe\uff0c\u5373\u8ba4\u4e3a\u5143\u4ef6\u7684\u5e73\u5747\u5bff\u547d\u4e0d\u5927\u4e8e 225 \u5c0f\u65f6\u3002</p> <p>\u5224\u65ad\u7ed3\u679c\u4e0e\u524d\u9762\u4e00\u81f4\u3002</p> Question <p>\u8981\u6c42\u67d0\u79cd\u5143\u4ef6\u7684\u5e73\u5747\u4f7f\u7528\u5bff\u547d\u4e0d\u5f97\u4f4e\u4e8e 1000 \u5c0f\u65f6\uff0c\u751f\u4ea7\u8005\u4ece\u4e00\u6279\u8fd9\u79cd\u5143\u4ef6\u4e2d\u968f\u673a\u62bd\u53d6 25 \u4ef6\uff0c\u6d4b\u5f97\u5176\u5e73\u5747\u5bff\u547d\u4e3a950\u5c0f\u65f6\uff0c\u6807\u51c6\u5dee\u4e3a 100 \u5c0f\u65f6\u3002\u5df2\u77e5\u8fd9\u6279\u5143\u4ef6\u7684\u5bff\u547d\u670d\u4ece\u6b63\u6001\u5206\u5e03\u3002\u8bd5\u5728\u663e\u8457\u6027\u6c34\u5e73 0.05 \u4e0b\u786e\u5b9a\u8fd9\u6279\u5143\u4ef6\u662f\u5426\u5408\u683c\uff1f</p> Answer <p>\u6309\u9898\u610f\u9700\u68c0\u9a8c</p> <p>\\(H_0 : \\mu \\ge \\mu_0 = 1000 , H_1 : \\mu &lt; \\mu_0 = 1000\\)</p> <p>\u62d2\u7edd\u57df\u4e3a : \\(t = \\frac{\\overline{X} - \\mu_0}{S/\\sqrt{n}} &lt; -t_{\\alpha}(n-1)\\)</p> <p>\\(n = 25 , t_{0.05}(24) = -1.7109, \\overline{x} = 950 , s = 100\\)</p> <p>\u8ba1\u7b97\u5f97 : \\(t = \\frac{\\overline{X} - \\mu_0}{S/\\sqrt{n}} = -2.5 &lt; -1.7109\\)</p> <p>t\u843d\u5728\u62d2\u7edd\u57df\u5185\uff0c\u6545\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u8ba4\u4e3a\u8fd9\u6279\u5143\u4ef6\u7684\u5e73\u5747\u5bff\u547d\u5c0f\u4e8e1000\u5c0f\u65f6\uff0c\u4e0d\u5408\u683c\u3002</p> <p>P_ = \\(P_{H_0} \\{T &lt; t_0 \\} = P\\{t(24) &lt; -2.5 \\} \\approx 0.000866 &lt; 0.05\\)</p> <p>\u56e0\u6b64\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u5224\u65ad\u7ed3\u679c\u4e0e\u524d\u9762\u4e00\u81f4\u3002</p> Question <p>\u4e00\u4e2a\u56ed\u827a\u79d1\u5b66\u5bb6\u6b63\u5728\u57f9\u517b\u4e00\u4e2a\u65b0\u54c1\u79cd\u7684\u82f9\u679c \u8fd9\u79cd\u82f9\u679c\u9664\u4e86\u53e3\u611f\u597d\u548c\u989c\u8272\u9c9c\u8273\u4ee5\u5916 \u53e6\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\u662f\u5355\u4e2a\u91cd\u91cf\u5dee\u5f02\u4e0d\u5927\uff08\u5bf9\u7167\u54c1\u79cd\u7684\u65b9\u5dee \\(\\sigma^2 = 7\\) \uff09.\u4e3a\u4e86\u8bc4\u4f30\u65b0\u82f9\u679c \u5979\u968f\u673a\u6311\u9009\u4e86 25 \u4e2a\u6d4b\u8bd5\u91cd\u91cf (\u5355\u4f4d\uff1a\u514b) \u5176\u6837\u672c\u65b9\u5dee\u4e3a \\(S^2 = 4.25\\) \u5728 \\(\\alpha = 0.05\\) \u4e0b\u68c0\u9a8c\u65b0\u54c1\u79cd\u662f\u5426\u6bd4\u5bf9\u7167\u54c1\u79cd\u65b9\u5dee\u5c0f\uff1f</p> Answer <p>\\(H_0 : \\sigma^2 \\ge 7 , H_1 : \\sigma^2 &lt; 7\\)</p> <p>\u67e5\u8868\u5f97 \\(\\chi^2_{0.95}(24) = 13.848\\)</p> <p>\u8ba1\u7b97\u5f97 \\(\\frac{(25-1)\\times 4.25}{7} = 14.57 &gt; 13.848\\)</p> <p>\u4e0d\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u5373\u8ba4\u4e3a\u65b0\u54c1\u79cd\u7684\u65b9\u5dee\u5e76\u4e0d\u6bd4\u5bf9\u7167\u7ec4\u7684\u5c0f\u3002</p> <p>P_ = \\(P\\{\\chi^2(24) \\le 14.57 \\} = 0.06729 &gt; 0.05\\) \u4f5c\u51fa\u540c\u6837\u5224\u65ad</p> Question <p>\u4e3a\u4e86\u8bd5\u9a8c\u4e24\u79cd\u4e0d\u540c\u8c37\u7269\u79cd\u5b50\u7684\u4f18\u52a3\uff0c\u9009\u53d6\u4e86\u5341\u5757\u571f\u8d28\u4e0d\u540c\u7684\u571f\u5730\uff0c\u5e76\u5c06\u6bcf\u5757\u571f\u5730\u5206\u4e3a\u9762\u79ef\u76f8\u540c\u7684\u4e24\u90e8\u5206\uff0c\u5206\u522b\u79cd\u690d\u8fd9\u4e24\u79cd\u79cd\u5b50\u3002\u8bbe\u5728\u6bcf\u5757\u571f\u5730\u7684\u4e24\u90e8\u5206\u4eba\u5de5\u7ba1\u7406\u7b49\u6761\u4ef6\u5b8c\u5168\u4e00\u6837\u3002\u4e0b\u9762\u7ed9\u51fa\u5404\u5757\u571f\u5730\u4e0a\u7684\u4ea7\u91cf\u3002</p> \u571f\u5730 1 2 3 4 5 6 7 8 9 10 \u79cd\u5b50A(xi) 23 35 29 42 39 29 37 34 35 28 \u79cd\u5b50B(yi) 26 39 35 40 38 24 36 27 41 27 di=xi-yi -3 -4 -6 2 1 5 1 7 -6 1 <p>\u95ee\uff1a\u4ee5\u8fd9\u4e24\u79cd\u79cd\u5b50\u79cd\u690d\u7684\u8c37\u7269\u4ea7\u91cf\u662f\u5426\u6709\u663e\u8457\u7684\u5dee\u5f02\uff08\u53d6\u663e\u8457\u6027\u6c34\u5e73\u4e3a0.05\uff09?</p> Answer <p>\u68c0\u9a8c\u5047\u8bbe \\(H_0 : \\mu_D = 0 , H_1 : \\mu_D \\ne 0\\)</p> <p>\u5206\u522b\u5c06 \\(D_1,D_2,\\cdots,D_n\\) \u7684\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\u8bb0\u4e3a \\(\\overline{D},S^2_D\\)</p> <p>\u62d2\u7edd\u57df\uff1a\\(\\frac{|\\overline{D}|}{S_D/\\sqrt{n}} \\ge t_{\\alpha/2}(n-1)\\)</p> <p>\\(n = 10\\) \u67e5\u8868\u5f97 \\(t_{0.025}(9) = 2.2622 ,\\\\overline{d} = -0.2, s_d = 4.442\\)</p> <p>\u8ba1\u7b97\u5f97 \\(\\frac{|\\overline{d}|}{s_d/\\sqrt{n}} = 0.142 &lt; 2.2622\\)</p> <p>\u63a5\u53d7\u539f\u5047\u8bbe \\(H_0\\) \u8ba4\u4e3a\u4e24\u79cd\u79cd\u5b50\u7684\u4ea7\u91cf\u6ca1\u6709\u663e\u8457\u5dee\u5f02\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_7","title":"\u4e24\u4e2a\u6b63\u6001\u603b\u4f53\u53c2\u6570\u7684\u5047\u8bbe\u68c0\u9a8c","text":"<p>\u4e24\u4e2a\u6b63\u6001\u603b\u4f53 \\(N(\\mu_1,\\sigma_1^2),N(\\mu_2,\\sigma_2^2)\\) \u7684\u68c0\u9a8c</p> <p>\\(X_1,X_2,\\cdots,X_{n_1}\\) \u6765\u81ea \\(N(\\mu_1,\\sigma_1^2)\\) \uff0c\\(Y_1,Y_2,\\cdots,Y_{n_2}\\) \u6765\u81ea \\(N(\\mu_2,\\sigma_2^2)\\)</p> <p>\\(\\overline{X} ,\\overline{Y},S_1^2,S_2^2\\) \u5206\u522b\u662f \\(X_1,X_2,\\cdots,X_{n_1}\\) \uff0c\\(Y_1,Y_2,\\cdots,Y_{n_2}\\) \u7684\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee.\u663e\u8457\u6027\u6c34\u5e73\u4e3a \\(\\alpha\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_8","title":"\u7ed3\u8bba","text":""},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#1-sigma_12sigma_22-mu_1-mu_2-z","title":"1 \\(\\sigma_1^2,\\sigma_2^2\\) \u5df2\u77e5\u68c0\u9a8c \\(\\mu_1-\\mu_2\\) Z \u68c0\u9a8c\u6cd5\uff09","text":"<p>\u5f53 \\(\\mu_1 - \\mu_2 = \\delta\\) \u65f6\uff0c \\(Z = \\frac{(\\overline{X}-\\overline{Y})-\\delta}{\\sqrt{\\frac{\\sigma_1^2}{n_1}+\\frac{\\sigma_2^2}{n_2}}} \\sim N(0,1)\\)</p> <p>(1) \\(H_0 : \\mu_1 - \\mu_2 = \\delta\\)</p> <p>\u62d2\u7edd\u57df : \\(|Z| \\ge z_{\\alpha/2}\\)</p> <p>(2) \\(H_0 : \\mu_1 - \\mu_2 \\le \\delta\\)</p> <p>\u62d2\u7edd\u57df : \\(Z \\ge z_{\\alpha}\\)</p> <p>(3) \\(H_0 : \\mu_1 - \\mu_2 \\ge \\delta\\)</p> <p>\u62d2\u7edd\u57df : \\(Z \\le -z_{\\alpha}\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#2-sigma_12-sigma_22-mu_1-mu_2t","title":"2 \\(\\sigma_1^2 = \\sigma_2^2\\) \u672a\u77e5\u68c0\u9a8c \\(\\mu_1-\\mu_2\\)\uff08t \u68c0\u9a8c\u6cd5\uff09","text":"<p>\u5f53 \\(\\mu_1 - \\mu_2 = \\delta\\) \u65f6\uff0c \\(t = \\frac{(\\overline{X}-\\overline{Y})-\\delta}{\\sqrt{\\frac{S_w^2}{n_1}+\\frac{S_w^2}{n_2}}} \\sim t(n_1+n_2-2)\\)</p> <p>(1) \\(H_0 : \\mu_1 - \\mu_2 = \\delta\\)</p> <p>\u62d2\u7edd\u57df : \\(|t| \\ge t_{\\alpha/2}(n_1+n_2-2)\\)</p> <p>(2) \\(H_0 : \\mu_1 - \\mu_2 \\le \\delta\\)</p> <p>\u62d2\u7edd\u57df : \\(t \\ge t_{\\alpha}(n_1+n_2-2)\\)</p> <p>(3) \\(H_0 : \\mu_1 - \\mu_2 \\ge \\delta\\)</p> <p>\u62d2\u7edd\u57df : \\(t \\le -t_{\\alpha}(n_1+n_2-2)\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#3-mu_1mu_2-fracsigma_12sigma_22f","title":"3 \\(\\mu_1,\\mu_2\\) \u672a\u77e5\u68c0\u9a8c \\(\\frac{\\sigma_1^2}{\\sigma_2^2}\\)\uff08F \u68c0\u9a8c\u6cd5\uff09","text":"<p>\u5f53 \\(\\sigma_1^2 = \\sigma_2^2\\) \u65f6\uff0c \\(F = \\frac{S_1^2}{S_2^2} \\sim F(n_1-1,n_2-1)\\)</p> <p>(1) \\(H_0 : \\sigma_1^2 = \\sigma_2^2 \\leftrightarrow H_1 : \\sigma_1^2 \\neq \\sigma_2^2\\)</p> <p>\u62d2\u7edd\u57df : \\(F \\le F_{1 - \\alpha/2}(n_1-1,n_2-1)\\) \u6216 \\(F \\ge F_{\\alpha/2}(n_1-1,n_2-1)\\)</p> <p>(2) \\(H_0 : \\sigma_1^2 \\le \\sigma_2^2 \\leftrightarrow H_1 : \\sigma_1^2 &gt; \\sigma_2^2\\)</p> <p>\u62d2\u7edd\u57df : \\(F \\ge F_{\\alpha}(n_1-1,n_2-1)\\)</p> <p>(3) \\(H_0 : \\sigma_1^2 \\ge \\sigma_2^2 \\leftrightarrow H_1 : \\sigma_1^2 &lt; \\sigma_2^2\\)</p> <p>\u62d2\u7edd\u57df : \\(F \\le F_{1 - \\alpha}(n_1-1,n_2-1)\\)</p> Question <p>\u67d0\u5382\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u539f\u6599A,B\u751f\u4ea7\u540c\u4e00\u7c7b\u578b\u4ea7\u54c1\u3002\u5404\u5728\u4e00\u5468\u7684\u4ea7\u54c1\u4e2d\u53d6\u6837\u5206\u6790\u3002\u53d6\u7528\u539f\u6599A\u751f\u4ea7\u7684\u6837\u54c1 220 \u4ef6\uff0c\u6d4b\u5f97\u5e73\u5747\u91cd\u91cf\u4e3a 2.46 \uff08\u516c\u65a4\uff09\uff0c\u6837\u672c\u6807\u51c6\u5dee s=0.57\uff08\u516c\u65a4\uff09\u3002\u53d6\u7528\u539f\u6599 B \u751f\u4ea7\u7684\u6837\u54c1 205 \u4ef6\uff0c\u6d4b\u5f97\u5e73\u5747\u91cd\u91cf\u4e3a 2.55 \uff08\u516c\u65a4\uff09\uff0c\u6837\u672c\u6807\u51c6\u5dee\u4e3a 0.48 \uff08\u516c\u65a4\uff09\u3002\u8bbe\u4e24\u6837\u672c\u72ec\u7acb\uff0c\u6765\u81ea\u4e24\u4e2a\u65b9\u5dee\u76f8\u540c\u7684\u72ec\u7acb\u6b63\u6001\u603b\u4f53\u3002\u95ee\u5728\u6c34\u5e73 0.05 \u4e0b\u80fd\u5426\u8ba4\u4e3a\u7528\u539f\u6599 B \u7684\u4ea7\u54c1\u5e73\u5747\u91cd\u91cf\u8f83\u7528\u539f\u6599 A \u7684\u4e3a\u5927\u3002</p> Answer <p>\u68c0\u9a8c\u5047\u8bbe \\(H_0 : \\mu_1 \\ge \\mu_2 , H_1 : \\mu_1 &lt; \\mu_2\\)</p> <p>\u62d2\u7edd\u57df\u4e3a : \\(\\frac{\\overline{X} - \\overline{Y}}{\\sqrt{\\frac{s_w^2}{n_1} + \\frac{s_w^2}{n_2}}} &lt; -t_{\\alpha}(n_1+n_2-2)\\)</p> <p>\\(n_1 = 220, n_2 = 205, \\overline{x} = 2.46, \\overline{y} = 2.55, s_2 = 0.48\\)</p> <p>\\(t_{0.05}(423) \\approx z_{0.05} = 1.645,s_w = 0.535,\\sqrt{\\frac{1}{n_1} + \\frac{1}{n_2}} = 0.097\\)</p> <p>\u8ba1\u7b97\u5f97 : \\(\\frac{\\overline{X} - \\overline{Y}}{\\sqrt{\\frac{s_w^2}{n_1} + \\frac{s_w^2}{n_2}}} = -1.733 &lt; -1.645\\)</p> <p>\u4ece\u800c\u62d2\u7edd\u539f\u5047\u8bbe.</p> Question <p>\u4e24\u53f0\u673a\u5e8a\u751f\u4ea7\u540c\u4e00\u4e2a\u578b\u53f7\u7684\u6eda\u73e0\uff0c\u4ece\u7532\u673a\u5e8a\u751f\u4ea7\u7684\u6eda\u73e0\u4e2d\u62bd\u53d6 8 \u4e2a\uff0c\u4ece\u4e59\u673a\u5e8a\u751f\u4ea7\u7684\u6eda\u73e0\u4e2d\u62bd\u53d6 9 \u4e2a\uff0c\u6d4b\u5f97\u8fd9\u4e9b\u6eda\u73e0\u7684\u76f4\u5f84(\u6beb\u7c73)\u5982\u4e0b:</p> <p>\u7532\u673a\u5e8a 15.0 14.8 15.2 15.4 14.9 15.1 15.2 14.8</p> <p>\u4e59\u673a\u5e8a 15.2 15.0 14.8 15.1 14.6 14.8 15.1 14.5 15.0</p> <p>\u8bbe\u4e24\u673a\u5e8a\u751f\u4ea7\u7684\u6eda\u73e0\u76f4\u5f84\u5206\u522b\u4e3a \\(X\\) , \\(Y\\) ,\u4e14 \\(X \\sim N(\\mu_1,\\sigma_1^2),Y \\sim N(\\mu_2,\\sigma_2^2)\\)</p> <p>(1) \u68c0\u9a8c\u5047\u8bbe \\(H_0 : \\sigma_1^2 = \\sigma_2^2 , H_1 : \\sigma_1^2 \\ne \\sigma_2^2 (\\alpha = 0.1)\\)</p> <p>(2) \u68c0\u9a8c\u5047\u8bbe \\(H_0 : \\mu_1 \\le \\mu_2 , H_1 : \\mu_1 &gt; \\mu_2 (\\alpha = 0.1)\\)</p> <p>(3) \u68c0\u9a8c\u5047\u8bbe \\(H_0 : \\mu_1 = \\mu_2 , H_1 : \\mu_1 \\ne \\mu_2 (\\alpha = 0.1)\\)</p> Answer <ol> <li>\u5f53 \\(\\mu_1,\\mu_2\\) \u672a\u77e5\u65f6,\u68c0\u9a8c \\(H_0 : \\sigma_1^2 = \\sigma_2^2 , H_1 : \\sigma_1^2 \\ne \\sigma_2^2\\) \u7684\u62d2\u7edd\u57df\u4e3a : \\(\\frac{S_1^2}{S_2^2} \\le F_{1-\\alpha/2}(n_1-1,n_2-1)\\) \u6216 \\(\\frac{S_1^2}{S_2^2} \\ge F_{\\alpha/2}(n_1-1,n_2-1)\\)</li> </ol> <p>\u67e5\u8868\u5f97 \\(F_{0.05}(7,8) = 3.50,F_{0.95}(7,8) = \\frac{1}{F_{0.05}(8,7)} = 0.268\\)</p> <p>\\(n_1 = 8, n_2 = 9, \\overline{x} = 15.05, \\overline{y} = 14.9,S_1^2 = 0.0457, S_2^2 = 0.0575\\)</p> <p>\u8ba1\u7b97\u5f97 : \\(0.268 &lt; \\frac{S_1^2}{S_2^2} = 0.795 &lt; 3.50\\)</p> <p>\u4e0d\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u6545\u8ba4\u4e3a\u65b9\u5dee\u6ca1\u6709\u663e\u8457\u5dee\u5f02\u3002</p> <p>\u4ee4 \\(p = P(F(7,8) \\le 0.795) = 0.3875\\)</p> <p>P_ = 2min(p,1-p) = 0.775 &gt; 0.05 \u63a5\u53d7\u539f\u5047\u8bbe</p> <ol> <li>\\(H_0 : \\mu_1 \\le \\mu_2 , H_1 : \\mu_1 &gt; \\mu_2\\)\u7684\u62d2\u7edd\u57df\u4e3a : \\(\\frac{\\overline{X}-\\overline{Y}}{\\sqrt{\\frac{S_w^2}{n_1}+\\frac{S_w^2}{n_2}}} &gt; t_{\\alpha}(n_1+n_2-2)\\)</li> </ol> <p>\\(t_{0.1}(15) = 1.3406,S_w = 0.228, \\sqrt{\\frac{1}{n_1}+\\frac{1}{n_2}} = 0.486\\)</p> <p>\u8ba1\u7b97\u5f97 : \\(\\frac{\\overline{X}-\\overline{Y}}{\\sqrt{\\frac{S_w^2}{n_1}+\\frac{S_w^2}{n_2}}} = 1.354 &gt; 1.3406\\) \u4ece\u800c\u62d2\u7edd\u539f\u5047\u8bbe</p> <p>P_ = \\(P\\{t(15) \\ge 1.354\\} = 0.098 &lt; 0.1\\)</p> <ol> <li>\\(H_0 : \\mu_1 = \\mu_2 , H_1 : \\mu_1 \\ne \\mu_2\\)\u7684\u62d2\u7edd\u57df\u4e3a : \\(|\\frac{\\overline{X}-\\overline{Y}}{\\sqrt{\\frac{S_w^2}{n_1}+\\frac{S_w^2}{n_2}}}| \\ge t_{\\alpha/2}(n_1+n_2-2)\\)</li> </ol> <p>\u8ba1\u7b97\u5f97 : \\(|\\frac{\\overline{X}-\\overline{Y}}{\\sqrt{\\frac{S_w^2}{n_1}+\\frac{S_w^2}{n_2}}}| = 1.354 &lt; t_{0.05}(15) = 1.7531\\) \u4ece\u800c\u63a5\u53d7\u539f\u5047\u8bbe</p> <p>P_ = \\(2P\\{t(15) \\ge 1.354\\} = 0.196 &gt; 0.1\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_9","title":"\u5047\u8bbe\u68c0\u9a8c\u4e0e\u533a\u95f4\u4f30\u8ba1","text":"<p>\u4f5c\u533a\u95f4\u4f30\u8ba1\u65f6\uff0c\u5bf9\u53c2\u6570\u6ca1\u6709\u5148\u9a8c\u7684\u8ba4\u8bc6\uff0c\u4f46\u786e\u5b9a\u53c2\u6570\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u53ea\u662f\u672a\u77e5\uff0c\u6240\u4ee5\u533a\u95f4\u4f30\u8ba1\u7684\u76ee\u7684\u662f\uff1a\u6839\u636e\u6837\u672c\u5bf9\u53c2\u6570\u8fdb\u884c\u4f30\u8ba1\uff1b</p> <p>\u4f5c\u5047\u8bbe\u68c0\u9a8c\u65f6\uff0c\u5bf9\u53c2\u6570\u6709\u4e00\u4e2a\u5148\u9a8c\u7684\u8ba4\u8bc6\uff08\u4f8b\u5982 \\(\\mu=\\mu_0\\) \uff09\uff0c\u4f46\u7531\u4e8e\u67d0\u79cd\u60c5\u5f62\u7684\u51fa\u73b0\uff08\u5982\u5de5\u827a\u6539\u826f\u7b49\uff09\uff0c\u731c\u6d4b\u771f\u5b9e\u53c2\u6570\u503c\u53ef\u80fd\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u6240\u4ee5\u5047\u8bbe\u68c0\u9a8c\u7684\u76ee\u7684\u662f\uff1a\u6839\u636e\u6837\u672c\u786e\u8ba4\u53c2\u6570\u662f\u5426\u771f\u7684\u53d1\u751f\u4e86\u6539\u53d8\u3002</p> <p>\u4f46\u7f6e\u4fe1\u533a\u95f4\u4e0e\u5047\u8bbe\u68c0\u9a8c\u7684\u62d2\u7edd\u57df\u4e4b\u95f4\u53c8\u6709\u5bc6\u5207\u7684\u5173\u7cfb\u3002</p> <p>\u8003\u8651\u5355\u4e2a\u6b63\u6001\u603b\u4f53\u65b9\u5dee\u5df2\u77e5\u65f6\u6709\u5173\u5747\u503c\u7684\u7edf\u8ba1\u63a8\u65ad.</p> <p>\u8bbe \\(X_1,X_2,\\cdots,X_n\\) \u662f\u6765\u81ea\u603b\u4f53 \\(N(\\mu,\\sigma^2)\\) \u7684\u6837\u672c\uff0c\\(\\sigma^2\\) \u5df2\u77e5\uff0c\\(\\mu\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) \u7684\u7f6e\u4fe1\u533a\u95f4\u4e3a\uff1a</p> \\[\\overline{X} - \\frac{\\sigma}{\\sqrt{n}}z_{\\alpha/2} &lt; \\mu &lt; \\overline{X} + \\frac{\\sigma}{\\sqrt{n}}z_{\\alpha/2}\\] <p>\u5047\u8bbe\u68c0\u9a8c\u95ee\u9898 \\(H_0 : \\mu = \\mu_0 , H_1 : \\mu \\ne \\mu_0\\) \u663e\u8457\u6027\u6c34\u5e73\u4e3a \\(\\alpha\\) \u7684\u68c0\u9a8c\u62d2\u7edd\u57df\u4e3a\uff1a \\(W = \\{\\frac{|\\overline{X}-\\mu_0|}{\\sigma/\\sqrt{n}} \\ge z_{\\alpha/2}\\}\\)</p> <p>\u63a5\u53d7\u57df\u4e3a : \\(\\overline{W} = \\{\\frac{|\\overline{X}-\\mu_0|}{\\sigma/\\sqrt{n}} &lt; z_{\\alpha/2}\\} = \\{\\overline{X} - \\frac{\\sigma}{\\sqrt{n}}z_{\\alpha/2} &lt; \\mu_0 &lt; \\overline{X} + \\frac{\\sigma}{\\sqrt{n}}z_{\\alpha/2}\\}\\)</p> <p>Note</p> <p>\u5c06\u63a5\u53d7\u57df\u4e2d\u7684 \\(\\mu_0\\) \u6539\u5199\u6210 \\(\\mu\\) \u65f6\uff0c\u6240\u5f97\u7ed3\u679c\u6b63\u597d\u662f\u53c2\u6570 \\(\\mu\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) \u7684\u7f6e\u4fe1\u533a\u95f4\u3002</p> <p>\u4e00\u822c\u5730\uff0c\u82e5\u68c0\u9a8c\u5047\u8bbe\u95ee\u9898 \\(H_0 : \\theta = \\theta_0 , H_1 : \\theta \\ne \\theta_0\\) \u7684\u663e\u8457\u6c34\u5e73\u4e3a \\(\\alpha\\) \u7684\u63a5\u53d7\u57df\u80fd\u7b49\u4ef7\u5730\u5199\u6210 \\(\\hat{\\theta_L} &lt; \\theta_0 &lt; \\hat{\\theta_U}\\) \u90a3\u4e48 \\((\\hat{\\theta_L},\\hat{\\theta_U})\\) \u5c31\u662f\u53c2\u6570 \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) \u7684\u7f6e\u4fe1\u533a\u95f4\u3002</p> <p>\u53cd\u4e4b\uff0c\u82e5 \\((\\hat{\\theta_L},\\hat{\\theta_U})\\) \u662f \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1-\\alpha\\) \u7684\u7f6e\u4fe1\u533a\u95f4\uff0c\u5219\u5f53 \\(\\theta_0 \\in (\\hat{\\theta_L},\\hat{\\theta_U})\\) \u65f6\uff0c\u63a5\u53d7\u53cc\u8fb9\u68c0\u9a8c \\(H_0 : \\theta = \\theta_0 , H_1 : \\theta \\ne \\theta_0\\) \u4e2d\u7684\u539f\u5047\u8bbe \\(H_0\\) \uff0c\u4e14\u68c0\u9a8c\u7684\u62d2\u7edd\u57df\u4e3a \\(\\theta_0 \\le \\hat{\\theta_L}\\) \u6216 \\(\\theta_0 \\ge \\hat{\\theta_U}\\) \u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_10","title":"\u5355\u4fa7\u7f6e\u4fe1\u9650\u4e0e\u5355\u8fb9\u5047\u8bbe\u68c0\u9a8c\u7684\u5173\u7cfb","text":"<p>(1) \u82e5 \\(\\hat{\\theta_L}\\) \u662f \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1 - \\alpha\\) \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0b\u9650\uff0c\u5219\u5f53 \\(\\theta_0 \\ge \\hat{\\theta_L}\\) \u65f6\uff0c\u63a5\u53d7\u53f3\u8fb9\u68c0\u9a8c \\(H_0 : \\theta \\le \\theta_0 , H_1 : \\theta &gt; \\theta_0\\) \u4e2d\u7684\u539f\u5047\u8bbe \\(H_0\\) ,\u53cd\u4e4b\uff0c\u62d2\u7edd\u539f\u5047\u8bbe \\(H_0\\) \u3002</p> <p>(2) \u82e5 \\(\\hat{\\theta_U}\\) \u662f \\(\\theta\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a \\(1 - \\alpha\\) \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0a\u9650\uff0c\u5219\u5f53 \\(\\theta_0 \\le \\hat{\\theta_U}\\) \u65f6\uff0c\u63a5\u53d7\u5de6\u8fb9\u68c0\u9a8c \\(H_0 : \\theta \\ge \\theta_0 , H_1 : \\theta &lt; \\theta_0\\) \u4e2d\u7684\u539f\u5047\u8bbe \\(H_0\\) ,\u53cd\u4e4b\uff0c\u62d2\u7edd\u539f\u5047\u8bbe \\(H_0\\) \u3002</p> <p>\u6b63\u6001\u603b\u4f53\u5747\u503c\u3001\u65b9\u5dee\u7684\u7f6e\u4fe1\u533a\u95f4\u4e0e\u5047\u8bbe\u68c0\u9a8c</p> <p></p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_11","title":"\u62df\u5408\u4f18\u5ea6\u68c0\u9a8c","text":"<p>\u524d\u9762\u4ecb\u7ecd\u7684\u5404\u79cd\u68c0\u9a8c\u90fd\u662f\u5728\u603b\u4f53\u670d\u4ece\u6b63\u6001\u5206\u5e03\u524d\u63d0\u4e0b\uff0c\u5bf9\u53c2\u6570\u8fdb\u884c\u5047\u8bbe\u68c0\u9a8c\u7684\u3002\u5b9e\u9645\u4e2d\u53ef\u80fd\u9047\u5230\u8fd9\u6837\u7684\u60c5\u5f62\uff0c\u603b\u4f53\u670d\u4ece\u4f55\u79cd\u7406\u8bba\u5206\u5e03\u5e76\u4e0d\u77e5\u9053\uff0c\u8981\u6c42\u6211\u4eec\u76f4\u63a5\u5bf9\u603b\u4f53\u5206\u5e03\u63d0\u51fa\u4e00\u4e2a\u5047\u8bbe \u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_12","title":"\u57fa\u672c\u539f\u7406\u548c\u6b65\u9aa4","text":"<ol> <li> <p>\u5728 \\(H_0\\) \u4e0b\uff0c\u5c06\u603b\u4f53 X \u53d6\u503c\u7684\u5168\u4f53\u5206\u6210 k \u4e2a\u4e24\u4e24\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 \\(A_1,\\dots,A_k\\)</p> </li> <li> <p>\u4ee5 \\(n_i(i=1,\\dots,k)\\) \u8bb0\u6837\u672c\u89c2\u5bdf\u503c \\(x_1,\\dots,x_n\\) \u4e2d\u843d\u5728 \\(A_i\\) \u7684\u4e2a\u6570(\u5b9e\u9645\u9891\u6570).</p> </li> <li> <p>\u5f53 \\(H_0\\) \u4e3a\u771f\u4e14 \\(F_0(x)\\) \u5b8c\u5168\u5df2\u77e5\u65f6\uff0c\u8ba1\u7b97\u4e8b\u4ef6 \\(A_i\\) \u53d1\u751f\u7684\u6982\u7387 \\(P_i = P_{F_0}(A_i),i=1,\\dots,k\\)</p> </li> </ol> <p>\u5f53 \\(F_0(x)\\) \u542b\u6709 \\(r\\) \u4e2a\u672a\u77e5\u53c2\u6570\u65f6\uff0c\u5148\u5229\u7528\u6781\u5927\u4f3c\u7136\u6cd5\u4f30\u8ba1 \\(r\\) \u4e2a\u672a\u77e5\u53c2\u6570\uff0c\u7136\u540e\u6c42\u5f97 \\(p_i\\) \u7684\u4f30\u8ba1 \\(\\hat{p_i}\\) \uff0c\u6b64\u65f6\u79f0 \\(np_i(\\text{\u6216}n\\hat{p_i})\\) \u4e3a\u7406\u8bba\u9891\u6570.</p> <ol> <li>\u7edf\u8ba1\u91cf</li> </ol> \\[\\chi^2 = \\sum\\limits_{i=1}^k\\frac{(n_i - np_i)^2}{np_i} = \\sum\\limits_{i=1}^k\\frac{n_i^2}{np_i}-n\\] \\[(\\text{\u6216} \\chi^2 = \\sum\\limits_{i=1}^k\\frac{(n_i-n\\hat{p_i})^2}{n\\hat{p_i}} = \\sum\\limits_{i=1}^k\\frac{n_i^2}{n\\hat{p_i}}-n)\\] <p>\u53cd\u6620\u4e86\u5b9e\u9645\u9891\u6570\u4e0e\u7406\u8bba\u9891\u6570\u7684\u7efc\u5408\u504f\u5dee\uff0c\u5f53 \\(H_0\\) \u6210\u7acb\u65f6\uff0c \\(\\chi^2\\) \u7684\u53d6\u503c\u504f\u5c0f\uff0c\u56e0\u6b64\u68c0\u9a8c\u7684\u62d2\u7edd\u57df\u5f62\u5f0f\u4e3a : \\(\\chi^2 \\ge c\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/Chapter8/#_13","title":"\u5b9a\u7406","text":"<p>\u82e5 \\(n\\) \u5145\u5206\u5927\uff0c\u5219\u5f53 \\(H_0\\) \u4e3a\u771f\u65f6\uff0c\u7edf\u8ba1\u91cf \\(\\chi^2\\) \u8fd1\u4f3c\u670d\u4ece \\(\\chi^2(k-r-1)\\) \u5206\u5e03\uff0c\u5176\u4e2d \\(k\\) \u4e3a\u5206\u7c7b\u6570\uff0c \\(r\\) \u4e3a \\(F_0(x)\\) \u4e2d\u542b\u6709\u7684\u672a\u77e5\u53c2\u6570\u4e2a\u6570.</p> <p>\u5373\u5728\u663e\u8457\u6c34\u5e73 \\(\\alpha\\) \u4e0b\u62d2\u7edd\u57df\u4e3a</p> \\[\\chi^2 = \\sum\\limits_{i=1}^k\\frac{n_i^2}{np_i} - n \\ge \\chi_{\\alpha}^2(k-1) \\text{\u6ca1\u6709\u53c2\u6570\u9700\u8981\u4f30\u8ba1}\\] \\[\\chi^2 = \\sum\\limits_{i=1}^k\\frac{n_i^2}{n\\hat{p_i}} - n \\ge \\chi_{\\alpha}^2(k-r-1) \\text{\u6709r\u4e2a\u53c2\u6570\u8981\u4f30\u8ba1}\\] <p>\u6ce8\uff1a \\(\\chi^2\\) \u62df\u5408\u68c0\u9a8c\u4f7f\u7528\u65f6\u5fc5\u987b\u6ce8\u610f \\(n\\) \u8981\u8db3\u591f\u5927\uff0c \\(np_i(\\text{\u6216} n\\hat{p_i})\\) \u4e0d\u80fd\u592a\u5c0f\u3002\u6839\u636e\u5b9e\u8df5\uff0c\u8981\u6c42 \\(n \\ge 50\\) \uff0c  \\(np_i(\\text{\u6216} n\\hat{p_i}) \\ge 5\\) \uff0c\u5426\u5219\u5e94\u9002\u5f53\u5408\u5e76\u76f8\u90bb\u7684\u7c7b\u4ee5\u6ee1\u8db3\u8981\u6c42.</p> Question <p>\u4e00\u6dd8\u5b9d\u5e97\u4e3b\u641c\u96c6\u4e86\u4e00\u5e74\u4e2d\u6bcf\u5929\u7684\u8ba2\u5355\u6570 \\(X\\) \uff0c\u9664\u53bb\u6625\u8282\u671f\u95f4\u53ca\u53cc\u5341\u4e00\u524d\u540e\u5916\uff0c\u6309 330 \u5929\u8ba1\uff0c\u5177\u4f53\u6570\u636e\u5982\u4e0b:</p> \u8ba2\u5355\u6570 X 0 1 2 3 4 5 6 7 \u5929\u6570 3 6 21 46 48 61 52 42 \u8ba2\u5355\u6570 X 8 9 10 11 12 13 16 \u5929\u6570 27 11 6 4 1 1 1 <p>\u901a\u5e38\u8ba4\u4e3a\u6bcf\u5929\u7684\u8ba2\u5355\u6570\u670d\u4ece\u6cca\u677e\u5206\u5e03\uff0c\u4ee5\u4e0a\u7684\u6570\u636e\u662f\u5426\u652f\u6301\u8fd9\u4e2a\u7ed3\u8bba\uff1f</p> Answer <p>\\(H_0: X \\sim P(\\lambda)\\) \\(\\lambda\\) \u4e3a\u672a\u77e5\u53c2\u6570\uff0c \u603b\u8ba2\u5355\u6570\u4e3a 1749</p> <p>\u6240\u4ee5\u5e73\u5747\u6bcf\u5929\u8ba2\u5355\u6570 \\(\\hat{\\lambda} = \\overline{X} = \\frac{1749}{330} = 5.3\\)</p> <p>\u8ba2\u5355\u6570\u5927\u4e8e 10 \u7684\u8fdb\u884c\u5408\u5e76\uff0c\u5bf9\u8ba2\u5355\u6570\u4e3a \\(i(i=0,1,\\dots,10,11+)\\) \u7684\u6982\u7387\u503c\u8fdb\u884c\u4f30\u8ba1\uff1a</p> \\[\\hat{p_i} = \\frac{\\hat{\\lambda}^i e^{-\\hat{\\lambda}}}{i!},i=0,1,\\dots,10\\] \\[\\hat{p_{11}} = \\sum\\limits_{j=11}^\\infty \\frac{\\hat{\\lambda}^j e^{-\\hat{\\lambda}}}{j!} = 1 - \\sum\\limits_{i=0}^{10} \\hat{p_i}\\] <p>\u7406\u8bba\u9891\u6570 : \\(n_i = np_i,i = 0,1,\\dots,10,11,n\\hat{p_0} = 1.65 &lt; 5\\)</p> <p>\u5c06 \\(x = 0\\) \u4e0e \\(x = 1\\) \u5408\u5e76\uff0c\u6700\u540e\u5171\u6709 11 \u7c7b\uff0c\u5177\u4f53\u7ed3\u679c\u4e3a</p> \u8ba2\u5355\u6570 X 0 1 2 3 4 5 \u6982\u7387\u4f30\u8ba1 0.005 0.026 0.070 0.124 0.164 0.174 \u7406\u8bba\u9891\u6570 1.65 8.73 23.13 40.87 54.16 57.41 \u8ba2\u5355\u6570 X 6 7 8 9 10 \\(\\ge\\) 11 \u6982\u7387\u4f30\u8ba1 0.154 0.116 0.077 0.045 0.024 0.021 \u7406\u8bba\u9891\u6570 50.71 38.39 25.44 14.98 7.94 6.60 <p>\u68c0\u9a8c\u7edf\u8ba1\u91cf\u7684\u503c\u4e3a \\(\\chi^2 = \\sum\\limits_{i=1}^{k} \\frac{(n_i)^2}{n\\hat{p_i}} -n = \\sum\\limits_{i=1}^{11} \\frac{(n_i)^2}{n\\hat{p_i}} -330 = 3.97\\)</p> <p>\u5373\u5728\u663e\u8457\u6027\u6c34\u5e73 \\(\\alpha = 0.05\\) \u4e0b\u4e34\u754c\u503c \\(chi_{\\alpha}^2(k-r-1) = \\chi_{0.05}^2(11-1-1) = 16.92\\)</p> <p>\u4e8e\u662f\uff0c \\(3.92 &lt; 16.92\\) \uff0c \u4e0d\u62d2\u7edd\u539f\u5047\u8bbe\u3002</p> <p>P_ = \\(P(\\chi^2(9) \\ge 3.97) = 0.913\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/PPT_download/","title":"PPT","text":"<p> \u7ea6 68 \u4e2a\u5b57  9 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f</p>  Chapter1   1,677 KB / 2024-11-23 <p> \u4e0b\u8f7d</p>  Chapter2   1,368 KB / 2024-11-23 <p> \u4e0b\u8f7d</p>  Chapter3   1,045 KB / 2024-11-23 <p> \u4e0b\u8f7d</p>  Chapter4   983 KB / 2024-11-23 <p> \u4e0b\u8f7d</p>  Chapter5   371 KB / 2024-11-23 <p> \u4e0b\u8f7d</p>  Chapter6   1,281 KB / 2024-11-23 <p> \u4e0b\u8f7d</p>  Chapter7   572 KB / 2024-11-23 <p> \u4e0b\u8f7d</p>  Chapter8   589 KB / 2024-11-23 <p> \u4e0b\u8f7d</p>  review   866 KB / 2024-12-21 <p> \u4e0b\u8f7d</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW1/","title":"HW1(\u4e60\u9898\u4e00)","text":"<p> \u7ea6 580 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW1/#a4","title":"A4","text":"Question <p>\u8bbeA,B,C\u4e3a3\u4e2a\u968f\u673a\u4e8b\u4ef6\uff0c\u8bf7\u7528\u4e8b\u4ef6\u7684\u8fd0\u7b97\u5173\u7cfb\u5f0f\u8868\u793a\uff1a</p> <p>(1)A,B,C\u81f3\u5c11\u67092\u4e2a\u53d1\u751f\uff1b</p> <p>(2)A,B,C\u6700\u591a\u67091\u4e2a\u53d1\u751f\uff1b</p> <p>(3)A,B,C\u6070\u67091\u4e2a\u4e0d\u53d1\u751f\uff1b</p> <p>(4)A,B,C\u81f3\u5c11\u67091\u4e2a\u4e0d\u53d1\u751f\u3002</p> Answer <p>\u7b54\u6848\u4e0d\u552f\u4e00</p> <ol> <li> <p>\\(AB \\cup AC \\cup BC\\)</p> </li> <li> <p>\\(\\overline{AB \\cup AC \\cup BC}\\)</p> </li> <li> <p>\\(\\overline{A}BC \\cup A\\overline{B}C \\cup AB\\overline{C}\\)</p> </li> <li> <p>\\(\\overline{ABC}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW1/#a5","title":"A5","text":"Question <p>\u8bbeA,B\u4e3a\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6\uff0c\u4e14A,B\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u53d1\u751f\u7684\u6982\u7387\u4e3a0.9.</p> <p>(1)\u82e5B\u53d1\u751f\u7684\u540c\u65f6A\u4e0d\u53d1\u751f\u7684\u6982\u7387\u4e3a0.4,\u6c42P(A)\uff1b</p> <p>(2)\u82e5P(B)=0.6,\u6c42A\u53d1\u751f\u7684\u540c\u65f6B\u4e0d\u53d1\u751f\u7684\u6982\u7387.</p> Answer \\[\\begin{cases}P(A\\cup B) &amp;= 0.9\\\\P(\\overline{A}B) &amp;= 0.4\\end{cases} \\Rightarrow \\begin{cases}P(A) + P(B) - P(AB) = P(A) + P(\\overline{A}B) &amp;= 0.9 \\\\ P(\\overline{A}B) &amp;= 0.4 \\end{cases} \\Rightarrow P(A) = 0.5\\] \\[\\begin{cases}P(A\\cup B) &amp;= 0.9\\\\P(B) &amp;= 0.6\\end{cases} \\Rightarrow \\begin{cases}P(A) + P(B) - P(AB) = P(B) + P(A\\overline{B}) &amp;= 0.9 \\\\ P(B) &amp;= 0.6 \\end{cases} \\Rightarrow P(A\\overline{B}) = 0.3\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW1/#a12","title":"A12","text":"(\u2b50\u7403\u76d2\u95ee\u9898) <p>\u4e00\u888b\u4e2d\u670910\u4e2a\u7403\uff0c\u5176\u4e2d8\u4e2a\u662f\u7ea2\u7403.\u6bcf\u6b21\u6478\u4e00\u7403\uff0c\u5171\u64782\u6b21\uff0c\u5728\u6709\u653e\u56de\u62bd\u6837\u4e0e\u65e0\u653e\u56de\u62bd\u6837\u4e24\u79cd\u62bd\u6837\u65b9\u5f0f\u4e0b\u5206\u522b\u6c42\uff1a</p> <p>(1)\u201c\u4e24\u6b21\u5747\u4e3a\u7ea2\u7403\u201d\u7684\u6982\u7387\uff1b</p> <p>(2)\u201c\u6070\u67091\u4e2a\u7ea2\u7403\u201d\u7684\u6982\u7387\uff1b</p> <p>(3)\u201c\u7b2c2\u6b21\u662f\u7ea2\u7403\u201d\u7684\u6982\u7387.</p> Answer <p>\u6709\u653e\u56de\u62bd\u6837\uff1a</p> <ol> <li> <p>\\((\\frac{8}{10})^2 = \\frac{16}{25}\\)</p> </li> <li> <p>\\(\\frac{8}{10} \\times \\frac{2}{10} \\times 2= \\frac{8}{25}\\) </p> </li> <li> <p>\\(\\frac{8}{10} = \\frac{4}{5}\\)</p> </li> </ol> <p>\u65e0\u653e\u56de\u62bd\u6837\uff1a</p> <ol> <li> <p>\\(\\frac{8}{10} \\times \\frac{7}{9} = \\frac{28}{45}\\)</p> </li> <li> <p>\\(\\frac{8}{10} \\times \\frac{2}{9} + \\frac{2}{10} \\times \\frac{8}{9} = \\frac{16}{45}\\)</p> </li> <li> <p>\\(\\frac{8}{10} \\times \\frac{7}{9} + \\frac{2}{10} \\times \\frac{8}{9} = \\frac{4}{5} \\rightarrow\\) \u65e0\u653e\u56de\u62bd\u6837\u4e2d\u6982\u7387\u4e0e\u7b2c\u51e0\u6b21\u65e0\u5173\uff08\u62bd\u5956\uff09</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW1/#a15","title":"A15","text":"Question <p>\u7f16\u53f7\u4e3a1,2,\u2026,9\u76849\u8f86\u8f66\uff0c\u968f\u673a\u5730\u505c\u5165\u7f16\u53f7\u4e3a1,2,\u2026,9\u76849\u4e2a\u8f66\u4f4d\u4e2d.\u5f53\u8f66\u53f7\u4e0e\u8f66\u4f4d\u7f16\u53f7\u4e00\u6837\u65f6\u79f0\u8be5\u8f66\u914d\u5bf9\uff0c\u6c42\uff1a</p> <p>(1)1\u53f7\u8f66\u914d\u5bf9\u7684\u6982\u7387\uff1b</p> <p>(2)1\u53f7\u8f66\u914d\u5bf9\u800c9\u53f7\u8f66\u4e0d\u914d\u5bf9\u7684\u6982\u7387.</p> Answer (\ud83d\udcdd\u914d\u5bf9\u95ee\u9898\u4f8b\u9898) <ol> <li> <p>\\(\\frac{1}{9}\\)</p> </li> <li> <p>\\(\\frac{1}{9} \\times \\frac{7}{8} = \\frac{7}{72}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW1/#a16","title":"A16","text":"Question <p>\u4f9d\u6b21\u5c065\u4e2a\u4e0d\u540c\u7684\u7403\u968f\u673a\u653e\u51653\u4e2a\u4e0d\u540c\u7684\u76d2\u5b50\u4e2d\uff0c\u76d2\u5b50\u5bb9\u91cf\u4e0d\u9650\uff0c\u6c423\u53f7\u76d2\u5b50\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u7403\u7684\u6982\u7387.</p> Answer <p>\\(\\frac{C_5^2 \\times 2^3}{3^5} = \\frac{80}{243}\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW10/","title":"HW10(\u4e60\u9898\u4e94\u3001\u516d)","text":"<p> \u7ea6 917 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW10/#b6","title":"B6","text":"Question <p>\u8bbe \\(\\{X_i,i \\ge 1\\}\\) \u4e3a\u72ec\u7acb\u540c\u5206\u5e03\u7684\u6b63\u6001\u968f\u673a\u53d8\u91cf\u5e8f\u5217\uff0c\u82e5 \\(X_1 \\sim N(\\mu , \\sigma^2)\\) \uff0c\u5176\u4e2d \\(\\sigma &gt; 0\\) \u3002\u95ee\u4ee5\u4e0b\u7684\u968f\u673a\u53d8\u91cf\u5e8f\u5217\u5f53 \\(n \\rightarrow +\\infty\\) \u65f6\u4f9d\u6982\u7387\u6536\u655b\u5417\uff1f\u82e5\u6536\u655b\u3002\u8bf7\u7ed9\u51fa\u6536\u655b\u7684\u6781\u9650\u503c\uff0c\u5426\u5219\uff0c\u8bf7\u8bf4\u660e\u7406\u7531\uff1a</p> <p>(1) \\(\\frac{1}{n}\\sum\\limits_{i=1}^nX_i^2\\);</p> <p>(2) \\(\\frac{1}{n}\\sum\\limits_{i=1}^n(X_i - \\mu )^2\\)</p> <p>(3) \\(\\frac{X_1 + X_2 + \\dots + X_n}{X_1^2 + X_2^2 + \\dots + X_n^2}\\);</p> <p>(4) \\(\\frac{X_1 + X_2 + \\dots + X_n}{\\sqrt{n\\sum\\limits_{i=1}^n(X_i - \\mu)^2}}\\);</p> Answer <p>(1)\\(Var(X_i) = E(X_i^2) - E^2(X_i)\\) \u5f97\u5230 \\(E(X_i^2) = \\mu^2 + \\sigma^2\\) \u4e5f\u5373 \\(E(\\frac{1}{n} \\sum\\limits_{i=1}^n X_i^2) = \\mu^2 + \\sigma^2\\)</p> <p>\\(P(|\\frac{1}{n} \\sum\\limits_{i=1}^n X_i^2 - E(\\frac{1}{n} \\sum\\limits_{i=1}^n X_i^2)| \\ge \\varepsilon ) \\le \\frac{Var(\\frac{1}{n} \\sum\\limits_{i=1}^n X_i^2)}{\\varepsilon^2} = \\frac{1}{n\\varepsilon^2}Var(X_i^2)\\)</p> <p>\u6536\u655b\u4e8e \\(\\mu^2 + \\sigma^2\\)</p> <p>(2)\u540c\u7406\uff0c\u6536\u655b\u4e8e \\(\\sigma^2\\)</p> <p>(3)\\(\\sum\\limits_{i=1}^nX_i\\) \u6536\u655b\u4e8e \\(n\\mu\\) \u4e14 \\(\\sum\\limits_{i=1}^nX_i^2\\) \u6536\u655b\u4e8e \\(n(\\mu^2 + \\sigma^2)\\) \u6240\u4ee5\u6536\u655b\u4e8e \\(\\frac{\\mu}{\\mu^2 + \\sigma^2}\\)</p> <p>(4)\u540c\u7406\uff0c\u6536\u655b\u4e8e \\(\\frac{\\mu}{\\sigma}\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW10/#b7","title":"B7","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf\u5e8f\u5217 \\(\\{X_i,i \\ge 1\\}\\) \u72ec\u7acb\u540c\u5206\u5e03\uff0c\u90fd\u670d\u4ece\u671f\u671b\u4e3a \\(\\frac{1}{\\lambda}\\) \u7684\u6307\u6570\u5206\u5e03\uff0c\u5176\u4e2d \\(\\lambda &gt; 0\\)</p> <p>(1)\u82e5\u5bf9\u4efb\u610f\u7684 \\(\\varepsilon &gt; 0\\) \uff0c\u5747\u6709 \\(\\mathop{\\lim}\\limits_{n \\rightarrow +\\infty}P\\{|\\frac{X_1^2 + X_2^2 + \\dots + X_n^2}{n} -a| &lt; \\varepsilon \\} = 1\\) \u6210\u7acb\uff0c\u6c42 \\(a\\) \uff1b</p> <p>(2)\u7ed9\u51fa  \\(\\frac{1}{50} \\sum\\limits_{i=1}^{100} X_i\\) \u7684\u8fd1\u4f3c\u5206\u5e03\uff1b</p> <p>(3)\u6c42 \\(P\\{\\frac{1}{100} \\sum\\limits_{i=1}^{100} X_i^2 \\le \\frac{2}{\\lambda^2} \\}\\) \u7684\u8fd1\u4f3c\u503c\uff1b</p> Answer <ol> <li>\\(a = E(X_i^2) = (\\frac{1}{\\lambda})^2 + \\frac{1}{\\lambda^2}\\) (\u6307\u6570\u5206\u5e03\u7684\u671f\u671b\u4e3a \\(\\frac{1}{\\lambda}\\) \uff0c\u65b9\u5dee\u4e3a \\(\\frac{1}{\\lambda^2}\\))</li> </ol> <p>\u89e3\u5f97 \\(a = \\frac{2}{\\lambda^2}\\)</p> <ol> <li></li> </ol> \\[E(\\frac{1}{50} \\sum\\limits_{i=1}^{100} X_i) = 2E(X_i) = \\frac{2}{\\lambda}\\] \\[D(\\frac{1}{50} \\sum\\limits_{i=1}^{100} X_i) = \\frac{1}{2500}D(\\sum\\limits_{i=1}^{100} X_i) = \\frac{1}{2500} \\times 100 \\times \\frac{1}{\\lambda^2} = \\frac{1}{25\\lambda^2}\\] <p>\u6240\u4ee5 \\(\\frac{1}{50} \\sum\\limits_{i=1}^{100} X_i \\mathop{\\sim}\\limits^{\\text{\u8fd1\u4f3c}} N(\\frac{2}{\\lambda}, \\frac{1}{25\\lambda^2})\\)</p> <ol> <li>\u5bf9\u4e8e \\(X_i \\sim E(\\lambda)\\)</li> </ol> \\[E(X_i^4) = \\int_0^{\\infty} x^4 \\lambda e^{-\\lambda x} dx = \\frac{24}{\\lambda^4}\\] \\[\\therefore \\frac{1}{100} \\sum\\limits_{i=1}^{100} X_i \\sim N(\\frac{2}{\\lambda^2}, \\frac{1}{5\\lambda^4})\\] \\[\\therefore P\\{\\frac{1}{100} \\sum_{i=1}^{100} X_i^2 \\le \\frac{2}{\\lambda^2}\\} = P\\{\\frac{1}{100} \\sum_{i=1}^{100} X_i^2 - \\frac{2}{\\lambda^2} \\le 0\\} = \\Phi (\\frac{1}{2}) = \\frac{1}{2}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW10/#b92","title":"B9(2)","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X\\) \u670d\u4ece\u8f9b\u666e\u68ee(Simpson)\u5206\u5e03(\u4ea6\u79f0\u4e09\u89d2\u5206\u5e03)\uff0c\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x) = \\begin{cases}x,&amp;0 \\le x &lt; 1 \\\\ 2-x,&amp; 1 \\le x &lt; 2 \\\\ 0,&amp; \\text{\u5176\u4ed6} \\end{cases}\\] <p>(2)\u8981\u4fdd\u8bc1\u81f3\u5c11\u6709 \\(95\\%\\) \u7684\u628a\u63e1\u4f7f\u4e8b\u4ef6 \\(\\{\\frac{1}{2} &lt; X &lt; \\frac{3}{2} \\}\\) \u51fa\u73b0\u7684\u6b21\u6570\u4e0d\u5c11\u4e8e80\uff0c\u95ee\u81f3\u5c11\u9700\u8981\u8fdb\u884c\u591a\u5c11\u6b21\u89c2\u5bdf\uff1f</p> Answer \\[P = \\int_{\\frac{1}{2}}^1 xdx + \\int_1^{\\frac{3}{2}} (2-x)dx = \\frac{3}{4}\\] <p>\u51fa\u73b0\u6b21\u6570 \\(Y \\sim B(n,\\frac{3}{4})\\)\uff0c\u56e0\u6b64\u5f53 \\(n\\) \u8db3\u591f\u5927\u65f6\uff0c\\(Y \\sim N(np,np(1-p)) = N(\\frac{3}{4}n,\\frac{3}{16}n)\\)</p> \\[P(Y \\ge 80) = P(\\frac{Y - \\frac{3}{4}n}{\\sqrt{\\frac{3}{16}n}} \\ge \\frac{80 - \\frac{3}{4}n}{\\sqrt{\\frac{3}{16}n}}) = 0.95\\] <p>\u67e5\u8868\u5f97 \\(\\frac{80 - \\frac{3}{4}n}{\\sqrt{\\frac{3}{16}n}} &gt; 1.64\\)\uff0c\u89e3\u5f97 \\(n \\ge 117\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW10/#b11","title":"B11","text":"Question <p>\u67d0\u6b21\u201c\u77e5\u8bc6\u7ade\u8d5b\u201d\u89c4\u5219\u5982\u4e0b\uff1a\u53c2\u8d5b\u9009\u624b\u6700\u591a\u53ef\u62bd\u53d63\u4e2a\u76f8\u4e92\u72ec\u7acb\u7684\u95ee\u9898\u2014\u2014\u56de\u7b54\uff1a\u5982\u679c\u7b54\u9519\u5c31\u88ab\u6dd8\u6c70\uff0c\u8fdb\u800c\u5931\u53bb\u56de\u7b54\u4e0b\u4e00\u9898\u7684\u8d44\u683c\uff1b\u6bcf\u7b54\u5bf9\u4e00\u9898\u5f971\u5206\uff0c\u82e53\u9898\u90fd\u5bf9\u5219\u518d\u52a01\u5206(\u5373\u5171\u5f974\u5206).\u73b0\u6709100\u540d\u53c2\u8d5b\u9009\u624b\uff0c\u6bcf\u4eba\u72ec\u7acb\u7b54\u9898.</p> <p>(1)\u82e5\u6bcf\u4eba\u81f3\u5c11\u7b54\u5bf9\u4e00\u9898\u7684\u6982\u7387\u4e3a0.7,\u7528\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u8ba1\u7b97\u201c\u6700\u591a\u670935\u4eba\u5f970\u5206\u201d\u7684\u6982\u7387\uff1b</p> <p>(2)\u82e5\u9898\u76ee\u7684\u96be\u6613\u7a0b\u5ea6\u7c7b\u4f3c\uff0c\u6bcf\u4eba\u7b54\u5bf9\u6bcf\u9898\u7684\u6982\u7387\u5747\u4e3a0.8,\u6c42\u8fd9100\u540d\u53c2\u8d5b\u9009\u624b\u7684\u603b\u5206\u8d85\u8fc7220\u5206\u7684\u6982\u7387.</p> Answer <ol> <li>\u8bb0\u5f970\u5206 \\(X\\) \u4eba \\(X_i \\sim B(1,0.3)\\)\uff0c\\(X \\sim B(100,0.3)\\)</li> </ol> <p>\u6240\u4ee5 \\(X \\sim N(30,21)\\)</p> \\[\\therefore P(X \\le 35) = \\Phi (\\frac{35 - 30}{\\sqrt{21}}) \\approx 86.21\\%\\] <ol> <li>\u8bb0 \\(Y\\) \u4e3a\u603b\u5206</li> </ol> \\[E(Y_i) = 0 \\times 0.2 + 1 \\times 0.8 \\times 0.2 + 2 \\times 0.8^2 \\times 0.2 + 4 \\times 0.8^3 = 2.464\\] \\[D(Y_i) = E(Y_i^2) - E^2(Y_i) = 2.792704\\] \\[ \\therefore \\sum\\limits_{i=1}^{100} Y_i = Y \\sim N(246.4, 279.2704)\\] \\[P(Y &gt; 220) = P(\\frac{Y - 246.4}{\\sqrt{279.2704}} &gt; \\frac{220 - 246.4}{\\sqrt{279.2704}}) = 1 - \\Phi(\\frac{220 - 246.4}{\\sqrt{279.2704}}) \\approx 94.3\\%\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW10/#a1","title":"A1","text":"Question <p>\u5047\u8bbe \\(X_1, X_2, \\dots , X_n\\) \u662f\u4ece\u603b\u4f53X\u4e2d\u62bd\u53d6\u7684\u6837\u672c \\((n \\ge 1)\\) .\u5f53\u603b\u4f53X\u670d\u4ece\u5982\u4e0b\u5206\u5e03\u65f6\uff0c\u5199\u51fa\u6837\u672c\u7684\u8054\u5408\u5206\u5e03\u5f8b\u6216\u8054\u5408\u5bc6\u5ea6\u51fd\u6570\uff1a</p> <p>(1)\u603b\u4f53\u670d\u4ece\u4e8c\u9879\u5206\u5e03B(10,0.2):</p> <p>(2)\u603b\u4f53\u670d\u4ece\u6cca\u677e\u5206\u5e03P(1):</p> <p>(3)\u603b\u4f53\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03N(0,1);</p> <p>(4)\u603b\u4f53\u670d\u4ece\u6307\u6570\u5206\u5e03E(1).</p> Answer \\[P(x_1, x_2, \\dots , x_n) = \\prod_{i=1}^{n} C_{10}^{x_i} 0.2^{x_i} 0.8^{10 - x_i}, i=1,2,\\dots ,n,x_i = 0,1,\\dots ,10\\] \\[P(x_1, x_2, \\dots , x_n) = \\prod_{i=1}^{n} \\frac{e^{-1}}{x_i!} ,i=1,2,\\dots ,n,x_i = 0,1,\\dots\\] <p>3.</p> \\[f(x_1, x_2, \\dots , x_n) = \\prod_{i=1}^{n} \\frac{1}{\\sqrt{2\\pi}} e^{-\\frac{x_i^2}{2}}, i=1,2,\\dots ,n,-\\infty &lt; x_i &lt; +\\infty\\] <p>4.</p> \\[f(x_1, x_2, \\dots , x_n) = \\prod_{i=1}^{n} e^{-x_i}, i=1,2,\\dots ,n\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW10/#a3","title":"A3","text":"Question <p>\u4ece\u603b\u4f53X\u4e2d\u62bd\u53d6\u6837\u672c\u5bb9\u91cf\u4e3a5\u7684\u6837\u672c\uff0c\u5176\u89c2\u6d4b\u503c\u4e3a2.6,4.1,3.2,3.6,2.9,\u8ba1\u7b97\u6837\u672c\u5747\u503c\u3001\u6837\u672c\u65b9\u5dee\u548c\u6837\u672c\u4e8c\u9636\u4e2d\u5fc3\u77e9</p> Answer <p>\u6837\u672c\u5747\u503c\uff1a</p> \\[\\overline{x} = \\frac{2.6 + 4.1 + 3.2 + 3.6 + 2.9}{5} = 3.28\\] <p>\u6837\u672c\u65b9\u5dee\uff1a</p> \\[s^2 = \\frac{1}{4} (\\sum\\limits_{i=1}^{5} x_i^2 - 5 \\times \\overline{x}) = 0.347\\] <p>\u6837\u672c\u4e8c\u9636\u4e2d\u5fc3\u77e9\uff1a</p> \\[B_2 = \\frac{1}{5} \\sum\\limits_{i=1}^{5} (x_i - \\overline{x})^2 = 0.2776\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW11/","title":"HW11(\u4e60\u9898\u516d\u3001\u4e03(\u53ea\u8ba1\u7b97\u77e9\u4f30\u8ba1))","text":"<p> \u7ea6 1440 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW11/#a11","title":"A11","text":"Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c \\(X_1, X_2, \\cdots, X_{16}\\) \u662f\u6765\u81ea\u603b\u4f53 \\(X\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c\u5199\u51fa\u4e0b\u5217\u7edf\u8ba1\u91cf\u7684\u5206\u5e03\uff1a</p> <p>(1)\u6837\u672c\u5747\u503c \\(\\overline{X}\\) \uff1b</p> <p>(2) \\(\\sum\\limits_{i=1}^{16}X_i^2\\) \uff1b</p> <p>(3) \\(\\frac{3X_1}{\\sqrt{\\sum\\limits_{i=2}^{10}X_i^2}}\\) \uff1b</p> <p>(4) \\(\\frac{X_1+X_2}{\\sqrt{X_3^2+X_4^2}}\\) \uff1b</p> <p>(5) \\(\\overline{X} - X_1\\) \uff1b</p> Answer \\[N(0,\\frac{1}{16})\\] \\[\\chi^2(16)\\] \\[\\frac{3X_1}{\\sqrt{\\sum\\limits_{i=2}^{10}X_i^2}} = \\frac{X_1}{\\sqrt{\\frac{\\sum\\limits_{i=2}^{10}X_i^2}{9}}}\\] \\[\\therefore t(9)\\] \\[X_1+X_2 \\sim N(0,2)\\] \\[\\therefore \\frac{1}{\\sqrt{2}}(X_1+X_2) \\sim N(0,1)\\] \\[\\sqrt{X_3^2+X_4^2} \\sim \\chi^2(2)\\] \\[\\therefore t(2)\\] \\[N(0,\\frac{15}{16})\\] \\[E(\\overline{X} - X_1) = E(\\overline{X}) - E(X_1) = 0\\] \\[D(\\overline{X} - X_1) = D(\\overline{X}) + D(X_1) - 2Cov(\\overline{X}, X_1)\\] \\[D(\\overline{X}) = \\frac{1}{16}, D(X_1) = 1\\] \\[Cov(\\overline{X}, X_1) = Cov(\\frac{1}{16}\\sum\\limits_{i=1}^{16}X_i, X_1) = \\frac{1}{16}Cov(X_1, X_1) = \\frac{1}{16}\\] \\[\\therefore D(\\overline{X} - X_1) = \\frac{15}{16}\\] \\[\\therefore N(0,\\frac{15}{16})\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW11/#b2","title":"B2","text":"Question <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu, \\sigma^2)\\)\uff0c \\(X_1, X_2, \\cdots, X_{9}\\) \u662f\u6765\u81ea\u603b\u4f53 \\(X\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c \\(\\overline{X}\\) \u662f\u6837\u672c\u5747\u503c\uff0c \\(\\sigma^2\\) \u662f\u6837\u672c\u65b9\u5dee\uff0c\u5199\u51fa\u4e0b\u5217\u62bd\u6837\u5206\u5e03\uff1a</p> <p>(1) \\(\\frac{3(\\overline{X} - \\mu)}{\\sigma}\\) \uff1b</p> <p>(2) \\(\\frac{3(\\overline{X} - \\mu)}{S}\\) \uff1b</p> <p>(3) \\(\\frac{\\sum\\limits_{i=1}^{9}(X_i - \\overline{X})^2}{\\sigma^2}\\) \uff1b</p> <p>(4) \\(\\frac{\\sum\\limits_{i=1}^{9}(X_i - \\mu)^2}{S^2}\\) \uff1b</p> <p>(5) \\(\\frac{9(\\overline{X} - \\mu)^2}{\\sigma^2}\\) \uff1b</p> <p>(6) \\(\\frac{9(\\overline{X} - \\mu)^2}{S^2}\\) \uff1b</p> <p>(7) \\(\\frac{2(X_1 - X_2)^2}{(X_3 - X_4)^2 + (X_5 - X_6)^2}\\) \uff1b</p> <p>(8) \\(\\frac{(X_1 - Y_1)^2 + (X_2 - Y_1)^2 + (X_3 - Y_1)^2}{(X_4 - Y_2)^2 + (X_5 - Y_2)^2 + (X_6 - Y_2)^2}\\) \uff0c\u5176\u4e2d \\(Y_1 = \\frac{X_1 + X_2 + X_3}{3}\\) \uff0c \\(Y_2 = \\frac{X_4 + X_5 + X_6}{3}\\) \uff1b</p> Answer \\[N(0,1)\\] \\[S^2 = \\frac{1}{8}\\sum\\limits_{i=1}^{9}(X_i - \\overline{X})^2\\] \\[ \\frac{8S^2}{\\sigma^2} \\sim \\chi^2(8) \\] \\[\\frac{\\frac{3(\\overline{X} - \\mu)}{\\sigma}}{\\sqrt{\\frac{8S^2}{8\\sigma^2}}} \\sim t(8)\\] \\[\\sum\\limits_{i=1}^{9}(\\frac{X_i - \\overline{X}}{\\sigma})^2 \\sim \\chi^2(8)\\] \\[\\sum\\limits_{i=1}^{9}(\\frac{X_i - \\mu}{\\sigma})^2 \\sim \\chi^2(9)\\] \\[\\text{\u8bb0} Z = \\frac{3(\\overline{X} - \\mu)}{\\sigma} \\sim N(0,1)\\] \\[\\therefore Z^2 \\sim \\chi^2(9)\\] \\[\\frac{\\frac{9(\\overline{X} - \\mu)^2}{\\sigma^2 \\cdot 1}}{\\frac{8S^2}{8\\sigma^2}} = \\frac{9(\\overline{X} - \\mu)^2}{S^2} \\sim F(1,8)\\] \\[X_1 - X_2 \\sim N(0,2\\sigma^2)\\] \\[\\frac{1}{2\\sigma^2}(X_1 - X_2)^2 \\sim \\chi^2(1)\\] \\[\\frac{1}{2\\sigma^2}((X_3 - X_4)^2 + (X_5 - X_6)^2) \\sim \\chi^2(2)\\] \\[\\frac{\\frac{1}{2\\sigma^2 \\cdot 1}(X_1 - X_2)^2}{\\frac{1}{2\\sigma^2 \\cdot 2}((X_3 - X_4)^2 + (X_5 - X_6)^2)} \\sim F(1,2)\\] \\[Y_1 \\sim N(0, \\frac{1}{3}\\sigma^2) \\quad Y_2 \\sim N(0, \\frac{1}{3}\\sigma^2)\\] \\[\\frac{\\sum\\limits_{i=1}^{3}(X_i - Y_1)^2}{\\sigma^2} \\sim \\chi^2(2)\\] \\[\\frac{\\sum\\limits_{i=1}^{3}(X_i - Y_1)^2}{\\sum\\limits_{i=1}^{3}(X_i - Y_2)^2} \\sim F(2,2)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW11/#b5","title":"B5","text":"Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u5bc6\u5ea6\u51fd\u6570</p> \\[f(x) = \\frac{1}{2}e^{-|x|},-\\infty &lt; x &lt; +\\infty\\] <p>\u4ece\u603b\u4f53\u4e2d\u62bd\u53d6\u6837\u672c\u5bb9\u91cf\u4e3a 10 \u7684\u6837\u672c\uff0c \\(\\overline{X}\\) \u548c \\(S^2\\) \u5206\u522b\u4e3a\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\uff0c\u6c42 </p> <p>(1) \\(\\overline{X}\\) \u7684\u6570\u5b66\u671f\u671b\u548c\u65b9\u5dee\uff1b</p> <p>(2) \\(S^2\\) \u7684\u6570\u5b66\u671f\u671b\uff1b</p> Answer \\[E(X_i) = \\int_{-\\infty}^{+\\infty} x \\cdot \\frac{1}{2}e^{-|x|} dx = 0\\] \\[\\therefore E(\\overline{X}) = \\frac{1}{n} \\sum\\limits_{i=1}^{n} E(X_i) = 0\\] \\[E(X_i^2) = \\int_{-\\infty}^{+\\infty} x^2 \\cdot \\frac{1}{2}e^{-|x|} dx = 2\\] \\[\\therefore D(X_i) = E(X_i^2) - [E(X_i)]^2 = 2 - 0^2 = 2\\] \\[D(\\overline{X}) = \\frac{1}{n^2} \\sum\\limits_{i=1}^{n} D(X_i) = \\frac{2}{n} = \\frac{2}{10} = 0.2\\] \\[S^2 = \\frac{1}{n-1} \\sum\\limits_{i=1}^{n} (X_i - \\overline{X})^2\\] \\[\\text{\u7531\u4e8e} S^2 \\text{\u65e0\u504f}\\] \\[E(S^2) = Var(X) = 2\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW11/#b7","title":"B7","text":"Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u5bc6\u5ea6\u51fd\u6570</p> \\[f(x) = \\begin{cases} \\lambda e^{-\\lambda x},x &gt; 0 \\\\ 0,x \\le 0 \\end{cases}\\] <p>\u4ece\u6837\u672c\u4e2d\u62bd\u53d6\u5bb9\u91cf\u4e3a 10 \u7684\u6837\u672c</p> <p>(1) \u6c42\u6837\u672c\u5747\u503c\u7684\u6570\u5b66\u671f\u671b\u548c\u65b9\u5dee\uff1b</p> <p>(2) \u8bb0 \\(X_{(1)} = min\\{X_1,X_2,\\cdots,X_{10}\\}\\)\uff0c\u6c42 \\(X_{(1)}\\) \u7684\u6570\u5b66\u671f\u671b\u548c\u65b9\u5dee\u3002</p> Answer \\[E(X_i) = \\int_{0}^{+\\infty} x \\cdot \\lambda e^{-\\lambda x} dx = \\frac{1}{\\lambda}\\] \\[\\therefore E(\\overline{X}) = \\frac{1}{n} \\sum\\limits_{i=1}^{n} E(X_i) = \\frac{1}{\\lambda}\\] \\[E(X_i^2) = \\int_{0}^{+\\infty} x^2 \\cdot \\lambda e^{-\\lambda x} dx = \\frac{2}{\\lambda^2}\\] \\[\\therefore D(X_i) = E(X_i^2) - [E(X_i)]^2 = \\frac{1}{\\lambda^2}\\] \\[D(\\overline{X}) = \\frac{1}{n^2} \\sum\\limits_{i=1}^{n} D(X_i) = \\frac{1}{10\\lambda^2}\\] \\[F_X(x) = P(X \\le x) = 1 - e^{-\\lambda x},x \\ge 0\\] \\[F_{X_{(1)}}(x) = P(X_{(1)} \\le x) = 1 - P(X_1 &gt; x,X_2 &gt; x,\\cdots,X_{10} &gt; x) = 1 - (e^{-\\lambda x})^{10},x \\ge 0\\] \\[f_{X_{(1)}}(x) = 10 \\lambda e^{-10 \\lambda x},x \\ge 0\\] \\[\\therefore X_{(1)} \\sim E(10 \\lambda)\\] \\[E(X_{(1)}) = \\frac{1}{10 \\lambda}\\] \\[D(X_{(1)}) = \\frac{1}{100 \\lambda^2}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW11/#b10","title":"B10","text":"Question <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu,\\sigma^2)\\) \uff0c \\(X_1,X_2,\\cdots,X_5\\) \u548c \\(Y_1,Y_2,\\cdots,Y_9\\) \u662f\u6765\u81ea\u603b\u4f53 \\(X\\) \u7684\u4e24\u4e2a\u72ec\u7acb\u6837\u672c\uff0c \\(\\overline{X}\\) \u548c \\(\\overline{Y}\\) \u5206\u522b\u662f\u8fd9\u4e24\u4e2a\u6837\u672c\u7684\u6837\u672c\u5747\u503c\uff0c \\(S_1^2\\) \u548c \\(S_2^2\\) \u5206\u522b\u662f\u8fd9\u4e24\u4e2a\u6837\u672c\u7684\u6837\u672c\u65b9\u5dee\u3002</p> <p>(1)\u82e5 \\(\\frac{a(\\overline{X} - \\overline{Y})}{\\sigma} \\sim N(0,1)\\) \uff0c\u6c42 \\(a\\) \u7684\u503c\uff1b</p> <p>(2)\u82e5 \\(\\frac{b(\\overline{X} - \\overline{Y})}{\\sqrt{S_1^2 + 2S_2^2}} \\sim t(12)\\) \uff0c\u6c42 \\(b\\) \u7684\u503c\u3002</p> Answer \\[E(\\overline{X} - \\overline{Y}) = E(\\overline{X}) - E(\\overline{Y}) = \\mu - \\mu = 0\\] \\[\\text{\u7531\u4e8e\u72ec\u7acb}\\] \\[D(\\overline{X} - \\overline{Y}) = D(\\overline{X}) + D(\\overline{Y}) = \\frac{\\sigma^2}{5} + \\frac{\\sigma^2}{9} = \\frac{14\\sigma^2}{45}\\] \\[\\therefore \\overline{X} - \\overline{Y} \\sim N(0,\\frac{14\\sigma^2}{45})\\] \\[\\therefore a = \\pm \\sqrt{\\frac{45}{14}}\\] \\[S_1^2 = \\frac{1}{4}\\sum_{i=1}^5(X_i - \\overline{X})^2\\] \\[\\frac{4S_1^2}{\\sigma^2} \\sim \\chi^2(4)\\] \\[S_2^2 = \\frac{1}{8}\\sum_{i=1}^9(Y_i - \\overline{Y})^2\\] \\[\\frac{8S_2^2}{\\sigma^2} \\sim \\chi^2(8)\\] \\[\\therefore \\frac{4S_1^2 + 8S_2^2}{\\sigma^2} \\sim \\chi^2(12)\\] \\[\\therefore \\frac{\\frac{\\overline{X} - \\overline{Y}}{\\frac{14}{45}\\sigma^2}}{{\\sqrt{\\frac{\\frac{4S_1^2 + 8S_2^2}{\\sigma^2}}{12}}}} \\sim t(12)\\] \\[\\therefore b = \\pm \\sqrt{\\frac{135}{14}}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW11/#a3","title":"A3(\u53ea\u7b97\u77e9\u4f30\u8ba1)","text":"Question <p>\u8bbe \\(X_1,X_2,\\cdots,X_n\\) \u662f\u6765\u81ea\u4e0b\u5217\u603b\u4f53 \\(X\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c\u6c42\u5404\u603b\u4f53\u4e2d\u672a\u77e5\u53c2\u6570 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u91cf\u548c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf\uff0c\u5e76\u5bf9\u6240\u83b7\u5f97\u7684\u6837\u672c\u503c\uff0c\u6c42\u53c2\u6570 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u91cf\u548c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf\u3002</p> <p>(1) </p> \\[f(x;\\theta) = \\begin{cases} 2^{-\\theta}\\theta x^{\\theta-1}, &amp; 0 &lt; x &lt; 2 \\\\ 0, &amp; \\text{\u5176\u4ed6} \\end{cases} \\theta &gt; 0\\] <p>\u6837\u672c\u503c\uff1a0.45  0.2  0.5  0.47  0.35  1.63  0.14  0.06  0.89  0.34</p> <p>(2)</p> \\[f(x;\\theta) = \\frac{1}{2\\theta}e^{-\\frac{|x|}{\\theta}}, -\\infty &lt; x &lt; \\infty, \\theta &gt; 0\\] <p>\u6837\u672c\u503c\uff1a -0.05  -0.47  0.01  -0.03  -0.18  1.65  -0.64  -1.05  0.41  -0.19</p> <p>(3)</p> \\[f(x;\\theta) = \\begin{cases} \\frac{1}{2-\\theta}, &amp; \\theta \\le x &lt; 2 \\\\ 0, &amp; \\text{\u5176\u4ed6} \\end{cases} \\theta &lt; 2\\] <p>\u6837\u672c\u503c\uff1a0.95  0.63  1.69  1.97  0.84  1.81  0.53  0.35  1.34  0.82</p> Answer \\[E(X) = \\int_0^2 x \\cdot 2^{-\\theta}\\theta x^{\\theta-1} dx = \\frac{2\\theta}{\\theta + 1}\\] \\[\\overline{X} = 0.503\\] \\[E(X) = \\overline{X} \\Rightarrow \\hat{\\theta} = \\frac{\\overline{X}}{2 - \\overline{X}} \\approx 0.336\\] \\[E(X) = \\int_{-\\infty}^\\infty x \\cdot \\frac{1}{2\\theta}e^{-\\frac{|x|}{\\theta}} dx = 0\\] \\[E(X^2) = \\int_{-\\infty}^\\infty x^2 \\cdot \\frac{1}{2\\theta}e^{-\\frac{|x|}{\\theta}} dx = 2\\theta^2 = D(X)\\] \\[A_2 = \\frac{1}{n} \\sum\\limits_{i=1}^n X_i^2 = 0.46956\\] \\[E(X^2) = A_2 \\Rightarrow \\hat{\\theta} = \\sqrt{\\frac{1}{2}A_2} \\approx 0.4845\\] <p>3.</p> \\[E(X) = \\int_{\\theta}^2 x \\cdot \\frac{1}{2-\\theta} dx = \\frac{\\theta + 2}{2}\\] \\[\\overline{X} = 1.093\\] \\[E(X) = \\overline{X} \\Rightarrow \\hat{\\theta} = 2\\overline{X} - 2 = 0.186\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW12/","title":"HW12(\u4e60\u9898\u4e03)","text":"<p> \u7ea6 1178 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 6 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW12/#a3","title":"A3(\u53ea\u7b97\u6781\u5927\u4f3c\u7136\u4f30\u8ba1)","text":"Question <p>\u8bbe \\(X_1,X_2,\\cdots,X_n\\) \u662f\u6765\u81ea\u4e0b\u5217\u603b\u4f53 \\(X\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c\u6c42\u5404\u603b\u4f53\u4e2d\u672a\u77e5\u53c2\u6570 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u91cf\u548c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf\uff0c\u5e76\u5bf9\u6240\u83b7\u5f97\u7684\u6837\u672c\u503c\uff0c\u6c42\u53c2\u6570 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u91cf\u548c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf\u3002</p> <p>(1) </p> \\[f(x;\\theta) = \\begin{cases} 2^{-\\theta}\\theta x^{\\theta-1}, &amp; 0 &lt; x &lt; 2 \\\\ 0, &amp; \\text{\u5176\u4ed6} \\end{cases} , \\theta &gt; 0\\] <p>\u6837\u672c\u503c\uff1a0.45  0.2  0.5  0.47  0.35  1.63  0.14  0.06  0.89  0.34</p> <p>(2)</p> \\[f(x;\\theta) = \\frac{1}{2\\theta}e^{-\\frac{|x|}{\\theta}}, -\\infty &lt; x &lt; \\infty, \\theta &gt; 0\\] <p>\u6837\u672c\u503c\uff1a -0.05  -0.47  0.01  -0.03  -0.18  1.65  -0.64  -1.05  0.41  -0.19</p> <p>(3)</p> \\[f(x;\\theta) = \\begin{cases} \\frac{1}{2-\\theta}, &amp; \\theta \\le x &lt; 2 \\\\ 0, &amp; \\text{\u5176\u4ed6} \\end{cases} \\theta &lt; 2\\] <p>\u6837\u672c\u503c\uff1a0.95  0.63  1.69  1.97  0.84  1.81  0.53  0.35  1.34  0.82</p> Answer \\[L(\\theta) = \\prod\\limits_{i=1}^n f(x_i;\\theta) = (2^{-\\theta}\\theta)^n \\prod\\limits_{i=1}^n x_i^{\\theta - 1}\\] \\[\\frac{\\partial \\ln L(\\theta)}{\\partial \\theta} = -n \\ln 2 + \\frac{n}{\\theta} + \\sum\\limits_{i=1}^n \\ln x_i = 0\\] \\[\\hat{\\theta} = \\frac{1}{\\ln 2 - \\frac{1}{n} \\sum\\limits_{i=1}^n \\ln x_i}\\] <p>\u4ee3\u5165\u6570\u636e\u5f97\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c\u4e3a 0.577</p> \\[L(\\theta) = \\prod\\limits_{i=1}^n f(x_i;\\theta) = (\\frac{1}{2\\theta})^n e^{-\\frac{\\sum\\limits_{i=1}^n |x_i|}{\\theta}}\\] \\[\\frac{\\partial \\ln L(\\theta)}{\\partial \\theta} = - \\frac{n}{\\theta} + \\frac{\\sum\\limits_{i=1}^n |x_i|}{\\theta^2} = 0\\] \\[\\hat{\\theta} = \\frac{\\sum\\limits_{i=1}^n |x_i|}{n}\\] <p>\u4ee3\u5165\u6570\u636e\u5f97\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c\u4e3a 0.468</p> \\[L(\\theta) = \\prod\\limits_{i=1}^n f(x_i;\\theta) = (\\frac{1}{2-\\theta})^n\\] <p>\u968f\u7740 \\(\\theta\\) \u7684\u589e\u5927\uff0c\\(L(\\theta)\\) \u7684\u503c\u589e\u5927</p> \\[\\therefore \\hat{\\theta} = min\\{X_1,X_2,\\cdots,X_n\\}\\] <p>\u4ee3\u5165\u6570\u636e\u5f97\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c\u4e3a 0.35</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW12/#a6","title":"A6","text":"Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u5177\u6709\u5982\u4e0b\u6982\u7387\u5206\u5e03\u5f8b\uff1a</p> \\(X\\) 0 1 2 \\(P\\) \\(\\theta\\) \\(\\lambda\\) \\(1 - \\theta - \\lambda\\) <p>\u5176\u4e2d \\(0 &lt; \\theta &lt; 1\\)\uff0c\\(0 &lt; \\lambda &lt; 1\\)\uff0c\u4e14 \\(0 &lt; \\theta + \\lambda &lt; 1\\)\uff0c\u4ece\u4e0a\u8ff0\u603b\u4f53\u4e2d\u62bd\u53d6\u6837\u672c\u5bb9\u91cf\u4e3a 9 \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c\u89c2\u5bdf\u503c\uff1a2\uff0c0\uff0c2\uff0c1\uff0c0\uff0c0\uff0c1\uff0c2\uff0c1\uff0c\u6c42\u53c2\u6570 \\(\\theta\\) \u548c \\(\\lambda\\) \u7684\u77e9\u4f30\u8ba1\u503c\u548c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c\u3002</p> Answer <ol> <li>\u77e9\u4f30\u8ba1</li> </ol> \\[E(X) = 2 - 2\\theta - \\lambda\\] \\[E(X^2) = 4 - 4\\theta - 2\\lambda\\] \\[\\begin{cases} \\theta = 1 - \\frac{3}{2} E(X) + \\frac{1}{2} E(X^2) \\\\ \\lambda = 2 E(X) - E(X^2) \\end{cases}\\] \\[\\therefore \\begin{cases} \\hat{\\theta} = 1 - \\frac{3}{2} \\cdot \\overline{X} + \\frac{1}{2} \\overline{X^2} \\\\ \\hat{\\lambda} = 2 \\cdot \\overline{X} - \\overline{X^2} \\end{cases}\\] <p>\u4ee3\u5165\u6570\u636e\u5f97\u77e9\u4f30\u8ba1\u503c\u4e3a \\(\\hat{\\theta} = \\frac{1}{3}\\)\uff0c\\(\\hat{\\lambda} = \\frac{1}{3}\\)</p> <ol> <li>\u6781\u5927\u4f3c\u7136\u4f30\u8ba1</li> </ol> \\[L(\\theta,\\lambda) = \\theta^3 \\cdot \\lambda^3 \\cdot (1-\\theta-\\lambda)^3\\] \\[\\frac{\\partial L(\\theta,\\lambda)}{\\partial \\theta} = 3\\lambda^2 \\theta^3 (1 - \\lambda - \\theta)^3 - 3 \\lambda^3 \\theta^3 (1 - \\lambda - \\theta)^2 = 0\\] \\[\\frac{\\partial L(\\theta,\\lambda)}{\\partial \\lambda} = 3 \\lambda^3 \\theta^2 (1 - \\lambda - \\theta)^3 - 3 \\lambda^3 \\theta^3 (1 - \\lambda - \\theta)^2 = 0\\] \\[\\therefore \\begin{cases} \\hat{\\theta} = \\frac{1}{3} \\\\ \\hat{\\lambda} = \\frac{1}{3} \\end{cases}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW12/#a7","title":"A7","text":"Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x;\\theta) = \\begin{cases} \\frac{x}{\\theta}e^{-\\frac{x^2}{2\\theta}}, &amp; x &gt; 0 \\\\ 0, &amp; \\text{otherwise} \\end{cases}\\] <p>\u5176\u4e2d \\(\\theta &gt; 0\\) \u672a\u77e5\uff0c\u8bb0 \\(\\mu_2 = E(X^2)\\) \uff0c \\(p = P\\{X &gt; 1\\}\\) . \\(X_1, \\cdots, X_n\\) \u662f\u6765\u81ea\u603b\u4f53 \\(X\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c\u6c42\u53c2\u6570 \\(\\theta , \\mu_2, p\\) \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf</p> Answer \\[L(\\theta) = \\prod\\limits_{i=1}^n(\\frac{x_i}{\\theta}e^{-\\frac{x_i^2}{2\\theta}})\\] \\[\\frac{\\partial \\ln L(\\theta)}{\\partial \\theta} = -\\frac{n}{\\theta} + \\frac{1}{2\\theta^2}\\sum\\limits_{i=1}^n x_i^2 = 0\\] \\[\\therefore \\hat{\\theta} = \\frac{1}{2n}\\sum\\limits_{i=1}^n x_i^2 = \\frac{1}{2}A_2\\] \\[\\mu_2 = E(X^2) = \\int_0^\\infty x^2 \\cdot \\frac{x}{\\theta}e^{-\\frac{x^2}{2\\theta}}dx = 2\\theta\\] \\[\\therefore \\hat{\\mu_2} = 2\\hat{\\theta} = \\frac{1}{n} \\sum\\limits_{i=1}^n x_i^2 =A_2\\] \\[p = P\\{X &gt; 1\\} = \\int_1^\\infty \\frac{x}{\\theta}e^{-\\frac{x^2}{2\\theta}}dx\\] \\[u = \\frac{x^2}{2\\theta} \\Rightarrow dx = \\frac{\\sqrt{\\theta}}{\\sqrt{2u}}du\\] \\[p = \\int_{\\frac{1}{2\\theta}}^\\infty \\sqrt{2 \\theta u} \\cdot \\frac{1}{\\theta}e^{-u} \\cdot \\frac{\\sqrt{\\theta}}{\\sqrt{2u}}du = \\int_{\\frac{1}{2\\theta}}^\\infty e^{-u}du = e^{-\\frac{1}{2\\theta}}\\] \\[\\therefore \\hat{p} = e^{-\\frac{n}{\\sum\\limits_{i=1}^n x_i^2}}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW12/#a8","title":"A8","text":"Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u5747\u503c\u4e3a \\(\\mu\\) \uff0c\u65b9\u5dee\u4e3a \\(\\sigma^2\\) \uff0c \\(X_1,X_2,\\cdots,X_{10}\\) \u4e3a\u6765\u81ea\u603b\u4f53 \\(X\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c\u95ee \\(a\\) \u53d6\u4f55\u503c\u65f6\uff0c \\(a \\sum\\limits_{i=1}^{9}(X_{i+1} - X_i)^2\\) \u662f \\(\\sigma^2\\) \u7684\u65e0\u504f\u4f30\u8ba1\u91cf\uff1f</p> Answer \\[\\therefore E(a \\sum\\limits_{i=1}^{9}(X_{i+1} - X_i)^2) = \\sigma^2\\] \\[\\therefore a \\sum\\limits_{i=1}^{9}E((X_{i+1} - X_i)^2) = \\sigma^2\\] \\[\\therefore a \\sum\\limits_{i=1}^{9}(Var(X_{i+1} - X_i) + E^2(X_{i+1} - X_i))= \\sigma^2\\] \\[\\therefore a \\sum\\limits_{i=1}^{9}(2 \\cdot \\sigma^2 + 0) = \\sigma^2\\] \\[\\therefore a = \\frac{1}{18}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW12/#a9","title":"A9","text":"Question <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu , \\sigma^2)\\) \uff0c \\(\\mu,\\sigma^2\\) \u672a\u77e5\uff0c \\(X_1,X_2,X_3\\) \u662f\u603b\u4f53 \\(X\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c\u7528</p> \\[\\hat{\\mu_1} = \\frac{1}{2}X_1 + \\frac{1}{4}X_2 + \\frac{1}{4}X_3\\] \\[\\hat{\\mu_2} = 2X_1 - 2X_2 + X_3\\] \\[\\hat{\\mu_3} = \\frac{1}{3}X_1 + \\frac{1}{3}X_2 + \\frac{1}{3}X_3\\] <p>\u4f30\u8ba1\u53c2\u6570 \\(\\mu\\) \uff0c\u5b83\u4eec\u90fd\u662f\u65e0\u504f\u4f30\u8ba1\u91cf\u5417\uff1f\u5982\u679c\u662f\uff0c\u54ea\u4e2a\u66f4\u6709\u6548\uff1f</p> Answer \\[E(\\hat{\\mu_1}) = \\frac{1}{2}E(X_1) + \\frac{1}{4}E(X_2) + \\frac{1}{4}E(X_3) = \\mu\\] \\[E(\\hat{\\mu_2}) = 2E(X_1) - 2E(X_2) + E(X_3) = \\mu\\] \\[E(\\hat{\\mu_3}) = \\frac{1}{3}E(X_1) + \\frac{1}{3}E(X_2) + \\frac{1}{3}E(X_3) = \\mu\\] <p>\u6240\u4ee5 \\(\\hat{\\mu_1},\\hat{\\mu_2},\\hat{\\mu_3}\\) \u90fd\u662f \\(\\mu\\) \u7684\u65e0\u504f\u4f30\u8ba1\u91cf\u3002</p> \\[D(\\hat{\\mu_1}) = (\\frac{1}{2})^2Var(X_1) + (\\frac{1}{4})^2Var(X_2) + (\\frac{1}{4})^2Var(X_3) = \\frac{3}{8}\\sigma^2\\] \\[D(\\hat{\\mu_2}) = (2)^2Var(X_1) + (-2)^2Var(X_2) + Var(X_3) = 9\\sigma^2\\] \\[D(\\hat{\\mu_3}) = (\\frac{1}{3})^2Var(X_1) + (\\frac{1}{3})^2Var(X_2) + (\\frac{1}{3})^2Var(X_3) = \\frac{1}{3}\\sigma^2\\] \\[ D(\\hat{\\mu_3}) &lt; D(\\hat{\\mu_1}) &lt; D(\\hat{\\mu_2}) \\] <p>\u6240\u4ee5 \\(\\hat{\\mu_3}\\) \u662f\u6700\u6709\u6548\u7684\u4f30\u8ba1\u91cf\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW12/#b3","title":"B3","text":"Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u5177\u6709\u5982\u4e0b\u6982\u7387\u5206\u5e03\u5f8b\uff1a</p> \\(x\\) \\(a_1\\) \\(a_2\\) \\(a_3\\) \\(p\\) \\(\\theta\\) \\(\\frac{1 - \\theta}{2}\\) \\(\\frac{1 - \\theta}{2}\\) <p>\u4ece\u603b\u4f53 \\(X\\) \u4e2d\u53d6\u5f97\u6837\u672c\u5bb9\u91cf\u4e3a \\(n\\) \u7684\u6837\u672c \\(X_1, X_2, \\cdots, X_n\\) \uff0c\u8bb0\u5176\u4e2d\u53d6 \\(a_1,a_2,a_3\\) \u7684\u4e2a\u6570\u5206\u522b\u4e3a \\(n_1,n_2,n_3\\) \uff0c\u5176\u4e2d \\(n_1 + n_2 + n_3 = n\\) \uff0c\u6c42\u53c2\u6570 \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u91cf\u548c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf\u3002</p> Answer <p>\u77e9\u4f30\u8ba1\u91cf\uff1a</p> \\[E(X) = a_1p + a_2\\frac{1 - \\theta}{2} + a_3\\frac{1 - \\theta}{2} = \\overline{X}\\] \\[\\therefore \\hat{\\theta} = \\frac{2\\overline{X} - a_2 - a_3}{2a_1 - a_2 - a_3}\\] <p>\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf\uff1a</p> \\[L(\\theta) = \\theta^{n_1}(1 - \\theta)^{n_2 + n_3}\\] \\[\\frac{\\partial \\ln L(\\theta)}{\\partial \\theta} = \\frac{n_1}{\\theta} - \\frac{n_2 + n_3}{1 - \\theta} = 0\\] \\[\\therefore \\hat{\\theta} = \\frac{n_1}{n}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW12/#b6","title":"B6","text":"Question <p>\u8bbe\u603b\u4f53 \\(X\\) \u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x;\\theta) = \\begin{cases} \\frac{1}{\\theta}e^{-\\frac{x}{\\theta}}, &amp; x &gt; 0 \\\\ 0, &amp; x \\leq 0 \\end{cases}\\] <p>\\(\\theta &gt; 0\\) \u672a\u77e5, \\(X_1, X_2, \\cdots, X_n\\) \u662f\u6765\u81ea\u603b\u4f53 \\(X\\) \u7684\u7b80\u5355\u968f\u673a\u6837\u672c.</p> <p>(1)\u8bc1\u660e\uff1a\u6837\u672c\u5747\u503c\u662f \\(\\theta\\) \u7684\u77e9\u4f30\u8ba1\u91cf\uff0c\u4e5f\u662f\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf\uff1b</p> <p>(2)\u5728\u5f62\u5982 \\(c\\sum\\limits_{i = 1}^n X_i\\) \u7684\u4f30\u8ba1\u4e2d\u6c42 \\(c\\) \uff0c\u4f7f\u5176\u5728\u5747\u65b9\u8bef\u5dee\u51c6\u5219\u4e0b\u6700\u4f18\uff1b</p> <p>(3)\u5224\u65ad\u7531 (2) \u5f97\u5230\u7684\u4f30\u8ba1\u91cf\u662f\u5426\u662f \\(\\theta\\) \u7684\u76f8\u5408\u4f30\u8ba1\u91cf.</p> Answer <p>(1)\u77e9\u4f30\u8ba1\u91cf\uff1a</p> \\[E(X) = \\int_0^\\infty x \\frac{1}{\\theta}e^{-\\frac{x}{\\theta}} dx = \\theta\\] \\[\\therefore \\hat{\\theta} = \\overline{X}\\] <p>\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf\uff1a</p> \\[L(\\theta) = \\prod\\limits_{i=1}^n (\\frac{1}{\\theta}e^{-\\frac{x_i}{\\theta}})\\] \\[\\frac{\\partial \\ln L(\\theta)}{\\partial \\theta} = -\\frac{n}{\\theta} + \\sum\\limits_{i=1}^n \\frac{x_i}{\\theta^2} = 0\\] \\[\\therefore \\hat{\\theta} = \\frac{1}{n} \\sum\\limits_{i=1}^n X_i = \\overline{X}\\] <p>(2)\u5747\u65b9\u8bef\u5dee\u51c6\u5219\u4e0b\u6700\u4f18\u7684\u4f30\u8ba1\u91cf\uff1a</p> \\[Mse(c \\sum\\limits_{i=1}^n X_i) = E[((c \\sum\\limits_{i=1}^n X_i) - \\theta)^2] = Var((c \\sum\\limits_{i=1}^n X_i) - \\theta) + E^2((c \\sum\\limits_{i=1}^n X_i) - \\theta)\\] \\[Var[(c \\sum\\limits_{i=1}^n X_i) - \\theta] = Var(c \\sum\\limits_{i=1}^n X_i) = c^2 \\sum\\limits_{i=1}^n Var(X_i)\\] \\[Var(X_i) = E(X_i^2) - [E(X_i)]^2 = \\int_0^\\infty x^2 \\frac{1}{\\theta}e^{-\\frac{x}{\\theta}} dx - \\theta^2 = \\theta^2\\] \\[\\therefore Var(c \\sum\\limits_{i=1}^n X_i) = n \\theta^2 c^2\\] \\[E^2[(c \\sum\\limits_{i=1}^n X_i) - \\theta] = [(c \\sum\\limits_{i=1}^n E(X_i)) - \\theta]^2 = [(c n \\theta) - \\theta]^2\\] \\[\\therefore Mse(c \\sum\\limits_{i=1}^n X_i) = \\theta^2 [(n^2+n)c^2 - 2nc + 1]\\] \\[\\therefore c= \\frac{n}{n^2 + n} = \\frac{1}{n+1}\\] <p>(3)</p> \\[\\hat{\\theta} = \\frac{1}{n+1} \\sum\\limits_{i=1}^n X_i = \\frac{n}{n+1} \\overline{X}\\] \\[P\\{|\\hat{\\theta} - \\theta| \\ge \\varepsilon\\} \\le \\frac{Var(\\hat{\\theta})}{\\varepsilon^2} = \\frac{n^2}{(n+1)^2} \\frac{Var(\\overline{X})}{\\varepsilon^2} = \\frac{n^2}{(n+1)^2} \\frac{1}{n} \\frac{Var(X)}{\\varepsilon^2} = \\frac{n}{(n+1)^2} \\frac{\\theta^2}{\\varepsilon^2}\\] \\[\\mathop{lim}\\limits_{n \\to \\infty} P\\{|\\hat{\\theta} - \\theta| \\ge \\varepsilon\\} \\rightarrow 0\\] \\[\\therefore \\hat{\\theta} \\text{\u662f\u76f8\u5408\u4f30\u8ba1\u91cf.}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW13/","title":"HW13(\u4e60\u9898\u4e03)","text":"<p> \u7ea6 1000 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW13/#a11","title":"A11","text":"Question <p>\u67d0\u673a\u5668\u751f\u4ea7\u7684\u87ba\u6746\u76f4\u5f84X(\u5355\u4f4d\uff1amm)\u670d\u4ece\u6b63\u6001\u5206\u5e03 \\(N(\\mu,0.3^2)\\),</p> <p>(1)\u4ece\u603b\u4f53\u4e2d\u62bd\u53d6\u6837\u672c\u5bb9\u91cf\u4e3a 5 \u7684\u6837\u672c.\u6d4b\u5f97\u76f4\u5f84\uff1a22.3.21.5.21.8,21.4,22.1,\u8bd5\u5728 95% \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e0b\u6c42\u8be5\u673a\u5668\u6240\u751f\u4ea7\u7684\u87ba\u6746\u5e73\u5747\u76f4\u5f84 \\(\\mu\\) \u7684\u7f6e\u4fe1\u533a\u95f4\uff1a</p> <p>(2)\u82e5\u8981\u4f7f\u87ba\u6746\u7684\u5e73\u5747\u76f4\u5f84 \\(\\mu\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u7f6e\u4fe1\u533a\u95f4\u957f\u5ea6\u4e0d\u8d85\u8fc7 0.2 ,\u95ee\u6837\u672c\u5bb9\u91cf n \u81f3\u5c11\u5e94\u53d6\u591a\u5927?</p> Answer <ol> <li>\u8ba1\u7b97\u5f97 \\(\\overline{X} = 21.82\\)</li> </ol> <p>\u67e5\u8868\u5f97 \\(z_{0.025} = 1.96\\)</p> \\[\\therefore (\\overline{X} - z_{0.025}\\frac{\\sigma}{\\sqrt{n}},\\overline{X} + z_{0.025}\\frac{\\sigma}{\\sqrt{n}}) = (21.557,22.083)\\] <ol> <li></li> </ol> \\[\\therefore 2 \\cdot z_{0.025}\\frac{\\sigma}{\\sqrt{n}} \\leq 0.2\\] \\[\\therefore n \\geq \\lceil (\\frac{2 \\cdot 1.96 \\cdot 0.3}{0.2})^2 \\rceil = 35\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW13/#a12","title":"A12","text":"Question <p>\u67d0\u5de5\u5382\u751f\u4ea7\u7684\u706f\u6ce1\u5bff\u547d \\(X\\) (\u5355\u4f4d\uff1ah) \u670d\u4ece\u6b63\u6001\u5206\u5e03 \\(N(\\mu,\\sigma^2)\\) , \\(\\mu,\\sigma\\) \u672a\u77e5,\u4ece\u5df2\u751f\u4ea7\u7684\u4e00\u5927\u6279\u706f\u6ce1\u4e2d\u91c7\u7528\u65e0\u653e\u56de\u62bd\u6837\u65b9\u5f0f\u62bd\u53d6 15 \u53ea,\u6d4b\u5f97\u5176\u5bff\u547d\u5982\u4e0b:</p> <p>4040 2990 2964 3245 3026 3633 3387 4136</p> <p>3595 3194 3714 2831 3845 3410 3004</p> <p>(1) \u6c42 \\(\\mu\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u7f6e\u4fe1\u533a\u95f4;</p> <p>(2) \u6c42 \\(\\mu\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0b\u9650.</p> Answer <ol> <li>\u8ba1\u7b97\u5f97 \\(\\overline{X} = \\frac{51014}{15} \\approx 3400.9333, s^2 \\approx 170399.7810\\)</li> </ol> <p>\u67e5\u8868\u5f97 \\(t_{0.025}(14) = 2.1448\\)</p> \\[\\therefore (\\overline{X} - t_{0.025}(14)\\frac{s}{\\sqrt{n}},\\overline{X} + t_{0.025}(14)\\frac{s}{\\sqrt{n}}) = (3172.3336,3629.5330)\\] <ol> <li>\u67e5\u8868\u5f97 \\(t_{0.05}(14) = 1.7613\\)</li> </ol> \\[\\therefore \\overline{X} - t_{0.05}(14)\\frac{s}{\\sqrt{n}} = 3213.2083\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW13/#a14","title":"A14","text":"Question <p>\u4e3a\u6bd4\u8f83\u7532\u3001\u4e59\u4e24\u79cd\u80a5\u6599\u5bf9\u4ea7\u91cf\u7684\u5f71\u54cd,\u7814\u7a76\u8005\u9009\u62e9\u4e86 10 \u5757\u7530\u5730,\u5c06\u6bcf\u5757\u7530\u5730\u5206\u6210\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5757,\u968f\u673a\u9009\u62e9\u4e00\u5757\u7528\u7532\u80a5\u6599,\u53e6\u4e00\u5757\u7528\u4e59\u80a5\u6599,\u5176\u4ed6\u6761\u4ef6\u4fdd\u6301\u76f8\u540c,\u5f97\u5230\u7684\u4ea7\u91cf(\u5355\u4f4d:kg)</p> <p>\u6570\u636e\u5982\u4e0b:</p> \u7532\u80a5\u6599 109 98 97 100 104 102 94 99 103 108 \u4e59\u80a5\u6599 107 105 110 118 109 113 111 95 112 101 <p>\u5047\u8bbe\u7532\u3001\u4e59\u4e24\u79cd\u80a5\u6599\u7684\u4ea7\u91cf\u5dee\u670d\u4ece\u6b63\u6001\u5206\u5e03\uff0c\u8bd5\u5728 95% \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e0b\u63a8\u65ad\u7532\u3001\u4e59\u4e24\u79cd\u80a5\u6599\u7684\u5e73\u5747\u4ea7\u91cf\u5dee\u503c\u7684\u8303\u56f4!</p> Answer <p>\u8ba1\u7b97\u5f97 \\(\\overline{D} = \\frac{1}{10}\\sum\\limits_{i=1}^{10} (X_i - Y_i) = -6.7 ,s_D \\approx 8.6801\\)</p> <p>\u67e5\u8868\u5f97 \\(t_{0.025}(9) = 2.2622\\)</p> \\[\\therefore (\\overline{D} - t_{0.0025}(9)\\frac{s_D}{\\sqrt{n}},\\overline{D} + t_{0.025}(9)\\frac{s_D}{\\sqrt{n}}) = (-12.9095,-0.4905)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW13/#a16","title":"A16","text":"Question <p>\u5df2\u77e5\u67d0\u79cd\u7535\u5b50\u7ba1\u4f7f\u7528\u593a\u547d(\u5355\u4f4d:h)\u670d\u4ece\u6b63\u6001\u5206\u5e03 \\(N(\\mu,\\sigma^2)\\) , \\(\\mu,\\sigma\\) \u672a\u77e5,\u4ece\u4e00\u6279\u7535\u5b50\u7ba1\u4e2d\u968f\u673a\u62bd\u53d6 16 \u53ea,\u68c0\u6d4b\u7ed3\u679c\u5f97\u6837\u672c\u6807\u51c6\u5dee\u4e3a 300h.\u5728\u7f6e\u4fe1\u6c34\u5e73 95% \u4e0b\u6c42:</p> <p>(1) \\(\\sigma\\) \u7684\u7f6e\u4fe1\u533a\u95f4;</p> <p>(2) \\(\\sigma\\) \u7684\u5355\u4fa7\u7f6e\u4fe1\u4e0a\u9650.</p> Answer <ol> <li>\u67e5\u8868\u5f97 \\(\\chi_{0.025}^{2}(15) = 27.488\\) , \\(\\chi_{0.975}^{2}(15) = 6.262\\)</li> </ol> \\[\\therefore (\\sqrt{\\frac{(n-1)s^2}{\\chi_{0.025}^{2}(15)}},\\sqrt{\\frac{(n-1)s^2}{\\chi_{0.975}^{2}(15)}}) = (221.613, 464.312)\\] <ol> <li>\u67e5\u8868\u5f97 \\(\\chi_{0.95}^{2}(15) = 7.261\\)</li> </ol> \\[\\therefore \\sqrt{\\frac{(n-1)s^2}{\\chi_{0.95}^{2}(15)}} = 431.190\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW13/#a18","title":"A18","text":"Question <p>\u67d0\u5382\u7684\u4e00\u53f0\u74f6\u88c5\u704c\u88c5\u673a,\u6bcf\u74f6\u7684\u51c0\u91cd \\(X\\) \u670d\u4ece\u6b63\u6001\u5206\u5e03 \\(N(\\mu_1,\\sigma_1^2)\\) \u4ece\u4e2d\u968f\u673a\u62bd\u51fa 16 \u74f6,\u79f0\u5f97\u5176\u51c0\u91cd\u7684\u5e73\u5747\u503c\u4e3a 456.64 g,\u6807\u51c6\u5dee\u4e3a 12.8 g;\u73b0\u5f15\u8fdb\u4e86\u4e00\u53f0\u65b0\u704c\u88c5\u673a,\u5176\u6bcf\u74f6\u7684\u51c0\u91cd \\(Y\\) \u670d\u4ece\u6b63\u6001\u5206\u5e03 \\(N(\\mu_2,\\sigma_2^2)\\) ,\u4ece\u4e2d\u968f\u673a\u62bd\u51fa 12 \u74f6,\u79f0\u5f97\u5176\u51c0\u91cd\u7684\u5e73\u5747\u503c\u4e3a 451.34 g,\u6807\u51c6\u5dee\u4e3a 11.3 g.</p> <p>(1)\u5047\u8bbe \\(\\sigma_1 =13,\\sigma_2=12\\) ,\u6c42 \\(\\mu_1 - \\mu_2\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u7f6e\u4fe1\u533a\u95f4;</p> <p>(2)\u5047\u8bbe \\(\\sigma_1 = \\sigma_2\\) \u672a\u77e5,\u6c42 \\(\\mu_1 - \\mu_2\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u7f6e\u4fe1\u533a\u95f4;</p> <p>(3)\u6c42 \\(\\frac{\\sigma_1^2}{\\sigma_2^2}\\) \u7684\u7f6e\u4fe1\u6c34\u5e73\u4e3a 95% \u7684\u7f6e\u4fe1\u533a\u95f4.</p> Answer <ol> <li>\u67e5\u8868\u5f97 \\(z_{0.025} = 1.96\\)</li> </ol> \\[\\therefore ((\\overline{X} - \\overline{Y}) - z_{0.025} \\sqrt{\\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}},(\\overline{X} - \\overline{Y}) + z_{0.025} \\sqrt{\\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}}) = (-4.01, 14.61)\\] <ol> <li>\u67e5\u8868\u5f97 \\(t_{0.025}(26) = 2.0555\\)</li> </ol> <p>\u8ba1\u7b97\u5f97 \\(s_w = \\sqrt{\\frac{(n_1-1)s_1^2 + (n_2-1)s_2^2}{n_1 + n_2 - 2}} \\approx 12.1879\\)</p> \\[\\therefore ((\\overline{X} - \\overline{Y}) - t_{0.025}(26) \\sqrt{\\frac{s_w^2}{n_1} + \\frac{s_w^2}{n_2}},(\\overline{X} - \\overline{Y}) + t_{0.025}(26) \\sqrt{\\frac{s_w^2}{n_1} + \\frac{s_w^2}{n_2}}) = (-4.267, 14.867)\\] <ol> <li>\u67e5\u8868\u5f97 \\(F_{0.025}(15,11) = 3.33,F_{0.975}(15,11) = \\frac{1}{F_{0.025}(11,15)} \\approx 0.332\\)</li> </ol> \\[\\therefore (\\frac{S_1^2}{S_2^2} \\frac{1}{F_{0.025}(15,11)},\\frac{S_1^2}{S_2^2} \\frac{1}{F_{0.975}(15,11)}) = (0.3853,3.8590)\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW14/","title":"HW14(\u4e60\u9898\u516b)","text":"<p> \u7ea6 797 \u4e2a\u5b57  120 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p> <p>Abstract</p> <p>\u6ca1\u6709 python \u73af\u5883\u7684\u5c0f\u670b\u53cb\u53ef\u4ee5\u9009\u62e9\u88c5\u4e00\u4e2a\uff0c\u6216\u8005\u7528 excel \u4ee3\u66ff\u3002</p> <p>\u6211\u5728\u8fd9\u91cc\u7ed9\u51fa\u90e8\u5206 python \u4ee3\u7801\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW14/#a2","title":"A2","text":"Question <p>\u7535\u89c6\u673a\u663e\u50cf\u7ba1\u7684\u8d28\u91cf\u6807\u51c6\u662f\u5e73\u5747\u4f7f\u7528\u5bff\u547d\u4e3a 15 000 h.\u67d0\u7535\u89c6\u673a\u5382\u5ba3\u79f0\u5176\u751f\u4ea7\u7684\u663e\u50cf\u7ba1\u5e73\u5747\u5bff\u547d\u5927\u5927\u9ad8\u4e8e\u89c4\u5b9a\u7684\u6807\u51c6.\u4e3a\u4e86\u5bf9\u6b64\u8bf4\u6cd5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u968f\u673a\u62bd\u53d6\u4e86 100 \u4ef6\u8be5\u5382\u751f\u4ea7\u7684\u663e\u50cf\u7ba1\uff0c\u6d4b\u5f97\u5e73\u5747\u4f7f\u7528\u5bff\u547d\u4e3a 15 525 h.\u5047\u8bbe\u8be5\u5382\u751f\u4ea7\u7684\u663e\u50cf\u7ba1\u7684\u5bff\u547d \\(X \\sim N(\\mu, 1500^2)\\) ,\u5229\u7528\u5047\u8bbe\u68c0\u9a8c\u63a8\u65ad\u662f\u5426\u6709\u5145\u5206\u7684\u7406\u7531\u8ba4\u4e3a\u8be5\u5382\u7684\u663e\u50cf\u7ba1\u5bff\u547d\u663e\u8457\u5730\u9ad8\u4e8e\u89c4\u5b9a\u7684\u6807\u51c6(\u663e\u8457\u6027\u6c34\u5e73 \\(\\alpha\\) =0.05).</p> <p>(1)\u7ed9\u51fa\u68c0\u9a8c\u7684\u539f\u5047\u8bbe\u3001\u5907\u62e9\u5047\u8bbe\u3001\u68c0\u9a8c\u7edf\u8ba1\u91cf\u548c\u62d2\u7edd\u57df\uff0c\u5e76\u6839\u636e\u6837\u672c\u8d44\u6599\u4f5c\u51fa\u5224\u65ad\uff1b</p> <p>(2)\u8ba1\u7b97 P_ \u503c\u4f5c\u51fa\u63a8\u65ad\uff0c\u548c(1)\u7684\u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e00\u81f4?</p> Answer <ol> <li>\u539f\u5047\u8bbe \\(H_0 : \\mu \\le 15000\\) ,\u5907\u62e9\u5047\u8bbe \\(H_1 : \\mu &gt; 15000\\)</li> </ol> <p>\u68c0\u9a8c\u7edf\u8ba1\u91cf \\(\\frac{\\overline{X}-15000}{1500/\\sqrt{n}}\\)</p> <p>\u62d2\u7edd\u57df \\(W = \\frac{\\overline{X}-15000}{1500/\\sqrt{n}} &gt; Z_{0.05} = 1.645\\)</p> <p>\u56e0\u4e3a \\(\\frac{\\overline{x}-15000}{1500/\\sqrt{n}} = 3.5 &gt; 1.645\\) ,\u6240\u4ee5\u62d2\u7edd \\(H_0\\) ,\u8ba4\u4e3a\u8be5\u5382\u751f\u4ea7\u7684\u663e\u50cf\u7ba1\u5bff\u547d\u663e\u8457\u5730\u9ad8\u4e8e\u89c4\u5b9a\u7684\u6807\u51c6.</p> <ol> <li>P_ = \\(P(Z \\ge 3.5) = 1 - \\Phi(3.5) = 0.000233 &lt; 0.05\\) </li> </ol> <p>\u6240\u4ee5\u62d2\u7edd \\(H_0\\) ,\u8ba4\u4e3a\u8be5\u5382\u751f\u4ea7\u7684\u663e\u50cf\u7ba1\u5bff\u547d\u663e\u8457\u5730\u9ad8\u4e8e\u89c4\u5b9a\u7684\u6807\u51c6,\u4e0e(1)\u5224\u65ad\u7ed3\u679c\u4e00\u81f4.</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW14/#a3","title":"A3","text":"Question <p>\u98df\u54c1\u5382\u7528\u81ea\u52a8\u88c5\u7f50\u673a\u88c5\u7f50\u5934\u98df\u54c1\uff0c\u6bcf\u7f50\u7684\u6807\u51c6\u91cd\u91cf\u4e3a 500 g.\u4e3a\u4e86\u68c0\u6d4b\u673a\u5668\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff0c\u6bcf\u9694\u4e00\u5b9a\u7684\u65f6\u95f4\u8fdb\u884c\u62bd\u6837\u68c0\u9a8c.\u73b0\u968f\u673a\u62bd\u5f97 10 \u7f50\uff0c\u6d4b\u5f97\u5e73\u5747\u91cd\u91cf\u4e3a 498 g,\u6807\u51c6\u5dee\u4e3a 6.5 g.\u5047\u5b9a\u7f50\u5934\u7684\u91cd\u91cf\u670d\u4ece\u6b63\u6001\u5206\u5e03\uff0c\u5229\u7528\u5047\u8bbe\u68c0\u9a8c\u63a8\u65ad\u673a\u5668\u7684\u5de5\u4f5c\u662f\u5426\u6b63\u5e38( \\(\\alpha\\) =0.02).</p> <p>(1)\u7ed9\u51fa\u68c0\u9a8c\u7684\u539f\u5047\u8bbe\u3001\u5907\u62e9\u5047\u8bbe\u3001\u68c0\u9a8c\u7edf\u8ba1\u91cf\u548c\u62d2\u7edd\u57ce\uff0c\u5e76\u6839\u636e\u6837\u672c\u8d44\u6599\u4f5c\u51fa\u5224\u65ad\uff1b</p> <p>(2)\u8ba1\u7b97 P_ \u503c\u5e76\u4f5c\u51fa\u63a8\u65ad\uff0c\u548c(1)\u7684\u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e00\u81f4?</p> Answer <ol> <li>\u539f\u5047\u8bbe \\(H_0 : \\mu = 500\\) ,\u5907\u62e9\u5047\u8bbe \\(H_1 : \\mu \\neq 500\\)</li> </ol> <p>\u68c0\u9a8c\u7edf\u8ba1\u91cf \\(T = \\frac{\\overline{X}-500}{6.5/\\sqrt{n}}\\)</p> <p>\u62d2\u7edd\u57df \\(W = |\\frac{\\overline{X}-500}{6.5/\\sqrt{n}}| &gt; t_{0.01}(9) = 2.8214\\)</p> <p>\u56e0\u4e3a \\(\\frac{\\overline{X}-500}{6.5/\\sqrt{n}} \\approx |-0.973| &lt; 2.8214\\) ,\u6240\u4ee5\u4e0d\u80fd\u62d2\u7edd \\(H_0\\) ,\u8ba4\u4e3a\u673a\u5668\u5de5\u4f5c\u6b63\u5e38.</p> <ol> <li>P_ = \\(2 P(t(9) &gt; 0.973) = 0.355 &gt; 0.02\\) \u4e0d\u80fd\u62d2\u7edd \\(H_0\\) ,\u8ba4\u4e3a\u673a\u5668\u5de5\u4f5c\u6b63\u5e38.\u4e0e(1)\u5224\u65ad\u7ed3\u679c\u4e00\u81f4.</li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW14/#b1","title":"B1","text":"Question <p>\u8bbe\u603b\u4f53 \\(X \\sim N(\\mu, \\sigma^2)\\) ,\u4ece\u8be5\u603b\u4f53\u4e2d\u62bd\u53d6\u5bb9\u91cf\u4e3a 16 \u7684\u7b80\u5355\u968f\u673a\u6837\u672c\uff0c\u6837\u672c\u5747\u503c\u4e3a \\(\\overline{X}\\) ,\u6837\u672c\u65b9\u5dee\u4e3a \\(S^2\\) </p> <p>(1) \u82e5 \\(\\sigma^2 = 1\\) ,\u5728\u663e\u8457\u6c34\u5e73\u4e3a 0.05 \u4e0b\u5bf9\u4e8e\u5047\u8bbe: \\(H_0: \\mu = 1,H_1: \\mu \\neq 1\\) ,\u7ed9\u51fa\u68c0\u9a8c\u7edf\u8ba1\u91cf\u548c\u62d2\u7edd\u57df\uff0c\u5e76\u8ba1\u7b97\u5728 \\(\\mu = 2\\) \u65f6\u72af\u7b2c\u4e8c\u7c7b\u9519\u8bef\u7684\u6982\u7387\uff1b</p> <p>(2) \u82e5 \\(\\mu\\) \u672a\u77e5\uff0c\u5728\u663e\u8457\u6c34\u5e73\u4e3a 0.05 \u4e0b\u5bf9\u4e8e\u5047\u8bbe: \\(H_0: \\sigma^2 = 1,H_1: \\sigma^2 &gt; 1\\) ,\u7ed9\u51fa\u68c0\u9a8c\u7edf\u8ba1\u91cf\u548c\u62d2\u7edd\u57df\uff0c\u5e76\u8ba1\u7b97\u5728 \\(\\sigma^2 = 4\\) \u65f6\u72af\u7b2c\u4e8c\u7c7b\u9519\u8bef\u7684\u6982\u7387\uff1b</p> <p>(3) \u82e5\u6839\u636e\u6837\u672c\u503c\u8ba1\u7b97\u5f97 \\(\\overline{x} = 1.54,s^2 = 1.44\\) ,\u6c42 (1)\u548c (2) \u4e2d\u7684 P_ \u503c.</p> Answer <ol> <li>\u68c0\u9a8c\u7edf\u8ba1\u91cf \\(Z = \\frac{\\overline{X}-1}{1/\\sqrt{16}} = 4(\\overline{X} - 1)\\)</li> </ol> <p>\u62d2\u7edd\u57df \\(W = |4(\\overline{X} - 1)| &gt; z_{0.025} = 1.96\\)</p> <p>\u72af\u7b2c\u4e8c\u7c7b\u9519\u8bef\u7684\u6982\u7387 \\(P\\{\\text{\u63a5\u53d7}H_0|H_0 \\text{\u4e3a\u5047}\\} = P\\{4|\\overline{X}-1| &lt; 1.96| \\mu = 2\\}\\)</p> <p>\\(= P\\{|\\overline{X}-1| &lt; 0.49| \\mu = 2\\} = P\\{0.51 &lt; \\overline{X} &lt; 1.49| \\mu = 2\\}\\)</p> <p>\\(= P\\{-5.96 &lt; \\frac{\\overline{X}-2}{1/\\sqrt{16}} &lt; -2.04\\} = \\Phi(-2.04) - \\Phi(-5.96) \\approx 0.0207\\)</p> <ol> <li>\u68c0\u9a8c\u7edf\u8ba1\u91cf \\(Z = \\frac{(n-1)S^2}{\\sigma^2} = 15S^2\\)</li> </ol> <p>\u62d2\u7edd\u57df \\(W = 15S^2 &gt; \\chi^2_{0.05}(15) = 24.996\\)</p> <p>\u72af\u7b2c\u4e8c\u7c7b\u9519\u8bef\u7684\u6982\u7387 \\(P\\{\\text{\u63a5\u53d7}H_0|H_0 \\text{\u4e3a\u5047}\\} = P\\{15S^2 &lt; 24.996| \\sigma^2 = 4\\}\\)</p> <p>\\(= P\\{S^2 &lt; 1.6664 | \\sigma^2 = 4\\} = P\\{\\frac{(16-1)S^2}{4} &lt; 6.249 \\}\\)</p> <p>\\(= P\\{\\chi^2(15) &lt; 6.249\\} \\approx 0.024745305339540283\\)</p> <ol> <li></li> </ol> <p>(1) \u4e2d P_ \\(= 2 P\\{|Z_1| \\ge |Z_0| = 4|1.54-1| = 2.16\\} \\approx 0.0307726696\\)</p> <p>(2) \u4e2d P_ \\(= P\\{\\chi^2(15) \\ge 15s^2 = 15 \\times 1.44 = 21.6\\} \\approx 0.1187293222\\)</p> code <p>(2)</p> <pre><code>from scipy.stats import chi2\n# \u8ba1\u7b97\u7d2f\u79ef\u6982\u7387\nprob = chi2.cdf(6.249, df=15)\nprint(prob)  # \u8f93\u51fa\u7ed3\u679c\n</code></pre> <p>(3)</p> <ol> <li></li> </ol> <pre><code>from scipy.stats import norm\n\n# \u7ed9\u5b9a\u7684 Z_0 \u503c\nz_value = 2.16\n\n# \u8ba1\u7b97 P(|Z_1| &gt;= 2.16)\nprob = 2 * (1 - norm.cdf(z_value))\nprint(f\"P(|Z_1| &gt;= {z_value}) = {prob:.10f}\")\n</code></pre> <ol> <li></li> </ol> <pre><code>from scipy.stats import chi2\n\n# \u7ed9\u5b9a\u7684\u503c\nchi2_value = 21.6\ndf = 15  # \u81ea\u7531\u5ea6\n\n# \u8ba1\u7b97\u53f3\u5c3e\u6982\u7387\nprob = chi2.sf(chi2_value, df)\n\nprint(f\"P(\u03c7\u00b2(15) &gt;= {chi2_value}) = {prob:.10f}\")\n</code></pre>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW14/#a8","title":"A8","text":"Question <p>\u4e3a\u4e86\u89e3\u67d0\u72ac\u7c7b\u75ab\u82d7\u6ce8\u5c04\u540e\u662f\u5426\u4f1a\u4f7f\u5f97\u72ac\u7684\u4f53\u6e29\u5347\u9ad8\uff0c\u968f\u673a\u9009\u62e9 9 \u53ea\u72d7\uff0c\u8bb0\u5f55\u5b83\u4eec\u6ce8\u5c04\u75ab\u82d7\u524d\u540e\u7684\u4f53\u6e29(\u5355\u4f4d\uff1a\u2103):</p> \u7f16\u53f7 1 2 3 4 5 6 7 8 9 \u6ce8\u5c04\u524d\u4f53\u6e29 /\u2103 37.5 37.7 38.1 37.9 38.3 38.5 38.1 37.6 38.4 \u6ce8\u5c04\u540e\u4f53\u6e29 /\u2103 37.7 38.0 38.2 37.9 38.2 38.8 38.0 37.5 38.8 <p>\u8bbe\u6ce8\u5c04\u75ab\u82d7\u524d\u540e\u4f53\u6e29\u5dee\u670d\u4ece\u6b63\u6001\u5206\u5e03\uff0c\u8bd5\u7528\u6210\u5bf9\u6570\u636e\u7684\u5047\u8bbe\u68c0\u9a8c\u63a8\u65ad\u662f\u5426\u6709\u5145\u8db3\u7684\u7406\u7531\u8ba4\u4e3a\u72d7\u6ce8\u5c04\u8be5\u75ab\u82d7\u540e\u4f53\u6e29\u663e\u8457\u5347\u9ad8( \\(\\alpha\\) =0.05).</p> Answer \u7f16\u53f7 1 2 3 4 5 6 7 8 9 \u4f53\u6e29\u5dee /\u2103 0.2 0.3 0.1 0.0 -0.1 0.3 -0.1 -0.1 0.4 <p>\\(H_0: \\mu \\le 0, H_1: \\mu &gt; 0\\)</p> <p>\\(n = 9, \\overline{x} = \\frac{10}{9}, s = \\sqrt{\\frac{1}{8} \\sum\\limits_{i=1}^9 (x_i - \\overline{x})^2} = 0.1965\\)</p> <p>\\(t = \\frac{\\overline{x} - \\mu_0}{s/\\sqrt{n}} = 1.6964\\)</p> <p>\u62d2\u7edd\u57df \\(t = \\frac{\\overline{x} - \\mu_0}{s/\\sqrt{n}} &gt; t_{0.05}(8)\\)</p> <p>\u67e5\u8868\u5f97 \\(t_{0.05}(8) = 1.8595\\)</p> <p>\u7531\u4e8e \\(t &lt; t_{0.95}(8)\\), \u4e0d\u80fd\u62d2\u7edd \\(H_0\\), \u8ba4\u4e3a\u72d7\u6ce8\u5c04\u8be5\u75ab\u82d7\u540e\u4f53\u6e29\u6ca1\u6709\u663e\u8457\u5347\u9ad8.</p> code <pre><code>import numpy as np\nfrom scipy.stats import t\n\n# \u5dee\u503c\u6570\u636e\ndifferences = [0.2, 0.3, 0.1, 0.0, -0.1, 0.3, -0.1, -0.1, 0.4]\n\n# \u6837\u672c\u5927\u5c0f\nn = len(differences)\n\n# \u6837\u672c\u5747\u503c\nmean_d = np.mean(differences)\n\n# \u6837\u672c\u6807\u51c6\u5dee\nstd_d = np.std(differences, ddof=1)\n\n# t \u7edf\u8ba1\u91cf\nt_statistic = mean_d / (std_d / np.sqrt(n))\n\n# \u4e34\u754c\u503c\u548c P \u503c\nalpha = 0.05\nt_critical = t.ppf(1 - alpha, df=n-1)\np_value = 1 - t.cdf(t_statistic, df=n-1)\n\nprint(f\"\u6837\u672c\u5747\u503c: {mean_d:.4f}\")\nprint(f\"\u6837\u672c\u6807\u51c6\u5dee: {std_d:.4f}\")\nprint(f\"t \u7edf\u8ba1\u91cf: {t_statistic:.4f}\")\nprint(f\"t \u4e34\u754c\u503c: {t_critical:.4f}\")\nprint(f\"P \u503c: {p_value:.4f}\")\n</code></pre>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW14/#a13","title":"A13","text":"Question <p>\u4e3a\u6bd4\u8f83\u7532\u3001\u4e59\u4e24\u4f4d\u7535\u8111\u6253\u5b57\u5458\u7684\u51fa\u9519\u60c5\u51b5\uff0c\u968f\u673a\u62bd\u67e5\u7532\u8f93\u4eba\u7684\u6587\u4ef6 8 \u9875\uff0c\u5404\u9875\u51fa\u9519\u5b57\u6570\u4e3a</p> <p>5  3  2  0  1  2  2  4</p> <p>\u968f\u673a\u62bd\u67e5\u4e59\u8f93\u4eba\u7684\u6587\u4ef6 9 \u9875\uff0c\u5404\u9875\u51fa\u9519\u5b57\u6570\u4e3a</p> <p>5  1  3  2  4  6  4  2  5</p> <p>\u5047\u8bbe\u7532\u3001\u4e59\u4e24\u4eba\u9875\u51fa\u9519\u5b57\u6570\u90fd\u670d\u4ece\u6b63\u6001\u5206\u5e03.</p> <p>(1)\u68c0\u9a8c\u7532\u3001\u4e59\u4e24\u4eba\u9875\u51fa\u9519\u6570\u7684\u65b9\u5dee\u662f\u5426\u76f8\u7b49( \\(\\alpha\\) =0.05);</p> <p>(2)\u6839\u636e(1)\u7684\u68c0\u9a8c\u7ed3\u679c\u9009\u62e9\u5408\u9002\u7684\u68c0\u9a8c\u65b9\u6cd5\uff0c\u63a8\u65ad\u6253\u5b57\u5458\u7532\u7684\u5e73\u5747\u9875\u51fa\u9519\u5b57\u6570\u662f\u5426\u663e\u8457\u5c11\u4e8e\u6253\u5b57\u5458\u4e59( \\(\\alpha\\) =0.05).</p> Answer <ol> <li>\\(H_0 : \\sigma_1^2 = \\sigma_2^2\\)\uff0c\\(H_1 : \\sigma_1^2 \\neq \\sigma_2^2\\)</li> </ol> <p>\u7531\u8ba1\u7b97\u5f97: \\(s_1^2 = 2.5535714286, s_2^2 = 2.7777777778\\)</p> <p>\\(F = \\frac{s_1^2}{s_2^2} = 0.9192857143\\)</p> <p>\u62d2\u7edd\u57df: \\(F \\ge F_{0.025}(7,8)\\) \u6216 \\(F \\le F_{1-0.025}(7,8)\\)</p> <p>\u7531\u67e5\u8868\u5f97 \\(F_{0.025}(7,8) = 4.5285621474 , F_{1-0.025}(7,8) = \\frac{1}{F_{1-0.025}(8,7)} = 0.2041090979\\)</p> <p>\u7531\u4e8e \\(0.2041090979 &lt; F = 0.9192857143 &lt; 4.5285621474\\) ,\u4e0d\u80fd\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u5373\u8ba4\u4e3a\u7532\u3001\u4e59\u4e24\u4eba\u9875\u51fa\u9519\u6570\u7684\u65b9\u5dee\u76f8\u7b49\u3002</p> <ol> <li>\\(H_0 : \\mu_1 \\le \\mu_2\\)\uff0c\\(H_1 : \\mu_1 &gt; \\mu_2\\)</li> </ol> <p>\u7531 (1) \u5f97\u4e24\u8005\u65b9\u5dee\u6ca1\u6709\u663e\u8457\u5dee\u5f02\uff0c\u6545\u9009\u7528 \\(t\\) \u68c0\u9a8c\u3002</p> <p>\u7531\u8ba1\u7b97\u5f97: \\(\\overline{x}_1 = 2.375, \\overline{x}_2 = 3.5555555556\\) , \\(s_w^2 = 2.6731481481\\)</p> <p>\\(t = \\frac{\\overline{x}_1 - \\overline{x}_2}{\\sqrt{s_w^2 \\left( \\frac{1}{n_1} + \\frac{1}{n_2} \\right)}} = -1.4859927913\\)</p> <p>\u62d2\u7edd\u57df: \\(t \\ge t_{0.05}(15)\\)</p> <p>\u67e5\u8868\u5f97 \\(t_{0.05}(15) = 1.7530503557\\)</p> <p>\u7531\u4e8e \\(t = -1.4859927913 &lt; t_{0.05}(15) = 1.7530503557\\) ,\u4e0d\u80fd\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u5373\u6ca1\u6709\u5145\u5206\u7684\u628a\u63e1\u8ba4\u4e3a\u6253\u5b57\u5458\u7532\u7684\u5e73\u5747\u9875\u51fa\u9519\u5b57\u6570\u663e\u8457\u5c11\u4e8e\u6253\u5b57\u5458\u4e59\u3002</p> code <ol> <li></li> </ol> <pre><code>import numpy as np\nfrom scipy.stats import f\n\n# \u6570\u636e\nx1 = [5, 3, 2, 0, 1, 2, 2, 4]\nx2 = [5, 1, 3, 2, 4, 6, 4, 2, 5]\n\n# \u6837\u672c\u65b9\u5dee\ns1_squared = np.var(x1, ddof=1)\ns2_squared = np.var(x2, ddof=1)\n\n# F \u7edf\u8ba1\u91cf\nF = s1_squared / s2_squared\n\n# \u81ea\u7531\u5ea6\ndf1 = len(x1) - 1\ndf2 = len(x2) - 1\n\n# P \u503c\uff08\u53cc\u4fa7\u68c0\u9a8c\uff09\np_value = 2 * min(f.cdf(F, df1, df2), 1 - f.cdf(F, df1, df2))\n\n# \u4e34\u754c\u503c\nF_critical_lower = f.ppf(0.025, df1, df2)\nF_critical_upper = f.ppf(0.975, df1, df2)\n\nprint(f\"\u6837\u672c\u65b9\u5dee1: {s1_squared:.10f}\")\nprint(f\"\u6837\u672c\u65b9\u5dee2: {s2_squared:.10f}\")\nprint(f\"F \u7edf\u8ba1\u91cf: {F:.10f}\")\nprint(f\"P \u503c: {p_value:.10f}\")\nprint(f\"\u4e34\u754c\u503c\u533a\u95f4: ({F_critical_lower:.10f}, {F_critical_upper:.10f})\")\n</code></pre> <ol> <li></li> </ol> <pre><code>import numpy as np\nfrom scipy.stats import t\n\n# \u6570\u636e\nx1 = [5, 3, 2, 0, 1, 2, 2, 4]\nx2 = [5, 1, 3, 2, 4, 6, 4, 2, 5]\n\n# \u6837\u672c\u5747\u503c\nmean_x1 = np.mean(x1)\nmean_x2 = np.mean(x2)\n\n# \u6837\u672c\u65b9\u5dee\ns1_squared = np.var(x1, ddof=1)\ns2_squared = np.var(x2, ddof=1)\n\n# \u6837\u672c\u5927\u5c0f\nn1 = len(x1)\nn2 = len(x2)\n\n# \u5408\u5e76\u65b9\u5dee\uff08pooled variance\uff09\nsp_squared = (((n1 - 1) * s1_squared + (n2 - 1) * s2_squared) / (n1 + n2 - 2))\n\n# t \u7edf\u8ba1\u91cf\nt_statistic = (mean_x1 - mean_x2) / np.sqrt(sp_squared * (1/n1 + 1/n2))\n\n# \u81ea\u7531\u5ea6\ndf = n1 + n2 - 2\n\n# P \u503c\uff08\u5355\u5c3e\u68c0\u9a8c\uff0c\u7532\u7684\u51fa\u9519\u5b57\u6570\u663e\u8457\u5c11\u4e8e\u4e59\uff09\np_value = t.cdf(t_statistic, df)\n\n# \u4e34\u754c\u503c\uff08\u4e34\u754c t \u503c\uff09\nt_critical = t.ppf(1 - 0.05, df)\n\nprint(f\"\u7532\u7684\u5e73\u5747\u51fa\u9519\u5b57\u6570: {mean_x1:.10f}\")\nprint(f\"\u4e59\u7684\u5e73\u5747\u51fa\u9519\u5b57\u6570: {mean_x2:.10f}\")\nprint(f\"\u5408\u5e76\u65b9\u5dee: {sp_squared:.10f}\")\nprint(f\"t \u7edf\u8ba1\u91cf: {t_statistic:.10f}\")\nprint(f\"P \u503c: {p_value:.10f}\")\nprint(f\"\u4e34\u754c t \u503c: {t_critical:.10f}\")\n</code></pre>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW2/","title":"HW2(\u4e60\u9898\u4e00)","text":"<p> \u7ea6 830 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW2/#a19","title":"A19","text":"Question <p>\u8bbeA,B\u4e3a\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6\uff0c\u5df2\u77e5 \\(P(A)=0.7,P(\\overline{B})=0.6,P(A\\overline{B})=0.5\\)</p> <p>(1)\\(P(A|A \\cup B);\\)</p> <p>(2)\\(P(A|\\overline{A} \\cup B);\\)</p> <p>(3)\\(P(AB|A \\cup B);\\)</p> Answer <ol> <li> <p>\\(\\frac{P(A)}{P(A) + P(B) - P(AB)} = \\frac{P(A)}{P(A\\overline{B}) + P(B)} = \\frac{7}{9}\\)</p> </li> <li> <p>\\(\\frac{P(AB)}{P(\\overline{A}) + P(B) - P(\\overline{A}B)} = \\frac{P(A)-P(A\\overline{B})}{P(\\overline{A}) + P(AB)} = \\frac{2}{5}\\)</p> </li> <li> <p>\\(\\frac{P(AB)}{P(A) + P(B) - P(AB)} = \\frac{2}{9}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW2/#a24","title":"A24","text":"Question <p>\u5728\u67d0\u4e00\u65f6\u95f4\u70b9\u5bf9\u67d0\u8bc1\u5238\u8425\u4e1a\u70b9\u8fdb\u884c\u7edf\u8ba1.\u5f97\u77e5\u5165\u5e02\u65f6\u95f4\u57281\u5e74\u4ee5\u5185\u7684\u80a1\u6c11\u8d62\u3001\u5e73\u3001\u4e8f\u7684\u6982\u7387\u5206\u522b\u4e3a10%,20%,70%;\u5165\u5e02\u65f6\u95f4\u57281\u5e74\u53ca\u4ee5\u4e0a\u4e14\u4e0d\u5927\u4e8e4\u5e74\u7684\u80a1\u6c11\u8d62\u3001\u5e73\u3001\u4e8f\u7684\u6982\u7387\u5206\u522b\u4e3a20%,30%,50%;\u5165\u5e02\u65f6\u95f4\u5927\u4e8e4\u5e74\u7684\u80a1\u6c11\u8d62\u3001\u5e73\u3001\u4e8f\u7684\u6982\u7387\u5206\u522b\u4e3a50%,30%,20%.\u5165\u5e02\u65f6\u95f4\u5c11\u4e8e1\u5e74\u30011\u5e74\u53ca\u4ee5\u4e0a\u4e14\u4e0d\u5927\u4e8e4\u5e74\u3001\u5927\u4e8e4\u5e74\u7684\u80a1\u6c11\u6570\u5206\u522b\u536040%,40%,20%.\u73b0\u4ece\u8be5\u8425\u4e1a\u70b9\u968f\u673a\u627e\u4e00\u80a1\u6c11\uff0c</p> <p>(1)\u6c42\u5176\u6709\u8d62\u5229\u7684\u6982\u7387\uff1b</p> <p>(2)\u82e5\u5df2\u77e5\u5176\u4e8f\u635f\u4e86\uff0c\u6c42\u4ed6\u4e3a\u65b0\u80a1\u6c11(\u5165\u5e02\u65f6\u95f4\u57281\u5e74\u4ee5\u5185)\u7684\u6982\u7387.</p> Answer <ol> <li> <p>\\(10\\% \\times 40\\% + 20\\% \\times 40\\% + 50\\% \\times 20\\% = \\frac{11}{50}\\)</p> </li> <li> <p>\\(\\frac{40\\% \\times 70\\%}{40\\% \\times 70\\% + 50\\% \\times 40\\% + 20\\% \\times 20\\%} = \\frac{7}{13}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW2/#a33","title":"A33","text":"Question <p>\u5df2\u77e5\u4e00\u6279\u7167\u660e\u706f\u7ba1\u4f7f\u7528\u5bff\u547d\u5927\u4e8e1000h\u7684\u6982\u7387\u4e3a95%,\u5927\u4e8e2000h\u7684\u6982\u7387\u4e3a30%,\u5927\u4e8e4000h\u7684\u6982\u7387\u4e3a5%.</p> <p>(1)\u5df2\u77e5\u4e00\u4e2a\u706f\u7ba1\u7528\u4e861000 h\u6ca1\u6709\u574f\uff0c\u6c42\u5176\u4f7f\u7528\u5bff\u547d\u5927\u4e8e4000 h\u7684\u6982\u7387\uff1b</p> <p>(2)\u53d610\u4e2a\u706f\u7ba1\u72ec\u7acb\u5730\u88c5\u5728\u4e00\u5927\u5385\u5185\uff0c\u8fc7\u4e862000 h,\u6c42\u81f3\u5c11\u67093\u4e2a\u635f\u574f\u7684\u6982\u7387.</p> Answer <ol> <li> <p>\\(\\frac{5\\%}{95\\%} = \\frac{5}{95}\\)</p> </li> <li> <p>\\(1-0.3^{10}-0.7\\cdot 0.3^9 \\cdot C_{10}^1 - 0.7^2 \\cdot 0.3^8 \\cdot C_{10}^2 = 0.9984\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW2/#b5","title":"B5","text":"Question <p>\u67d0\u4ea7\u54c112\u4e2a\u4e00\u7bb1\uff0c\u6210\u7bb1\u51fa\u552e\uff0c\u67d0\u4eba\u8d2d\u4e70\u65f6\u968f\u673a\u4ece\u4e2d\u53d62\u4e2a\u68c0\u67e5\uff0c\u5982\u679c\u6ca1\u6709\u53d1\u73b0\u6b21\u54c1\u5c31\u4e70\u4e0b.\u5047\u8bbe\u4e00\u7bb1\u4e2d\u67090\u4e2a\u30011\u4e2a\u30012\u4e2a\u6b21\u54c1\u7684\u6982\u7387\u5206\u522b\u4e3a0.8,0.15,0.05,\u6c42\u4ed6\u4e70\u4e0b\u7684\u4e00\u7bb1\u4e2d\u7684\u786e\u6ca1\u6709\u6b21\u54c1\u7684\u6982\u7387.</p> Answer <p>\\(\\frac{0.8}{0.8+0.15 \\cdot \\frac{C_{11}^2}{C_{12}^2} + 0.05 \\cdot \\frac{C_{10}^2}{C_{12}^2}} = \\frac{176}{211}\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW2/#b6","title":"B6","text":"Question <p>\u6709\u4e24\u7ec4\u540c\u7c7b\u4ea7\u54c1\uff0c\u7b2c\u4e00\u7ec4\u670930\u4ef6\uff0c\u5176\u4e2d\u670910\u4ef6\u4e3a\u4f18\u8d28\u54c1\uff1b\u7b2c\u4e8c\u7ec4\u670920\u4ef6\uff0c\u5176\u4e2d\u670915\u4ef6\u4e3a\u4f18\u8d28\u54c1.\u4eca\u4ece\u4e24\u7ec4\u4e2d\u4efb\u9009\u4e00\u7ec4\uff0c\u7136\u540e\u4ece\u8be5\u7ec4\u4e2d\u4efb\u53d62\u6b21(\u6bcf\u6b21\u53d61\u4ef6\uff0c\u65e0\u653e\u56de\u62bd\u6837).</p> <p>(1)\u6c42\u7b2c\u4e00\u6b21\u53d6\u5230\u7684\u662f\u4f18\u8d28\u54c1\u7684\u6982\u7387\uff1b</p> <p>(2)\u5728\u5df2\u77e5\u7b2c1\u6b21\u53d6\u5230\u7684\u662f\u4f18\u8d28\u54c1\u7684\u6761\u4ef6\u4e0b\uff0c\u6c42\u7b2c2\u6b21\u53d6\u5230\u7684\u4e0d\u662f\u4f18\u8d28\u54c1\u7684\u6982\u7387.</p> Answer <ol> <li> <p>\\(0.5 \\cdot \\frac{10}{30} + 0.5 \\cdot \\frac{15}{20} = \\frac{13}{24}\\)</p> </li> <li> <p>\\(\\frac{0.5 \\cdot \\frac{10}{30} \\cdot \\frac{20}{29} + 0.5 \\cdot \\frac{15}{20} \\cdot \\frac{5}{19}}{\\frac{13}{24}} = \\frac{2825}{7163}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW2/#b10","title":"B10","text":"Question <p>\u98de\u673a\u5760\u843d\u5728A,B,C\u4e09\u4e2a\u533a\u57ce\u4e2d\u4e00\u4e2a\uff0c\u8425\u6551\u90e8\u95e8\u5224\u65ad\u5176\u6982\u7387\u5206\u522b\u4e3a0.7,0.2,0.1.\u7528\u76f4\u5347\u673a\u641c\u7d22\u8fd9\u4e9b\u533a\u57df\uff0c\u82e5\u6709\u6b8b\u9ab8\uff0c\u6b8b\u9ab8\u88ab\u53d1\u73b0\u7684\u6982\u7387\u5206\u522b\u4e3a0.3,0.4,0.5.\u82e5\u5df2\u7528\u76f4\u5347\u673a\u641c\u7d22\u8fc7A,B\u4e24\u4e2a\u533a\u57df\uff0c\u5747\u672a\u53d1\u73b0\u6b8b\u9ab8\uff0c\u6c42\u5728\u8fd9\u6837\u7684\u641c\u6551\u73b0\u72b6\u4e0b\u98de\u673a\u5760\u843d\u5728C\u533a\u57df\u7684\u6982\u7387.</p> Answer <p>\\(\\frac{0.1}{0.7 \\cdot 0.7 + 0.2 \\cdot 0.6 + 0.1} = \\frac{10}{71}\\)</p> <p>attention:\u4e00\u4e2a\u6211\u81ea\u5df1\u4f1a\u72af\u7684\u9519\uff0c\u5168\u6982\u7387\u516c\u5f0f\u6ca1\u5199\u5168\u54c8\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW3/","title":"HW3(\u4e60\u9898\u4e00\u3001\u4e8c)","text":"<p> \u7ea6 690 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW3/#b8","title":"B8","text":"Question <p>\u8bbe\u67d0\u5730\u51fa\u73b0\u96fe\u973e\u7684\u6982\u7387\u4e3a0.4,\u5728\u96fe\u973e\u5929\uff0c\u8be5\u5730\u5c45\u6c11\u72ec\u7acb\u5730\u4ee50.2\u7684\u6982\u7387\u6234\u53e3\u7f69\uff1b\u5728\u975e\u96fe\u973e\u5929\uff0c\u8be5\u5730\u5c45\u6c11\u72ec\u7acb\u5730\u4ee50.01\u7684\u6982\u7387\u6234\u53e3\u7f69.</p> <p>(1)\u5728\u8be5\u5730\u968f\u673a\u9009\u4e00\u4f4d\u5c45\u6c11\uff0c\u6c42\u5176\u6234\u53e3\u7f69\u7684\u6982\u7387\uff1b</p> <p>(2)\u82e5\u5728\u8be5\u5730\u540c\u65f6\u90093\u4f4d\u5c45\u6c11\uff0c\u6c42\u81f3\u5c11\u6709\u4e00\u4f4d\u5c45\u6c11\u6234\u53e3\u7f69\u7684\u6982\u7387.</p> Answer (\ud83d\udcdd\u4f8b\u9898) <ol> <li> <p>\\(0.4 \\cdot 0.2 + 0.6 \\cdot 0.01 = 0.086\\)</p> </li> <li> <p>\\(0.4 \\cdot (1 - 0.8^3) + 0.6 \\cdot (1 - 0.99^3) = 0.2130206\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW3/#b1","title":"B1","text":"Question <p>\u4ece1,2,3,4,5,6,7\u8fd97\u4e2a\u6570\u4e2d\u968f\u673a\u62bd\u53d63\u4e2a\u6570(\u65e0\u653e\u56de\u62bd\u6837),\u5e76\u5c06\u5176\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u8bbe\u6392\u5728\u4e2d\u95f4\u7684\u6570\u4e3aX,\u6c42X\u7684\u6982\u7387\u5206\u5e03\u5f8b.</p> Answer \\[P\\{X = i\\} = \\frac{C_{i-1}^{1} \\cdot C_{7-i}^{1}}{C_7^3}=\\frac{(i-1)(7-i)}{35},i = 2,3,4,5,6\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW3/#b6","title":"B6","text":"Question <p>\u4e00\u7cfb\u7edf\u75315\u4e2a\u72ec\u7acb\u7684\u540c\u7c7b\u5143\u4ef6\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5143\u4ef6\u6b63\u5e38\u5de5\u4f5c\u7684\u6982\u7387\u4e3a0.8,\u6c42\uff1a</p> <p>(1)\u6070\u67093\u4e2a\u5143\u4ef6\u6b63\u5e38\u5de5\u4f5c\u7684\u6982\u7387\uff1b</p> <p>(2)\u81f3\u5c11\u67094\u4e2a\u5143\u4ef6\u6b63\u5e38\u5de5\u4f5c\u7684\u6982\u7387\uff1b</p> <p>(3)\u81f3\u591a\u67092\u4e2a\u5143\u4ef6\u6b63\u5e38\u5de5\u4f5c\u7684\u6982\u7387\uff1b</p> Answer <ol> <li> <p>\\(0.8^3 \\cdot 0.2^2 \\cdot C_5^3 = 0.2048\\)</p> </li> <li> <p>\\(0.8^5 + 0.8^4 \\cdot 0.2 \\cdot C_5^1 = 0.73728\\)</p> </li> <li> <p>\\(0.2^5 + 0.2^4 \\cdot 0.8 \\cdot C_5^1 + 0.2^3 \\cdot 0.8^2 \\cdot C_5^3 = 0.05792\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW3/#b8_1","title":"B8","text":"Question <p>\u4ece\u4e00\u6279\u4e0d\u5408\u683c\u7387\u4e3a \\(p\\) \\((0&lt;p&lt;1)\\) \u7684\u4ea7\u54c1\u4e2d\u968f\u673a\u62bd\u67e5\u4ea7\u54c1\uff0c\u5982\u679c\u67e5\u5230\u4e0d\u5408\u683c\u54c1\u5c31\u505c\u6b62\u68c0\u67e5\uff0c\u4e14\u6700\u591a\u68c0\u67e55\u4ef6\u4ea7\u54c1.\u8bbe\u505c\u6b62\u65f6\u5df2\u68c0\u67e5\u4e86 \\(X\\) \u4ef6\u4ea7\u54c1\uff0c\u6c42\uff1a</p> <p>(1)X\u7684\u6982\u7387\u5206\u5e03\u5f8b\uff1b</p> <p>(2)\\(P\\{X \\le 2.5\\};\\)</p> Answer <ol> <li> <p>\\(P\\{X = i\\} = (1-p)^{i-1}p,i=1,2,3,4 \\quad P\\{X = 5\\} = (1-p)^4\\)</p> </li> <li> <p>\\(P\\{X \\le 2.5\\} = p + (1-p)p = (2-p)p\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW3/#b12","title":"B12","text":"Question <p>\u8bbe\u67d0\u624b\u673a\u5728\u65e9\u4e0a9:00\u81f3\u665a\u4e0a9:00\u7684\u4efb\u610f\u957f\u5ea6\u4e3a \\(t\\) (\u5355\u4f4d\uff1amin)\u7684\u65f6\u95f4\u533a\u95f4\u5185\u6536\u5230\u7684\u77ed\u4fe1\u6570 \\(X\\) \u670d\u4ece\u53c2\u6570\u4e3a \\(\\lambda t\\) \u7684\u6cca\u677e\u5206\u5e03\uff0c\\(\\lambda =\\frac{1}{20}\\),\u4e14\u4e0e\u65f6\u95f4\u8d77\u70b9\u65e0\u5173</p> <p>(1)\u6c4210:00\u523012:00\u671f\u95f4\u6070\u597d\u6536\u52306\u6761\u77ed\u4fe1\u7684\u6982\u7387\uff1b</p> <p>(2)\u5df2\u77e5\u572810:00\u523012:00\u671f\u95f4\u81f3\u5c11\u6536\u52305\u6761\u77ed\u4fe1\uff0c\u6c42\u5728\u8be5\u65f6\u6bb5\u6070\u597d\u6536\u52306\u6761\u77ed\u4fe1\u7684\u6982\u7387.</p> Answer <ol> <li> <p>\\(P(X=6) = \\frac{(\\frac{120}{20})^{6} \\cdot e^{-\\frac{120}{20}}}{6!} = \\frac{324 \\cdot e^{-6}}{5}\\)</p> </li> <li> <p>\\(\\frac{P(X=6)}{1 - \\sum\\limits_{i=0}^{4}P(X = i)} = \\frac{324}{5\\cdot e^6 -575}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW3/#b15","title":"B15","text":"Question <p>\u5c0f\u738b\u79df\u5230\u4e00\u6240\u623f\u5b50\uff0c\u623f\u4e1c\u7ed9\u4e86\u4ed65\u628a\u94a5\u5319\uff0c\u5176\u4e2d\u53ea\u6709\u4e00\u628a\u80fd\u6253\u5f00\u5927\u95e8.\u8ba1\u7b97\u5728\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u4e0b\uff0c\u4ed6\u6253\u5f00\u5927\u95e8\u6240\u9700\u7684\u8bd5\u94a5\u5319\u6b21\u6570\u7684\u6982\u7387\u5206\u5e03\u5f8b\uff1a</p> <p>(1)\u6bcf\u6b21\u90fd\u4ece\u5168\u90e85\u628a\u94a5\u5319\u4e2d\u4efb\u9009\u4e00\u628a\u8bd5\u5f00\uff1b</p> <p>(2)\u6bcf\u6b21\u8bd5\u5f00\u5931\u8d25\u540e\uff0c\u5c06\u8be5\u628a\u94a5\u5319\u5355\u72ec\u653e\u7f6e\uff0c\u4ece\u5269\u4f59\u7684\u94a5\u5319\u4e2d\u4efb\u9009\u4e00\u628a\u8bd5\u5f00.</p> Answer <ol> <li> <p>\\(P\\{X=k\\} = (\\frac{4}{5})^{k-1}(\\frac{1}{5}) = \\frac{4^{k-1}}{5^k},k=1,2,\\dots\\)</p> </li> <li> <p>\\(P\\{X = k\\} = \\frac{1}{5},k=1,2,3,4,5\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW4/","title":"HW4(\u4e60\u9898\u4e8c)","text":"<p> \u7ea6 753 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW4/#b16","title":"B16","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cfX\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\u5f53 \\(0 \\le x \\le 1\\) \u65f6\uff0c\\(P\\{0\\le X \\le x\\}=\\frac{x}{2}\\);\u5f53\\(2\\le x \\le 3\\) \u65f6\uff0c\\(P\\{2 \\le X \\le x\\}=\\frac{x-2}{2}\\)</p> <p>(1)\u5199\u51faX\u7684\u5206\u5e03\u51fd\u6570\uff1b</p> <p>(2)\u6c42\\(P\\{X\u22642.5\\}.\\)</p> Answer <ol> <li> <p>\\(F(x) = \\begin{cases}0,&amp;x&lt;0\\\\ \\frac{x}{2},&amp;0 \\le x &lt; 1\\\\ \\frac{1}{2}.&amp;1 \\le x &lt; 2 \\\\ \\frac{x-1}{2}, &amp;2 \\le x &lt; 3 \\\\ 1, &amp; x \\ge 3\\end{cases}\\)</p> </li> <li> <p>\\(P\\{X \\le 2.5\\} = F(2.5) = \\frac{3}{4}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW4/#b17","title":"B17","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X\\) \u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x) = \\begin{cases}c(4-x^2),&amp;0 &lt; x &lt; 2\\\\ 0, &amp;\\text{\u5176\u4ed6} \\end{cases}\\] <p>(1)\u6c42\u5e38\u6570c;</p> <p>(2)\u6c42X\u7684\u5206\u5e03\u51fd\u6570 \\(F(x)\\) ;</p> <p>(3)\u6c42 \\(P\\{-1&lt;X&lt;1\\}\\) ;</p> <p>(4)\u5bf9 \\(X\\) \u72ec\u7acb\u89c2\u5bdf5\u6b21\uff0c\u6c42\u4e8b\u4ef6\\(\\{-1&lt;X&lt;1\\}\\) \u6070\u597d\u53d1\u751f2\u6b21\u7684\u6982\u7387.</p> Answer <ol> <li> <p>\\(\\int_{0}^{2} f(x)dx = 1 \\rightarrow c = \\frac{3}{16}\\)</p> </li> <li> <p>\\(F(x) = \\int f(x)dx = \\begin{cases}0, &amp;x&lt;0 \\\\ -\\frac{1}{16}x^3 + \\frac{3}{4}, &amp; 0 \\le x &lt;2 \\\\ 1, &amp; x \\ge 2 \\end{cases}\\)</p> </li> <li> <p>\\(P\\{ -1 &lt; x &lt; 1 \\} = F(1) - F(-1) = \\frac{11}{16}\\)</p> </li> <li> <p>\\(C_5^2 \\cdot (\\frac{11}{16})^2 \\cdot (\\frac{5}{16})^3 = \\frac{75625}{524288}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW4/#b18","title":"B18","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X\\) \u7684\u5206\u5e03\u51fd\u6570\u4e3a</p> \\[F(x) = \\begin{cases}0, &amp;x&lt;0 \\\\ ax^2, &amp; 0 \\le x &lt; 1 \\\\ bx, &amp; 1 \\le x &lt; 2 \\\\ 1, &amp; x \\ge 2 \\end{cases}\\] <p>(1)\u6c42\u5e38\u6570 \\(a\\) , \\(b\\);</p> <p>(2)\u6c42 \\(X\\) \u7684\u5bc6\u5ea6\u51fd\u6570 \\(f(x)\\);</p> <p>(3)\u6c42 \\(P\\{0.5 &lt;X&lt;1.5\\}\\);</p> Answer <ol> <li> <p>\\(\\begin{cases} F(1^-) = F(1^+) \\\\ F(2) = 1\\end{cases} \\rightarrow \\begin{cases} a=\\frac{1}{2} \\\\ b = \\frac{1}{2} \\end{cases}\\)</p> </li> <li> <p>\\(f(x) = F'(x) = \\begin{cases} x, &amp; 0&lt;x&lt;1 \\\\ \\frac{1}{2}, &amp; 1&lt; x&lt;2 \\\\ 0,&amp;\\text{\u5176\u4ed6}\\end{cases}\\)</p> </li> <li> <p>\\(P\\{0.5 &lt;X&lt;1.5\\} = F(1.5) - F(0.5) = \\frac{5}{8}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW4/#b19","title":"B19","text":"Question <p>\u5df2\u77e5\u5728\u65e9\u4e0a7:00\u20148:00\u6709\u4e24\u73ed\u8f66\u4eceA\u6821\u533a\u5230B\u6821\u533a\uff0c\u51fa\u53d1\u65f6\u95f4\u5206\u522b\u662f7:30\u548c7:50,\u4e00\u5b66\u751f\u57287:20\u20147:45\u968f\u673a\u5230\u8fbe\u8f66\u7ad9\u4e58\u8fd9\u4e24\u73ed\u8f66.</p> <p>(1)\u6c42\u8be5\u5b66\u751f\u7b49\u8f66\u65f6\u95f4\u5c0f\u4e8e10 min\u7684\u6982\u7387\uff1b</p> <p>(2)\u6c42\u8be5\u5b66\u751f\u7b49\u8f66\u65f6\u95f4\u5927\u4e8e5 min\u4e14\u5c0f\u4e8e15 min\u7684\u6982\u7387\uff1b</p> <p>(3)\u5df2\u77e5\u8be5\u5b66\u751f\u7b49\u8f66\u65f6\u95f4\u5927\u4e8e5 min\u7684\u6761\u4ef6\u4e0b\uff0c\u6c42\u4ed6\u80fd\u8d76\u4e0a7:30\u8fd9\u73ed\u8f66\u7684\u6982\u7387.</p> Answer <ol> <li> <p>7:20-7:30\uff0c7:40-7:45 \\(\\rightarrow \\frac{15}{25} = \\frac{3}{5}\\)</p> </li> <li> <p>7:20-7:25\uff0c 7:35-7:45 \\(\\rightarrow \\frac{15}{25} = \\frac{3}{5}\\)</p> </li> <li> <p>7:20-7:25\uff0c 7:30-7:45 \\(\\rightarrow P_1 = \\frac{20}{25} = \\frac{4}{5}\\)\uff0c7:20-7:25 \\(\\rightarrow P_2 = \\frac{5}{25} = \\frac{1}{5} \\Rightarrow P = \\frac{P_2}{P_1} = \\frac{1}{4}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW4/#b29","title":"B29","text":"Question <p>\u8bbe\u7532\u3001\u4e59\u4e24\u5382\u751f\u4ea7\u7684\u540c\u7c7b\u578b\u4ea7\u54c1\u5bff\u547d(\u5355\u4f4d\uff1a\u5e74)\u5206\u522b\u670d\u4ece\u53c2\u6570\u4e3a \\(\\frac{1}{3}\\) \u548c \\(\\frac{1}{6}\\) \u7684\u6307\u6570\u5206\u5e03\uff0c\u5c06\u4e24\u5382\u7684\u4ea7\u54c1\u6df7\u5728\u4e00\u8d77\uff0c\u5176\u4e2d\u7532\u5382\u7684\u4ea7\u54c1\u6570\u536040%.\u73b0\u4ece\u8fd9\u6279\u6df7\u5408\u4ea7\u54c1\u4e2d\u968f\u673a\u53d6\u4e00\u4ef6.</p> <p>(1)\u6c42\u8be5\u4ea7\u54c1\u5bff\u547d\u5927\u4e8e6\u5e74\u7684\u6982\u7387\uff1b</p> <p>(2)\u82e5\u5df2\u77e5\u53d6\u5230\u7684\u662f\u7532\u5382\u4ea7\u54c1\uff0c\u5728\u5df2\u7528\u4e864\u4e2a\u6708\u6ca1\u6709\u574f\u7684\u6761\u4ef6\u4e0b\uff0c\u6c42\u5176\u7528\u52301\u5e74\u8fd8\u4e0d\u574f\u7684\u6982\u7387\uff1b</p> <p>(3)\u5728\u8be5\u4ea7\u54c1\u5df2\u7528\u4e864\u4e2a\u6708\u6ca1\u6709\u574f\u7684\u6761\u4ef6\u4e0b\uff0c\u6c42\u5176\u7528\u52301\u5e74\u8fd8\u4e0d\u574f\u7684\u6982\u7387.</p> Answer <ol> <li> <p>\\(x =6 \\rightarrow P_{\\text{\u7532}} = 1 - F_{\\text{\u7532}} = e^{-2} \\quad P_{\\text{\u4e59}} = 1 - F_{\\text{\u4e59}} = e^{-1} \\rightarrow P = 0.4 \\cdot e^{-2} + 0.6 \\cdot e^{-1}\\)</p> </li> <li> <p>\\(P = \\frac{P_{\\text{\u4e00\u5e74}}}{P_{\\text{\u56db\u4e2a\u6708}}} = e^{-\\frac{2}{9}}\\)</p> </li> <li> <p>\\(P = \\frac{0.4 \\cdot e^{-\\frac{1}{3}} + 0.6 \\cdot e^{-\\frac{1}{6}}}{ 0.4 \\cdot e^{-\\frac{1}{9}} + 0.6 \\cdot e^{-\\frac{1}{18}}}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW5/","title":"HW5(\u4e60\u9898\u4e8c\u3001\u4e09)","text":"<p> \u7ea6 687 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW5/#b23","title":"B23","text":"Question <p>\u8bbe\u67d0\u7fa4\u4f53\u7684BMI(\u4f53\u91cd\u6307\u6570)\u503c(\u5355\u4f4d\uff1akg/m\u00b2) \\(X\\sim N(22.5,2.5^2)\\) .\u533b\u5b66\u7814\u7a76\u53d1\u73b0\u8eab\u4f53\u80a5\u80d6\u8005\u60a3\u9ad8\u8840\u538b\u7684\u53ef\u80fd\u6027\u589e\u5927\uff1a\u5f53 \\(X\\le 25\\) \u65f6\uff0c\u60a3\u9ad8\u8840\u538b\u7684\u6982\u7387\u4e3a10%;\u5f53 \\(25&lt;X\\le 27.5\\) \u65f6\uff0c\u60a3\u9ad8\u8840\u538b\u7684\u6982\u7387\u4e3a15%;\u5f53 \\(X&gt;27.5\\) \u65f6\uff0c\u60a3\u9ad8\u8840\u538b\u7684\u6982\u7387\u4e3a30%.</p> <p>(1)\u4ece\u8be5\u7fa4\u4f53\u4e2d\u968f\u673a\u9009\u51fa1\u4eba\uff0c\u6c42\u4ed6\u60a3\u9ad8\u8840\u538b\u7684\u6982\u7387\uff1b</p> <p>(2)\u82e5\u4ed6\u60a3\u6709\u9ad8\u8840\u538b\uff0c\u6c42\u4ed6\u7684BMI\u503c\u8d85\u8fc725\u7684\u6982\u7387\uff1b</p> <p>(3)\u968f\u673a\u72ec\u7acb\u5730\u9009\u51fa3\u4eba\uff0c\u6c42\u81f3\u5c11\u67091\u4eba\u60a3\u9ad8\u8840\u538b\u7684\u6982\u7387.</p> Answer \\[P\\{|x-\\mu| &lt; \\sigma\\} = 0.6826,P\\{|x-\\mu| &lt; 2\\sigma\\} = 0.9544,P\\{|x-\\mu| &lt; 3\\sigma\\} = 0.9974\\] \\[P(X \\le 25) = \\frac{0.6826}{2} + 0.5 = 0.8413\\] \\[P(25 &lt; X \\le 27.5) = \\frac{0.9544 - 0.6826}{2} = 0.1359\\] \\[P(X &gt; 27.5) = 1 - \\frac{0.9974}{2} = 0.0228\\] \\[\\therefore P(\\text{\u60a3\u9ad8\u8840\u538b}) = 0.8413 \\times 0.1 + 0.1359 \\times 0.15 + 0.0228 \\times 0.3 = 0.111355\\] <ol> <li> <p>\\(P_2 = \\frac{P(25 &lt; X \\le 27.5)\\times 0.15 + P(X &gt; 27.5)\\times 0.3}{P(\\text{\u60a3\u9ad8\u8840\u538b})} = \\frac{5445}{22271} \\approx 0.2445\\)</p> </li> <li> <p>\\(P_3 = 1 - (1 - P(\\text{\u60a3\u9ad8\u8840\u538b}))^3 = 1 - (1 - 0.111355)^3 \\approx 0.2982\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW5/#b33","title":"B33","text":"Question <p>\u5df2\u77e5\u968f\u673a\u53d8\u91cf \\(X\\) \u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x) = \\begin{cases}c(4-x^2), &amp; -1&lt;x&lt;2 \\\\ 0, &amp;\\text{\u5176\u4ed6}\\end{cases}\\] <p>(1)\u6c42\u5e38\u6570 \\(c\\) \u7684\u503c\uff1b</p> <p>(2)\u8bbe \\(Y = 3X\\) \uff0c\u6c42 \\(Y\\) \u7684\u5bc6\u5ea6\u51fd\u6570\uff1b</p> <p>(3)\u8bbe \\(Z = |X|\\) \uff0c\u6c42 \\(Z\\) \u7684\u5206\u5e03\u51fd\u6570\u53ca\u5bc6\u5ea6\u51fd\u6570.</p> Answer <p>1.\\(\\int_{-1}^{2}c(4-x^2)dx = 1 \\Rightarrow c = \\frac{1}{9}\\)</p> <ol> <li>\\(F_Y(y) = P(Y \\le y) = P(3X \\le y) = P(X \\le \\frac{y}{3}) = F_X(\\frac{y}{3})\\)</li> </ol> <p>\u4e24\u8fb9\u90fd\u5bf9 \\(y\\) \u6c42\u5bfc\uff0c\u5f97 \\(f_Y(y) = \\frac{1}{3}f_X(\\frac{y}{3}) = \\begin{cases}\\frac{1}{27}[4 - (\\frac{y}{3})^2], &amp; -3 &lt; y &lt; 6 \\\\ 0, &amp;\u5176\u4ed6\\end{cases}\\)</p> <ol> <li>\\(F_Z(z) = P(Z \\le z) = P(|X| \\le z) = P(-z \\le X \\le z) = F_X(z) - F_X(-z)\\)</li> </ol> <p>\u4e24\u8fb9\u90fd\u5bf9 \\(z\\) \u6c42\u5bfc\uff0c\u5f97 \\(f_Z(z) = f_X(z) + f_X(-z) = \\begin{cases}\\frac{2}{9}[4 - z^2], &amp; 0 \\le z &lt; 1 \\\\ \\frac{1}{9}[4 - z^2], &amp; 1 \\le z &lt; 2 \\\\ 0, &amp;\\text{\u5176\u4ed6}\\end{cases}\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW5/#b39","title":"B39","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X \\sim N(0,1)\\) \uff0c\u8bb0 \\(Y = e^X,\\ Z = ln|X|.\\)</p> <p>(1)\u6c42 \\(Y\\) \u7684\u5bc6\u5ea6\u51fd\u6570\uff1b</p> <p>(2)\u6c42 \\(Z\\) \u7684\u5bc6\u5ea6\u51fd\u6570\uff1b</p> Answer <ol> <li>\\(F_Y(y) = P(Y \\le y) = P(e^X \\le y) = P(X \\le ln y) = F_X(ln y)\\)</li> </ol> <p>\u4e24\u8fb9\u90fd\u5bf9 \\(y\\) \u6c42\u5bfc\uff0c\u5f97 \\(f_Y(y) = \\begin{cases}\\frac{1}{y}f_X(ln y) = \\frac{1}{y}\\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{1}{2}(ln y)^2},&amp;y&gt;0 \\\\ 0, &amp;\\text{\u5176\u4ed6} \\end{cases}\\)</p> <ol> <li>\\(F_Z(z) = P(Z \\le z) = P(ln|X| \\le z) = P(-e^z \\le X \\le e^z) = F_X(e^z) - F_X(-e^z)\\)</li> </ol> <p>\u4e24\u8fb9\u90fd\u5bf9 \\(z\\) \u6c42\u5bfc\uff0c\u5f97 \\(f_Z(z) = e^z \\cdot f_X(e^z) + e^z \\cdot f_X(-e^z) = \\frac{1}{2\\sqrt{\\pi}}e^{z-\\frac{1}{2}e^{2z}}, -\\infty &lt; z &lt; +\\infty\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW5/#a5","title":"A5","text":"Question <p>\u8bbe\u4e8c\u7ef4\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf \\((X,Y)\\) \u7684\u8054\u5408\u5206\u5e03\u5f8b\u4e3a</p> X\\Y 0 1 0 0.3 a 1 b 0.2 <p>\u4e14\u5df2\u77e5\u4e8b\u4ef6 \\(\\{ X = 0\\}\\) \u4e0e\u4e8b\u4ef6 \\(\\{X + Y = 1\\}\\) \u76f8\u4e92\u72ec\u7acb\uff0c \u6c42\u5e38\u6570 \\(a,b\\) \u7684\u503c.</p> Answer \\[\\begin{cases} a+b = 0.5 \\\\ (0.3+a)(a+b) = a \\end{cases} \\rightarrow \\begin{cases} a = 0.3 \\\\ b = 0.2 \\end{cases}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW5/#a8","title":"A8","text":"Question <p>\u968f\u673a\u53d8\u91cf \\(X,Y\\) \u7684\u6982\u7387\u5206\u5e03\u5f8b\u5206\u522b\u4e3a</p> X 0 1 P 0.4 0.6 Y 0 1 2 P 0.2 0.5 0.3 <p>\u4e14\u5df2\u77e5 \\(P\\{X=0,Y=0\\} = P\\{X=1,Y=2\\} = 0.2\\)</p> <p>(1)\u5199\u51fa \\((X,Y)\\) \u7684\u8054\u5408\u5206\u5e03\u5f8b\uff1b</p> <p>(2)\u5199\u51fa\u7ed9\u5b9a \\(\\{X=0\\}\\) \u6761\u4ef6\u4e0b \\(Y\\) \u7684\u6761\u4ef6\u5206\u5e03\u5f8b\uff1b</p> Answer X\\Y 0 1 2 0 0.2 0.1 0.1 1 0 0.4 0.2 \\[P\\{Y=0|X=0\\} = 0.5\\] \\[P\\{Y=1|X=0\\} = 0.25\\] \\[P\\{Y=2|X=0\\} = 0.25\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW5/#a9","title":"A9","text":"Question <p>\u5c06\u4e00\u679a\u5747\u5300\u7684\u9ab0\u5b50\u629b2\u6b21\uff0c\u8bb0 \\(X\\) \u4e3a\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u70b9\u6570\uff0c\\(Y\\) \u4e3a\u4e24\u6b21\u70b9\u6570\u7684\u6700\u5927\u503c.</p> <p>(1)\u6c42 \\((X,Y)\\) \u7684\u8054\u5408\u5206\u5e03\u5f8b\u53ca\u8fb9\u9645\u5206\u5e03\u5f8b\uff1b</p> <p>(2)\u5199\u51fa\u7ed9\u5b9a \\(\\{Y=6\\}\\) \u7684\u6761\u4ef6\u4e0b \\(X\\) \u7684\u6761\u4ef6\u5206\u5e03\u5f8b\uff1b</p> Answer <p>1.</p> X\\Y 1 2 3 4 5 6 \\(\\{X = i\\}\\) 1 \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{6}\\) 2 0 \\(\\frac{1}{18}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{6}\\) 3 0 0 \\(\\frac{1}{12}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{6}\\) 4 0 0 0 \\(\\frac{1}{9}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{6}\\) 5 0 0 0 0 \\(\\frac{5}{36}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{6}\\) 6 0 0 0 0 0 \\(\\frac{1}{6}\\) \\(\\frac{1}{6}\\) \\(\\{Y = i\\}\\) \\(\\frac{1}{36}\\) \\(\\frac{1}{12}\\) \\(\\frac{5}{36}\\) \\(\\frac{7}{36}\\) \\(\\frac{1}{4}\\) \\(\\frac{11}{36}\\) X\\Y 1 2 3 4 5 6 \\(P\\{X=i\\|Y=6\\}\\) \\(\\frac{1}{11}\\) \\(\\frac{1}{11}\\) \\(\\frac{1}{11}\\) \\(\\frac{1}{11}\\) \\(\\frac{1}{11}\\) \\(\\frac{1}{11}\\)"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW6/","title":"HW6(\u4e60\u9898\u4e09)","text":"<p> \u7ea6 669 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW6/#a11","title":"A11","text":"Question <p>\u8bbe\u4e8c\u7ef4\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf \\((X,Y)\\) \u7684\u8054\u5408\u5206\u5e03\u5f8b\u4e3a</p> X\\Y 0 1 2 0 0.1 0.1 0 1 0 0.2 0.2 2 0.2 0 0.2 <p>\u8bb0 \\(F(x,y),F_X(x)\\) \u5206\u522b\u662f \\((X,Y)\\) \u7684\u8054\u5408\u5206\u5e03\u51fd\u6570\u548c \\(X\\) \u7684\u8fb9\u9645\u5206\u5e03\u51fd\u6570.</p> <p>(1)\u6c42 \\(F(0,1),F(1,1.5),F(2.1,1.1)\\);</p> <p>(2)\u6c42 \\(F_X(x)\\)</p> Answer <p>\\(F(0,1) = P(X=0,Y=1) + P(X=0,Y=1) = 0.1 + 0.1 = 0.2\\)</p> <p>\\(F(1,1.5) = P(X=0,Y=0) + P(X=0,Y=1) + P(X=0,Y=2) + P(X=1,Y=0)\\)</p> <p>\\(\\quad \\quad \\quad \\quad + P(X=1,Y=1) = 0.1 + 0.1 + 0 + 0 + 0.2 = 0.4\\)</p> <p>\\(F(2.1,1.1) = P(X=0,Y=0) + P(X=0,Y=1) + P(X=1,Y=0) + P(X=1,Y=1)\\)</p> <p>\\(\\quad \\quad \\quad \\quad + P(X=2,Y=0) + P(X=2,Y=1) = 0.1 + 0.1 + 0 + 0.2 + 0.2 + 0 = 0.6\\)</p> <p>2.</p> \\[F_X(x) = \\begin{cases}0,&amp;x&lt;0 \\\\ 0.2,&amp;0 \\le x &lt; 1 \\\\ 0.6,&amp; 1 \\le x &lt; 2\\\\ 1,&amp; 2 \\le x\\end{cases}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW6/#a12","title":"A12","text":"Question <p>\u8bbe\u4e8c\u7ef4\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf \\((X,Y)\\) \u7684\u8fb9\u9645\u5206\u5e03\u51fd\u6570\u4e3a</p> <p>\\(F_X(x) = \\begin{cases}0,&amp;x&lt;1\\\\ 0.3,&amp;1 \\le x &lt; 2\\\\ 1,&amp; x\\ge 2\\end{cases},F_Y(y) = \\begin{cases}0,&amp;y&lt;0 \\\\ 0.4,&amp; 0 \\le y &lt;1 \\\\ 1,&amp;y \\ge 1\\end{cases}\\)</p> <p>\u4e14\u5df2\u77e5 \\(P\\{X=1,Y=0\\}=0.1\\)</p> <p>(1)\u6c42 \\((X,Y)\\) \u7684\u8054\u5408\u5206\u5e03\u5f8b;</p> <p>(2)\u6c42\u7ed9\u5b9a \\(\\{Y = 0\\}\\) \u7684\u6761\u4ef6\u4e0b \\(X\\) \u7684\u6761\u4ef6\u5206\u5e03\u51fd\u6570.</p> Answer X\\Y 0 1 1 0.1 0.2 2 0.3 0.4 <p>2.</p> \\[F_{X|Y}(X|0) = \\begin{cases}0,&amp;x&lt;1 \\\\ \\frac{1}{4},&amp;1 \\le x &lt; 2\\\\ 1,&amp; x \\ge 2\\end{cases}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW6/#a17","title":"A17","text":"Question <p>\u4e8c\u7ef4\u968f\u673a\u53d8\u91cf \\((X,Y)\\) \u7684\u8054\u5408\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x,y) = \\begin{cases}e^{-x},&amp;0&lt;y&lt;x\\\\ 0,&amp;\u5176\u4ed6\\end{cases}\\] <p>(1)\u5206\u522b\u6c42 \\(X\\) \u548c \\(Y\\) \u7684\u8fb9\u9645\u5bc6\u5ea6\u51fd\u6570 \\(f_X(x)\\) \u548c \\(f_Y(y)\\);</p> <p>(2)\u6c42\u6761\u4ef6\u5bc6\u5ea6\u51fd\u6570 \\(f_{Y|X}(y|x)\\).</p> <p>(3)\u7ed9\u5b9a \\(\\{X = x\\}\\) \u7684\u6761\u4ef6\u4e0b\uff0c \\(Y\\) \u7684\u6761\u4ef6\u5206\u5e03\u662f\u5747\u5300\u5206\u5e03\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f</p> Answer <p>1.</p> \\[f_X(x) = \\int_{-\\infty}^{+\\infty} f(x,y)dy = \\begin{cases}xe^{-x},&amp;x &gt;0 \\\\ 0,&amp;\\text{\u5176\u4ed6}\\end{cases}\\] \\[f_Y(y) = \\int_{-\\infty}^{+\\infty} f(x,y)dx = \\begin{cases}e^{-y},&amp;y &gt;0 \\\\ 0,&amp;\\text{\u5176\u4ed6}\\end{cases}\\] <ol> <li>\u5f53 \\(x &gt; 0\\) \u65f6\uff0c</li> </ol> \\[f_{Y|X}(y|x) = \\begin{cases}\\frac{1}{x},&amp;0&lt;y&lt;x\\\\ 0,&amp;\\text{\u5176\u4ed6}\\end{cases}\\] <ol> <li>\u5f53 \\(y &gt;0\\) \u65f6\uff0c </li> </ol> \\[f_{Y|X}(y|x) = \\begin{cases}\\frac{1}{x},&amp;0&lt;y&lt;x \\\\ 0,&amp; \\text{\u5176\u4ed6}\\end{cases}\\] \\[\\therefore \\text{\u4e3a\u5747\u5300\u5206\u5e03}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW6/#a19","title":"A19","text":"Question <p>\u8bbe \\((X,Y)\\) \u4e3a\u4e8c\u7ef4\u968f\u673a\u53d8\u91cf\uff0c \\(X\\) \u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f_X(x) = \\begin{cases}\\lambda^2xe^{-\\lambda x},&amp;x&gt;0\\\\0,&amp;x\\le 0\\end{cases}\\] <p>\u5176\u4e2d \\(\\lambda &gt;0\\) ,\u5f53 \\(x&gt;0\\) \u65f6\uff0c \u7ed9\u5b9a \\(\\{X=x\\}\\) \u7684\u6761\u4ef6\u4e0b \\(Y\\) \u7684\u6761\u4ef6\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f_{Y|X}(y|x) = \\begin{cases}\\frac{1}{x}e^{-\\frac{y}{x}},&amp;y &gt; 0 \\\\ 0,&amp;y \\le 0\\end{cases}\\] <p>(1)\u6c42 \\(X\\) \u548c \\(Y\\) \u7684\u8054\u5408\u5bc6\u5ea6\u51fd\u6570;</p> <p>(2)\u6c42\u5f53 \\(x&gt;0\\) \u65f6\uff0c\u7ed9\u5b9a \\(\\{X=x\\}\\) \u7684\u6761\u4ef6\u4e0b \\(Y\\) \u7684\u6761\u4ef6\u5206\u5e03\u51fd\u6570;</p> <p>(3)\u6c42 \\(P\\{Y&gt;1|X=1\\}\\).</p> Answer \\[f(x,y) = \\begin{cases} \\lambda^2e^{-(\\frac{y}{x}+\\lambda x)},&amp;x&gt;0,y&gt;0 \\\\ 0,&amp;\\text{\u5176\u4ed6}\\end{cases}\\] \\[f_{Y|X}(y|x) = \\begin{cases} \\frac{1}{x} e^{-\\frac{y}{x}},&amp; x&gt;0,y&gt;0 \\\\ 0,&amp;\\text{\u5176\u4ed6}\\end{cases}\\] \\[F_{Y|X}(y|x) = \\begin{cases} 1-e^{-\\frac{y}{x}},&amp; y &gt;0 \\\\ 0,&amp; y \\le 0\\end{cases}\\] \\[P\\{Y \\le 1 | X = 1\\} = 1-e^{-1}\\] \\[\\therefore P\\{Y &gt; 1 | X = 1\\} = e^{-1}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW6/#a27","title":"A27","text":"Question <p>\u5728\u534a\u5706 \\(D = \\{(x,y):x^2+y^2 \\le 1,x&gt;0\\}\\) \u5185\u968f\u673a\u6295\u70b9 \\(A\\) \uff0c\u8bbe \\(A\\) \u70b9\u7684\u5750\u6807\u4e3a \\((X,Y)\\).</p> <p>(1)\u6c42 \\(X\\) \u7684\u8fb9\u9645\u5bc6\u5ea6\u51fd\u6570\u51fd\u6570 \\(f_X(x)\\) ;</p> <p>(2)\u6c42 \\(P\\{X&lt;\\frac{1}{2}\\}\\);</p> <p>(3) \\(X\\) \u4e0e \\(Y\\) \u76f8\u4e92\u72ec\u7acb\uff1f\u4e3a\u4ec0\u4e48\uff1f</p> Answer <p>1.</p> \\[S = \\frac{1}{2} \\pi\\] \\[f(x,y) = \\begin{cases}\\frac{2}{\\pi},&amp;0&lt;x&lt;1\\\\0,&amp;\\text{\u5176\u4ed6}\\end{cases}\\] \\[f_X(x) = \\begin{cases}\\int_{-\\sqrt{1-x^2}}^{\\sqrt{1-x^2}}\\frac{2}{\\pi}dy = \\frac{4\\sqrt{1-x^2}}{\\pi},&amp; 0&lt;x \\le 1 \\\\ 0,&amp; \\text{\u5176\u4ed6}\\end{cases}\\] \\[P\\{X &lt; \\frac{1}{2}\\} = F_X(\\frac{1}{2}) = \\int_0^{\\frac{1}{2}} \\frac{4\\sqrt{1-x^2}}{\\pi}dx = \\frac{1}{3} + \\frac{\\sqrt{3}}{2\\pi}\\] \\[f_Y(y) = \\int_{-\\sqrt{1-y^2}}^{\\sqrt{1-y^2}} \\frac{2}{\\pi}x dx = \\frac{2}{\\pi} \\sqrt{1-y^2}, -1 \\le y \\le 1\\] \\[f_{X,Y}(x,y) \\neq f_X(x) \\cdot f_Y(y)\\] \\[\\therefore \\text{\u4e0d\u72ec\u7acb}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW6/#b4","title":"B4","text":"Question <p>\u8bbe\u4e8c\u7ef4\u968f\u673a\u53d8\u91cf \\((X,Y)\\) \u7684\u8054\u5408\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x,y) = \\begin{cases}c(y-x),&amp;0&lt;x&lt;y&lt;1\\\\ 0,&amp;\u5176\u4ed6\\end{cases}\\] <p>(1)\u6c42\u5e38\u6570 \\(c\\) ;</p> <p>(2)\u6c42 \\(P\\{X+Y \\le 1\\}\\) ;</p> <p>(3)\u6c42 \\(P\\{X&lt;0.5\\}\\) .</p> Answer <p>1.</p> \\[\\int_0^1dy\\int_0^yc(y-1)dx = \\frac{1}{6}c = 1\\] \\[\\therefore c = 6\\] \\[P\\{X+Y \\le 1\\} = \\int_0^{\\frac{1}{2}}dx\\int_x^{1-x}6(y-x)dy = \\frac{1}{2}(2x-1)^3 |_0^{\\frac{1}{2}} = \\frac{1}{2}\\] \\[P\\{X&lt;0.5\\} = \\int_0^{0.5}dx\\int_x^{1}6(y-x)dy = (x-1)^3 |_0^{\\frac{1}{2}} = \\frac{7}{8}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW7/","title":"HW7(\u4e60\u9898\u4e09)","text":"<p> \u7ea6 526 \u4e2a\u5b57  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW7/#a32","title":"A32","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X,Y\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u4e14\u5206\u522b\u5177\u6709\u6982\u7387\u5206\u5e03\u5f8b</p> X 0 1 2 P 0.2 0.3 0.5 Y 1 2 3 P 0.2 0.4 0.4 <p>\u8bbe \\(Z=X+Y\\) \uff0c \\(M = max\\{X,Y\\}\\) , \\(N = min\\{X,Y\\}\\) \uff0c\u5206\u522b\u6c42 \\(Z,M,N\\) \u7684\u6982\u7387\u5206\u5e03\u5f8b.</p> Answer <p>1.</p> Z 1 2 3 4 5 P 0.04 0.14 0.3 0.32 0.2 M 1 2 3 P 0.1 0.5 0.4 N 0 1 2 P 0.2 0.4 0.4"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW7/#a38","title":"A38","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X \\sim U(0,1)\\) \uff0c \\(Y\\) \u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a </p> \\[f_Y(y)=\\begin{cases} 2y &amp; 0 &lt; y &lt; 1 \\\\ 0 &amp; \\text{\u5176\u4ed6} \\end{cases}\\] <p>\u4e14 \\(X,Y\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u8bb0 \\(M = max\\{X,Y\\}, N = min\\{X,Y\\}\\) \uff0c\u5206\u522b\u6c42 \\(M,N\\) \u7684\u5bc6\u5ea6\u51fd\u6570.</p> Answer <p>1.</p> \\[F_X(x) = \\begin{cases} x,&amp;0&lt;x&lt;1 \\\\ 0,&amp;\\text{\u5176\u4ed6} \\end{cases} , F_Y(y) = \\begin{cases} y^2,&amp;0&lt;y&lt;1 \\\\ 0,&amp;\\text{\u5176\u4ed6} \\end{cases}\\] \\[F_M(t)=t^3,0&lt;t&lt;1,F_N(t) = t+t^2-t^3,0&lt;t&lt;1\\] \\[f_M(t)=\\begin{cases}3t^2,&amp;0&lt;t&lt;1 \\\\ 0, &amp;\\text{\u5176\u4ed6}\\end{cases},f_N(t)=\\begin{cases} 1+2t-3t^2,&amp;0&lt;t&lt;1 \\\\ 0, &amp;\\text{\u5176\u4ed6} \\end{cases}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW7/#b6","title":"B6","text":"Question <p>\u5728 \\(A\\) \u5730\u81f3 \\(B\\) \u5730\uff08\u8ddd\u79bb\u4e3a \\(m\\ km\\)\uff09\u7684\u516c\u8def\u4e0a\uff0c\u4e8b\u6545\u53d1\u751f\u5730\u5728\u79bb \\(A\\) \u5730 \\(X\\ km\\) \u5904\uff0c \u4e8b\u6545\u5904\u7406\u8f66\u5728\u79bb \\(A\\) \u5730 \\(Y\\ km\\) \u5904. \u8bbe \\(X\\) \u4e0e \\(Y\\) \u5747\u670d\u4ece \\((0,m)\\) \u4e0a\u7684\u5747\u5300\u5206\u5e03\uff0c\u4e14 \\(X\\) \u4e0e \\(Y\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u6c42\u4e8b\u6545\u8f66\u4e0e\u4e8b\u6545\u5904\u7406\u8f66\u7684\u8ddd\u79bb \\(Z\\) \u7684\u5bc6\u5ea6\u51fd\u6570.</p> Answer <p>1.\\(Z = |Y-X|\\)\u7531\u753b\u56fe\u5f97</p> \\[F_Z(t) = \\frac{m^2 - (m-t)^2}{m^2} = \\frac{2mt - t^2}{m^2},0&lt;t&lt;m\\] \\[f_Z(t)=\\begin{cases} \\frac{2m-2t}{m^2},&amp;0&lt;t&lt;m \\\\ 0,&amp;\\text{\u5176\u4ed6}\\end{cases}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW7/#b7","title":"B7","text":"Question <p>\u8bbe\u4e00\u7cfb\u7edf\u7531\u4e09\u4e2a\u76f8\u4e92\u72ec\u7acb\u7684\u3001\u6b63\u5e38\u5de5\u4f5c\u65f6\u95f4\u5206\u522b\u4e3a \\(X_1,X_2,X_3\\) \u7684\u5b50\u7cfb\u7edf\u7ec4\u6210(\u5982\u56fe\u6240\u793a),\u4e14 \\(X_i(i=1,2,3)\\) \u5747\u670d\u4ece\u53c2\u6570\u4e3a \\(\\lambda\\) \u7684\u6307\u6570\u5206\u5e03\uff0c\u6c42\u8be5\u7cfb\u7edf\u6b63\u5e38\u5de5\u4f5c\u65f6\u95f4 \\(T\\) \u7684\u5206\u5e03\u51fd\u6570 \\(F_T(t)\\) \u53ca\u5bc6\u5ea6\u51fd\u6570 \\(f_T(t)\\) .</p> <p></p> Answer <p>1.</p> \\[F_{X_1,X_2}(t) = (1-e^{-\\lambda t})(1-e^{-\\lambda t}) = (1-e^{-\\lambda t})^2\\] \\[F_T(t) = 1 - [1 - (1-e^{-\\lambda t})^2]e^{-\\lambda t},t &gt; 0\\] \\[f_T(t) = \\begin{cases}-3\\lambda e^{-3\\lambda t} + 4 \\lambda e^{-2\\lambda t} ,&amp;t &gt; 0 \\\\ 0,&amp;t \\le 0 \\end{cases}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW7/#b10","title":"B10","text":"Question <p>\u8bbe\u4e8c\u7ef4\u968f\u673a\u53d8\u91cf \\((X,Y)\\) \u7684\u8054\u5408\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x,y)=\\begin{cases} \\frac{3-x-y}{3}, &amp; 0 &lt; x &lt; 1,0 &lt; y &lt; 2 \\\\ 0, &amp; \\text{\u5176\u4ed6} \\end{cases}\\] <p>\u8bb0 \\(Z = X+Y\\) \uff0c\u6c42 \\(Z\\) \u7684\u5bc6\u5ea6\u51fd\u6570.</p> Answer \\[\\text{\u7531\u753b\u56fe\u8f85\u52a9\u5f97\u5230}\\] \\[f_Z(t) = \\int_{-\\infty}^{+\\infty}f(x,t-x)dx = \\begin{cases} \\int_0^t \\frac{3-t}{3}dx,&amp;0 &lt; t \\le 1 \\\\ \\int_0^{1} \\frac{3-t}{3}dx,&amp;1 &lt; t \\le 2 \\\\ \\int_{t-2}^{1} \\frac{3-t}{3}dx,&amp;2 &lt; t \\le 3 \\\\ 0,&amp;\\text{\u5176\u4ed6} \\end{cases}\\] \\[\\therefore f_Z(t) = \\begin{cases} \\frac{(3-t)t}{3},&amp;0 &lt; t \\le 1 \\\\ \\frac{3-t}{3},&amp;1 &lt; t \\le 2 \\\\ \\frac{(3-t)^2}{3},&amp;2 &lt; t \\le 3 \\\\ 0,&amp;\\text{\u5176\u4ed6} \\end{cases}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW7/#b11","title":"B11","text":"Question <p>\u5df2\u77e5\u5e02\u573a\u4e0a\u67d0\u79cd\u852c\u83dc\u7684\u4ef7\u683c(\u5355\u4f4d\uff1a\u5143/kg) \\(X\\sim U(6,8)\\) (\u5747\u5300\u5206\u5e03),\u8bbe\u67d0\u9910\u9986\u8fd1\u671f\u8d2d\u4e70\u8be5\u79cd\u852c\u83dc\u7684\u6570\u91cf \\(Y\\) \u4e3a8kg\u548c10kg\u7684\u6982\u7387\u5747\u4e3a0.5.</p> <p>(1)\u6c42\u8d2d\u4e70\u91d1\u989d \\(Z\\) \u4e0d\u5927\u4e8e60\u5143\u7684\u6982\u7387 \\(p\\) ;</p> <p>(2)\u6c42\u8d2d\u4e70\u91d1\u989d \\(Z\\) \u7684\u5206\u5e03\u51fd\u6570 \\(F_Z(z)\\) .</p> Answer <p>1.</p> \\[F_X(x) = \\begin{cases} \\frac{1}{2}(x-6),&amp; 6&lt;x&lt;8 \\\\ 0,&amp;\\text{\u5176\u4ed6} \\end{cases}\\] \\[\\therefore P = \\frac{1}{2} \\times \\frac{1}{2} \\times (\\frac{60}{8}-6) = \\frac{3}{8}\\] <p>2.</p> \\[X = \\frac{Z}{8}, F_Z(z) = \\frac{z}{32} - \\frac{3}{2},48&lt;z \\le 60\\] \\[F_Z(z) = \\frac{1}{2} \\times \\frac{1}{2} \\times (\\frac{z}{8}-6) + \\frac{1}{2} \\times \\frac{1}{2} \\times (\\frac{z}{10}-6) = \\frac{9z}{160} - 3,60&lt;z \\le 64\\] \\[F_Z(z) = \\frac{1}{2} \\times \\frac{1}{2} \\times (\\frac{z}{10}-6) + \\frac{1}{2} \\times \\frac{1}{2} \\times (8-6) = \\frac{z}{40} - 1,64&lt;z &lt; 80\\] \\[\\therefore F_Z(z) = \\begin{cases} 0,&amp;z&lt;48 \\\\ \\frac{z}{32} - \\frac{3}{2},&amp;48&lt;z &lt; 60 \\\\ \\frac{9z}{160} - 3,&amp;60&lt; z \\le 64 \\\\ \\frac{z}{40}-1,&amp; 64 &lt; z &lt; 80 \\\\ 1,&amp;\\text{\u5176\u4ed6} \\end{cases}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW8/","title":"HW8(\u4e60\u9898\u56db)","text":"<p> \u7ea6 673 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW8/#a4","title":"A4","text":"Question <p>\u8bbe\u4e8c\u7ef4\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf \\((X,Y)\\) \u7684\u8054\u5408\u5206\u5e03\u5f8b\u4e3a</p> X\\Y 0 1 2 1 0.2 0.1 0.3 2 0.2 0 0.2 <p>\u6c42\u968f\u673a\u53d8\u91cf \\(Z\\) \u7684\u6570\u5b66\u671f\u671b \\(E(Z)\\);</p> <p>(1) \\(Z = XY\\)</p> <p>(2) \\(Z = min\\{X,Y\\};\\)</p> <p>(3)\\(Z = max\\{X,Y\\};\\)</p> Answer <ol> <li> <p>\\(E(Z) = 1 \\times 0.1 + 2 \\times 0.3 + 4 \\times 0.2 = 1.5\\)</p> </li> <li> <p>\\(E(Z) = 1 \\times 0.4 + 2 \\times 0.2 = 0.8\\)</p> </li> <li> <p>\\(E(Z) = 1 \\times 0.3 + 2 \\times 0.7 = 1.7\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW8/#b6","title":"B6","text":"Question <p>\u8bbe\u4e8c\u7ef4\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf \\((X,Y)\\) \u7684\u8054\u5408\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x,y) = \\begin{cases}\\frac{2}{x}e^{-2x}, &amp;0&lt;x&lt;+\\infty,0&lt;y&lt;x \\\\ 0, &amp;\\text{\u5176\u4ed6}\\end{cases}\\] <p>(1)\u6c42 \\(E(X)\\)</p> <p>(2)\u6c42 \\(E(3X-1)\\)</p> <p>(3)\u6c42 \\(E(XY)\\)</p> Answer <ol> <li> <p>\\(E(X) = \\int_0^{+\\infty} x (\\int_0^xf(x,y)dy)dx = \\frac{1}{2}\\)</p> </li> <li> <p>\\(E(3X-1) = 3E(X)-1 = \\frac{1}{2}\\)</p> </li> <li> <p>\\(E(XY) = \\int (xy)f(x,y)d(xy) = \\frac{1}{4}\\)</p> </li> </ol>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW8/#b11","title":"B11","text":"Question <p>\u67d0\u7535\u5b50\u76d1\u89c6\u5668\u7684\u5706\u5f62\u5c4f\u5e55\u534a\u5f84\u4e3a \\(r(r&gt;0)\\) ,\u82e5\u76ee\u6807\u51fa\u73b0\u7684\u4f4d\u7f6e\u70b9 \\(A\\) \u670d\u4ece\u5747\u5300\u5206\u5e03.\u4ee5\u5706\u5f62\u5c4f\u5e55\u7684\u5706\u5fc3\u4e3a\u539f\u70b9\uff0c\u8bbe\u70b9A\u7684\u5e73\u9762\u76f4\u89d2\u5750\u6807\u4e3a \\((X,Y)\\).</p> <p>(1)\u6c42 \\(E(X)\\) \u4e0e \\(E(Y)\\);</p> <p>(2)\u6c42\u70b9A\u4e0e\u5c4f\u5e55\u4e2d\u5fc3\u4f4d\u7f6e(0,0)\u7684\u5e73\u5747\u8ddd\u79bb</p> Answer <ol> <li> <p>\\(E(X) = E(Y) = \\int_{-r}^r x (\\int_{-\\sqrt{r^2 - x^2}}^{\\sqrt{r^2 - x^2}} \\frac{1}{\\pi r^2}dy) dx = 0\\)</p> </li> <li> <p>\\(E(\\sqrt{x^2+y^2}) = \\mathop{\\int \\int}\\limits_{x^2+y^2 \\le r^2} \\sqrt{x^2+y^2} \\cdot \\frac{1}{\\pi r^2} dxdy \\mathop{=}\\limits^{\\textbf{\u6781\u5750\u6807\u53d8\u6362}} \\int_0^{2 \\pi}d\\theta \\int_0^r \\frac{R^2}{\\pi r^2}dR= \\frac{2}{3}r\\)</p> </li> </ol> \u2b50\u79ef\u5206\u53d8\u6362 <p>\u4e8c\u91cd\u79ef\u5206\u4ece\u76f4\u89d2\u5750\u6807\u7cfb\u53d8\u6362\u4e3a\u6781\u5750\u6807\u7684\u53d8\u6362\u516c\u5f0f</p> \\[\\int\\int_{\\sigma}f(x,y)dxdy = \\int\\int_{\\sigma}f(r\\cos\\theta,r\\sin\\theta)rdrd\\theta\\] <p>\u4e09\u91cd\u79ef\u5206\u4ece\u76f4\u89d2\u5750\u6807\u7cfb\u53d8\u6362\u4e3a\u7403\u9762\u5750\u6807\u7684\u53d8\u6362\u516c\u5f0f</p> \\[\\int\\int\\int_{V}f(x,y,z)dV = \\int\\int\\int_{V}f(\\rho\\sin\\phi\\cos\\theta,\\rho\\sin\\phi\\sin\\theta,\\rho\\cos\\phi)\\rho^2\\sin\\phi d\\theta d\\phi d\\rho\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW8/#b14","title":"B14","text":"Question <p>\u6709n\u5f20\u5404\u4e0d\u76f8\u540c\u7684\u5361\u7247\uff0c\u91c7\u7528\u6709\u653e\u56de\u62bd\u6837\uff0c\u6bcf\u6b21\u53d6\u4e00\u5f20\uff0c\u5171\u53d6n\u6b21\uff0c\u5219\u6709\u4e9b\u5361\u7247\u4f1a\u88ab\u53d6\u5230\uff0c\u751a\u81f3\u88ab\u53d6\u5230\u5f88\u591a\u6b21\uff0c\u4f46\u6709\u4e9b\u5361\u7247\u53ef\u80fd\u4e0d\u66fe\u88ab\u53d6\u5230.\u8bbe\u8fd9n\u5f20\u5361\u7247\u4e2d\u88ab\u53d6\u5230\u7684\u5171\u6709X\u5f20\uff0c\u8ba1\u7b97E(X),\u5e76\u8ba1\u7b97\u5f53 \\(n \\rightarrow +\\infty\\) \u65f6\uff0c\\(E(\\frac{X}{n})\\) \u7684\u6781\u9650.</p> Answer <p>\u8fd9\u5f20\u5361\u88ab\u62bd\u5230\u8fc7 \\(P = 1 - (1-\\frac{1}{n})^n\\)</p> \\[E(X) = \\sum\\limits_{i=1}^nE(X_i) = n(1 - (1-\\frac{1}{n})^n)\\] \\[\\mathop{lim}\\limits_{n\\rightarrow +\\infty} E(\\frac{X}{n}) = \\mathop{lim}\\limits_{n\\rightarrow +\\infty}(1 - (1-\\frac{1}{n})^n) = 1-e^{-1}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW8/#b15","title":"B15","text":"Question <p>\u5728\u533a\u95f4(0,1)\u4e2d\u968f\u673a\u5730\u53d6n(n \\(\\ge\\) 2)\u4e2a\u70b9\uff0c\u6c42\u76f8\u8ddd\u6700\u8fdc\u7684\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u7684\u6570\u5b66\u671f\u671b</p> Answer <p>\u5f53n\u8f83\u5927\u65f6\u53ef\u89c6\u4f5c\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u76f8\u8ddd\\(\\frac{1}{n+1}\\)\uff0c\u6240\u4ee5\\(E(X) = 1 - \\frac{2}{n+1} = \\frac{n-1}{n+1}\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW8/#b20","title":"B20","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cfX\u670d\u4ece\u62c9\u666e\u62c9\u65af\u5206\u5e03\uff0c\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x) = \\frac{1}{2} e^{-|x|},-\\infty &lt; x &lt; +\\infty\\] <p>\u8ba1\u7b97 \\(X\\) \u4e0e \\(|X|\\) \u7684\u65b9\u5dee</p> Answer \\[E(X) = \\int xf(x)dx = 0\\] \\[E(X^2) =  \\int x^2f(x)dx \\mathop{=}\\limits^{\\text{\u5206\u90e8\u79ef\u5206}} 2\\] \\[D(X) = E(X^2) - E^2(X) = 2\\] \\[E(|X|) = \\int |x|f(x)dx = 1\\] \\[E(|X|^2) =  \\int |x|^2f(x)dx \\mathop{=}\\limits^{\\text{\u5206\u90e8\u79ef\u5206}} 2\\] \\[D(|X|) = E(|X|^2) - E^2(|X|) = 1\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW9/","title":"HW9(\u4e60\u9898\u56db\u3001\u4e94)","text":"<p> \u7ea6 397 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW9/#b24","title":"B24","text":"Question <p>(\u63a5\u7b2cB20\u9898)(1)\u6c42X\u4e0e|X|\u7684\u76f8\u5173\u7cfb\u6570\uff0c\u5e76\u5224\u65ad\u4e24\u8005\u662f\u5426\u76f8\u5173\uff1b</p> <p>(2)\u5224\u65adX\u4e0e|X|\u662f\u5426\u76f8\u4e92\u72ec\u7acb.</p> Answer <ol> <li> <p>\\(Cov(X,|X|)=E(X|X|)\u2212E(X)E(|X|) = 0\\)\u6240\u4ee5\\(\\rho = 0\\)\uff0c \\(X\\) \u4e0e \\(|X|\\) \u4e0d\u76f8\u5173\uff1b</p> </li> <li></li> </ol> \\[f_X(x) = \\frac{1}{2} e^{-|x|},-\\infty &lt; x &lt; +\\infty\\] \\[f_{|X|}(y) = P\\{|X| \\le y\\}\\text{\u7684\u5bfc\u6570} = e^{-y}, 0 \\le y &lt; +\\infty\\] \\[f_{X,|X|}(x,y) = \\begin{cases}0.5 \\cdot e^{-y} , &amp; x = y \\text{\u6216} x = -y , y \\ge 0\\\\ 0,&amp; \\text{\u5176\u4ed6} \\end{cases}\\] <p>\u800c\\(f_{X,|X|}(x,y) \\neq f_X(x) \\cdot f_{|X|}(y)\\)\uff0c\u6240\u4ee5\u4e0d\u72ec\u7acb</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW9/#b28","title":"B28","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X_1,X_2,\\dots,X_n\\) \u5747\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03\u5e76\u4e14\u76f8\u4e92\u72ec\u7acb\u3002\u8bb0\\(S_k = \\sum\\limits_{i=1}^k X_i,T_k = \\sum\\limits_{j = n_0+1}^{n_0+k}X_j\\)\uff0c\u5176\u4e2d\\(1 \\le n_0 &lt; k &lt; n_o+k \\le n\\)\uff0c\u6c42 \\(S_k\\) \u4e0e \\(T_k\\) \u7684\u76f8\u5173\u7cfb\u6570</p> Answer \\[\\rho(S_k, T_k) = \\frac{\\operatorname{Cov}(S_k, T_k)}{\\sqrt{\\operatorname{Var}(S_k) \\cdot \\operatorname{Var}(T_k)}}\\] <p>\u65b9\u5dee\uff1a\\(\\operatorname{Var}(X_i) = 1 \\quad \\text{\u4e14} \\quad \\operatorname{Cov}(X_i, X_j) = 0 \\, (i \\neq j)\\)</p> <p>\u4e8e\u662f\uff1a\\(\\operatorname{Var}(S_k) = \\operatorname{Var}\\left(\\sum_{i=1}^k X_i\\right) = \\sum_{i=1}^k \\operatorname{Var}(X_i) = k\\)</p> <p>\u540c\u7406\uff0c\\(T_k = \\sum_{j=n_0+1}^{n_0+k} X_j\\) \uff0c\u4e14\u968f\u673a\u53d8\u91cf\u4ecd\u7136\u76f8\u4e92\u72ec\u7acb\uff0c\u56e0\u6b64\uff1a</p> \\[\\operatorname{Var}(T_k) = \\operatorname{Var}\\left(\\sum_{j=n_0+1}^{n_0+k} X_j\\right) = \\sum_{j=n_0+1}^{n_0+k} \\operatorname{Var}(X_j) = k\\] <p>\u968f\u673a\u53d8\u91cf\u7684\u534f\u65b9\u5dee\u5b9a\u4e49\u4e3a\uff1a\\(\\operatorname{Cov}(S_k, T_k) = \\mathbb{E}[S_k T_k] - \\mathbb{E}[S_k]\\mathbb{E}[T_k]\\)</p> <p>\u7531\u4e8e \\(X_i\\) \u662f\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c\u56e0\u6b64 \\(\\mathbb{E}[S_k] = \\mathbb{E}[T_k] = 0\\)\uff0c\u4ece\u800c\uff1a\\(\\operatorname{Cov}(S_k, T_k) = \\mathbb{E}[S_k T_k]\\) \u5229\u7528\u72ec\u7acb\u6027\u548c\u4ea4\u53c9\u9879\u7684\u6027\u8d28\uff0c\u4ec5\u4fdd\u7559 \\(X_i\\) \u540c\u65f6\u51fa\u73b0\u5728\u4e24\u4e2a\u6c42\u548c\u4e2d\u7684\u9879\uff1a</p> \\[\\mathbb{E}[S_k T_k] = \\sum_{i=1}^k \\sum_{j=n_0+1}^{n_0+k} \\mathbb{E}[X_i X_j] = \\text{\u91cd\u53e0\u9879\u7684\u6570\u91cf}\\] <p>\u56e0\u6b64\uff1a\\(\\operatorname{Cov}(S_k, T_k) = k - n_0 \\Rightarrow \\rho(S_k, T_k) = \\frac{k - n_0}{k}\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW9/#b29","title":"B29","text":"Question <p>\u8bbe \\(X \u223c N(0,1)\\), Y\u7684\u53ef\u80fd\u53d6\u503c\u4e3a \\(\\pm 1\\)\uff0c\u4e14\\(P\\{Y=1\\} = p \\ (0&lt;p&lt;1)\\).\u8bbe \\(X\\) \u4e0e \\(Y\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u8bb0 \\(\\xi = X \\cdot Y\\)</p> <p>(1)\u8bc1\u660e\uff1a\\(\\xi \u223c N(0,1)\\);</p> <p>(2)\u8ba1\u7b97 \\(\\rho_{X_{\\xi}}\\) \uff0c\u5e76\u5224\u65ad \\(X\\) \u4e0e \\(\\xi\\) \u7684\u76f8\u5173\u6027\u548c\u72ec\u7acb\u6027.</p> Answer <ol> <li>\u5f53 \\(Y = 1\\) \u65f6\uff0c \\(\\xi = X\\) \uff1b\u5f53 \\(Y = -1\\) \u65f6\uff0c$ \\xi = -X$ \u3002</li> </ol> <p>\u4e8e\u662f\uff0c\u6df7\u5408\u5206\u5e03\uff1a</p> \\[f_\\xi(x) = P(Y=1) f_X(x) + P(Y=-1) f_X(-x) = p \\cdot \\frac{1}{\\sqrt{2\\pi}} e^{-x^2/2} + (1-p) \\cdot \\frac{1}{\\sqrt{2\\pi}} e^{-(-x)^2/2} = \\frac{1}{\\sqrt{2\\pi}} e^{-x^2/2}.\\] <p>\u56e0\u6b64\uff0c \\(\\xi \\sim N(0,1).\\)</p> <ol> <li> <ul> <li>\\(\\operatorname{Var}(X) = \\operatorname{Var}(\\xi) = 1\\) \uff0c\u56e0\u4e3a \\(X \\sim N(0,1)\\) \u4e14 \\(\\xi \\sim N(0,1)\\) \u3002</li> <li>\u56e0\u6b64\uff1a\\(\\rho_{X \\xi} = \\operatorname{Cov}(X, \\xi).\\)</li> </ul> </li> </ol> \\[ \\operatorname{Cov}(X, \\xi) = \\mathbb{E}[X \\cdot \\xi] - \\mathbb{E}[X] \\mathbb{E}[\\xi] = \\mathbb{E}[X \\cdot \\xi] = \\mathbb{E}[X \\cdot (X \\cdot Y)] = \\mathbb{E}[X^2 \\cdot Y] = \\mathbb{E}[X^2] \\cdot \\mathbb{E}[Y]\\] <p>\u7531 \\(\\mathbb{E}[X^2] = \\operatorname{Var}(X) + (\\mathbb{E}[X])^2 = 1\\) \uff0c\u800c \\(\\mathbb{E}[Y] = p \\cdot 1 + (1-p) \\cdot (-1) = 2p - 1\\)\u3002</p> <p>\u56e0\u6b64\uff1a\\(\\operatorname{Cov}(X, \\xi) = 1 \\cdot (2p - 1) = 2p - 1 \\rightarrow \\rho_{X_\\xi} = 2p - 1\\)</p> <p>\u5f53 \\(p=\\frac{1}{2}\\) \u65f6\uff0c \\(X\\)\u4e0e\\(\\xi\\)\u4e0d\u76f8\u5173\uff1b\u5f53 \\(p &gt; \\frac{1}{2}\\) \u65f6\uff0c \\(X\\)\u4e0e\\(\\xi\\)\u6b63\u76f8\u5173\uff1b\u5f53 \\(p &lt; \\frac{1}{2}\\) \u65f6\uff0c \\(X\\)\u4e0e\\(\\xi\\)\u8d1f\u76f8\u5173\uff1b</p> <p>\u53d6 \\(p = 0.75\\) \uff0c\u5219 \\(\\mathbb{E}[X \\cdot \\xi] = 2 \\cdot 0.75 - 1 = 0.5\\) </p> <p>\u6b64\u65f6 \\(\\mathbb{E}[X] = 0\\) \uff0c \\(\\mathbb{E}[\\xi] = 0\\) \uff0c \\(\\mathbb{E}[X \\cdot \\xi] \\neq \\mathbb{E}[X] \\cdot \\mathbb{E}[\\xi]\\)</p> <p>\u56e0\u6b64 \\(X\\)\u4e0e\\(\\xi\\)\u4e0d\u72ec\u7acb\u3002</p> <p>\u5f53 \\(0 &lt; p &lt;1\\) \u65f6\uff0c \\(X\\)\u4e0e\\(\\xi\\)\u4e0d\u72ec\u7acb\uff1b</p> <p>Info</p> <p>\u4e0d\u72ec\u7acb\u662f\u9700\u8981\u4e3e\u53cd\u4f8b\u6216\u8005\u5199\u4e25\u8c28\u7684\u8bc1\u660e\u6765\u8bf4\u660e\u7684\uff0c\u4e0d\u80fd\u7528\u663e\u7136\u6216\u8005xx\u662fxx\u7684\u51fd\u6570\u8fd9\u79cd\u4e0d\u4e25\u683c\u7684\u8bf4\u6cd5\u3002</p> <p>\u5728p\uff1d1/2\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u53ea\u662f\u5206\u522b\u6ee1\u8db3\u6b63\u6001\u5206\u5e03\uff08\u4e0d\u6ee1\u8db3\u8054\u5408\u6b63\u6001\u5206\u5e03\uff09\u6240\u4ee5\u4e0d\u80fd\u62ff\u76f8\u5173\u7cfb\u6570\uff1d0\u5224\u65ad\u72ec\u7acb\u6027\uff0c\u8fd9\u91cc\u7684\u4e0d\u72ec\u7acb\u662f\u9700\u8981\u8be6\u7ec6\u8bf4\u660e\uff0c\u4e0d\u80fd\u4e00\u7b14\u5e26\u8fc7\u3002</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW9/#b33","title":"B33","text":"Question <p>\u5df2\u77e5\u4e09\u7ef4\u6b63\u6001\u53d8\u91cf \\(X = (X_1,X_2,X_3)^T \\sim N(a,B)\\) \uff0c\u5176\u4e2d</p> \\[a = (0,0,1)^T, B = \\begin{pmatrix} 1 &amp; 2 &amp; -1 \\\\ 2 &amp; 16 &amp; 0 \\\\ -1 &amp; 0 &amp; 4 \\end{pmatrix}\\] <p>(1)\u5199\u51fa \\(X\\) \u7684\u6bcf\u4e2a\u5206\u91cf\u7684\u5206\u5e03\uff1b</p> <p>(2)\u5224\u522b \\(X_1,X_2,X_3\\) \u7684\u76f8\u5173\u6027\u4e0e\u72ec\u7acb\u6027\uff1b</p> <p>(3)\u82e5 \\(Y_1 = X_1 - X_2\\) \uff0c \\(Y_2 = X_3 - X_1\\) \uff0c\u6c42 \\(Y = (Y_1,Y_2)^T\\) \u7684\u5206\u5e03.</p> Answer <p>(1) \\(X_1 \\sim N(0,1), X_2 \\sim N(0,16), X_3 \\sim N(1,4)\\)</p> <p>(2)</p> \\[Cov(X_1,X_2) = 2 \\quad Cov(X_1,X_3) = -1 \\quad Cov(X_2,X_3) = 0\\] <p>\\(\\rho_{X_1X_2} = 1\\) \\(X_1,X_2\\) \u76f8\u5173\u4e0d\u72ec\u7acb</p> <p>\\(\\rho_{X_1X_3} = -\\frac{1}{\\sqrt{2}}\\) \\(X_1,X_3\\) \u76f8\u5173\u4e0d\u72ec\u7acb</p> <p>\\(\\rho_{X_2X_3} = 0\\) \\(X_2,X_3\\) \u4e0d\u76f8\u5173\u4e14\u72ec\u7acb</p> <p>\\(X_1,X_2,X_3\\) \u76f8\u5173\u4e14\u4e0d\u72ec\u7acb</p> <p>(3)</p> \\[E(Y_1) = 0 \\quad E(Y_2) = 1\\] \\[Cov(Y_1,Y_1) = 13 \\quad Cov(Y_2,Y_2) = 7 \\quad Cov(Y_1,Y_2) = 0\\] \\[\\therefore Y \\sim N(\\mu, \\varepsilon)\\] \\[\\mu = (0,1)^T \\quad \\varepsilon = \\begin{pmatrix} 13 &amp; 0 \\\\ 0 &amp; 7 \\end{pmatrix}\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW9/#b34","title":"B34","text":"Question <p>\u8bbe\u6709\u4e00\u7164\u77ff\u4e00\u5929\u7684\u4ea7\u7164\u91cf \\(X\\) (\u4ee5 \\(10^4t\\) \u8ba1)\u670d\u4ece\u6b63\u6001\u5206\u5e03 \\(N(1.5,0.1^2)\\) .\u8bbe\u6bcf\u5929\u4ea7\u91cf\u76f8\u4e92\u72ec\u7acb\uff0c\u4e00\u4e2a\u6708\u630930\u5929\u8ba1\uff0c\u6c42\u4e00\u4e2a\u6708\u603b\u4ea7\u91cf\u8d85 \\(46 \\times 10^4t\\) \u7684\u6982\u7387.</p> Answer <p>30\u5929\u5219 \\(N(45,0.3) \\rightarrow 1 - \\Phi (\\sqrt{\\frac{10}{3}}) \\approx 0.0339\\)</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW9/#b3","title":"B3","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf \\(X_i\\) \u7684\u5bc6\u5ea6\u51fd\u6570</p> \\[f_i(x) = \\begin{cases}\\frac{i|x|^{i-1}}{2},&amp;|x| \\le 1 \\\\ 0, &amp; \\text{\u5176\u4ed6}\\end{cases}, i=1,2,\\dots,n\\] <p>\u4e14 \\(X_1,X_2,\\dots,X_n\\) \u76f8\u4e92\u72ec\u7acb\u3002\u4ee4 \\(Y_n = X_1X_2\\dots X_n\\)\uff0c\u7528\u5207\u6bd4\u96ea\u592b\u4e0d\u7b49\u5f0f\u6c42\u4f7f \\(P\\{|Y_n| \\ge \\frac{1}{2}\\} \\le \\frac{1}{9}\\) \u6210\u7acb\u7684\u6700\u5c0f \\(n\\)\u3002</p> Answer \\[E(X_i) = 0 \\rightarrow E(Y_n) = 0\\] \\[E(X_i^2) = \\frac{i}{i+2} \\rightarrow Var(X_i) = \\frac{i}{i+2} \\rightarrow Var(Y_n) = \\frac{2}{(n+1)(n+2)}\\] \\[P\\{|Y_n| \\ge \\frac{1}{2}\\} \\le 4Var(Y_n) \\le \\frac{1}{9} \\Rightarrow n_{min} = 7\\]"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/HW9/#b4","title":"B4","text":"Question <p>\u8bbe\u968f\u673a\u53d8\u91cf\u5e8f\u5217 \\({X_n\uff0cn\\ge 1}\\)\u72ec\u7acb\u540c\u5206\u5e03\uff0c\u90fd\u670d\u4eceU(0,a)\uff0c\u5176\u4e2da&gt;0\uff0c\u4ee4\\(X_{(n)} = max_{1\\le i \\le n}X_i\\)\uff0c\u8bc1\u660e: \\(X_{(n)} \\xrightarrow{P} a ,n \\rightarrow \\infty\\)</p> Answer <ol> <li>\u8981\u8bc1\\(\\mathop{\\lim}\\limits_{n \\to \\infty} P(a - X_{(n)} \\geq \\varepsilon) = 0.\\)\u7531\u4e8e \\(X_i \\sim U(0, a)\\) \uff0c\u5176\u5206\u5e03\u51fd\u6570\u4e3a\uff1a</li> </ol> \\[F(x) = P(X_i \\leq x) = \\begin{cases}  0, &amp; x &lt; 0, \\\\ \\frac{x}{a}, &amp; 0 \\leq x \\leq a, \\\\ 1, &amp; x &gt; a. \\end{cases}\\] <p>\u5bf9 \\(X_{(n)} = \\max(X_1, X_2, \\dots, X_n)\\) \uff0c\u6709\uff1a\\(P(X_{(n)} \\leq x) = P(X_1 \\leq x, X_2 \\leq x, \\dots, X_n \\leq x) = \\left(P(X_i \\leq x)\\right)^n = F(x)^n.\\)</p> <p>\u56e0\u6b64\uff1a</p> \\[P(X_{(n)} \\leq x) =  \\begin{cases}  0, &amp; x &lt; 0, \\\\ \\left(\\frac{x}{a}\\right)^n, &amp; 0 \\leq x \\leq a, \\\\ 1, &amp; x &gt; a. \\end{cases}\\] <p>\u7531\u4e8e\\(P(a - X_{(n)} \\geq \\varepsilon) = P(X_{(n)} \\leq a - \\varepsilon) = \\left(\\frac{a - \\varepsilon}{a}\\right)^n.\\) </p> <p>\u4e14\u5f53\\(n \\rightarrow \\infty\\) \u65f6 \\(\\left(\\frac{a - \\varepsilon}{a}\\right)^n \\to 0.\\) </p> <p>\u5f97\u5230 \\(X_{(n)} \\xrightarrow{P} a.\\)</p> <ol> <li> \\[\\mathbb{E}[X_{(n)}] = \\int_0^a x f_{X_{(n)}}(x) \\, dx = \\int_0^a x \\cdot \\frac{n}{a} \\left(\\frac{x}{a}\\right)^{n-1} \\, dx = \\frac{1}{n+1}.\\] </li> </ol> <p>\u540c\u7406\uff0c \\(\\mathbb{E}[X_{(n)}^2] = a^2 \\cdot \\frac{n}{n+2}.\\)</p> <p>\u56e0\u6b64\uff1a\\(\\operatorname{Var}(X_{(n)}) = a^2 \\cdot \\frac{n}{n+2} - \\left(\\frac{an}{n+1}\\right)^2.\\)</p> <p>\u5f53 \\(n \\to \\infty\\) \u65f6\uff1a\\(\\operatorname{Var}(X_{(n)}) \\to 0\\) \uff0c\u56e0\u6b64\uff1a\\(P(|X_{(n)} - a| \\geq \\varepsilon) \\to 0.\\)</p> <p>\u7531\u5207\u6bd4\u96ea\u592b\u4e0d\u7b49\u5f0f\u5f97\uff1a\\(X_{(n)} \\xrightarrow{P} a\\)</p> <p>Info</p> <p>\u4e0d\u80fd\u62ff\u5927\u6570\u5b9a\u5f8b\u53bb\u505a\uff0c\u8fd9\u91cc\u4e0d\u6d89\u53ca\u5747\u503c\uff0c\u6807\u51c6\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u8ba1\u7b97\u5206\u5e03\u51fd\u6570\uff08\u9700\u8981\u6839\u636e\u5206\u5e03\u653e\u7f29\u4e00\u6b65\uff09\u6216\u8005\u5207\u6bd4\u96ea\u592b\u4e0d\u7b49\u5f0f\uff08\u8ba1\u7b97\u5747\u503c\u548c\u65b9\u5dee\uff09</p>"},{"location":"Math/Probability_Theory_and_Mathematical_Statistics/HW/Homework_index/","title":"Homework","text":"<p> \u7ea6 32 \u4e2a\u5b57  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f</p>  HW   9,023 KB / 2024-11-24 <p> \u4e0b\u8f7d</p> <p>Info</p> <p>\u4ee5\u4e0b\u4f5c\u4e1a\u89e3\u6790\u4e3a\u6211\u4e2a\u4eba\u7684\u7b54\u6848\uff0c\u4e0d\u4e00\u5b9a\u6b63\u786e\u3002\u4ec5\u4f9b\u53c2\u8003\u3002</p>"},{"location":"Miscellaneous/","title":"Miscellaneous","text":"<p> \u7ea6 116 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>Abstract</p> <p>\u8fd9\u91cc\u4f1a\u653e\u4e00\u4e9b\u6211\u6700\u8fd1\u5b66\u7684\u4e00\u4e9b\u7a00\u5947\u53e4\u602a\u7684\u5c0f\u4e1c\u897f\uff0c\u4e5f\u4f1a\u653e\u4e00\u4e9b\u6700\u8fd1\u53d1\u73b0\u7684\u4e00\u4e9b\u6709\u610f\u601d\u6216\u5f88\u6709\u7528\u7684\u9879\u76ee~</p> <p>\u5927\u591a\u4e0d\u4f1a\u662f\u7cfb\u7edf\u6027\u7684 (\u7cfb\u7edf\u6027\u7684\u5927\u6982\u4f1a\u88ab\u8fc1\u79fb\u51fa\u8fd9\u4e2a\u6a21\u5757) \uff0c\u591a\u6570\u662f\u611f\u5174\u8da3\u6240\u4ee5\u5b66\u4e00\u70b9\uff0c\u5927\u6982\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u6d89\u730e\u5427\u3002</p> <p>\u5982\u679c\u6709\u4ec0\u4e48\u7406\u89e3\u4e0d\u5230\u4f4d\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u8bf8\u541b\u6307\u6b63\uff01</p> <p>\u6700\u8fd1\u5728\u5b66\u4ec0\u4e48\uff1a</p> <ul> <li> prompt</li> </ul>"},{"location":"Miscellaneous/mermaid/","title":"Mermaid","text":"<p> \u7ea6 500 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"Miscellaneous/mermaid/#_1","title":"\u6d41\u7a0b\u56fe","text":"<p>\u6d41\u7a0b\u56fe\u7531\u8282\u70b9\uff08\u51e0\u4f55\u5f62\u72b6\uff09\u548c\u8fb9\uff08\u7bad\u5934\u6216\u7ebf\u6761\uff09\u7ec4\u6210\u3002</p> <p>Warning</p> <ol> <li> <p>\u5982\u679c\u4f60\u5728\u6d41\u7a0b\u56fe\u8282\u70b9\u4e2d\u4f7f\u7528\u5355\u8bcd \"end\"\uff0c\u8bf7\u5c06\u6574\u4e2a\u5355\u8bcd\u6216\u4efb\u4f55\u5b57\u6bcd\u5927\u5199\uff08\u4f8b\u5982\uff0c\"End\" \u6216 \"END\"\uff09\u3002\u8f93\u5165\u5168\u90e8\u5c0f\u5199\u5b57\u6bcd\u7684 \"end\" \u5c06\u7834\u574f\u6d41\u7a0b\u56fe\u3002</p> </li> <li> <p>\u5982\u679c\u4f60\u4f7f\u7528\u5b57\u6bcd \"o\" \u6216 \"x\" \u4f5c\u4e3a\u8fde\u63a5\u6d41\u7a0b\u56fe\u8282\u70b9\u7684\u9996\u5b57\u6bcd\uff0c\u8bf7\u5728\u5b57\u6bcd\u524d\u6dfb\u52a0\u7a7a\u683c\u6216\u5c06\u5b57\u6bcd\u5927\u5199\uff08\u4f8b\u5982\uff0c\"dev--- ops\"\u3001\"dev---Ops\"\uff09\u3002\u8f93\u5165 \"A---oB\" \u5c06\u521b\u5efa circle edge\u3002\u8f93\u5165 \"A---xB\" \u5c06\u521b\u5efa cross edge\u3002</p> </li> </ol>"},{"location":"Miscellaneous/mermaid/#basics","title":"basics","text":"<ul> <li>\u4e00\u4e2a\u8282\u70b9</li> </ul> <pre><code>flowchart LR\n    id\n</code></pre> <ul> <li>\u5e26\u6709\u6587\u672c\u7684\u8282\u70b9</li> </ul> <pre><code>flowchart LR\n    id1[This is the text in the box]\n</code></pre> <ul> <li>\u4f7f\u7528 \" \u5c06 unicode \u6587\u672c\u62ec\u8d77\u6765\u3002</li> </ul> <pre><code>flowchart LR\n    id[\"This \u2764 Unicode\"]\n</code></pre> <ul> <li>\u4f7f\u7528\u53cc\u5f15\u53f7\u548c\u53cd\u5f15\u53f7 \"text\" \u5c06 Markdown \u6587\u672c\u62ec\u8d77\u6765\u3002</li> </ul> <pre><code>flowchart LR\n    markdown[\"`This **is** _Markdown_`\"]\n    newLines[\"`Line1\n    Line 2\n    Line 3`\"]\n    markdown --&gt; newLines\n</code></pre>"},{"location":"Miscellaneous/mermaid/#_2","title":"\u65b9\u5411","text":"<p>\u53ef\u80fd\u7684\u6d41\u7a0b\u56fe\u65b9\u5411\u662f\uff1a</p> <ul> <li><code>TB</code> - \u4ece\u4e0a\u5230\u4e0b</li> <li><code>TD</code> - \u81ea\u4e0a\u800c\u4e0b/\u4e0e\u4ece\u4e0a\u5230\u4e0b\u76f8\u540c</li> <li><code>BT</code> - \u4ece\u4e0b\u5230\u4e0a</li> <li><code>RL</code> - \u4ece\u53f3\u5230\u5de6</li> <li><code>LR</code> - \u4ece\u5de6\u5230\u53f3</li> </ul> <pre><code>flowchart TD\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]\n</code></pre>"},{"location":"Miscellaneous/mermaid/#_3","title":"\u8282\u70b9\u5f62\u72b6","text":"<ul> <li>\u5177\u6709\u5706\u8fb9\u7684\u8282\u70b9</li> </ul> <pre><code>flowchart LR\n    id1(This is the text in the box)\n</code></pre> <ul> <li>\u4e00\u4e2a stadium-shaped \u7684\u8282\u70b9</li> </ul> <pre><code>flowchart LR\n    id1([This is the text in the box])\n</code></pre> <ul> <li>A node in a subroutine shape</li> </ul> <pre><code>flowchart LR\n    id1[[This is the text in the box]]\n</code></pre> <ul> <li>\u5706\u67f1\u5f62\u8282\u70b9</li> </ul> <pre><code>flowchart LR\n    id1[(Database)]\n</code></pre> <ul> <li>\u4e00\u4e2a\u5706\u5f62\u7684\u8282\u70b9</li> </ul> <pre><code>flowchart LR\n    id1((This is the text in the circle))\n</code></pre> <ul> <li>\u5f62\u72b6\u4e0d\u5bf9\u79f0\u7684\u8282\u70b9</li> </ul> <pre><code>flowchart LR\n    id1&gt;This is the text in the box]\n</code></pre> <p>Info</p> <p>\u76ee\u524d\u53ea\u6709\u4e0a\u9762\u7684\u5f62\u72b6\u662f\u53ef\u80fd\u7684\uff0c\u800c\u4e0d\u662f\u5b83\u7684\u955c\u50cf\u3002\u8fd9\u53ef\u80fd\u4f1a\u968f\u7740\u672a\u6765\u7684\u7248\u672c\u800c\u6539\u53d8\u3002</p> <ul> <li>\u8282\u70b9\uff08\u83f1\u5f62\uff09</li> </ul> <pre><code>flowchart LR\n    id1{This is the text in the box}\n</code></pre> <ul> <li>\u516d\u8fb9\u5f62\u8282\u70b9</li> </ul> <pre><code>flowchart LR\n    id1{{This is the text in the box}}\n</code></pre> <ul> <li>\u5e73\u884c\u56db\u8fb9\u5f62</li> </ul> <pre><code>flowchart TD\n    id1[/This is the text in the box/]\n</code></pre> <ul> <li>\u5e73\u884c\u56db\u8fb9\u5f62\uff08\u955c\u50cf\uff09</li> </ul> <pre><code>flowchart TD\n    id1[\\This is the text in the box\\]\n</code></pre> <ul> <li>\u68af\u5f62</li> </ul> <pre><code>flowchart TD\n    id1[/This is the text in the box\\]\n</code></pre> <ul> <li>\u68af\u5f62\uff08\u5012\u7f6e\uff09</li> </ul> <pre><code>flowchart TD\n    id1[\\This is the text in the box/]\n</code></pre> <ul> <li>\u53cc\u5708</li> </ul> <pre><code>flowchart TD\n    id1(((This is the text in the circle)))\n</code></pre> <ul> <li>\u4e00\u4e9b\u5176\u4ed6\u8282\u70b9&amp;\u7279\u6b8a\u5f62\u72b6</li> </ul>"},{"location":"Miscellaneous/mermaid/#_4","title":"\u8282\u70b9\u4e4b\u95f4\u7684\u94fe\u63a5","text":"<ul> <li>\u7bad\u5934</li> </ul> <pre><code>flowchart LR\n    A--&gt;B\n</code></pre> <ul> <li>\u7bad\u5934\uff08\u65e0\u7bad\u5934\uff09</li> </ul> <pre><code>flowchart LR\n    A---B\n</code></pre> <ul> <li>\u8fde\u63a5\u4e0a\u7684\u6587\u672c</li> </ul> <pre><code>flowchart LR\n    A-- This is the text! ---B\n    A---|This is the text|B\n</code></pre> <ul> <li>\u7bad\u5934\u52a0\u6587\u672c</li> </ul> <pre><code>flowchart LR\n    A-- text --&gt;B\n    A--&gt;|text|B\n</code></pre> <ul> <li>\u865a\u7ebf\u94fe\u63a5</li> </ul> <pre><code>flowchart LR\n    A-.-&gt;B;\n</code></pre> <ul> <li>\u7c97\u94fe\u63a5</li> </ul> <pre><code>flowchart LR\n    A==&gt;B\n</code></pre> <ul> <li>\u770b\u4e0d\u89c1\u7684\u94fe\u63a5</li> </ul> <p>\u5728\u67d0\u4e9b\u4f60\u60f3\u8981\u66f4\u6539\u8282\u70b9\u7684\u9ed8\u8ba4\u4f4d\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5de5\u5177\u3002</p> <pre><code>flowchart LR\n    A ~~~ B\n</code></pre>"},{"location":"Miscellaneous/mermaid/#_5","title":"\u94fe\u63a5\u7684\u94fe\u63a5","text":"<pre><code>flowchart LR\n   A -- text --&gt; B -- text2 --&gt; C\n   a --&gt; b &amp; c--&gt; d\n   1 &amp; 2--&gt; 3 &amp; 4\n</code></pre>"},{"location":"Miscellaneous/mermaid/#_6","title":"\u66f4\u591a","text":"<p>\u6709\u5173\u52a8\u753b\u7b49\u7b49</p>"},{"location":"Miscellaneous/mermaid/#_7","title":"\u65b0\u7684\u7bad\u5934\u7c7b\u578b","text":"<pre><code>flowchart LR\n    A --o B\n    A --x B\n    A o--o B\n    B &lt;--&gt; C\n    C x--x D\n</code></pre>"},{"location":"Miscellaneous/mermaid/#_8","title":"\u7834\u574f\u8bed\u6cd5\u7684\u7279\u6b8a\u5b57\u7b26","text":"<ul> <li>\u53ef\u4ee5\u4f7f\u7528\u6b64\u5904\u793a\u4f8b\u7684\u8bed\u6cd5\u5bf9\u5b57\u7b26\u8fdb\u884c\u8f6c\u4e49\u3002</li> </ul> <pre><code>flowchart LR\n    A[\"A double quote:#quot;\"] --&gt; B[\"A dec char:#9829;\"]\n</code></pre>"},{"location":"Miscellaneous/mermaid/#_9","title":"\u5b50\u56fe","text":"<pre><code>flowchart TB\n    c1--&gt;a2\n    subgraph one\n    a1--&gt;a2\n    end\n    subgraph two\n    b1--&gt;b2\n    end\n    subgraph three\n    c1--&gt;c2\n    end\n</code></pre> <ul> <li>With the graphtype flowchart it is also possible to set edges to and from subgraphs as in the flowchart below.</li> </ul> <pre><code>flowchart TB\n    c1--&gt;a2\n    subgraph one\n    a1--&gt;a2\n    end\n    subgraph two\n    b1--&gt;b2\n    end\n    subgraph three\n    c1--&gt;c2\n    end\n    one --&gt; two\n    three --&gt; two\n    two --&gt; c2\n</code></pre> <ul> <li>\u4f7f\u7528 graphtype \u6d41\u7a0b\u56fe\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u65b9\u5411\u8bed\u53e5\u6765\u8bbe\u7f6e\u5b50\u56fe\u6e32\u67d3\u7684\u65b9\u5411\uff0c\u5982\u672c\u4f8b\u6240\u793a\u3002</li> </ul> <pre><code>flowchart LR\n  subgraph TOP\n    direction TB\n    subgraph B1\n        direction RL\n        i1 --&gt;f1\n    end\n    subgraph B2\n        direction BT\n        i2 --&gt;f2\n    end\n  end\n  A --&gt; TOP --&gt; B\n  B1 --&gt; B2\n</code></pre>"},{"location":"Miscellaneous/mermaid/#markdown","title":"Markdown \u5b57\u7b26\u4e32","text":"<pre><code>%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\nflowchart LR\nsubgraph \"One\"\n    a(\"`The **cat** in the hat`\") -- \"edge label\" --&gt; b{{\"`The **dog** in the hog`\"}}\nend\nsubgraph \"`**Two**`\"\n    c(\"`The **cat** in the hat`\") -- \"`Bold **edge label**`\" --&gt; d(\"The dog in the hog\")\nend\n</code></pre> <pre><code>graph LR\n\no(\u7fa4\u91cc\u63d0\u95ee\u7684\u827a\u672f)\no1(\u63d0\u95ee\u4e4b\u524d)\no11(\u5c1d\u8bd5\u81ea\u5df1\u89e3\u51b3)\no111(\u641c\u7d22\u4e5f\u662f\u4e00\u95e8\u827a\u672f)\no1111(Baidu)\no1112(Google)\no112(\u67e5\u9605\u624b\u518c\u6216\u8005\u6587\u6863)\no113(\u67e5\u9605\u8bba\u575b\u6216\u8005\u793e\u533a)\no1131(github)\no1132(stackoverflow)\no114(\u67e5\u9605\u6e90\u4ee3\u7801)\no115(\u8be2\u95ee\u670b\u53cb)\no116(\u81ea\u68c0\u5e76\u4e14\u4e0d\u65ad\u5c1d\u8bd5)\no12(\u4e0d\u80fd\u81ea\u5df1\u89e3\u51b3)\no121(\u660e\u767d\u81ea\u5df1\u60f3\u95ee\u4ec0\u4e48)\no122(\u68b3\u7406\u51c6\u5907\u4f60\u7684\u95ee\u9898)\no123(\u8a00\u7b80\u610f\u8d45)\no2(\u600e\u6837\u63d0\u95ee)\no21(\u7528\u8bcd\u51c6\u786e, \u95ee\u9898\u660e\u786e)\no22(\u63cf\u8ff0\u51c6\u786e, \u4fe1\u606f\u5145\u8db3)\no221(\u51c6\u786e\u6709\u6548\u7684\u4fe1\u606f)\no222(\u95ee\u9898\u5185\u5bb9)\no223(\u505a\u8fc7\u4ec0\u4e48\u5c1d\u8bd5)\no224(\u60f3\u8981\u95ee\u4ec0\u4e48)\no23(\u522b\u95ee\u6beb\u65e0\u610f\u4e49\u7684\u95ee\u9898)\no231(\u6709\u6ca1\u6709\u4eba\u5728)\no232(\u6709\u6ca1\u6709\u4eba\u4f1a)\no3(\u6ce8\u610f\u4e8b\u9879)\no31(\u63d0\u95ee\u524d\u505a\u597d\u51b7\u573a\u7684\u5fc3\u7406\u51c6\u5907)\no311(\u4e5f\u8bb8\u8fd9\u4e2a\u95ee\u9898\u7f51\u4e0a\u641c\u4e00\u4e0b\u5c31\u77e5\u9053\u7b54\u6848)\no312(\u4e5f\u8bb8\u522b\u4eba\u5728\u5fd9)\no313(\u4e5f\u8bb8\u8fd9\u4e2a\u95ee\u9898\u592a\u7b80\u5355\u4e86)\no314(\u4e5f\u8bb8\u6ca1\u4eba\u505a\u8fc7\u8fd9\u4e2a)\no32(\u8c26\u865a, \u522b\u4eba\u6ca1\u6709\u4e49\u52a1\u4e3a\u4f60\u89e3\u51b3\u95ee\u9898)\no33(\u6ca1\u6709\u4e00\u5b9a\u7684\u5b66\u4e60\u80fd\u529b, \u9047\u5230\u95ee\u9898\u53ea\u4f1a\u4f38\u624b\u7684\u4e0d\u9002\u5408\u73a9\u8fd9\u4e2a)\no34(\u7fa4\u552f\u4e00\u7684\u4f5c\u7528: \u626f\u6de1, \u4ea4\u6d41, \u5206\u4eab, \u4ee5\u4e0a\u51e0\u6761\u4e3a\u524d\u63d0)\n\no --- o1\no --- o2\no --- o3\no1 --- o11\no1 --- o12\no2 --- o21\no2 --- o22\no2 --- o23\no3 --- o31\no3 --- o32\no3 --- o33\no3 --- o34\no11 --- o111\no111 -.- o1111\no111 -.- o1112\no11 --- o112\no11 --- o113\no113 -.- o1131\no113 -.- o1132\no11 --- o114\no11 --- o115\no11 --- o116\no12 --- o121\no12 --- o122\no12 --- o123\no22 --- o221\no22 --- o222\no22 --- o223\no22 --- o224\no23 --- o231\no23 --- o232\no31 --- o311\no31 --- o312\no31 --- o313\no31 --- o314\n\nstyle o fill:black,stroke:black,stroke-width:1px,color:white\nstyle o1 fill:#f22816,stroke:#f22816,stroke-width:1px,color:white\nstyle o2 fill:#f2b807,stroke:#f2b807,stroke-width:1px,color:white\nstyle o3 fill:#233ed9,stroke:#233ed9,stroke-width:1px,color:white\nstyle o11 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o12 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o111 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o112 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o113 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o114 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o115 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o116 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o121 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o122 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o123 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o1111 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o1112 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o1131 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o1132 fill:#fcd4d0,stroke:#fcd4d0,stroke-width:1px\nstyle o21 fill:#fcf1cd,stroke:#fcf1cd,stroke-width:1px\nstyle o22 fill:#fcf1cd,stroke:#fcf1cd,stroke-width:1px\nstyle o221 fill:#fcf1cd,stroke:#fcf1cd,stroke-width:1px\nstyle o222 fill:#fcf1cd,stroke:#fcf1cd,stroke-width:1px\nstyle o223 fill:#fcf1cd,stroke:#fcf1cd,stroke-width:1px\nstyle o224 fill:#fcf1cd,stroke:#fcf1cd,stroke-width:1px\nstyle o23 fill:#fcf1cd,stroke:#fcf1cd,stroke-width:1px\nstyle o231 fill:#fcf1cd,stroke:#fcf1cd,stroke-width:1px\nstyle o232 fill:#fcf1cd,stroke:#fcf1cd,stroke-width:1px\n\nlinkStyle 0 stroke:#f22816,stroke-width:5px;\nlinkStyle 1 stroke:#f2b807,stroke-width:5px;\nlinkStyle 2 stroke:#233ed9,stroke-width:5px;\nlinkStyle 3 stroke:#f22816,stroke-width:3px;\nlinkStyle 4 stroke:#f22816,stroke-width:3px;\nlinkStyle 5 stroke:#f2b807,stroke-width:3px;\nlinkStyle 6 stroke:#f2b807,stroke-width:3px;\nlinkStyle 7 stroke:#f2b807,stroke-width:3px;\nlinkStyle 8 stroke:#233ed9,stroke-width:3px;\nlinkStyle 9 stroke:#233ed9,stroke-width:3px;\nlinkStyle 10 stroke:#233ed9,stroke-width:3px;\nlinkStyle 11 stroke:#233ed9,stroke-width:3px;\n</code></pre>"},{"location":"Miscellaneous/prompt/prompt/","title":"Prompt","text":"<p> \u7ea6 1470 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f</p> <p>Abstract</p> <p>\u672c\u6587\u7684\u8d77\u56e0\u662f GitHub \u4e0a\u4e00\u4f4d\u5927\u4f6c\u7ed9 Claude3.5 \u5199\u4e86\u4e00\u4e2a Prompt \uff0c\u628a o1 \u7ea7\u522b\u7684\u601d\u7ef4\u94fe\u590d\u523b\u5230 Claude3.5 \u4e0a\u3002\u8fd9\u8fb9\u7559\u4e0b GitHub \u6307\u8def\u94fe\u63a5</p> <p>\u6240\u4ee5\u4e0a\u7f51\u641c\u96c6\u4e86\u4e00\u4e9b\u8d44\u6599\u6574\u5408\u4e86\u4e00\u4e0b\uff0c\u8bb0\u5f55\u4e0b\u6765\u3002</p> <p>\u6240\u4ee5\u4ec0\u4e48\u662f Prompt \u5462\uff1f</p> <p>Prompt \u662f\u4e00\u79cd\u5f15\u5bfc\u6a21\u578b\u751f\u6210\u7279\u5b9a\u7c7b\u578b\u8f93\u51fa\u7684\u4eba\u5de5\u8f93\u5165\u3002\u5b83\u901a\u5e38\u5305\u542b\u4e00\u4e9b\u6307\u793a\u3001\u4e0a\u4e0b\u6587\u6216\u793a\u4f8b\uff0c\u4ee5\u5e2e\u52a9\u6a21\u578b\u7406\u89e3\u7528\u6237\u7684\u9700\u6c42\u5e76\u751f\u6210\u76f8\u5e94\u7684\u56de\u7b54\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4ece GPT \u7684\u53d1\u5c55\u6765\u4e86\u89e3 Prompt \u3002</p> <p>\u9636\u6bb51\uff1a</p> <p>GPT-1 \u8bde\u751f\u5728 Transformer \u521d\u671f\uff0c\u662f\u6700\u65e9\u671f\u57fa\u4e8e Transformer \u67b6\u6784\u6253\u9020\u7684\u6a21\u578b\u4e4b\u4e00\uff0c\u901a\u8fc7 \"pretrain + finetune\" \u7684\u65b9\u5f0f\uff0c\u9996\u5148\u8ba9\u6a21\u578b\u5728\u5927\u91cf\u672a\u6807\u6ce8\u7684\u6570\u636e\u4e0a\u81ea\u76d1\u7763\u7684\u8fdb\u884c\u5b66\u4e60\uff0c\u5b8c\u6210\u9884\u8bad\u7ec3\uff0c\u968f\u540e\u5728\u5e94\u7528\u65f6\u518d\u4f7f\u7528\u6709\u76d1\u7763\u6570\u636e\u8fdb\u884c\u5fae\u8c03\uff0c\u4ee5\u6b64\u8ba9\u6a21\u578b\u53ef\u4ee5\u9002\u7528\u4e8e\u5404\u79cd\u4efb\u52a1\u3002</p> <p>\u9636\u6bb52\uff1a</p> <p>\u76f8\u6bd4 GPT-1\uff0cGPT-2 \u7b2c\u4e00\u6b21\u63d0\u51fa\u4e86\u5168\u65b0\u7684\u8303\u5f0f\uff0c\u5f53\u6211\u4eec\u6269\u5927\u6a21\u578b\u89c4\u6a21\u589e\u52a0\u8bad\u7ec3\u6570\u636e\uff0c\u8ba9\u6a21\u578b\u5728\u4e00\u4e2a\u79f0\u4e3a WebText \u7684\u7531\u6570\u767e\u4e07\u4e2a\u7f51\u9875\u7ec4\u6210\u7684\u6570\u636e\u96c6\u4e0a\u5b8c\u6210\u9884\u8bad\u7ec3\u540e\uff0c\u6a21\u578b\u4e0d\u518d\u9700\u8981\u4efb\u4f55\u76d1\u7763\u6570\u636e\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u5404\u7c7b\u4efb\u52a1\u3002\u5728 OpenAI \u7684 Blog \u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u56e2\u961f\u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\u53d1\u73b0\uff0c\u63d0\u5347\u6a21\u578b\u89c4\u6a21\u53ca\u8bad\u7ec3\u6570\u636e\u7684\u4f53\u91cf\uff0c\u53ef\u4ee5\u8ba9\u6a21\u578b\u5728 zero-shot \u4efb\u52a1\u4e2d\u7684\u6548\u679c\u660e\u663e\u63d0\u5347\u3002\u8fd9\u4e5f\u88ab\u89c6\u4e3a scaling law \u7684\u7b2c\u4e00\u6b21\u53d1\u73b0\u3002</p> <p>Scaling Law</p> <p>\u8bed\u8a00\u6a21\u578b\u6027\u80fd\u4e0e\u6a21\u578b\u5927\u5c0f\u3001\u6570\u636e\u5927\u5c0f\u548c\u8ba1\u7b97\u9884\u7b97\u4e4b\u95f4\u7684\u5173\u7cfb\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u6a21\u578b\u5f62\u72b6\u5bf9\u6027\u80fd\u5f71\u54cd\u4e0d\u5927\uff1a\u5728\u4fdd\u6301\u603b\u53c2\u6570\u6570\u91cf\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u6539\u53d8\u6a21\u578b\u7684\u5f62\u72b6\uff08\u5982\u5bbd\u5ea6\u3001\u6df1\u5ea6\u7b49\uff09\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u975e\u5e38\u5c0f\u3002\u5bf9\u4e8e\u4e0d\u540c\u5f62\u72b6\u7684\u6a21\u578b\uff0c\u635f\u5931\u53ea\u4f1a\u6709\u51e0\u4e2a\u767e\u5206\u70b9\u7684\u53d8\u5316\u3002</p> </li> <li> <p>\u6027\u80fd\u968f\u6a21\u578b\u5927\u5c0f\u548c\u6570\u636e\u5927\u5c0f\u7684\u589e\u52a0\u800c\u63d0\u9ad8\uff1a\u8bed\u8a00\u6a21\u578b\u7684\u6027\u80fd\u968f\u7740\u6a21\u578b\u5927\u5c0f\u3001\u6570\u636e\u5927\u5c0f\u548c\u8ba1\u7b97\u9884\u7b97\u7684\u589e\u52a0\u800c\u63d0\u9ad8\u3002\u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u589e\u52a0\u6570\u636e\u5927\u5c0f\u53ef\u80fd\u6bd4\u589e\u52a0\u6a21\u578b\u5927\u5c0f\u66f4\u6709\u6548\u3002</p> </li> <li> <p>\u6027\u80fd\u968f\u8ba1\u7b97\u9884\u7b97\u7684\u589e\u52a0\u800c\u63d0\u9ad8\uff1a\u5728\u76f8\u540c\u7684\u6a21\u578b\u5927\u5c0f\u548c\u6570\u636e\u5927\u5c0f\u4e0b\uff0c\u589e\u52a0\u8ba1\u7b97\u9884\u7b97\u53ef\u4ee5\u63d0\u9ad8\u8bed\u8a00\u6a21\u578b\u7684\u6027\u80fd\u3002\u7136\u800c\uff0c\u5f53\u8ba1\u7b97\u9884\u7b97\u589e\u52a0\u5230\u4e00\u5b9a\u7a0b\u5ea6\u540e\uff0c\u8fdb\u4e00\u6b65\u589e\u52a0\u8ba1\u7b97\u9884\u7b97\u53ef\u80fd\u53ea\u4f1a\u5e26\u6765\u5fae\u5c0f\u7684\u6027\u80fd\u63d0\u5347\u3002</p> </li> <li> <p>\u6700\u4f18\u6a21\u578b\u5927\u5c0f\u548c\u8ba1\u7b97\u9884\u7b97\u53d6\u51b3\u4e8e\u4efb\u52a1\u548c\u6570\u636e\u96c6\uff1a\u5bf9\u4e8e\u4e0d\u540c\u7684\u4efb\u52a1\u548c\u6570\u636e\u96c6\uff0c\u6700\u4f18\u7684\u6a21\u578b\u5927\u5c0f\u548c\u8ba1\u7b97\u9884\u7b97\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u4e0d\u540c\u7684\u4efb\u52a1\u548c\u6570\u636e\u96c6\u5177\u6709\u4e0d\u540c\u7684\u590d\u6742\u6027\u548c\u6570\u636e\u5206\u5e03\u3002</p> </li> <li> <p>\u8fc7\u62df\u5408\u968f\u6a21\u578b\u5927\u5c0f\u548c\u6570\u636e\u5927\u5c0f\u7684\u589e\u52a0\u800c\u589e\u52a0\uff1a\u8bed\u8a00\u6a21\u578b\u7684\u8fc7\u62df\u5408\u7a0b\u5ea6\u968f\u7740\u6a21\u578b\u5927\u5c0f\u548c\u6570\u636e\u5927\u5c0f\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002\u4e3a\u4e86\u51cf\u8f7b\u8fc7\u62df\u5408\uff0c\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u5316\u6280\u672f\uff0c\u5982 dropout\u3002</p> </li> <li> <p>\u5b66\u4e60\u901f\u5ea6\u968f\u6a21\u578b\u5927\u5c0f\u7684\u589e\u52a0\u800c\u964d\u4f4e\uff1a\u8bed\u8a00\u6a21\u578b\u7684\u5b66\u4e60\u901f\u5ea6\u968f\u7740\u6a21\u578b\u5927\u5c0f\u7684\u589e\u52a0\u800c\u964d\u4f4e\u3002\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u8f83\u5927\u7684\u6a21\u578b\u9700\u8981\u66f4\u591a\u7684\u65f6\u95f4\u6765\u8c03\u6574\u5176\u53c2\u6570\u3002</p> </li> <li> <p>\u6700\u4f18\u5b66\u4e60\u7387\u53d6\u51b3\u4e8e\u4efb\u52a1\u548c\u6a21\u578b\u7ed3\u6784\uff1a\u6700\u4f18\u7684\u5b66\u4e60\u7387\u53ef\u80fd\u4f1a\u56e0\u4efb\u52a1\u548c\u6a21\u578b\u7ed3\u6784\u7684\u4e0d\u540c\u800c\u6709\u6240\u53d8\u5316\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u9009\u62e9\u5408\u9002\u7684\u5b66\u4e60\u7387\u3002</p> </li> <li> <p>\u786c\u4ef6\u9650\u5236\u53ef\u80fd\u5f71\u54cd\u6a21\u578b\u5927\u5c0f\u548c\u8ba1\u7b97\u9884\u7b97\u7684\u9009\u62e9\uff1a\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u786c\u4ef6\u9650\u5236\u53ef\u80fd\u4f1a\u5f71\u54cd\u6a21\u578b\u5927\u5c0f\u548c\u8ba1\u7b97\u9884\u7b97\u7684\u9009\u62e9\u3002\u4f8b\u5982\uff0c\u5f53\u8ba1\u7b97\u8d44\u6e90\u6709\u9650\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u9009\u62e9\u8f83\u5c0f\u7684\u6a21\u578b\u548c\u8f83\u4f4e\u7684\u8ba1\u7b97\u9884\u7b97\u3002</p> </li> </ul> <p>\u7136\u800c Scaling law \u8bba\u6587\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u524d\u63d0\u6761\u4ef6\uff0c\u5c31\u662f\u90fd\u662f\u6807\u51c6\u7684transformer\u6a21\u578b\u7ed3\u6784\u3002\u5982\u679c\u4e0d\u662f\uff0cscaling law\u662f\u5931\u6548\u4e86\u7684\u3002\u539f\u8bba\u6587\u6709\u505a\u5bf9\u6bd4\u8bd5\u9a8c\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u8bba\u6587,2019\u5e74\u7684ACL Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context\u3002</p> <p>\u9636\u6bb53\uff1a</p> <p>\u6cbf\u7740 GPT-2 \u589e\u5927\u6a21\u578b\u4f53\u91cf\u548c\u8bad\u7ec3\u6570\u636e\u89c4\u6a21\u7684\u601d\u8def\uff0cGPT-3 \u4f7f\u7528\u4e86 570G \u7684\u8bad\u7ec3\u6570\u636e\uff0c\u8fbe\u5230\u4e86 GPT-2 \u768415\u500d\uff0c\u53c2\u6570\u91cf\u66f4\u662f\u8fbe\u5230\u4e86\u60ca\u4eba\u7684 1750B\uff0c\u662f GPT-2 \u7684 116 \u500d\u3002\u53c2\u6570\u91cf\u7684\u63d0\u5347\u8ba9\u6a21\u578b\u5728\u5404\u4e2a\u9886\u57df\u4e2d\u90fd\u5c55\u73b0\u51fa\u4e86\u4ee4\u4eba\u60ca\u8273\u7684\u6548\u679c\uff0c\u5c24\u5176\u662f\u5728 zero-shot \u65b9\u9762\u3002</p> <p>\u9636\u6bb54\uff1a</p> <p>OpenAI \u5728 GPT-3 \u7684\u57fa\u7840\u4e0a\u9488\u5bf9\u4e0d\u540c\u573a\u666f\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5728 \"\u591a\u8f6e\u5bf9\u8bdd\" \u7684\u4f18\u5316\u4e2d\u8bde\u751f\u4e86 \"ChatGPT\"\uff0c\u968f\u540e\u6210\u4e3a\u4e86\u4e16\u754c\u4e0a\u6700\u706b\u70ed\u7684\u8bdd\u9898\uff0c\u4e5f\u88ab\u8ba4\u4e3a\u662f AI \u5e02\u573a\u5316\u7684\u8d77\u70b9\u3002</p> <p>\u4ece\u9886\u57df\u53d1\u5c55\u7684\u89d2\u5ea6\u6211\u4eec\u53ef\u4ee5\u770b\u5230 3 \u79cd\u4e0d\u540c\u7684\u7814\u53d1\u8303\u5f0f\uff1a</p> <ol> <li>Transformer \u4e4b\u524d\uff1a\u6709\u76d1\u7763\u8bad\u7ec3\uff08train\uff09</li> <li>GPT1\uff1a\u65e0\u76d1\u7763\u9884\u8bad\u7ec3\uff08pre-train\uff09 + \u6709\u76d1\u7763\u5fae\u8c03\uff08finetune\uff09</li> <li>GPT2 &amp; GPT3\uff1a\u65e0\u76d1\u7763\u9884\u8bad\u7ec3\uff08pre-train\uff09 + \u63d0\u793a\u8bcd\uff08Prompt\uff09</li> </ol> <p>\u6211\u4eec\u8981\u505a\u7684\u662f\u901a\u8fc7 Prompt \u8c03\u7528\u5927\u6a21\u578b\u7684\u80fd\u529b\u53bb\u89e3\u51b3\u95ee\u9898\uff0c\u8ba9\u8fd9\u4e9b\u80fd\u529b\u8868\u73b0\u7684\u66f4\u7cbe\u51c6\uff0c\u800c\u5e76\u975e\u628a\u4ed6\u5f53\u6210\u4e00\u4e2a\u77e5\u8bc6\u5e93\u3002</p> <p>Sam Altman \u5728\u65e9\u671f\u91c7\u8bbf\u4e2d\u4e5f\u63d0\u5230\uff0c\u628a\u5927\u6a21\u578b\u5f53\u6210\u641c\u7d22\u5f15\u64ce\u7684\u5e94\u7528\u65b9\u5f0f\u662f\u9519\u8bef\u7684\uff0c\u667a\u80fd\u7684\u4f53\u73b0\u624d\u662f\u5927\u6a21\u578b\u7684\u5173\u952e\u3002</p> <p>\u8fd9\u91cc\u8981\u653e\u4e00\u7bc7\u795e\u6587\u94fe\u63a5(\u5176\u5b9e\u4f60\u5f88\u96be\u60f3\u8c61\u4e00\u4e2a\u8003\u8bd5\u5468\u7684\u4eba\u8fd8\u82b1\u65f6\u95f4\u5728\u8fd9\u91cc\u5b66 Prompt \u5230\u5e95\u662f\u4ec0\u4e48\u60f3\u6cd5\uff0c\u6240\u4ee5\u6211\u8bf4\u6211\u4e4b\u540e\u4e00\u5b9a\u4f1a\u53bb\u770b\u7684\u4e5f\u662f\u5f88\u6709\u9053\u7406\u7684)</p> <p>TO-DO</p> <ul> <li> \u5927\u6982\u4f1a\u60f3\u81ea\u5df1\u5199\u4e00\u4e2a\u7b80\u5355\u7684 Prompt \uff0c\u7136\u540e\u770b\u770b\u6548\u679c\u5982\u4f55\uff0c\u5173\u4e8e\u5982\u4f55\u5199\u5982\u4f55\u4f18\u5316 Prompt \u6211\u60f3\u6211\u8fd8\u662f\u4f1a\u8bb0\u5f55\u7684\uff0c\u6240\u4ee5\u7559\u4e00\u4e2a TODO \u5427\u3002</li> </ul> <p>Reference</p> <p>\u300a\u4e00\u6587\u638c\u63e1Prompt\uff1a\u4e07\u80fd\u6846\u67b6+\u4f18\u5316\u6280\u5de7+\u5e38\u7528\u6307\u6807\u300b\u5218\u742e\u73ae</p>"}]}